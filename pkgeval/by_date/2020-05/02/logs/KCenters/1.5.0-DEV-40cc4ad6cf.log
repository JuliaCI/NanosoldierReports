Julia Version 1.5.0-DEV.784
Commit 40cc4ad6cf (2020-05-02 14:31 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Missings ──────────────────── v0.4.3
  Installed TableTraits ───────────────── v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Tables ────────────────────── v1.0.4
  Installed JSON ──────────────────────── v0.21.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed StatsBase ─────────────────── v0.32.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed Compat ────────────────────── v3.9.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed InvertedIndices ───────────── v1.0.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Parsers ───────────────────── v1.0.2
  Installed OrderedCollections ────────── v1.1.0
  Installed MLDataUtils ───────────────── v0.5.1
  Installed DataStructures ────────────── v0.17.15
  Installed DataFrames ────────────────── v0.20.2
  Installed Reexport ──────────────────── v0.2.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed PooledArrays ──────────────── v0.5.3
  Installed DataAPI ───────────────────── v1.3.0
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed MLDataPattern ─────────────── v0.5.3
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.9.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.15
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.2
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_SHuLY1/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_SHuLY1/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.9.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9323044313987097
[ Info: 0.8307796732584636
[ Info: 0.5548888477186362
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33249090395867825
mean(cdnet.distances) = 0.3632686992486318
mean(crand.distances) = 0.3378913975507021
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4599609375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4599609375,"f1":null,"seconds":3.3173710107803345e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":6.65625,"distances_sum":1190.7762782412549}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4580078125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4580078125,"f1":null,"seconds":3.6675482988357544e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":6.578125,"distances_sum":1217.8432453038304}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4599609375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.4599609375,"f1":null,"seconds":3.3173710107803345e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":6.65625,"distances_sum":1190.7762782412549}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.8003552003552012,"seconds":4.773959517478943e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":7.7578125,"distances_sum":1999.0082919480956}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8608833874458884,"seconds":5.086883902549744e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.2265625,"distances_sum":2302.1643979010933}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8713458416583426,"seconds":5.0496309995651245e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.2734375,"distances_sum":2406.1030699293538}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.681640625, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.681640625,"f1":0.8005950646575655,"seconds":4.6584755182266235e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":7.7734375,"distances_sum":1970.2344202070763}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8542931027306035,"seconds":5.109235644340515e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.203125,"distances_sum":2291.415726659077}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78125,"f1":0.8713458416583426,"seconds":5.0496309995651245e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.2734375,"distances_sum":2406.1030699293538}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8983776640026649,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.296875,"distances_sum":2515.71852116325}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9461538461538467,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.8125,"distances_sum":2995.2152759800997}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9563472985347992,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.7890625,"distances_sum":3065.3770412515682}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9188160797535805,"seconds":5.865469574928284e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.4296875,"distances_sum":2728.875094258345}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.934197573260074,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.5390625,"distances_sum":2851.4574804344684}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9563472985347992,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.7890625,"distances_sum":3065.3770412515682}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.923828125,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9563472985347992,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.7890625,"distances_sum":3065.3770412515682}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.375,"f1":null,"seconds":3.2819807529449463e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.0078125,"distances_sum":1020.4949503390718}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.375,"f1":null,"seconds":3.2819807529449463e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.0078125,"distances_sum":1020.4949503390718}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.81640625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.81640625,"f1":0.8895328629703634,"seconds":5.25452196598053e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.359375,"distances_sum":2601.4451946658596}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.81640625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.81640625,"f1":0.8895328629703634,"seconds":5.25452196598053e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.359375,"distances_sum":2601.4451946658596}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9599931318681323,"seconds":5.502253770828247e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.921875,"distances_sum":3071.869064239531}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9599931318681323,"seconds":5.502253770828247e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.921875,"distances_sum":3071.869064239531}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9599931318681323,"seconds":5.502253770828247e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.921875,"distances_sum":3071.869064239531}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5107421875, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.5107421875,"f1":null,"seconds":3.8780272006988525e-6,"exhaustive_search_seconds":1.2405216693878174e-6,"evaluations":7.625,"distances_sum":1324.2362583575302}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1884765625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1884765625,"f1":null,"seconds":3.0081719160079956e-6,"exhaustive_search_seconds":1.2405216693878174e-6,"evaluations":6.4453125,"distances_sum":533.9210284821319}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5107421875,"state":{"ssize":5,"bsize":3},"perf":{"precision":null,"recall":0.5107421875,"f1":null,"seconds":3.8780272006988525e-6,"exhaustive_search_seconds":1.2405216693878174e-6,"evaluations":7.625,"distances_sum":1324.2362583575302}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9289720695970706,"seconds":5.384907126426697e-6,"exhaustive_search_seconds":1.2405216693878174e-6,"evaluations":8.8359375,"distances_sum":2732.043989429258}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8759765625,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8759765625,"f1":0.9289720695970706,"seconds":5.384907126426697e-6,"exhaustive_search_seconds":1.2405216693878174e-6,"evaluations":8.8359375,"distances_sum":2732.043989429258}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9690876831501835,"seconds":5.912035703659058e-6,"exhaustive_search_seconds":1.2405216693878174e-6,"evaluations":8.9296875,"distances_sum":3075.468011493289}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9544356684981689,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.2405216693878174e-6,"evaluations":8.8515625,"distances_sum":2949.8604370071985}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9690876831501835,"seconds":5.912035703659058e-6,"exhaustive_search_seconds":1.2405216693878174e-6,"evaluations":8.9296875,"distances_sum":3075.468011493289}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9690876831501835,"seconds":5.912035703659058e-6,"exhaustive_search_seconds":1.2405216693878174e-6,"evaluations":8.9296875,"distances_sum":3075.468011493289}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.59765625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.59765625,"f1":0.7362344252969261,"seconds":4.59328293800354e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":7.203125,"distances_sum":1782.408134327205}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1357421875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1357421875,"f1":null,"seconds":2.6971101760864258e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":3.90625,"distances_sum":456.3158603249789}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.59765625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.59765625,"f1":0.7362344252969261,"seconds":4.59328293800354e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":7.203125,"distances_sum":1782.408134327205}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9243074633699639,"seconds":5.289912223815918e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.4296875,"distances_sum":2880.874140027872}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8701171875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.8701171875,"f1":0.9243074633699639,"seconds":5.289912223815918e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.4296875,"distances_sum":2880.874140027872}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.975372023809524,"seconds":6.2230974435806274e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.90625,"distances_sum":3171.823074093837}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9717834249084254,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8515625,"distances_sum":3168.566895225709}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9506181318681324,"seconds":5.850568413734436e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8046875,"distances_sum":2970.4782756284944}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.975372023809524,"seconds":6.2230974435806274e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.90625,"distances_sum":3171.823074093837}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.975372023809524,"seconds":6.2230974435806274e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.90625,"distances_sum":3171.823074093837}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5068359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5068359375,"f1":0.6588028291153296,"seconds":4.0512531995773315e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":6.40625,"distances_sum":1412.7134399543347}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5068359375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5068359375,"f1":0.6588028291153296,"seconds":4.0512531995773315e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":6.40625,"distances_sum":1412.7134399543347}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8426474567099577,"seconds":5.0943344831466675e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.140625,"distances_sum":2173.904681868006}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7791838369963379,"seconds":4.818663001060486e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":7.6171875,"distances_sum":1828.0988044963146}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7490234375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7490234375,"f1":0.8426474567099577,"seconds":5.0943344831466675e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.140625,"distances_sum":2173.904681868006}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9049851190476198,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.46875,"distances_sum":2607.875425803635}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.930832188644689,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.65625,"distances_sum":2796.5970514731544}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9220498251748258,"seconds":5.763024091720581e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.5859375,"distances_sum":2691.2036739408795}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8471367174492184,"seconds":4.9602240324020386e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.125,"distances_sum":2169.128470607699}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8627070845820854,"seconds":5.260109901428223e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.1875,"distances_sum":2248.081323269726}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8828125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8828125,"f1":0.930832188644689,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.65625,"distances_sum":2796.5970514731544}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8828125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8828125,"f1":0.930832188644689,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.65625,"distances_sum":2796.5970514731544}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5205078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5205078125,"f1":null,"seconds":3.958120942115784e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":6.609375,"distances_sum":1375.5101495281801}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1650390625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1650390625,"f1":null,"seconds":2.9690563678741455e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":4.8671875,"distances_sum":449.25447237622535}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5205078125,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5205078125,"f1":null,"seconds":3.958120942115784e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":6.609375,"distances_sum":1375.5101495281801}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8957651723276733,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.109375,"distances_sum":2543.5005217935222}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.822265625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.822265625,"f1":0.8957651723276733,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.109375,"distances_sum":2543.5005217935222}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9593635531135536,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.75,"distances_sum":3061.2677918738755}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9593635531135536,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.75,"distances_sum":3061.2677918738755}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.927734375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9593635531135536,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.75,"distances_sum":3061.2677918738755}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1904296875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1904296875,"f1":null,"seconds":3.291293978691101e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":6.078125,"distances_sum":479.4590904638663}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6669921875,"f1":0.7870213120213125,"seconds":4.936009645462036e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.9453125,"distances_sum":1880.6574089067665}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6669921875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6669921875,"f1":0.7870213120213125,"seconds":4.936009645462036e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.9453125,"distances_sum":1880.6574089067665}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9442250457875462,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.7578125,"distances_sum":2888.523588998766}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9442250457875462,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.7578125,"distances_sum":2888.523588998766}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9484603937728943,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8046875,"distances_sum":2956.0272166272216}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.9484603937728943,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8046875,"distances_sum":2956.0272166272216}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9111328125,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.9484603937728943,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8046875,"distances_sum":2956.0272166272216}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.56640625, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.56640625,"f1":0.708142725330226,"seconds":4.377216100692749e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":6.96875,"distances_sum":1184.9069466647375}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5576171875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5576171875,"f1":0.6984022921522928,"seconds":4.319474101066589e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":6.8671875,"distances_sum":1156.4885446553944}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7314453125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7314453125,"f1":0.836591013153514,"seconds":5.088746547698975e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.0625,"distances_sum":1598.394591630709}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7314453125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7314453125,"f1":0.836591013153514,"seconds":5.088746547698975e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.0625,"distances_sum":1598.394591630709}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9661286630036632,"seconds":5.971640348434448e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.90625,"distances_sum":2325.3480128830497}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.810546875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.810546875,"f1":0.8902529761904769,"seconds":5.725771188735962e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.671875,"distances_sum":1803.1640834021346}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9661286630036632,"seconds":5.971640348434448e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.90625,"distances_sum":2325.3480128830497}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96875, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.96875,"f1":0.9827953296703298,"seconds":6.606802344322205e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.984375,"distances_sum":2418.709181832439}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96875,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.96875,"f1":0.9827953296703298,"seconds":6.606802344322205e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.984375,"distances_sum":2418.709181832439}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96875,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.96875,"f1":0.9827953296703298,"seconds":6.606802344322205e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.984375,"distances_sum":2418.709181832439}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5595703125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5595703125,"f1":null,"seconds":4.898756742477417e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":7.578125,"distances_sum":1134.8191605232075}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.666015625,"f1":0.7886570027195037,"seconds":4.898756742477417e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.21875,"distances_sum":1418.3352772965043}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.666015625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.666015625,"f1":0.7886570027195037,"seconds":4.898756742477417e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.21875,"distances_sum":1418.3352772965043}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9376378829503835,"seconds":5.250796675682068e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.671875,"distances_sum":2143.8691123852236}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.846461351148852,"seconds":4.934147000312805e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.2109375,"distances_sum":1687.2599646934887}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.912869422244423,"seconds":5.155801773071289e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.6640625,"distances_sum":1959.613683637878}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9376378829503835,"seconds":5.250796675682068e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.671875,"distances_sum":2143.8691123852236}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9559581043956048,"seconds":5.170702934265137e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.8046875,"distances_sum":2253.140570470387}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9650125915750921,"seconds":5.319714546203613e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.84375,"distances_sum":2282.4669609536304}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9650125915750921,"seconds":5.319714546203613e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.84375,"distances_sum":2282.4669609536304}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9650125915750921,"seconds":5.319714546203613e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.84375,"distances_sum":2282.4669609536304}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7793590090465096,"seconds":4.163011908531189e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.546875,"distances_sum":1455.8623723453468}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6572265625,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6572265625,"f1":0.7793590090465096,"seconds":4.163011908531189e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.546875,"distances_sum":1455.8623723453468}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8501555735930743,"seconds":4.561617970466614e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.09375,"distances_sum":1706.0677270550923}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.75,"f1":0.8501555735930743,"seconds":4.561617970466614e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.09375,"distances_sum":1706.0677270550923}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8995509698634706,"seconds":5.014240741729736e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.28125,"distances_sum":1997.810532505559}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9255697427572435,"seconds":5.045905709266663e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.625,"distances_sum":2132.2499035341507}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9412831959706963,"seconds":5.014240741729736e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.6953125,"distances_sum":2273.68666367813}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.949078525641026,"seconds":5.1800161600112915e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7421875,"distances_sum":2299.332448855827}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8944227647352657,"seconds":4.837289452552795e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.3046875,"distances_sum":1915.2576596509973}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.949078525641026,"seconds":5.1800161600112915e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7421875,"distances_sum":2299.332448855827}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9111328125,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.949078525641026,"seconds":5.1800161600112915e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7421875,"distances_sum":2299.332448855827}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5673828125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5673828125,"f1":null,"seconds":3.952533006668091e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.046875,"distances_sum":1295.6741886165257}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5673828125,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5673828125,"f1":null,"seconds":3.952533006668091e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.046875,"distances_sum":1295.6741886165257}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.896502976190477,"seconds":5.515292286872864e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.421875,"distances_sum":2006.1958478840486}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7021484375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.7021484375,"f1":0.8124061702186709,"seconds":4.723668098449707e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.7265625,"distances_sum":1642.6824090332807}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8613298160173167,"seconds":4.941597580909729e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.109375,"distances_sum":1831.5314894514777}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.685546875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.685546875,"f1":0.8028792388167396,"seconds":4.541128873825073e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.765625,"distances_sum":1582.9974167183507}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6943359375, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6943359375,"f1":0.8106690184815193,"seconds":4.610046744346619e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.75,"distances_sum":1593.2638464518352}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6552734375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6552734375,"f1":0.7770389332889341,"seconds":4.706904292106628e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.6484375,"distances_sum":1489.4060072923178}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8212890625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8212890625,"f1":0.896502976190477,"seconds":5.515292286872864e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.421875,"distances_sum":2006.1958478840486}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9211824633699641,"seconds":5.6568533182144165e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.65625,"distances_sum":2173.0767049184574}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9347012362637369,"seconds":5.833804607391357e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.6875,"distances_sum":2263.4002491998785}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9315991300366305,"seconds":5.366280674934387e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.6953125,"distances_sum":2233.311433462638}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9533367673992678,"seconds":5.595386028289795e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8203125,"distances_sum":2399.6991047346387}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9533367673992678,"seconds":5.595386028289795e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8203125,"distances_sum":2399.6991047346387}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91796875,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9533367673992678,"seconds":5.595386028289795e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8203125,"distances_sum":2399.6991047346387}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.234375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.234375,"f1":null,"seconds":3.2614916563034058e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":5.3828125,"distances_sum":529.6072447022143}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3896484375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3896484375,"f1":null,"seconds":3.5408884286880493e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":5.609375,"distances_sum":803.8179079482125}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8657254204129212,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.1171875,"distances_sum":1733.3507027471237}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7734375,"f1":0.8657254204129212,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.1171875,"distances_sum":1733.3507027471237}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9294013278388285,"seconds":5.669891834259033e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.6953125,"distances_sum":2073.8550943255486}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9524813727938733,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7421875,"distances_sum":2285.3979361880943}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9524813727938733,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7421875,"distances_sum":2285.3979361880943}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9623740842490847,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.875,"distances_sum":2303.615640880999}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9569597069597078,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8046875,"distances_sum":2288.7401666349983}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9580986721611726,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8046875,"distances_sum":2304.317550658433}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9623740842490847,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.875,"distances_sum":2303.615640880999}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9623740842490847,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.875,"distances_sum":2303.615640880999}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3857421875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3857421875,"f1":null,"seconds":3.693625330924988e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.2578125,"distances_sum":556.2357398295912}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3466796875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3466796875,"f1":null,"seconds":3.4067779779434204e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":5.9921875,"distances_sum":486.2356977649823}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3857421875,"state":{"ssize":5,"bsize":2},"perf":{"precision":null,"recall":0.3857421875,"f1":null,"seconds":3.693625330924988e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.2578125,"distances_sum":556.2357398295912}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8618067696192705,"seconds":5.479902029037476e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.578125,"distances_sum":1165.0586680393783}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9067854020979028,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8828125,"distances_sum":1268.7750971486544}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8388671875,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8388671875,"f1":0.9067854020979028,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8828125,"distances_sum":1268.7750971486544}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9644917582417586,"seconds":6.891787052154541e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9140625,"distances_sum":1512.2869953306815}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.971354166666667,"seconds":7.074326276779175e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9609375,"distances_sum":1508.5771845726322}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9483287545787551,"seconds":6.398186087608337e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8203125,"distances_sum":1442.3495703149295}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9556979478854482,"seconds":6.584450602531433e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.859375,"distances_sum":1469.39456786087}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.971354166666667,"seconds":7.074326276779175e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9609375,"distances_sum":1508.5771845726322}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.971354166666667,"seconds":7.074326276779175e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9609375,"distances_sum":1508.5771845726322}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8657915001665011,"seconds":5.912035703659058e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.7734375,"distances_sum":1340.221951775969}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.22265625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.22265625,"f1":null,"seconds":3.5222619771957397e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":5.8359375,"distances_sum":357.8109347522511}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.8657915001665011,"seconds":5.912035703659058e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.7734375,"distances_sum":1340.221951775969}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9680460164835168,"seconds":6.621703505516052e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.890625,"distances_sum":1730.7202153651158}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9680460164835168,"seconds":6.621703505516052e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.890625,"distances_sum":1730.7202153651158}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9737179487179491,"seconds":6.720423698425293e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.984375,"distances_sum":1720.7956675123232}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9716796875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9716796875,"f1":0.9846726190476194,"seconds":6.677582859992981e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.984375,"distances_sum":1793.6414943884909}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9716796875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9716796875,"f1":0.9846726190476194,"seconds":6.677582859992981e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.984375,"distances_sum":1793.6414943884909}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9716796875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9716796875,"f1":0.9846726190476194,"seconds":6.677582859992981e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.984375,"distances_sum":1793.6414943884909}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.25390625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.25390625,"f1":null,"seconds":2.0973384380340576e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":6.046875,"distances_sum":319.8335912161488}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6689453125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6689453125,"f1":0.7908211580086588,"seconds":3.0472874641418457e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.5,"distances_sum":979.3843270640359}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.650390625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.650390625,"f1":0.7746498293373301,"seconds":3.159046173095703e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.3515625,"distances_sum":956.4485714690653}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6689453125,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6689453125,"f1":0.7908211580086588,"seconds":3.0472874641418457e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.5,"distances_sum":979.3843270640359}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9415464743589749,"seconds":3.6265701055526733e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.875,"distances_sum":1363.3253625673678}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9534283424908431,"seconds":3.734603524208069e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.8828125,"distances_sum":1413.826568261786}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8536316114441124,"seconds":3.7923455238342285e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.671875,"distances_sum":1108.1359009723508}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8507877539127546,"seconds":3.21120023727417e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.7265625,"distances_sum":1060.6163971689057}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9534283424908431,"seconds":3.734603524208069e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.8828125,"distances_sum":1413.826568261786}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.9825148809523814,"seconds":3.6284327507019043e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":9.0,"distances_sum":1547.9743797448123}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9662603021978025,"seconds":3.7495046854019165e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.9609375,"distances_sum":1463.3766995015794}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":9,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9790006868131869,"seconds":3.6694109439849854e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.9609375,"distances_sum":1539.7296183298977}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":12,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9703697344322347,"seconds":3.546476364135742e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.96875,"distances_sum":1493.9173542172987}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":13,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9758184523809527,"seconds":5.973502993583679e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.9921875,"distances_sum":1509.3375452901603}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9677734375,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9825148809523814,"seconds":3.6284327507019043e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":9.0,"distances_sum":1547.9743797448123}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9677734375,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9825148809523814,"seconds":3.6284327507019043e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":9.0,"distances_sum":1547.9743797448123}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6533203125,"f1":0.7768908175158182,"seconds":4.585832357406616e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":7.9140625,"distances_sum":1001.4872131709748}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5302734375, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.5302734375,"f1":null,"seconds":4.105269908905029e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":6.96875,"distances_sum":784.9013350559469}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.380859375, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.380859375,"f1":null,"seconds":3.4421682357788086e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":5.921875,"distances_sum":544.1709975744575}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6533203125,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6533203125,"f1":0.7768908175158182,"seconds":4.585832357406616e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":7.9140625,"distances_sum":1001.4872131709748}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9285084706959714,"seconds":5.833804607391357e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.796875,"distances_sum":1408.2599963188654}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9461767399267403,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.7890625,"distances_sum":1491.002606862055}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9241961163836172,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.7421875,"distances_sum":1407.8940984097917}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9079040750915758,"seconds":5.345791578292847e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.6171875,"distances_sum":1308.2933474380793}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9461767399267403,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.7890625,"distances_sum":1491.002606862055}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9647206959706962,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.859375,"distances_sum":1584.9631478043423}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9765625000000004,"seconds":5.694106221199036e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.8984375,"distances_sum":1626.1302830816232}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9652358058608063,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.859375,"distances_sum":1580.3804546270217}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9511790293040296,"seconds":5.27501106262207e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.765625,"distances_sum":1507.481268755646}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9765625000000004,"seconds":5.694106221199036e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.8984375,"distances_sum":1626.1302830816232}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9765625000000004,"seconds":5.694106221199036e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.8984375,"distances_sum":1626.1302830816232}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.224609375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.224609375,"f1":null,"seconds":3.1068921089172363e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":5.65625,"distances_sum":258.922147558135}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.224609375,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.224609375,"f1":null,"seconds":3.1068921089172363e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":5.65625,"distances_sum":258.922147558135}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.388671875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.388671875,"f1":null,"seconds":3.641471266746521e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":5.6953125,"distances_sum":521.4389552953315}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.515625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.515625,"f1":0.660238372738373,"seconds":3.945082426071167e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":6.9296875,"distances_sum":684.3750402832723}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.515625,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.515625,"f1":0.660238372738373,"seconds":3.945082426071167e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":6.9296875,"distances_sum":684.3750402832723}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8985150266400276,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.5625,"distances_sum":1199.873593378542}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9308181401931409,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.75,"distances_sum":1334.1230751607202}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9071574259074268,"seconds":5.144625902175903e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.5390625,"distances_sum":1229.268932615697}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.880859375,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.880859375,"f1":0.9308181401931409,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.75,"distances_sum":1334.1230751607202}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.880859375,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.880859375,"f1":0.9308181401931409,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.75,"distances_sum":1334.1230751607202}}, n: 9
mean(cfft.distances) = 0.3324909048503545
mean(cdnet.distances) = 0.3647477413690265
mean(crand.distances) = 0.36082652380042846
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8666666666666667
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8666666666666667
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8822222222222221
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8866666666666667
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8511111111111113
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9222222222222222
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9266666666666666
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8711111111111111
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9333333333333332
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9333333333333332
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.88
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9088888888888889
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8888888888888888
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9311111111111111
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9222222222222222
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.931111111111111
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.888888888888889
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.888888888888889
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8999999999999999
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8577777777777778
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8577777777777778
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9111111111111111
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 5, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 9, 1]]
** centroid: 10, normalized-entropy: 0.46899559358928133, [(2, 9), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 12, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 1, 2, 3, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 5, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 9, 1]]
** centroid: 10, normalized-entropy: 0.46899559358928133, [(2, 9), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 12, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 1, 2, 3, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 5, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 9, 1]]
** centroid: 10, normalized-entropy: 0.46899559358928133, [(2, 9), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 12, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 1, 2, 3, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 5, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 9, 1]]
** centroid: 10, normalized-entropy: 0.46899559358928133, [(2, 9), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 12, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 1, 2, 3, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 5, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 9, 1]]
** centroid: 10, normalized-entropy: 0.46899559358928133, [(2, 9), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 12, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 1, 2, 3, 2]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 5, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 9, 1]]
** centroid: 10, normalized-entropy: 0.46899559358928133, [(2, 9), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 12, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 1, 2, 3, 2]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 5, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 9, 1]]
** centroid: 10, normalized-entropy: 0.46899559358928133, [(2, 9), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 12, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 1, 2, 3, 2]
acc = 0.96
*** finished computation of 12 references, err: [Inf, 0.6500449454784394] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 18]]
** centroid: 1, normalized-entropy: 0.2974722489192896, [(2, 1), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 22, 4]]
** centroid: 5, normalized-entropy: 0.6193821946787638, [(2, 22), (3, 4)]
*** center 6: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 8, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 14, 4]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 14), (3, 4)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
finished with 15 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.23909553475314388] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23909553475314388, 0.16956909351587832] ***
*** finished computation of 7 references, err: [Inf, 0.23909553475314388, 0.16956909351587832] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 81, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [38, 45, 0]]
** centroid: 2, normalized-entropy: 0.9948631079048572, [(1, 38), (2, 45)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [166, 10, 0]]
** centroid: 3, normalized-entropy: 0.314682604134666, [(1, 166), (2, 10)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 10, 23]]
** centroid: 4, normalized-entropy: 0.8849636363831529, [(2, 10), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [93, 18, 0]]
** centroid: 5, normalized-entropy: 0.6394571324851642, [(1, 93), (2, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [99, 1, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 81, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2360701787032779] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2360701787032779, 0.19075430856495426] ***
*** starting iteration: 2; err: [Inf, 0.2360701787032779, 0.19075430856495426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2360701787032779, 0.19075430856495426, 0.1880608911219722] ***
*** starting iteration: 3; err: [Inf, 0.2360701787032779, 0.19075430856495426, 0.1880608911219722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2360701787032779, 0.19075430856495426, 0.1880608911219722, 0.1873408648795609] ***
*** finished computation of 7 references, err: [Inf, 0.2360701787032779, 0.19075430856495426, 0.1880608911219722, 0.1873408648795609] ***
*** center 1: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 59, 26]]
** centroid: 2, normalized-entropy: 0.8883630233845602, [(2, 59), (3, 26)]
*** center 3: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [79, 39, 0]]
** centroid: 4, normalized-entropy: 0.9154450354498175, [(1, 79), (2, 39)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [32, 73, 0]]
** centroid: 5, normalized-entropy: 0.8870341576828725, [(1, 32), (2, 73)]
*** center 6: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [27, 62, 0]]
** centroid: 7, normalized-entropy: 0.8853723770068483, [(1, 27), (2, 62)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2429349330830565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2429349330830565, 0.19104138932943435] ***
*** starting iteration: 2; err: [Inf, 0.2429349330830565, 0.19104138932943435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2429349330830565, 0.19104138932943435, 0.18699730521087524] ***
*** starting iteration: 3; err: [Inf, 0.2429349330830565, 0.19104138932943435, 0.18699730521087524] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2429349330830565, 0.19104138932943435, 0.18699730521087524, 0.18594814152030953] ***
*** finished computation of 7 references, err: [Inf, 0.2429349330830565, 0.19104138932943435, 0.18699730521087524, 0.18594814152030953] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [92, 14, 0]]
** centroid: 1, normalized-entropy: 0.5631028237513912, [(1, 92), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [64, 8, 0]]
** centroid: 2, normalized-entropy: 0.5032583347756457, [(1, 64), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 100, 21]]
** centroid: 3, normalized-entropy: 0.6657699740033017, [(2, 100), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [96, 12, 0]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(1, 96), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [60, 24, 0]]
** centroid: 6, normalized-entropy: 0.8631205685666311, [(1, 60), (2, 24)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 91, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18261237755591223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18261237755591223, 0.1526956352986977] ***
*** starting iteration: 2; err: [Inf, 0.18261237755591223, 0.1526956352986977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18261237755591223, 0.1526956352986977, 0.14922165008004498] ***
*** starting iteration: 3; err: [Inf, 0.18261237755591223, 0.1526956352986977, 0.14922165008004498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18261237755591223, 0.1526956352986977, 0.14922165008004498, 0.14873762252704203] ***
*** finished computation of 7 references, err: [Inf, 0.18261237755591223, 0.1526956352986977, 0.14922165008004498, 0.14873762252704203] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 110, 23]]
** centroid: 1, normalized-entropy: 0.6643689507115365, [(2, 110), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [64, 4, 0]]
** centroid: 3, normalized-entropy: 0.32275695889739825, [(1, 64), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [64, 32, 0]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(1, 64), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [103, 10, 0]]
** centroid: 5, normalized-entropy: 0.43142820800151405, [(1, 103), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [89, 4, 0]]
** centroid: 6, normalized-entropy: 0.2559300438391133, [(1, 89), (2, 4)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 86, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19781081413087817] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19781081413087817, 0.15182951866401947] ***
*** starting iteration: 2; err: [Inf, 0.19781081413087817, 0.15182951866401947] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19781081413087817, 0.15182951866401947, 0.14845305256059635] ***
*** starting iteration: 3; err: [Inf, 0.19781081413087817, 0.15182951866401947, 0.14845305256059635] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19781081413087817, 0.15182951866401947, 0.14845305256059635, 0.1476833377629686] ***
*** finished computation of 7 references, err: [Inf, 0.19781081413087817, 0.15182951866401947, 0.14845305256059635, 0.1476833377629686] ***
*** center 1: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 62, 26]]
** centroid: 3, normalized-entropy: 0.8756633923230399, [(2, 62), (3, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 30, 0]]
** centroid: 5, normalized-entropy: 0.9108783787500366, [(1, 62), (2, 30)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [34, 63, 0]]
** centroid: 6, normalized-entropy: 0.9345275660736609, [(1, 34), (2, 63)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 78, 0]]
** centroid: 7, normalized-entropy: 0.3712323266408756, [(1, 6), (2, 78)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17664829372865395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17664829372865395, 0.15093182622227466] ***
*** starting iteration: 2; err: [Inf, 0.17664829372865395, 0.15093182622227466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17664829372865395, 0.15093182622227466, 0.1472512524144939] ***
*** starting iteration: 3; err: [Inf, 0.17664829372865395, 0.15093182622227466, 0.1472512524144939] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17664829372865395, 0.15093182622227466, 0.1472512524144939, 0.1466921932270647] ***
*** finished computation of 7 references, err: [Inf, 0.17664829372865395, 0.15093182622227466, 0.1472512524144939, 0.1466921932270647] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [127, 4, 0]]
** centroid: 1, normalized-entropy: 0.1970645647430604, [(1, 127), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 14, 0]]
** centroid: 2, normalized-entropy: 0.699772221773307, [(1, 60), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 64, 21]]
** centroid: 3, normalized-entropy: 0.806583102274714, [(2, 64), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 88, 0]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(1, 11), (2, 88)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [21, 79, 0]]
** centroid: 6, normalized-entropy: 0.7414827399312738, [(1, 21), (2, 79)]
*** center 7: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20696826640766455] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20696826640766455, 0.1663771853691478] ***
*** finished computation of 7 references, err: [Inf, 0.20696826640766455, 0.1663771853691478] ***
*** center 1: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [130, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [80, 13, 0]]
** centroid: 3, normalized-entropy: 0.5836753280239112, [(1, 80), (2, 13)]
*** center 4: selecting labels [1, 2, 3] (freq >= 2) [from [20, 117, 8]]
** centroid: 4, normalized-entropy: 0.5518050009579101, [(1, 20), (2, 117), (3, 8)]
*** center 5: selecting labels [1, 2, 3] (freq >= 2) [from [13, 83, 18]]
** centroid: 5, normalized-entropy: 0.7009785769936239, [(1, 13), (2, 83), (3, 18)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [35, 20, 0]]
** centroid: 6, normalized-entropy: 0.9456603046006401, [(1, 35), (2, 20)]
*** center 7: selecting labels [1] (freq >= 2) [from [28, 0, 0]]
finished with 13 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19334433688132882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19334433688132882, 0.1569536860761368] ***
*** finished computation of 7 references, err: [Inf, 0.19334433688132882, 0.1569536860761368] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 93, 8]]
** centroid: 1, normalized-entropy: 0.39938208242459744, [(2, 93), (3, 8)]
*** center 2: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 60, 13]]
** centroid: 3, normalized-entropy: 0.6758635715876156, [(2, 60), (3, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [123, 12, 0]]
** centroid: 4, normalized-entropy: 0.43275015878875417, [(1, 123), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [70, 26, 0]]
** centroid: 5, normalized-entropy: 0.842657877202239, [(1, 70), (2, 26)]
*** center 6: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [19, 58, 0]]
** centroid: 7, normalized-entropy: 0.8060914696192223, [(1, 19), (2, 58)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3540900437141749] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3540900437141749, 0.2694472951042625] ***
*** finished computation of 3 references, err: [Inf, 0.3540900437141749, 0.2694472951042625] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [163, 148, 23]]
** centroid: 1, normalized-entropy: 0.8146805287626621, [(1, 163), (2, 148), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [167, 69, 0]]
** centroid: 2, normalized-entropy: 0.8717667596971788, [(1, 167), (2, 69)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [67, 29, 0]]
** centroid: 3, normalized-entropy: 0.8838226609360483, [(1, 67), (2, 29)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.306765575569285] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.306765575569285, 0.29316809651968273] ***
*** finished computation of 3 references, err: [Inf, 0.306765575569285, 0.29316809651968273] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [292, 32, 0]]
** centroid: 1, normalized-entropy: 0.46506984488164627, [(1, 292), (2, 32)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [19, 201, 26]]
** centroid: 2, normalized-entropy: 0.5464855074023458, [(1, 19), (2, 201), (3, 26)]
*** center 3: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2905297888026781] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2905297888026781, 0.23166136787520133] ***
*** finished computation of 3 references, err: [Inf, 0.2905297888026781, 0.23166136787520133] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 186, 21]]
** centroid: 1, normalized-entropy: 0.47357292491745173, [(2, 186), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [203, 7, 0]]
** centroid: 2, normalized-entropy: 0.2108423003185322, [(1, 203), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [194, 56, 0]]
** centroid: 3, normalized-entropy: 0.7674044165839727, [(1, 194), (2, 56)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2753763568465942] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2753763568465942, 0.2424547768704168] ***
*** starting iteration: 2; err: [Inf, 0.2753763568465942, 0.2424547768704168] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2753763568465942, 0.2424547768704168, 0.2372305692444827] ***
*** starting iteration: 3; err: [Inf, 0.2753763568465942, 0.2424547768704168, 0.2372305692444827] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2753763568465942, 0.2424547768704168, 0.2372305692444827, 0.2369435365163573] ***
*** finished computation of 3 references, err: [Inf, 0.2753763568465942, 0.2424547768704168, 0.2372305692444827, 0.2369435365163573] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [75, 150, 23]]
** centroid: 1, normalized-entropy: 0.8067621282399673, [(1, 75), (2, 150), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [131, 96, 0]]
** centroid: 2, normalized-entropy: 0.9827827900634394, [(1, 131), (2, 96)]
*** center 3: selecting labels [1] (freq >= 1) [from [191, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.27680485544662026] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27680485544662026, 0.23315821174738827] ***
*** starting iteration: 2; err: [Inf, 0.27680485544662026, 0.23315821174738827] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27680485544662026, 0.23315821174738827, 0.22916402790075477] ***
*** starting iteration: 3; err: [Inf, 0.27680485544662026, 0.23315821174738827, 0.22916402790075477] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27680485544662026, 0.23315821174738827, 0.22916402790075477, 0.22789321999753948] ***
*** finished computation of 3 references, err: [Inf, 0.27680485544662026, 0.23315821174738827, 0.22916402790075477, 0.22789321999753948] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [204, 49, 0]]
** centroid: 1, normalized-entropy: 0.7090981117542695, [(1, 204), (2, 49)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [204, 34, 0]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(1, 204), (2, 34)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 150, 26]]
** centroid: 3, normalized-entropy: 0.6041234581483739, [(2, 150), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3804912566904794] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3804912566904794, 0.262267302453652] ***
*** starting iteration: 2; err: [Inf, 0.3804912566904794, 0.262267302453652] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3804912566904794, 0.262267302453652, 0.24036891773940697] ***
*** starting iteration: 3; err: [Inf, 0.3804912566904794, 0.262267302453652, 0.24036891773940697] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3804912566904794, 0.262267302453652, 0.24036891773940697, 0.23523191236115915] ***
*** finished computation of 3 references, err: [Inf, 0.3804912566904794, 0.262267302453652, 0.24036891773940697, 0.23523191236115915] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [47, 161, 21]]
** centroid: 1, normalized-entropy: 0.7207358764367281, [(1, 47), (2, 161), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [144, 88, 0]]
** centroid: 2, normalized-entropy: 0.9575534837147484, [(1, 144), (2, 88)]
*** center 3: selecting labels [1] (freq >= 1) [from [206, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2547460839434809] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2547460839434809, 0.21959824948263978] ***
*** starting iteration: 2; err: [Inf, 0.2547460839434809, 0.21959824948263978] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2547460839434809, 0.21959824948263978, 0.20409084674161118] ***
*** starting iteration: 3; err: [Inf, 0.2547460839434809, 0.21959824948263978, 0.20409084674161118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2547460839434809, 0.21959824948263978, 0.20409084674161118, 0.19543216598161436] ***
*** starting iteration: 4; err: [Inf, 0.2547460839434809, 0.21959824948263978, 0.20409084674161118, 0.19543216598161436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2547460839434809, 0.21959824948263978, 0.20409084674161118, 0.19543216598161436, 0.1899484242246187] ***
*** starting iteration: 5; err: [Inf, 0.2547460839434809, 0.21959824948263978, 0.20409084674161118, 0.19543216598161436, 0.1899484242246187] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2547460839434809, 0.21959824948263978, 0.20409084674161118, 0.19543216598161436, 0.1899484242246187, 0.18699812651164383] ***
*** starting iteration: 6; err: [Inf, 0.2547460839434809, 0.21959824948263978, 0.20409084674161118, 0.19543216598161436, 0.1899484242246187, 0.18699812651164383] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2547460839434809, 0.21959824948263978, 0.20409084674161118, 0.19543216598161436, 0.1899484242246187, 0.18699812651164383, 0.18550968549477198] ***
*** starting iteration: 7; err: [Inf, 0.2547460839434809, 0.21959824948263978, 0.20409084674161118, 0.19543216598161436, 0.1899484242246187, 0.18699812651164383, 0.18550968549477198] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2547460839434809, 0.21959824948263978, 0.20409084674161118, 0.19543216598161436, 0.1899484242246187, 0.18699812651164383, 0.18550968549477198, 0.18458947080275598] ***
*** finished computation of 7 references, err: [Inf, 0.2547460839434809, 0.21959824948263978, 0.20409084674161118, 0.19543216598161436, 0.1899484242246187, 0.18699812651164383, 0.18550968549477198, 0.18458947080275598] ***
*** center 1: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 39, 0]]
** centroid: 3, normalized-entropy: 0.9647995485050873, [(1, 61), (2, 39)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 91, 23]]
** centroid: 4, normalized-entropy: 0.7254230207665605, [(2, 91), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [72, 38, 0]]
** centroid: 5, normalized-entropy: 0.9299429352091801, [(1, 72), (2, 38)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 77, 0]]
** centroid: 6, normalized-entropy: 0.48356837509176975, [(1, 9), (2, 77)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [65, 1, 0]]
** centroid: 7, normalized-entropy: 0.11327430349709665, [(1, 65), (2, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27881169247523374] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27881169247523374, 0.22013618140530283] ***
*** starting iteration: 2; err: [Inf, 0.27881169247523374, 0.22013618140530283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27881169247523374, 0.22013618140530283, 0.2081563168357516] ***
*** starting iteration: 3; err: [Inf, 0.27881169247523374, 0.22013618140530283, 0.2081563168357516] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27881169247523374, 0.22013618140530283, 0.2081563168357516, 0.20424431753994107] ***
*** starting iteration: 4; err: [Inf, 0.27881169247523374, 0.22013618140530283, 0.2081563168357516, 0.20424431753994107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27881169247523374, 0.22013618140530283, 0.2081563168357516, 0.20424431753994107, 0.20256609493528663] ***
*** starting iteration: 5; err: [Inf, 0.27881169247523374, 0.22013618140530283, 0.2081563168357516, 0.20424431753994107, 0.20256609493528663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27881169247523374, 0.22013618140530283, 0.2081563168357516, 0.20424431753994107, 0.20256609493528663, 0.20097936935879213] ***
*** starting iteration: 6; err: [Inf, 0.27881169247523374, 0.22013618140530283, 0.2081563168357516, 0.20424431753994107, 0.20256609493528663, 0.20097936935879213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27881169247523374, 0.22013618140530283, 0.2081563168357516, 0.20424431753994107, 0.20256609493528663, 0.20097936935879213, 0.19857704206306984] ***
*** starting iteration: 7; err: [Inf, 0.27881169247523374, 0.22013618140530283, 0.2081563168357516, 0.20424431753994107, 0.20256609493528663, 0.20097936935879213, 0.19857704206306984] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27881169247523374, 0.22013618140530283, 0.2081563168357516, 0.20424431753994107, 0.20256609493528663, 0.20097936935879213, 0.19857704206306984, 0.19672785497185352] ***
*** starting iteration: 8; err: [Inf, 0.27881169247523374, 0.22013618140530283, 0.2081563168357516, 0.20424431753994107, 0.20256609493528663, 0.20097936935879213, 0.19857704206306984, 0.19672785497185352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27881169247523374, 0.22013618140530283, 0.2081563168357516, 0.20424431753994107, 0.20256609493528663, 0.20097936935879213, 0.19857704206306984, 0.19672785497185352, 0.19601538921238623] ***
*** finished computation of 7 references, err: [Inf, 0.27881169247523374, 0.22013618140530283, 0.2081563168357516, 0.20424431753994107, 0.20256609493528663, 0.20097936935879213, 0.19857704206306984, 0.19672785497185352, 0.19601538921238623] ***
*** center 1: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 62, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 53, 26]]
** centroid: 4, normalized-entropy: 0.9140185106642174, [(2, 53), (3, 26)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [48, 56, 0]]
** centroid: 5, normalized-entropy: 0.9957274520849256, [(1, 48), (2, 56)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [51, 45, 0]]
** centroid: 6, normalized-entropy: 0.9971803988942641, [(1, 51), (2, 45)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [110, 17, 0]]
** centroid: 7, normalized-entropy: 0.5679253419771396, [(1, 110), (2, 17)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24133478311439235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24133478311439235, 0.2102076850197595] ***
*** starting iteration: 2; err: [Inf, 0.24133478311439235, 0.2102076850197595] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24133478311439235, 0.2102076850197595, 0.2040109211827504] ***
*** starting iteration: 3; err: [Inf, 0.24133478311439235, 0.2102076850197595, 0.2040109211827504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24133478311439235, 0.2102076850197595, 0.2040109211827504, 0.20130339261518604] ***
*** starting iteration: 4; err: [Inf, 0.24133478311439235, 0.2102076850197595, 0.2040109211827504, 0.20130339261518604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24133478311439235, 0.2102076850197595, 0.2040109211827504, 0.20130339261518604, 0.1988361626137411] ***
*** starting iteration: 5; err: [Inf, 0.24133478311439235, 0.2102076850197595, 0.2040109211827504, 0.20130339261518604, 0.1988361626137411] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24133478311439235, 0.2102076850197595, 0.2040109211827504, 0.20130339261518604, 0.1988361626137411, 0.19608410212142893] ***
*** starting iteration: 6; err: [Inf, 0.24133478311439235, 0.2102076850197595, 0.2040109211827504, 0.20130339261518604, 0.1988361626137411, 0.19608410212142893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24133478311439235, 0.2102076850197595, 0.2040109211827504, 0.20130339261518604, 0.1988361626137411, 0.19608410212142893, 0.1930498255324596] ***
*** starting iteration: 7; err: [Inf, 0.24133478311439235, 0.2102076850197595, 0.2040109211827504, 0.20130339261518604, 0.1988361626137411, 0.19608410212142893, 0.1930498255324596] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24133478311439235, 0.2102076850197595, 0.2040109211827504, 0.20130339261518604, 0.1988361626137411, 0.19608410212142893, 0.1930498255324596, 0.19020246137617744] ***
*** starting iteration: 8; err: [Inf, 0.24133478311439235, 0.2102076850197595, 0.2040109211827504, 0.20130339261518604, 0.1988361626137411, 0.19608410212142893, 0.1930498255324596, 0.19020246137617744] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24133478311439235, 0.2102076850197595, 0.2040109211827504, 0.20130339261518604, 0.1988361626137411, 0.19608410212142893, 0.1930498255324596, 0.19020246137617744, 0.188987075993121] ***
*** starting iteration: 9; err: [Inf, 0.24133478311439235, 0.2102076850197595, 0.2040109211827504, 0.20130339261518604, 0.1988361626137411, 0.19608410212142893, 0.1930498255324596, 0.19020246137617744, 0.188987075993121] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24133478311439235, 0.2102076850197595, 0.2040109211827504, 0.20130339261518604, 0.1988361626137411, 0.19608410212142893, 0.1930498255324596, 0.19020246137617744, 0.188987075993121, 0.18820469722960206] ***
*** finished computation of 7 references, err: [Inf, 0.24133478311439235, 0.2102076850197595, 0.2040109211827504, 0.20130339261518604, 0.1988361626137411, 0.19608410212142893, 0.1930498255324596, 0.19020246137617744, 0.188987075993121, 0.18820469722960206] ***
*** center 1: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 56, 0]]
** centroid: 2, normalized-entropy: 0.9997779672118906, [(1, 58), (2, 56)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 108, 21]]
** centroid: 3, normalized-entropy: 0.6409441847875289, [(2, 108), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [43, 42, 0]]
** centroid: 5, normalized-entropy: 0.9999001572094882, [(1, 43), (2, 42)]
*** center 6: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [49, 43, 0]]
** centroid: 7, normalized-entropy: 0.996929708080541, [(1, 49), (2, 43)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2783927815300678] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2783927815300678, 0.22408430808078353] ***
*** finished computation of 7 references, err: [Inf, 0.2783927815300678, 0.22408430808078353] ***
*** center 1: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [27, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [16, 64, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 16), (2, 64)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [47, 67, 0]]
** centroid: 4, normalized-entropy: 0.9776825423268496, [(1, 47), (2, 67)]
*** center 5: selecting labels [1] (freq >= 2) [from [142, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 7: selecting labels [1, 2, 3] (freq >= 2) [from [38, 114, 23]]
** centroid: 7, normalized-entropy: 0.7987545892091805, [(1, 38), (2, 114), (3, 23)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24238309308864187] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24238309308864187, 0.1946941019403099] ***
*** finished computation of 7 references, err: [Inf, 0.24238309308864187, 0.1946941019403099] ***
*** center 1: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 68, 26]]
** centroid: 2, normalized-entropy: 0.8507707040532602, [(2, 68), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [32, 81, 0]]
** centroid: 3, normalized-entropy: 0.8597555090200143, [(1, 32), (2, 81)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [45, 49, 0]]
** centroid: 4, normalized-entropy: 0.998693408098057, [(1, 45), (2, 49)]
*** center 5: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [75, 35, 0]]
** centroid: 7, normalized-entropy: 0.9023932827949788, [(1, 75), (2, 35)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28742698633713815] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28742698633713815, 0.21545618453734683] ***
*** finished computation of 7 references, err: [Inf, 0.28742698633713815, 0.21545618453734683] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [22, 33, 0]]
** centroid: 1, normalized-entropy: 0.9709505944546688, [(1, 22), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [71, 44, 0]]
** centroid: 2, normalized-entropy: 0.9598636448150405, [(1, 71), (2, 44)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 78, 21]]
** centroid: 3, normalized-entropy: 0.7455178428108284, [(2, 78), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [128, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 20, 0]]
** centroid: 5, normalized-entropy: 0.8849636363831529, [(1, 46), (2, 20)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 61, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [130, 13, 0]]
** centroid: 7, normalized-entropy: 0.43949698692151346, [(1, 130), (2, 13)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2431726742636513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2431726742636513, 0.19661655751345036] ***
*** starting iteration: 2; err: [Inf, 0.2431726742636513, 0.19661655751345036] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2431726742636513, 0.19661655751345036, 0.18837733013351243] ***
*** starting iteration: 3; err: [Inf, 0.2431726742636513, 0.19661655751345036, 0.18837733013351243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2431726742636513, 0.19661655751345036, 0.18837733013351243, 0.18681829526472288] ***
*** finished computation of 7 references, err: [Inf, 0.2431726742636513, 0.19661655751345036, 0.18837733013351243, 0.18681829526472288] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [82, 25, 0]]
** centroid: 1, normalized-entropy: 0.7843112002044088, [(1, 82), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 16, 0]]
** centroid: 2, normalized-entropy: 0.7269625813353975, [(1, 63), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 86, 23]]
** centroid: 3, normalized-entropy: 0.7434073165779199, [(2, 86), (3, 23)]
*** center 4: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 81, 0]]
** centroid: 5, normalized-entropy: 0.7179499765002912, [(1, 20), (2, 81)]
*** center 6: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [57, 38, 0]]
** centroid: 7, normalized-entropy: 0.9709505944546688, [(1, 57), (2, 38)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 9)
[0.9380188571805338, 0.9300318282354211, 0.9010387633142125, 0.8969838101574629, 0.8869827911744079, 0.8849807891724059, 0.8810097522672372, 0.8639777502052951, 0.7910125694556832]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9380188571805338
finished with 10
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.23692393448908586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23692393448908586, 0.20212438731389987] ***
*** starting iteration: 2; err: [Inf, 0.23692393448908586, 0.20212438731389987] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23692393448908586, 0.20212438731389987, 0.1918217047374953] ***
*** starting iteration: 3; err: [Inf, 0.23692393448908586, 0.20212438731389987, 0.1918217047374953] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23692393448908586, 0.20212438731389987, 0.1918217047374953, 0.18875066741011678] ***
*** finished computation of 7 references, err: [Inf, 0.23692393448908586, 0.20212438731389987, 0.1918217047374953, 0.18875066741011678] ***
*** center 1: selecting labels [1] (freq >= 2) [from [121, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [85, 12, 0]]
** centroid: 2, normalized-entropy: 0.5399357331112666, [(1, 85), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [29, 49, 0]]
** centroid: 4, normalized-entropy: 0.9520402801398793, [(1, 29), (2, 49)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 56, 23]]
** centroid: 5, normalized-entropy: 0.8701883352082787, [(2, 56), (3, 23)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 80, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [64, 49, 0]]
** centroid: 7, normalized-entropy: 0.9872516848785046, [(1, 64), (2, 49)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30852687598179573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30852687598179573, 0.2154895530090663] ***
*** starting iteration: 2; err: [Inf, 0.30852687598179573, 0.2154895530090663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30852687598179573, 0.2154895530090663, 0.20149662758738943] ***
*** starting iteration: 3; err: [Inf, 0.30852687598179573, 0.2154895530090663, 0.20149662758738943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30852687598179573, 0.2154895530090663, 0.20149662758738943, 0.19649533426313698] ***
*** finished computation of 7 references, err: [Inf, 0.30852687598179573, 0.2154895530090663, 0.20149662758738943, 0.19649533426313698] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 98, 26]]
** centroid: 1, normalized-entropy: 0.7408656862339816, [(2, 98), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [92, 24, 0]]
** centroid: 2, normalized-entropy: 0.7355085815538399, [(1, 92), (2, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 29, 0]]
** centroid: 3, normalized-entropy: 0.966009606256856, [(1, 45), (2, 29)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 52, 0]]
** centroid: 4, normalized-entropy: 0.9811522341999134, [(1, 72), (2, 52)]
*** center 5: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [62, 30, 0]]
** centroid: 7, normalized-entropy: 0.9108783787500366, [(1, 62), (2, 30)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25517252332606316] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25517252332606316, 0.2062565736567554] ***
*** starting iteration: 2; err: [Inf, 0.25517252332606316, 0.2062565736567554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25517252332606316, 0.2062565736567554, 0.19832277492336606] ***
*** starting iteration: 3; err: [Inf, 0.25517252332606316, 0.2062565736567554, 0.19832277492336606] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25517252332606316, 0.2062565736567554, 0.19832277492336606, 0.19568467703040526] ***
*** finished computation of 7 references, err: [Inf, 0.25517252332606316, 0.2062565736567554, 0.19832277492336606, 0.19568467703040526] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [129, 27, 0]]
** centroid: 1, normalized-entropy: 0.6646953053493416, [(1, 129), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [32, 27, 0]]
** centroid: 2, normalized-entropy: 0.9948131754904235, [(1, 32), (2, 27)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 92, 1]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 93, 20]]
** centroid: 4, normalized-entropy: 0.6734503665674518, [(2, 93), (3, 20)]
*** center 5: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [81, 10, 0]]
** centroid: 6, normalized-entropy: 0.49958440742366095, [(1, 81), (2, 10)]
*** center 7: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 10)
[0.9380188571805338, 0.9300318282354211, 0.9059988131844419, 0.9010387633142125, 0.8969838101574629, 0.8869827911744079, 0.8849807891724059, 0.8810097522672372, 0.8639777502052951, 0.7910125694556832]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9380188571805338
finished with 11
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.23296761928879944] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23296761928879944, 0.18989923385086585] ***
*** starting iteration: 2; err: [Inf, 0.23296761928879944, 0.18989923385086585] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23296761928879944, 0.18989923385086585, 0.18691109855625745] ***
*** starting iteration: 3; err: [Inf, 0.23296761928879944, 0.18989923385086585, 0.18691109855625745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23296761928879944, 0.18989923385086585, 0.18691109855625745, 0.18609346909303073] ***
*** finished computation of 7 references, err: [Inf, 0.23296761928879944, 0.18989923385086585, 0.18691109855625745, 0.18609346909303073] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 77, 19]]
** centroid: 1, normalized-entropy: 0.7177418091697444, [(2, 77), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [64, 27, 0]]
** centroid: 3, normalized-entropy: 0.8772236230732716, [(1, 64), (2, 27)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [79, 21, 0]]
** centroid: 4, normalized-entropy: 0.7414827399312738, [(1, 79), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [75, 37, 0]]
** centroid: 5, normalized-entropy: 0.9152908478124059, [(1, 75), (2, 37)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 84, 4]]
** centroid: 6, normalized-entropy: 0.2667649878030262, [(2, 84), (3, 4)]
*** center 7: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23468854042633006] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23468854042633006, 0.1910446838516256] ***
*** starting iteration: 2; err: [Inf, 0.23468854042633006, 0.1910446838516256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23468854042633006, 0.1910446838516256, 0.18800964798901168] ***
*** starting iteration: 3; err: [Inf, 0.23468854042633006, 0.1910446838516256, 0.18800964798901168] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23468854042633006, 0.1910446838516256, 0.18800964798901168, 0.187912218341104] ***
*** finished computation of 7 references, err: [Inf, 0.23468854042633006, 0.1910446838516256, 0.18800964798901168, 0.187912218341104] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [72, 55, 0]]
** centroid: 1, normalized-entropy: 0.987035991120963, [(1, 72), (2, 55)]
*** center 2: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 62, 26]]
** centroid: 4, normalized-entropy: 0.8756633923230399, [(2, 62), (3, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [69, 36, 0]]
** centroid: 5, normalized-entropy: 0.927526588431676, [(1, 69), (2, 36)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 80, 0]]
** centroid: 6, normalized-entropy: 0.2243269603450881, [(1, 3), (2, 80)]
*** center 7: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2180141619423396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2180141619423396, 0.18842700196882484] ***
*** starting iteration: 2; err: [Inf, 0.2180141619423396, 0.18842700196882484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2180141619423396, 0.18842700196882484, 0.18678759313795879] ***
*** starting iteration: 3; err: [Inf, 0.2180141619423396, 0.18842700196882484, 0.18678759313795879] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2180141619423396, 0.18842700196882484, 0.18678759313795879, 0.18607395348687847] ***
*** finished computation of 7 references, err: [Inf, 0.2180141619423396, 0.18842700196882484, 0.18678759313795879, 0.18607395348687847] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 93, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [73, 15, 0]]
** centroid: 2, normalized-entropy: 0.6587435307694671, [(1, 73), (2, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 75, 21]]
** centroid: 4, normalized-entropy: 0.7578784625383954, [(2, 75), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 62, 0]]
** centroid: 5, normalized-entropy: 0.969803406471299, [(1, 41), (2, 62)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [116, 4, 0]]
** centroid: 6, normalized-entropy: 0.2108423003185322, [(1, 116), (2, 4)]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 11)
[0.9380188571805338, 0.9300318282354211, 0.9280148411884938, 0.9059988131844419, 0.9010387633142125, 0.8969838101574629, 0.8869827911744079, 0.8849807891724059, 0.8810097522672372, 0.8639777502052951, 0.7910125694556832]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9380188571805338
finished with 12
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.20986748440330988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20986748440330988, 0.15434518855697177] ***
*** starting iteration: 2; err: [Inf, 0.20986748440330988, 0.15434518855697177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20986748440330988, 0.15434518855697177, 0.1491133102363356] ***
*** starting iteration: 3; err: [Inf, 0.20986748440330988, 0.15434518855697177, 0.1491133102363356] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20986748440330988, 0.15434518855697177, 0.1491133102363356, 0.14831072539468673] ***
*** finished computation of 7 references, err: [Inf, 0.20986748440330988, 0.15434518855697177, 0.1491133102363356, 0.14831072539468673] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [46, 58, 0]]
** centroid: 1, normalized-entropy: 0.990374836448575, [(1, 46), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [60, 10, 0]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(1, 60), (2, 10)]
*** center 3: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 72, 23]]
** centroid: 4, normalized-entropy: 0.7985237652450764, [(2, 72), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [95, 19, 0]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(1, 95), (2, 19)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 87, 0]]
** centroid: 6, normalized-entropy: 0.2108423003185322, [(1, 3), (2, 87)]
*** center 7: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1882417472191099] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1882417472191099, 0.1533595481639619] ***
*** starting iteration: 2; err: [Inf, 0.1882417472191099, 0.1533595481639619] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1882417472191099, 0.1533595481639619, 0.14837672367951704] ***
*** starting iteration: 3; err: [Inf, 0.1882417472191099, 0.1533595481639619, 0.14837672367951704] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1882417472191099, 0.1533595481639619, 0.14837672367951704, 0.14726340461863036] ***
*** finished computation of 7 references, err: [Inf, 0.1882417472191099, 0.1533595481639619, 0.14837672367951704, 0.14726340461863036] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [96, 28, 0]]
** centroid: 1, normalized-entropy: 0.7706290693639406, [(1, 96), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [75, 15, 0]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(1, 75), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 70, 26]]
** centroid: 3, normalized-entropy: 0.842657877202239, [(2, 70), (3, 26)]
*** center 4: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [12, 92, 0]]
** centroid: 5, normalized-entropy: 0.5159469300074472, [(1, 12), (2, 92)]
*** center 6: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [51, 28, 0]]
** centroid: 7, normalized-entropy: 0.9379626436434424, [(1, 51), (2, 28)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18583118083231945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18583118083231945, 0.15163434113339538] ***
*** starting iteration: 2; err: [Inf, 0.18583118083231945, 0.15163434113339538] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18583118083231945, 0.15163434113339538, 0.1473327419222116] ***
*** starting iteration: 3; err: [Inf, 0.18583118083231945, 0.15163434113339538, 0.1473327419222116] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18583118083231945, 0.15163434113339538, 0.1473327419222116, 0.14657203407017053] ***
*** finished computation of 7 references, err: [Inf, 0.18583118083231945, 0.15163434113339538, 0.1473327419222116, 0.14657203407017053] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [26, 90, 0]]
** centroid: 1, normalized-entropy: 0.7676515870125797, [(1, 26), (2, 90)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [77, 9, 0]]
** centroid: 2, normalized-entropy: 0.48356837509176975, [(1, 77), (2, 9)]
*** center 3: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 53, 21]]
** centroid: 4, normalized-entropy: 0.8605553930586318, [(2, 53), (3, 21)]
*** center 5: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [92, 3, 0]]
** centroid: 6, normalized-entropy: 0.2022494245476988, [(1, 92), (2, 3)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 94, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 12)
[0.9380188571805338, 0.9300318282354211, 0.9280148411884938, 0.9059988131844419, 0.9019978061894229, 0.9010387633142125, 0.8969838101574629, 0.8869827911744079, 0.8849807891724059, 0.8810097522672372, 0.8639777502052951, 0.7910125694556832]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9380188571805338
finished with 12
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9380188571805338, 0.9300318282354211, 0.9280148411884938, 0.9059988131844419, 0.9019978061894229, 0.9010387633142125, 0.8969838101574629, 0.8869827911744079, 0.8849807891724059, 0.8810097522672372, 0.8639777502052951, 0.7910125694556832]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9380188571805338
finished with 12
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9380188571805338, 0.9300318282354211, 0.9280148411884938, 0.9059988131844419, 0.9019978061894229, 0.9010387633142125, 0.8969838101574629, 0.8869827911744079, 0.8849807891724059, 0.8810097522672372, 0.8639777502052951, 0.7910125694556832]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9380188571805338
finished with 12
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9380188571805338, 0.9300318282354211, 0.9280148411884938, 0.9059988131844419, 0.9019978061894229, 0.9010387633142125, 0.8969838101574629, 0.8869827911744079, 0.8849807891724059, 0.8810097522672372, 0.8639777502052951, 0.7910125694556832]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9380188571805338
finished with 13
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.39647507905196566] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39647507905196566, 0.3073320321280051] ***
*** starting iteration: 2; err: [Inf, 0.39647507905196566, 0.3073320321280051] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39647507905196566, 0.3073320321280051, 0.2997193086567942] ***
*** starting iteration: 3; err: [Inf, 0.39647507905196566, 0.3073320321280051, 0.2997193086567942] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39647507905196566, 0.3073320321280051, 0.2997193086567942, 0.298540598900944] ***
*** starting iteration: 4; err: [Inf, 0.39647507905196566, 0.3073320321280051, 0.2997193086567942, 0.298540598900944] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39647507905196566, 0.3073320321280051, 0.2997193086567942, 0.298540598900944, 0.29812109348987853] ***
*** finished computation of 3 references, err: [Inf, 0.39647507905196566, 0.3073320321280051, 0.2997193086567942, 0.298540598900944, 0.29812109348987853] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [94, 150, 23]]
** centroid: 1, normalized-entropy: 0.8216494990408373, [(1, 94), (2, 150), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [109, 96, 0]]
** centroid: 2, normalized-entropy: 0.9970972142863438, [(1, 109), (2, 96)]
*** center 3: selecting labels [1] (freq >= 1) [from [194, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5220770500439765] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5220770500439765, 0.30022101629123293] ***
*** starting iteration: 2; err: [Inf, 0.5220770500439765, 0.30022101629123293] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5220770500439765, 0.30022101629123293, 0.2953106667315853] ***
*** starting iteration: 3; err: [Inf, 0.5220770500439765, 0.30022101629123293, 0.2953106667315853] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5220770500439765, 0.30022101629123293, 0.2953106667315853, 0.29482418164817514] ***
*** finished computation of 3 references, err: [Inf, 0.5220770500439765, 0.30022101629123293, 0.2953106667315853, 0.29482418164817514] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [75, 163, 26]]
** centroid: 1, normalized-entropy: 0.8042072588922197, [(1, 75), (2, 163), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [179, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [154, 70, 0]]
** centroid: 3, normalized-entropy: 0.8960382325345574, [(1, 154), (2, 70)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4097407411203079] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4097407411203079, 0.3287380793155625] ***
*** starting iteration: 2; err: [Inf, 0.4097407411203079, 0.3287380793155625] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4097407411203079, 0.3287380793155625, 0.3037623314569513] ***
*** starting iteration: 3; err: [Inf, 0.4097407411203079, 0.3287380793155625, 0.3037623314569513] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4097407411203079, 0.3287380793155625, 0.3037623314569513, 0.2993263866447996] ***
*** starting iteration: 4; err: [Inf, 0.4097407411203079, 0.3287380793155625, 0.3037623314569513, 0.2993263866447996] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4097407411203079, 0.3287380793155625, 0.3037623314569513, 0.2993263866447996, 0.29830850304748074] ***
*** starting iteration: 5; err: [Inf, 0.4097407411203079, 0.3287380793155625, 0.3037623314569513, 0.2993263866447996, 0.29830850304748074] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4097407411203079, 0.3287380793155625, 0.3037623314569513, 0.2993263866447996, 0.29830850304748074, 0.29815048946701606] ***
*** finished computation of 3 references, err: [Inf, 0.4097407411203079, 0.3287380793155625, 0.3037623314569513, 0.2993263866447996, 0.29830850304748074, 0.29815048946701606] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [83, 151, 21]]
** centroid: 1, normalized-entropy: 0.8021321019892137, [(1, 83), (2, 151), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [127, 98, 0]]
** centroid: 2, normalized-entropy: 0.9879833248021238, [(1, 127), (2, 98)]
*** center 3: selecting labels [1] (freq >= 1) [from [187, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.9380188571805338, 0.9300318282354211, 0.9280148411884938, 0.9059988131844419, 0.9019978061894229, 0.9010387633142125, 0.8969838101574629, 0.8869827911744079, 0.8849807891724059, 0.8810097522672372, 0.8639777502052951, 0.7949836063608519, 0.7910125694556832]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9380188571805338
finished with 14
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.3160423711977071] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3160423711977071, 0.1933703283610119] ***
*** starting iteration: 2; err: [Inf, 0.3160423711977071, 0.1933703283610119] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3160423711977071, 0.1933703283610119, 0.17374832324114525] ***
*** starting iteration: 3; err: [Inf, 0.3160423711977071, 0.1933703283610119, 0.17374832324114525] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3160423711977071, 0.1933703283610119, 0.17374832324114525, 0.16329090101378704] ***
*** finished computation of 7 references, err: [Inf, 0.3160423711977071, 0.1933703283610119, 0.17374832324114525, 0.16329090101378704] ***
*** center 1: selecting labels [1] (freq >= 2) [from [137, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 75, 23]]
** centroid: 2, normalized-entropy: 0.7861044688447759, [(2, 75), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [118, 62, 0]]
** centroid: 3, normalized-entropy: 0.9290083681703216, [(1, 118), (2, 62)]
*** center 4: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 30, 0]]
** centroid: 5, normalized-entropy: 0.9438767571287909, [(1, 53), (2, 30)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 65, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [30, 14, 0]]
** centroid: 7, normalized-entropy: 0.9023932827949788, [(1, 30), (2, 14)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2104730149619337] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2104730149619337, 0.16487305322480478] ***
*** starting iteration: 2; err: [Inf, 0.2104730149619337, 0.16487305322480478] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2104730149619337, 0.16487305322480478, 0.1560327186754652] ***
*** starting iteration: 3; err: [Inf, 0.2104730149619337, 0.16487305322480478, 0.1560327186754652] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2104730149619337, 0.16487305322480478, 0.1560327186754652, 0.15379323048385857] ***
*** finished computation of 7 references, err: [Inf, 0.2104730149619337, 0.16487305322480478, 0.1560327186754652, 0.15379323048385857] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 81, 26]]
** centroid: 1, normalized-entropy: 0.7999783611177544, [(2, 81), (3, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [39, 47, 0]]
** centroid: 3, normalized-entropy: 0.9937489109291138, [(1, 39), (2, 47)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [117, 59, 0]]
** centroid: 4, normalized-entropy: 0.920178140775894, [(1, 117), (2, 59)]
*** center 5: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 46, 0]]
** centroid: 7, normalized-entropy: 0.5159469300074472, [(1, 6), (2, 46)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2005350500243301] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2005350500243301, 0.15888580669944957] ***
*** starting iteration: 2; err: [Inf, 0.2005350500243301, 0.15888580669944957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2005350500243301, 0.15888580669944957, 0.1531076440475937] ***
*** starting iteration: 3; err: [Inf, 0.2005350500243301, 0.15888580669944957, 0.1531076440475937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2005350500243301, 0.15888580669944957, 0.1531076440475937, 0.15151778973898722] ***
*** finished computation of 7 references, err: [Inf, 0.2005350500243301, 0.15888580669944957, 0.1531076440475937, 0.15151778973898722] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [80, 63, 0]]
** centroid: 1, normalized-entropy: 0.9897812474673146, [(1, 80), (2, 63)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [6, 67, 0]]
** centroid: 2, normalized-entropy: 0.4098553703184051, [(1, 6), (2, 67)]
*** center 3: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 102, 21]]
** centroid: 4, normalized-entropy: 0.6593758812786991, [(2, 102), (3, 21)]
*** center 5: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [55, 16, 0]]
** centroid: 6, normalized-entropy: 0.7698205808588191, [(1, 55), (2, 16)]
*** center 7: selecting labels [1] (freq >= 2) [from [90, 1, 0]]
finished with 10 centroids; started with 7
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.21853459242917597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21853459242917597, 0.15239829348225611] ***
*** starting iteration: 2; err: [Inf, 0.21853459242917597, 0.15239829348225611] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21853459242917597, 0.15239829348225611, 0.14789385081687942] ***
*** starting iteration: 3; err: [Inf, 0.21853459242917597, 0.15239829348225611, 0.14789385081687942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21853459242917597, 0.15239829348225611, 0.14789385081687942, 0.14724662476871161] ***
*** finished computation of 7 references, err: [Inf, 0.21853459242917597, 0.15239829348225611, 0.14789385081687942, 0.14724662476871161] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [101, 11, 0]]
** centroid: 1, normalized-entropy: 0.46330931881705484, [(1, 101), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [148, 35, 0]]
** centroid: 2, normalized-entropy: 0.7040932606547615, [(1, 148), (2, 35)]
*** center 3: selecting labels [1] (freq >= 2) [from [141, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 111, 35]]
** centroid: 4, normalized-entropy: 0.7945843756064859, [(2, 111), (3, 35)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 79, 0]]
** centroid: 5, normalized-entropy: 0.9941939797828719, [(1, 66), (2, 79)]
*** center 6: selecting labels [1] (freq >= 2) [from [139, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 128, 0]]
** centroid: 7, normalized-entropy: 0.26377743669413856, [(1, 6), (2, 128)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19241346809081733] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19241346809081733, 0.15406503567099572] ***
*** starting iteration: 2; err: [Inf, 0.19241346809081733, 0.15406503567099572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19241346809081733, 0.15406503567099572, 0.15000217315927147] ***
*** starting iteration: 3; err: [Inf, 0.19241346809081733, 0.15406503567099572, 0.15000217315927147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19241346809081733, 0.15406503567099572, 0.15000217315927147, 0.1484109651464969] ***
*** finished computation of 7 references, err: [Inf, 0.19241346809081733, 0.15406503567099572, 0.15000217315927147, 0.1484109651464969] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [56, 29, 0]]
** centroid: 1, normalized-entropy: 0.9259400597385792, [(1, 56), (2, 29)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 23, 0]]
** centroid: 2, normalized-entropy: 0.8989377852081333, [(1, 50), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 58, 17]]
** centroid: 3, normalized-entropy: 0.7721551435804817, [(2, 58), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [19, 71, 0]]
** centroid: 5, normalized-entropy: 0.7436012269934466, [(1, 19), (2, 71)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18559094052575528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18559094052575528, 0.1487716797585599] ***
*** starting iteration: 2; err: [Inf, 0.18559094052575528, 0.1487716797585599] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18559094052575528, 0.1487716797585599, 0.14537082362361253] ***
*** starting iteration: 3; err: [Inf, 0.18559094052575528, 0.1487716797585599, 0.14537082362361253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18559094052575528, 0.1487716797585599, 0.14537082362361253, 0.14415288329962642] ***
*** finished computation of 7 references, err: [Inf, 0.18559094052575528, 0.1487716797585599, 0.14537082362361253, 0.14415288329962642] ***
*** center 1: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 39, 13]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(2, 39), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 5, 0]]
** centroid: 3, normalized-entropy: 0.46899559358928133, [(1, 45), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 3, 0]]
** centroid: 4, normalized-entropy: 0.269828447703074, [(1, 62), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [12, 69, 0]]
** centroid: 5, normalized-entropy: 0.6051865766334207, [(1, 12), (2, 69)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [16, 67, 0]]
** centroid: 6, normalized-entropy: 0.7072324944713736, [(1, 16), (2, 67)]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19782264348492026] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19782264348492026, 0.15312657949328423] ***
*** starting iteration: 2; err: [Inf, 0.19782264348492026, 0.15312657949328423] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19782264348492026, 0.15312657949328423, 0.14750232926779427] ***
*** starting iteration: 3; err: [Inf, 0.19782264348492026, 0.15312657949328423, 0.14750232926779427] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19782264348492026, 0.15312657949328423, 0.14750232926779427, 0.14582097717933357] ***
*** finished computation of 7 references, err: [Inf, 0.19782264348492026, 0.15312657949328423, 0.14750232926779427, 0.14582097717933357] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 81, 19]]
** centroid: 1, normalized-entropy: 0.7014714598838974, [(2, 81), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 4, 0]]
** centroid: 3, normalized-entropy: 0.4199210973757179, [(1, 43), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [61, 17, 0]]
** centroid: 4, normalized-entropy: 0.7564041945982506, [(1, 61), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 29, 0]]
** centroid: 5, normalized-entropy: 0.9786961448300948, [(1, 41), (2, 29)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 56, 0]]
** centroid: 6, normalized-entropy: 0.5801954953637372, [(1, 9), (2, 56)]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18622461702302098] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18622461702302098, 0.15160967596247793] ***
*** starting iteration: 2; err: [Inf, 0.18622461702302098, 0.15160967596247793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18622461702302098, 0.15160967596247793, 0.1480447830427438] ***
*** starting iteration: 3; err: [Inf, 0.18622461702302098, 0.15160967596247793, 0.1480447830427438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18622461702302098, 0.15160967596247793, 0.1480447830427438, 0.14694928391091525] ***
*** finished computation of 7 references, err: [Inf, 0.18622461702302098, 0.15160967596247793, 0.1480447830427438, 0.14694928391091525] ***
*** center 1: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [71, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 46, 18]]
** centroid: 3, normalized-entropy: 0.8571484374283717, [(2, 46), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 35, 0]]
** centroid: 5, normalized-entropy: 0.9936507116910402, [(1, 29), (2, 35)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [38, 36, 0]]
** centroid: 6, normalized-entropy: 0.9994730201859837, [(1, 38), (2, 36)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 54, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1970503436010331] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1970503436010331, 0.1486345580741763] ***
*** starting iteration: 2; err: [Inf, 0.1970503436010331, 0.1486345580741763] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1970503436010331, 0.1486345580741763, 0.14573825368843973] ***
*** starting iteration: 3; err: [Inf, 0.1970503436010331, 0.1486345580741763, 0.14573825368843973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1970503436010331, 0.1486345580741763, 0.14573825368843973, 0.14527110454626382] ***
*** finished computation of 7 references, err: [Inf, 0.1970503436010331, 0.1486345580741763, 0.14573825368843973, 0.14527110454626382] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [10, 72, 0]]
** centroid: 1, normalized-entropy: 0.5349436990971067, [(1, 10), (2, 72)]
*** center 2: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 4, 0]]
** centroid: 3, normalized-entropy: 0.36657801255334593, [(1, 53), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [88, 2, 0]]
** centroid: 4, normalized-entropy: 0.1537421803287618, [(1, 88), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [81, 3, 0]]
** centroid: 5, normalized-entropy: 0.2222848306856879, [(1, 81), (2, 3)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 34, 18]]
** centroid: 6, normalized-entropy: 0.9305861291319927, [(2, 34), (3, 18)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 69, 0]]
** centroid: 7, normalized-entropy: 0.18512476010054582, [(1, 2), (2, 69)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19382672862522304] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19382672862522304, 0.1529400254441425] ***
*** starting iteration: 2; err: [Inf, 0.19382672862522304, 0.1529400254441425] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19382672862522304, 0.1529400254441425, 0.14830282370373607] ***
*** starting iteration: 3; err: [Inf, 0.19382672862522304, 0.1529400254441425, 0.14830282370373607] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19382672862522304, 0.1529400254441425, 0.14830282370373607, 0.14741024083644153] ***
*** finished computation of 7 references, err: [Inf, 0.19382672862522304, 0.1529400254441425, 0.14830282370373607, 0.14741024083644153] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [45, 50, 0]]
** centroid: 1, normalized-entropy: 0.9980008838722993, [(1, 45), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 2, 0]]
** centroid: 2, normalized-entropy: 0.18312206830137262, [(1, 70), (2, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 45, 21]]
** centroid: 4, normalized-entropy: 0.9023932827949788, [(2, 45), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 27, 0]]
** centroid: 5, normalized-entropy: 0.9386808697586004, [(1, 49), (2, 27)]
*** center 6: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19196068809553982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19196068809553982, 0.15521311598923057] ***
*** starting iteration: 2; err: [Inf, 0.19196068809553982, 0.15521311598923057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19196068809553982, 0.15521311598923057, 0.14930440812185405] ***
*** starting iteration: 3; err: [Inf, 0.19196068809553982, 0.15521311598923057, 0.14930440812185405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19196068809553982, 0.15521311598923057, 0.14930440812185405, 0.1454572872389108] ***
*** finished computation of 7 references, err: [Inf, 0.19196068809553982, 0.15521311598923057, 0.14930440812185405, 0.1454572872389108] ***
*** center 1: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 57, 16]]
** centroid: 2, normalized-entropy: 0.7586638628883696, [(2, 57), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 27, 0]]
** centroid: 4, normalized-entropy: 0.8935711016541908, [(1, 60), (2, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 41, 0]]
** centroid: 5, normalized-entropy: 0.9571814385446724, [(1, 25), (2, 41)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 55, 0]]
** centroid: 7, normalized-entropy: 0.5491087450260074, [(1, 8), (2, 55)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1936446086987853] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1936446086987853, 0.1520851300973445] ***
*** starting iteration: 2; err: [Inf, 0.1936446086987853, 0.1520851300973445] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1936446086987853, 0.1520851300973445, 0.14829002919699996] ***
*** starting iteration: 3; err: [Inf, 0.1936446086987853, 0.1520851300973445, 0.14829002919699996] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1936446086987853, 0.1520851300973445, 0.14829002919699996, 0.14790921153780073] ***
*** finished computation of 7 references, err: [Inf, 0.1936446086987853, 0.1520851300973445, 0.14829002919699996, 0.14790921153780073] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [73, 10, 0]]
** centroid: 1, normalized-entropy: 0.530744566923854, [(1, 73), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 10, 0]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(1, 50), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 65, 18]]
** centroid: 3, normalized-entropy: 0.7544062039636575, [(2, 65), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [54, 19, 0]]
** centroid: 5, normalized-entropy: 0.8271595195340525, [(1, 54), (2, 19)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [12, 69, 0]]
** centroid: 6, normalized-entropy: 0.6051865766334207, [(1, 12), (2, 69)]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2005579006038606] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2005579006038606, 0.15216613722406327] ***
*** starting iteration: 2; err: [Inf, 0.2005579006038606, 0.15216613722406327] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2005579006038606, 0.15216613722406327, 0.14717887854017317] ***
*** starting iteration: 3; err: [Inf, 0.2005579006038606, 0.15216613722406327, 0.14717887854017317] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2005579006038606, 0.15216613722406327, 0.14717887854017317, 0.14639018108323215] ***
*** finished computation of 7 references, err: [Inf, 0.2005579006038606, 0.15216613722406327, 0.14717887854017317, 0.14639018108323215] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [38, 54, 0]]
** centroid: 1, normalized-entropy: 0.978070970973496, [(1, 38), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [77, 2, 0]]
** centroid: 2, normalized-entropy: 0.17033057560105982, [(1, 77), (2, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 52, 17]]
** centroid: 4, normalized-entropy: 0.8054848387405957, [(2, 52), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [47, 19, 0]]
** centroid: 5, normalized-entropy: 0.8659653498997099, [(1, 47), (2, 19)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 54, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18191609800048172] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18191609800048172, 0.1508533136800397] ***
*** starting iteration: 2; err: [Inf, 0.18191609800048172, 0.1508533136800397] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18191609800048172, 0.1508533136800397, 0.1472741438783705] ***
*** starting iteration: 3; err: [Inf, 0.18191609800048172, 0.1508533136800397, 0.1472741438783705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18191609800048172, 0.1508533136800397, 0.1472741438783705, 0.1468035597577691] ***
*** finished computation of 7 references, err: [Inf, 0.18191609800048172, 0.1508533136800397, 0.1472741438783705, 0.1468035597577691] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 49, 19]]
** centroid: 2, normalized-entropy: 0.8546480601169081, [(2, 49), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [55, 23, 0]]
** centroid: 3, normalized-entropy: 0.8749315876677922, [(1, 55), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [9, 57, 0]]
** centroid: 4, normalized-entropy: 0.5746356978376794, [(1, 9), (2, 57)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 51, 0]]
** centroid: 5, normalized-entropy: 0.9379626436434424, [(1, 28), (2, 51)]
*** center 6: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19386758112162353] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19386758112162353, 0.14990707330405711] ***
*** starting iteration: 2; err: [Inf, 0.19386758112162353, 0.14990707330405711] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19386758112162353, 0.14990707330405711, 0.14516487257182598] ***
*** starting iteration: 3; err: [Inf, 0.19386758112162353, 0.14990707330405711, 0.14516487257182598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19386758112162353, 0.14990707330405711, 0.14516487257182598, 0.143819904435426] ***
*** finished computation of 7 references, err: [Inf, 0.19386758112162353, 0.14990707330405711, 0.14516487257182598, 0.143819904435426] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 21, 0]]
** centroid: 3, normalized-entropy: 0.8605553930586318, [(1, 53), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [76, 3, 0]]
** centroid: 4, normalized-entropy: 0.23292785546981223, [(1, 76), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 28, 0]]
** centroid: 5, normalized-entropy: 0.9675594819018211, [(1, 43), (2, 28)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 60, 16]]
** centroid: 6, normalized-entropy: 0.7424875695421234, [(2, 60), (3, 16)]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18452502435445786] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18452502435445786, 0.15286512342095376] ***
*** starting iteration: 2; err: [Inf, 0.18452502435445786, 0.15286512342095376] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18452502435445786, 0.15286512342095376, 0.15071701403521] ***
*** starting iteration: 3; err: [Inf, 0.18452502435445786, 0.15286512342095376, 0.15071701403521] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18452502435445786, 0.15286512342095376, 0.15071701403521, 0.15013258170336485] ***
*** finished computation of 7 references, err: [Inf, 0.18452502435445786, 0.15286512342095376, 0.15071701403521, 0.15013258170336485] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [45, 52, 0]]
** centroid: 1, normalized-entropy: 0.9962401135461777, [(1, 45), (2, 52)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 8, 0]]
** centroid: 2, normalized-entropy: 0.5175827525559071, [(1, 61), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 52, 1]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 15, 0]]
** centroid: 5, normalized-entropy: 0.7012065844539666, [(1, 64), (2, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 53, 11]]
** centroid: 7, normalized-entropy: 0.6619760641115651, [(2, 53), (3, 11)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18780624748393893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18780624748393893, 0.15353031905926764] ***
*** starting iteration: 2; err: [Inf, 0.18780624748393893, 0.15353031905926764] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18780624748393893, 0.15353031905926764, 0.15066625737398862] ***
*** starting iteration: 3; err: [Inf, 0.18780624748393893, 0.15353031905926764, 0.15066625737398862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18780624748393893, 0.15353031905926764, 0.15066625737398862, 0.15027317912038415] ***
*** finished computation of 7 references, err: [Inf, 0.18780624748393893, 0.15353031905926764, 0.15066625737398862, 0.15027317912038415] ***
*** center 1: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 38, 18]]
** centroid: 2, normalized-entropy: 0.9059282160429994, [(2, 38), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 14, 0]]
** centroid: 3, normalized-entropy: 0.7516499461153354, [(1, 51), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [73, 13, 0]]
** centroid: 4, normalized-entropy: 0.6127425554686624, [(1, 73), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [27, 65, 0]]
** centroid: 5, normalized-entropy: 0.8731720603476306, [(1, 27), (2, 65)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 52, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19823627449758352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19823627449758352, 0.1509501798544079] ***
*** starting iteration: 2; err: [Inf, 0.19823627449758352, 0.1509501798544079] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19823627449758352, 0.1509501798544079, 0.14785450892616064] ***
*** starting iteration: 3; err: [Inf, 0.19823627449758352, 0.1509501798544079, 0.14785450892616064] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19823627449758352, 0.1509501798544079, 0.14785450892616064, 0.14729996230453252] ***
*** finished computation of 7 references, err: [Inf, 0.19823627449758352, 0.1509501798544079, 0.14785450892616064, 0.14729996230453252] ***
*** center 1: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 30, 15]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 30), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 14, 0]]
** centroid: 5, normalized-entropy: 0.6840384356390419, [(1, 63), (2, 14)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 57, 0]]
** centroid: 6, normalized-entropy: 0.49802788653447644, [(1, 7), (2, 57)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 64, 0]]
** centroid: 7, normalized-entropy: 0.32275695889739825, [(1, 4), (2, 64)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19247002970427274] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19247002970427274, 0.156939037527889] ***
*** starting iteration: 2; err: [Inf, 0.19247002970427274, 0.156939037527889] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19247002970427274, 0.156939037527889, 0.14941776298824697] ***
*** starting iteration: 3; err: [Inf, 0.19247002970427274, 0.156939037527889, 0.14941776298824697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19247002970427274, 0.156939037527889, 0.14941776298824697, 0.1469670747728087] ***
*** finished computation of 7 references, err: [Inf, 0.19247002970427274, 0.156939037527889, 0.14941776298824697, 0.1469670747728087] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [83, 5, 0]]
** centroid: 1, normalized-entropy: 0.314682604134666, [(1, 83), (2, 5)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 37, 16]]
** centroid: 2, normalized-entropy: 0.8835850861052531, [(2, 37), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [71, 2, 0]]
** centroid: 3, normalized-entropy: 0.18116640155354563, [(1, 71), (2, 2)]
*** center 4: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 71, 0]]
** centroid: 6, normalized-entropy: 0.35001059292688486, [(1, 5), (2, 71)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [15, 59, 0]]
** centroid: 7, normalized-entropy: 0.7273006785144036, [(1, 15), (2, 59)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18839452444016933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18839452444016933, 0.15808886414393783] ***
*** starting iteration: 2; err: [Inf, 0.18839452444016933, 0.15808886414393783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18839452444016933, 0.15808886414393783, 0.15219132390152662] ***
*** starting iteration: 3; err: [Inf, 0.18839452444016933, 0.15808886414393783, 0.15219132390152662] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18839452444016933, 0.15808886414393783, 0.15219132390152662, 0.15072627609514166] ***
*** finished computation of 7 references, err: [Inf, 0.18839452444016933, 0.15808886414393783, 0.15219132390152662, 0.15072627609514166] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 79, 18]]
** centroid: 1, normalized-entropy: 0.6921053253628727, [(2, 79), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 5, 0]]
** centroid: 3, normalized-entropy: 0.4186843105268563, [(1, 54), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 19, 0]]
** centroid: 4, normalized-entropy: 0.849054424254048, [(1, 50), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [78, 4, 0]]
** centroid: 5, normalized-entropy: 0.2811937964320427, [(1, 78), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [58, 9, 0]]
** centroid: 6, normalized-entropy: 0.569190343735683, [(1, 58), (2, 9)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 68, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1858524922505021] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1858524922505021, 0.15214500032737852] ***
*** starting iteration: 2; err: [Inf, 0.1858524922505021, 0.15214500032737852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1858524922505021, 0.15214500032737852, 0.14873349840193986] ***
*** starting iteration: 3; err: [Inf, 0.1858524922505021, 0.15214500032737852, 0.14873349840193986] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1858524922505021, 0.15214500032737852, 0.14873349840193986, 0.14789816353097557] ***
*** finished computation of 7 references, err: [Inf, 0.1858524922505021, 0.15214500032737852, 0.14873349840193986, 0.14789816353097557] ***
*** center 1: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 52, 19]]
** centroid: 2, normalized-entropy: 0.8380078505079931, [(2, 52), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 18, 0]]
** centroid: 3, normalized-entropy: 0.8751957887407251, [(1, 43), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [41, 49, 0]]
** centroid: 4, normalized-entropy: 0.9942929346520455, [(1, 41), (2, 49)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 66, 0]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(1, 22), (2, 66)]
*** center 6: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17980151126720012] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17980151126720012, 0.1540787317696959] ***
*** starting iteration: 2; err: [Inf, 0.17980151126720012, 0.1540787317696959] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17980151126720012, 0.1540787317696959, 0.14972691713739186] ***
*** starting iteration: 3; err: [Inf, 0.17980151126720012, 0.1540787317696959, 0.14972691713739186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17980151126720012, 0.1540787317696959, 0.14972691713739186, 0.1484963776478544] ***
*** finished computation of 7 references, err: [Inf, 0.17980151126720012, 0.1540787317696959, 0.14972691713739186, 0.1484963776478544] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [79, 6, 0]]
** centroid: 1, normalized-entropy: 0.3681150054280774, [(1, 79), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 5, 0]]
** centroid: 2, normalized-entropy: 0.4236805715709106, [(1, 53), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 46, 19]]
** centroid: 3, normalized-entropy: 0.871683617119982, [(2, 46), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 70, 0]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(1, 14), (2, 70)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [29, 45, 0]]
** centroid: 6, normalized-entropy: 0.966009606256856, [(1, 29), (2, 45)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18874466704763473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18874466704763473, 0.14898058766778557] ***
*** starting iteration: 2; err: [Inf, 0.18874466704763473, 0.14898058766778557] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18874466704763473, 0.14898058766778557, 0.14627133540809154] ***
*** starting iteration: 3; err: [Inf, 0.18874466704763473, 0.14898058766778557, 0.14627133540809154] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18874466704763473, 0.14898058766778557, 0.14627133540809154, 0.14597676339000462] ***
*** finished computation of 7 references, err: [Inf, 0.18874466704763473, 0.14898058766778557, 0.14627133540809154, 0.14597676339000462] ***
*** center 1: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 43, 20]]
** centroid: 2, normalized-entropy: 0.9015982354056711, [(2, 43), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [37, 16, 0]]
** centroid: 3, normalized-entropy: 0.8835850861052531, [(1, 37), (2, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 65, 0]]
** centroid: 5, normalized-entropy: 0.8524051786494784, [(1, 25), (2, 65)]
*** center 6: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [14, 47, 0]]
** centroid: 7, normalized-entropy: 0.7771529943226336, [(1, 14), (2, 47)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19147834842838346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19147834842838346, 0.1486759247938171] ***
*** starting iteration: 2; err: [Inf, 0.19147834842838346, 0.1486759247938171] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19147834842838346, 0.1486759247938171, 0.1464791738241911] ***
*** starting iteration: 3; err: [Inf, 0.19147834842838346, 0.1486759247938171, 0.1464791738241911] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19147834842838346, 0.1486759247938171, 0.1464791738241911, 0.14637069753790274] ***
*** finished computation of 7 references, err: [Inf, 0.19147834842838346, 0.1486759247938171, 0.1464791738241911, 0.14637069753790274] ***
*** center 1: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 17, 0]]
** centroid: 2, normalized-entropy: 0.77753986416076, [(1, 57), (2, 17)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 43, 18]]
** centroid: 3, normalized-entropy: 0.8751957887407251, [(2, 43), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 68, 0]]
** centroid: 5, normalized-entropy: 0.80235344282919, [(1, 22), (2, 68)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [17, 51, 0]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(1, 17), (2, 51)]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19932742320559918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19932742320559918, 0.1521746478797868] ***
*** starting iteration: 2; err: [Inf, 0.19932742320559918, 0.1521746478797868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19932742320559918, 0.1521746478797868, 0.14736826763022692] ***
*** starting iteration: 3; err: [Inf, 0.19932742320559918, 0.1521746478797868, 0.14736826763022692] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19932742320559918, 0.1521746478797868, 0.14736826763022692, 0.14624724592920393] ***
*** finished computation of 7 references, err: [Inf, 0.19932742320559918, 0.1521746478797868, 0.14736826763022692, 0.14624724592920393] ***
*** center 1: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 57, 15]]
** centroid: 2, normalized-entropy: 0.7382848661434506, [(2, 57), (3, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [64, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [48, 41, 0]]
** centroid: 4, normalized-entropy: 0.995533068899466, [(1, 48), (2, 41)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [40, 29, 0]]
** centroid: 5, normalized-entropy: 0.9815886212101388, [(1, 40), (2, 29)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 51, 0]]
** centroid: 7, normalized-entropy: 0.3095434291503252, [(1, 3), (2, 51)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18767822104133666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18767822104133666, 0.1550715320687741] ***
*** starting iteration: 2; err: [Inf, 0.18767822104133666, 0.1550715320687741] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18767822104133666, 0.1550715320687741, 0.1511809624452144] ***
*** starting iteration: 3; err: [Inf, 0.18767822104133666, 0.1550715320687741, 0.1511809624452144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18767822104133666, 0.1550715320687741, 0.1511809624452144, 0.1499966859668493] ***
*** finished computation of 7 references, err: [Inf, 0.18767822104133666, 0.1550715320687741, 0.1511809624452144, 0.1499966859668493] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [90, 4, 0]]
** centroid: 1, normalized-entropy: 0.2538784402981617, [(1, 90), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [49, 17, 0]]
** centroid: 2, normalized-entropy: 0.8230660790114689, [(1, 49), (2, 17)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 41, 21]]
** centroid: 3, normalized-entropy: 0.9235785996175947, [(2, 41), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [23, 67, 0]]
** centroid: 5, normalized-entropy: 0.8199653102187632, [(1, 23), (2, 67)]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 61, 0]]
** centroid: 7, normalized-entropy: 0.20307392998664567, [(1, 2), (2, 61)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17840600112453103] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17840600112453103, 0.14834977513737976] ***
*** starting iteration: 2; err: [Inf, 0.17840600112453103, 0.14834977513737976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17840600112453103, 0.14834977513737976, 0.14379672760888934] ***
*** starting iteration: 3; err: [Inf, 0.17840600112453103, 0.14834977513737976, 0.14379672760888934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17840600112453103, 0.14834977513737976, 0.14379672760888934, 0.14295045603625475] ***
*** finished computation of 7 references, err: [Inf, 0.17840600112453103, 0.14834977513737976, 0.14379672760888934, 0.14295045603625475] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 45, 18]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(2, 45), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 3, 0]]
** centroid: 3, normalized-entropy: 0.3095434291503252, [(1, 51), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 3, 0]]
** centroid: 4, normalized-entropy: 0.2863969571159561, [(1, 57), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [18, 70, 0]]
** centroid: 5, normalized-entropy: 0.7309263775906009, [(1, 18), (2, 70)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [16, 61, 0]]
** centroid: 7, normalized-entropy: 0.7372413771710565, [(1, 16), (2, 61)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17357070735446178] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17357070735446178, 0.14611313840933143] ***
*** starting iteration: 2; err: [Inf, 0.17357070735446178, 0.14611313840933143] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17357070735446178, 0.14611313840933143, 0.14427277116850018] ***
*** starting iteration: 3; err: [Inf, 0.17357070735446178, 0.14611313840933143, 0.14427277116850018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17357070735446178, 0.14611313840933143, 0.14427277116850018, 0.1437957010017708] ***
*** finished computation of 7 references, err: [Inf, 0.17357070735446178, 0.14611313840933143, 0.14427277116850018, 0.1437957010017708] ***
*** center 1: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 42, 16]]
** centroid: 2, normalized-entropy: 0.8497511372532974, [(2, 42), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [57, 10, 0]]
** centroid: 3, normalized-entropy: 0.6079696120060726, [(1, 57), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [32, 40, 0]]
** centroid: 4, normalized-entropy: 0.9910760598382222, [(1, 32), (2, 40)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 78, 0]]
** centroid: 5, normalized-entropy: 0.787126586201269, [(1, 24), (2, 78)]
*** center 6: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [86, 1, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19754786032252014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19754786032252014, 0.15655142159434035] ***
*** starting iteration: 2; err: [Inf, 0.19754786032252014, 0.15655142159434035] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19754786032252014, 0.15655142159434035, 0.15184300669748335] ***
*** starting iteration: 3; err: [Inf, 0.19754786032252014, 0.15655142159434035, 0.15184300669748335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19754786032252014, 0.15655142159434035, 0.15184300669748335, 0.15128760503977537] ***
*** finished computation of 7 references, err: [Inf, 0.19754786032252014, 0.15655142159434035, 0.15184300669748335, 0.15128760503977537] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [10, 87, 0]]
** centroid: 1, normalized-entropy: 0.478723511385963, [(1, 10), (2, 87)]
*** center 2: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 28, 0]]
** centroid: 3, normalized-entropy: 0.9568886656798214, [(1, 46), (2, 28)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 24, 0]]
** centroid: 4, normalized-entropy: 0.9090221560878149, [(1, 50), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [68, 5, 0]]
** centroid: 5, normalized-entropy: 0.3602750564216625, [(1, 68), (2, 5)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 48, 20]]
** centroid: 7, normalized-entropy: 0.8739810481273581, [(2, 48), (3, 20)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19622853676229715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19622853676229715, 0.15768091403041035] ***
*** starting iteration: 2; err: [Inf, 0.19622853676229715, 0.15768091403041035] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19622853676229715, 0.15768091403041035, 0.1530254414919764] ***
*** starting iteration: 3; err: [Inf, 0.19622853676229715, 0.15768091403041035, 0.1530254414919764] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19622853676229715, 0.15768091403041035, 0.1530254414919764, 0.15206391943525524] ***
*** finished computation of 7 references, err: [Inf, 0.19622853676229715, 0.15768091403041035, 0.1530254414919764, 0.15206391943525524] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 68, 17]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(2, 68), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [62, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [51, 25, 0]]
** centroid: 4, normalized-entropy: 0.9138472873262908, [(1, 51), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 11, 0]]
** centroid: 5, normalized-entropy: 0.5916727785823274, [(1, 66), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [73, 9, 0]]
** centroid: 6, normalized-entropy: 0.49917983618854633, [(1, 73), (2, 9)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 63, 0]]
** centroid: 7, normalized-entropy: 0.19823496409776642, [(1, 2), (2, 63)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20512510952726007] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20512510952726007, 0.15067698740586638] ***
*** starting iteration: 2; err: [Inf, 0.20512510952726007, 0.15067698740586638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20512510952726007, 0.15067698740586638, 0.1460520888864994] ***
*** starting iteration: 3; err: [Inf, 0.20512510952726007, 0.15067698740586638, 0.1460520888864994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20512510952726007, 0.15067698740586638, 0.1460520888864994, 0.14571025957353412] ***
*** finished computation of 7 references, err: [Inf, 0.20512510952726007, 0.15067698740586638, 0.1460520888864994, 0.14571025957353412] ***
*** center 1: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 47, 16]]
** centroid: 2, normalized-entropy: 0.8175072881213616, [(2, 47), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 27, 0]]
** centroid: 3, normalized-entropy: 0.9505668528932193, [(1, 46), (2, 27)]
*** center 4: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 44, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 22), (2, 44)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 68, 0]]
** centroid: 6, normalized-entropy: 0.5203346157857599, [(1, 9), (2, 68)]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1887700269371271] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1887700269371271, 0.1579058228977956] ***
*** starting iteration: 2; err: [Inf, 0.1887700269371271, 0.1579058228977956] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1887700269371271, 0.1579058228977956, 0.1534024706450291] ***
*** starting iteration: 3; err: [Inf, 0.1887700269371271, 0.1579058228977956, 0.1534024706450291] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1887700269371271, 0.1579058228977956, 0.1534024706450291, 0.152115815827623] ***
*** finished computation of 7 references, err: [Inf, 0.1887700269371271, 0.1579058228977956, 0.1534024706450291, 0.152115815827623] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [14, 75, 0]]
** centroid: 1, normalized-entropy: 0.6278191534832795, [(1, 14), (2, 75)]
*** center 2: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 3, 0]]
** centroid: 3, normalized-entropy: 0.28290479297989196, [(1, 58), (2, 3)]
*** center 4: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 4, 0]]
** centroid: 5, normalized-entropy: 0.3127333763966432, [(1, 67), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 56, 0]]
** centroid: 6, normalized-entropy: 0.5801954953637372, [(1, 9), (2, 56)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 47, 13]]
** centroid: 7, normalized-entropy: 0.7540340561971327, [(2, 47), (3, 13)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1965845748819411] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1965845748819411, 0.14928515367535874] ***
*** starting iteration: 2; err: [Inf, 0.1965845748819411, 0.14928515367535874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1965845748819411, 0.14928515367535874, 0.14601452749129384] ***
*** starting iteration: 3; err: [Inf, 0.1965845748819411, 0.14928515367535874, 0.14601452749129384] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1965845748819411, 0.14928515367535874, 0.14601452749129384, 0.14588836091570556] ***
*** finished computation of 7 references, err: [Inf, 0.1965845748819411, 0.14928515367535874, 0.14601452749129384, 0.14588836091570556] ***
*** center 1: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 34, 22]]
** centroid: 2, normalized-entropy: 0.9666186325481027, [(2, 34), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 21, 0]]
** centroid: 3, normalized-entropy: 0.8970964164730478, [(1, 46), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [77, 4, 0]]
** centroid: 4, normalized-entropy: 0.2837689703721877, [(1, 77), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [31, 51, 0]]
** centroid: 5, normalized-entropy: 0.956652272148091, [(1, 31), (2, 51)]
*** center 6: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 63, 0]]
** centroid: 7, normalized-entropy: 0.2667649878030262, [(1, 3), (2, 63)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19640566051937638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19640566051937638, 0.15511117085069417] ***
*** starting iteration: 2; err: [Inf, 0.19640566051937638, 0.15511117085069417] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19640566051937638, 0.15511117085069417, 0.15114382540248333] ***
*** starting iteration: 3; err: [Inf, 0.19640566051937638, 0.15511117085069417, 0.15114382540248333] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19640566051937638, 0.15511117085069417, 0.15114382540248333, 0.14938185800332576] ***
*** finished computation of 7 references, err: [Inf, 0.19640566051937638, 0.15511117085069417, 0.15114382540248333, 0.14938185800332576] ***
*** center 1: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 57, 14]]
** centroid: 3, normalized-entropy: 0.7162583911075451, [(2, 57), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 23, 0]]
** centroid: 5, normalized-entropy: 0.9421631690835511, [(1, 41), (2, 23)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [21, 48, 0]]
** centroid: 6, normalized-entropy: 0.8865408928220899, [(1, 21), (2, 48)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 49, 0]]
** centroid: 7, normalized-entropy: 0.5851569902762294, [(1, 8), (2, 49)]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 364,3 => 35,1 => 601), Dict(2 => 372,3 => 22,1 => 606))
[ Info: ===== scores for single classifier: {"micro_f1":0.944,"precision":0.944,"recall":0.944,"macro_recall":0.9584708470847084,"macro_f1":0.8747249014364797,"accuracy":0.944,"class_f1":{"2":0.924119241192412,"3":0.7333333333333334,"1":0.9667221297836939},"class_precision":{"2":0.9316939890710383,"3":0.5789473684210527,"1":0.9748322147651006},"class_recall":{"2":0.9166666666666666,"3":1.0,"1":0.9587458745874587}}
[ Info: ===== scores for 1: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9757443486284112,"macro_f1":0.9583325247764917,"accuracy":0.971,"class_f1":{"2":0.96,"3":0.9361702127659575,"1":0.9788273615635179},"class_precision":{"2":0.9858356940509915,"3":0.88,"1":0.9662379421221865},"class_recall":{"2":0.9354838709677419,"3":1.0,"1":0.9917491749174917}}
[ Info: ===== scores for 5: {"micro_f1":0.966,"precision":0.966,"recall":0.966,"macro_recall":0.9726480712587388,"macro_f1":0.9484845220139339,"accuracy":0.966,"class_f1":{"2":0.9532967032967034,"3":0.9166666666666666,"1":0.9754901960784313},"class_precision":{"2":0.9747191011235955,"3":0.8461538461538461,"1":0.9660194174757282},"class_recall":{"2":0.9327956989247311,"3":1.0,"1":0.9851485148514851}}
[ Info: ===== scores for 7: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.9681677845203875,"macro_f1":0.9447487733995673,"accuracy":0.961,"class_f1":{"2":0.946058091286307,"3":0.9166666666666666,"1":0.9715215622457282},"class_precision":{"2":0.9743589743589743,"3":0.8461538461538461,"1":0.9582664526484751},"class_recall":{"2":0.9193548387096774,"3":1.0,"1":0.9851485148514851}}
[ Info: ===== scores for 9: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.9720980162532382,"macro_f1":0.9477693955324352,"accuracy":0.965,"class_f1":{"2":0.9519890260631001,"3":0.9166666666666666,"1":0.9746524938675388},"class_precision":{"2":0.9719887955182073,"3":0.8461538461538461,"1":0.965964343598055},"class_recall":{"2":0.9327956989247311,"3":1.0,"1":0.9834983498349835}}
[ Info: ===== scores for 11: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.9727900209375777,"macro_f1":0.9478290029910182,"accuracy":0.965,"class_f1":{"2":0.9522510231923601,"3":0.9166666666666666,"1":0.9745693191140279},"class_precision":{"2":0.9667590027700831,"3":0.8461538461538461,"1":0.9690048939641109},"class_recall":{"2":0.9381720430107527,"3":1.0,"1":0.9801980198019802}}
(score = 0.97, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.957, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.957, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.971,"k":1,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9757443486284112,"macro_f1":0.9583325247764917,"accuracy":0.971,"class_f1":{"2":0.96,"3":0.9361702127659575,"1":0.9788273615635179},"class_precision":{"2":0.9858356940509915,"3":0.88,"1":0.9662379421221865},"class_recall":{"2":0.9354838709677419,"3":1.0,"1":0.9917491749174917}}
Test Summary: | Pass  Total
AKNC          |    8      8
[235, 1, 1, 3, 1, 7, 1, 11, 12, 6, 1, 2, 4, 2, 13, 6, 2, 3, 9, 11, 9, 2, 12, 20, 2, 26, 11, 3, 21, 10, 23, 2, 2, 12, 12, 9, 11, 11, 9, 5, 2, 1, 16, 16, 79, 31, 2, 22, 32, 11, 2, 4, 11, 8, 54, 22, 7, 111, 23, 2, 4, 8, 34, 75, 9, 13, 3, 8, 8, 16, 99, 5, 11, 1, 35, 10, 2, 7, 29, 1, 8, 10, 24, 3, 20, 11, 43, 27, 4, 36, 11, 19, 264, 14, 38, 14, 5, 2, 24, 5, 4, 8, 26, 29, 79, 60, 17, 34, 19, 40, 9, 37, 3, 7, 15, 3, 121, 66, 9, 57, 45, 19, 99, 8, 31, 45, 43, 8, 32, 15, 14, 3, 28, 30, 138, 45, 120, 212, 67, 48, 67, 19, 6, 129, 11, 51, 14, 12, 14, 16, 6, 16, 5, 14, 4, 16, 18, 29, 4, 23, 12, 21, 16, 376, 2, 10, 172, 18, 86, 25, 8, 23, 18, 7, 67, 8, 18, 17, 25, 55, 7, 7, 1107, 39, 42, 8, 15, 46, 4, 24, 4, 5, 16, 24, 162, 18, 4, 17, 38, 42, 122, 19, 18, 2, 84, 69, 6, 2, 50, 102, 26, 1, 130, 49, 51, 15, 5, 11, 8, 11, 3, 5, 16, 12, 8, 7, 21, 10, 30, 7, 3, 13, 10, 74, 12, 40, 108, 27, 60, 38, 32, 47, 5, 21, 11, 2, 60, 16, 7, 9, 8, 68, 20, 47, 3, 9, 304, 30, 17, 10, 7, 25, 294, 9, 22, 18, 16, 28, 18, 173, 25, 57, 11, 15, 4, 7, 10, 8, 87, 58, 20, 8, 6, 14, 14, 14, 7, 4, 13, 35, 10, 87, 3, 2, 31, 8, 30, 33, 6, 13]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.643, speedup = 0.2906535328660731, eval_ratio = 0.07838099999999999)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3614831349206349,"recall":0.3585069444444444,"f1":null,"seconds":0.00018290802836418152,"exhaustive_search_seconds":0.00036095455288887024,"evaluations":508.0,"distances_sum":1823.951768252448}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5208333333333333,"recall":0.5208333333333333,"f1":null,"seconds":0.0002986826002597809,"exhaustive_search_seconds":0.00036095455288887024,"evaluations":657.71875,"distances_sum":1732.2194798664575}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6319444444444444,"recall":0.6319444444444444,"f1":0.6319444444444444,"seconds":0.0003950633108615875,"exhaustive_search_seconds":0.00036095455288887024,"evaluations":784.75,"distances_sum":1670.5960710045865}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7170138888888885,"recall":0.7170138888888885,"f1":0.7170138888888885,"seconds":0.0005114227533340454,"exhaustive_search_seconds":0.00036095455288887024,"evaluations":930.421875,"distances_sum":1636.4650627275091}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7734374999999993,"recall":0.7734374999999993,"f1":0.7734374999999993,"seconds":0.0007284730672836304,"exhaustive_search_seconds":0.00036095455288887024,"evaluations":1029.453125,"distances_sum":1618.050782120067}
KCenters.DeloneInvIndex> reached performance {"precision":0.8064236111111106,"recall":0.8064236111111106,"f1":0.8064236111111106,"seconds":0.0006116703152656555,"exhaustive_search_seconds":0.00036095455288887024,"evaluations":1110.28125,"distances_sum":1607.7962551966575}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8170000000000001, speedup = 0.5498079348698544, eval_ratio = 0.11814000000000001)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
