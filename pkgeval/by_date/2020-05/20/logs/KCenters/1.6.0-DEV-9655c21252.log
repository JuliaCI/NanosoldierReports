Julia Version 1.6.0-DEV.63
Commit 9655c21252 (2020-05-20 01:37 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Reexport ──────────────────── v0.2.0
  Installed Missings ──────────────────── v0.4.3
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Compat ────────────────────── v3.10.0
  Installed KCenters ──────────────────── v0.2.2
  Installed JSON ──────────────────────── v0.21.0
  Installed MLDataPattern ─────────────── v0.5.3
  Installed DataAPI ───────────────────── v1.3.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed DataValueInterfaces ───────── v1.0.0
  Installed OrderedCollections ────────── v1.2.0
  Installed MLDataUtils ───────────────── v0.5.1
  Installed InvertedIndices ───────────── v1.0.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed TableTraits ───────────────── v1.0.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed LearnBase ─────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.4
  Installed Tables ────────────────────── v1.0.4
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed DataStructures ────────────── v0.17.16
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataFrames ────────────────── v0.20.2
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.10.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.16
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.4
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_zYo7pE/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_zYo7pE/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.10.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.16
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.4
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9326678744951884
[ Info: 0.8307796732584636
[ Info: 0.5576448714236418
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3224566122641166
mean(cdnet.distances) = 0.34793191303809484
mean(crand.distances) = 0.3431592265268167
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2255859375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2255859375,"f1":null,"seconds":4.328787326812744e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":6.34375,"distances_sum":626.8709829997931}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2255859375,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.2255859375,"f1":null,"seconds":4.328787326812744e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":6.34375,"distances_sum":626.8709829997931}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2255859375,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.2255859375,"f1":null,"seconds":4.328787326812744e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":6.34375,"distances_sum":626.8709829997931}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3505859375, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3505859375,"f1":null,"seconds":3.343448042869568e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":5.515625,"distances_sum":850.3273162961432}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1318359375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1318359375,"f1":null,"seconds":2.8721988201141357e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":4.5390625,"distances_sum":312.35773413081813}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4921875, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.4921875,"f1":0.6456848706848709,"seconds":3.602355718612671e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.703125,"distances_sum":1222.0528124774337}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4921875,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.4921875,"f1":0.6456848706848709,"seconds":3.602355718612671e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.703125,"distances_sum":1222.0528124774337}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8570866633366641,"seconds":5.098059773445129e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.3046875,"distances_sum":2029.951269865137}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8931042915417922,"seconds":5.155801773071289e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.5859375,"distances_sum":2202.490611286726}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5087890625, conf: {"ssize":7,"bsize":3}, perf: {"precision":null,"recall":0.5087890625,"f1":null,"seconds":4.0065497159957886e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.71875,"distances_sum":1281.287984282376}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4990234375, conf: {"ssize":8,"bsize":3}, perf: {"precision":null,"recall":0.4990234375,"f1":null,"seconds":3.773719072341919e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.6640625,"distances_sum":1266.7960548083252}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6484375, conf: {"ssize":2,"bsize":4}, perf: {"precision":null,"recall":0.6484375,"f1":null,"seconds":4.511326551437378e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.7265625,"distances_sum":1649.6982704968527}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.862972444222445,"seconds":4.863366484642029e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.234375,"distances_sum":2079.7663772603278}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8251953125,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8251953125,"f1":0.8931042915417922,"seconds":5.155801773071289e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.5859375,"distances_sum":2202.490611286726}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.933960310522811,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.65625,"distances_sum":2529.9853954324312}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9050397519147524,"seconds":5.342066287994385e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.546875,"distances_sum":2287.0847867043763}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.934443681318682,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.640625,"distances_sum":2482.1704903968016}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9119365009990015,"seconds":5.349516868591309e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.4609375,"distances_sum":2345.4951237500936}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9565564643689649,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8359375,"distances_sum":2672.482064809273}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9275214368964377,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.703125,"distances_sum":2397.139913557176}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9565564643689649,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8359375,"distances_sum":2672.482064809273}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.923828125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9565564643689649,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8359375,"distances_sum":2672.482064809273}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.447265625, conf: {"ssize":3,"bsize":2}, perf: {"precision":1.0,"recall":0.447265625,"f1":0.5961982461982465,"seconds":3.8780272006988525e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":6.8125,"distances_sum":1039.4637823872717}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5615234375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5615234375,"f1":0.7040388431013437,"seconds":4.699453711509705e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.8203125,"distances_sum":1342.0931718023412}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5615234375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5615234375,"f1":0.7040388431013437,"seconds":4.699453711509705e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.8203125,"distances_sum":1342.0931718023412}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9224473443223451,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.6953125,"distances_sum":2417.1626416369245}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9271863553113561,"seconds":5.280598998069763e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.6953125,"distances_sum":2434.3032369452994}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8720703125,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.8720703125,"f1":0.9271863553113561,"seconds":5.280598998069763e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.6953125,"distances_sum":2434.3032369452994}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9679887820512824,"seconds":5.884096026420593e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9921875,"distances_sum":2760.0182488018845}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9668040293040299,"seconds":6.064772605895996e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.984375,"distances_sum":2759.9461652862883}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9678800366300371,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.96875,"distances_sum":2799.6933147653303}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9656994047619052,"seconds":5.912035703659058e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.984375,"distances_sum":2737.5048697890916}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9679887820512824,"seconds":5.884096026420593e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9921875,"distances_sum":2760.0182488018845}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9679887820512824,"seconds":5.884096026420593e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9921875,"distances_sum":2760.0182488018845}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6826171875,"f1":0.8012799700299709,"seconds":4.837289452552795e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":7.9140625,"distances_sum":1850.211154176818}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6826171875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6826171875,"f1":0.8012799700299709,"seconds":4.837289452552795e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":7.9140625,"distances_sum":1850.211154176818}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8486328125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8486328125,"f1":0.9132929570429577,"seconds":5.494803190231323e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.5390625,"distances_sum":2489.6577374574454}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8590716575091584,"seconds":5.09992241859436e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.171875,"distances_sum":2146.0366781107045}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6962890625, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6962890625,"f1":0.8121633574758582,"seconds":4.677101969718933e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":7.9296875,"distances_sum":1876.3468104217598}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8520292207792216,"seconds":4.990026354789734e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.2421875,"distances_sum":2057.6909490055764}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8486328125,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8486328125,"f1":0.9132929570429577,"seconds":5.494803190231323e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.5390625,"distances_sum":2489.6577374574454}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9657222985347989,"seconds":5.748122930526733e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8671875,"distances_sum":2915.5950297322993}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9657394688644694,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.875,"distances_sum":2927.500791211194}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9656650641025646,"seconds":5.608424544334412e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.828125,"distances_sum":2929.540466846232}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.915899725274726,"seconds":5.418434739112854e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.3359375,"distances_sum":2510.179874298636}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9230571511821519,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.5546875,"distances_sum":2554.4849605601935}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9584878663003669,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8828125,"distances_sum":2846.35164569761}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.9169585622710632,"seconds":5.370005965232849e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.40625,"distances_sum":2476.197927403117}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9657394688644694,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.875,"distances_sum":2927.500791211194}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9657394688644694,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.875,"distances_sum":2927.500791211194}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8468729187479195,"seconds":5.068257451057434e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.109375,"distances_sum":2121.0019699138816}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4931640625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.4931640625,"f1":0.6441619144744151,"seconds":4.0512531995773315e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":6.6015625,"distances_sum":1293.7600644942925}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7509765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7509765625,"f1":0.8468729187479195,"seconds":5.068257451057434e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.109375,"distances_sum":2121.0019699138816}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9246794871794879,"seconds":5.688518285751343e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.7265625,"distances_sum":2603.2446451080323}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8583984375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8583984375,"f1":0.9163060897435903,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.71875,"distances_sum":2539.6716746326665}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9034085705960713,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.59375,"distances_sum":2434.5980965616286}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8618511696636705,"seconds":5.103647708892822e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.15625,"distances_sum":2221.9230609842566}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8701171875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8701171875,"f1":0.9246794871794879,"seconds":5.688518285751343e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.7265625,"distances_sum":2603.2446451080323}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.96717032967033,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8828125,"distances_sum":2925.284087909584}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9459706959706967,"seconds":5.131587386131287e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.7578125,"distances_sum":2802.4364031935056}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9467948717948722,"seconds":5.144625902175903e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.765625,"distances_sum":2776.81303343798}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9638621794871799,"seconds":5.1371753215789795e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.90625,"distances_sum":2895.1912147991375}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9551224816849823,"seconds":5.055218935012817e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8125,"distances_sum":2863.670330749802}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9252060439560443,"seconds":5.062669515609741e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.7578125,"distances_sum":2627.712426821035}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9599244505494507,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8828125,"distances_sum":2875.129575780849}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9666494963369968,"seconds":5.323439836502075e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8359375,"distances_sum":2930.2520648976874}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.96717032967033,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8828125,"distances_sum":2925.284087909584}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.96717032967033,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8828125,"distances_sum":2925.284087909584}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3310546875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3310546875,"f1":null,"seconds":2.8945505619049072e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":4.9609375,"distances_sum":918.7801239039807}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7421875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7421875,"f1":0.8411499958374966,"seconds":4.779547452926636e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.046875,"distances_sum":2019.94760809909}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7421875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7421875,"f1":0.8411499958374966,"seconds":4.779547452926636e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.046875,"distances_sum":2019.94760809909}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.8426280316905325,"seconds":4.580244421958923e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":7.84375,"distances_sum":2104.9260311022676}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7451171875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7451171875,"f1":0.8426280316905325,"seconds":4.580244421958923e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":7.84375,"distances_sum":2104.9260311022676}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.7451171875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7451171875,"f1":0.8426280316905325,"seconds":4.580244421958923e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":7.84375,"distances_sum":2104.9260311022676}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.642578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.642578125,"f1":0.7677660880785889,"seconds":4.190951585769653e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.2578125,"distances_sum":1339.7261664477342}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5361328125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5361328125,"f1":null,"seconds":3.935769200325012e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":6.8359375,"distances_sum":1042.4050845181678}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.7899256993006999,"seconds":4.410743713378906e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.4140625,"distances_sum":1420.2662668539783}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.66796875,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.66796875,"f1":0.7899256993006999,"seconds":4.410743713378906e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.4140625,"distances_sum":1420.2662668539783}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8458812021312029,"seconds":4.731118679046631e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.7421875,"distances_sum":1662.903290325203}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9450580669330676,"seconds":5.403533577919006e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.7109375,"distances_sum":2255.1472301908425}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8628642191142198,"seconds":4.682689905166626e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.984375,"distances_sum":1738.2500662438474}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9271405677655684,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.53125,"distances_sum":2148.792069357543}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8897389069264078,"seconds":5.032867193222046e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.21875,"distances_sum":1887.9415534884338}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9450580669330676,"seconds":5.403533577919006e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.7109375,"distances_sum":2255.1472301908425}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9587282509157515,"seconds":5.261972546577454e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8046875,"distances_sum":2342.301976921947}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9696428571428577,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8671875,"distances_sum":2403.3084045122037}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9587683150183155,"seconds":5.122274160385132e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.890625,"distances_sum":2300.1337830155876}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9778273809523813,"seconds":1.3474375009536743e-5,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.890625,"distances_sum":2482.8793080178784}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9778273809523813,"seconds":1.3474375009536743e-5,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.890625,"distances_sum":2482.8793080178784}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9778273809523813,"seconds":1.3474375009536743e-5,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.890625,"distances_sum":2482.8793080178784}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1787109375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1787109375,"f1":null,"seconds":3.0919909477233887e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":4.46875,"distances_sum":419.4697534545612}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1787109375,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.1787109375,"f1":null,"seconds":3.0919909477233887e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":4.46875,"distances_sum":419.4697534545612}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1787109375,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.1787109375,"f1":null,"seconds":3.0919909477233887e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":4.46875,"distances_sum":419.4697534545612}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1533203125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1533203125,"f1":null,"seconds":3.041699528694153e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":4.3984375,"distances_sum":288.7360967730603}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6484375,"f1":0.7708761724386733,"seconds":5.088746547698975e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.3125,"distances_sum":959.6039836752519}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6484375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6484375,"f1":0.7708761724386733,"seconds":5.088746547698975e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.3125,"distances_sum":959.6039836752519}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7197265625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7197265625,"f1":0.8264813311688318,"seconds":4.86522912979126e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.765625,"distances_sum":1096.7350720267816}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7197265625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7197265625,"f1":0.8264813311688318,"seconds":4.86522912979126e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.765625,"distances_sum":1096.7350720267816}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9259787087912094,"seconds":5.593523383140564e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.609375,"distances_sum":1415.2901012465832}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9486320970695975,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.6640625,"distances_sum":1501.1787492822205}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9486320970695975,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.6640625,"distances_sum":1501.1787492822205}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91015625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9486320970695975,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.6640625,"distances_sum":1501.1787492822205}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2373046875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2373046875,"f1":null,"seconds":3.6712735891342163e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":6.4765625,"distances_sum":410.044222319828}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5927734375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5927734375,"f1":0.7271495865245872,"seconds":4.597008228302002e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.875,"distances_sum":878.5423956844093}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7109375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.7109375,"f1":0.8205919080919089,"seconds":5.0924718379974365e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.296875,"distances_sum":1117.7086626583293}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7109375,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.7109375,"f1":0.8205919080919089,"seconds":5.0924718379974365e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.296875,"distances_sum":1117.7086626583293}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7958984375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7958984375,"f1":0.8813847610722619,"seconds":5.29363751411438e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.3984375,"distances_sum":1239.0350066301046}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.736328125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.736328125,"f1":0.8400131118881127,"seconds":4.736706614494324e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.359375,"distances_sum":1143.1080813096594}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80859375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.80859375,"f1":0.8857975357975365,"seconds":5.304813385009766e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.4609375,"distances_sum":1288.6957640835706}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9348875083250088,"seconds":6.1336904764175415e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.796875,"distances_sum":1460.245384953092}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.810546875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.810546875,"f1":0.8865918803418815,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.609375,"distances_sum":1341.5595011270227}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8876953125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8876953125,"f1":0.9348875083250088,"seconds":6.1336904764175415e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.796875,"distances_sum":1460.245384953092}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9754292582417585,"seconds":6.249174475669861e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.953125,"distances_sum":1665.953861990918}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9618933150183154,"seconds":6.334856152534485e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.9140625,"distances_sum":1575.4967458462982}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9740728021978027,"seconds":6.441026926040649e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.96875,"distances_sum":1641.7988030725185}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9754292582417585,"seconds":6.249174475669861e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.953125,"distances_sum":1665.953861990918}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9754292582417585,"seconds":6.249174475669861e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.953125,"distances_sum":1665.953861990918}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69921875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.69921875,"f1":0.8084358349983358,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.4765625,"distances_sum":1164.0278815993438}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1845703125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1845703125,"f1":null,"seconds":3.298744559288025e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":5.0546875,"distances_sum":334.3981341096993}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.69921875,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.69921875,"f1":0.8084358349983358,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.4765625,"distances_sum":1164.0278815993438}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8670137154512163,"seconds":5.349516868591309e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.84375,"distances_sum":1346.873530594553}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.949510905760906,"seconds":6.0480087995529175e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.890625,"distances_sum":1666.1434552911423}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9355425824175829,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.921875,"distances_sum":1575.4456445430085}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.949510905760906,"seconds":6.0480087995529175e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.890625,"distances_sum":1666.1434552911423}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9732715201465205,"seconds":6.1802566051483154e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.8984375,"distances_sum":1778.2895632643804}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9681604853479855,"seconds":6.118789315223694e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.9453125,"distances_sum":1753.2993923232657}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9565533424908431,"seconds":6.096437573432922e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.84375,"distances_sum":1709.1527653335002}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9562900641025647,"seconds":6.273388862609863e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.859375,"distances_sum":1702.2819815013536}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9758585164835167,"seconds":6.273388862609863e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.9375,"distances_sum":1789.8428441966082}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9758585164835167,"seconds":6.273388862609863e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.9375,"distances_sum":1789.8428441966082}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9758585164835167,"seconds":6.273388862609863e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.9375,"distances_sum":1789.8428441966082}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3974609375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3974609375,"f1":null,"seconds":3.7122517824172974e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.8359375,"distances_sum":645.2950006809888}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.693359375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.693359375,"f1":0.807864878177379,"seconds":4.908069968223572e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.1171875,"distances_sum":1142.8625420763476}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.8009816572316582,"seconds":4.598870873451233e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.0859375,"distances_sum":1127.081710543764}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.693359375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.693359375,"f1":0.807864878177379,"seconds":4.908069968223572e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.1171875,"distances_sum":1142.8625420763476}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.9116789460539466,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.5390625,"distances_sum":1477.3056198352147}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.806640625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.806640625,"f1":0.8861669580419588,"seconds":5.243346095085144e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.3671875,"distances_sum":1375.8550746452806}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9529246794871802,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8359375,"distances_sum":1666.0794290860056}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9529246794871802,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8359375,"distances_sum":1666.0794290860056}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9772321428571432,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9453125,"distances_sum":1787.1174375761482}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9691964285714288,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8828125,"distances_sum":1755.316899178068}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9549336080586085,"seconds":7.372349500656128e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.828125,"distances_sum":1685.119085761518}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9772321428571432,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9453125,"distances_sum":1787.1174375761482}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9772321428571432,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9453125,"distances_sum":1787.1174375761482}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.64453125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.64453125,"f1":0.7729092088467097,"seconds":4.392117261886597e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":7.6796875,"distances_sum":1130.223066159316}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1669921875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1669921875,"f1":null,"seconds":2.8312206268310547e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":4.734375,"distances_sum":308.33041475375103}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.64453125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.64453125,"f1":0.7729092088467097,"seconds":4.392117261886597e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":7.6796875,"distances_sum":1130.223066159316}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9223079004329012,"seconds":5.418434739112854e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.75,"distances_sum":1645.2468361841532}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87109375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.87109375,"f1":0.9223079004329012,"seconds":5.418434739112854e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.75,"distances_sum":1645.2468361841532}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9670215201465204,"seconds":5.882233381271362e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.8828125,"distances_sum":1858.3195716093771}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9670215201465204,"seconds":5.882233381271362e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.8828125,"distances_sum":1858.3195716093771}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9670215201465204,"seconds":5.882233381271362e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.8828125,"distances_sum":1858.3195716093771}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7949961496836506,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.0859375,"distances_sum":1089.534025253553}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4150390625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4150390625,"f1":null,"seconds":4.505738615989685e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":6.90625,"distances_sum":635.131630260006}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6767578125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6767578125,"f1":0.7949961496836506,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.0859375,"distances_sum":1089.534025253553}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9388106684981692,"seconds":6.3516199588775635e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.890625,"distances_sum":1533.6391408994207}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9444826007326015,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.796875,"distances_sum":1582.9445638470816}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9577781593406597,"seconds":6.4838677644729614e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8515625,"distances_sum":1639.4562986213314}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9577781593406597,"seconds":6.4838677644729614e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8515625,"distances_sum":1639.4562986213314}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9766197344322347,"seconds":6.491318345069885e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.96875,"distances_sum":1736.8571053281698}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9793154761904765,"seconds":6.489455699920654e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.9609375,"distances_sum":1764.5572323778947}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9799851190476194,"seconds":6.906688213348389e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.96875,"distances_sum":1764.0431899923135}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9685871420246424,"seconds":7.094815373420715e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.875,"distances_sum":1730.636277198434}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9736607142857145,"seconds":6.642192602157593e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.9453125,"distances_sum":1727.6750258980592}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9799851190476194,"seconds":6.906688213348389e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.96875,"distances_sum":1764.0431899923135}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9799851190476194,"seconds":6.906688213348389e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.96875,"distances_sum":1764.0431899923135}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7060546875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.7060546875,"f1":0.816908612221113,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.9765625,"distances_sum":1107.7709664718773}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8683892496392506,"seconds":5.6549906730651855e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.3046875,"distances_sum":1261.5163675511608}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78125,"f1":0.8683892496392506,"seconds":5.6549906730651855e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.3046875,"distances_sum":1261.5163675511608}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9270750083250091,"seconds":6.057322025299072e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.640625,"distances_sum":1505.0244253739745}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9573145604395608,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.84375,"distances_sum":1648.4321014342702}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9427197802197808,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8125,"distances_sum":1588.1115228917738}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9573145604395608,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.84375,"distances_sum":1648.4321014342702}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9596783424908427,"seconds":5.81890344619751e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.875,"distances_sum":1663.3610213627176}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9665407509157513,"seconds":6.206333637237549e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9296875,"distances_sum":1680.2794845920203}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9618131868131875,"seconds":6.061047315597534e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.875,"distances_sum":1668.632223727896}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9638793498168502,"seconds":5.81890344619751e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.890625,"distances_sum":1683.7533039710495}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9594894688644695,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8828125,"distances_sum":1646.248722082341}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9665407509157513,"seconds":6.206333637237549e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9296875,"distances_sum":1680.2794845920203}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9665407509157513,"seconds":6.206333637237549e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9296875,"distances_sum":1680.2794845920203}}, n: 9
mean(cfft.distances) = 0.33654519695459595
mean(cdnet.distances) = 1.0596758553615944
mean(crand.distances) = 0.33846289790896883
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.9
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9177777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8822222222222221
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.9422222222222222
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8577777777777778
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333332
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8866666666666667
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.888888888888889
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9022222222222224
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8622222222222221
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9133333333333334
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9155555555555556
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9177777777777778
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9222222222222222
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8466666666666667
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9133333333333334
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8777777777777778
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8844444444444445
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8799999999999999
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9288888888888889
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8911111111111111
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8333333333333334
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9155555555555556
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9111111111111111
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9199999999999999
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 9, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 12, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 3, 2, 2, 3, 2, 3, 1, 3, 2, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 9, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 12, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 3, 2, 2, 3, 2, 3, 1, 3, 2, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 9, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 12, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 3, 2, 2, 3, 2, 3, 1, 3, 2, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 9, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 12, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 3, 2, 2, 3, 2, 3, 1, 3, 2, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 9, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 12, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 3, 2, 2, 3, 2, 3, 1, 3, 2, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 9, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 12, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 3, 2, 2, 3, 2, 3, 1, 3, 2, 3]
acc = 0.94
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 9, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 12, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 3, 2, 2, 3, 2, 3, 1, 3, 2, 3]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.5384485748410225] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 29, 1]]
** centroid: 1, normalized-entropy: 0.2108423003185322, [(2, 29), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 2]]
** centroid: 8, normalized-entropy: 1.0, [(2, 2), (3, 2)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 14]]
** centroid: 9, normalized-entropy: 0.5435644431995963, [(2, 2), (3, 14)]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
finished with 14 centroids; started with 12
acc = 0.96
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.41036474876764834] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41036474876764834, 0.3015494428887807] ***
*** starting iteration: 2; err: [Inf, 0.41036474876764834, 0.3015494428887807] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41036474876764834, 0.3015494428887807, 0.2957991158151287] ***
*** starting iteration: 3; err: [Inf, 0.41036474876764834, 0.3015494428887807, 0.2957991158151287] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41036474876764834, 0.3015494428887807, 0.2957991158151287, 0.29433419178987014] ***
*** starting iteration: 4; err: [Inf, 0.41036474876764834, 0.3015494428887807, 0.2957991158151287, 0.29433419178987014] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41036474876764834, 0.3015494428887807, 0.2957991158151287, 0.29433419178987014, 0.2935308850659379] ***
*** finished computation of 3 references, err: [Inf, 0.41036474876764834, 0.3015494428887807, 0.2957991158151287, 0.29433419178987014, 0.2935308850659379] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [247, 17, 0]]
** centroid: 1, normalized-entropy: 0.34464573109075985, [(1, 247), (2, 17)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 177, 21]]
** centroid: 2, normalized-entropy: 0.48791799258948565, [(2, 177), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [159, 46, 0]]
** centroid: 3, normalized-entropy: 0.76810331965747, [(1, 159), (2, 46)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3810358984867806] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3810358984867806, 0.30379360636928004] ***
*** starting iteration: 2; err: [Inf, 0.3810358984867806, 0.30379360636928004] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3810358984867806, 0.30379360636928004, 0.29885945478915005] ***
*** starting iteration: 3; err: [Inf, 0.3810358984867806, 0.30379360636928004, 0.29885945478915005] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3810358984867806, 0.30379360636928004, 0.29885945478915005, 0.297282293168032] ***
*** starting iteration: 4; err: [Inf, 0.3810358984867806, 0.30379360636928004, 0.29885945478915005, 0.297282293168032] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3810358984867806, 0.30379360636928004, 0.29885945478915005, 0.297282293168032, 0.2968482105609454] ***
*** finished computation of 3 references, err: [Inf, 0.3810358984867806, 0.30379360636928004, 0.29885945478915005, 0.297282293168032, 0.2968482105609454] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [63, 149, 29]]
** centroid: 1, normalized-entropy: 0.8217798163164263, [(1, 63), (2, 149), (3, 29)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [133, 101, 0]]
** centroid: 2, normalized-entropy: 0.9864676098415691, [(1, 133), (2, 101)]
*** center 3: selecting labels [1] (freq >= 1) [from [192, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.24018588391210963] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24018588391210963, 0.19498379148372277] ***
*** starting iteration: 2; err: [Inf, 0.24018588391210963, 0.19498379148372277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24018588391210963, 0.19498379148372277, 0.1884907902128905] ***
*** starting iteration: 3; err: [Inf, 0.24018588391210963, 0.19498379148372277, 0.1884907902128905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24018588391210963, 0.19498379148372277, 0.1884907902128905, 0.18788163199763488] ***
*** finished computation of 7 references, err: [Inf, 0.24018588391210963, 0.19498379148372277, 0.1884907902128905, 0.18788163199763488] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 92, 0]]
** centroid: 1, normalized-entropy: 0.29292995113885967, [(1, 5), (2, 92)]
*** center 2: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [109, 6, 0]]
** centroid: 4, normalized-entropy: 0.295560777857315, [(1, 109), (2, 6)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 54, 24]]
** centroid: 5, normalized-entropy: 0.8904916402194913, [(2, 54), (3, 24)]
*** center 6: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [15, 92, 0]]
** centroid: 7, normalized-entropy: 0.5847281182574745, [(1, 15), (2, 92)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2466980352358281] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2466980352358281, 0.19666437321863342] ***
*** starting iteration: 2; err: [Inf, 0.2466980352358281, 0.19666437321863342] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2466980352358281, 0.19666437321863342, 0.19092131526987144] ***
*** starting iteration: 3; err: [Inf, 0.2466980352358281, 0.19666437321863342, 0.19092131526987144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2466980352358281, 0.19666437321863342, 0.19092131526987144, 0.19011464735459552] ***
*** finished computation of 7 references, err: [Inf, 0.2466980352358281, 0.19666437321863342, 0.19092131526987144, 0.19011464735459552] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 102, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 42, 0]]
** centroid: 3, normalized-entropy: 0.9957274520849256, [(1, 49), (2, 42)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [92, 24, 0]]
** centroid: 4, normalized-entropy: 0.7355085815538399, [(1, 92), (2, 24)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 72, 21]]
** centroid: 5, normalized-entropy: 0.7706290693639406, [(2, 72), (3, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2413453613833777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2413453613833777, 0.1975199818161541] ***
*** starting iteration: 2; err: [Inf, 0.2413453613833777, 0.1975199818161541] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2413453613833777, 0.1975199818161541, 0.19416750793246138] ***
*** starting iteration: 3; err: [Inf, 0.2413453613833777, 0.1975199818161541, 0.19416750793246138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2413453613833777, 0.1975199818161541, 0.19416750793246138, 0.19373756712107085] ***
*** finished computation of 7 references, err: [Inf, 0.2413453613833777, 0.1975199818161541, 0.19416750793246138, 0.19373756712107085] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 105, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [74, 36, 0]]
** centroid: 3, normalized-entropy: 0.9121156307204275, [(1, 74), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [41, 50, 0]]
** centroid: 4, normalized-entropy: 0.9929326437363045, [(1, 41), (2, 50)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 59, 29]]
** centroid: 5, normalized-entropy: 0.9144612916935675, [(2, 59), (3, 29)]
*** center 6: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26816898329930194] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26816898329930194, 0.19451456884056464] ***
*** finished computation of 7 references, err: [Inf, 0.26816898329930194, 0.19451456884056464] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [25, 73, 0]]
** centroid: 1, normalized-entropy: 0.8192649712314392, [(1, 25), (2, 73)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 45, 24]]
** centroid: 2, normalized-entropy: 0.9321115676166747, [(2, 45), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [6, 91, 0]]
** centroid: 3, normalized-entropy: 0.3347676126777638, [(1, 6), (2, 91)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [40, 34, 0]]
** centroid: 4, normalized-entropy: 0.9952525494396791, [(1, 40), (2, 34)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [127, 1, 0]]
** centroid: 5, normalized-entropy: 0.06591441234324168, [(1, 127), (2, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24680908410314253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24680908410314253, 0.19400568177010388] ***
*** finished computation of 7 references, err: [Inf, 0.24680908410314253, 0.19400568177010388] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [112, 3, 0]]
** centroid: 1, normalized-entropy: 0.17437145292163486, [(1, 112), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [33, 28, 0]]
** centroid: 2, normalized-entropy: 0.995148095654003, [(1, 33), (2, 28)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [91, 14, 0]]
** centroid: 3, normalized-entropy: 0.5665095065529052, [(1, 91), (2, 14)]
*** center 4: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 92, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 103, 21]]
** centroid: 7, normalized-entropy: 0.6562267928205406, [(2, 103), (3, 21)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30410006745946017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30410006745946017, 0.20816067030103222] ***
*** finished computation of 7 references, err: [Inf, 0.30410006745946017, 0.20816067030103222] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [48, 40, 0]]
** centroid: 1, normalized-entropy: 0.9940302114769566, [(1, 48), (2, 40)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [81, 56, 0]]
** centroid: 2, normalized-entropy: 0.9758443028957061, [(1, 81), (2, 56)]
*** center 3: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 141, 29]]
** centroid: 4, normalized-entropy: 0.6590486446851754, [(2, 141), (3, 29)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [61, 13, 0]]
** centroid: 5, normalized-entropy: 0.6705250693158382, [(1, 61), (2, 13)]
*** center 6: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.37678537920939625] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37678537920939625, 0.25241562493240555] ***
*** starting iteration: 2; err: [Inf, 0.37678537920939625, 0.25241562493240555] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37678537920939625, 0.25241562493240555, 0.2368860068442943] ***
*** starting iteration: 3; err: [Inf, 0.37678537920939625, 0.25241562493240555, 0.2368860068442943] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37678537920939625, 0.25241562493240555, 0.2368860068442943, 0.2329810462967568] ***
*** finished computation of 3 references, err: [Inf, 0.37678537920939625, 0.25241562493240555, 0.2368860068442943, 0.2329810462967568] ***
*** center 1: selecting labels [1] (freq >= 1) [from [238, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [38, 172, 24]]
** centroid: 2, normalized-entropy: 0.687248217888674, [(1, 38), (2, 172), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [122, 72, 0]]
** centroid: 3, normalized-entropy: 0.9515388458648668, [(1, 122), (2, 72)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3280704735067563] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3280704735067563, 0.25535294681094933] ***
*** starting iteration: 2; err: [Inf, 0.3280704735067563, 0.25535294681094933] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3280704735067563, 0.25535294681094933, 0.24386004129958072] ***
*** starting iteration: 3; err: [Inf, 0.3280704735067563, 0.25535294681094933, 0.24386004129958072] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3280704735067563, 0.25535294681094933, 0.24386004129958072, 0.24008443304009433] ***
*** finished computation of 3 references, err: [Inf, 0.3280704735067563, 0.25535294681094933, 0.24386004129958072, 0.24008443304009433] ***
*** center 1: selecting labels [1] (freq >= 1) [from [205, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [85, 152, 21]]
** centroid: 2, normalized-entropy: 0.8025396004867128, [(1, 85), (2, 152), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [116, 88, 0]]
** centroid: 3, normalized-entropy: 0.9863676072907089, [(1, 116), (2, 88)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39492221869182015] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39492221869182015, 0.2725009759209109] ***
*** starting iteration: 2; err: [Inf, 0.39492221869182015, 0.2725009759209109] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39492221869182015, 0.2725009759209109, 0.24499291738263448] ***
*** starting iteration: 3; err: [Inf, 0.39492221869182015, 0.2725009759209109, 0.24499291738263448] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39492221869182015, 0.2725009759209109, 0.24499291738263448, 0.2356008437114476] ***
*** finished computation of 3 references, err: [Inf, 0.39492221869182015, 0.2725009759209109, 0.24499291738263448, 0.2356008437114476] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [253, 19, 0]]
** centroid: 1, normalized-entropy: 0.36537461642280794, [(1, 253), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [133, 73, 0]]
** centroid: 2, normalized-entropy: 0.9379094751448717, [(1, 133), (2, 73)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [2, 158, 29]]
** centroid: 3, normalized-entropy: 0.44193461605480316, [(1, 2), (2, 158), (3, 29)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.28844603087037085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28844603087037085, 0.2189257154031447] ***
*** starting iteration: 2; err: [Inf, 0.28844603087037085, 0.2189257154031447] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28844603087037085, 0.2189257154031447, 0.20752059499308043] ***
*** starting iteration: 3; err: [Inf, 0.28844603087037085, 0.2189257154031447, 0.20752059499308043] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28844603087037085, 0.2189257154031447, 0.20752059499308043, 0.20157493654898628] ***
*** starting iteration: 4; err: [Inf, 0.28844603087037085, 0.2189257154031447, 0.20752059499308043, 0.20157493654898628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28844603087037085, 0.2189257154031447, 0.20752059499308043, 0.20157493654898628, 0.19761954241728708] ***
*** starting iteration: 5; err: [Inf, 0.28844603087037085, 0.2189257154031447, 0.20752059499308043, 0.20157493654898628, 0.19761954241728708] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28844603087037085, 0.2189257154031447, 0.20752059499308043, 0.20157493654898628, 0.19761954241728708, 0.19395239916755944] ***
*** starting iteration: 6; err: [Inf, 0.28844603087037085, 0.2189257154031447, 0.20752059499308043, 0.20157493654898628, 0.19761954241728708, 0.19395239916755944] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28844603087037085, 0.2189257154031447, 0.20752059499308043, 0.20157493654898628, 0.19761954241728708, 0.19395239916755944, 0.18926314787251186] ***
*** starting iteration: 7; err: [Inf, 0.28844603087037085, 0.2189257154031447, 0.20752059499308043, 0.20157493654898628, 0.19761954241728708, 0.19395239916755944, 0.18926314787251186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28844603087037085, 0.2189257154031447, 0.20752059499308043, 0.20157493654898628, 0.19761954241728708, 0.19395239916755944, 0.18926314787251186, 0.1880300862311914] ***
*** starting iteration: 8; err: [Inf, 0.28844603087037085, 0.2189257154031447, 0.20752059499308043, 0.20157493654898628, 0.19761954241728708, 0.19395239916755944, 0.18926314787251186, 0.1880300862311914] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28844603087037085, 0.2189257154031447, 0.20752059499308043, 0.20157493654898628, 0.19761954241728708, 0.19395239916755944, 0.18926314787251186, 0.1880300862311914, 0.18721975834603916] ***
*** finished computation of 7 references, err: [Inf, 0.28844603087037085, 0.2189257154031447, 0.20752059499308043, 0.20157493654898628, 0.19761954241728708, 0.19395239916755944, 0.18926314787251186, 0.1880300862311914, 0.18721975834603916] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [4, 87, 0]]
** centroid: 1, normalized-entropy: 0.26014536394771426, [(1, 4), (2, 87)]
*** center 2: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [119, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [15, 54, 0]]
** centroid: 4, normalized-entropy: 0.7553754125614286, [(1, 15), (2, 54)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [114, 1, 0]]
** centroid: 5, normalized-entropy: 0.07201647168541395, [(1, 114), (2, 1)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 60, 24]]
** centroid: 6, normalized-entropy: 0.8631205685666311, [(2, 60), (3, 24)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [44, 42, 0]]
** centroid: 7, normalized-entropy: 0.9996098363678071, [(1, 44), (2, 42)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22717984025946064] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22717984025946064, 0.202532930076234] ***
*** starting iteration: 2; err: [Inf, 0.22717984025946064, 0.202532930076234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22717984025946064, 0.202532930076234, 0.19468804804895862] ***
*** starting iteration: 3; err: [Inf, 0.22717984025946064, 0.202532930076234, 0.19468804804895862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22717984025946064, 0.202532930076234, 0.19468804804895862, 0.19179050298058603] ***
*** starting iteration: 4; err: [Inf, 0.22717984025946064, 0.202532930076234, 0.19468804804895862, 0.19179050298058603] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22717984025946064, 0.202532930076234, 0.19468804804895862, 0.19179050298058603, 0.18876608077163012] ***
*** starting iteration: 5; err: [Inf, 0.22717984025946064, 0.202532930076234, 0.19468804804895862, 0.19179050298058603, 0.18876608077163012] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22717984025946064, 0.202532930076234, 0.19468804804895862, 0.19179050298058603, 0.18876608077163012, 0.18667367209695737] ***
*** starting iteration: 6; err: [Inf, 0.22717984025946064, 0.202532930076234, 0.19468804804895862, 0.19179050298058603, 0.18876608077163012, 0.18667367209695737] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22717984025946064, 0.202532930076234, 0.19468804804895862, 0.19179050298058603, 0.18876608077163012, 0.18667367209695737, 0.18589914383051143] ***
*** finished computation of 7 references, err: [Inf, 0.22717984025946064, 0.202532930076234, 0.19468804804895862, 0.19179050298058603, 0.18876608077163012, 0.18667367209695737, 0.18589914383051143] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [48, 27, 0]]
** centroid: 1, normalized-entropy: 0.9426831892554921, [(1, 48), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [9, 79, 0]]
** centroid: 2, normalized-entropy: 0.4761588445580706, [(1, 9), (2, 79)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [44, 39, 0]]
** centroid: 3, normalized-entropy: 0.9973806632063373, [(1, 44), (2, 39)]
*** center 4: selecting labels [1] (freq >= 1) [from [112, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 95, 21]]
** centroid: 6, normalized-entropy: 0.6823348859052101, [(2, 95), (3, 21)]
*** center 7: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24183267899935526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24183267899935526, 0.20456117207067145] ***
*** starting iteration: 2; err: [Inf, 0.24183267899935526, 0.20456117207067145] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24183267899935526, 0.20456117207067145, 0.19757724110165548] ***
*** starting iteration: 3; err: [Inf, 0.24183267899935526, 0.20456117207067145, 0.19757724110165548] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24183267899935526, 0.20456117207067145, 0.19757724110165548, 0.1922232380578074] ***
*** starting iteration: 4; err: [Inf, 0.24183267899935526, 0.20456117207067145, 0.19757724110165548, 0.1922232380578074] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24183267899935526, 0.20456117207067145, 0.19757724110165548, 0.1922232380578074, 0.19089410993838865] ***
*** starting iteration: 5; err: [Inf, 0.24183267899935526, 0.20456117207067145, 0.19757724110165548, 0.1922232380578074, 0.19089410993838865] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24183267899935526, 0.20456117207067145, 0.19757724110165548, 0.1922232380578074, 0.19089410993838865, 0.19022026740857909] ***
*** finished computation of 7 references, err: [Inf, 0.24183267899935526, 0.20456117207067145, 0.19757724110165548, 0.1922232380578074, 0.19089410993838865, 0.19022026740857909] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 54, 29]]
** centroid: 1, normalized-entropy: 0.9335289015212996, [(2, 54), (3, 29)]
*** center 2: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [67, 13, 0]]
** centroid: 3, normalized-entropy: 0.6402569436810504, [(1, 67), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [13, 84, 0]]
** centroid: 4, normalized-entropy: 0.5683625344629001, [(1, 13), (2, 84)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [11, 99, 0]]
** centroid: 5, normalized-entropy: 0.46899559358928133, [(1, 11), (2, 99)]
*** center 6: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4366572628220034] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4366572628220034, 0.35823968088382985] ***
*** finished computation of 3 references, err: [Inf, 0.4366572628220034, 0.35823968088382985] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [299, 76, 0]]
** centroid: 1, normalized-entropy: 0.7272294744313875, [(1, 299), (2, 76)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [27, 52, 14]]
** centroid: 2, normalized-entropy: 0.8821752935766158, [(1, 27), (2, 52), (3, 14)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [72, 116, 10]]
** centroid: 3, normalized-entropy: 0.7572206498532539, [(1, 72), (2, 116), (3, 10)]
finished with 8 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4485948404417313] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4485948404417313, 0.33512457073324065] ***
*** finished computation of 3 references, err: [Inf, 0.4485948404417313, 0.33512457073324065] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [250, 33, 0]]
** centroid: 1, normalized-entropy: 0.5195307618977807, [(1, 250), (2, 33)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [66, 98, 21]]
** centroid: 2, normalized-entropy: 0.8658925218861419, [(1, 66), (2, 98), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [90, 109, 0]]
** centroid: 3, normalized-entropy: 0.9934142181800525, [(1, 90), (2, 109)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4181075272341629] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4181075272341629, 0.3096282693977723] ***
*** finished computation of 3 references, err: [Inf, 0.4181075272341629, 0.3096282693977723] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [148, 87, 0]]
** centroid: 1, normalized-entropy: 0.9508353199610683, [(1, 148), (2, 87)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [94, 163, 29]]
** centroid: 2, normalized-entropy: 0.8358003927762111, [(1, 94), (2, 163), (3, 29)]
*** center 3: selecting labels [1] (freq >= 1) [from [146, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.309133335810949] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.309133335810949, 0.24454808102042466] ***
*** starting iteration: 2; err: [Inf, 0.309133335810949, 0.24454808102042466] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.309133335810949, 0.24454808102042466, 0.2358552012270926] ***
*** starting iteration: 3; err: [Inf, 0.309133335810949, 0.24454808102042466, 0.2358552012270926] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.309133335810949, 0.24454808102042466, 0.2358552012270926, 0.23342760297813797] ***
*** starting iteration: 4; err: [Inf, 0.309133335810949, 0.24454808102042466, 0.2358552012270926, 0.23342760297813797] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.309133335810949, 0.24454808102042466, 0.2358552012270926, 0.23342760297813797, 0.233038111227668] ***
*** finished computation of 3 references, err: [Inf, 0.309133335810949, 0.24454808102042466, 0.2358552012270926, 0.23342760297813797, 0.233038111227668] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [78, 146, 24]]
** centroid: 1, normalized-entropy: 0.8207831978931653, [(1, 78), (2, 146), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [199, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [121, 98, 0]]
** centroid: 3, normalized-entropy: 0.992028993694706, [(1, 121), (2, 98)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3530907793894879] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3530907793894879, 0.23139555901400688] ***
*** starting iteration: 2; err: [Inf, 0.3530907793894879, 0.23139555901400688] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3530907793894879, 0.23139555901400688, 0.23013437598820838] ***
*** starting iteration: 3; err: [Inf, 0.3530907793894879, 0.23139555901400688, 0.23013437598820838] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3530907793894879, 0.23139555901400688, 0.23013437598820838, 0.23000523596834474] ***
*** finished computation of 3 references, err: [Inf, 0.3530907793894879, 0.23139555901400688, 0.23013437598820838, 0.23000523596834474] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [237, 9, 0]]
** centroid: 1, normalized-entropy: 0.22641094842107634, [(1, 237), (2, 9)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 196, 21]]
** centroid: 2, normalized-entropy: 0.45868581620054033, [(2, 196), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [169, 35, 0]]
** centroid: 3, normalized-entropy: 0.6612805854775594, [(1, 169), (2, 35)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3494987550625826] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3494987550625826, 0.24025955287574874] ***
*** starting iteration: 2; err: [Inf, 0.3494987550625826, 0.24025955287574874] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3494987550625826, 0.24025955287574874, 0.23415893501974921] ***
*** starting iteration: 3; err: [Inf, 0.3494987550625826, 0.24025955287574874, 0.23415893501974921] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3494987550625826, 0.24025955287574874, 0.23415893501974921, 0.233134468160067] ***
*** starting iteration: 4; err: [Inf, 0.3494987550625826, 0.24025955287574874, 0.23415893501974921, 0.233134468160067] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3494987550625826, 0.24025955287574874, 0.23415893501974921, 0.233134468160067, 0.23292974163596608] ***
*** finished computation of 3 references, err: [Inf, 0.3494987550625826, 0.24025955287574874, 0.23415893501974921, 0.233134468160067, 0.23292974163596608] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [239, 4, 0]]
** centroid: 1, normalized-entropy: 0.12107930563294596, [(1, 239), (2, 4)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [4, 188, 29]]
** centroid: 2, normalized-entropy: 0.4338921405808819, [(1, 4), (2, 188), (3, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [145, 58, 0]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(1, 145), (2, 58)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3642476520811518] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3642476520811518, 0.24318153320814487] ***
*** starting iteration: 2; err: [Inf, 0.3642476520811518, 0.24318153320814487] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3642476520811518, 0.24318153320814487, 0.23487994907872733] ***
*** starting iteration: 3; err: [Inf, 0.3642476520811518, 0.24318153320814487, 0.23487994907872733] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3642476520811518, 0.24318153320814487, 0.23487994907872733, 0.23332082796716005] ***
*** finished computation of 3 references, err: [Inf, 0.3642476520811518, 0.24318153320814487, 0.23487994907872733, 0.23332082796716005] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [105, 105, 1]]
** centroid: 1, normalized-entropy: 1.0, [(1, 105), (2, 105)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [97, 139, 23]]
** centroid: 2, normalized-entropy: 0.8345497049533387, [(1, 97), (2, 139), (3, 23)]
*** center 3: selecting labels [1] (freq >= 2) [from [196, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3017691151536387] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3017691151536387, 0.2392309441606792] ***
*** starting iteration: 2; err: [Inf, 0.3017691151536387, 0.2392309441606792] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3017691151536387, 0.2392309441606792, 0.2382264669588034] ***
*** starting iteration: 3; err: [Inf, 0.3017691151536387, 0.2392309441606792, 0.2382264669588034] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3017691151536387, 0.2392309441606792, 0.2382264669588034, 0.2380142212863537] ***
*** finished computation of 3 references, err: [Inf, 0.3017691151536387, 0.2392309441606792, 0.2382264669588034, 0.2380142212863537] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [61, 124, 20]]
** centroid: 1, normalized-entropy: 0.8117743442850566, [(1, 61), (2, 124), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [137, 116, 1]]
** centroid: 2, normalized-entropy: 0.9950244410959287, [(1, 137), (2, 116)]
*** center 3: selecting labels [1] (freq >= 2) [from [208, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3365596775838203] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3365596775838203, 0.2879482917641213] ***
*** starting iteration: 2; err: [Inf, 0.3365596775838203, 0.2879482917641213] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3365596775838203, 0.2879482917641213, 0.25522780097808795] ***
*** starting iteration: 3; err: [Inf, 0.3365596775838203, 0.2879482917641213, 0.25522780097808795] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3365596775838203, 0.2879482917641213, 0.25522780097808795, 0.23691900693595053] ***
*** finished computation of 3 references, err: [Inf, 0.3365596775838203, 0.2879482917641213, 0.25522780097808795, 0.23691900693595053] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [130, 104, 0]]
** centroid: 1, normalized-entropy: 0.9910760598382222, [(1, 130), (2, 104)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [243, 10, 0]]
** centroid: 2, normalized-entropy: 0.24011326115645099, [(1, 243), (2, 10)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [15, 136, 29]]
** centroid: 3, normalized-entropy: 0.6489946854761657, [(1, 15), (2, 136), (3, 29)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2777370009878958] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2777370009878958, 0.2412321839506763] ***
*** finished computation of 3 references, err: [Inf, 0.2777370009878958, 0.2412321839506763] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [107, 180, 24]]
** centroid: 1, normalized-entropy: 0.8021735924181806, [(1, 107), (2, 180), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [167, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [124, 64, 0]]
** centroid: 3, normalized-entropy: 0.9252253278054431, [(1, 124), (2, 64)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2998250470045714] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2998250470045714, 0.25262866034751935] ***
*** finished computation of 3 references, err: [Inf, 0.2998250470045714, 0.25262866034751935] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [129, 182, 21]]
** centroid: 1, normalized-entropy: 0.7932373541070298, [(1, 129), (2, 182), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [114, 58, 0]]
** centroid: 2, normalized-entropy: 0.9221231306777973, [(1, 114), (2, 58)]
*** center 3: selecting labels [1] (freq >= 1) [from [163, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3034744693749658] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3034744693749658, 0.25610121436461786] ***
*** finished computation of 3 references, err: [Inf, 0.3034744693749658, 0.25610121436461786] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [11, 140, 29]]
** centroid: 1, normalized-entropy: 0.6011314260863324, [(1, 11), (2, 140), (3, 29)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [106, 109, 0]]
** centroid: 2, normalized-entropy: 0.9998595491969763, [(1, 106), (2, 109)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [271, 1, 0]]
** centroid: 3, normalized-entropy: 0.035027583136739364, [(1, 271), (2, 1)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.391279483935586] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.391279483935586, 0.3212438754376595] ***
*** starting iteration: 2; err: [Inf, 0.391279483935586, 0.3212438754376595] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.391279483935586, 0.3212438754376595, 0.3015144771795619] ***
*** starting iteration: 3; err: [Inf, 0.391279483935586, 0.3212438754376595, 0.3015144771795619] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.391279483935586, 0.3212438754376595, 0.3015144771795619, 0.2963248949145546] ***
*** starting iteration: 4; err: [Inf, 0.391279483935586, 0.3212438754376595, 0.3015144771795619, 0.2963248949145546] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.391279483935586, 0.3212438754376595, 0.3015144771795619, 0.2963248949145546, 0.29481197554511845] ***
*** starting iteration: 5; err: [Inf, 0.391279483935586, 0.3212438754376595, 0.3015144771795619, 0.2963248949145546, 0.29481197554511845] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.391279483935586, 0.3212438754376595, 0.3015144771795619, 0.2963248949145546, 0.29481197554511845, 0.293984080724944] ***
*** finished computation of 3 references, err: [Inf, 0.391279483935586, 0.3212438754376595, 0.3015144771795619, 0.2963248949145546, 0.29481197554511845, 0.293984080724944] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [219, 17, 0]]
** centroid: 1, normalized-entropy: 0.3734683275232279, [(1, 219), (2, 17)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 172, 24]]
** centroid: 2, normalized-entropy: 0.5363596511250623, [(2, 172), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [179, 55, 0]]
** centroid: 3, normalized-entropy: 0.7866988718305918, [(1, 179), (2, 55)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 11)
[0.9570079061097024, 0.9340028651405897, 0.9310118501735268, 0.9299778820736905, 0.9119928311545079, 0.8930277582972194, 0.8900487313660966, 0.8860057662452873, 0.8490316663969358, 0.8470716225207243, 0.7960175744606882]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9570079061097024
finished with 12
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.4278771753801309] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4278771753801309, 0.29906981447893105] ***
*** starting iteration: 2; err: [Inf, 0.4278771753801309, 0.29906981447893105] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4278771753801309, 0.29906981447893105, 0.29747752819456036] ***
*** starting iteration: 3; err: [Inf, 0.4278771753801309, 0.29906981447893105, 0.29747752819456036] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4278771753801309, 0.29906981447893105, 0.29747752819456036, 0.2973174207984865] ***
*** finished computation of 3 references, err: [Inf, 0.4278771753801309, 0.29906981447893105, 0.29747752819456036, 0.2973174207984865] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [80, 157, 21]]
** centroid: 1, normalized-entropy: 0.7914702227300918, [(1, 80), (2, 157), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [211, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [115, 83, 0]]
** centroid: 3, normalized-entropy: 0.9810756672493173, [(1, 115), (2, 83)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4181153448829959] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4181153448829959, 0.3018720152776677] ***
*** starting iteration: 2; err: [Inf, 0.4181153448829959, 0.3018720152776677] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4181153448829959, 0.3018720152776677, 0.2967050654111659] ***
*** starting iteration: 3; err: [Inf, 0.4181153448829959, 0.3018720152776677, 0.2967050654111659] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4181153448829959, 0.3018720152776677, 0.2967050654111659, 0.29497181716467347] ***
*** starting iteration: 4; err: [Inf, 0.4181153448829959, 0.3018720152776677, 0.2967050654111659, 0.29497181716467347] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4181153448829959, 0.3018720152776677, 0.2967050654111659, 0.29497181716467347, 0.29458740107469017] ***
*** finished computation of 3 references, err: [Inf, 0.4181153448829959, 0.3018720152776677, 0.2967050654111659, 0.29497181716467347, 0.29458740107469017] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [67, 149, 24]]
** centroid: 1, normalized-entropy: 0.8032013309468095, [(1, 67), (2, 149), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [206, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [125, 95, 0]]
** centroid: 3, normalized-entropy: 0.9865446300055647, [(1, 125), (2, 95)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3936335639958305] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3936335639958305, 0.3025071794387774] ***
*** starting iteration: 2; err: [Inf, 0.3936335639958305, 0.3025071794387774] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3936335639958305, 0.3025071794387774, 0.29524177544355124] ***
*** starting iteration: 3; err: [Inf, 0.3936335639958305, 0.3025071794387774, 0.29524177544355124] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3936335639958305, 0.3025071794387774, 0.29524177544355124, 0.2937708263804876] ***
*** starting iteration: 4; err: [Inf, 0.3936335639958305, 0.3025071794387774, 0.29524177544355124, 0.2937708263804876] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3936335639958305, 0.3025071794387774, 0.29524177544355124, 0.2937708263804876, 0.2934748525249547] ***
*** finished computation of 3 references, err: [Inf, 0.3936335639958305, 0.3025071794387774, 0.29524177544355124, 0.2937708263804876, 0.2934748525249547] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [232, 19, 0]]
** centroid: 1, normalized-entropy: 0.38683353950844185, [(1, 232), (2, 19)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 172, 29]]
** centroid: 2, normalized-entropy: 0.5953353395995236, [(2, 172), (3, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [156, 59, 0]]
** centroid: 3, normalized-entropy: 0.8477338446831376, [(1, 156), (2, 59)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 12)
[0.9570079061097024, 0.9340028651405897, 0.9310118501735268, 0.9299778820736905, 0.9119928311545079, 0.8930277582972194, 0.8900487313660966, 0.8860057662452873, 0.8530326733919549, 0.8490316663969358, 0.8470716225207243, 0.7960175744606882]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9570079061097024
finished with 13
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.5591414834095819] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5591414834095819, 0.3658379938742901] ***
*** starting iteration: 2; err: [Inf, 0.5591414834095819, 0.3658379938742901] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5591414834095819, 0.3658379938742901, 0.3455846873496578] ***
*** starting iteration: 3; err: [Inf, 0.5591414834095819, 0.3658379938742901, 0.3455846873496578] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5591414834095819, 0.3658379938742901, 0.3455846873496578, 0.3373240421067465] ***
*** finished computation of 3 references, err: [Inf, 0.5591414834095819, 0.3658379938742901, 0.3455846873496578, 0.3373240421067465] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [271, 43, 0]]
** centroid: 1, normalized-entropy: 0.5761756066652277, [(1, 271), (2, 43)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [78, 131, 5]]
** centroid: 2, normalized-entropy: 0.6881984463842437, [(1, 78), (2, 131), (3, 5)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [49, 70, 19]]
** centroid: 3, normalized-entropy: 0.8965381896771126, [(1, 49), (2, 70), (3, 19)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3319560030721005] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3319560030721005, 0.3069054176318815] ***
*** starting iteration: 2; err: [Inf, 0.3319560030721005, 0.3069054176318815] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3319560030721005, 0.3069054176318815, 0.3028572300362444] ***
*** starting iteration: 3; err: [Inf, 0.3319560030721005, 0.3069054176318815, 0.3028572300362444] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3319560030721005, 0.3069054176318815, 0.3028572300362444, 0.3017898224604161] ***
*** finished computation of 3 references, err: [Inf, 0.3319560030721005, 0.3069054176318815, 0.3028572300362444, 0.3017898224604161] ***
*** center 1: selecting labels [1] (freq >= 2) [from [218, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [87, 95, 0]]
** centroid: 2, normalized-entropy: 0.9986058109114468, [(1, 87), (2, 95)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [101, 145, 21]]
** centroid: 3, normalized-entropy: 0.8185568490056943, [(1, 101), (2, 145), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.38063673360058214] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38063673360058214, 0.3169845602491862] ***
*** starting iteration: 2; err: [Inf, 0.38063673360058214, 0.3169845602491862] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38063673360058214, 0.3169845602491862, 0.30064802989922185] ***
*** starting iteration: 3; err: [Inf, 0.38063673360058214, 0.3169845602491862, 0.30064802989922185] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38063673360058214, 0.3169845602491862, 0.30064802989922185, 0.2964293971920255] ***
*** finished computation of 3 references, err: [Inf, 0.38063673360058214, 0.3169845602491862, 0.30064802989922185, 0.2964293971920255] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [108, 102, 0]]
** centroid: 1, normalized-entropy: 0.9994110647387552, [(1, 108), (2, 102)]
*** center 2: selecting labels [1] (freq >= 2) [from [211, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [69, 148, 29]]
** centroid: 3, normalized-entropy: 0.832236954841479, [(1, 69), (2, 148), (3, 29)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.9570079061097024, 0.9340028651405897, 0.9310118501735268, 0.9299778820736905, 0.9119928311545079, 0.8930277582972194, 0.8900487313660966, 0.8860057662452873, 0.8530326733919549, 0.8490316663969358, 0.8470716225207243, 0.7960175744606882, 0.7920914926902952]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9570079061097024
finished with 14
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.41936656541691664] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41936656541691664, 0.3091709015488222] ***
*** starting iteration: 2; err: [Inf, 0.41936656541691664, 0.3091709015488222] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41936656541691664, 0.3091709015488222, 0.29616363783291466] ***
*** starting iteration: 3; err: [Inf, 0.41936656541691664, 0.3091709015488222, 0.29616363783291466] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41936656541691664, 0.3091709015488222, 0.29616363783291466, 0.2943373062947133] ***
*** finished computation of 3 references, err: [Inf, 0.41936656541691664, 0.3091709015488222, 0.29616363783291466, 0.2943373062947133] ***
*** center 1: selecting labels [1] (freq >= 1) [from [212, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [138, 97, 0]]
** centroid: 2, normalized-entropy: 0.977930049852069, [(1, 138), (2, 97)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [48, 147, 24]]
** centroid: 3, normalized-entropy: 0.7669375557476334, [(1, 48), (2, 147), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.398373294954022] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.398373294954022, 0.3444339266798083] ***
*** starting iteration: 2; err: [Inf, 0.398373294954022, 0.3444339266798083] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.398373294954022, 0.3444339266798083, 0.33889524486736916] ***
*** starting iteration: 3; err: [Inf, 0.398373294954022, 0.3444339266798083, 0.33889524486736916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.398373294954022, 0.3444339266798083, 0.33889524486736916, 0.33653907178352394] ***
*** finished computation of 3 references, err: [Inf, 0.398373294954022, 0.3444339266798083, 0.33889524486736916, 0.33653907178352394] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [123, 100, 0]]
** centroid: 1, normalized-entropy: 0.9923128903499058, [(1, 123), (2, 100)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [116, 140, 21]]
** centroid: 2, normalized-entropy: 0.8237220616532381, [(1, 116), (2, 140), (3, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [167, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3598013497118292] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3598013497118292, 0.30708806622198137] ***
*** starting iteration: 2; err: [Inf, 0.3598013497118292, 0.30708806622198137] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3598013497118292, 0.30708806622198137, 0.2993998951313534] ***
*** starting iteration: 3; err: [Inf, 0.3598013497118292, 0.30708806622198137, 0.2993998951313534] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3598013497118292, 0.30708806622198137, 0.2993998951313534, 0.29665422514695367] ***
*** finished computation of 3 references, err: [Inf, 0.3598013497118292, 0.30708806622198137, 0.2993998951313534, 0.29665422514695367] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [83, 152, 29]]
** centroid: 1, normalized-entropy: 0.8413002402230174, [(1, 83), (2, 152), (3, 29)]
*** center 2: selecting labels [1] (freq >= 1) [from [195, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [110, 98, 0]]
** centroid: 3, normalized-entropy: 0.9975977315497319, [(1, 110), (2, 98)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 14)
[0.9570079061097024, 0.9340028651405897, 0.9310118501735268, 0.9299778820736905, 0.9129908351465237, 0.9119928311545079, 0.8930277582972194, 0.8900487313660966, 0.8860057662452873, 0.8530326733919549, 0.8490316663969358, 0.8470716225207243, 0.7960175744606882, 0.7920914926902952]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9570079061097024
finished with 15
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.3351996867517541] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3351996867517541, 0.29819086377226467] ***
*** finished computation of 3 references, err: [Inf, 0.3351996867517541, 0.29819086377226467] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [103, 106, 0]]
** centroid: 1, normalized-entropy: 0.9998513690015975, [(1, 103), (2, 106)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [107, 138, 24]]
** centroid: 2, normalized-entropy: 0.8417187705485348, [(1, 107), (2, 138), (3, 24)]
*** center 3: selecting labels [1] (freq >= 1) [from [188, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.40027131310299685] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40027131310299685, 0.3137761190620208] ***
*** finished computation of 3 references, err: [Inf, 0.40027131310299685, 0.3137761190620208] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [94, 141, 21]]
** centroid: 1, normalized-entropy: 0.8205863536406245, [(1, 94), (2, 141), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [150, 99, 0]]
** centroid: 2, normalized-entropy: 0.9695235828220429, [(1, 150), (2, 99)]
*** center 3: selecting labels [1] (freq >= 1) [from [162, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4471714998605191] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4471714998605191, 0.3338311196114963] ***
*** finished computation of 3 references, err: [Inf, 0.4471714998605191, 0.3338311196114963] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [220, 17, 0]]
** centroid: 1, normalized-entropy: 0.37234660216120913, [(1, 220), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [116, 125, 0]]
** centroid: 2, normalized-entropy: 0.9989937718417491, [(1, 116), (2, 125)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [52, 108, 29]]
** centroid: 3, normalized-entropy: 0.876063167327238, [(1, 52), (2, 108), (3, 29)]
finished with 7 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 15)
[0.9570079061097024, 0.9340028651405897, 0.9310118501735268, 0.9299778820736905, 0.9129908351465237, 0.9119928311545079, 0.8959708211205218, 0.8930277582972194, 0.8900487313660966, 0.8860057662452873, 0.8530326733919549, 0.8490316663969358, 0.8470716225207243, 0.7960175744606882, 0.7920914926902952]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9570079061097024
finished with 15
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9570079061097024, 0.9340028651405897, 0.9310118501735268, 0.9299778820736905, 0.9129908351465237, 0.9119928311545079, 0.8959708211205218, 0.8930277582972194, 0.8900487313660966, 0.8860057662452873, 0.8530326733919549, 0.8490316663969358, 0.8470716225207243, 0.7960175744606882, 0.7920914926902952]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9570079061097024
finished with 17
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.1769766288672437] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1769766288672437, 0.15745533464893183] ***
*** starting iteration: 2; err: [Inf, 0.1769766288672437, 0.15745533464893183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1769766288672437, 0.15745533464893183, 0.15192856501358598] ***
*** starting iteration: 3; err: [Inf, 0.1769766288672437, 0.15745533464893183, 0.15192856501358598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1769766288672437, 0.15745533464893183, 0.15192856501358598, 0.1489477867768188] ***
*** starting iteration: 4; err: [Inf, 0.1769766288672437, 0.15745533464893183, 0.15192856501358598, 0.1489477867768188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1769766288672437, 0.15745533464893183, 0.15192856501358598, 0.1489477867768188, 0.14824443324483014] ***
*** finished computation of 7 references, err: [Inf, 0.1769766288672437, 0.15745533464893183, 0.15192856501358598, 0.1489477867768188, 0.14824443324483014] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [43, 22, 0]]
** centroid: 1, normalized-entropy: 0.9233388889944429, [(1, 43), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [19, 83, 0]]
** centroid: 2, normalized-entropy: 0.6936126404300949, [(1, 19), (2, 83)]
*** center 3: selecting labels [1] (freq >= 2) [from [127, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [118, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 55, 24]]
** centroid: 5, normalized-entropy: 0.8858834790484443, [(2, 55), (3, 24)]
*** center 6: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [15, 84, 0]]
** centroid: 7, normalized-entropy: 0.6136190195993708, [(1, 15), (2, 84)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19842095143193828] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19842095143193828, 0.15776898494029398] ***
*** starting iteration: 2; err: [Inf, 0.19842095143193828, 0.15776898494029398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19842095143193828, 0.15776898494029398, 0.15309503348614054] ***
*** starting iteration: 3; err: [Inf, 0.19842095143193828, 0.15776898494029398, 0.15309503348614054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19842095143193828, 0.15776898494029398, 0.15309503348614054, 0.15068852498281238] ***
*** starting iteration: 4; err: [Inf, 0.19842095143193828, 0.15776898494029398, 0.15309503348614054, 0.15068852498281238] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19842095143193828, 0.15776898494029398, 0.15309503348614054, 0.15068852498281238, 0.14956491524311735] ***
*** starting iteration: 5; err: [Inf, 0.19842095143193828, 0.15776898494029398, 0.15309503348614054, 0.15068852498281238, 0.14956491524311735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19842095143193828, 0.15776898494029398, 0.15309503348614054, 0.15068852498281238, 0.14956491524311735, 0.149271371865134] ***
*** finished computation of 7 references, err: [Inf, 0.19842095143193828, 0.15776898494029398, 0.15309503348614054, 0.15068852498281238, 0.14956491524311735, 0.149271371865134] ***
*** center 1: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 83, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [99, 3, 0]]
** centroid: 3, normalized-entropy: 0.1914332548141934, [(1, 99), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [94, 5, 0]]
** centroid: 4, normalized-entropy: 0.2885385136944103, [(1, 94), (2, 5)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 130, 21]]
** centroid: 5, normalized-entropy: 0.5818055236161183, [(2, 130), (3, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [52, 19, 0]]
** centroid: 7, normalized-entropy: 0.8380078505079931, [(1, 52), (2, 19)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.26034031534233065] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26034031534233065, 0.19576457315131554] ***
*** starting iteration: 2; err: [Inf, 0.26034031534233065, 0.19576457315131554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26034031534233065, 0.19576457315131554, 0.17420693266106355] ***
*** starting iteration: 3; err: [Inf, 0.26034031534233065, 0.19576457315131554, 0.17420693266106355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26034031534233065, 0.19576457315131554, 0.17420693266106355, 0.1606070930038745] ***
*** starting iteration: 4; err: [Inf, 0.26034031534233065, 0.19576457315131554, 0.17420693266106355, 0.1606070930038745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26034031534233065, 0.19576457315131554, 0.17420693266106355, 0.1606070930038745, 0.1523814391082284] ***
*** starting iteration: 5; err: [Inf, 0.26034031534233065, 0.19576457315131554, 0.17420693266106355, 0.1606070930038745, 0.1523814391082284] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26034031534233065, 0.19576457315131554, 0.17420693266106355, 0.1606070930038745, 0.1523814391082284, 0.14864835828805212] ***
*** starting iteration: 6; err: [Inf, 0.26034031534233065, 0.19576457315131554, 0.17420693266106355, 0.1606070930038745, 0.1523814391082284, 0.14864835828805212] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26034031534233065, 0.19576457315131554, 0.17420693266106355, 0.1606070930038745, 0.1523814391082284, 0.14864835828805212, 0.14717043873559366] ***
*** starting iteration: 7; err: [Inf, 0.26034031534233065, 0.19576457315131554, 0.17420693266106355, 0.1606070930038745, 0.1523814391082284, 0.14864835828805212, 0.14717043873559366] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26034031534233065, 0.19576457315131554, 0.17420693266106355, 0.1606070930038745, 0.1523814391082284, 0.14864835828805212, 0.14717043873559366, 0.14653927446245266] ***
*** finished computation of 7 references, err: [Inf, 0.26034031534233065, 0.19576457315131554, 0.17420693266106355, 0.1606070930038745, 0.1523814391082284, 0.14864835828805212, 0.14717043873559366, 0.14653927446245266] ***
*** center 1: selecting labels [1] (freq >= 2) [from [131, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [2, 97, 0]]
** centroid: 2, normalized-entropy: 0.14257333025989857, [(1, 2), (2, 97)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 63, 29]]
** centroid: 3, normalized-entropy: 0.8991045208483789, [(2, 63), (3, 29)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [25, 40, 0]]
** centroid: 4, normalized-entropy: 0.961236604722876, [(1, 25), (2, 40)]
*** center 5: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [47, 50, 0]]
** centroid: 6, normalized-entropy: 0.999309898706868, [(1, 47), (2, 50)]
*** center 7: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2972141475837633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2972141475837633, 0.23465300147637008] ***
*** starting iteration: 2; err: [Inf, 0.2972141475837633, 0.23465300147637008] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2972141475837633, 0.23465300147637008, 0.2228992030125212] ***
*** starting iteration: 3; err: [Inf, 0.2972141475837633, 0.23465300147637008, 0.2228992030125212] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2972141475837633, 0.23465300147637008, 0.2228992030125212, 0.2128817545076659] ***
*** starting iteration: 4; err: [Inf, 0.2972141475837633, 0.23465300147637008, 0.2228992030125212, 0.2128817545076659] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2972141475837633, 0.23465300147637008, 0.2228992030125212, 0.2128817545076659, 0.20756542344938392] ***
*** starting iteration: 5; err: [Inf, 0.2972141475837633, 0.23465300147637008, 0.2228992030125212, 0.2128817545076659, 0.20756542344938392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2972141475837633, 0.23465300147637008, 0.2228992030125212, 0.2128817545076659, 0.20756542344938392, 0.20557335188036208] ***
*** starting iteration: 6; err: [Inf, 0.2972141475837633, 0.23465300147637008, 0.2228992030125212, 0.2128817545076659, 0.20756542344938392, 0.20557335188036208] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2972141475837633, 0.23465300147637008, 0.2228992030125212, 0.2128817545076659, 0.20756542344938392, 0.20557335188036208, 0.2035828760262948] ***
*** starting iteration: 7; err: [Inf, 0.2972141475837633, 0.23465300147637008, 0.2228992030125212, 0.2128817545076659, 0.20756542344938392, 0.20557335188036208, 0.2035828760262948] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2972141475837633, 0.23465300147637008, 0.2228992030125212, 0.2128817545076659, 0.20756542344938392, 0.20557335188036208, 0.2035828760262948, 0.19951970415475132] ***
*** starting iteration: 8; err: [Inf, 0.2972141475837633, 0.23465300147637008, 0.2228992030125212, 0.2128817545076659, 0.20756542344938392, 0.20557335188036208, 0.2035828760262948, 0.19951970415475132] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2972141475837633, 0.23465300147637008, 0.2228992030125212, 0.2128817545076659, 0.20756542344938392, 0.20557335188036208, 0.2035828760262948, 0.19951970415475132, 0.19364867677461836] ***
*** starting iteration: 9; err: [Inf, 0.2972141475837633, 0.23465300147637008, 0.2228992030125212, 0.2128817545076659, 0.20756542344938392, 0.20557335188036208, 0.2035828760262948, 0.19951970415475132, 0.19364867677461836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2972141475837633, 0.23465300147637008, 0.2228992030125212, 0.2128817545076659, 0.20756542344938392, 0.20557335188036208, 0.2035828760262948, 0.19951970415475132, 0.19364867677461836, 0.1912467398627608] ***
*** starting iteration: 10; err: [Inf, 0.2972141475837633, 0.23465300147637008, 0.2228992030125212, 0.2128817545076659, 0.20756542344938392, 0.20557335188036208, 0.2035828760262948, 0.19951970415475132, 0.19364867677461836, 0.1912467398627608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2972141475837633, 0.23465300147637008, 0.2228992030125212, 0.2128817545076659, 0.20756542344938392, 0.20557335188036208, 0.2035828760262948, 0.19951970415475132, 0.19364867677461836, 0.1912467398627608, 0.19000944923106078] ***
*** finished computation of 7 references, err: [Inf, 0.2972141475837633, 0.23465300147637008, 0.2228992030125212, 0.2128817545076659, 0.20756542344938392, 0.20557335188036208, 0.2035828760262948, 0.19951970415475132, 0.19364867677461836, 0.1912467398627608, 0.19000944923106078] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [53, 29, 0]]
** centroid: 1, normalized-entropy: 0.9372930661967526, [(1, 53), (2, 29)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [25, 56, 0]]
** centroid: 2, normalized-entropy: 0.8915996278279094, [(1, 25), (2, 56)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 62, 16]]
** centroid: 3, normalized-entropy: 0.7320666900931937, [(2, 62), (3, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [97, 37, 0]]
** centroid: 4, normalized-entropy: 0.8501091888128283, [(1, 97), (2, 37)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 60, 8]]
** centroid: 5, normalized-entropy: 0.5225593745369407, [(2, 60), (3, 8)]
*** center 6: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33264064672211047] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33264064672211047, 0.22483596648613194] ***
*** starting iteration: 2; err: [Inf, 0.33264064672211047, 0.22483596648613194] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33264064672211047, 0.22483596648613194, 0.1982207393687012] ***
*** starting iteration: 3; err: [Inf, 0.33264064672211047, 0.22483596648613194, 0.1982207393687012] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33264064672211047, 0.22483596648613194, 0.1982207393687012, 0.19314067005535876] ***
*** starting iteration: 4; err: [Inf, 0.33264064672211047, 0.22483596648613194, 0.1982207393687012, 0.19314067005535876] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33264064672211047, 0.22483596648613194, 0.1982207393687012, 0.19314067005535876, 0.19210295253915005] ***
*** starting iteration: 5; err: [Inf, 0.33264064672211047, 0.22483596648613194, 0.1982207393687012, 0.19314067005535876, 0.19210295253915005] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33264064672211047, 0.22483596648613194, 0.1982207393687012, 0.19314067005535876, 0.19210295253915005, 0.19128757623419435] ***
*** finished computation of 7 references, err: [Inf, 0.33264064672211047, 0.22483596648613194, 0.1982207393687012, 0.19314067005535876, 0.19210295253915005, 0.19128757623419435] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 61, 21]]
** centroid: 1, normalized-entropy: 0.8208002549877175, [(2, 61), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 118, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [76, 44, 0]]
** centroid: 5, normalized-entropy: 0.9480782435939054, [(1, 76), (2, 44)]
*** center 6: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [55, 17, 0]]
** centroid: 7, normalized-entropy: 0.7885131605379784, [(1, 55), (2, 17)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2532313761733838] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2532313761733838, 0.20553977528274214] ***
*** starting iteration: 2; err: [Inf, 0.2532313761733838, 0.20553977528274214] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2532313761733838, 0.20553977528274214, 0.19930338365691846] ***
*** starting iteration: 3; err: [Inf, 0.2532313761733838, 0.20553977528274214, 0.19930338365691846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2532313761733838, 0.20553977528274214, 0.19930338365691846, 0.197448851102251] ***
*** starting iteration: 4; err: [Inf, 0.2532313761733838, 0.20553977528274214, 0.19930338365691846, 0.197448851102251] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2532313761733838, 0.20553977528274214, 0.19930338365691846, 0.197448851102251, 0.19616784105870477] ***
*** starting iteration: 5; err: [Inf, 0.2532313761733838, 0.20553977528274214, 0.19930338365691846, 0.197448851102251, 0.19616784105870477] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2532313761733838, 0.20553977528274214, 0.19930338365691846, 0.197448851102251, 0.19616784105870477, 0.19572196323785868] ***
*** finished computation of 7 references, err: [Inf, 0.2532313761733838, 0.20553977528274214, 0.19930338365691846, 0.197448851102251, 0.19616784105870477, 0.19572196323785868] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [122, 29, 0]]
** centroid: 1, normalized-entropy: 0.7057464344153325, [(1, 122), (2, 29)]
*** center 2: selecting labels [2] (freq >= 2) [from [1, 98, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [25, 49, 0]]
** centroid: 3, normalized-entropy: 0.9227346209530939, [(1, 25), (2, 49)]
*** center 4: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 74, 29]]
** centroid: 5, normalized-entropy: 0.857558799850773, [(2, 74), (3, 29)]
*** center 6: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 17)
[0.9570079061097024, 0.9340028651405897, 0.9310118501735268, 0.9299778820736905, 0.91902081722441, 0.9129908351465237, 0.9119928311545079, 0.8959708211205218, 0.8950207692722664, 0.8930277582972194, 0.8900487313660966, 0.8860057662452873, 0.8530326733919549, 0.8490316663969358, 0.8470716225207243, 0.7960175744606882, 0.7920914926902952]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9570079061097024
finished with 17
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9570079061097024, 0.9340028651405897, 0.9310118501735268, 0.9299778820736905, 0.91902081722441, 0.9129908351465237, 0.9119928311545079, 0.8959708211205218, 0.8950207692722664, 0.8930277582972194, 0.8900487313660966, 0.8860057662452873, 0.8530326733919549, 0.8490316663969358, 0.8470716225207243, 0.7960175744606882, 0.7920914926902952]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9570079061097024
finished with 18
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.3446452659254578] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3446452659254578, 0.2410861995096306] ***
*** starting iteration: 2; err: [Inf, 0.3446452659254578, 0.2410861995096306] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3446452659254578, 0.2410861995096306, 0.23816897206125723] ***
*** starting iteration: 3; err: [Inf, 0.3446452659254578, 0.2410861995096306, 0.23816897206125723] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3446452659254578, 0.2410861995096306, 0.23816897206125723, 0.23711770764975132] ***
*** starting iteration: 4; err: [Inf, 0.3446452659254578, 0.2410861995096306, 0.23816897206125723, 0.23711770764975132] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3446452659254578, 0.2410861995096306, 0.23816897206125723, 0.23711770764975132, 0.23693177341783736] ***
*** finished computation of 3 references, err: [Inf, 0.3446452659254578, 0.2410861995096306, 0.23816897206125723, 0.23711770764975132, 0.23693177341783736] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [57, 159, 21]]
** centroid: 1, normalized-entropy: 0.7511800753303329, [(1, 57), (2, 159), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [138, 81, 0]]
** centroid: 2, normalized-entropy: 0.9505668528932193, [(1, 138), (2, 81)]
*** center 3: selecting labels [1] (freq >= 1) [from [211, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3128146089210704] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3128146089210704, 0.24394493996705469] ***
*** starting iteration: 2; err: [Inf, 0.3128146089210704, 0.24394493996705469] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3128146089210704, 0.24394493996705469, 0.2349183456608662] ***
*** starting iteration: 3; err: [Inf, 0.3128146089210704, 0.24394493996705469, 0.2349183456608662] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3128146089210704, 0.24394493996705469, 0.2349183456608662, 0.23260294875988663] ***
*** starting iteration: 4; err: [Inf, 0.3128146089210704, 0.24394493996705469, 0.2349183456608662, 0.23260294875988663] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3128146089210704, 0.24394493996705469, 0.2349183456608662, 0.23260294875988663, 0.23223966173827648] ***
*** finished computation of 3 references, err: [Inf, 0.3128146089210704, 0.24394493996705469, 0.2349183456608662, 0.23260294875988663, 0.23223966173827648] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [70, 140, 23]]
** centroid: 1, normalized-entropy: 0.8155078824272254, [(1, 70), (2, 140), (3, 23)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [122, 104, 1]]
** centroid: 2, normalized-entropy: 0.6510272863961217, [(1, 122), (2, 104), (3, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [206, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3485159550540741] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3485159550540741, 0.23639600170005498] ***
*** starting iteration: 2; err: [Inf, 0.3485159550540741, 0.23639600170005498] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3485159550540741, 0.23639600170005498, 0.23270815698153477] ***
*** starting iteration: 3; err: [Inf, 0.3485159550540741, 0.23639600170005498, 0.23270815698153477] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3485159550540741, 0.23639600170005498, 0.23270815698153477, 0.2318295640661486] ***
*** finished computation of 3 references, err: [Inf, 0.3485159550540741, 0.23639600170005498, 0.23270815698153477, 0.2318295640661486] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [17, 182, 29]]
** centroid: 1, normalized-entropy: 0.5786621534664603, [(1, 17), (2, 182), (3, 29)]
*** center 2: selecting labels [1] (freq >= 1) [from [228, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [143, 68, 0]]
** centroid: 3, normalized-entropy: 0.9068381727624802, [(1, 143), (2, 68)]
finished with 6 centroids; started with 3
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.22307961009815336] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22307961009815336, 0.19248162251897155] ***
*** starting iteration: 2; err: [Inf, 0.22307961009815336, 0.19248162251897155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22307961009815336, 0.19248162251897155, 0.18969133409112693] ***
*** starting iteration: 3; err: [Inf, 0.22307961009815336, 0.19248162251897155, 0.18969133409112693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22307961009815336, 0.19248162251897155, 0.18969133409112693, 0.18872366910707206] ***
*** finished computation of 7 references, err: [Inf, 0.22307961009815336, 0.19248162251897155, 0.18969133409112693, 0.18872366910707206] ***
*** center 1: selecting labels [1] (freq >= 2) [from [192, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [133, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 80, 37]]
** centroid: 3, normalized-entropy: 0.9002448724102409, [(2, 80), (3, 37)]
*** center 4: selecting labels [1] (freq >= 2) [from [166, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [75, 42, 0]]
** centroid: 5, normalized-entropy: 0.9418285354475157, [(1, 75), (2, 42)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [28, 117, 0]]
** centroid: 6, normalized-entropy: 0.7079186761606501, [(1, 28), (2, 117)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 127, 0]]
** centroid: 7, normalized-entropy: 0.11539039325220708, [(1, 2), (2, 127)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2445895590633154] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2445895590633154, 0.1987038534730673] ***
*** starting iteration: 2; err: [Inf, 0.2445895590633154, 0.1987038534730673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2445895590633154, 0.1987038534730673, 0.19453456578217446] ***
*** starting iteration: 3; err: [Inf, 0.2445895590633154, 0.1987038534730673, 0.19453456578217446] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2445895590633154, 0.1987038534730673, 0.19453456578217446, 0.1933882925659418] ***
*** finished computation of 7 references, err: [Inf, 0.2445895590633154, 0.1987038534730673, 0.19453456578217446, 0.1933882925659418] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [72, 18, 0]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(1, 72), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 6, 0]]
** centroid: 2, normalized-entropy: 0.46899559358928133, [(1, 54), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 59, 21]]
** centroid: 3, normalized-entropy: 0.8304955225035798, [(2, 59), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [33, 39, 0]]
** centroid: 5, normalized-entropy: 0.9949848281859699, [(1, 33), (2, 39)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 71, 0]]
** centroid: 6, normalized-entropy: 0.2447650820208971, [(1, 3), (2, 71)]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22071546000242234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22071546000242234, 0.18760850256308914] ***
*** starting iteration: 2; err: [Inf, 0.22071546000242234, 0.18760850256308914] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22071546000242234, 0.18760850256308914, 0.1840670113535598] ***
*** starting iteration: 3; err: [Inf, 0.22071546000242234, 0.18760850256308914, 0.1840670113535598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22071546000242234, 0.18760850256308914, 0.1840670113535598, 0.18307850716635585] ***
*** finished computation of 7 references, err: [Inf, 0.22071546000242234, 0.18760850256308914, 0.1840670113535598, 0.18307850716635585] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [14, 63, 0]]
** centroid: 1, normalized-entropy: 0.6840384356390419, [(1, 14), (2, 63)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 15, 0]]
** centroid: 2, normalized-entropy: 0.7793498372920851, [(1, 50), (2, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 55, 19]]
** centroid: 4, normalized-entropy: 0.8218127305034848, [(2, 55), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [17, 49, 0]]
** centroid: 5, normalized-entropy: 0.8230660790114689, [(1, 17), (2, 49)]
*** center 6: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21675194805953651] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21675194805953651, 0.18932018805667758] ***
*** starting iteration: 2; err: [Inf, 0.21675194805953651, 0.18932018805667758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21675194805953651, 0.18932018805667758, 0.18566774115525186] ***
*** starting iteration: 3; err: [Inf, 0.21675194805953651, 0.18932018805667758, 0.18566774115525186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21675194805953651, 0.18932018805667758, 0.18566774115525186, 0.18397093919292093] ***
*** finished computation of 7 references, err: [Inf, 0.21675194805953651, 0.18932018805667758, 0.18566774115525186, 0.18397093919292093] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [2, 73, 0]]
** centroid: 1, normalized-entropy: 0.1773894531859976, [(1, 2), (2, 73)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 15, 0]]
** centroid: 2, normalized-entropy: 0.7273006785144036, [(1, 59), (2, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 62, 16]]
** centroid: 4, normalized-entropy: 0.7320666900931937, [(2, 62), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [33, 29, 0]]
** centroid: 5, normalized-entropy: 0.9969954265557693, [(1, 33), (2, 29)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [77, 3, 0]]
** centroid: 6, normalized-entropy: 0.2307099556914763, [(1, 77), (2, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.231258885813877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.231258885813877, 0.19946159972250463] ***
*** starting iteration: 2; err: [Inf, 0.231258885813877, 0.19946159972250463] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.231258885813877, 0.19946159972250463, 0.1959891277421266] ***
*** starting iteration: 3; err: [Inf, 0.231258885813877, 0.19946159972250463, 0.1959891277421266] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.231258885813877, 0.19946159972250463, 0.1959891277421266, 0.19531507186591626] ***
*** finished computation of 7 references, err: [Inf, 0.231258885813877, 0.19946159972250463, 0.1959891277421266, 0.19531507186591626] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [67, 33, 0]]
** centroid: 1, normalized-entropy: 0.9149263727797277, [(1, 67), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [37, 27, 0]]
** centroid: 2, normalized-entropy: 0.9823166080205502, [(1, 37), (2, 27)]
*** center 3: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [1, 77, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 47, 22]]
** centroid: 5, normalized-entropy: 0.903116172156872, [(2, 47), (3, 22)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21563652590848506] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21563652590848506, 0.19291720602661372] ***
*** starting iteration: 2; err: [Inf, 0.21563652590848506, 0.19291720602661372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21563652590848506, 0.19291720602661372, 0.1913805972179398] ***
*** starting iteration: 3; err: [Inf, 0.21563652590848506, 0.19291720602661372, 0.1913805972179398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21563652590848506, 0.19291720602661372, 0.1913805972179398, 0.19086864052712918] ***
*** finished computation of 7 references, err: [Inf, 0.21563652590848506, 0.19291720602661372, 0.1913805972179398, 0.19086864052712918] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [2, 64, 0]]
** centroid: 1, normalized-entropy: 0.19590927087360496, [(1, 2), (2, 64)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 14, 0]]
** centroid: 2, normalized-entropy: 0.6892019851173655, [(1, 62), (2, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 72, 14]]
** centroid: 4, normalized-entropy: 0.6409441847875289, [(2, 72), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 27, 0]]
** centroid: 5, normalized-entropy: 0.9505668528932193, [(1, 46), (2, 27)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [76, 2, 0]]
** centroid: 6, normalized-entropy: 0.17203694935311387, [(1, 76), (2, 2)]
*** center 7: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22886897058039904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22886897058039904, 0.19317552786506711] ***
*** starting iteration: 2; err: [Inf, 0.22886897058039904, 0.19317552786506711] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22886897058039904, 0.19317552786506711, 0.19218000126630067] ***
*** finished computation of 7 references, err: [Inf, 0.22886897058039904, 0.19317552786506711, 0.19218000126630067] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [32, 57, 0]]
** centroid: 1, normalized-entropy: 0.9423094893103273, [(1, 32), (2, 57)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [35, 16, 0]]
** centroid: 2, normalized-entropy: 0.8974271930876951, [(1, 35), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 43, 22]]
** centroid: 4, normalized-entropy: 0.9233388889944429, [(2, 43), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [9, 75, 0]]
** centroid: 5, normalized-entropy: 0.4912373418243334, [(1, 9), (2, 75)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23159608856216074] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23159608856216074, 0.19907564524095506] ***
*** starting iteration: 2; err: [Inf, 0.23159608856216074, 0.19907564524095506] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23159608856216074, 0.19907564524095506, 0.19419663686957211] ***
*** starting iteration: 3; err: [Inf, 0.23159608856216074, 0.19907564524095506, 0.19419663686957211] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23159608856216074, 0.19907564524095506, 0.19419663686957211, 0.19263605611317325] ***
*** finished computation of 7 references, err: [Inf, 0.23159608856216074, 0.19907564524095506, 0.19419663686957211, 0.19263605611317325] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 71, 19]]
** centroid: 1, normalized-entropy: 0.7436012269934466, [(2, 71), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 4, 0]]
** centroid: 3, normalized-entropy: 0.4079059801389762, [(1, 45), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [43, 35, 0]]
** centroid: 4, normalized-entropy: 0.9923985003332222, [(1, 43), (2, 35)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [68, 20, 0]]
** centroid: 5, normalized-entropy: 0.7732266742876346, [(1, 68), (2, 20)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [14, 57, 0]]
** centroid: 6, normalized-entropy: 0.7162583911075451, [(1, 14), (2, 57)]
*** center 7: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2232489186488092] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2232489186488092, 0.19572688752785325] ***
*** starting iteration: 2; err: [Inf, 0.2232489186488092, 0.19572688752785325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2232489186488092, 0.19572688752785325, 0.19206632305122912] ***
*** starting iteration: 3; err: [Inf, 0.2232489186488092, 0.19572688752785325, 0.19206632305122912] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2232489186488092, 0.19572688752785325, 0.19206632305122912, 0.19070030837412924] ***
*** finished computation of 7 references, err: [Inf, 0.2232489186488092, 0.19572688752785325, 0.19206632305122912, 0.19070030837412924] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 67, 15]]
** centroid: 1, normalized-entropy: 0.6864381668766382, [(2, 67), (3, 15)]
*** center 2: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [30, 19, 0]]
** centroid: 3, normalized-entropy: 0.9633355456726842, [(1, 30), (2, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [92, 12, 0]]
** centroid: 4, normalized-entropy: 0.5159469300074472, [(1, 92), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 24, 0]]
** centroid: 5, normalized-entropy: 0.9366673818775627, [(1, 44), (2, 24)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 62, 3]]
** centroid: 6, normalized-entropy: 0.269828447703074, [(2, 62), (3, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23780285169184207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23780285169184207, 0.19691646802984178] ***
*** starting iteration: 2; err: [Inf, 0.23780285169184207, 0.19691646802984178] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23780285169184207, 0.19691646802984178, 0.1902493096832186] ***
*** starting iteration: 3; err: [Inf, 0.23780285169184207, 0.19691646802984178, 0.1902493096832186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23780285169184207, 0.19691646802984178, 0.1902493096832186, 0.18899693828541786] ***
*** finished computation of 7 references, err: [Inf, 0.23780285169184207, 0.19691646802984178, 0.1902493096832186, 0.18899693828541786] ***
*** center 1: selecting labels [1] (freq >= 2) [from [65, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 39, 13]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(2, 39), (3, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [71, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [79, 6, 0]]
** centroid: 4, normalized-entropy: 0.3681150054280774, [(1, 79), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [2, 76, 0]]
** centroid: 5, normalized-entropy: 0.17203694935311387, [(1, 2), (2, 76)]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 79, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23747219524998217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23747219524998217, 0.19332565292157233] ***
*** starting iteration: 2; err: [Inf, 0.23747219524998217, 0.19332565292157233] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23747219524998217, 0.19332565292157233, 0.18734422202222048] ***
*** starting iteration: 3; err: [Inf, 0.23747219524998217, 0.19332565292157233, 0.18734422202222048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23747219524998217, 0.19332565292157233, 0.18734422202222048, 0.18586218009470032] ***
*** finished computation of 7 references, err: [Inf, 0.23747219524998217, 0.19332565292157233, 0.18734422202222048, 0.18586218009470032] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [21, 56, 0]]
** centroid: 1, normalized-entropy: 0.8453509366224364, [(1, 21), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 12, 0]]
** centroid: 2, normalized-entropy: 0.7286561673702678, [(1, 47), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 2, 0]]
** centroid: 4, normalized-entropy: 0.1792560669283214, [(1, 72), (2, 2)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 39, 21]]
** centroid: 5, normalized-entropy: 0.9340680553754911, [(2, 39), (3, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 74, 0]]
** centroid: 7, normalized-entropy: 0.29181825659888555, [(1, 4), (2, 74)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23239527482073755] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23239527482073755, 0.1914109817831777] ***
*** starting iteration: 2; err: [Inf, 0.23239527482073755, 0.1914109817831777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23239527482073755, 0.1914109817831777, 0.1848177905967459] ***
*** starting iteration: 3; err: [Inf, 0.23239527482073755, 0.1914109817831777, 0.1848177905967459] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23239527482073755, 0.1914109817831777, 0.1848177905967459, 0.1826102137900889] ***
*** finished computation of 7 references, err: [Inf, 0.23239527482073755, 0.1914109817831777, 0.1848177905967459, 0.1826102137900889] ***
*** center 1: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 5, 0]]
** centroid: 2, normalized-entropy: 0.38705142139219795, [(1, 61), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 25, 19]]
** centroid: 3, normalized-entropy: 0.9865446300055647, [(2, 25), (3, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [69, 4, 0]]
** centroid: 4, normalized-entropy: 0.306424729870515, [(1, 69), (2, 4)]
*** center 5: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 60, 0]]
** centroid: 6, normalized-entropy: 0.5586293734521991, [(1, 9), (2, 60)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 70, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2443483595419675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2443483595419675, 0.19328628767840564] ***
*** starting iteration: 2; err: [Inf, 0.2443483595419675, 0.19328628767840564] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2443483595419675, 0.19328628767840564, 0.18893430210277437] ***
*** starting iteration: 3; err: [Inf, 0.2443483595419675, 0.19328628767840564, 0.18893430210277437] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2443483595419675, 0.19328628767840564, 0.18893430210277437, 0.18832224327232688] ***
*** finished computation of 7 references, err: [Inf, 0.2443483595419675, 0.19328628767840564, 0.18893430210277437, 0.18832224327232688] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [24, 50, 0]]
** centroid: 1, normalized-entropy: 0.9090221560878149, [(1, 24), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [40, 3, 0]]
** centroid: 2, normalized-entropy: 0.3650551896402848, [(1, 40), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 55, 17]]
** centroid: 4, normalized-entropy: 0.7885131605379784, [(2, 55), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [75, 14, 0]]
** centroid: 5, normalized-entropy: 0.6278191534832795, [(1, 75), (2, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 72, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2380130914077163] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2380130914077163, 0.18442871872428804] ***
*** starting iteration: 2; err: [Inf, 0.2380130914077163, 0.18442871872428804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2380130914077163, 0.18442871872428804, 0.18051053106226028] ***
*** starting iteration: 3; err: [Inf, 0.2380130914077163, 0.18442871872428804, 0.18051053106226028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2380130914077163, 0.18442871872428804, 0.18051053106226028, 0.18018926299735905] ***
*** finished computation of 7 references, err: [Inf, 0.2380130914077163, 0.18442871872428804, 0.18051053106226028, 0.18018926299735905] ***
*** center 1: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 47, 18]]
** centroid: 2, normalized-entropy: 0.8512243352621381, [(2, 47), (3, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [77, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [33, 39, 0]]
** centroid: 5, normalized-entropy: 0.9949848281859699, [(1, 33), (2, 39)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [19, 41, 0]]
** centroid: 6, normalized-entropy: 0.9007196798623592, [(1, 19), (2, 41)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 63, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.225465605112724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.225465605112724, 0.19350646938383578] ***
*** starting iteration: 2; err: [Inf, 0.225465605112724, 0.19350646938383578] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.225465605112724, 0.19350646938383578, 0.1920230214688927] ***
*** starting iteration: 3; err: [Inf, 0.225465605112724, 0.19350646938383578, 0.1920230214688927] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.225465605112724, 0.19350646938383578, 0.1920230214688927, 0.19143851406720933] ***
*** finished computation of 7 references, err: [Inf, 0.225465605112724, 0.19350646938383578, 0.1920230214688927, 0.19143851406720933] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 64, 12]]
** centroid: 1, normalized-entropy: 0.6292492238560344, [(2, 64), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [57, 14, 0]]
** centroid: 3, normalized-entropy: 0.7162583911075451, [(1, 57), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 12, 0]]
** centroid: 4, normalized-entropy: 0.708835673332196, [(1, 50), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 15, 0]]
** centroid: 5, normalized-entropy: 0.7062740891876008, [(1, 63), (2, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 77, 2]]
** centroid: 7, normalized-entropy: 0.17033057560105982, [(2, 77), (3, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24068294405937196] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24068294405937196, 0.19410218143463134] ***
*** starting iteration: 2; err: [Inf, 0.24068294405937196, 0.19410218143463134] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24068294405937196, 0.19410218143463134, 0.1899782302742824] ***
*** starting iteration: 3; err: [Inf, 0.24068294405937196, 0.19410218143463134, 0.1899782302742824] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24068294405937196, 0.19410218143463134, 0.1899782302742824, 0.18935982398875056] ***
*** finished computation of 7 references, err: [Inf, 0.24068294405937196, 0.19410218143463134, 0.1899782302742824, 0.18935982398875056] ***
*** center 1: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 52, 19]]
** centroid: 2, normalized-entropy: 0.8380078505079931, [(2, 52), (3, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 27, 0]]
** centroid: 4, normalized-entropy: 0.8453509366224364, [(1, 72), (2, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 53, 0]]
** centroid: 5, normalized-entropy: 0.6619760641115651, [(1, 11), (2, 53)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 54, 0]]
** centroid: 7, normalized-entropy: 0.2222848306856879, [(1, 2), (2, 54)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24031637163460254] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24031637163460254, 0.19530831654649228] ***
*** starting iteration: 2; err: [Inf, 0.24031637163460254, 0.19530831654649228] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24031637163460254, 0.19530831654649228, 0.1868000351903029] ***
*** starting iteration: 3; err: [Inf, 0.24031637163460254, 0.19530831654649228, 0.1868000351903029] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24031637163460254, 0.19530831654649228, 0.1868000351903029, 0.18460274055972695] ***
*** finished computation of 7 references, err: [Inf, 0.24031637163460254, 0.19530831654649228, 0.1868000351903029, 0.18460274055972695] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [8, 64, 0]]
** centroid: 1, normalized-entropy: 0.5032583347756457, [(1, 8), (2, 64)]
*** center 2: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 6, 0]]
** centroid: 4, normalized-entropy: 0.3912435636292556, [(1, 72), (2, 6)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 37, 20]]
** centroid: 5, normalized-entropy: 0.9348490242345946, [(2, 37), (3, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 60, 0]]
** centroid: 7, normalized-entropy: 0.3372900666170139, [(1, 4), (2, 60)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24285089791752398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24285089791752398, 0.1946487232428044] ***
*** starting iteration: 2; err: [Inf, 0.24285089791752398, 0.1946487232428044] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24285089791752398, 0.1946487232428044, 0.18890705948509276] ***
*** starting iteration: 3; err: [Inf, 0.24285089791752398, 0.1946487232428044, 0.18890705948509276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24285089791752398, 0.1946487232428044, 0.18890705948509276, 0.18805025945976375] ***
*** finished computation of 7 references, err: [Inf, 0.24285089791752398, 0.1946487232428044, 0.18890705948509276, 0.18805025945976375] ***
*** center 1: selecting labels [1] (freq >= 2) [from [95, 1, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 25, 17]]
** centroid: 3, normalized-entropy: 0.9736680645496202, [(2, 25), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [52, 16, 0]]
** centroid: 5, normalized-entropy: 0.787126586201269, [(1, 52), (2, 16)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 64, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 78, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22786003881227226] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22786003881227226, 0.18823658988904207] ***
*** starting iteration: 2; err: [Inf, 0.22786003881227226, 0.18823658988904207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22786003881227226, 0.18823658988904207, 0.18707696560584008] ***
*** starting iteration: 3; err: [Inf, 0.22786003881227226, 0.18823658988904207, 0.18707696560584008] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22786003881227226, 0.18823658988904207, 0.18707696560584008, 0.18654304415965453] ***
*** finished computation of 7 references, err: [Inf, 0.22786003881227226, 0.18823658988904207, 0.18707696560584008, 0.18654304415965453] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 82, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [23, 43, 0]]
** centroid: 3, normalized-entropy: 0.9327076126690367, [(1, 23), (2, 43)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [82, 5, 0]]
** centroid: 4, normalized-entropy: 0.3173238998358585, [(1, 82), (2, 5)]
*** center 5: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [43, 19, 0]]
** centroid: 6, normalized-entropy: 0.8890349038123858, [(1, 43), (2, 19)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 37, 13]]
** centroid: 7, normalized-entropy: 0.8267463724926181, [(2, 37), (3, 13)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25218951503932474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25218951503932474, 0.19409775257483125] ***
*** starting iteration: 2; err: [Inf, 0.25218951503932474, 0.19409775257483125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25218951503932474, 0.19409775257483125, 0.18788724345713853] ***
*** starting iteration: 3; err: [Inf, 0.25218951503932474, 0.19409775257483125, 0.18788724345713853] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25218951503932474, 0.19409775257483125, 0.18788724345713853, 0.18671163680031896] ***
*** finished computation of 7 references, err: [Inf, 0.25218951503932474, 0.19409775257483125, 0.18788724345713853, 0.18671163680031896] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 14, 0]]
** centroid: 1, normalized-entropy: 0.6840384356390419, [(1, 63), (2, 14)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 29, 25]]
** centroid: 2, normalized-entropy: 0.9960383613659186, [(2, 29), (3, 25)]
*** center 3: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 10, 0]]
** centroid: 4, normalized-entropy: 0.5916727785823274, [(1, 60), (2, 10)]
*** center 5: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 67, 0]]
** centroid: 7, normalized-entropy: 0.18927843126120178, [(1, 2), (2, 67)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2226256125420332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2226256125420332, 0.19059532901458442] ***
*** starting iteration: 2; err: [Inf, 0.2226256125420332, 0.19059532901458442] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2226256125420332, 0.19059532901458442, 0.1841788010234013] ***
*** starting iteration: 3; err: [Inf, 0.2226256125420332, 0.19059532901458442, 0.1841788010234013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2226256125420332, 0.19059532901458442, 0.1841788010234013, 0.18240968612767755] ***
*** finished computation of 7 references, err: [Inf, 0.2226256125420332, 0.19059532901458442, 0.1841788010234013, 0.18240968612767755] ***
*** center 1: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [82, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 45, 20]]
** centroid: 3, normalized-entropy: 0.8904916402194913, [(2, 45), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 45, 0]]
** centroid: 5, normalized-entropy: 0.9023932827949788, [(1, 21), (2, 45)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [49, 26, 0]]
** centroid: 6, normalized-entropy: 0.9310558233850329, [(1, 49), (2, 26)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 68, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24849278109520673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24849278109520673, 0.1932335939221084] ***
*** starting iteration: 2; err: [Inf, 0.24849278109520673, 0.1932335939221084] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24849278109520673, 0.1932335939221084, 0.19032768716476858] ***
*** starting iteration: 3; err: [Inf, 0.24849278109520673, 0.1932335939221084, 0.19032768716476858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24849278109520673, 0.1932335939221084, 0.19032768716476858, 0.1896124926842749] ***
*** finished computation of 7 references, err: [Inf, 0.24849278109520673, 0.1932335939221084, 0.19032768716476858, 0.1896124926842749] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [14, 51, 0]]
** centroid: 1, normalized-entropy: 0.7516499461153354, [(1, 14), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [44, 24, 0]]
** centroid: 2, normalized-entropy: 0.9366673818775627, [(1, 44), (2, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 61, 19]]
** centroid: 4, normalized-entropy: 0.79085809055281, [(2, 61), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 8, 0]]
** centroid: 5, normalized-entropy: 0.5435644431995963, [(1, 56), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [34, 36, 0]]
** centroid: 6, normalized-entropy: 0.9994110647387552, [(1, 34), (2, 36)]
*** center 7: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23856731298565864] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23856731298565864, 0.19176114994101226] ***
*** starting iteration: 2; err: [Inf, 0.23856731298565864, 0.19176114994101226] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23856731298565864, 0.19176114994101226, 0.18822600839845835] ***
*** starting iteration: 3; err: [Inf, 0.23856731298565864, 0.19176114994101226, 0.18822600839845835] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23856731298565864, 0.19176114994101226, 0.18822600839845835, 0.18787024821713566] ***
*** finished computation of 7 references, err: [Inf, 0.23856731298565864, 0.19176114994101226, 0.18822600839845835, 0.18787024821713566] ***
*** center 1: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 48, 14]]
** centroid: 2, normalized-entropy: 0.7706290693639406, [(2, 48), (3, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [71, 18, 0]]
** centroid: 4, normalized-entropy: 0.7263997735417457, [(1, 71), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [18, 57, 0]]
** centroid: 5, normalized-entropy: 0.7950402793845225, [(1, 18), (2, 57)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [10, 68, 0]]
** centroid: 6, normalized-entropy: 0.552495114325111, [(1, 10), (2, 68)]
*** center 7: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22841845405288042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22841845405288042, 0.19251758528500795] ***
*** starting iteration: 2; err: [Inf, 0.22841845405288042, 0.19251758528500795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22841845405288042, 0.19251758528500795, 0.18937990079820155] ***
*** starting iteration: 3; err: [Inf, 0.22841845405288042, 0.19251758528500795, 0.18937990079820155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22841845405288042, 0.19251758528500795, 0.18937990079820155, 0.18839988066256047] ***
*** finished computation of 7 references, err: [Inf, 0.22841845405288042, 0.19251758528500795, 0.18937990079820155, 0.18839988066256047] ***
*** center 1: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 54, 24]]
** centroid: 2, normalized-entropy: 0.8904916402194913, [(2, 54), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 6, 0]]
** centroid: 3, normalized-entropy: 0.5159469300074472, [(1, 46), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [14, 64, 0]]
** centroid: 4, normalized-entropy: 0.6789538995185759, [(1, 14), (2, 64)]
*** center 5: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 58, 0]]
** centroid: 6, normalized-entropy: 0.6329208984823799, [(1, 11), (2, 58)]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24697081393469125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24697081393469125, 0.19765823323000223] ***
*** starting iteration: 2; err: [Inf, 0.24697081393469125, 0.19765823323000223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24697081393469125, 0.19765823323000223, 0.19374829778820277] ***
*** starting iteration: 3; err: [Inf, 0.24697081393469125, 0.19765823323000223, 0.19374829778820277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24697081393469125, 0.19765823323000223, 0.19374829778820277, 0.1909547918047756] ***
*** finished computation of 7 references, err: [Inf, 0.24697081393469125, 0.19765823323000223, 0.19374829778820277, 0.1909547918047756] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [58, 38, 0]]
** centroid: 1, normalized-entropy: 0.968461008760162, [(1, 58), (2, 38)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [34, 26, 0]]
** centroid: 2, normalized-entropy: 0.9871377743721862, [(1, 34), (2, 26)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 69, 20]]
** centroid: 3, normalized-entropy: 0.7686913027030167, [(2, 69), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [8, 59, 0]]
** centroid: 5, normalized-entropy: 0.52764232609436, [(1, 8), (2, 59)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22235074607562275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22235074607562275, 0.19554427774623037] ***
*** starting iteration: 2; err: [Inf, 0.22235074607562275, 0.19554427774623037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22235074607562275, 0.19554427774623037, 0.19323918072041124] ***
*** starting iteration: 3; err: [Inf, 0.22235074607562275, 0.19554427774623037, 0.19323918072041124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22235074607562275, 0.19554427774623037, 0.19323918072041124, 0.1923066075220704] ***
*** finished computation of 7 references, err: [Inf, 0.22235074607562275, 0.19554427774623037, 0.19323918072041124, 0.1923066075220704] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 49, 15]]
** centroid: 3, normalized-entropy: 0.7855602922535471, [(2, 49), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [16, 61, 0]]
** centroid: 5, normalized-entropy: 0.7372413771710565, [(1, 16), (2, 61)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [51, 11, 0]]
** centroid: 6, normalized-entropy: 0.674398887071447, [(1, 51), (2, 11)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 67, 0]]
** centroid: 7, normalized-entropy: 0.4098553703184051, [(1, 6), (2, 67)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23801930360496043] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23801930360496043, 0.19252920347824692] ***
*** starting iteration: 2; err: [Inf, 0.23801930360496043, 0.19252920347824692] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23801930360496043, 0.19252920347824692, 0.18815596716105937] ***
*** starting iteration: 3; err: [Inf, 0.23801930360496043, 0.19252920347824692, 0.18815596716105937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23801930360496043, 0.19252920347824692, 0.18815596716105937, 0.18764902218803764] ***
*** finished computation of 7 references, err: [Inf, 0.23801930360496043, 0.19252920347824692, 0.18815596716105937, 0.18764902218803764] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [65, 15, 0]]
** centroid: 1, normalized-entropy: 0.6962122601251459, [(1, 65), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [42, 11, 0]]
** centroid: 2, normalized-entropy: 0.7367680100024784, [(1, 42), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 72, 19]]
** centroid: 3, normalized-entropy: 0.7391658175693049, [(2, 72), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 57, 0]]
** centroid: 5, normalized-entropy: 0.6385146263620961, [(1, 11), (2, 57)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [35, 26, 0]]
** centroid: 6, normalized-entropy: 0.9842399889605549, [(1, 35), (2, 26)]
*** center 7: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2222550803720951] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2222550803720951, 0.19362769676744937] ***
*** starting iteration: 2; err: [Inf, 0.2222550803720951, 0.19362769676744937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2222550803720951, 0.19362769676744937, 0.1892600012756884] ***
*** starting iteration: 3; err: [Inf, 0.2222550803720951, 0.19362769676744937, 0.1892600012756884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2222550803720951, 0.19362769676744937, 0.1892600012756884, 0.1873511567823589] ***
*** finished computation of 7 references, err: [Inf, 0.2222550803720951, 0.19362769676744937, 0.1892600012756884, 0.1873511567823589] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [51, 5, 0]]
** centroid: 1, normalized-entropy: 0.4340811200043348, [(1, 51), (2, 5)]
*** center 2: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 35, 18]]
** centroid: 3, normalized-entropy: 0.9244571409964927, [(2, 35), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [1, 72, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [12, 70, 0]]
** centroid: 7, normalized-entropy: 0.6006085754131871, [(1, 12), (2, 70)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2471481559127569] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2471481559127569, 0.19587234130874276] ***
*** starting iteration: 2; err: [Inf, 0.2471481559127569, 0.19587234130874276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2471481559127569, 0.19587234130874276, 0.19156165593862534] ***
*** starting iteration: 3; err: [Inf, 0.2471481559127569, 0.19587234130874276, 0.19156165593862534] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2471481559127569, 0.19587234130874276, 0.19156165593862534, 0.1906338792145252] ***
*** finished computation of 7 references, err: [Inf, 0.2471481559127569, 0.19587234130874276, 0.19156165593862534, 0.1906338792145252] ***
*** center 1: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 50, 20]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(2, 50), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [61, 25, 0]]
** centroid: 3, normalized-entropy: 0.869620774054375, [(1, 61), (2, 25)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [31, 40, 0]]
** centroid: 4, normalized-entropy: 0.9883779727795042, [(1, 31), (2, 40)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [9, 67, 0]]
** centroid: 5, normalized-entropy: 0.524805134842907, [(1, 9), (2, 67)]
*** center 6: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [71, 2, 0]]
** centroid: 7, normalized-entropy: 0.18116640155354563, [(1, 71), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24917657840996982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24917657840996982, 0.19179447245784104] ***
*** starting iteration: 2; err: [Inf, 0.24917657840996982, 0.19179447245784104] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24917657840996982, 0.19179447245784104, 0.18802959207817913] ***
*** starting iteration: 3; err: [Inf, 0.24917657840996982, 0.19179447245784104, 0.18802959207817913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24917657840996982, 0.19179447245784104, 0.18802959207817913, 0.18706497887149454] ***
*** finished computation of 7 references, err: [Inf, 0.24917657840996982, 0.19179447245784104, 0.18802959207817913, 0.18706497887149454] ***
*** center 1: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 55, 19]]
** centroid: 2, normalized-entropy: 0.8218127305034848, [(2, 55), (3, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 14, 0]]
** centroid: 4, normalized-entropy: 0.6840384356390419, [(1, 63), (2, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 47, 0]]
** centroid: 5, normalized-entropy: 0.903116172156872, [(1, 22), (2, 47)]
*** center 6: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 61, 0]]
** centroid: 7, normalized-entropy: 0.38705142139219795, [(1, 5), (2, 61)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2523702316321433] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2523702316321433, 0.1879224832803011] ***
*** starting iteration: 2; err: [Inf, 0.2523702316321433, 0.1879224832803011] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2523702316321433, 0.1879224832803011, 0.183680949928239] ***
*** starting iteration: 3; err: [Inf, 0.2523702316321433, 0.1879224832803011, 0.183680949928239] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2523702316321433, 0.1879224832803011, 0.183680949928239, 0.1829930707551539] ***
*** finished computation of 7 references, err: [Inf, 0.2523702316321433, 0.1879224832803011, 0.183680949928239, 0.1829930707551539] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [21, 57, 0]]
** centroid: 1, normalized-entropy: 0.8403586716091169, [(1, 21), (2, 57)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [30, 34, 0]]
** centroid: 2, normalized-entropy: 0.9971803988942641, [(1, 30), (2, 34)]
*** center 3: selecting labels [1] (freq >= 2) [from [82, 1, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 42, 16]]
** centroid: 4, normalized-entropy: 0.8497511372532974, [(2, 42), (3, 16)]
*** center 5: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 69, 0]]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 367,3 => 37,1 => 596), Dict(2 => 334,3 => 49,1 => 617))
[ Info: ===== scores for single classifier: {"micro_f1":0.929,"precision":0.929,"recall":0.929,"macro_recall":0.9280606583611132,"macro_f1":0.8869985381051103,"accuracy":0.929,"class_f1":{"2":0.8902627511591963,"3":0.810344827586207,"1":0.9603880355699272},"class_precision":{"2":0.9201277955271565,"3":0.7014925373134329,"1":0.9580645161290322},"class_recall":{"2":0.8622754491017964,"3":0.9591836734693877,"1":0.9627228525121556}}
[ Info: ===== scores for 1: {"micro_f1":0.969,"precision":0.969,"recall":0.969,"macro_recall":0.9504205626388211,"macro_f1":0.956901965365391,"accuracy":0.969,"class_f1":{"2":0.9533834586466166,"3":0.9375000000000001,"1":0.9798224374495562},"class_precision":{"2":0.9577039274924471,"3":0.9574468085106383,"1":0.9758842443729904},"class_recall":{"2":0.9491017964071856,"3":0.9183673469387755,"1":0.9837925445705025}}
[ Info: ===== scores for 5: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.9554375521110724,"macro_f1":0.9573524736028598,"accuracy":0.965,"class_f1":{"2":0.9479940564635958,"3":0.9484536082474228,"1":0.975609756097561},"class_precision":{"2":0.9410029498525073,"3":0.9583333333333334,"1":0.9787928221859706},"class_recall":{"2":0.9550898203592815,"3":0.9387755102040817,"1":0.9724473257698542}}
[ Info: ===== scores for 7: {"micro_f1":0.963,"precision":0.963,"recall":0.963,"macro_recall":0.9548148105601387,"macro_f1":0.9558998619893195,"accuracy":0.963,"class_f1":{"2":0.9453471196454948,"3":0.9484536082474228,"1":0.9738988580750407},"class_precision":{"2":0.9329446064139941,"3":0.9583333333333334,"1":0.9802955665024631},"class_recall":{"2":0.9580838323353293,"3":0.9387755102040817,"1":0.9675850891410048}}
[ Info: ===== scores for 9: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.9572685740218699,"macro_f1":0.9575028942461131,"accuracy":0.965,"class_f1":{"2":0.9486049926578561,"3":0.9484536082474228,"1":0.9754500818330606},"class_precision":{"2":0.930835734870317,"3":0.9583333333333334,"1":0.9851239669421488},"class_recall":{"2":0.9670658682634731,"3":0.9387755102040817,"1":0.965964343598055}}
[ Info: ===== scores for 11: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9690613150703852,"macro_f1":0.962474113655443,"accuracy":0.971,"class_f1":{"2":0.9576642335766423,"3":0.9494949494949495,"1":0.980263157894737},"class_precision":{"2":0.9344729344729344,"3":0.94,"1":0.994991652754591},"class_recall":{"2":0.9820359281437125,"3":0.9591836734693877,"1":0.965964343598055}}
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.963, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.963, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.969,"k":1,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.969,"precision":0.969,"recall":0.969,"macro_recall":0.9504205626388211,"macro_f1":0.956901965365391,"accuracy":0.969,"class_f1":{"2":0.9533834586466166,"3":0.9375000000000001,"1":0.9798224374495562},"class_precision":{"2":0.9577039274924471,"3":0.9574468085106383,"1":0.9758842443729904},"class_recall":{"2":0.9491017964071856,"3":0.9183673469387755,"1":0.9837925445705025}}
Test Summary: | Pass  Total
AKNC          |    8      8
[1254, 1, 1, 1, 2, 3, 1, 1, 4, 2, 4, 1, 3, 6, 1, 2, 8, 2, 2, 3, 2, 3, 4, 5, 11, 5, 5, 2, 12, 15, 11, 5, 11, 13, 6, 2, 5, 1, 15, 11, 4, 2, 66, 12, 30, 22, 10, 11, 9, 6, 13, 3, 15, 12, 11, 9, 16, 17, 8, 4, 8, 2, 3, 3, 24, 17, 4, 10, 20, 114, 8, 10, 15, 7, 51, 3, 4, 20, 6, 20, 5, 31, 14, 7, 23, 61, 17, 3, 27, 15, 18, 36, 7, 11, 36, 10, 19, 2, 9, 28, 9, 30, 11, 4, 10, 5, 45, 10, 13, 36, 40, 3, 22, 3, 14, 16, 17, 46, 42, 33, 18, 7, 5, 21, 1, 4, 4, 8, 27, 71, 20, 8, 43, 42, 12, 6, 13, 5, 20, 14, 4, 3, 2, 4, 15, 117, 23, 24, 12, 55, 15, 13, 228, 6, 29, 32, 20, 17, 6, 7, 51, 18, 9, 28, 14, 22, 19, 28, 9, 17, 52, 10, 89, 8, 26, 28, 16, 23, 45, 96, 13, 6, 45, 19, 11, 9, 18, 27, 52, 25, 10, 18, 76, 8, 50, 25, 20, 9, 8, 56, 24, 25, 29, 22, 27, 11, 18, 36, 14, 18, 107, 38, 9, 64, 70, 5, 20, 7, 249, 40, 160, 25, 381, 69, 25, 5, 43, 9, 4, 7, 27, 28, 79, 476, 4, 13, 92, 16, 98, 11, 20, 101, 36, 154, 75, 64, 209, 74, 97, 16, 23, 3, 158, 3, 1, 8, 66, 28, 9, 50, 77, 165, 16, 133, 8, 27, 19, 27, 14, 53, 11, 14, 12, 20, 44, 63, 24, 14, 73, 18, 49, 23, 70, 33, 19, 14, 10, 124, 34, 36, 76, 9, 21, 15, 22, 11, 6, 20, 10, 9]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6779999999999998, speedup = 0.17378431454283555, eval_ratio = 0.086879)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":null,"recall":0.37934027777777785,"f1":null,"seconds":0.0002267397940158844,"exhaustive_search_seconds":0.00045786052942276,"evaluations":574.15625,"distances_sum":1740.682296124399}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5416666666666664,"recall":0.5416666666666664,"f1":null,"seconds":0.00035803206264972687,"exhaustive_search_seconds":0.00045786052942276,"evaluations":704.09375,"distances_sum":1693.9300259608153}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6449652777777775,"recall":0.6449652777777775,"f1":null,"seconds":0.0011227745562791824,"exhaustive_search_seconds":0.00045786052942276,"evaluations":813.7421875,"distances_sum":1637.7757226779026}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7144097222222215,"recall":0.7144097222222215,"f1":0.7144097222222215,"seconds":0.00056491419672966,"exhaustive_search_seconds":0.00045786052942276,"evaluations":947.296875,"distances_sum":1610.536368271528}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7725694444444436,"recall":0.7725694444444436,"f1":0.7725694444444436,"seconds":0.0007835235446691513,"exhaustive_search_seconds":0.00045786052942276,"evaluations":1081.6953125,"distances_sum":1591.0197094225446}
KCenters.DeloneInvIndex> reached performance {"precision":0.8229166666666661,"recall":0.8229166666666661,"f1":0.8229166666666661,"seconds":0.0011116787791252136,"exhaustive_search_seconds":0.00045786052942276,"evaluations":1251.609375,"distances_sum":1578.0279261766186}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8440000000000002, speedup = 0.23225422076414784, eval_ratio = 0.126185)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
