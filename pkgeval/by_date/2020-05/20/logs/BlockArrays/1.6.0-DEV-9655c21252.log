Julia Version 1.6.0-DEV.63
Commit 9655c21252 (2020-05-20 01:37 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed ArrayLayouts ─ v0.3.1
  Installed FillArrays ─── v0.8.9
  Installed BlockArrays ── v0.12.6
Updating `~/.julia/environments/v1.6/Project.toml`
  [8e7c35d0] + BlockArrays v0.12.6
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [4c555306] + ArrayLayouts v0.3.1
  [8e7c35d0] + BlockArrays v0.12.6
  [1a297f60] + FillArrays v0.8.9
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [9a3f8284] + Random
  [9e88b42a] + Serialization
  [2f01184e] + SparseArrays
    Testing BlockArrays
Status `/tmp/jl_J40vk2/Project.toml`
  [4c555306] ArrayLayouts v0.3.1
  [8e7c35d0] BlockArrays v0.12.6
  [1a297f60] FillArrays v0.8.9
  [6fe1bfb0] OffsetArrays v1.0.4
  [2a0f44e3] Base64
  [37e2e46d] LinearAlgebra
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_J40vk2/Manifest.toml`
  [4c555306] ArrayLayouts v0.3.1
  [8e7c35d0] BlockArrays v0.12.6
  [1a297f60] FillArrays v0.8.9
  [6fe1bfb0] OffsetArrays v1.0.4
  [2a0f44e3] Base64
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [9a3f8284] Random
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
adjoint: Error During Test at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:110
  Test threw exception
  Expression: all(muladd!(1.0, V, b[5:6], 0.0, similar(b, 2)) .=== BLAS.gemv!('T', 1.0, Matrix(V'), b[5:6], 0.0, similar(b, 2)))
  MethodError: unsafe_convert(::Type{Ptr{Float64}}, ::Adjoint{Float64,Array{Float64,2}}) is ambiguous. Candidates:
    unsafe_convert(::Type{Ptr{T}}, A::Adjoint{var"#s826",var"#s825"} where var"#s825"<:(StridedVecOrMat{T} where T) where var"#s826"<:Real) where T in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:208
    unsafe_convert(::Type{Ptr{T}}, A::Adjoint{var"#s13",S} where S where var"#s13"<:Real) where T<:Real in ArrayLayouts at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/ArrayLayouts.jl:83
  Possible fix, define
    unsafe_convert(::Type{Ptr{T}}, ::Adjoint{var"#s826",var"#s825"} where var"#s825"<:(StridedVecOrMat{T} where T) where var"#s826"<:Real) where T<:Real
  Stacktrace:
   [1] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}) at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/src/views.jl:173
   [2] unsafe_convert(::Type{Ptr{Float64}}, ::Transpose{Float64,SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/ArrayLayouts.jl:84
   [3] gemv!(::Char, ::Float64, ::Transpose{Float64,SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}}, ::Array{Float64,1}, ::Float64, ::Array{Float64,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:626
   [4] _gemv! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:252 [inlined]
   [5] materialize! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:268 [inlined]
   [6] muladd!(::Float64, ::SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::Array{Float64,1}, ::Float64, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:80
   [7] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:110
   [8] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [9] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:90
   [10] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [11] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:6
  
adjoint: Error During Test at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:111
  Test threw exception
  Expression: all(muladd!(1.0, V', b[3:4], 0.0, similar(b, 2)) .=== BLAS.gemv!('N', 1.0, Matrix(V'), b[3:4], 0.0, similar(b, 2)))
  MethodError: unsafe_convert(::Type{Ptr{Float64}}, ::Adjoint{Float64,Array{Float64,2}}) is ambiguous. Candidates:
    unsafe_convert(::Type{Ptr{T}}, A::Adjoint{var"#s826",var"#s825"} where var"#s825"<:(StridedVecOrMat{T} where T) where var"#s826"<:Real) where T in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:208
    unsafe_convert(::Type{Ptr{T}}, A::Adjoint{var"#s13",S} where S where var"#s13"<:Real) where T<:Real in ArrayLayouts at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/ArrayLayouts.jl:83
  Possible fix, define
    unsafe_convert(::Type{Ptr{T}}, ::Adjoint{var"#s826",var"#s825"} where var"#s825"<:(StridedVecOrMat{T} where T) where var"#s826"<:Real) where T<:Real
  Stacktrace:
   [1] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}) at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/src/views.jl:173
   [2] unsafe_convert(::Type{Ptr{Float64}}, ::Adjoint{Float64,SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/ArrayLayouts.jl:83
   [3] gemv!(::Char, ::Float64, ::Adjoint{Float64,SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}}, ::Array{Float64,1}, ::Float64, ::Array{Float64,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:626
   [4] _gemv! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:252 [inlined]
   [5] materialize! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:266 [inlined]
   [6] muladd!(::Float64, ::Adjoint{Float64,SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}}, ::Array{Float64,1}, ::Float64, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:80
   [7] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:111
   [8] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [9] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:90
   [10] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [11] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:6
  
adjoint: Error During Test at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:112
  Test threw exception
  Expression: A' * b ≈ (Matrix(A))' * b
  MethodError: unsafe_convert(::Type{Ptr{Float64}}, ::Adjoint{Float64,Array{Float64,2}}) is ambiguous. Candidates:
    unsafe_convert(::Type{Ptr{T}}, A::Adjoint{var"#s826",var"#s825"} where var"#s825"<:(StridedVecOrMat{T} where T) where var"#s826"<:Real) where T in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:208
    unsafe_convert(::Type{Ptr{T}}, A::Adjoint{var"#s13",S} where S where var"#s13"<:Real) where T<:Real in ArrayLayouts at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/ArrayLayouts.jl:83
  Possible fix, define
    unsafe_convert(::Type{Ptr{T}}, ::Adjoint{var"#s826",var"#s825"} where var"#s825"<:(StridedVecOrMat{T} where T) where var"#s826"<:Real) where T<:Real
  Stacktrace:
   [1] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}) at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/src/views.jl:173
   [2] unsafe_convert(::Type{Ptr{Float64}}, ::Transpose{Float64,SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/ArrayLayouts.jl:84
   [3] gemv!(::Char, ::Float64, ::Transpose{Float64,SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}}, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:626
   [4] _gemv! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:252 [inlined]
   [5] materialize! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:268 [inlined]
   [6] muladd!(::Float64, ::SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:80
   [7] materialize!(::MulAdd{BlockLayout{DenseRowMajor},DenseColumnMajor,DenseColumnMajor,Float64,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Array{Float64,1},PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockedUnitRange{Array{Int64,1}}}}}) at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/src/blocklinalg.jl:69
   [8] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:80 [inlined]
   [9] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:94 [inlined]
   [10] copy at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:82 [inlined]
   [11] materialize at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:81 [inlined]
   [12] mul at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:412 [inlined]
   [13] *(::Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:455
   [14] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:112
   [15] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [16] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:90
   [17] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [18] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:6
  
adjoint: Error During Test at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:114
  Test threw exception
  Expression: all(transpose(A) * b .=== A' * b)
  MethodError: unsafe_convert(::Type{Ptr{Float64}}, ::Adjoint{Float64,Array{Float64,2}}) is ambiguous. Candidates:
    unsafe_convert(::Type{Ptr{T}}, A::Adjoint{var"#s826",var"#s825"} where var"#s825"<:(StridedVecOrMat{T} where T) where var"#s826"<:Real) where T in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:208
    unsafe_convert(::Type{Ptr{T}}, A::Adjoint{var"#s13",S} where S where var"#s13"<:Real) where T<:Real in ArrayLayouts at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/ArrayLayouts.jl:83
  Possible fix, define
    unsafe_convert(::Type{Ptr{T}}, ::Adjoint{var"#s826",var"#s825"} where var"#s825"<:(StridedVecOrMat{T} where T) where var"#s826"<:Real) where T<:Real
  Stacktrace:
   [1] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}) at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/src/views.jl:173
   [2] unsafe_convert(::Type{Ptr{Float64}}, ::Transpose{Float64,SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/ArrayLayouts.jl:84
   [3] gemv!(::Char, ::Float64, ::Transpose{Float64,SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}}, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:626
   [4] _gemv! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:252 [inlined]
   [5] materialize! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:268 [inlined]
   [6] muladd!(::Float64, ::SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:80
   [7] materialize!(::MulAdd{BlockLayout{DenseRowMajor},DenseColumnMajor,DenseColumnMajor,Float64,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Array{Float64,1},PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockedUnitRange{Array{Int64,1}}}}}) at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/src/blocklinalg.jl:69
   [8] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:80 [inlined]
   [9] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:94 [inlined]
   [10] copy at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:82 [inlined]
   [11] materialize at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:81 [inlined]
   [12] mul at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:412 [inlined]
   [13] *(::Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:455
   [14] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:114
   [15] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [16] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:90
   [17] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [18] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:6
  
adjoint: Error During Test at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:126
  Test threw exception
  Expression: A' * b ≈ (Matrix(A))' * b
  MethodError: unsafe_convert(::Type{Ptr{Float64}}, ::Adjoint{Float64,Array{Float64,2}}) is ambiguous. Candidates:
    unsafe_convert(::Type{Ptr{T}}, A::Adjoint{var"#s826",var"#s825"} where var"#s825"<:(StridedVecOrMat{T} where T) where var"#s826"<:Real) where T in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:208
    unsafe_convert(::Type{Ptr{T}}, A::Adjoint{var"#s13",S} where S where var"#s13"<:Real) where T<:Real in ArrayLayouts at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/ArrayLayouts.jl:83
  Possible fix, define
    unsafe_convert(::Type{Ptr{T}}, ::Adjoint{var"#s826",var"#s825"} where var"#s825"<:(StridedVecOrMat{T} where T) where var"#s826"<:Real) where T<:Real
  Stacktrace:
   [1] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}) at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/src/views.jl:173
   [2] unsafe_convert(::Type{Ptr{Float64}}, ::Transpose{Float64,SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/ArrayLayouts.jl:84
   [3] gemv!(::Char, ::Float64, ::Transpose{Float64,SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}}, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:626
   [4] _gemv! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:252 [inlined]
   [5] materialize! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:268 [inlined]
   [6] muladd!(::Float64, ::SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:80
   [7] materialize!(::MulAdd{BlockLayout{DenseRowMajor},DenseColumnMajor,DenseColumnMajor,Float64,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Array{Float64,1},PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockedUnitRange{Array{Int64,1}}}}}) at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/src/blocklinalg.jl:69
   [8] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:80 [inlined]
   [9] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:94 [inlined]
   [10] copy at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:82 [inlined]
   [11] materialize at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:81 [inlined]
   [12] mul at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:412 [inlined]
   [13] *(::Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:455
   [14] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:126
   [15] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [16] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:90
   [17] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [18] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:6
  
adjoint: Error During Test at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:128
  Test threw exception
  Expression: all(transpose(A) * b .=== A' * b)
  MethodError: unsafe_convert(::Type{Ptr{Float64}}, ::Adjoint{Float64,Array{Float64,2}}) is ambiguous. Candidates:
    unsafe_convert(::Type{Ptr{T}}, A::Adjoint{var"#s826",var"#s825"} where var"#s825"<:(StridedVecOrMat{T} where T) where var"#s826"<:Real) where T in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:208
    unsafe_convert(::Type{Ptr{T}}, A::Adjoint{var"#s13",S} where S where var"#s13"<:Real) where T<:Real in ArrayLayouts at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/ArrayLayouts.jl:83
  Possible fix, define
    unsafe_convert(::Type{Ptr{T}}, ::Adjoint{var"#s826",var"#s825"} where var"#s825"<:(StridedVecOrMat{T} where T) where var"#s826"<:Real) where T<:Real
  Stacktrace:
   [1] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}) at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/src/views.jl:173
   [2] unsafe_convert(::Type{Ptr{Float64}}, ::Transpose{Float64,SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/ArrayLayouts.jl:84
   [3] gemv!(::Char, ::Float64, ::Transpose{Float64,SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}}, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:626
   [4] _gemv! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:252 [inlined]
   [5] materialize! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:268 [inlined]
   [6] muladd!(::Float64, ::SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:80
   [7] materialize!(::MulAdd{BlockLayout{DenseRowMajor},DenseColumnMajor,DenseColumnMajor,Float64,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Array{Float64,1},PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockedUnitRange{Array{Int64,1}}}}}) at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/src/blocklinalg.jl:69
   [8] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:80 [inlined]
   [9] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:94 [inlined]
   [10] copy at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:82 [inlined]
   [11] materialize at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:81 [inlined]
   [12] mul at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:412 [inlined]
   [13] *(::Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:455
   [14] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:128
   [15] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [16] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:90
   [17] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [18] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:6
  
adjoint: Error During Test at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:131
  Test threw exception
  Expression: A' * B ≈ A' * Matrix(B) ≈ (Matrix(A))' * B
  MethodError: unsafe_convert(::Type{Ptr{Float64}}, ::Adjoint{Float64,Array{Float64,2}}) is ambiguous. Candidates:
    unsafe_convert(::Type{Ptr{T}}, A::Adjoint{var"#s826",var"#s825"} where var"#s825"<:(StridedVecOrMat{T} where T) where var"#s826"<:Real) where T in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:208
    unsafe_convert(::Type{Ptr{T}}, A::Adjoint{var"#s13",S} where S where var"#s13"<:Real) where T<:Real in ArrayLayouts at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/ArrayLayouts.jl:83
  Possible fix, define
    unsafe_convert(::Type{Ptr{T}}, ::Adjoint{var"#s826",var"#s825"} where var"#s825"<:(StridedVecOrMat{T} where T) where var"#s826"<:Real) where T<:Real
  Stacktrace:
   [1] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}) at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/src/views.jl:173
   [2] unsafe_convert(::Type{Ptr{Float64}}, ::Transpose{Float64,SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/ArrayLayouts.jl:84
   [3] gemm!(::Char, ::Char, ::Float64, ::Transpose{Float64,SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}}, ::SubArray{Float64,2,PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockedUnitRange{Array{Int64,1}},Base.OneTo{Int64}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},Base.OneTo{Int64}}},false}, ::Float64, ::SubArray{Float64,2,PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockedUnitRange{Array{Int64,1}},Base.OneTo{Int64}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},Base.OneTo{Int64}}},false}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:1374
   [4] _gemm! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:261 [inlined]
   [5] materialize! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:287 [inlined]
   [6] muladd!(::Float64, ::SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,2,PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockedUnitRange{Array{Int64,1}},Base.OneTo{Int64}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},Base.OneTo{Int64}}},false}, ::Float64, ::SubArray{Float64,2,PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockedUnitRange{Array{Int64,1}},Base.OneTo{Int64}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:80
   [7] _block_muladd!(::Float64, ::Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}}, ::PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockedUnitRange{Array{Int64,1}},Base.OneTo{Int64}}}, ::Float64, ::PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockedUnitRange{Array{Int64,1}},Base.OneTo{Int64}}}) at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/src/blocklinalg.jl:78
   [8] materialize! at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/src/blocklinalg.jl:108 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:80 [inlined]
   [10] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:94 [inlined]
   [11] copy at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:82 [inlined]
   [12] materialize at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:81 [inlined]
   [13] mul at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:412 [inlined]
   [14] *(::Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}}, ::Array{Float64,2}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:453
   [15] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:131
   [16] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [17] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:90
   [18] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [19] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:6
  
adjoint: Error During Test at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:132
  Test threw exception
  Expression: B' * A' ≈ (Matrix(B))' * A' ≈ B' * (Matrix(A))' ≈ Matrix(B') * Matrix(A')
  MethodError: unsafe_convert(::Type{Ptr{Float64}}, ::Adjoint{Float64,Array{Float64,2}}) is ambiguous. Candidates:
    unsafe_convert(::Type{Ptr{T}}, A::Adjoint{var"#s826",var"#s825"} where var"#s825"<:(StridedVecOrMat{T} where T) where var"#s826"<:Real) where T in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:208
    unsafe_convert(::Type{Ptr{T}}, A::Adjoint{var"#s13",S} where S where var"#s13"<:Real) where T<:Real in ArrayLayouts at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/ArrayLayouts.jl:83
  Possible fix, define
    unsafe_convert(::Type{Ptr{T}}, ::Adjoint{var"#s826",var"#s825"} where var"#s825"<:(StridedVecOrMat{T} where T) where var"#s826"<:Real) where T<:Real
  Stacktrace:
   [1] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}) at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/src/views.jl:173
   [2] unsafe_convert(::Type{Ptr{Float64}}, ::Transpose{Float64,SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/ArrayLayouts.jl:84
   [3] gemm!(::Char, ::Char, ::Float64, ::Transpose{Float64,SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}}, ::Transpose{Float64,SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}}, ::Float64, ::SubArray{Float64,2,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:1374
   [4] _gemm! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:261 [inlined]
   [5] materialize! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:292 [inlined]
   [6] muladd!(::Float64, ::SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,2,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:80
   [7] _block_muladd!(::Float64, ::Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}}, ::Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}}, ::Float64, ::BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}) at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/src/blocklinalg.jl:78
   [8] materialize! at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/src/blocklinalg.jl:90 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:80 [inlined]
   [10] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:94 [inlined]
   [11] copy at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:82 [inlined]
   [12] materialize at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:81 [inlined]
   [13] mul at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:412 [inlined]
   [14] *(::Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}}, ::Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:452
   [15] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:132
   [16] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [17] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:90
   [18] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [19] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:6
  
adjoint: Error During Test at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:133
  Test threw exception
  Expression: A' * A ≈ (Matrix(A))' * Matrix(A)
  MethodError: unsafe_convert(::Type{Ptr{Float64}}, ::Adjoint{Float64,Array{Float64,2}}) is ambiguous. Candidates:
    unsafe_convert(::Type{Ptr{T}}, A::Adjoint{var"#s826",var"#s825"} where var"#s825"<:(StridedVecOrMat{T} where T) where var"#s826"<:Real) where T in LinearAlgebra at /opt/julia/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:208
    unsafe_convert(::Type{Ptr{T}}, A::Adjoint{var"#s13",S} where S where var"#s13"<:Real) where T<:Real in ArrayLayouts at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/ArrayLayouts.jl:83
  Possible fix, define
    unsafe_convert(::Type{Ptr{T}}, ::Adjoint{var"#s826",var"#s825"} where var"#s825"<:(StridedVecOrMat{T} where T) where var"#s826"<:Real) where T<:Real
  Stacktrace:
   [1] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}) at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/src/views.jl:173
   [2] unsafe_convert(::Type{Ptr{Float64}}, ::Transpose{Float64,SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/ArrayLayouts.jl:84
   [3] gemm!(::Char, ::Char, ::Float64, ::Transpose{Float64,SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}}, ::SubArray{Float64,2,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,2,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:1374
   [4] _gemm! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:261 [inlined]
   [5] materialize! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:287 [inlined]
   [6] muladd!(::Float64, ::SubArray{Float64,2,Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,2,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,2,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:80
   [7] _block_muladd!(::Float64, ::Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}}, ::BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}, ::Float64, ::BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}) at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/src/blocklinalg.jl:78
   [8] materialize! at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/src/blocklinalg.jl:90 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:80 [inlined]
   [10] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:94 [inlined]
   [11] copy at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:82 [inlined]
   [12] materialize at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:81 [inlined]
   [13] mul at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:412 [inlined]
   [14] *(::Adjoint{Float64,BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}}, ::BlockArray{Float64,2,Array{Array{Float64,2},2},Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/S2dXf/src/muladd.jl:457
   [15] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:133
   [16] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [17] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:90
   [18] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [19] top-level scope at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/test_blocklinalg.jl:6
  
Test Summary:                                 | Pass  Error  Total
BlockArrays.jl                                |  722      9    731
  Blocks                                      |   59            59
  BlockedUnitRange                            |  107           107
  BlockSlice                                  |    2             2
  sortedin                                    |    4             4
  eachblock                                   |    3             3
  block constructors                          |   78            78
  block indexing                              |   11            11
  misc block tests                            |   61            61
  convert                                     |   19            19
  string                                      |    2             2
  replstring                                  |    4             4
  AbstractVector{Int} blocks                  |    3             3
  Strided array interface                     |    2             2
  lmul!/rmul!                                 |   16            16
  copy                                        |   14            14
  const block size                            |    2             2
  mixed blocks #92                            |    4             4
  reshape                                     |    9             9
  *                                           |    3             3
  Blockindex                                  |    6             6
  block slice                                 |   12            12
  block view                                  |   31            31
  block view pointers                         |    8             8
  block indx range of block range             |    6             6
  subarray implements block interface         |   15            15
  block range                                 |   40            40
  block index range                           |    5             5
  partially implemented block array           |    4             4
  Array block interface                       |    6             6
  Triangular/Symmetric/Hermitian block arrays |   11            11
  Adjoint/Transpose block arrays              |    8             8
  Diagonal BlockArray                         |    4             4
  non-standard block axes                     |    2             2
  broadcast                                   |   50            50
  Linear Algebra                              |   95      9    104
    BlockArray matrix * vector                |   20            20
    PseudoBlockArray matrix * vector          |   19            19
    matrix * matrix                           |    3             3
    adjoint                                   |   24      9     33
    triangular                                |   21            21
    inv                                       |    8             8
  Khatri Rao Product (size)                   |    8             8
  Khatri Rao Product (constant blocks)        |    6             6
  Khatri Rao Product (wrong blocksize)        |    1             1
  Khatri Rao Product (Matrix)                 |    1             1
ERROR: LoadError: Some tests did not pass: 722 passed, 0 failed, 9 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/BlockArrays/fCSU8/test/runtests.jl:3
ERROR: Package BlockArrays errored during testing
Stacktrace:
 [1] pkgerror(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1557
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:327
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:314
 [5] #test#61 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
 [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
 [7] #test#60 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
 [8] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope at none:16
