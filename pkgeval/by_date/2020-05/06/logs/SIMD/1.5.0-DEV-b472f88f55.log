Julia Version 1.5.0-DEV.862
Commit b472f88f55 (2020-05-06 01:04 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SIMD ─ v2.8.0
Updating `~/.julia/environments/v1.5/Project.toml`
  [fdea26ae] + SIMD v2.8.0
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [fdea26ae] + SIMD v2.8.0
  [2a0f44e3] + Base64
  [b77e0a4c] + InteractiveUtils
  [d6f4376e] + Markdown
    Testing SIMD
Status `/tmp/jl_OtD8JV/Project.toml`
  [fdea26ae] SIMD v2.8.0
  [b77e0a4c] InteractiveUtils
  [8dfed614] Test
Status `/tmp/jl_OtD8JV/Manifest.toml`
  [fdea26ae] SIMD v2.8.0
  [2a0f44e3] Base64
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [56ddb016] Logging
  [d6f4376e] Markdown
  [9a3f8284] Random
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test

;  @ /home/pkgeval/.julia/packages/SIMD/Am38N/test/runtests.jl:568 within `vsum'
define double @julia_vsum_2454({ %jl_value_t*, [1 x [2 x i64]], i64, i64 }* nocapture nonnull readonly dereferenceable(40)) {
top:
  %gcframe = alloca %jl_value_t*, i32 3, align 16
  %1 = bitcast %jl_value_t** %gcframe to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 24, i1 false)
  %2 = alloca [1 x [1 x i64]], align 8
  %thread_ptr = call i8* asm "movq %fs:0, $0", "=r"()
  %ptls_i8 = getelementptr i8, i8* %thread_ptr, i64 -15720
  %ptls = bitcast i8* %ptls_i8 to %jl_value_t***
;  @ /home/pkgeval/.julia/packages/SIMD/Am38N/test/runtests.jl:569 within `vsum'
; ┌ @ abstractarray.jl:206 within `length'
; │┌ @ subarray.jl:71 within `size'
; ││┌ @ subarray.jl:430 within `axes'
; │││┌ @ subarray.jl:435 within `_indices_sub'
; ││││┌ @ abstractarray.jl:99 within `unsafe_indices'
; │││││┌ @ range.jl:543 within `unsafe_length'
; ││││││┌ @ range.jl:597 within `last'
; │││││││┌ @ Base.jl:33 within `getproperty'
          %3 = getelementptr %jl_value_t*, %jl_value_t** %gcframe, i32 0
          %4 = bitcast %jl_value_t** %3 to i64*
          store i64 4, i64* %4
          %5 = getelementptr %jl_value_t**, %jl_value_t*** %ptls, i32 0
          %6 = getelementptr %jl_value_t*, %jl_value_t** %gcframe, i32 1
          %7 = bitcast %jl_value_t** %6 to %jl_value_t***
          %8 = load %jl_value_t**, %jl_value_t*** %5
          store %jl_value_t** %8, %jl_value_t*** %7
          %9 = bitcast %jl_value_t*** %5 to %jl_value_t***
          store %jl_value_t** %gcframe, %jl_value_t*** %9
          %10 = getelementptr inbounds { %jl_value_t*, [1 x [2 x i64]], i64, i64 }, { %jl_value_t*, [1 x [2 x i64]], i64, i64 }* %0, i64 0, i32 1, i64 0, i64 1
; ││││││└└
; ││││││┌ @ range.jl:592 within `first'
; │││││││┌ @ Base.jl:33 within `getproperty'
          %11 = getelementptr inbounds { %jl_value_t*, [1 x [2 x i64]], i64, i64 }, { %jl_value_t*, [1 x [2 x i64]], i64, i64 }* %0, i64 0, i32 1, i64 0, i64 0
; ││││││└└
; ││││││┌ @ int.jl:85 within `-'
         %12 = load i64, i64* %10, align 8
         %13 = load i64, i64* %11, align 8
         %14 = sub i64 %12, %13
; ││││││└
; ││││││┌ @ int.jl:86 within `+'
         %15 = add i64 %14, 1
; │││││└└
; │││││┌ @ range.jl:326 within `OneTo' @ range.jl:317
; ││││││┌ @ promotion.jl:409 within `max'
         %16 = icmp sgt i64 %15, 0
         %17 = select i1 %16, i64 %15, i64 0
; └└└└└└└
; ┌ @ int.jl:261 within `rem'
   %18 = and i64 %17, 3
; └
; ┌ @ promotion.jl:398 within `=='
   %19 = icmp eq i64 %18, 0
; └
  br i1 %19, label %L14, label %L117

L14:                                              ; preds = %top
;  @ /home/pkgeval/.julia/packages/SIMD/Am38N/test/runtests.jl:572 within `vsum'
; ┌ @ range.jl:22 within `Colon'
; │┌ @ range.jl:24 within `_colon'
; ││┌ @ range.jl:256 within `StepRange' @ range.jl:205
     %20 = call i64 @j_steprange_last_2455(i64 1, i64 4, i64 %17)
; └└└
; ┌ @ range.jl:620 within `iterate'
; │┌ @ range.jl:501 within `isempty'
; ││┌ @ bool.jl:40 within `&'
     %21 = icmp sgt i64 %20, 0
; └└└
  br i1 %21, label %L40.preheader, label %L113

L40.preheader:                                    ; preds = %L14
;  @ /home/pkgeval/.julia/packages/SIMD/Am38N/test/runtests.jl:573 within `vsum'
; ┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1943 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl within `_preprocessindices'
    %22 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %2, i64 0, i64 0, i64 0
; │└
; │ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1944 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1935 within `_pointer'
; ││┌ @ subarray.jl:419 within `pointer'
; │││┌ @ subarray.jl:362 within `first_index'
; ││││┌ @ Base.jl within `getproperty'
       %23 = getelementptr inbounds { %jl_value_t*, [1 x [2 x i64]], i64, i64 }, { %jl_value_t*, [1 x [2 x i64]], i64, i64 }* %0, i64 0, i32 2
       %24 = getelementptr inbounds { %jl_value_t*, [1 x [2 x i64]], i64, i64 }, { %jl_value_t*, [1 x [2 x i64]], i64, i64 }* %0, i64 0, i32 3
; ││││└
; ││││┌ @ int.jl within `+'
       %25 = load i64, i64* %23, align 8
       %26 = load i64, i64* %24, align 8
; │││└└
; │││ @ subarray.jl:424 within `pointer'
; │││┌ @ Base.jl within `getproperty'
      %27 = getelementptr inbounds { %jl_value_t*, [1 x [2 x i64]], i64, i64 }, { %jl_value_t*, [1 x [2 x i64]], i64, i64 }* %0, i64 0, i32 0
      %28 = load %jl_value_t*, %jl_value_t** %27, align 8
; │└└└
; │ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1943 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1922 within `_preprocessindices'
; ││┌ @ abstractarray.jl:502 within `checkbounds' @ abstractarray.jl:487
; │││┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1871 within `checkindex'
      br label %L40

L40:                                              ; preds = %L76, %L40.preheader
      %value_phi3 = phi <4 x double> [ %res.i15, %L76 ], [ zeroinitializer, %L40.preheader ]
      %value_phi4 = phi i64 [ %44, %L76 ], [ 1, %L40.preheader ]
; ││││┌ @ int.jl:441 within `<='
       %29 = icmp slt i64 %value_phi4, 1
; ││││└
; ││││┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1865 within `last'
; │││││┌ @ int.jl:85 within `-'
        %30 = add nuw i64 %value_phi4, 3
; ││││└└
; ││││┌ @ int.jl:441 within `<='
       %31 = icmp sgt i64 %30, %17
; ││││└
      %or.cond = or i1 %29, %31
      br i1 %or.cond, label %L66, label %L76

L66:                                              ; preds = %L40
      %value_phi4.lcssa = phi i64 [ %value_phi4, %L40 ]
; ││└└
    store i64 %value_phi4.lcssa, i64* %22, align 8
; ││┌ @ abstractarray.jl:502 within `checkbounds'
; │││┌ @ subarray.jl:49 within `throw_boundserror'
; ││││┌ @ Base.jl:33 within `getproperty'
       %32 = getelementptr inbounds { %jl_value_t*, [1 x [2 x i64]], i64, i64 }, { %jl_value_t*, [1 x [2 x i64]], i64, i64 }* %0, i64 0, i32 1
       %33 = getelementptr %jl_value_t*, %jl_value_t** %gcframe, i32 2
       store %jl_value_t* %28, %jl_value_t** %33
; ││││└
      %34 = call nonnull %jl_value_t* @j___subarray_throw_boundserror_2459(%jl_value_t* nonnull %28, [1 x [2 x i64]]* nocapture readonly %32, i64 %25, i64 %26, [1 x [1 x i64]]* nocapture readonly %2)
      call void @llvm.trap()
      unreachable

L76:                                              ; preds = %L40
; │└└└
; │ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1944 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1935 within `_pointer'
; ││┌ @ subarray.jl:419 within `pointer'
; │││┌ @ subarray.jl:362 within `first_index'
; ││││┌ @ int.jl:86 within `+'
       %35 = add nuw i64 %value_phi4, 2305843009213693951
; │││└└
; │││ @ subarray.jl:422 within `pointer'
; │││┌ @ int.jl:85 within `-'
      %36 = add i64 %35, %25
; │││└
; │││┌ @ int.jl:86 within `+'
      %37 = add i64 %36, %26
; │││└
; │││ @ subarray.jl:424 within `pointer' @ abstractarray.jl:999
; │││┌ @ pointer.jl:65 within `unsafe_convert'
      %38 = bitcast %jl_value_t* %28 to i8**
      %39 = load i8*, i8** %38, align 8
; │││└
; │││┌ @ int.jl:87 within `*'
      %40 = shl i64 %37, 3
      %41 = add i64 %40, -8
; │││└
; │││┌ @ pointer.jl:159 within `+'
      %42 = getelementptr i8, i8* %39, i64 %41
; │└└└
; │┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1426 within `vload' @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1426 @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1353 @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1353
; ││┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1383 within `macro expansion'
     %ptr.i = bitcast i8* %42 to <4 x double>*
     %res.i = load <4 x double>, <4 x double>* %ptr.i, align 8
; └└└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1083 within `+'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:602 within `llvmwrap' @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:602
; ││┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:623 within `macro expansion'
     %res.i15 = fadd <4 x double> %value_phi3, %res.i
; └└└
; ┌ @ range.jl:624 within `iterate'
; │┌ @ promotion.jl:398 within `=='
    %43 = icmp eq i64 %value_phi4, %20
; │└
   %44 = add nuw i64 %value_phi4, 4
; └
  br i1 %43, label %L113.loopexit, label %L40

L113.loopexit:                                    ; preds = %L76
; ┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1083 within `+'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:602 within `llvmwrap' @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:602
; ││┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:623 within `macro expansion'
     %res.i15.lcssa = phi <4 x double> [ %res.i15, %L76 ]
; └└└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1943 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1922 within `_preprocessindices'
    store i64 %20, i64* %22, align 8
; └└
;  @ /home/pkgeval/.julia/packages/SIMD/Am38N/test/runtests.jl:575 within `vsum'
; ┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1286 within `sum'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1240 within `llvmwrapreduce'
; ││┌ @ /home/pkgeval/.julia/packages/SIMD/Am38N/src/SIMD.jl:1274 within `macro expansion'
     br label %L113

L113:                                             ; preds = %L113.loopexit, %L14
     %value_phi11 = phi <4 x double> [ zeroinitializer, %L14 ], [ %res.i15.lcssa, %L113.loopexit ]
     %vec_2_1.i = shufflevector <4 x double> %value_phi11, <4 x double> undef, <2 x i32> <i32 0, i32 1>
     %vec_2_2.i = shufflevector <4 x double> %value_phi11, <4 x double> undef, <2 x i32> <i32 2, i32 3>
     %vec_2.i = fadd <2 x double> %vec_2_1.i, %vec_2_2.i
     %vec_1_1.i = shufflevector <2 x double> %vec_2.i, <2 x double> undef, <1 x i32> zeroinitializer
     %vec_1_2.i = shufflevector <2 x double> %vec_2.i, <2 x double> undef, <1 x i32> <i32 1>
     %vec_1.i = fadd <1 x double> %vec_1_1.i, %vec_1_2.i
     %res.i14 = extractelement <1 x double> %vec_1.i, i32 0
     %45 = getelementptr %jl_value_t*, %jl_value_t** %gcframe, i32 1
     %46 = load %jl_value_t*, %jl_value_t** %45
     %47 = getelementptr %jl_value_t**, %jl_value_t*** %ptls, i32 0
     %48 = bitcast %jl_value_t*** %47 to %jl_value_t**
     store %jl_value_t* %46, %jl_value_t** %48
; └└└
  ret double %res.i14

L117:                                             ; preds = %top
;  @ /home/pkgeval/.julia/packages/SIMD/Am38N/test/runtests.jl:569 within `vsum'
  %49 = bitcast %jl_value_t*** %ptls to i8*
  %50 = call noalias nonnull %jl_value_t* @jl_gc_pool_alloc(i8* %49, i32 1400, i32 16) #1
  %51 = bitcast %jl_value_t* %50 to %jl_value_t**
  %52 = getelementptr %jl_value_t*, %jl_value_t** %51, i64 -1
  store %jl_value_t* inttoptr (i64 139942191406576 to %jl_value_t*), %jl_value_t** %52
  %53 = bitcast %jl_value_t* %50 to %jl_value_t**
  store %jl_value_t* inttoptr (i64 139941550914000 to %jl_value_t*), %jl_value_t** %53, align 8
  %54 = getelementptr %jl_value_t*, %jl_value_t** %gcframe, i32 2
  store %jl_value_t* %50, %jl_value_t** %54
  call void @jl_throw(%jl_value_t* %50)
  unreachable
}
	.text
; ┌ @ runtests.jl:568 within `vsum'
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	vxorpd	%xmm0, %xmm0, %xmm0
	vmovapd	%xmm0, 16(%rsp)
	movq	$0, 32(%rsp)
	movq	%fs:0, %rax
; │ @ runtests.jl:569 within `vsum'
; │┌ @ abstractarray.jl:206 within `length'
; ││┌ @ subarray.jl:71 within `size'
; │││┌ @ subarray.jl:430 within `axes'
; ││││┌ @ subarray.jl:435 within `_indices_sub'
; │││││┌ @ abstractarray.jl:99 within `unsafe_indices'
; ││││││┌ @ range.jl:543 within `unsafe_length'
; │││││││┌ @ range.jl:597 within `last'
; ││││││││┌ @ Base.jl:33 within `getproperty'
	movq	$4, 16(%rsp)
	movq	-15720(%rax), %rcx
	movq	%rcx, 24(%rsp)
	leaq	16(%rsp), %rcx
	movq	%rcx, -15720(%rax)
	leaq	-15720(%rax), %r14
; │││││││└└
; │││││││┌ @ int.jl:85 within `-'
	movq	16(%rdi), %rax
	subq	8(%rdi), %rax
; │││││││└
; │││││││┌ @ int.jl:86 within `+'
	incq	%rax
; ││││││└└
; ││││││┌ @ range.jl:326 within `OneTo' @ range.jl:317
; │││││││┌ @ promotion.jl:409 within `max'
	movq	%rax, %rcx
	sarq	$63, %rcx
	andnq	%rax, %rcx, %r12
; │└└└└└└└
; │┌ @ promotion.jl:398 within `=='
	testb	$3, %r12b
; │└
	jne	L329
	movq	%rdi, %r15
; │ @ runtests.jl:572 within `vsum'
; │┌ @ range.jl:22 within `Colon'
; ││┌ @ range.jl:24 within `_colon'
; │││┌ @ range.jl:256 within `StepRange' @ range.jl:205
	movabsq	$steprange_last, %rax
	movl	$4, %ebx
	movl	$1, %edi
	movl	$4, %esi
	movq	%r12, %rdx
	callq	*%rax
; │└└└
; │┌ @ range.jl:620 within `iterate'
; ││┌ @ range.jl:501 within `isempty'
; │││┌ @ bool.jl:40 within `&'
	testq	%rax, %rax
; │└└└
	jle	L243
; │ @ runtests.jl:573 within `vsum'
; │┌ @ SIMD.jl:1944 within `getindex'
; ││┌ @ SIMD.jl:1935 within `_pointer'
; │││┌ @ subarray.jl:424 within `pointer'
; ││││┌ @ Base.jl within `getproperty'
	movq	(%r15), %rdi
	movq	24(%r15), %rdx
	movq	32(%r15), %rcx
; ││└└└
; ││ @ SIMD.jl:1943 within `getindex'
; ││┌ @ SIMD.jl:1922 within `_preprocessindices'
; │││┌ @ abstractarray.jl:502 within `checkbounds' @ abstractarray.jl:487
; ││││┌ @ SIMD.jl:1871 within `checkindex'
	leaq	(,%rcx,8), %rsi
	leaq	(%rsi,%rdx,8), %r8
	addq	$-8, %r8
	movq	$-3, %r9
	subq	%rax, %r9
	vxorpd	%xmm0, %xmm0, %xmm0
	nop
; │││││┌ @ int.jl:441 within `<='
L192:
	leaq	-3(%rbx), %rsi
	testq	%rsi, %rsi
; │││││└
	jle	L290
	cmpq	%r12, %rbx
	jg	L290
; ││└└└
	movq	(%rdi), %rsi
; ││ @ SIMD.jl:1944 within `getindex'
; ││┌ @ SIMD.jl:1426 within `vload' @ SIMD.jl:1426 @ SIMD.jl:1353 @ SIMD.jl:1353
; │││┌ @ SIMD.jl:1383 within `macro expansion'
	addq	%r8, %rsi
; │└└└
; │┌ @ SIMD.jl:1083 within `+'
; ││┌ @ SIMD.jl:602 within `llvmwrap' @ SIMD.jl:602
; │││┌ @ SIMD.jl:623 within `macro expansion'
	vaddpd	-32(%rsi,%rbx,8), %ymm0, %ymm0
; │└└└
; │┌ @ range.jl:624 within `iterate'
; ││┌ @ promotion.jl:398 within `=='
	leaq	(%r9,%rbx), %rsi
	addq	$4, %rsi
	addq	$4, %rbx
	cmpq	$4, %rsi
; │└└
	jne	L192
; │┌ @ SIMD.jl:1943 within `getindex'
; ││┌ @ SIMD.jl:1922 within `_preprocessindices'
	movq	%rax, 8(%rsp)
	jmp	L247
; └└└
; ┌ @ SIMD.jl within `vsum'
L243:
	vxorpd	%xmm0, %xmm0, %xmm0
; └
; ┌ @ runtests.jl:575 within `vsum'
; │┌ @ SIMD.jl:1286 within `sum'
; ││┌ @ SIMD.jl:1240 within `llvmwrapreduce'
; │││┌ @ SIMD.jl:1274 within `macro expansion'
L247:
	vextractf128	$1, %ymm0, %xmm1
	vaddpd	%xmm1, %xmm0, %xmm0
	vpermilpd	$1, %xmm0, %xmm1 # xmm1 = xmm0[1,0]
	vaddsd	%xmm1, %xmm0, %xmm0
	movq	24(%rsp), %rax
	movq	%rax, (%r14)
; │└└└
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	vzeroupper
	retq
; │ @ runtests.jl:573 within `vsum'
; │┌ @ SIMD.jl:1943 within `getindex'
; ││┌ @ SIMD.jl:1922 within `_preprocessindices'
L290:
	movq	%rsi, 8(%rsp)
; │││┌ @ abstractarray.jl:502 within `checkbounds'
; ││││┌ @ subarray.jl:49 within `throw_boundserror'
; │││││┌ @ Base.jl:33 within `getproperty'
	addq	$8, %r15
	movq	%rdi, 32(%rsp)
; │││││└
	movabsq	$__subarray_throw_boundserror, %rax
	leaq	8(%rsp), %r8
	movq	%r15, %rsi
	vzeroupper
	callq	*%rax
	ud2
; │└└└└
; │ @ runtests.jl:569 within `vsum'
L329:
	movabsq	$jl_gc_pool_alloc, %rax
	movq	%r14, %rdi
	movl	$1400, %esi             # imm = 0x578
	movl	$16, %edx
	callq	*%rax
	movabsq	$jl_system_image_data, %rcx
	movq	%rcx, -8(%rax)
	movabsq	$139941550914000, %rcx  # imm = 0x7F46AE6E79D0
	movq	%rcx, (%rax)
	movq	%rax, 32(%rsp)
	movabsq	$jl_throw, %rcx
	movq	%rax, %rdi
	callq	*%rcx
	nopw	%cs:(%rax,%rax)
	nopl	(%rax,%rax)
; └
Test Summary: | Pass  Total
SIMD          |  817    817
    Testing SIMD tests passed 
