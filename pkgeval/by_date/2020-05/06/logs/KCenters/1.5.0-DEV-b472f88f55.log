Julia Version 1.5.0-DEV.862
Commit b472f88f55 (2020-05-06 01:04 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed MappedArrays ──────────────── v0.2.2
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Compat ────────────────────── v3.9.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.3
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed DataStructures ────────────── v0.17.15
  Installed DataFrames ────────────────── v0.20.2
  Installed DataAPI ───────────────────── v1.3.0
  Installed Tables ────────────────────── v1.0.4
  Installed PooledArrays ──────────────── v0.5.3
  Installed OrderedCollections ────────── v1.2.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLDataUtils ───────────────── v0.5.1
  Installed JSON ──────────────────────── v0.21.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed SimilaritySearch ──────────── v0.3.19
  Installed InvertedIndices ───────────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed TableTraits ───────────────── v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Missings ──────────────────── v0.4.3
  Installed Reexport ──────────────────── v0.2.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLDataPattern ─────────────── v0.5.3
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.9.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.15
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.3
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_GQGG5Z/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_GQGG5Z/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.9.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.3
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9323044313987097
[ Info: 0.8321307849884033
[ Info: 0.5531853482623895
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3226904027412335
mean(cdnet.distances) = 0.42002737807730833
mean(crand.distances) = 0.377546246945858
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3798828125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3798828125,"f1":null,"seconds":2.8517097234725952e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.4765625,"distances_sum":1132.897524730796}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8530750499500508,"seconds":5.956739187240601e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.5625,"distances_sum":2407.8380319613048}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7578125,"f1":0.8530750499500508,"seconds":5.956739187240601e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.5625,"distances_sum":2407.8380319613048}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9320028929403935,"seconds":6.122514605522156e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.84375,"distances_sum":2985.045225749758}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8611846486846495,"seconds":5.923211574554443e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.625,"distances_sum":2457.199483722274}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8818359375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8818359375,"f1":0.9320028929403935,"seconds":6.122514605522156e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.84375,"distances_sum":2985.045225749758}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9430548618048624,"seconds":6.010755896568298e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8203125,"distances_sum":3129.482595064058}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9761160714285718,"seconds":6.34416937828064e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9453125,"distances_sum":3388.989738537325}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9761160714285718,"seconds":6.34416937828064e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9453125,"distances_sum":3388.989738537325}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9761160714285718,"seconds":6.34416937828064e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9453125,"distances_sum":3388.989738537325}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7109375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.7109375,"f1":0.8221648143523154,"seconds":4.995614290237427e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.90625,"distances_sum":2029.2229182152969}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2294921875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2294921875,"f1":null,"seconds":3.550201654434204e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.484375,"distances_sum":629.6416382848593}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7109375,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.7109375,"f1":0.8221648143523154,"seconds":4.995614290237427e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.90625,"distances_sum":2029.2229182152969}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9384901556776563,"seconds":5.8300793170928955e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.6953125,"distances_sum":2857.539696007543}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.95779532967033,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8671875,"distances_sum":3045.188068208856}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.95779532967033,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8671875,"distances_sum":3045.188068208856}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9758012820512825,"seconds":4.589557647705078e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9375,"distances_sum":3185.6061678329784}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.9825148809523812,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.953125,"distances_sum":3267.552892675643}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9677734375,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9825148809523812,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.953125,"distances_sum":3267.552892675643}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9677734375,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9825148809523812,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.953125,"distances_sum":3267.552892675643}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7909482878232887,"seconds":4.6622008085250854e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":7.609375,"distances_sum":1935.4591379829478}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.673828125,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.673828125,"f1":0.7909482878232887,"seconds":4.6622008085250854e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":7.609375,"distances_sum":1935.4591379829478}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8969525266400276,"seconds":5.33275306224823e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.1640625,"distances_sum":2560.5325014129594}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8251953125,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.8251953125,"f1":0.8969525266400276,"seconds":5.33275306224823e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.1640625,"distances_sum":2560.5325014129594}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9610519688644694,"seconds":5.947425961494446e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.7890625,"distances_sum":3127.36703686956}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.945072115384616,"seconds":5.345791578292847e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.53125,"distances_sum":2964.1165392753983}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9610519688644694,"seconds":5.947425961494446e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.7890625,"distances_sum":3127.36703686956}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9296875,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9610519688644694,"seconds":5.947425961494446e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.7890625,"distances_sum":3127.36703686956}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.208984375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.208984375,"f1":null,"seconds":3.67872416973114e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":5.6796875,"distances_sum":632.7349454560897}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.208984375,"state":{"ssize":4,"bsize":1},"perf":{"precision":null,"recall":0.208984375,"f1":null,"seconds":3.67872416973114e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":5.6796875,"distances_sum":632.7349454560897}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.208984375,"state":{"ssize":4,"bsize":1},"perf":{"precision":null,"recall":0.208984375,"f1":null,"seconds":3.67872416973114e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":5.6796875,"distances_sum":632.7349454560897}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8421656468531478,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":7.9765625,"distances_sum":2055.3049379820345}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7236328125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7236328125,"f1":0.8244760447885455,"seconds":5.159527063369751e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":7.7890625,"distances_sum":2043.2907299317462}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.744140625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.744140625,"f1":0.8421656468531478,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":7.9765625,"distances_sum":2055.3049379820345}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9616300366300371,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.859375,"distances_sum":2858.931069416969}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9616300366300371,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.859375,"distances_sum":2858.931069416969}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":2,"bsize":13}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.972453067765568,"seconds":6.474554538726807e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.890625,"distances_sum":2944.028403299858}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":2,"bsize":13},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.972453067765568,"seconds":6.474554538726807e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.890625,"distances_sum":2944.028403299858}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":2,"bsize":13},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.972453067765568,"seconds":6.474554538726807e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.890625,"distances_sum":2944.028403299858}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.669921875,"f1":0.7897458444333452,"seconds":5.187466740608215e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.859375,"distances_sum":1620.1578522685563}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4072265625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4072265625,"f1":null,"seconds":4.058703780174255e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":6.578125,"distances_sum":954.3617815209192}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7041015625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.7041015625,"f1":0.8136587370962379,"seconds":4.902482032775879e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.0390625,"distances_sum":1754.37870432625}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7041015625,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.7041015625,"f1":0.8136587370962379,"seconds":4.902482032775879e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.0390625,"distances_sum":1754.37870432625}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9445226648351653,"seconds":5.943700671195984e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.859375,"distances_sum":2529.79175701917}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9055465367965377,"seconds":5.150213837623596e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.5390625,"distances_sum":2218.0381614511857}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9576350732600736,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9296875,"distances_sum":2617.5937850916816}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9390567765567773,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8515625,"distances_sum":2480.3474440788323}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9576350732600736,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9296875,"distances_sum":2617.5937850916816}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.96229967948718,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.953125,"distances_sum":2652.3448563784095}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9677114552114554,"seconds":6.198883056640625e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9609375,"distances_sum":2692.6228596954406}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9659283424908429,"seconds":5.593523383140564e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.953125,"distances_sum":2668.597637621185}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9677114552114554,"seconds":6.198883056640625e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9609375,"distances_sum":2692.6228596954406}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9677114552114554,"seconds":6.198883056640625e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9609375,"distances_sum":2692.6228596954406}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2021484375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2021484375,"f1":null,"seconds":3.073364496231079e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":4.5703125,"distances_sum":487.5337422388323}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.349609375, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.349609375,"f1":null,"seconds":3.3266842365264893e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":4.859375,"distances_sum":826.438957504785}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.349609375,"state":{"ssize":5,"bsize":2},"perf":{"precision":null,"recall":0.349609375,"f1":null,"seconds":3.3266842365264893e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":4.859375,"distances_sum":826.438957504785}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6357421875, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6357421875,"f1":0.7665943431568439,"seconds":4.556030035018921e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.25,"distances_sum":1517.325886411506}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7294921875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7294921875,"f1":0.8328066031191037,"seconds":5.2247196435928345e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.96875,"distances_sum":1813.460273316571}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7294921875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7294921875,"f1":0.8328066031191037,"seconds":5.2247196435928345e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.96875,"distances_sum":1813.460273316571}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9601247710622716,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8046875,"distances_sum":2581.528467340169}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9486893315018319,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.7734375,"distances_sum":2476.0254307730534}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9164033882783886,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.640625,"distances_sum":2302.3058985586786}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8474629537129545,"seconds":4.949048161506653e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.0625,"distances_sum":1857.8160883442986}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9601247710622716,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8046875,"distances_sum":2581.528467340169}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9601247710622716,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8046875,"distances_sum":2581.528467340169}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7813322094572103,"seconds":4.988163709640503e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.421875,"distances_sum":1606.1832626552025}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6572265625,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6572265625,"f1":0.7813322094572103,"seconds":4.988163709640503e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.421875,"distances_sum":1606.1832626552025}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9277873168498173,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.5625,"distances_sum":2400.1980838202567}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8759765625,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8759765625,"f1":0.9277873168498173,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.5625,"distances_sum":2400.1980838202567}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9443395146520154,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.6953125,"distances_sum":2506.269357489907}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9443395146520154,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.6953125,"distances_sum":2506.269357489907}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.904296875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9443395146520154,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.6953125,"distances_sum":2506.269357489907}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.22265625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.22265625,"f1":null,"seconds":3.376975655555725e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":6.3125,"distances_sum":432.0800026247753}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2333984375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2333984375,"f1":null,"seconds":3.373250365257263e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":6.4765625,"distances_sum":446.97946891370026}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2333984375,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.2333984375,"f1":null,"seconds":3.373250365257263e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":6.4765625,"distances_sum":446.97946891370026}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.51171875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.51171875,"f1":0.6644159659784665,"seconds":4.157423973083496e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":7.34375,"distances_sum":1053.8424599621949}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5263671875, conf: {"ssize":8,"bsize":3}, perf: {"precision":1.0,"recall":0.5263671875,"f1":0.676597187534688,"seconds":4.317611455917358e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":7.3984375,"distances_sum":1116.4179188003432}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.7958916083916093,"seconds":5.153939127922058e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":8.640625,"distances_sum":1556.948675805094}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6787109375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6787109375,"f1":0.7958916083916093,"seconds":5.153939127922058e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":8.640625,"distances_sum":1556.948675805094}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.685546875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.685546875,"f1":0.8006496975246985,"seconds":5.101785063743591e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":8.5625,"distances_sum":1537.7845352998663}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.685546875,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.685546875,"f1":0.8006496975246985,"seconds":5.101785063743591e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":8.5625,"distances_sum":1537.7845352998663}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.685546875,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.685546875,"f1":0.8006496975246985,"seconds":5.101785063743591e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":8.5625,"distances_sum":1537.7845352998663}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8533227189477197,"seconds":5.258247256278992e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.3046875,"distances_sum":1966.4635812346462}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.851935044122545,"seconds":5.0533562898635864e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.40625,"distances_sum":1922.791976682984}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7548828125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.8533227189477197,"seconds":5.258247256278992e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.3046875,"distances_sum":1966.4635812346462}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8911437520812526,"seconds":5.168840289115906e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.59375,"distances_sum":2211.4692291328247}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9633413461538465,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8515625,"distances_sum":2660.595868400832}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9633413461538465,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8515625,"distances_sum":2660.595868400832}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":7,"bsize":13}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.9820512820512822,"seconds":6.159767508506775e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.96875,"distances_sum":2768.6314865976815}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9677734375,"state":{"ssize":7,"bsize":13},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9820512820512822,"seconds":6.159767508506775e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.96875,"distances_sum":2768.6314865976815}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9677734375,"state":{"ssize":7,"bsize":13},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9820512820512822,"seconds":6.159767508506775e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.96875,"distances_sum":2768.6314865976815}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3955078125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3955078125,"f1":null,"seconds":3.7383288145065308e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":6.0546875,"distances_sum":904.4047160251682}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1962890625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1962890625,"f1":null,"seconds":3.073364496231079e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":5.1015625,"distances_sum":440.57269726877803}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1640625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1640625,"f1":null,"seconds":3.084540367126465e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":4.734375,"distances_sum":405.09594470470796}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3955078125,"state":{"ssize":2,"bsize":2},"perf":{"precision":null,"recall":0.3955078125,"f1":null,"seconds":3.7383288145065308e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":6.0546875,"distances_sum":904.4047160251682}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.55078125, conf: {"ssize":8,"bsize":3}, perf: {"precision":1.0,"recall":0.55078125,"f1":0.6972369644244649,"seconds":4.539266228675842e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.53125,"distances_sum":1244.8933980702436}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5458984375, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.5458984375,"f1":null,"seconds":4.481524229049683e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.40625,"distances_sum":1264.3663909511697}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.55078125,"state":{"ssize":8,"bsize":3},"perf":{"precision":1.0,"recall":0.55078125,"f1":0.6972369644244649,"seconds":4.539266228675842e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.53125,"distances_sum":1244.8933980702436}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7353515625, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.7353515625,"f1":0.8386400058275065,"seconds":5.02169132232666e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.2265625,"distances_sum":1790.4873047219196}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5595703125, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.5595703125,"f1":0.7019721597846604,"seconds":4.388391971588135e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.5,"distances_sum":1249.2073661377665}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.646484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.646484375,"f1":0.773850975413476,"seconds":4.727393388748169e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.765625,"distances_sum":1512.1809113371007}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9267799908424914,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8125,"distances_sum":2283.268058711499}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.873046875,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.873046875,"f1":0.9267799908424914,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8125,"distances_sum":2283.268058711499}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.873046875,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.873046875,"f1":0.9267799908424914,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8125,"distances_sum":2283.268058711499}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.537109375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.537109375,"f1":0.6813094891219897,"seconds":4.079192876815796e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.5234375,"distances_sum":1206.4970685478222}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8619885323010332,"seconds":5.153939127922058e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7421875,"distances_sum":1850.5942211520403}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7705078125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7705078125,"f1":0.8619885323010332,"seconds":5.153939127922058e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7421875,"distances_sum":1850.5942211520403}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9301854395604405,"seconds":5.7220458984375e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9140625,"distances_sum":2236.699642105898}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9381040834165842,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9140625,"distances_sum":2300.6358163252617}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9539122335997341,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.828125,"distances_sum":2449.6760546069827}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9539122335997341,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.828125,"distances_sum":2449.6760546069827}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9559008699633706,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9140625,"distances_sum":2446.1247790673833}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9707589285714291,"seconds":5.833804607391357e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9296875,"distances_sum":2538.7403551147804}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9697744963369964,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9609375,"distances_sum":2528.6657478073266}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9743303571428577,"seconds":6.087124347686768e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.984375,"distances_sum":2557.11404359259}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9743303571428577,"seconds":6.087124347686768e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.984375,"distances_sum":2557.11404359259}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9743303571428577,"seconds":6.087124347686768e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.984375,"distances_sum":2557.11404359259}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3857421875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3857421875,"f1":null,"seconds":3.680586814880371e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":5.7890625,"distances_sum":907.3076646695469}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5302734375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5302734375,"f1":0.6775096431346436,"seconds":3.9692968130111694e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.0078125,"distances_sum":1153.3132821768475}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5302734375,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.5302734375,"f1":0.6775096431346436,"seconds":3.9692968130111694e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.0078125,"distances_sum":1153.3132821768475}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.814453125,"f1":0.8886774683649692,"seconds":5.081295967102051e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.5703125,"distances_sum":2051.2174903700475}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8514142107892118,"seconds":5.042180418968201e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.28125,"distances_sum":1849.7555752564167}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8955102189477198,"seconds":5.474314093589783e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.5859375,"distances_sum":2130.784139367216}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5849609375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5849609375,"f1":0.7222315878565886,"seconds":4.246830940246582e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.5078125,"distances_sum":1361.688177140502}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5361328125, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.5361328125,"f1":null,"seconds":4.308298230171204e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":6.984375,"distances_sum":1183.830434801798}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8251953125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8251953125,"f1":0.8955102189477198,"seconds":5.474314093589783e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.5859375,"distances_sum":2130.784139367216}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9709649725274729,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.9453125,"distances_sum":2624.8073140744073}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9678972069597072,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8984375,"distances_sum":2623.9671419728347}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9356456043956051,"seconds":5.461275577545166e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.890625,"distances_sum":2342.825949030416}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9481112637362641,"seconds":5.608424544334412e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8671875,"distances_sum":2473.012492073208}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9173737720612727,"seconds":5.617737770080566e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.7578125,"distances_sum":2275.7130916533006}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9682864010989016,"seconds":5.9604644775390625e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.90625,"distances_sum":2609.117949117315}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9457506035631044,"seconds":5.841255187988281e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.84375,"distances_sum":2452.705521219708}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9237866300366306,"seconds":6.07222318649292e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.84375,"distances_sum":2282.2933568849594}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9709649725274729,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.9453125,"distances_sum":2624.8073140744073}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9709649725274729,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.9453125,"distances_sum":2624.8073140744073}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5576171875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5576171875,"f1":0.702695221445222,"seconds":4.235655069351196e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":7.296875,"distances_sum":1112.6500488608995}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.568359375,"f1":0.7116733960483965,"seconds":3.980472683906555e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":7.3359375,"distances_sum":1146.6900408107683}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.568359375,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.568359375,"f1":0.7116733960483965,"seconds":3.980472683906555e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":7.3359375,"distances_sum":1146.6900408107683}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7980155261405268,"seconds":4.557892680168152e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":7.6484375,"distances_sum":1469.1411349010773}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9125010406260415,"seconds":5.580484867095947e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.484375,"distances_sum":2112.5993086051276}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8619599150849161,"seconds":5.323439836502075e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.15625,"distances_sum":1786.8400388167088}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9023809523809531,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.390625,"distances_sum":2038.716157203468}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8943488802863812,"seconds":5.29363751411438e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.28125,"distances_sum":2029.9064982489108}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8525390625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8525390625,"f1":0.9125010406260415,"seconds":5.580484867095947e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.484375,"distances_sum":2112.5993086051276}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9622653388278393,"seconds":5.908310413360596e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.9140625,"distances_sum":2395.6155267738027}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9727678571428573,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.8984375,"distances_sum":2487.6517162450536}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9633814102564107,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.84375,"distances_sum":2432.6537745600367}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9526842948717954,"seconds":5.600973963737488e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.78125,"distances_sum":2354.5450338292853}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9727678571428573,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.8984375,"distances_sum":2487.6517162450536}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9727678571428573,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.8984375,"distances_sum":2487.6517162450536}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.8042395104895114,"seconds":4.816800355911255e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.03125,"distances_sum":1537.5632846518579}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3447265625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3447265625,"f1":null,"seconds":3.689900040626526e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":5.6796875,"distances_sum":768.2170623692588}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8593245296370307,"seconds":5.230307579040527e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.34375,"distances_sum":1795.33815213063}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.8593245296370307,"seconds":5.230307579040527e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.34375,"distances_sum":1795.33815213063}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9624484890109894,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.7890625,"distances_sum":2515.9790977880334}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9569997710622717,"seconds":5.7425349950790405e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.859375,"distances_sum":2456.0689839959437}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9383470695970699,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.6796875,"distances_sum":2315.820451663586}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9028190559440566,"seconds":5.383044481277466e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.609375,"distances_sum":2062.739916254147}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.939191537629038,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.703125,"distances_sum":2352.418181577847}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9624484890109894,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.7890625,"distances_sum":2515.9790977880334}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9650125915750922,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.875,"distances_sum":2503.788238983996}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9749084249084254,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.8828125,"distances_sum":2597.0812677911695}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9658203125, conf: {"ssize":7,"bsize":13}, perf: {"precision":1.0,"recall":0.9658203125,"f1":0.9812328296703299,"seconds":6.211921572685242e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.9375,"distances_sum":2629.5326140321554}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9707989926739928,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.890625,"distances_sum":2569.5093179692494}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9658203125,"state":{"ssize":7,"bsize":13},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9812328296703299,"seconds":6.211921572685242e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.9375,"distances_sum":2629.5326140321554}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9658203125,"state":{"ssize":7,"bsize":13},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9812328296703299,"seconds":6.211921572685242e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.9375,"distances_sum":2629.5326140321554}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8754011613386623,"seconds":5.071982741355896e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.1640625,"distances_sum":1885.059808707253}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.546875,"f1":0.6890885156510164,"seconds":4.246830940246582e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.5390625,"distances_sum":1139.1680440100622}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7880859375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7880859375,"f1":0.8754011613386623,"seconds":5.071982741355896e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.1640625,"distances_sum":1885.059808707253}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9359291749916757,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.5546875,"distances_sum":2311.320140037811}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9110321969696977,"seconds":5.234032869338989e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.4296875,"distances_sum":2105.9246167960505}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.890625,"f1":0.9359291749916757,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.5546875,"distances_sum":2311.320140037811}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9684752747252752,"seconds":5.545094609260559e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8828125,"distances_sum":2514.3509386049886}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9466632326007333,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.75,"distances_sum":2355.575314656251}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9725103021978025,"seconds":5.792826414108276e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.890625,"distances_sum":2546.459418532569}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9459280303030311,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.6796875,"distances_sum":2372.3949820273892}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9598443223443227,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8046875,"distances_sum":2472.8354786019568}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.957314560439561,"seconds":5.576759576797485e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8125,"distances_sum":2432.216283397022}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9725103021978025,"seconds":5.792826414108276e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.890625,"distances_sum":2546.459418532569}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9725103021978025,"seconds":5.792826414108276e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.890625,"distances_sum":2546.459418532569}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2353515625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2353515625,"f1":null,"seconds":3.598630428314209e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":6.203125,"distances_sum":531.0975025490178}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2353515625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2353515625,"f1":null,"seconds":3.598630428314209e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":6.203125,"distances_sum":531.0975025490178}}, n: 9
mean(cfft.distances) = 0.5652110828778526
mean(cdnet.distances) = 0.3623017296944118
mean(crand.distances) = 0.5024292506228866
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8911111111111111
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9044444444444445
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8777777777777778
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9066666666666666
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9088888888888889
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9400000000000001
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.82
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.88
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8377777777777777
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9311111111111111
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9222222222222222
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8955555555555555
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9333333333333332
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.931111111111111
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8622222222222221
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8688888888888888
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8866666666666667
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8355555555555555
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8733333333333334
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9422222222222222
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8466666666666667
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9133333333333334
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9177777777777778
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9133333333333334
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.96
*** finished computation of 12 references, err: [Inf, 0.5769514739513397] ***
*** center 1: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 17]]
** centroid: 8, normalized-entropy: 0.7024665512903904, [(2, 4), (3, 17)]
*** center 9: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 15 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.37551407593752706] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37551407593752706, 0.2469873861612489] ***
*** finished computation of 3 references, err: [Inf, 0.37551407593752706, 0.2469873861612489] ***
*** center 1: selecting labels [1] (freq >= 2) [from [213, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [170, 7, 0]]
** centroid: 2, normalized-entropy: 0.24021603823094942, [(1, 170), (2, 7)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [7, 244, 25]]
** centroid: 3, normalized-entropy: 0.381998134941076, [(1, 7), (2, 244), (3, 25)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3218608732099642] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3218608732099642, 0.24123427203514505] ***
*** starting iteration: 2; err: [Inf, 0.3218608732099642, 0.24123427203514505] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3218608732099642, 0.24123427203514505, 0.23578483261190378] ***
*** starting iteration: 3; err: [Inf, 0.3218608732099642, 0.24123427203514505, 0.23578483261190378] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3218608732099642, 0.24123427203514505, 0.23578483261190378, 0.234275950289502] ***
*** starting iteration: 4; err: [Inf, 0.3218608732099642, 0.24123427203514505, 0.23578483261190378, 0.234275950289502] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3218608732099642, 0.24123427203514505, 0.23578483261190378, 0.234275950289502, 0.23381809219326433] ***
*** finished computation of 3 references, err: [Inf, 0.3218608732099642, 0.24123427203514505, 0.23578483261190378, 0.234275950289502, 0.23381809219326433] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [227, 32, 0]]
** centroid: 1, normalized-entropy: 0.539485868323474, [(1, 227), (2, 32)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [163, 38, 0]]
** centroid: 2, normalized-entropy: 0.6994898272459839, [(1, 163), (2, 38)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 181, 25]]
** centroid: 3, normalized-entropy: 0.5332553315209451, [(2, 181), (3, 25)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4230478678884423] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4230478678884423, 0.27802742614286546] ***
*** finished computation of 3 references, err: [Inf, 0.4230478678884423, 0.27802742614286546] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [82, 5, 0]]
** centroid: 1, normalized-entropy: 0.3173238998358585, [(1, 82), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [297, 65, 0]]
** centroid: 2, normalized-entropy: 0.6791091834238767, [(1, 297), (2, 65)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [28, 167, 23]]
** centroid: 3, normalized-entropy: 0.6417473137923736, [(1, 28), (2, 167), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3637994628502936] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3637994628502936, 0.2523786211972763] ***
*** finished computation of 3 references, err: [Inf, 0.3637994628502936, 0.2523786211972763] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [190, 3, 0]]
** centroid: 1, normalized-entropy: 0.11563085548029003, [(1, 190), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [88, 44, 0]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(1, 88), (2, 44)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [123, 195, 24]]
** centroid: 3, normalized-entropy: 0.7960558118973946, [(1, 123), (2, 195), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.35322280690029284] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35322280690029284, 0.23917644679395558] ***
*** starting iteration: 2; err: [Inf, 0.35322280690029284, 0.23917644679395558] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35322280690029284, 0.23917644679395558, 0.23715457130597717] ***
*** starting iteration: 3; err: [Inf, 0.35322280690029284, 0.23917644679395558, 0.23715457130597717] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35322280690029284, 0.23917644679395558, 0.23715457130597717, 0.23671297607398864] ***
*** finished computation of 3 references, err: [Inf, 0.35322280690029284, 0.23917644679395558, 0.23715457130597717, 0.23671297607398864] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [251, 23, 0]]
** centroid: 1, normalized-entropy: 0.4159176412417125, [(1, 251), (2, 23)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 165, 23]]
** centroid: 2, normalized-entropy: 0.536051137103856, [(2, 165), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [156, 49, 0]]
** centroid: 3, normalized-entropy: 0.7934141068022463, [(1, 156), (2, 49)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3415629224254117] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3415629224254117, 0.23907945679592854] ***
*** starting iteration: 2; err: [Inf, 0.3415629224254117, 0.23907945679592854] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3415629224254117, 0.23907945679592854, 0.23416954239361223] ***
*** starting iteration: 3; err: [Inf, 0.3415629224254117, 0.23907945679592854, 0.23416954239361223] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3415629224254117, 0.23907945679592854, 0.23416954239361223, 0.23258104418928705] ***
*** starting iteration: 4; err: [Inf, 0.3415629224254117, 0.23907945679592854, 0.23416954239361223, 0.23258104418928705] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3415629224254117, 0.23907945679592854, 0.23416954239361223, 0.23258104418928705, 0.23204310326466987] ***
*** finished computation of 3 references, err: [Inf, 0.3415629224254117, 0.23907945679592854, 0.23416954239361223, 0.23258104418928705, 0.23204310326466987] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [214, 26, 0]]
** centroid: 1, normalized-entropy: 0.4948682299355441, [(1, 214), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [187, 22, 0]]
** centroid: 2, normalized-entropy: 0.48546076074591343, [(1, 187), (2, 22)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 194, 24]]
** centroid: 3, normalized-entropy: 0.5001926210998139, [(2, 194), (3, 24)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.41575626582019143] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41575626582019143, 0.29741137818217994] ***
*** starting iteration: 2; err: [Inf, 0.41575626582019143, 0.29741137818217994] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41575626582019143, 0.29741137818217994, 0.2951733743682414] ***
*** starting iteration: 3; err: [Inf, 0.41575626582019143, 0.29741137818217994, 0.2951733743682414] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41575626582019143, 0.29741137818217994, 0.2951733743682414, 0.29479501254341983] ***
*** finished computation of 3 references, err: [Inf, 0.41575626582019143, 0.29741137818217994, 0.2951733743682414, 0.29479501254341983] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [239, 13, 0]]
** centroid: 1, normalized-entropy: 0.2931018145981979, [(1, 239), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [151, 57, 0]]
** centroid: 2, normalized-entropy: 0.8472000717686057, [(1, 151), (2, 57)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 181, 25]]
** centroid: 3, normalized-entropy: 0.5332553315209451, [(2, 181), (3, 25)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39373099588617305] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39373099588617305, 0.31275878436975124] ***
*** starting iteration: 2; err: [Inf, 0.39373099588617305, 0.31275878436975124] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39373099588617305, 0.31275878436975124, 0.30373190038151915] ***
*** starting iteration: 3; err: [Inf, 0.39373099588617305, 0.31275878436975124, 0.30373190038151915] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39373099588617305, 0.31275878436975124, 0.30373190038151915, 0.30080919797257194] ***
*** starting iteration: 4; err: [Inf, 0.39373099588617305, 0.31275878436975124, 0.30373190038151915, 0.30080919797257194] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39373099588617305, 0.31275878436975124, 0.30373190038151915, 0.30080919797257194, 0.2995364753629962] ***
*** starting iteration: 5; err: [Inf, 0.39373099588617305, 0.31275878436975124, 0.30373190038151915, 0.30080919797257194, 0.2995364753629962] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39373099588617305, 0.31275878436975124, 0.30373190038151915, 0.30080919797257194, 0.2995364753629962, 0.29896911373012874] ***
*** finished computation of 3 references, err: [Inf, 0.39373099588617305, 0.31275878436975124, 0.30373190038151915, 0.30080919797257194, 0.2995364753629962, 0.29896911373012874] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [231, 20, 0]]
** centroid: 1, normalized-entropy: 0.4010551457242519, [(1, 231), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [176, 42, 0]]
** centroid: 2, normalized-entropy: 0.70700406497476, [(1, 176), (2, 42)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 175, 23]]
** centroid: 3, normalized-entropy: 0.5182259657363326, [(2, 175), (3, 23)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3697200467784902] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3697200467784902, 0.30733120349840426] ***
*** starting iteration: 2; err: [Inf, 0.3697200467784902, 0.30733120349840426] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3697200467784902, 0.30733120349840426, 0.3024803671030805] ***
*** starting iteration: 3; err: [Inf, 0.3697200467784902, 0.30733120349840426, 0.3024803671030805] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3697200467784902, 0.30733120349840426, 0.3024803671030805, 0.3017005104057748] ***
*** finished computation of 3 references, err: [Inf, 0.3697200467784902, 0.30733120349840426, 0.3024803671030805, 0.3017005104057748] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [79, 156, 24]]
** centroid: 1, normalized-entropy: 0.808254683184909, [(1, 79), (2, 156), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [194, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [128, 86, 0]]
** centroid: 3, normalized-entropy: 0.9720334868479672, [(1, 128), (2, 86)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31449084690360873] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31449084690360873, 0.296852803868787] ***
*** finished computation of 3 references, err: [Inf, 0.31449084690360873, 0.296852803868787] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [200, 17, 0]]
** centroid: 1, normalized-entropy: 0.39630650315323174, [(1, 200), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [190, 71, 0]]
** centroid: 2, normalized-entropy: 0.8443634254292237, [(1, 190), (2, 71)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 163, 25]]
** centroid: 3, normalized-entropy: 0.5655511182519258, [(2, 163), (3, 25)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3835221456651432] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3835221456651432, 0.30270908207449687] ***
*** finished computation of 3 references, err: [Inf, 0.3835221456651432, 0.30270908207449687] ***
*** center 1: selecting labels [1] (freq >= 1) [from [196, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [165, 60, 0]]
** centroid: 2, normalized-entropy: 0.8366407419411671, [(1, 165), (2, 60)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [46, 177, 23]]
** centroid: 3, normalized-entropy: 0.7026572615973232, [(1, 46), (2, 177), (3, 23)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5060005934009778] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5060005934009778, 0.3073279762227295] ***
*** finished computation of 3 references, err: [Inf, 0.5060005934009778, 0.3073279762227295] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [260, 14, 0]]
** centroid: 1, normalized-entropy: 0.291029892098466, [(1, 260), (2, 14)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [5, 144, 24]]
** centroid: 2, normalized-entropy: 0.48166834100393896, [(1, 5), (2, 144), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [136, 84, 0]]
** centroid: 3, normalized-entropy: 0.9593160320543779, [(1, 136), (2, 84)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.332957665908623] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.332957665908623, 0.2592126092406454] ***
*** starting iteration: 2; err: [Inf, 0.332957665908623, 0.2592126092406454] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.332957665908623, 0.2592126092406454, 0.23883350384239857] ***
*** starting iteration: 3; err: [Inf, 0.332957665908623, 0.2592126092406454, 0.23883350384239857] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.332957665908623, 0.2592126092406454, 0.23883350384239857, 0.23396153755027344] ***
*** finished computation of 3 references, err: [Inf, 0.332957665908623, 0.2592126092406454, 0.23883350384239857, 0.23396153755027344] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [178, 31, 0]]
** centroid: 1, normalized-entropy: 0.6056335993822612, [(1, 178), (2, 31)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 168, 25]]
** centroid: 2, normalized-entropy: 0.5561579089198946, [(2, 168), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [212, 52, 0]]
** centroid: 3, normalized-entropy: 0.7158259310602146, [(1, 212), (2, 52)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34095694481589267] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34095694481589267, 0.2467614838000348] ***
*** starting iteration: 2; err: [Inf, 0.34095694481589267, 0.2467614838000348] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34095694481589267, 0.2467614838000348, 0.23950010367684524] ***
*** starting iteration: 3; err: [Inf, 0.34095694481589267, 0.2467614838000348, 0.23950010367684524] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34095694481589267, 0.2467614838000348, 0.23950010367684524, 0.23720131681553427] ***
*** finished computation of 3 references, err: [Inf, 0.34095694481589267, 0.2467614838000348, 0.23950010367684524, 0.23720131681553427] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [153, 58, 0]]
** centroid: 1, normalized-entropy: 0.8483824225964037, [(1, 153), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [254, 24, 0]]
** centroid: 2, normalized-entropy: 0.4241029056104217, [(1, 254), (2, 24)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 155, 23]]
** centroid: 3, normalized-entropy: 0.5552772073325881, [(2, 155), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2939870235799202] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2939870235799202, 0.23791161022879284] ***
*** starting iteration: 2; err: [Inf, 0.2939870235799202, 0.23791161022879284] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2939870235799202, 0.23791161022879284, 0.23296166501514826] ***
*** starting iteration: 3; err: [Inf, 0.2939870235799202, 0.23791161022879284, 0.23296166501514826] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2939870235799202, 0.23791161022879284, 0.23296166501514826, 0.2320501693458795] ***
*** finished computation of 3 references, err: [Inf, 0.2939870235799202, 0.23791161022879284, 0.23296166501514826, 0.2320501693458795] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [216, 19, 0]]
** centroid: 1, normalized-entropy: 0.4051708902980325, [(1, 216), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [185, 18, 0]]
** centroid: 2, normalized-entropy: 0.4320146353059674, [(1, 185), (2, 18)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 205, 24]]
** centroid: 3, normalized-entropy: 0.48403994348592133, [(2, 205), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3224322805621636] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3224322805621636, 0.24194304153110618] ***
*** starting iteration: 2; err: [Inf, 0.3224322805621636, 0.24194304153110618] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3224322805621636, 0.24194304153110618, 0.23506255962049682] ***
*** starting iteration: 3; err: [Inf, 0.3224322805621636, 0.24194304153110618, 0.23506255962049682] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3224322805621636, 0.24194304153110618, 0.23506255962049682, 0.2335265869800527] ***
*** finished computation of 3 references, err: [Inf, 0.3224322805621636, 0.24194304153110618, 0.23506255962049682, 0.2335265869800527] ***
*** center 1: selecting labels [1] (freq >= 2) [from [192, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [92, 109, 0]]
** centroid: 2, normalized-entropy: 0.9948338237265398, [(1, 92), (2, 109)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [106, 142, 25]]
** centroid: 3, normalized-entropy: 0.8430946408957349, [(1, 106), (2, 142), (3, 25)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.25211683870328105] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25211683870328105, 0.23713432347354502] ***
*** starting iteration: 2; err: [Inf, 0.25211683870328105, 0.23713432347354502] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25211683870328105, 0.23713432347354502, 0.23498810692152744] ***
*** starting iteration: 3; err: [Inf, 0.25211683870328105, 0.23713432347354502, 0.23498810692152744] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25211683870328105, 0.23713432347354502, 0.23498810692152744, 0.23471608883917688] ***
*** finished computation of 3 references, err: [Inf, 0.25211683870328105, 0.23713432347354502, 0.23498810692152744, 0.23471608883917688] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [259, 9, 0]]
** centroid: 1, normalized-entropy: 0.2120493713391221, [(1, 259), (2, 9)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 183, 23]]
** centroid: 2, normalized-entropy: 0.5048743359439413, [(2, 183), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [147, 45, 0]]
** centroid: 3, normalized-entropy: 0.7855602922535471, [(1, 147), (2, 45)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.35485491341306663] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35485491341306663, 0.24667309668554604] ***
*** starting iteration: 2; err: [Inf, 0.35485491341306663, 0.24667309668554604] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35485491341306663, 0.24667309668554604, 0.23978388788125504] ***
*** starting iteration: 3; err: [Inf, 0.35485491341306663, 0.24667309668554604, 0.23978388788125504] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35485491341306663, 0.24667309668554604, 0.23978388788125504, 0.23903414266284506] ***
*** finished computation of 3 references, err: [Inf, 0.35485491341306663, 0.24667309668554604, 0.23978388788125504, 0.23903414266284506] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [77, 159, 24]]
** centroid: 1, normalized-entropy: 0.8019737853443512, [(1, 77), (2, 159), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [134, 83, 0]]
** centroid: 2, normalized-entropy: 0.9597806134438513, [(1, 134), (2, 83)]
*** center 3: selecting labels [1] (freq >= 2) [from [190, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.17504297666826393] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17504297666826393, 0.15158812335535726] ***
*** starting iteration: 2; err: [Inf, 0.17504297666826393, 0.15158812335535726] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17504297666826393, 0.15158812335535726, 0.14867618407805203] ***
*** starting iteration: 3; err: [Inf, 0.17504297666826393, 0.15158812335535726, 0.14867618407805203] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17504297666826393, 0.15158812335535726, 0.14867618407805203, 0.14757982773325956] ***
*** starting iteration: 4; err: [Inf, 0.17504297666826393, 0.15158812335535726, 0.14867618407805203, 0.14757982773325956] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17504297666826393, 0.15158812335535726, 0.14867618407805203, 0.14757982773325956, 0.14686666030364037] ***
*** finished computation of 7 references, err: [Inf, 0.17504297666826393, 0.15158812335535726, 0.14867618407805203, 0.14757982773325956, 0.14686666030364037] ***
*** center 1: selecting labels [1] (freq >= 1) [from [121, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [64, 31, 0]]
** centroid: 3, normalized-entropy: 0.9111178649415465, [(1, 64), (2, 31)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 61, 25]]
** centroid: 4, normalized-entropy: 0.869620774054375, [(2, 61), (3, 25)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [90, 4, 0]]
** centroid: 5, normalized-entropy: 0.2538784402981617, [(1, 90), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [11, 71, 0]]
** centroid: 6, normalized-entropy: 0.5687008669370753, [(1, 11), (2, 71)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 84, 0]]
** centroid: 7, normalized-entropy: 0.15935006268563429, [(1, 2), (2, 84)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22445929938587994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22445929938587994, 0.16226773119826188] ***
*** starting iteration: 2; err: [Inf, 0.22445929938587994, 0.16226773119826188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22445929938587994, 0.16226773119826188, 0.15715710547783396] ***
*** starting iteration: 3; err: [Inf, 0.22445929938587994, 0.16226773119826188, 0.15715710547783396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22445929938587994, 0.16226773119826188, 0.15715710547783396, 0.15475838988421783] ***
*** starting iteration: 4; err: [Inf, 0.22445929938587994, 0.16226773119826188, 0.15715710547783396, 0.15475838988421783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22445929938587994, 0.16226773119826188, 0.15715710547783396, 0.15475838988421783, 0.15281574700427042] ***
*** starting iteration: 5; err: [Inf, 0.22445929938587994, 0.16226773119826188, 0.15715710547783396, 0.15475838988421783, 0.15281574700427042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22445929938587994, 0.16226773119826188, 0.15715710547783396, 0.15475838988421783, 0.15281574700427042, 0.15169634195980147] ***
*** starting iteration: 6; err: [Inf, 0.22445929938587994, 0.16226773119826188, 0.15715710547783396, 0.15475838988421783, 0.15281574700427042, 0.15169634195980147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22445929938587994, 0.16226773119826188, 0.15715710547783396, 0.15475838988421783, 0.15281574700427042, 0.15169634195980147, 0.15105188968123637] ***
*** finished computation of 7 references, err: [Inf, 0.22445929938587994, 0.16226773119826188, 0.15715710547783396, 0.15475838988421783, 0.15281574700427042, 0.15169634195980147, 0.15105188968123637] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [29, 62, 0]]
** centroid: 1, normalized-entropy: 0.9029416720373132, [(1, 29), (2, 62)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [74, 42, 0]]
** centroid: 2, normalized-entropy: 0.9443871950133461, [(1, 74), (2, 42)]
*** center 3: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 97, 23]]
** centroid: 4, normalized-entropy: 0.7049450065963296, [(2, 97), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [72, 36, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 72), (2, 36)]
*** center 6: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19174320021339844] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19174320021339844, 0.15292345067190155] ***
*** starting iteration: 2; err: [Inf, 0.19174320021339844, 0.15292345067190155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19174320021339844, 0.15292345067190155, 0.14756186180880693] ***
*** starting iteration: 3; err: [Inf, 0.19174320021339844, 0.15292345067190155, 0.14756186180880693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19174320021339844, 0.15292345067190155, 0.14756186180880693, 0.14594353774403301] ***
*** starting iteration: 4; err: [Inf, 0.19174320021339844, 0.15292345067190155, 0.14756186180880693, 0.14594353774403301] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19174320021339844, 0.15292345067190155, 0.14756186180880693, 0.14594353774403301, 0.1450088854294097] ***
*** finished computation of 7 references, err: [Inf, 0.19174320021339844, 0.15292345067190155, 0.14756186180880693, 0.14594353774403301, 0.1450088854294097] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [19, 76, 0]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(1, 19), (2, 76)]
*** center 2: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [34, 65, 0]]
** centroid: 3, normalized-entropy: 0.9280672822072753, [(1, 34), (2, 65)]
*** center 4: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 80, 24]]
** centroid: 5, normalized-entropy: 0.7793498372920851, [(2, 80), (3, 24)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [69, 21, 0]]
** centroid: 6, normalized-entropy: 0.7837769474847011, [(1, 69), (2, 21)]
*** center 7: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 9)
[0.9200098301894709, 0.9109918301535068, 0.8909987832143521, 0.888999778221335, 0.8869558180935426, 0.8619817422212632, 0.8539887192581803, 0.8280136423848998, 0.800000599401797]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :rand, 0.3, 2) => 0.9200098301894709
finished with 10
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.34599056839103903] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34599056839103903, 0.3029882932870506] ***
*** starting iteration: 2; err: [Inf, 0.34599056839103903, 0.3029882932870506] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34599056839103903, 0.3029882932870506, 0.2961464884953836] ***
*** starting iteration: 3; err: [Inf, 0.34599056839103903, 0.3029882932870506, 0.2961464884953836] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34599056839103903, 0.3029882932870506, 0.2961464884953836, 0.29488899794270146] ***
*** finished computation of 3 references, err: [Inf, 0.34599056839103903, 0.3029882932870506, 0.2961464884953836, 0.29488899794270146] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [2, 185, 25]]
** centroid: 1, normalized-entropy: 0.3777161008653267, [(1, 2), (2, 185), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [243, 8, 0]]
** centroid: 2, normalized-entropy: 0.2036971859180838, [(1, 243), (2, 8)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [145, 58, 0]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(1, 145), (2, 58)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3620427448715808] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3620427448715808, 0.3052325983778916] ***
*** starting iteration: 2; err: [Inf, 0.3620427448715808, 0.3052325983778916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3620427448715808, 0.3052325983778916, 0.30121920391012436] ***
*** starting iteration: 3; err: [Inf, 0.3620427448715808, 0.3052325983778916, 0.30121920391012436] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3620427448715808, 0.3052325983778916, 0.30121920391012436, 0.3004521275444635] ***
*** finished computation of 3 references, err: [Inf, 0.3620427448715808, 0.3052325983778916, 0.30121920391012436, 0.3004521275444635] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [158, 56, 0]]
** centroid: 1, normalized-entropy: 0.8292743048721369, [(1, 158), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [249, 20, 0]]
** centroid: 2, normalized-entropy: 0.38194919161722135, [(1, 249), (2, 20)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 161, 23]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(2, 161), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3957620493430963] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3957620493430963, 0.32813438463179784] ***
*** starting iteration: 2; err: [Inf, 0.3957620493430963, 0.32813438463179784] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3957620493430963, 0.32813438463179784, 0.32068194212835993] ***
*** starting iteration: 3; err: [Inf, 0.3957620493430963, 0.32813438463179784, 0.32068194212835993] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3957620493430963, 0.32813438463179784, 0.32068194212835993, 0.29701053193662835] ***
*** finished computation of 3 references, err: [Inf, 0.3957620493430963, 0.32813438463179784, 0.32068194212835993, 0.29701053193662835] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [226, 25, 0]]
** centroid: 1, normalized-entropy: 0.4677314015595348, [(1, 226), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [175, 39, 0]]
** centroid: 2, normalized-entropy: 0.6849593644091599, [(1, 175), (2, 39)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 178, 24]]
** centroid: 3, normalized-entropy: 0.5259359840917625, [(2, 178), (3, 24)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 10)
[0.9200098301894709, 0.9109918301535068, 0.8909987832143521, 0.888999778221335, 0.8869558180935426, 0.8619817422212632, 0.8539887192581803, 0.8439727152302003, 0.8280136423848998, 0.800000599401797]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :rand, 0.3, 2) => 0.9200098301894709
finished with 10
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 10)
[0.9200098301894709, 0.9109918301535068, 0.8909987832143521, 0.888999778221335, 0.8869558180935426, 0.8619817422212632, 0.8539887192581803, 0.8439727152302003, 0.8280136423848998, 0.800000599401797]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :rand, 0.3, 2) => 0.9200098301894709
finished with 11
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.30840046195218385] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30840046195218385, 0.25309920859155893] ***
*** starting iteration: 2; err: [Inf, 0.30840046195218385, 0.25309920859155893] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30840046195218385, 0.25309920859155893, 0.23978952827236463] ***
*** starting iteration: 3; err: [Inf, 0.30840046195218385, 0.25309920859155893, 0.23978952827236463] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30840046195218385, 0.25309920859155893, 0.23978952827236463, 0.2358844858165579] ***
*** starting iteration: 4; err: [Inf, 0.30840046195218385, 0.25309920859155893, 0.23978952827236463, 0.2358844858165579] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30840046195218385, 0.25309920859155893, 0.23978952827236463, 0.2358844858165579, 0.23469115271145055] ***
*** starting iteration: 5; err: [Inf, 0.30840046195218385, 0.25309920859155893, 0.23978952827236463, 0.2358844858165579, 0.23469115271145055] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30840046195218385, 0.25309920859155893, 0.23978952827236463, 0.2358844858165579, 0.23469115271145055, 0.23414863019237767] ***
*** finished computation of 3 references, err: [Inf, 0.30840046195218385, 0.25309920859155893, 0.23978952827236463, 0.2358844858165579, 0.23469115271145055, 0.23414863019237767] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [75, 167, 23]]
** centroid: 1, normalized-entropy: 0.7831336330588569, [(1, 75), (2, 167), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [114, 70, 0]]
** centroid: 2, normalized-entropy: 0.9583485169215336, [(1, 114), (2, 70)]
*** center 3: selecting labels [1] (freq >= 1) [from [218, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.40860516030056543] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40860516030056543, 0.23600135416538082] ***
*** starting iteration: 2; err: [Inf, 0.40860516030056543, 0.23600135416538082] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40860516030056543, 0.23600135416538082, 0.2355298981659751] ***
*** finished computation of 3 references, err: [Inf, 0.40860516030056543, 0.23600135416538082, 0.2355298981659751] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [24, 189, 24]]
** centroid: 1, normalized-entropy: 0.5864455635272752, [(1, 24), (2, 189), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [234, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [143, 53, 0]]
** centroid: 3, normalized-entropy: 0.8420497152827633, [(1, 143), (2, 53)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.38921925330719165] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38921925330719165, 0.23502676205167003] ***
*** starting iteration: 2; err: [Inf, 0.38921925330719165, 0.23502676205167003] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38921925330719165, 0.23502676205167003, 0.23322994103683187] ***
*** starting iteration: 3; err: [Inf, 0.38921925330719165, 0.23502676205167003, 0.23322994103683187] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38921925330719165, 0.23502676205167003, 0.23322994103683187, 0.23294068696103185] ***
*** finished computation of 3 references, err: [Inf, 0.38921925330719165, 0.23502676205167003, 0.23322994103683187, 0.23294068696103185] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [239, 1, 0]]
** centroid: 1, normalized-entropy: 0.03894406599435636, [(1, 239), (2, 1)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [22, 177, 25]]
** centroid: 2, normalized-entropy: 0.5996013304871034, [(1, 22), (2, 177), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [129, 73, 0]]
** centroid: 3, normalized-entropy: 0.9438277760793142, [(1, 129), (2, 73)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 11)
[0.9200098301894709, 0.9109918301535068, 0.8909987832143521, 0.888999778221335, 0.8869558180935426, 0.8619817422212632, 0.8609477741214269, 0.8539887192581803, 0.8439727152302003, 0.8280136423848998, 0.800000599401797]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :rand, 0.3, 2) => 0.9200098301894709
finished with 11
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 11)
[0.9200098301894709, 0.9109918301535068, 0.8909987832143521, 0.888999778221335, 0.8869558180935426, 0.8619817422212632, 0.8609477741214269, 0.8539887192581803, 0.8439727152302003, 0.8280136423848998, 0.800000599401797]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :rand, 0.3, 2) => 0.9200098301894709
finished with 11
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 11)
[0.9200098301894709, 0.9109918301535068, 0.8909987832143521, 0.888999778221335, 0.8869558180935426, 0.8619817422212632, 0.8609477741214269, 0.8539887192581803, 0.8439727152302003, 0.8280136423848998, 0.800000599401797]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :rand, 0.3, 2) => 0.9200098301894709
finished with 12
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.2659202565441842] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2659202565441842, 0.2131469630323037] ***
*** starting iteration: 2; err: [Inf, 0.2659202565441842, 0.2131469630323037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2659202565441842, 0.2131469630323037, 0.20711646079122126] ***
*** starting iteration: 3; err: [Inf, 0.2659202565441842, 0.2131469630323037, 0.20711646079122126] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2659202565441842, 0.2131469630323037, 0.20711646079122126, 0.20343340671825427] ***
*** starting iteration: 4; err: [Inf, 0.2659202565441842, 0.2131469630323037, 0.20711646079122126, 0.20343340671825427] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2659202565441842, 0.2131469630323037, 0.20711646079122126, 0.20343340671825427, 0.20042194041609485] ***
*** starting iteration: 5; err: [Inf, 0.2659202565441842, 0.2131469630323037, 0.20711646079122126, 0.20343340671825427, 0.20042194041609485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2659202565441842, 0.2131469630323037, 0.20711646079122126, 0.20343340671825427, 0.20042194041609485, 0.19745735490768757] ***
*** starting iteration: 6; err: [Inf, 0.2659202565441842, 0.2131469630323037, 0.20711646079122126, 0.20343340671825427, 0.20042194041609485, 0.19745735490768757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2659202565441842, 0.2131469630323037, 0.20711646079122126, 0.20343340671825427, 0.20042194041609485, 0.19745735490768757, 0.1951731673411063] ***
*** starting iteration: 7; err: [Inf, 0.2659202565441842, 0.2131469630323037, 0.20711646079122126, 0.20343340671825427, 0.20042194041609485, 0.19745735490768757, 0.1951731673411063] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2659202565441842, 0.2131469630323037, 0.20711646079122126, 0.20343340671825427, 0.20042194041609485, 0.19745735490768757, 0.1951731673411063, 0.19352908053801762] ***
*** starting iteration: 8; err: [Inf, 0.2659202565441842, 0.2131469630323037, 0.20711646079122126, 0.20343340671825427, 0.20042194041609485, 0.19745735490768757, 0.1951731673411063, 0.19352908053801762] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2659202565441842, 0.2131469630323037, 0.20711646079122126, 0.20343340671825427, 0.20042194041609485, 0.19745735490768757, 0.1951731673411063, 0.19352908053801762, 0.1929584713806552] ***
*** finished computation of 7 references, err: [Inf, 0.2659202565441842, 0.2131469630323037, 0.20711646079122126, 0.20343340671825427, 0.20042194041609485, 0.19745735490768757, 0.1951731673411063, 0.19352908053801762, 0.1929584713806552] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [78, 44, 0]]
** centroid: 1, normalized-entropy: 0.9432261548473416, [(1, 78), (2, 44)]
*** center 2: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [37, 69, 0]]
** centroid: 3, normalized-entropy: 0.9332226994125877, [(1, 37), (2, 69)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [17, 55, 0]]
** centroid: 4, normalized-entropy: 0.7885131605379784, [(1, 17), (2, 55)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [93, 4, 0]]
** centroid: 5, normalized-entropy: 0.24793583772272637, [(1, 93), (2, 4)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 79, 25]]
** centroid: 6, normalized-entropy: 0.7956792965030224, [(2, 79), (3, 25)]
*** center 7: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2656233226852506] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2656233226852506, 0.21971932428329066] ***
*** starting iteration: 2; err: [Inf, 0.2656233226852506, 0.21971932428329066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2656233226852506, 0.21971932428329066, 0.20408539861200498] ***
*** starting iteration: 3; err: [Inf, 0.2656233226852506, 0.21971932428329066, 0.20408539861200498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2656233226852506, 0.21971932428329066, 0.20408539861200498, 0.19897518646128398] ***
*** starting iteration: 4; err: [Inf, 0.2656233226852506, 0.21971932428329066, 0.20408539861200498, 0.19897518646128398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2656233226852506, 0.21971932428329066, 0.20408539861200498, 0.19897518646128398, 0.19676949089948742] ***
*** starting iteration: 5; err: [Inf, 0.2656233226852506, 0.21971932428329066, 0.20408539861200498, 0.19897518646128398, 0.19676949089948742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2656233226852506, 0.21971932428329066, 0.20408539861200498, 0.19897518646128398, 0.19676949089948742, 0.19552586980672299] ***
*** starting iteration: 6; err: [Inf, 0.2656233226852506, 0.21971932428329066, 0.20408539861200498, 0.19897518646128398, 0.19676949089948742, 0.19552586980672299] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2656233226852506, 0.21971932428329066, 0.20408539861200498, 0.19897518646128398, 0.19676949089948742, 0.19552586980672299, 0.1952276523204065] ***
*** finished computation of 7 references, err: [Inf, 0.2656233226852506, 0.21971932428329066, 0.20408539861200498, 0.19897518646128398, 0.19676949089948742, 0.19552586980672299, 0.1952276523204065] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 59, 23]]
** centroid: 1, normalized-entropy: 0.8561146277685725, [(2, 59), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [92, 7, 0]]
** centroid: 3, normalized-entropy: 0.3685567775377064, [(1, 92), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [74, 30, 0]]
** centroid: 4, normalized-entropy: 0.8667256130949592, [(1, 74), (2, 30)]
*** center 5: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 98, 0]]
** centroid: 6, normalized-entropy: 0.23868451135100152, [(1, 4), (2, 98)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [61, 43, 0]]
** centroid: 7, normalized-entropy: 0.9782823907994933, [(1, 61), (2, 43)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2509061313671307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2509061313671307, 0.19369356506650728] ***
*** starting iteration: 2; err: [Inf, 0.2509061313671307, 0.19369356506650728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2509061313671307, 0.19369356506650728, 0.1915454624675918] ***
*** starting iteration: 3; err: [Inf, 0.2509061313671307, 0.19369356506650728, 0.1915454624675918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2509061313671307, 0.19369356506650728, 0.1915454624675918, 0.18730630206902033] ***
*** starting iteration: 4; err: [Inf, 0.2509061313671307, 0.19369356506650728, 0.1915454624675918, 0.18730630206902033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2509061313671307, 0.19369356506650728, 0.1915454624675918, 0.18730630206902033, 0.18581695754619978] ***
*** starting iteration: 5; err: [Inf, 0.2509061313671307, 0.19369356506650728, 0.1915454624675918, 0.18730630206902033, 0.18581695754619978] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2509061313671307, 0.19369356506650728, 0.1915454624675918, 0.18730630206902033, 0.18581695754619978, 0.18502869592865054] ***
*** finished computation of 7 references, err: [Inf, 0.2509061313671307, 0.19369356506650728, 0.1915454624675918, 0.18730630206902033, 0.18581695754619978, 0.18502869592865054] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [11, 81, 0]]
** centroid: 1, normalized-entropy: 0.5281098034628294, [(1, 11), (2, 81)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [84, 20, 0]]
** centroid: 2, normalized-entropy: 0.7062740891876008, [(1, 84), (2, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [34, 73, 0]]
** centroid: 3, normalized-entropy: 0.9019255901324292, [(1, 34), (2, 73)]
*** center 4: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 68, 24]]
** centroid: 6, normalized-entropy: 0.828055725379504, [(2, 68), (3, 24)]
*** center 7: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 12)
[0.9200098301894709, 0.9109918301535068, 0.892997788207369, 0.8909987832143521, 0.888999778221335, 0.8869558180935426, 0.8619817422212632, 0.8609477741214269, 0.8539887192581803, 0.8439727152302003, 0.8280136423848998, 0.800000599401797]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :rand, 0.3, 2) => 0.9200098301894709
finished with 12
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9200098301894709, 0.9109918301535068, 0.892997788207369, 0.8909987832143521, 0.888999778221335, 0.8869558180935426, 0.8619817422212632, 0.8609477741214269, 0.8539887192581803, 0.8439727152302003, 0.8280136423848998, 0.800000599401797]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :rand, 0.3, 2) => 0.9200098301894709
finished with 12
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.40136679847026246] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40136679847026246, 0.2845528084519319] ***
*** starting iteration: 2; err: [Inf, 0.40136679847026246, 0.2845528084519319] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40136679847026246, 0.2845528084519319, 0.2532914936589077] ***
*** starting iteration: 3; err: [Inf, 0.40136679847026246, 0.2845528084519319, 0.2532914936589077] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40136679847026246, 0.2845528084519319, 0.2532914936589077, 0.2407715051677078] ***
*** finished computation of 3 references, err: [Inf, 0.40136679847026246, 0.2845528084519319, 0.2532914936589077, 0.2407715051677078] ***
*** center 1: selecting labels [1] (freq >= 2) [from [285, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [126, 138, 2]]
** centroid: 2, normalized-entropy: 0.6655395296033741, [(1, 126), (2, 138), (3, 2)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [188, 227, 34]]
** centroid: 3, normalized-entropy: 0.8235582515105031, [(1, 188), (2, 227), (3, 34)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3011493795318529] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3011493795318529, 0.2518395054265857] ***
*** starting iteration: 2; err: [Inf, 0.3011493795318529, 0.2518395054265857] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3011493795318529, 0.2518395054265857, 0.2368763430658728] ***
*** starting iteration: 3; err: [Inf, 0.3011493795318529, 0.2518395054265857, 0.2368763430658728] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3011493795318529, 0.2518395054265857, 0.2368763430658728, 0.23551744085922838] ***
*** finished computation of 3 references, err: [Inf, 0.3011493795318529, 0.2518395054265857, 0.2368763430658728, 0.23551744085922838] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [29, 127, 20]]
** centroid: 1, normalized-entropy: 0.7097135177903301, [(1, 29), (2, 127), (3, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [172, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [90, 62, 0]]
** centroid: 3, normalized-entropy: 0.9753817903274211, [(1, 90), (2, 62)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.45220341647043827] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45220341647043827, 0.2572290391800925] ***
*** starting iteration: 2; err: [Inf, 0.45220341647043827, 0.2572290391800925] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45220341647043827, 0.2572290391800925, 0.2362641800539568] ***
*** starting iteration: 3; err: [Inf, 0.45220341647043827, 0.2572290391800925, 0.2362641800539568] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45220341647043827, 0.2572290391800925, 0.2362641800539568, 0.23064681319892408] ***
*** finished computation of 3 references, err: [Inf, 0.45220341647043827, 0.2572290391800925, 0.2362641800539568, 0.23064681319892408] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [45, 123, 18]]
** centroid: 1, normalized-entropy: 0.7671638214895073, [(1, 45), (2, 123), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [88, 52, 0]]
** centroid: 2, normalized-entropy: 0.9517626756348312, [(1, 88), (2, 52)]
*** center 3: selecting labels [1] (freq >= 2) [from [173, 1, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.25224040710250845] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25224040710250845, 0.23853392841666937] ***
*** starting iteration: 2; err: [Inf, 0.25224040710250845, 0.23853392841666937] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25224040710250845, 0.23853392841666937, 0.23578890220448376] ***
*** starting iteration: 3; err: [Inf, 0.25224040710250845, 0.23853392841666937, 0.23578890220448376] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25224040710250845, 0.23853392841666937, 0.23578890220448376, 0.23507603158801793] ***
*** finished computation of 3 references, err: [Inf, 0.25224040710250845, 0.23853392841666937, 0.23578890220448376, 0.23507603158801793] ***
*** center 1: selecting labels [1] (freq >= 2) [from [169, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [37, 131, 13]]
** centroid: 2, normalized-entropy: 0.680561272695868, [(1, 37), (2, 131), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [91, 59, 0]]
** centroid: 3, normalized-entropy: 0.9669170093596808, [(1, 91), (2, 59)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34319524689391256] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34319524689391256, 0.24262670573219658] ***
*** starting iteration: 2; err: [Inf, 0.34319524689391256, 0.24262670573219658] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34319524689391256, 0.24262670573219658, 0.23350420670956373] ***
*** starting iteration: 3; err: [Inf, 0.34319524689391256, 0.24262670573219658, 0.23350420670956373] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34319524689391256, 0.24262670573219658, 0.23350420670956373, 0.23153930135816336] ***
*** finished computation of 3 references, err: [Inf, 0.34319524689391256, 0.24262670573219658, 0.23350420670956373, 0.23153930135816336] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [1, 124, 20]]
** centroid: 1, normalized-entropy: 0.581321498763703, [(2, 124), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [106, 56, 0]]
** centroid: 2, normalized-entropy: 0.9301497323974339, [(1, 106), (2, 56)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [184, 9, 0]]
** centroid: 3, normalized-entropy: 0.27191442106356667, [(1, 184), (2, 9)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2680164672192186] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2680164672192186, 0.24480485525447876] ***
*** starting iteration: 2; err: [Inf, 0.2680164672192186, 0.24480485525447876] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2680164672192186, 0.24480485525447876, 0.2427136053238064] ***
*** starting iteration: 3; err: [Inf, 0.2680164672192186, 0.24480485525447876, 0.2427136053238064] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2680164672192186, 0.24480485525447876, 0.2427136053238064, 0.24206713479710742] ***
*** finished computation of 3 references, err: [Inf, 0.2680164672192186, 0.24480485525447876, 0.2427136053238064, 0.24206713479710742] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [97, 60, 0]]
** centroid: 1, normalized-entropy: 0.959557172912885, [(1, 97), (2, 60)]
*** center 2: selecting labels [1] (freq >= 2) [from [164, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [29, 128, 22]]
** centroid: 3, normalized-entropy: 0.7212129098219683, [(1, 29), (2, 128), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3048790413215756] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3048790413215756, 0.235505060819909] ***
*** starting iteration: 2; err: [Inf, 0.3048790413215756, 0.235505060819909] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3048790413215756, 0.235505060819909, 0.23190774080902338] ***
*** starting iteration: 3; err: [Inf, 0.3048790413215756, 0.235505060819909, 0.23190774080902338] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3048790413215756, 0.235505060819909, 0.23190774080902338, 0.2317249358575791] ***
*** finished computation of 3 references, err: [Inf, 0.3048790413215756, 0.235505060819909, 0.23190774080902338, 0.2317249358575791] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [4, 116, 18]]
** centroid: 1, normalized-entropy: 0.46813126734946126, [(1, 4), (2, 116), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [178, 5, 0]]
** centroid: 2, normalized-entropy: 0.18078076076242702, [(1, 178), (2, 5)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [123, 56, 0]]
** centroid: 3, normalized-entropy: 0.896434996303629, [(1, 123), (2, 56)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.28269520603492854] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28269520603492854, 0.2361023743599653] ***
*** starting iteration: 2; err: [Inf, 0.28269520603492854, 0.2361023743599653] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28269520603492854, 0.2361023743599653, 0.23365927278809248] ***
*** starting iteration: 3; err: [Inf, 0.28269520603492854, 0.2361023743599653, 0.23365927278809248] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28269520603492854, 0.2361023743599653, 0.23365927278809248, 0.23306451490148902] ***
*** finished computation of 3 references, err: [Inf, 0.28269520603492854, 0.2361023743599653, 0.23365927278809248, 0.23306451490148902] ***
*** center 1: selecting labels [1] (freq >= 2) [from [147, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [62, 122, 17]]
** centroid: 2, normalized-entropy: 0.7962408674268144, [(1, 62), (2, 122), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [86, 66, 0]]
** centroid: 3, normalized-entropy: 0.9874750082985965, [(1, 86), (2, 66)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31292202847264705] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31292202847264705, 0.23210880577377974] ***
*** starting iteration: 2; err: [Inf, 0.31292202847264705, 0.23210880577377974] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31292202847264705, 0.23210880577377974, 0.2280004329746589] ***
*** starting iteration: 3; err: [Inf, 0.31292202847264705, 0.23210880577377974, 0.2280004329746589] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31292202847264705, 0.23210880577377974, 0.2280004329746589, 0.22736440970376134] ***
*** finished computation of 3 references, err: [Inf, 0.31292202847264705, 0.23210880577377974, 0.2280004329746589, 0.22736440970376134] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [114, 44, 0]]
** centroid: 1, normalized-entropy: 0.8533728188427888, [(1, 114), (2, 44)]
*** center 2: selecting labels [1] (freq >= 2) [from [185, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [5, 132, 20]]
** centroid: 3, normalized-entropy: 0.47157872496869907, [(1, 5), (2, 132), (3, 20)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2828494599312544] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2828494599312544, 0.24091448372788726] ***
*** starting iteration: 2; err: [Inf, 0.2828494599312544, 0.24091448372788726] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2828494599312544, 0.24091448372788726, 0.23036073718592526] ***
*** starting iteration: 3; err: [Inf, 0.2828494599312544, 0.24091448372788726, 0.23036073718592526] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2828494599312544, 0.24091448372788726, 0.23036073718592526, 0.22871339316666126] ***
*** finished computation of 3 references, err: [Inf, 0.2828494599312544, 0.24091448372788726, 0.23036073718592526, 0.22871339316666126] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [1, 136, 17]]
** centroid: 1, normalized-entropy: 0.5032583347756457, [(2, 136), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [113, 32, 0]]
** centroid: 2, normalized-entropy: 0.7614247951672365, [(1, 113), (2, 32)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [195, 6, 0]]
** centroid: 3, normalized-entropy: 0.19364280468389852, [(1, 195), (2, 6)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36957000743597745] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36957000743597745, 0.2520268254876137] ***
*** starting iteration: 2; err: [Inf, 0.36957000743597745, 0.2520268254876137] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36957000743597745, 0.2520268254876137, 0.24073819947242736] ***
*** starting iteration: 3; err: [Inf, 0.36957000743597745, 0.2520268254876137, 0.24073819947242736] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36957000743597745, 0.2520268254876137, 0.24073819947242736, 0.23868875977769494] ***
*** finished computation of 3 references, err: [Inf, 0.36957000743597745, 0.2520268254876137, 0.24073819947242736, 0.23868875977769494] ***
*** center 1: selecting labels [1] (freq >= 2) [from [160, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [76, 100, 15]]
** centroid: 2, normalized-entropy: 0.824032038705434, [(1, 76), (2, 100), (3, 15)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [56, 87, 6]]
** centroid: 3, normalized-entropy: 0.73847733971272, [(1, 56), (2, 87), (3, 6)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2944267405215651] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2944267405215651, 0.2563803595434874] ***
*** starting iteration: 2; err: [Inf, 0.2944267405215651, 0.2563803595434874] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2944267405215651, 0.2563803595434874, 0.2336652095466852] ***
*** starting iteration: 3; err: [Inf, 0.2944267405215651, 0.2563803595434874, 0.2336652095466852] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2944267405215651, 0.2563803595434874, 0.2336652095466852, 0.22903647690080106] ***
*** finished computation of 3 references, err: [Inf, 0.2944267405215651, 0.2563803595434874, 0.2336652095466852, 0.22903647690080106] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [11, 136, 15]]
** centroid: 1, normalized-entropy: 0.5004739168855437, [(1, 11), (2, 136), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [115, 41, 0]]
** centroid: 2, normalized-entropy: 0.830972808298501, [(1, 115), (2, 41)]
*** center 3: selecting labels [1] (freq >= 2) [from [182, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.28629965204745533] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28629965204745533, 0.24884326685220004] ***
*** starting iteration: 2; err: [Inf, 0.28629965204745533, 0.24884326685220004] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28629965204745533, 0.24884326685220004, 0.23945646253414452] ***
*** starting iteration: 3; err: [Inf, 0.28629965204745533, 0.24884326685220004, 0.23945646253414452] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28629965204745533, 0.24884326685220004, 0.23945646253414452, 0.2375738592557609] ***
*** finished computation of 3 references, err: [Inf, 0.28629965204745533, 0.24884326685220004, 0.23945646253414452, 0.2375738592557609] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [100, 49, 0]]
** centroid: 1, normalized-entropy: 0.913756430937882, [(1, 100), (2, 49)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [208, 7, 0]]
** centroid: 2, normalized-entropy: 0.20706286899527251, [(1, 208), (2, 7)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [4, 112, 20]]
** centroid: 3, normalized-entropy: 0.4965446537895798, [(1, 4), (2, 112), (3, 20)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2923291150871664] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2923291150871664, 0.2379032950308174] ***
*** starting iteration: 2; err: [Inf, 0.2923291150871664, 0.2379032950308174] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2923291150871664, 0.2379032950308174, 0.23413826072588562] ***
*** starting iteration: 3; err: [Inf, 0.2923291150871664, 0.2379032950308174, 0.23413826072588562] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2923291150871664, 0.2379032950308174, 0.23413826072588562, 0.23391436335444452] ***
*** finished computation of 3 references, err: [Inf, 0.2923291150871664, 0.2379032950308174, 0.23413826072588562, 0.23391436335444452] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [47, 125, 17]]
** centroid: 1, normalized-entropy: 0.7610823438395495, [(1, 47), (2, 125), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [150, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [90, 71, 0]]
** centroid: 3, normalized-entropy: 0.9899303926829204, [(1, 90), (2, 71)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30389611071161926] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30389611071161926, 0.25414458744227886] ***
*** starting iteration: 2; err: [Inf, 0.30389611071161926, 0.25414458744227886] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30389611071161926, 0.25414458744227886, 0.246297018205747] ***
*** starting iteration: 3; err: [Inf, 0.30389611071161926, 0.25414458744227886, 0.246297018205747] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30389611071161926, 0.25414458744227886, 0.246297018205747, 0.24524905715882778] ***
*** finished computation of 3 references, err: [Inf, 0.30389611071161926, 0.25414458744227886, 0.246297018205747, 0.24524905715882778] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [100, 58, 0]]
** centroid: 1, normalized-entropy: 0.9484103893488014, [(1, 100), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [191, 7, 0]]
** centroid: 2, normalized-entropy: 0.22056676851783585, [(1, 191), (2, 7)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [5, 114, 25]]
** centroid: 3, normalized-entropy: 0.5512472399752816, [(1, 5), (2, 114), (3, 25)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30362972282618284] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30362972282618284, 0.2331643354408443] ***
*** starting iteration: 2; err: [Inf, 0.30362972282618284, 0.2331643354408443] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30362972282618284, 0.2331643354408443, 0.23257426768168807] ***
*** finished computation of 3 references, err: [Inf, 0.30362972282618284, 0.2331643354408443, 0.23257426768168807] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [81, 70, 1]]
** centroid: 1, normalized-entropy: 0.9961685709820176, [(1, 81), (2, 70)]
*** center 2: selecting labels [1] (freq >= 2) [from [154, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [69, 111, 14]]
** centroid: 3, normalized-entropy: 0.7981319070243013, [(1, 69), (2, 111), (3, 14)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34400924655422566] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34400924655422566, 0.2450722317369655] ***
*** starting iteration: 2; err: [Inf, 0.34400924655422566, 0.2450722317369655] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34400924655422566, 0.2450722317369655, 0.23486376683600246] ***
*** starting iteration: 3; err: [Inf, 0.34400924655422566, 0.2450722317369655, 0.23486376683600246] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34400924655422566, 0.2450722317369655, 0.23486376683600246, 0.23386785131320356] ***
*** finished computation of 3 references, err: [Inf, 0.34400924655422566, 0.2450722317369655, 0.23486376683600246, 0.23386785131320356] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [189, 16, 0]]
** centroid: 1, normalized-entropy: 0.3952663522967498, [(1, 189), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [108, 32, 0]]
** centroid: 2, normalized-entropy: 0.775512658133148, [(1, 108), (2, 32)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 135, 20]]
** centroid: 3, normalized-entropy: 0.5547781633412736, [(2, 135), (3, 20)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.24769570817798375] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.24769570817798375, 0.24136336153745652] ***
*** starting iteration: 2; err: [Inf, 0.24769570817798375, 0.24136336153745652] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.24769570817798375, 0.24136336153745652, 0.24129090908914805] ***
*** finished computation of 3 references, err: [Inf, 0.24769570817798375, 0.24136336153745652, 0.24129090908914805] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 124, 20]]
** centroid: 1, normalized-entropy: 0.581321498763703, [(2, 124), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [139, 33, 0]]
** centroid: 2, normalized-entropy: 0.7053472253567695, [(1, 139), (2, 33)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [159, 25, 0]]
** centroid: 3, normalized-entropy: 0.5733185069560311, [(1, 159), (2, 25)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31019793556816877] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31019793556816877, 0.24185832403600216] ***
*** starting iteration: 2; err: [Inf, 0.31019793556816877, 0.24185832403600216] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31019793556816877, 0.24185832403600216, 0.2359186884611845] ***
*** starting iteration: 3; err: [Inf, 0.31019793556816877, 0.24185832403600216, 0.2359186884611845] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31019793556816877, 0.24185832403600216, 0.2359186884611845, 0.23403676675632595] ***
*** finished computation of 3 references, err: [Inf, 0.31019793556816877, 0.24185832403600216, 0.2359186884611845, 0.23403676675632595] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [102, 48, 0]]
** centroid: 1, normalized-entropy: 0.9043814577244941, [(1, 102), (2, 48)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [194, 9, 0]]
** centroid: 2, normalized-entropy: 0.261826476804469, [(1, 194), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [1, 131, 15]]
** centroid: 3, normalized-entropy: 0.4776206401434846, [(2, 131), (3, 15)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2760552639774978] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2760552639774978, 0.23625109011307358] ***
*** starting iteration: 2; err: [Inf, 0.2760552639774978, 0.23625109011307358] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2760552639774978, 0.23625109011307358, 0.23037929195910692] ***
*** starting iteration: 3; err: [Inf, 0.2760552639774978, 0.23625109011307358, 0.23037929195910692] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2760552639774978, 0.23625109011307358, 0.23037929195910692, 0.22913738720491528] ***
*** finished computation of 3 references, err: [Inf, 0.2760552639774978, 0.23625109011307358, 0.23037929195910692, 0.22913738720491528] ***
*** center 1: selecting labels [1] (freq >= 2) [from [160, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [82, 59, 0]]
** centroid: 2, normalized-entropy: 0.9807201162921871, [(1, 82), (2, 59)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [56, 132, 11]]
** centroid: 3, normalized-entropy: 0.718317177786369, [(1, 56), (2, 132), (3, 11)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.35315332297608254] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35315332297608254, 0.2759339340776205] ***
*** starting iteration: 2; err: [Inf, 0.35315332297608254, 0.2759339340776205] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35315332297608254, 0.2759339340776205, 0.260770779479295] ***
*** starting iteration: 3; err: [Inf, 0.35315332297608254, 0.2759339340776205, 0.260770779479295] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35315332297608254, 0.2759339340776205, 0.260770779479295, 0.24424472098425032] ***
*** finished computation of 3 references, err: [Inf, 0.35315332297608254, 0.2759339340776205, 0.260770779479295, 0.24424472098425032] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [79, 62, 1]]
** centroid: 1, normalized-entropy: 0.9894885839592377, [(1, 79), (2, 62)]
*** center 2: selecting labels [1] (freq >= 2) [from [151, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [74, 115, 18]]
** centroid: 3, normalized-entropy: 0.8252751530393093, [(1, 74), (2, 115), (3, 18)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30944085705373436] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30944085705373436, 0.23193573221564293] ***
*** starting iteration: 2; err: [Inf, 0.30944085705373436, 0.23193573221564293] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30944085705373436, 0.23193573221564293, 0.22680197425559162] ***
*** starting iteration: 3; err: [Inf, 0.30944085705373436, 0.23193573221564293, 0.22680197425559162] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30944085705373436, 0.23193573221564293, 0.22680197425559162, 0.22646029434725642] ***
*** finished computation of 3 references, err: [Inf, 0.30944085705373436, 0.23193573221564293, 0.22680197425559162, 0.22646029434725642] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [165, 9, 0]]
** centroid: 1, normalized-entropy: 0.29367630985136944, [(1, 165), (2, 9)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 158, 17]]
** centroid: 2, normalized-entropy: 0.45987267461382564, [(2, 158), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [138, 13, 0]]
** centroid: 3, normalized-entropy: 0.4232915514361946, [(1, 138), (2, 13)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.27677799769863487] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27677799769863487, 0.22866225067712367] ***
*** starting iteration: 2; err: [Inf, 0.27677799769863487, 0.22866225067712367] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27677799769863487, 0.22866225067712367, 0.22519826680514962] ***
*** starting iteration: 3; err: [Inf, 0.27677799769863487, 0.22866225067712367, 0.22519826680514962] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27677799769863487, 0.22866225067712367, 0.22519826680514962, 0.22477553033269942] ***
*** finished computation of 3 references, err: [Inf, 0.27677799769863487, 0.22866225067712367, 0.22519826680514962, 0.22477553033269942] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 149, 17]]
** centroid: 1, normalized-entropy: 0.47658775755103405, [(2, 149), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [157, 36, 0]]
** centroid: 2, normalized-entropy: 0.6941525936001598, [(1, 157), (2, 36)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [133, 8, 0]]
** centroid: 3, normalized-entropy: 0.3143558635927069, [(1, 133), (2, 8)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32764858546946196] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32764858546946196, 0.24426750607416034] ***
*** starting iteration: 2; err: [Inf, 0.32764858546946196, 0.24426750607416034] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32764858546946196, 0.24426750607416034, 0.23727893939986824] ***
*** starting iteration: 3; err: [Inf, 0.32764858546946196, 0.24426750607416034, 0.23727893939986824] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32764858546946196, 0.24426750607416034, 0.23727893939986824, 0.23598911489918828] ***
*** finished computation of 3 references, err: [Inf, 0.32764858546946196, 0.24426750607416034, 0.23727893939986824, 0.23598911489918828] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 134, 18]]
** centroid: 1, normalized-entropy: 0.524805134842907, [(2, 134), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [143, 27, 0]]
** centroid: 2, normalized-entropy: 0.6314876201510938, [(1, 143), (2, 27)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [162, 16, 0]]
** centroid: 3, normalized-entropy: 0.43609466429612137, [(1, 162), (2, 16)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.25580445585399864] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25580445585399864, 0.23674744967371225] ***
*** starting iteration: 2; err: [Inf, 0.25580445585399864, 0.23674744967371225] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25580445585399864, 0.23674744967371225, 0.23659140889253466] ***
*** finished computation of 3 references, err: [Inf, 0.25580445585399864, 0.23674744967371225, 0.23659140889253466] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [113, 17, 0]]
** centroid: 1, normalized-entropy: 0.5595440356886702, [(1, 113), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [187, 22, 0]]
** centroid: 2, normalized-entropy: 0.48546076074591343, [(1, 187), (2, 22)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 147, 14]]
** centroid: 3, normalized-entropy: 0.42622865699814483, [(2, 147), (3, 14)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.26129735604301096] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26129735604301096, 0.23874721975252033] ***
*** starting iteration: 2; err: [Inf, 0.26129735604301096, 0.23874721975252033] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26129735604301096, 0.23874721975252033, 0.23205715981312097] ***
*** starting iteration: 3; err: [Inf, 0.26129735604301096, 0.23874721975252033, 0.23205715981312097] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26129735604301096, 0.23874721975252033, 0.23205715981312097, 0.23070086577907203] ***
*** finished computation of 3 references, err: [Inf, 0.26129735604301096, 0.23874721975252033, 0.23205715981312097, 0.23070086577907203] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [26, 131, 14]]
** centroid: 1, normalized-entropy: 0.6329958281081625, [(1, 26), (2, 131), (3, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [183, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [87, 59, 0]]
** centroid: 3, normalized-entropy: 0.9733038462006476, [(1, 87), (2, 59)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2959639589386061] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2959639589386061, 0.28143942516297105] ***
*** starting iteration: 2; err: [Inf, 0.2959639589386061, 0.28143942516297105] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2959639589386061, 0.28143942516297105, 0.2731626786948182] ***
*** starting iteration: 3; err: [Inf, 0.2959639589386061, 0.28143942516297105, 0.2731626786948182] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2959639589386061, 0.28143942516297105, 0.2731626786948182, 0.2473379546944052] ***
*** finished computation of 3 references, err: [Inf, 0.2959639589386061, 0.28143942516297105, 0.2731626786948182, 0.2473379546944052] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [147, 21, 0]]
** centroid: 1, normalized-entropy: 0.5435644431995963, [(1, 147), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [152, 35, 0]]
** centroid: 2, normalized-entropy: 0.6955046864304238, [(1, 152), (2, 35)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 125, 20]]
** centroid: 3, normalized-entropy: 0.5787946246321198, [(2, 125), (3, 20)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3712770839538425] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3712770839538425, 0.2666020531877875] ***
*** starting iteration: 2; err: [Inf, 0.3712770839538425, 0.2666020531877875] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3712770839538425, 0.2666020531877875, 0.23653195600770413] ***
*** starting iteration: 3; err: [Inf, 0.3712770839538425, 0.2666020531877875, 0.23653195600770413] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3712770839538425, 0.2666020531877875, 0.23653195600770413, 0.23366950608417392] ***
*** finished computation of 3 references, err: [Inf, 0.3712770839538425, 0.2666020531877875, 0.23653195600770413, 0.23366950608417392] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [63, 114, 16]]
** centroid: 1, normalized-entropy: 0.8036218025151902, [(1, 63), (2, 114), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [92, 75, 0]]
** centroid: 2, normalized-entropy: 0.992512066459464, [(1, 92), (2, 75)]
*** center 3: selecting labels [1] (freq >= 2) [from [140, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.27534354271087796] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27534354271087796, 0.2694118294976652] ***
*** starting iteration: 2; err: [Inf, 0.27534354271087796, 0.2694118294976652] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27534354271087796, 0.2694118294976652, 0.2643856354616582] ***
*** starting iteration: 3; err: [Inf, 0.27534354271087796, 0.2694118294976652, 0.2643856354616582] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27534354271087796, 0.2694118294976652, 0.2643856354616582, 0.24964844951219856] ***
*** finished computation of 3 references, err: [Inf, 0.27534354271087796, 0.2694118294976652, 0.2643856354616582, 0.24964844951219856] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [31, 143, 16]]
** centroid: 1, normalized-entropy: 0.6536129360922767, [(1, 31), (2, 143), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [157, 9, 0]]
** centroid: 2, normalized-entropy: 0.30404676514833284, [(1, 157), (2, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [111, 33, 0]]
** centroid: 3, normalized-entropy: 0.7765557854444601, [(1, 111), (2, 33)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.29281346939876673] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29281346939876673, 0.23929785619769245] ***
*** starting iteration: 2; err: [Inf, 0.29281346939876673, 0.23929785619769245] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29281346939876673, 0.23929785619769245, 0.2342781113088131] ***
*** starting iteration: 3; err: [Inf, 0.29281346939876673, 0.23929785619769245, 0.2342781113088131] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29281346939876673, 0.23929785619769245, 0.2342781113088131, 0.2332537185549736] ***
*** finished computation of 3 references, err: [Inf, 0.29281346939876673, 0.23929785619769245, 0.2342781113088131, 0.2332537185549736] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [4, 133, 22]]
** centroid: 1, normalized-entropy: 0.46938130266345185, [(1, 4), (2, 133), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [187, 8, 0]]
** centroid: 2, normalized-entropy: 0.2469751137548001, [(1, 187), (2, 8)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [99, 47, 0]]
** centroid: 3, normalized-entropy: 0.9064548231489877, [(1, 99), (2, 47)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3210588582390919] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3210588582390919, 0.24695216092374175] ***
*** starting iteration: 2; err: [Inf, 0.3210588582390919, 0.24695216092374175] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3210588582390919, 0.24695216092374175, 0.23441879493556916] ***
*** starting iteration: 3; err: [Inf, 0.3210588582390919, 0.24695216092374175, 0.23441879493556916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3210588582390919, 0.24695216092374175, 0.23441879493556916, 0.2333389138802886] ***
*** finished computation of 3 references, err: [Inf, 0.3210588582390919, 0.24695216092374175, 0.23441879493556916, 0.2333389138802886] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [102, 34, 0]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(1, 102), (2, 34)]
*** center 2: selecting labels [1] (freq >= 2) [from [197, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [6, 145, 16]]
** centroid: 3, normalized-entropy: 0.4249596140655402, [(1, 6), (2, 145), (3, 16)]
finished with 6 centroids; started with 3
[ Info: ("class distribution: ", Dict(2 => 365,3 => 36,1 => 599), Dict(2 => 368,3 => 42,1 => 590))
[ Info: ===== scores for single classifier: {"micro_f1":0.917,"precision":0.917,"recall":0.917,"macro_recall":0.927545443380005,"macro_f1":0.8318276813955011,"accuracy":0.917,"class_f1":{"2":0.8759342301943199,"3":0.6511627906976745,"1":0.9683860232945091},"class_precision":{"2":0.973421926910299,"3":0.4827586206896552,"1":0.9509803921568627},"class_recall":{"2":0.7961956521739131,"3":1.0,"1":0.9864406779661017}}
[ Info: ===== scores for 1: {"micro_f1":0.9,"precision":0.9,"recall":0.9,"macro_recall":0.9264615573569147,"macro_f1":0.8545473383522513,"accuracy":0.9,"class_f1":{"2":0.8641304347826086,"3":0.7636363636363637,"1":0.9358752166377817},"class_precision":{"2":0.8641304347826086,"3":0.6176470588235294,"1":0.9574468085106383},"class_recall":{"2":0.8641304347826086,"3":1.0,"1":0.9152542372881356}}
[ Info: ===== scores for 5: {"micro_f1":0.92,"precision":0.92,"recall":0.92,"macro_recall":0.938442643085237,"macro_f1":0.8729616989002654,"accuracy":0.92,"class_f1":{"2":0.888888888888889,"3":0.7777777777777778,"1":0.9522184300341296},"class_precision":{"2":0.9090909090909091,"3":0.6363636363636364,"1":0.9587628865979382},"class_recall":{"2":0.8695652173913043,"3":1.0,"1":0.9457627118644067}}
[ Info: ===== scores for 7: {"micro_f1":0.934,"precision":0.934,"recall":0.934,"macro_recall":0.9480563743551952,"macro_f1":0.885444799374732,"accuracy":0.934,"class_f1":{"2":0.9078212290502793,"3":0.7850467289719627,"1":0.9634664401019541},"class_precision":{"2":0.9339080459770115,"3":0.6461538461538462,"1":0.9659284497444633},"class_recall":{"2":0.8831521739130435,"3":1.0,"1":0.9610169491525423}}
[ Info: ===== scores for 9: {"micro_f1":0.932,"precision":0.932,"recall":0.932,"macro_recall":0.9465856055023337,"macro_f1":0.8817969149174257,"accuracy":0.932,"class_f1":{"2":0.9050279329608939,"3":0.7777777777777778,"1":0.9625850340136054},"class_precision":{"2":0.9310344827586207,"3":0.6363636363636364,"1":0.9658703071672355},"class_recall":{"2":0.8804347826086957,"3":1.0,"1":0.9593220338983051}}
[ Info: ===== scores for 11: {"micro_f1":0.941,"precision":0.941,"recall":0.941,"macro_recall":0.9533744780152297,"macro_f1":0.8885677451688313,"accuracy":0.941,"class_f1":{"2":0.9177126917712692,"3":0.7777777777777778,"1":0.9702127659574468},"class_precision":{"2":0.9426934097421203,"3":0.6363636363636364,"1":0.9743589743589743},"class_recall":{"2":0.8940217391304348,"3":1.0,"1":0.9661016949152542}}
(score = 0.905, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.905, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.9, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.9, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.918, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.918, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.917, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.917, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.928, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.928, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.92, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.92, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.932, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.932, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.934, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.934, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.934,"k":7,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.934,"precision":0.934,"recall":0.934,"macro_recall":0.9480563743551952,"macro_f1":0.885444799374732,"accuracy":0.934,"class_f1":{"2":0.9078212290502793,"3":0.7850467289719627,"1":0.9634664401019541},"class_precision":{"2":0.9339080459770115,"3":0.6461538461538462,"1":0.9659284497444633},"class_recall":{"2":0.8831521739130435,"3":1.0,"1":0.9610169491525423}}
Test Summary: | Pass  Total
AKNC          |    8      8
[222, 1, 1, 1, 1, 2, 1, 6, 2, 1, 6, 1, 9, 18, 4, 6, 1, 4, 2, 9, 8, 1, 5, 14, 4, 11, 11, 28, 3, 10, 7, 9, 5, 7, 4, 2, 13, 4, 21, 2, 4, 21, 7, 17, 6, 3, 6, 12, 4, 80, 6, 36, 22, 28, 60, 6, 19, 13, 10, 8, 10, 10, 3, 4, 13, 23, 9, 42, 18, 18, 11, 16, 5, 6, 24, 8, 7, 9, 71, 32, 4, 25, 16, 43, 3, 2, 10, 4, 44, 28, 2, 11, 19, 72, 43, 8, 88, 14, 6, 5, 6, 26, 2, 25, 10, 28, 13, 30, 9, 25, 290, 5, 5, 10, 6, 9, 3, 5, 6, 3, 7, 63, 32, 101, 13, 20, 4, 28, 32, 27, 36, 38, 104, 36, 11, 4, 11, 6, 22, 7, 87, 26, 8, 135, 533, 19, 16, 31, 26, 15, 16, 1, 36, 27, 13, 27, 3, 17, 10, 21, 9, 28, 51, 9, 3, 48, 5, 45, 3, 21, 50, 251, 9, 49, 73, 7, 113, 37, 87, 19, 3, 20, 16, 3, 31, 8, 24, 45, 43, 10, 4, 27, 5, 44, 6, 4, 8, 10, 4, 10, 23, 50, 41, 60, 2, 43, 4, 29, 13, 17, 84, 22, 11, 5, 3, 18, 28, 8, 11, 10, 20, 51, 33, 9, 13, 3, 9, 98, 15, 4, 12, 9, 3, 73, 94, 18, 50, 15, 4, 7, 131, 26, 14, 15, 42, 25, 47, 45, 26, 10, 23, 4, 76, 3, 13, 54, 2, 209, 15, 24, 54, 85, 12, 54, 46, 56, 1, 19, 66, 44, 51, 8, 8, 238, 27, 6, 4, 31, 23, 9, 45, 304, 6, 86, 32, 12, 240, 34, 19, 23, 3, 10, 1203, 187, 16, 18, 16, 17, 9, 4]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.648, speedup = 0.28124167282084855, eval_ratio = 0.081854)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3707837301587303,"recall":0.3645833333333335,"f1":null,"seconds":0.00019762106239795685,"exhaustive_search_seconds":0.0003571026027202606,"evaluations":525.171875,"distances_sum":1739.1834343720836}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5381944444444443,"recall":0.5381944444444443,"f1":0.5381944444444443,"seconds":0.000355767086148262,"exhaustive_search_seconds":0.0003571026027202606,"evaluations":745.8046875,"distances_sum":1640.4348540787623}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6553819444444441,"recall":0.6553819444444441,"f1":0.6553819444444441,"seconds":0.00045268237590789795,"exhaustive_search_seconds":0.0003571026027202606,"evaluations":872.4453125,"distances_sum":1588.2174019279728}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7274305555555551,"recall":0.7274305555555551,"f1":0.7274305555555551,"seconds":0.00074763223528862,"exhaustive_search_seconds":0.0003571026027202606,"evaluations":1048.265625,"distances_sum":1558.3422020820105}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7855902777777771,"recall":0.7855902777777771,"f1":0.7855902777777771,"seconds":0.0006680581718683243,"exhaustive_search_seconds":0.0003571026027202606,"evaluations":1179.6640625,"distances_sum":1539.215995704604}
KCenters.DeloneInvIndex> reached performance {"precision":0.8255208333333323,"recall":0.8255208333333323,"f1":0.8255208333333323,"seconds":0.0007879398763179779,"exhaustive_search_seconds":0.0003571026027202606,"evaluations":1293.421875,"distances_sum":1527.0708134249858}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8169999999999998, speedup = 0.494826061913118, eval_ratio = 0.12203299999999999)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
