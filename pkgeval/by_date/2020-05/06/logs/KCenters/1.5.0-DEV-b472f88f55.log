Julia Version 1.5.0-DEV.862
Commit b472f88f55 (2020-05-06 01:04 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed MappedArrays ──────────────── v0.2.2
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Compat ────────────────────── v3.9.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.2
  Installed DataStructures ────────────── v0.17.15
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed DataFrames ────────────────── v0.20.2
  Installed DataAPI ───────────────────── v1.3.0
  Installed Tables ────────────────────── v1.0.4
  Installed PooledArrays ──────────────── v0.5.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Missings ──────────────────── v0.4.3
  Installed OrderedCollections ────────── v1.2.0
  Installed JSON ──────────────────────── v0.21.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLDataUtils ───────────────── v0.5.1
  Installed SimilaritySearch ──────────── v0.3.19
  Installed Reexport ──────────────────── v0.2.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed LearnBase ─────────────────── v0.2.2
  Installed TableTraits ───────────────── v1.0.0
  Installed MLDataPattern ─────────────── v0.5.3
  Installed StatsBase ─────────────────── v0.32.2
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.9.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.15
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.2
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_CpZo4G/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_CpZo4G/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.9.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.932025450070699
[ Info: 0.8302954188982645
[ Info: 0.555438105414311
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33257337726652625
mean(cdnet.distances) = 0.35732760523756346
mean(crand.distances) = 0.34521275833249093
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5634765625, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5634765625,"f1":0.7058656621156627,"seconds":4.9192458391189575e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.203125,"distances_sum":1643.0605731763}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1904296875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1904296875,"f1":null,"seconds":3.7532299757003784e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":6.8359375,"distances_sum":586.8645346329873}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.8708052364302369,"seconds":9.097158908843994e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.6796875,"distances_sum":2478.0708685087025}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7861328125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7861328125,"f1":0.8708052364302369,"seconds":9.097158908843994e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.6796875,"distances_sum":2478.0708685087025}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9430147977022983,"seconds":6.172806024551392e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.8671875,"distances_sum":2982.6646415481428}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9224447427572432,"seconds":6.077811121940613e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.8046875,"distances_sum":2835.048684892993}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9599931318681325,"seconds":6.340444087982178e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9296875,"distances_sum":3122.775049365973}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.908737096237097,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.875,"distances_sum":2700.4581556189746}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9599931318681325,"seconds":6.340444087982178e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9296875,"distances_sum":3122.775049365973}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9798363095238098,"seconds":6.3925981521606445e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.984375,"distances_sum":3284.9886669653424}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":8,"bsize":12}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9796130952380954,"seconds":5.695968866348267e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.984375,"distances_sum":3274.6817842691316}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9693509615384617,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9296875,"distances_sum":3210.761620947977}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9676167582417587,"seconds":6.310641765594482e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.921875,"distances_sum":3208.231748703309}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":11,"bsize":11}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.96211652930403,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9921875,"distances_sum":3100.688576319064}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9753720238095241,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9609375,"distances_sum":3267.1681437671423}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9615384615384619,"seconds":5.695968866348267e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9453125,"distances_sum":3114.4986459352685}, best_list's length: 14, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9703525641025645,"seconds":6.6943466663360596e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9453125,"distances_sum":3204.9974895831897}, best_list's length: 15, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9798363095238098,"seconds":6.3925981521606445e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.984375,"distances_sum":3284.9886669653424}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9798363095238098,"seconds":6.3925981521606445e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.984375,"distances_sum":3284.9886669653424}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1689453125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1689453125,"f1":null,"seconds":3.162771463394165e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":4.5859375,"distances_sum":513.3593477780802}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1630859375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1630859375,"f1":null,"seconds":3.1329691410064697e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":4.4765625,"distances_sum":469.19636555292016}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8651822136197145,"seconds":5.140900611877441e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.5234375,"distances_sum":2265.263121217911}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7802734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7802734375,"f1":0.8651822136197145,"seconds":5.140900611877441e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.5234375,"distances_sum":2265.263121217911}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9129464285714292,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.59375,"distances_sum":2617.6796132872983}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9544127747252753,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8125,"distances_sum":2895.0730064082522}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9544127747252753,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8125,"distances_sum":2895.0730064082522}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":4,"bsize":13}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9761904761904765,"seconds":6.12996518611908e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9375,"distances_sum":3048.2810009344403}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9723786630036633,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.890625,"distances_sum":3033.992575728618}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9730483058608062,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.90625,"distances_sum":3034.944400518584}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9591575091575097,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8359375,"distances_sum":2935.1464145442483}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9761904761904765,"seconds":6.12996518611908e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9375,"distances_sum":3048.2810009344403}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9761904761904765,"seconds":6.12996518611908e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9375,"distances_sum":3048.2810009344403}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.490234375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.490234375,"f1":0.6420183982683988,"seconds":3.8929283618927e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.40625,"distances_sum":1373.4685428821888}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.490234375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.490234375,"f1":0.6420183982683988,"seconds":3.8929283618927e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.40625,"distances_sum":1373.4685428821888}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8678467365967374,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.0859375,"distances_sum":2258.5849920994656}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7822265625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7822265625,"f1":0.8678467365967374,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.0859375,"distances_sum":2258.5849920994656}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9494276556776562,"seconds":5.427747964859009e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.671875,"distances_sum":2851.6762038104725}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.8968645937395945,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.3046875,"distances_sum":2447.588690016848}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9494276556776562,"seconds":5.427747964859009e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.671875,"distances_sum":2851.6762038104725}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91015625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9494276556776562,"seconds":5.427747964859009e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.671875,"distances_sum":2851.6762038104725}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7158203125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7158203125,"f1":0.822329233266734,"seconds":4.9602240324020386e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":7.9375,"distances_sum":2100.3154634462994}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.48046875, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.48046875,"f1":0.6340478965478972,"seconds":4.058703780174255e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":6.296875,"distances_sum":1390.796538993181}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7158203125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7158203125,"f1":0.822329233266734,"seconds":4.9602240324020386e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":7.9375,"distances_sum":2100.3154634462994}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9245135073260081,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.546875,"distances_sum":2610.588533671544}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8583984375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8583984375,"f1":0.9143606393606403,"seconds":4.317611455917358e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.484375,"distances_sum":2587.505354462252}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9115759240759248,"seconds":4.377216100692749e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.6015625,"distances_sum":2517.2745605251794}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8681640625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8681640625,"f1":0.9245135073260081,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.546875,"distances_sum":2610.588533671544}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9657451923076925,"seconds":4.591420292854309e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.828125,"distances_sum":2890.975206583573}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9316163003663009,"seconds":4.37907874584198e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.625,"distances_sum":2653.740776778718}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9533169955044958,"seconds":4.639849066734314e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8203125,"distances_sum":2781.6469964215057}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9599931318681323,"seconds":5.321577191352844e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.7734375,"distances_sum":2867.1909535304976}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9657451923076925,"seconds":4.591420292854309e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.828125,"distances_sum":2890.975206583573}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9657451923076925,"seconds":4.591420292854309e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.828125,"distances_sum":2890.975206583573}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5654296875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5654296875,"f1":0.7045464951714957,"seconds":4.4424086809158325e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.0390625,"distances_sum":1516.7369139095908}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.556640625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.556640625,"f1":0.6990259740259747,"seconds":3.905966877937317e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.0546875,"distances_sum":1455.300901871062}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5654296875,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.5654296875,"f1":0.7045464951714957,"seconds":4.4424086809158325e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.0390625,"distances_sum":1516.7369139095908}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9067880036630045,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.4453125,"distances_sum":2488.3564784473842}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7392578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7392578125,"f1":0.8389412670662676,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.078125,"distances_sum":2085.5799147995513}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.705078125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.705078125,"f1":0.816840451215452,"seconds":4.67151403427124e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.8828125,"distances_sum":1992.6552338549525}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8931755744255753,"seconds":4.718080163002014e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.34375,"distances_sum":2424.340279135581}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.7931951728826737,"seconds":5.781650543212891e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.75,"distances_sum":1869.0326377795407}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8369140625,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8369140625,"f1":0.9067880036630045,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.4453125,"distances_sum":2488.3564784473842}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9458218864468869,"seconds":7.009133696556091e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8125,"distances_sum":2747.513773614655}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9643257783882786,"seconds":7.06501305103302e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8515625,"distances_sum":2907.4928497557676}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9318051739926747,"seconds":5.545094609260559e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.84375,"distances_sum":2614.8164699851463}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9448577464202468,"seconds":6.726011633872986e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.734375,"distances_sum":2784.4472635178927}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9643257783882786,"seconds":7.06501305103302e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8515625,"distances_sum":2907.4928497557676}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9643257783882786,"seconds":7.06501305103302e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8515625,"distances_sum":2907.4928497557676}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1435546875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1435546875,"f1":null,"seconds":2.2202730178833008e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":4.2265625,"distances_sum":444.20338991125334}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3095703125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3095703125,"f1":null,"seconds":3.5222619771957397e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":4.9453125,"distances_sum":895.4591108222611}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8539757117882126,"seconds":6.332993507385254e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":8.2109375,"distances_sum":2208.7879434681035}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7587890625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7587890625,"f1":0.8539757117882126,"seconds":6.332993507385254e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":8.2109375,"distances_sum":2208.7879434681035}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9577609890109897,"seconds":6.075948476791382e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":8.8203125,"distances_sum":2864.8325819218016}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9577609890109897,"seconds":6.075948476791382e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":8.8203125,"distances_sum":2864.8325819218016}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9654075091575095,"seconds":5.368143320083618e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":8.890625,"distances_sum":2943.1388482977486}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9654075091575095,"seconds":5.368143320083618e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":8.890625,"distances_sum":2943.1388482977486}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9654075091575095,"seconds":5.368143320083618e-6,"exhaustive_search_seconds":1.8421560525894165e-6,"evaluations":8.890625,"distances_sum":2943.1388482977486}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.568359375,"f1":null,"seconds":3.03611159324646e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.078125,"distances_sum":1396.0377334941327}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1767578125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1767578125,"f1":null,"seconds":3.25031578540802e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":5.5234375,"distances_sum":427.3680905051329}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.568359375,"state":{"ssize":3,"bsize":3},"perf":{"precision":null,"recall":0.568359375,"f1":null,"seconds":3.03611159324646e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.078125,"distances_sum":1396.0377334941327}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9187843406593414,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.4453125,"distances_sum":2411.94638834672}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8564453125,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.8564453125,"f1":0.9187843406593414,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.4453125,"distances_sum":2411.94638834672}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9233688186813195,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.390625,"distances_sum":2484.593896288035}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8662109375,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.8662109375,"f1":0.9233688186813195,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.390625,"distances_sum":2484.593896288035}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8662109375,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.8662109375,"f1":0.9233688186813195,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.390625,"distances_sum":2484.593896288035}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5478515625, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5478515625,"f1":0.6906763375513381,"seconds":4.326924681663513e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":6.4296875,"distances_sum":1193.4019130583515}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8628361222111232,"seconds":8.180737495422363e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":7.8984375,"distances_sum":1895.7301872554565}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3642578125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3642578125,"f1":null,"seconds":3.086403012275696e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":5.7265625,"distances_sum":752.3605740403639}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7724609375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7724609375,"f1":0.8628361222111232,"seconds":8.180737495422363e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":7.8984375,"distances_sum":1895.7301872554565}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9671703296703303,"seconds":5.321577191352844e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.90625,"distances_sum":2596.3714279000123}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9612580128205133,"seconds":5.302950739860535e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.90625,"distances_sum":2540.1172456792974}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9671703296703303,"seconds":5.321577191352844e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.90625,"distances_sum":2596.3714279000123}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":3,"bsize":13}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9778674450549454,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.9609375,"distances_sum":2661.1841904497383}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9682692307692313,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.90625,"distances_sum":2635.5012498395376}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9739068223443228,"seconds":6.541609764099121e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.9375,"distances_sum":2630.1809299056167}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":3,"bsize":13},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9778674450549454,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.9609375,"distances_sum":2661.1841904497383}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":3,"bsize":13},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9778674450549454,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.9609375,"distances_sum":2661.1841904497383}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5869140625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5869140625,"f1":0.7194997710622716,"seconds":4.630535840988159e-6,"exhaustive_search_seconds":3.4067779779434204e-6,"evaluations":6.8984375,"distances_sum":1346.3582657159473}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.419921875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.419921875,"f1":null,"seconds":3.766268491744995e-6,"exhaustive_search_seconds":3.4067779779434204e-6,"evaluations":6.28125,"distances_sum":886.9829017907332}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8017578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.8017578125,"f1":0.8813139985014993,"seconds":3.648921847343445e-6,"exhaustive_search_seconds":3.4067779779434204e-6,"evaluations":7.9765625,"distances_sum":2064.106830191793}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8017578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.8017578125,"f1":0.8813139985014993,"seconds":3.648921847343445e-6,"exhaustive_search_seconds":3.4067779779434204e-6,"evaluations":7.9765625,"distances_sum":2064.106830191793}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9505265567765576,"seconds":4.157423973083496e-6,"exhaustive_search_seconds":3.4067779779434204e-6,"evaluations":8.8046875,"distances_sum":2561.606450066053}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9358173076923082,"seconds":4.1406601667404175e-6,"exhaustive_search_seconds":3.4067779779434204e-6,"evaluations":8.8203125,"distances_sum":2428.056671067328}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.903675491175492,"seconds":3.7550926208496094e-6,"exhaustive_search_seconds":3.4067779779434204e-6,"evaluations":8.0234375,"distances_sum":2228.675822955721}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9135359432234438,"seconds":3.874301910400391e-6,"exhaustive_search_seconds":3.4067779779434204e-6,"evaluations":8.140625,"distances_sum":2320.3680329268386}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9505265567765576,"seconds":4.157423973083496e-6,"exhaustive_search_seconds":3.4067779779434204e-6,"evaluations":8.8046875,"distances_sum":2561.606450066053}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9572973901098905,"seconds":4.16487455368042e-6,"exhaustive_search_seconds":3.4067779779434204e-6,"evaluations":8.7890625,"distances_sum":2637.26490534914}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.968438332500833,"seconds":6.251037120819092e-6,"exhaustive_search_seconds":3.4067779779434204e-6,"evaluations":8.890625,"distances_sum":2697.1901735519623}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9659283424908429,"seconds":4.349276423454285e-6,"exhaustive_search_seconds":3.4067779779434204e-6,"evaluations":8.9296875,"distances_sum":2657.3058728482397}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9726934523809526,"seconds":6.532296538352966e-6,"exhaustive_search_seconds":3.4067779779434204e-6,"evaluations":8.921875,"distances_sum":2732.332090782232}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9699977106227111,"seconds":5.5301934480667114e-6,"exhaustive_search_seconds":3.4067779779434204e-6,"evaluations":8.9140625,"distances_sum":2689.1641988040874}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9726934523809526,"seconds":6.532296538352966e-6,"exhaustive_search_seconds":3.4067779779434204e-6,"evaluations":8.921875,"distances_sum":2732.332090782232}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9726934523809526,"seconds":6.532296538352966e-6,"exhaustive_search_seconds":3.4067779779434204e-6,"evaluations":8.921875,"distances_sum":2732.332090782232}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3662109375, conf: {"ssize":4,"bsize":2}, perf: {"precision":1.0,"recall":0.3662109375,"f1":0.5150391275391273,"seconds":2.4586915969848633e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.0390625,"distances_sum":851.6514632799777}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.203125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.203125,"f1":null,"seconds":2.3078173398971558e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.21875,"distances_sum":411.3461527516563}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.7948556651681659,"seconds":4.664063453674316e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.7578125,"distances_sum":1627.4026040036997}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6796875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6796875,"f1":0.7948556651681659,"seconds":4.664063453674316e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.7578125,"distances_sum":1627.4026040036997}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9082162629037638,"seconds":3.9692968130111694e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.4453125,"distances_sum":2210.9070674030845}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8427734375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8427734375,"f1":0.9082162629037638,"seconds":3.9692968130111694e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.4453125,"distances_sum":2210.9070674030845}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9130067848817858,"seconds":3.943219780921936e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.40625,"distances_sum":2204.8124552954137}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8505859375,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.8505859375,"f1":0.9130067848817858,"seconds":3.943219780921936e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.40625,"distances_sum":2204.8124552954137}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8505859375,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.8505859375,"f1":0.9130067848817858,"seconds":3.943219780921936e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.40625,"distances_sum":2204.8124552954137}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8691567113442122,"seconds":5.329027771949768e-6,"exhaustive_search_seconds":1.1343508958816528e-6,"evaluations":8.234375,"distances_sum":2036.0526499756756}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.560546875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.560546875,"f1":0.6951468670218675,"seconds":4.421919584274292e-6,"exhaustive_search_seconds":1.1343508958816528e-6,"evaluations":7.4375,"distances_sum":1267.2215004716645}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7880859375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7880859375,"f1":0.8691567113442122,"seconds":5.329027771949768e-6,"exhaustive_search_seconds":1.1343508958816528e-6,"evaluations":8.234375,"distances_sum":2036.0526499756756}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9580986721611724,"seconds":4.3120235204696655e-6,"exhaustive_search_seconds":1.1343508958816528e-6,"evaluations":8.8203125,"distances_sum":2577.0305660124527}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9580986721611724,"seconds":4.3120235204696655e-6,"exhaustive_search_seconds":1.1343508958816528e-6,"evaluations":8.8203125,"distances_sum":2577.0305660124527}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9621680402930407,"seconds":5.474314093589783e-6,"exhaustive_search_seconds":1.1343508958816528e-6,"evaluations":8.8046875,"distances_sum":2610.7691906443733}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9705929487179492,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.1343508958816528e-6,"evaluations":8.8828125,"distances_sum":2642.7459446229864}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9705929487179492,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.1343508958816528e-6,"evaluations":8.8828125,"distances_sum":2642.7459446229864}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9705929487179492,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.1343508958816528e-6,"evaluations":8.8828125,"distances_sum":2642.7459446229864}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5595703125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5595703125,"f1":0.6958380161505165,"seconds":4.4871121644973755e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.4140625,"distances_sum":1354.3142962802365}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3486328125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3486328125,"f1":null,"seconds":3.637745976448059e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":5.8046875,"distances_sum":800.1338822941734}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5595703125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5595703125,"f1":0.6958380161505165,"seconds":4.4871121644973755e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.4140625,"distances_sum":1354.3142962802365}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9062187812187819,"seconds":3.682449460029602e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.515625,"distances_sum":2325.512978778174}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8427734375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8427734375,"f1":0.9062187812187819,"seconds":3.682449460029602e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.515625,"distances_sum":2325.512978778174}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.942347756410257,"seconds":3.475695848464966e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.703125,"distances_sum":2542.244859382596}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9364500083250087,"seconds":3.3974647521972656e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.5859375,"distances_sum":2544.0365309679464}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.900390625,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.900390625,"f1":0.942347756410257,"seconds":3.475695848464966e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.703125,"distances_sum":2542.244859382596}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.900390625,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.900390625,"f1":0.942347756410257,"seconds":3.475695848464966e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.703125,"distances_sum":2542.244859382596}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.7849561896436905,"seconds":4.2282044887542725e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.390625,"distances_sum":1632.2410738436408}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8625978188478198,"seconds":4.813075065612793e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.828125,"distances_sum":1990.0610682042613}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.771484375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.771484375,"f1":0.8625978188478198,"seconds":4.813075065612793e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.828125,"distances_sum":1990.0610682042613}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8942744755244763,"seconds":5.3960829973220825e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.109375,"distances_sum":2210.3745851018793}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9287119130869138,"seconds":6.668269634246826e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.5234375,"distances_sum":2463.761665458473}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9416208791208798,"seconds":5.273148417472839e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.6015625,"distances_sum":2535.5210616898758}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9494651182151187,"seconds":6.055459380149841e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.6796875,"distances_sum":2553.679185453337}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9494651182151187,"seconds":6.055459380149841e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.6796875,"distances_sum":2553.679185453337}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9567593864468867,"seconds":5.492940545082092e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.7578125,"distances_sum":2626.764269496406}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.976751373626374,"seconds":5.492940545082092e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.875,"distances_sum":2759.477290960097}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9512362637362644,"seconds":5.09992241859436e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.7265625,"distances_sum":2584.364381030597}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9641769688644692,"seconds":5.688518285751343e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.78125,"distances_sum":2684.2308472058753}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9712053571428575,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8984375,"distances_sum":2699.8301800518193}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.956604853479854,"seconds":5.2656978368759155e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.765625,"distances_sum":2626.63439509723}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.976751373626374,"seconds":5.492940545082092e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.875,"distances_sum":2759.477290960097}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.976751373626374,"seconds":5.492940545082092e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.875,"distances_sum":2759.477290960097}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5634765625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5634765625,"f1":0.7085064241314247,"seconds":4.015862941741943e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.203125,"distances_sum":1200.7007140018823}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.852144730269731,"seconds":4.859641194343567e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.375,"distances_sum":1712.9012392861673}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.626953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.626953125,"f1":0.7606742216117224,"seconds":4.071742296218872e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.4609375,"distances_sum":1371.802773261555}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.755859375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.755859375,"f1":0.852144730269731,"seconds":4.859641194343567e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.375,"distances_sum":1712.9012392861673}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8578879453879462,"seconds":4.841014742851257e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.3828125,"distances_sum":1771.2128067418187}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9596554487179492,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8515625,"distances_sum":2440.6263338940453}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9255125083250091,"seconds":5.213543772697449e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8125,"distances_sum":2189.439780592932}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9447146603396608,"seconds":6.688758730888367e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8359375,"distances_sum":2355.316577572662}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.93867902930403,"seconds":5.2694231271743774e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8828125,"distances_sum":2275.1421927680153}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9596554487179492,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8515625,"distances_sum":2440.6263338940453}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9775297619047622,"seconds":6.202608346939087e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.984375,"distances_sum":2546.165411216645}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9816620879120882,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.9453125,"distances_sum":2597.953973386845}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9730483058608062,"seconds":5.748122930526733e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.9765625,"distances_sum":2513.835888553899}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.966796875,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9816620879120882,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.9453125,"distances_sum":2597.953973386845}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.966796875,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9816620879120882,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.9453125,"distances_sum":2597.953973386845}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.654296875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.654296875,"f1":0.7800081862581869,"seconds":3.6954879760742188e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.328125,"distances_sum":1480.14225578643}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2470703125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2470703125,"f1":null,"seconds":2.5369226932525635e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.3515625,"distances_sum":582.5669444084157}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.60546875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.60546875,"f1":0.7413900335775342,"seconds":3.0528753995895386e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.8203125,"distances_sum":1331.529965213497}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.654296875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.654296875,"f1":0.7800081862581869,"seconds":3.6954879760742188e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.328125,"distances_sum":1480.14225578643}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8610748626373634,"seconds":3.764405846595764e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.4375,"distances_sum":1855.101124493495}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.71875, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.71875,"f1":0.8289783133533142,"seconds":4.692003130912781e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.296875,"distances_sum":1660.1250842229406}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8556183399933408,"seconds":4.934147000312805e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.3828125,"distances_sum":1910.9636076261204}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9365785256410266,"seconds":5.016103386878967e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.828125,"distances_sum":2346.2216736040555}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.7916451603951612,"seconds":3.2633543014526367e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.453125,"distances_sum":1528.5642401230773}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.888671875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.888671875,"f1":0.9365785256410266,"seconds":5.016103386878967e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.828125,"distances_sum":2346.2216736040555}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9754292582417585,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9765625,"distances_sum":2640.1868345031453}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.95101304945055,"seconds":5.386769771575928e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.90625,"distances_sum":2457.34986783701}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9408596611721616,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.828125,"distances_sum":2412.0083698338553}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9555689102564109,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8828125,"distances_sum":2486.2749538100884}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9754292582417585,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9765625,"distances_sum":2640.1868345031453}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9754292582417585,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9765625,"distances_sum":2640.1868345031453}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5732421875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5732421875,"f1":0.715078671328672,"seconds":2.5760382413864136e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":7.1171875,"distances_sum":1262.5641782022194}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8731232309357317,"seconds":3.1422823667526245e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":8.1328125,"distances_sum":1919.7696188659045}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2509765625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2509765625,"f1":null,"seconds":2.037733793258667e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":6.6484375,"distances_sum":599.3081381129641}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7841796875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7841796875,"f1":0.8731232309357317,"seconds":3.1422823667526245e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":8.1328125,"distances_sum":1919.7696188659045}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9586023351648354,"seconds":3.933906555175781e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":8.96875,"distances_sum":2522.5747043460055}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9638450091575096,"seconds":4.265457391738892e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":8.9375,"distances_sum":2572.8518234041917}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8956278096903105,"seconds":3.928318619728088e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":8.6875,"distances_sum":2093.7322089110958}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9638450091575096,"seconds":4.265457391738892e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":8.9375,"distances_sum":2572.8518234041917}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9697229853479856,"seconds":6.252899765968323e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":8.953125,"distances_sum":2625.510925178125}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9733287545787552,"seconds":4.677101969718933e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":8.9921875,"distances_sum":2642.690231266052}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.964755036630037,"seconds":6.545335054397583e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":8.9140625,"distances_sum":2598.084707350695}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9733287545787552,"seconds":4.677101969718933e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":8.9921875,"distances_sum":2642.690231266052}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9733287545787552,"seconds":4.677101969718933e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":8.9921875,"distances_sum":2642.690231266052}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.15625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.15625,"f1":null,"seconds":1.9222497940063477e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":4.1796875,"distances_sum":371.2686411498409}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.85634833916084,"seconds":3.6600977182388306e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.0390625,"distances_sum":1932.2949425118911}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1611328125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1611328125,"f1":null,"seconds":1.9613653421401978e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":4.3125,"distances_sum":412.32985519337933}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.720703125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.720703125,"f1":0.8276343448218456,"seconds":6.424263119697571e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":7.796875,"distances_sum":1735.1704415020924}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.85634833916084,"seconds":3.6600977182388306e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.0390625,"distances_sum":1932.2949425118911}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.947292811355312,"seconds":5.125999450683594e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.71875,"distances_sum":2490.0193043038375}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9476820054945059,"seconds":4.975125193595886e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.71875,"distances_sum":2484.546140890714}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.919803113553114,"seconds":5.120411515235901e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.59375,"distances_sum":2314.432263647845}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.947292811355312,"seconds":5.125999450683594e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.71875,"distances_sum":2490.0193043038375}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9696085164835166,"seconds":4.6137720346450806e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.8125,"distances_sum":2671.741583047498}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9544184981684986,"seconds":6.619840860366821e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.7109375,"distances_sum":2568.3264083930535}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9719322344322348,"seconds":5.550682544708252e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.8984375,"distances_sum":2668.396332500024}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9638621794871802,"seconds":5.1818788051605225e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.7421875,"distances_sum":2647.854227713348}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9633756868131874,"seconds":5.1800161600112915e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.828125,"distances_sum":2614.6703398971717}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9719322344322348,"seconds":5.550682544708252e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.8984375,"distances_sum":2668.396332500024}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9719322344322348,"seconds":5.550682544708252e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.8984375,"distances_sum":2668.396332500024}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.162109375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.162109375,"f1":null,"seconds":2.5890767574310303e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":4.515625,"distances_sum":465.3516400813029}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3671875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3671875,"f1":null,"seconds":3.129243850708008e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":5.8515625,"distances_sum":932.3273800978214}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3671875,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.3671875,"f1":null,"seconds":3.129243850708008e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":5.8515625,"distances_sum":932.3273800978214}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7275390625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7275390625,"f1":0.8313254453879463,"seconds":6.975606083869934e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":7.8828125,"distances_sum":1926.5963968442866}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7275390625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7275390625,"f1":0.8313254453879463,"seconds":6.975606083869934e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":7.8828125,"distances_sum":1926.5963968442866}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7275390625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7275390625,"f1":0.8313254453879463,"seconds":6.975606083869934e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":7.8828125,"distances_sum":1926.5963968442866}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.7275390625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7275390625,"f1":0.8313254453879463,"seconds":6.975606083869934e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":7.8828125,"distances_sum":1926.5963968442866}}, n: 9
mean(cfft.distances) = 0.33675587423630077
mean(cdnet.distances) = 0.37671221330907834
mean(crand.distances) = 0.3626469620029577
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8444444444444444
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9355555555555556
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8866666666666667
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.888888888888889
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9044444444444445
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9244444444444445
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9466666666666667
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8777777777777778
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8622222222222221
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8888888888888888
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8799999999999999
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9288888888888889
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.88
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8999999999999999
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9199999999999999
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9244444444444445
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9222222222222222
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8688888888888888
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9311111111111111
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9288888888888889
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8822222222222221
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9177777777777777
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8533333333333332
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9266666666666667
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 9]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 9)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 4, 7]]
** centroid: 12, normalized-entropy: 0.9456603046006401, [(2, 4), (3, 7)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 3, 2, 3, 3, 2, 1, 2, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 9]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 9)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 4, 7]]
** centroid: 12, normalized-entropy: 0.9456603046006401, [(2, 4), (3, 7)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 3, 2, 3, 3, 2, 1, 2, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 9]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 9)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 4, 7]]
** centroid: 12, normalized-entropy: 0.9456603046006401, [(2, 4), (3, 7)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 3, 2, 3, 3, 2, 1, 2, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 9]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 9)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 4, 7]]
** centroid: 12, normalized-entropy: 0.9456603046006401, [(2, 4), (3, 7)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 3, 2, 3, 3, 2, 1, 2, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 9]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 9)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 4, 7]]
** centroid: 12, normalized-entropy: 0.9456603046006401, [(2, 4), (3, 7)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 3, 2, 3, 3, 2, 1, 2, 3]
acc = 0.9333333333333333
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 9]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 9)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 4, 7]]
** centroid: 12, normalized-entropy: 0.9456603046006401, [(2, 4), (3, 7)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 3, 2, 3, 3, 2, 1, 2, 3]
acc = 0.94
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 9]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 9)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 4, 7]]
** centroid: 12, normalized-entropy: 0.9456603046006401, [(2, 4), (3, 7)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 3, 2, 3, 3, 2, 1, 2, 3]
acc = 0.98
*** finished computation of 12 references, err: [Inf, 0.6141229119896888] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 30, 2]]
** centroid: 1, normalized-entropy: 0.3372900666170139, [(2, 30), (3, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 7, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 9, 2]]
** centroid: 9, normalized-entropy: 0.6840384356390419, [(2, 9), (3, 2)]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 1, 1]]
** centroid: 10, normalized-entropy: 1.0, [(2, 1), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
finished with 15 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.44296364273943073] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44296364273943073, 0.270886097903232] ***
*** finished computation of 3 references, err: [Inf, 0.44296364273943073, 0.270886097903232] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [140, 81, 0]]
** centroid: 1, normalized-entropy: 0.947959244432382, [(1, 140), (2, 81)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [213, 30, 0]]
** centroid: 2, normalized-entropy: 0.5392163432092415, [(1, 213), (2, 30)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [31, 149, 22]]
** centroid: 3, normalized-entropy: 0.6859487918829394, [(1, 31), (2, 149), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.407152667697575] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.407152667697575, 0.31111882784747863] ***
*** starting iteration: 2; err: [Inf, 0.407152667697575, 0.31111882784747863] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.407152667697575, 0.31111882784747863, 0.29938580897600353] ***
*** starting iteration: 3; err: [Inf, 0.407152667697575, 0.31111882784747863, 0.29938580897600353] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.407152667697575, 0.31111882784747863, 0.29938580897600353, 0.29558392072392925] ***
*** finished computation of 3 references, err: [Inf, 0.407152667697575, 0.31111882784747863, 0.29938580897600353, 0.29558392072392925] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [81, 153, 22]]
** centroid: 1, normalized-entropy: 0.8034109493817544, [(1, 81), (2, 153), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [189, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [114, 107, 0]]
** centroid: 3, normalized-entropy: 0.9992761831031814, [(1, 114), (2, 107)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.28897388176112876] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28897388176112876, 0.23634029920541053] ***
*** finished computation of 3 references, err: [Inf, 0.28897388176112876, 0.23634029920541053] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [118, 73, 0]]
** centroid: 1, normalized-entropy: 0.9595802802716726, [(1, 118), (2, 73)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [25, 175, 15]]
** centroid: 2, normalized-entropy: 0.549348348465892, [(1, 25), (2, 175), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [247, 14, 0]]
** centroid: 3, normalized-entropy: 0.30166203063033736, [(1, 247), (2, 14)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.364120285993657] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.364120285993657, 0.235422821426443] ***
*** finished computation of 3 references, err: [Inf, 0.364120285993657, 0.235422821426443] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 174, 27]]
** centroid: 1, normalized-entropy: 0.569190343735683, [(2, 174), (3, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [213, 32, 0]]
** centroid: 2, normalized-entropy: 0.5591148814184744, [(1, 213), (2, 32)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [181, 40, 0]]
** centroid: 3, normalized-entropy: 0.682249937864035, [(1, 181), (2, 40)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23763357019107845] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23763357019107845, 0.17286227347941752] ***
*** starting iteration: 2; err: [Inf, 0.23763357019107845, 0.17286227347941752] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23763357019107845, 0.17286227347941752, 0.15844371703847707] ***
*** starting iteration: 3; err: [Inf, 0.23763357019107845, 0.17286227347941752, 0.15844371703847707] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23763357019107845, 0.17286227347941752, 0.15844371703847707, 0.15112069292083471] ***
*** finished computation of 7 references, err: [Inf, 0.23763357019107845, 0.17286227347941752, 0.15844371703847707, 0.15112069292083471] ***
*** center 1: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 79, 22]]
** centroid: 3, normalized-entropy: 0.756170148929897, [(2, 79), (3, 22)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [22, 65, 0]]
** centroid: 4, normalized-entropy: 0.8158009273789572, [(1, 22), (2, 65)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [17, 94, 0]]
** centroid: 5, normalized-entropy: 0.6176751423955683, [(1, 17), (2, 94)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [70, 18, 0]]
** centroid: 6, normalized-entropy: 0.7309263775906009, [(1, 70), (2, 18)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [71, 4, 0]]
** centroid: 7, normalized-entropy: 0.3003914173647818, [(1, 71), (2, 4)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22844921846383962] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22844921846383962, 0.16455409891423078] ***
*** starting iteration: 2; err: [Inf, 0.22844921846383962, 0.16455409891423078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22844921846383962, 0.16455409891423078, 0.15139282291204945] ***
*** starting iteration: 3; err: [Inf, 0.22844921846383962, 0.16455409891423078, 0.15139282291204945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22844921846383962, 0.16455409891423078, 0.15139282291204945, 0.1488990765071936] ***
*** finished computation of 7 references, err: [Inf, 0.22844921846383962, 0.16455409891423078, 0.15139282291204945, 0.1488990765071936] ***
*** center 1: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [126, 11, 0]]
** centroid: 3, normalized-entropy: 0.4032071328437401, [(1, 126), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [59, 3, 0]]
** centroid: 4, normalized-entropy: 0.2795055456366802, [(1, 59), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 78, 0]]
** centroid: 5, normalized-entropy: 0.7300166301457938, [(1, 20), (2, 78)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 94, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 76, 15]]
** centroid: 7, normalized-entropy: 0.6457523329916605, [(2, 76), (3, 15)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21721243459907272] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21721243459907272, 0.1745636038275539] ***
*** starting iteration: 2; err: [Inf, 0.21721243459907272, 0.1745636038275539] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21721243459907272, 0.1745636038275539, 0.16290803141528923] ***
*** starting iteration: 3; err: [Inf, 0.21721243459907272, 0.1745636038275539, 0.16290803141528923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21721243459907272, 0.1745636038275539, 0.16290803141528923, 0.15922742088170333] ***
*** finished computation of 7 references, err: [Inf, 0.21721243459907272, 0.1745636038275539, 0.16290803141528923, 0.15922742088170333] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [72, 17, 0]]
** centroid: 1, normalized-entropy: 0.7035821005719904, [(1, 72), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [86, 63, 0]]
** centroid: 2, normalized-entropy: 0.9827429896911875, [(1, 86), (2, 63)]
*** center 3: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 73, 27]]
** centroid: 4, normalized-entropy: 0.8414646362081756, [(2, 73), (3, 27)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 66, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [32, 27, 0]]
** centroid: 6, normalized-entropy: 0.9948131754904235, [(1, 32), (2, 27)]
*** center 7: selecting labels [1] (freq >= 1) [from [128, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3645594187022128] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3645594187022128, 0.24349545845733928] ***
*** finished computation of 3 references, err: [Inf, 0.3645594187022128, 0.24349545845733928] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [26, 189, 22]]
** centroid: 1, normalized-entropy: 0.5858047086175546, [(1, 26), (2, 189), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [173, 71, 0]]
** centroid: 2, normalized-entropy: 0.8699884487678625, [(1, 173), (2, 71)]
*** center 3: selecting labels [1] (freq >= 2) [from [185, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2848214798940644] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2848214798940644, 0.23416637847928898] ***
*** finished computation of 3 references, err: [Inf, 0.2848214798940644, 0.23416637847928898] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 172, 15]]
** centroid: 1, normalized-entropy: 0.40293244521978305, [(2, 172), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [223, 46, 0]]
** centroid: 2, normalized-entropy: 0.659995716977254, [(1, 223), (2, 46)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [167, 44, 0]]
** centroid: 3, normalized-entropy: 0.7386650272701816, [(1, 167), (2, 44)]
finished with 5 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30352910492859636] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30352910492859636, 0.2479041556456312] ***
*** finished computation of 3 references, err: [Inf, 0.30352910492859636, 0.2479041556456312] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [174, 9, 0]]
** centroid: 1, normalized-entropy: 0.28290479297989196, [(1, 174), (2, 9)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 151, 27]]
** centroid: 2, normalized-entropy: 0.6140419804242597, [(2, 151), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [220, 86, 0]]
** centroid: 3, normalized-entropy: 0.8568718104057056, [(1, 220), (2, 86)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.27126131652834806] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27126131652834806, 0.2312152796416535] ***
*** finished computation of 7 references, err: [Inf, 0.27126131652834806, 0.2312152796416535] ***
*** center 1: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [72, 16, 0]]
** centroid: 3, normalized-entropy: 0.6840384356390419, [(1, 72), (2, 16)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 59, 22]]
** centroid: 4, normalized-entropy: 0.8437582063121657, [(2, 59), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [33, 29, 0]]
** centroid: 5, normalized-entropy: 0.9969954265557693, [(1, 33), (2, 29)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [52, 79, 0]]
** centroid: 6, normalized-entropy: 0.9691364026876187, [(1, 52), (2, 79)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [79, 77, 0]]
** centroid: 7, normalized-entropy: 0.9998814320705912, [(1, 79), (2, 77)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22625172327829712] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22625172327829712, 0.19164741693017096] ***
*** finished computation of 7 references, err: [Inf, 0.22625172327829712, 0.19164741693017096] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 87, 5]]
** centroid: 1, normalized-entropy: 0.30458668852140236, [(2, 87), (3, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [31, 65, 0]]
** centroid: 2, normalized-entropy: 0.9075250687540451, [(1, 31), (2, 65)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [109, 6, 0]]
** centroid: 3, normalized-entropy: 0.295560777857315, [(1, 109), (2, 6)]
*** center 4: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [84, 29, 0]]
** centroid: 5, normalized-entropy: 0.8216292954053165, [(1, 84), (2, 29)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 75, 10]]
** centroid: 6, normalized-entropy: 0.5225593745369407, [(2, 75), (3, 10)]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25480807829310353] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25480807829310353, 0.20572484030166285] ***
*** finished computation of 7 references, err: [Inf, 0.25480807829310353, 0.20572484030166285] ***
*** center 1: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 80, 0]]
** centroid: 2, normalized-entropy: 0.9967916319816367, [(1, 70), (2, 80)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 22, 0]]
** centroid: 3, normalized-entropy: 0.8729882944709463, [(1, 53), (2, 22)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 97, 27]]
** centroid: 4, normalized-entropy: 0.7560228567532862, [(2, 97), (3, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [18, 28, 0]]
** centroid: 5, normalized-entropy: 0.9656361333706099, [(1, 18), (2, 28)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [52, 19, 0]]
** centroid: 6, normalized-entropy: 0.8380078505079931, [(1, 52), (2, 19)]
*** center 7: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2848605804338313] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2848605804338313, 0.20936747474523187] ***
*** finished computation of 7 references, err: [Inf, 0.2848605804338313, 0.20936747474523187] ***
*** center 1: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [90, 5, 0]]
** centroid: 2, normalized-entropy: 0.2974722489192896, [(1, 90), (2, 5)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [126, 68, 0]]
** centroid: 3, normalized-entropy: 0.9345275660736609, [(1, 126), (2, 68)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 114, 5]]
** centroid: 4, normalized-entropy: 0.25146396423889, [(2, 114), (3, 5)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [51, 16, 0]]
** centroid: 5, normalized-entropy: 0.7930490047779772, [(1, 51), (2, 16)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [32, 7, 0]]
** centroid: 6, normalized-entropy: 0.6789538995185759, [(1, 32), (2, 7)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 50, 17]]
** centroid: 7, normalized-entropy: 0.8171387756817725, [(2, 50), (3, 17)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.31272339827703616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31272339827703616, 0.20424609713611017] ***
*** finished computation of 7 references, err: [Inf, 0.31272339827703616, 0.20424609713611017] ***
*** center 1: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [16, 55, 0]]
** centroid: 2, normalized-entropy: 0.7698205808588191, [(1, 16), (2, 55)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [132, 28, 0]]
** centroid: 3, normalized-entropy: 0.6690158350565576, [(1, 132), (2, 28)]
*** center 4: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 65, 1]]
** centroid: 5, normalized-entropy: 0.11327430349709665, [(2, 65), (3, 1)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [73, 18, 0]]
** centroid: 6, normalized-entropy: 0.7175106531195438, [(1, 73), (2, 18)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 96, 14]]
** centroid: 7, normalized-entropy: 0.54991090463341, [(2, 96), (3, 14)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2402192794520972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2402192794520972, 0.20670489920931553] ***
*** finished computation of 7 references, err: [Inf, 0.2402192794520972, 0.20670489920931553] ***
*** center 1: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [115, 52, 0]]
** centroid: 3, normalized-entropy: 0.8947568601271065, [(1, 115), (2, 52)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 110, 27]]
** centroid: 4, normalized-entropy: 0.7160501045216493, [(2, 110), (3, 27)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [46, 37, 0]]
** centroid: 5, normalized-entropy: 0.9915017866855546, [(1, 46), (2, 37)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [35, 47, 0]]
** centroid: 6, normalized-entropy: 0.9844961311800012, [(1, 35), (2, 47)]
*** center 7: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23812290808806816] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23812290808806816, 0.17214348994813547] ***
*** finished computation of 7 references, err: [Inf, 0.23812290808806816, 0.17214348994813547] ***
*** center 1: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [95, 24, 0]]
** centroid: 3, normalized-entropy: 0.7252767313016596, [(1, 95), (2, 24)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [29, 46, 0]]
** centroid: 4, normalized-entropy: 0.9626147059982517, [(1, 29), (2, 46)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [15, 31, 0]]
** centroid: 5, normalized-entropy: 0.9108783787500366, [(1, 15), (2, 31)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [93, 23, 0]]
** centroid: 6, normalized-entropy: 0.7184663880382773, [(1, 93), (2, 23)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 136, 22]]
** centroid: 7, normalized-entropy: 0.5822463050121238, [(2, 136), (3, 22)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1973972382705318] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1973972382705318, 0.16037565105450877] ***
*** finished computation of 7 references, err: [Inf, 0.1973972382705318, 0.16037565105450877] ***
*** center 1: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [34, 92, 0]]
** centroid: 2, normalized-entropy: 0.8412367762002599, [(1, 34), (2, 92)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [37, 16, 0]]
** centroid: 3, normalized-entropy: 0.8835850861052531, [(1, 37), (2, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [145, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 54, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [67, 35, 0]]
** centroid: 6, normalized-entropy: 0.9277892502681174, [(1, 67), (2, 35)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 65, 15]]
** centroid: 7, normalized-entropy: 0.6962122601251459, [(2, 65), (3, 15)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1918692485969709] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1918692485969709, 0.15793974136771716] ***
*** finished computation of 7 references, err: [Inf, 0.1918692485969709, 0.15793974136771716] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [101, 22, 0]]
** centroid: 1, normalized-entropy: 0.6775807218599569, [(1, 101), (2, 22)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 107, 27]]
** centroid: 2, normalized-entropy: 0.7249031449104859, [(2, 107), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 38, 0]]
** centroid: 3, normalized-entropy: 0.9902246902198684, [(1, 48), (2, 38)]
*** center 4: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [68, 6, 0]]
** centroid: 5, normalized-entropy: 0.40597703847557104, [(1, 68), (2, 6)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [25, 73, 0]]
** centroid: 6, normalized-entropy: 0.8192649712314392, [(1, 25), (2, 73)]
*** center 7: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33264817885058867] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33264817885058867, 0.3040098870647148] ***
*** starting iteration: 2; err: [Inf, 0.33264817885058867, 0.3040098870647148] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33264817885058867, 0.3040098870647148, 0.2996333328239318] ***
*** starting iteration: 3; err: [Inf, 0.33264817885058867, 0.3040098870647148, 0.2996333328239318] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33264817885058867, 0.3040098870647148, 0.2996333328239318, 0.2987985783116752] ***
*** finished computation of 3 references, err: [Inf, 0.33264817885058867, 0.3040098870647148, 0.2996333328239318, 0.2987985783116752] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [234, 38, 0]]
** centroid: 1, normalized-entropy: 0.5834680254658803, [(1, 234), (2, 38)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [150, 31, 0]]
** centroid: 2, normalized-entropy: 0.6606034053352758, [(1, 150), (2, 31)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 191, 22]]
** centroid: 3, normalized-entropy: 0.4793274523157513, [(2, 191), (3, 22)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3109942522106589] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3109942522106589, 0.2946730994241036] ***
*** starting iteration: 2; err: [Inf, 0.3109942522106589, 0.2946730994241036] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3109942522106589, 0.2946730994241036, 0.29366835047151596] ***
*** starting iteration: 3; err: [Inf, 0.3109942522106589, 0.2946730994241036, 0.29366835047151596] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3109942522106589, 0.2946730994241036, 0.29366835047151596, 0.29366916713808877] ***
*** finished computation of 3 references, err: [Inf, 0.3109942522106589, 0.2946730994241036, 0.29366835047151596, 0.29366916713808877] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [9, 196, 15]]
** centroid: 1, normalized-entropy: 0.37937038522289934, [(1, 9), (2, 196), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [158, 66, 0]]
** centroid: 2, normalized-entropy: 0.8746434484431391, [(1, 158), (2, 66)]
*** center 3: selecting labels [1] (freq >= 2) [from [223, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4370337550163917] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4370337550163917, 0.3356168678915617] ***
*** starting iteration: 2; err: [Inf, 0.4370337550163917, 0.3356168678915617] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4370337550163917, 0.3356168678915617, 0.3336653598365018] ***
*** starting iteration: 3; err: [Inf, 0.4370337550163917, 0.3356168678915617, 0.3336653598365018] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4370337550163917, 0.3356168678915617, 0.3336653598365018, 0.3332330841603207] ***
*** finished computation of 3 references, err: [Inf, 0.4370337550163917, 0.3356168678915617, 0.3336653598365018, 0.3332330841603207] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [142, 89, 0]]
** centroid: 1, normalized-entropy: 0.9616868495300217, [(1, 142), (2, 89)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [180, 3, 0]]
** centroid: 2, normalized-entropy: 0.12068101401352371, [(1, 180), (2, 3)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [72, 154, 27]]
** centroid: 3, normalized-entropy: 0.8179535034550987, [(1, 72), (2, 154), (3, 27)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3849969191907404] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3849969191907404, 0.30930338202005214] ***
*** starting iteration: 2; err: [Inf, 0.3849969191907404, 0.30930338202005214] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3849969191907404, 0.30930338202005214, 0.2980198800317697] ***
*** starting iteration: 3; err: [Inf, 0.3849969191907404, 0.30930338202005214, 0.2980198800317697] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3849969191907404, 0.30930338202005214, 0.2980198800317697, 0.29642597121583697] ***
*** finished computation of 3 references, err: [Inf, 0.3849969191907404, 0.30930338202005214, 0.2980198800317697, 0.29642597121583697] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [97, 114, 0]]
** centroid: 1, normalized-entropy: 0.995312424219356, [(1, 97), (2, 114)]
*** center 2: selecting labels [1] (freq >= 1) [from [197, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [90, 146, 22]]
** centroid: 3, normalized-entropy: 0.818760896442818, [(1, 90), (2, 146), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3457031568632401] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3457031568632401, 0.2983602074783357] ***
*** starting iteration: 2; err: [Inf, 0.3457031568632401, 0.2983602074783357] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3457031568632401, 0.2983602074783357, 0.2929743903387489] ***
*** starting iteration: 3; err: [Inf, 0.3457031568632401, 0.2983602074783357, 0.2929743903387489] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3457031568632401, 0.2983602074783357, 0.2929743903387489, 0.2928763937785931] ***
*** finished computation of 3 references, err: [Inf, 0.3457031568632401, 0.2983602074783357, 0.2929743903387489, 0.2928763937785931] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [121, 107, 0]]
** centroid: 1, normalized-entropy: 0.9972785262035632, [(1, 121), (2, 107)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [49, 155, 15]]
** centroid: 2, normalized-entropy: 0.6947572058920107, [(1, 49), (2, 155), (3, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [220, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.46288423717784316] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46288423717784316, 0.30374979297595583] ***
*** starting iteration: 2; err: [Inf, 0.46288423717784316, 0.30374979297595583] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46288423717784316, 0.30374979297595583, 0.2969106327060951] ***
*** starting iteration: 3; err: [Inf, 0.46288423717784316, 0.30374979297595583, 0.2969106327060951] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46288423717784316, 0.30374979297595583, 0.2969106327060951, 0.29554440081259165] ***
*** finished computation of 3 references, err: [Inf, 0.46288423717784316, 0.30374979297595583, 0.2969106327060951, 0.29554440081259165] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [115, 78, 0]]
** centroid: 1, normalized-entropy: 0.9733237267506789, [(1, 115), (2, 78)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [73, 168, 27]]
** centroid: 2, normalized-entropy: 0.799405467605925, [(1, 73), (2, 168), (3, 27)]
*** center 3: selecting labels [1] (freq >= 1) [from [206, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4311388230825337] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4311388230825337, 0.29542524588463276] ***
*** starting iteration: 2; err: [Inf, 0.4311388230825337, 0.29542524588463276] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4311388230825337, 0.29542524588463276, 0.29339392586699176] ***
*** starting iteration: 3; err: [Inf, 0.4311388230825337, 0.29542524588463276, 0.29339392586699176] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4311388230825337, 0.29542524588463276, 0.29339392586699176, 0.292866090864133] ***
*** finished computation of 3 references, err: [Inf, 0.4311388230825337, 0.29542524588463276, 0.29339392586699176, 0.292866090864133] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [230, 8, 0]]
** centroid: 1, normalized-entropy: 0.21220132752136248, [(1, 230), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [159, 51, 0]]
** centroid: 2, normalized-entropy: 0.7997594113291759, [(1, 159), (2, 51)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [1, 203, 15]]
** centroid: 3, normalized-entropy: 0.25355832573539955, [(1, 1), (2, 203), (3, 15)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4360553787314686] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4360553787314686, 0.3005162430075423] ***
*** starting iteration: 2; err: [Inf, 0.4360553787314686, 0.3005162430075423] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4360553787314686, 0.3005162430075423, 0.2986507858449909] ***
*** starting iteration: 3; err: [Inf, 0.4360553787314686, 0.3005162430075423, 0.2986507858449909] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4360553787314686, 0.3005162430075423, 0.2986507858449909, 0.2980498928085215] ***
*** finished computation of 3 references, err: [Inf, 0.4360553787314686, 0.3005162430075423, 0.2986507858449909, 0.2980498928085215] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [224, 15, 0]]
** centroid: 1, normalized-entropy: 0.33831090222748045, [(1, 224), (2, 15)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 177, 27]]
** centroid: 2, normalized-entropy: 0.5638560041131417, [(2, 177), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [170, 54, 0]]
** centroid: 3, normalized-entropy: 0.7968174923244049, [(1, 170), (2, 54)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22476481754114633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22476481754114633, 0.16549506028988273] ***
*** starting iteration: 2; err: [Inf, 0.22476481754114633, 0.16549506028988273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22476481754114633, 0.16549506028988273, 0.15591852528717112] ***
*** starting iteration: 3; err: [Inf, 0.22476481754114633, 0.16549506028988273, 0.15591852528717112] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22476481754114633, 0.16549506028988273, 0.15591852528717112, 0.15247687352289846] ***
*** finished computation of 7 references, err: [Inf, 0.22476481754114633, 0.16549506028988273, 0.15591852528717112, 0.15247687352289846] ***
*** center 1: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [16, 115, 0]]
** centroid: 2, normalized-entropy: 0.5354737201740676, [(1, 16), (2, 115)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 13, 0]]
** centroid: 3, normalized-entropy: 0.7817281222714539, [(1, 43), (2, 13)]
*** center 4: selecting labels [1] (freq >= 2) [from [146, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 77, 0]]
** centroid: 6, normalized-entropy: 0.3313056130577883, [(1, 5), (2, 77)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 55, 22]]
** centroid: 7, normalized-entropy: 0.8631205685666311, [(2, 55), (3, 22)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2532044802478206] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2532044802478206, 0.16076620084385776] ***
*** starting iteration: 2; err: [Inf, 0.2532044802478206, 0.16076620084385776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2532044802478206, 0.16076620084385776, 0.15551949660901143] ***
*** starting iteration: 3; err: [Inf, 0.2532044802478206, 0.16076620084385776, 0.15551949660901143] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2532044802478206, 0.16076620084385776, 0.15551949660901143, 0.15405025178178408] ***
*** finished computation of 7 references, err: [Inf, 0.2532044802478206, 0.16076620084385776, 0.15551949660901143, 0.15405025178178408] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [26, 67, 0]]
** centroid: 1, normalized-entropy: 0.8548640967818041, [(1, 26), (2, 67)]
*** center 2: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 10, 0]]
** centroid: 3, normalized-entropy: 0.5969995167604553, [(1, 59), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [51, 15, 0]]
** centroid: 4, normalized-entropy: 0.7732266742876346, [(1, 51), (2, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [69, 57, 0]]
** centroid: 5, normalized-entropy: 0.9934472383802028, [(1, 69), (2, 57)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 113, 15]]
** centroid: 6, normalized-entropy: 0.5212220180699689, [(2, 113), (3, 15)]
*** center 7: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21763137147470057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21763137147470057, 0.15379241613861078] ***
*** starting iteration: 2; err: [Inf, 0.21763137147470057, 0.15379241613861078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21763137147470057, 0.15379241613861078, 0.14926596415945437] ***
*** starting iteration: 3; err: [Inf, 0.21763137147470057, 0.15379241613861078, 0.14926596415945437] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21763137147470057, 0.15379241613861078, 0.14926596415945437, 0.14801743159746414] ***
*** finished computation of 7 references, err: [Inf, 0.21763137147470057, 0.15379241613861078, 0.14926596415945437, 0.14801743159746414] ***
*** center 1: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [12, 74, 0]]
** centroid: 2, normalized-entropy: 0.5830194167347007, [(1, 12), (2, 74)]
*** center 3: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 42, 0]]
** centroid: 4, normalized-entropy: 0.9870044298101771, [(1, 55), (2, 42)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 90, 27]]
** centroid: 5, normalized-entropy: 0.7793498372920851, [(2, 90), (3, 27)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [83, 40, 0]]
** centroid: 6, normalized-entropy: 0.9099503053612785, [(1, 83), (2, 40)]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2518515011964103] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2518515011964103, 0.20201185425357507] ***
*** starting iteration: 2; err: [Inf, 0.2518515011964103, 0.20201185425357507] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2518515011964103, 0.20201185425357507, 0.192446757477146] ***
*** starting iteration: 3; err: [Inf, 0.2518515011964103, 0.20201185425357507, 0.192446757477146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2518515011964103, 0.20201185425357507, 0.192446757477146, 0.1884332162596554] ***
*** finished computation of 7 references, err: [Inf, 0.2518515011964103, 0.20201185425357507, 0.192446757477146, 0.1884332162596554] ***
*** center 1: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [40, 51, 0]]
** centroid: 3, normalized-entropy: 0.9894340222202265, [(1, 40), (2, 51)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 93, 1]]
** centroid: 4, normalized-entropy: 0.0849955598367127, [(2, 93), (3, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [105, 14, 0]]
** centroid: 5, normalized-entropy: 0.5225593745369407, [(1, 105), (2, 14)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [75, 18, 0]]
** centroid: 6, normalized-entropy: 0.708835673332196, [(1, 75), (2, 18)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 84, 21]]
** centroid: 7, normalized-entropy: 0.7219280948873623, [(2, 84), (3, 21)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28991172991335573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28991172991335573, 0.21678991371422246] ***
*** starting iteration: 2; err: [Inf, 0.28991172991335573, 0.21678991371422246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28991172991335573, 0.21678991371422246, 0.200625819067514] ***
*** starting iteration: 3; err: [Inf, 0.28991172991335573, 0.21678991371422246, 0.200625819067514] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28991172991335573, 0.21678991371422246, 0.200625819067514, 0.19790151548841367] ***
*** finished computation of 7 references, err: [Inf, 0.28991172991335573, 0.21678991371422246, 0.200625819067514, 0.19790151548841367] ***
*** center 1: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [87, 9, 0]]
** centroid: 4, normalized-entropy: 0.44886448872302936, [(1, 87), (2, 9)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [31, 78, 0]]
** centroid: 5, normalized-entropy: 0.8613819514443714, [(1, 31), (2, 78)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 119, 15]]
** centroid: 6, normalized-entropy: 0.5057408862206602, [(2, 119), (3, 15)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [64, 56, 0]]
** centroid: 7, normalized-entropy: 0.9967916319816367, [(1, 64), (2, 56)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2345269858569041] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2345269858569041, 0.19344056624084197] ***
*** starting iteration: 2; err: [Inf, 0.2345269858569041, 0.19344056624084197] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2345269858569041, 0.19344056624084197, 0.1887845408877936] ***
*** starting iteration: 3; err: [Inf, 0.2345269858569041, 0.19344056624084197, 0.1887845408877936] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2345269858569041, 0.19344056624084197, 0.1887845408877936, 0.18871343730791085] ***
*** finished computation of 7 references, err: [Inf, 0.2345269858569041, 0.19344056624084197, 0.1887845408877936, 0.18871343730791085] ***
*** center 1: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [4, 84, 0]]
** centroid: 2, normalized-entropy: 0.2667649878030262, [(1, 4), (2, 84)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 77, 27]]
** centroid: 3, normalized-entropy: 0.826165427834159, [(2, 77), (3, 27)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [79, 34, 0]]
** centroid: 4, normalized-entropy: 0.8823699738443678, [(1, 79), (2, 34)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [59, 10, 0]]
** centroid: 5, normalized-entropy: 0.5969995167604553, [(1, 59), (2, 10)]
*** center 6: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [50, 41, 0]]
** centroid: 7, normalized-entropy: 0.9929326437363045, [(1, 50), (2, 41)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 12)
[0.9440068811326295, 0.9360168551785318, 0.9299988611365856, 0.9210048371725019, 0.9120018221814629, 0.908012803222384, 0.9079858301415187, 0.9009938081794369, 0.8959738181295068, 0.8929648211085336, 0.8699777621933311, 0.7630055204905505]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9440068811326295
finished with 13
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.2823731404101314] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2823731404101314, 0.2165333955806006] ***
*** starting iteration: 2; err: [Inf, 0.2823731404101314, 0.2165333955806006] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2823731404101314, 0.2165333955806006, 0.20005238800262054] ***
*** starting iteration: 3; err: [Inf, 0.2823731404101314, 0.2165333955806006, 0.20005238800262054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2823731404101314, 0.2165333955806006, 0.20005238800262054, 0.19371508430499393] ***
*** finished computation of 7 references, err: [Inf, 0.2823731404101314, 0.2165333955806006, 0.20005238800262054, 0.19371508430499393] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 61, 22]]
** centroid: 1, normalized-entropy: 0.8342867421739538, [(2, 61), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [128, 4, 0]]
** centroid: 2, normalized-entropy: 0.19590927087360496, [(1, 128), (2, 4)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [10, 60, 0]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(1, 10), (2, 60)]
*** center 4: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [52, 47, 0]]
** centroid: 6, normalized-entropy: 0.9981592324817737, [(1, 52), (2, 47)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 88, 0]]
** centroid: 7, normalized-entropy: 0.3424637724817958, [(1, 6), (2, 88)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3511123951675295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3511123951675295, 0.245311523434417] ***
*** starting iteration: 2; err: [Inf, 0.3511123951675295, 0.245311523434417] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3511123951675295, 0.245311523434417, 0.21076574427183198] ***
*** starting iteration: 3; err: [Inf, 0.3511123951675295, 0.245311523434417, 0.21076574427183198] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3511123951675295, 0.245311523434417, 0.21076574427183198, 0.19661391035107703] ***
*** finished computation of 7 references, err: [Inf, 0.3511123951675295, 0.245311523434417, 0.21076574427183198, 0.19661391035107703] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [9, 104, 0]]
** centroid: 1, normalized-entropy: 0.40093068188727266, [(1, 9), (2, 104)]
*** center 2: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 143, 15]]
** centroid: 3, normalized-entropy: 0.45273669695281504, [(2, 143), (3, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [81, 7, 0]]
** centroid: 4, normalized-entropy: 0.40057554263664, [(1, 81), (2, 7)]
*** center 5: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [113, 8, 0]]
** centroid: 6, normalized-entropy: 0.3512580905562789, [(1, 113), (2, 8)]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2573527976915218] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2573527976915218, 0.2035448970887503] ***
*** starting iteration: 2; err: [Inf, 0.2573527976915218, 0.2035448970887503] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2573527976915218, 0.2035448970887503, 0.20021599463453849] ***
*** starting iteration: 3; err: [Inf, 0.2573527976915218, 0.2035448970887503, 0.20021599463453849] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2573527976915218, 0.2035448970887503, 0.20021599463453849, 0.19873048451965092] ***
*** finished computation of 7 references, err: [Inf, 0.2573527976915218, 0.2035448970887503, 0.20021599463453849, 0.19873048451965092] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [10, 111, 0]]
** centroid: 1, normalized-entropy: 0.41142983137595496, [(1, 10), (2, 111)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [83, 4, 0]]
** centroid: 2, normalized-entropy: 0.2690553027246505, [(1, 83), (2, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [118, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [45, 32, 0]]
** centroid: 4, normalized-entropy: 0.9793399259567798, [(1, 45), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [38, 24, 0]]
** centroid: 5, normalized-entropy: 0.9629004147713269, [(1, 38), (2, 24)]
*** center 6: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 74, 27]]
** centroid: 7, normalized-entropy: 0.837602456861142, [(2, 74), (3, 27)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9440068811326295, 0.9419928910946874, 0.9360168551785318, 0.9299988611365856, 0.9210048371725019, 0.9120018221814629, 0.908012803222384, 0.9079858301415187, 0.9009938081794369, 0.8959738181295068, 0.8929648211085336, 0.8699777621933311, 0.7630055204905505]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9440068811326295
finished with 15
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.26853753644665396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26853753644665396, 0.20650914254215164] ***
*** finished computation of 7 references, err: [Inf, 0.26853753644665396, 0.20650914254215164] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [4, 101, 0]]
** centroid: 1, normalized-entropy: 0.23348971044772968, [(1, 4), (2, 101)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [90, 26, 0]]
** centroid: 2, normalized-entropy: 0.7676515870125797, [(1, 90), (2, 26)]
*** center 3: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [23, 74, 0]]
** centroid: 6, normalized-entropy: 0.790206924188637, [(1, 23), (2, 74)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 59, 22]]
** centroid: 7, normalized-entropy: 0.8437582063121657, [(2, 59), (3, 22)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25187082956733553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25187082956733553, 0.19966601329608477] ***
*** finished computation of 7 references, err: [Inf, 0.25187082956733553, 0.19966601329608477] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [99, 17, 0]]
** centroid: 1, normalized-entropy: 0.6011432909108727, [(1, 99), (2, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 54, 15]]
** centroid: 3, normalized-entropy: 0.7553754125614286, [(2, 54), (3, 15)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 72, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [140, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 53, 0]]
** centroid: 6, normalized-entropy: 0.6619760641115651, [(1, 11), (2, 53)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [31, 66, 0]]
** centroid: 7, normalized-entropy: 0.9039324555927869, [(1, 31), (2, 66)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20991908127338677] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20991908127338677, 0.1961067686614202] ***
*** finished computation of 7 references, err: [Inf, 0.20991908127338677, 0.1961067686614202] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [7, 94, 0]]
** centroid: 1, normalized-entropy: 0.3633319133250508, [(1, 7), (2, 94)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 64, 27]]
** centroid: 2, normalized-entropy: 0.8772236230732716, [(2, 64), (3, 27)]
*** center 3: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [111, 10, 0]]
** centroid: 4, normalized-entropy: 0.41142983137595496, [(1, 111), (2, 10)]
*** center 5: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 77, 0]]
** centroid: 6, normalized-entropy: 0.2837689703721877, [(1, 4), (2, 77)]
*** center 7: selecting labels [1] (freq >= 2) [from [92, 1, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20028897421119884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20028897421119884, 0.16036768848014935] ***
*** finished computation of 7 references, err: [Inf, 0.20028897421119884, 0.16036768848014935] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [60, 12, 0]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(1, 60), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [17, 126, 0]]
** centroid: 2, normalized-entropy: 0.526136101378073, [(1, 17), (2, 126)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 114, 22]]
** centroid: 3, normalized-entropy: 0.6385146263620961, [(2, 114), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [71, 8, 0]]
** centroid: 6, normalized-entropy: 0.47299536229314826, [(1, 71), (2, 8)]
*** center 7: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22634564748947053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22634564748947053, 0.16020263116276157] ***
*** finished computation of 7 references, err: [Inf, 0.22634564748947053, 0.16020263116276157] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [50, 5, 0]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(1, 50), (2, 5)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 71, 1]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 117, 14]]
** centroid: 3, normalized-entropy: 0.4904028404682535, [(2, 117), (3, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [145, 4, 0]]
** centroid: 4, normalized-entropy: 0.17831739259527912, [(1, 145), (2, 4)]
*** center 5: selecting labels [1] (freq >= 2) [from [127, 1, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [60, 1, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 63, 0]]
** centroid: 7, normalized-entropy: 0.5079353563991225, [(1, 8), (2, 63)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.17145380918760372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17145380918760372, 0.1519294786165752] ***
*** finished computation of 7 references, err: [Inf, 0.17145380918760372, 0.1519294786165752] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 75, 27]]
** centroid: 1, normalized-entropy: 0.8337649072106652, [(2, 75), (3, 27)]
*** center 2: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [64, 7, 0]]
** centroid: 3, normalized-entropy: 0.4645149440905521, [(1, 64), (2, 7)]
*** center 4: selecting labels [1] (freq >= 2) [from [119, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 78, 0]]
** centroid: 5, normalized-entropy: 0.9387743321221517, [(1, 43), (2, 78)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [64, 6, 0]]
** centroid: 6, normalized-entropy: 0.4220005168831531, [(1, 64), (2, 6)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 80, 0]]
** centroid: 7, normalized-entropy: 0.3650551896402848, [(1, 6), (2, 80)]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9440068811326295, 0.9419928910946874, 0.938030845216474, 0.9360168551785318, 0.9299988611365856, 0.9210048371725019, 0.9140188092283901, 0.9120018221814629, 0.908012803222384, 0.9079858301415187, 0.9009938081794369, 0.8959738181295068, 0.8929648211085336, 0.8699777621933311, 0.7630055204905505]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9440068811326295
finished with 16
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.2936724178023166] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2936724178023166, 0.26698865997639987] ***
*** starting iteration: 2; err: [Inf, 0.2936724178023166, 0.26698865997639987] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2936724178023166, 0.26698865997639987, 0.2436820737117001] ***
*** starting iteration: 3; err: [Inf, 0.2936724178023166, 0.26698865997639987, 0.2436820737117001] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2936724178023166, 0.26698865997639987, 0.2436820737117001, 0.23525593173899897] ***
*** finished computation of 3 references, err: [Inf, 0.2936724178023166, 0.26698865997639987, 0.2436820737117001, 0.23525593173899897] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [217, 53, 0]]
** centroid: 1, normalized-entropy: 0.7144585543386028, [(1, 217), (2, 53)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 185, 22]]
** centroid: 2, normalized-entropy: 0.4885929197914107, [(2, 185), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [167, 22, 0]]
** centroid: 3, normalized-entropy: 0.5189296599184945, [(1, 167), (2, 22)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30841991174449473] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30841991174449473, 0.256726524213153] ***
*** starting iteration: 2; err: [Inf, 0.30841991174449473, 0.256726524213153] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30841991174449473, 0.256726524213153, 0.23667439901600892] ***
*** starting iteration: 3; err: [Inf, 0.30841991174449473, 0.256726524213153, 0.23667439901600892] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30841991174449473, 0.256726524213153, 0.23667439901600892, 0.2320963498442315] ***
*** finished computation of 3 references, err: [Inf, 0.30841991174449473, 0.256726524213153, 0.23667439901600892, 0.2320963498442315] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [81, 171, 15]]
** centroid: 1, normalized-entropy: 0.7363725878993247, [(1, 81), (2, 171), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [200, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [109, 91, 0]]
** centroid: 3, normalized-entropy: 0.9941491714808933, [(1, 109), (2, 91)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2802446812668444] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2802446812668444, 0.2429205774702411] ***
*** starting iteration: 2; err: [Inf, 0.2802446812668444, 0.2429205774702411] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2802446812668444, 0.2429205774702411, 0.2383830560904661] ***
*** starting iteration: 3; err: [Inf, 0.2802446812668444, 0.2429205774702411, 0.2383830560904661] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2802446812668444, 0.2429205774702411, 0.2383830560904661, 0.23770819659759548] ***
*** finished computation of 3 references, err: [Inf, 0.2802446812668444, 0.2429205774702411, 0.2383830560904661, 0.23770819659759548] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [122, 87, 0]]
** centroid: 1, normalized-entropy: 0.9796747334133636, [(1, 122), (2, 87)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [75, 159, 27]]
** centroid: 2, normalized-entropy: 0.8146287244986712, [(1, 75), (2, 159), (3, 27)]
*** center 3: selecting labels [1] (freq >= 1) [from [197, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 16)
[0.9440068811326295, 0.9419928910946874, 0.938030845216474, 0.9360168551785318, 0.9299988611365856, 0.9210048371725019, 0.9140188092283901, 0.9120018221814629, 0.908012803222384, 0.9079858301415187, 0.9009938081794369, 0.8980657304010599, 0.8959738181295068, 0.8929648211085336, 0.8699777621933311, 0.7630055204905505]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9440068811326295
finished with 17
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.2893189115816162] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2893189115816162, 0.21121783508687048] ***
*** finished computation of 7 references, err: [Inf, 0.2893189115816162, 0.21121783508687048] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [49, 92, 13]]
** centroid: 1, normalized-entropy: 0.8017352556202724, [(1, 49), (2, 92), (3, 13)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [19, 138, 9]]
** centroid: 2, normalized-entropy: 0.5094576189140769, [(1, 19), (2, 138), (3, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [142, 28, 0]]
** centroid: 3, normalized-entropy: 0.6454495903301855, [(1, 142), (2, 28)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [22, 2, 0]]
** centroid: 4, normalized-entropy: 0.4138168503036336, [(1, 22), (2, 2)]
*** center 5: selecting labels [1] (freq >= 2) [from [130, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1692980488321033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1692980488321033, 0.1474105887034017] ***
*** finished computation of 7 references, err: [Inf, 0.1692980488321033, 0.1474105887034017] ***
*** center 1: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [14, 108, 0]]
** centroid: 2, normalized-entropy: 0.5140912790181233, [(1, 14), (2, 108)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [50, 29, 0]]
** centroid: 3, normalized-entropy: 0.9484103893488014, [(1, 50), (2, 29)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [54, 5, 0]]
** centroid: 4, normalized-entropy: 0.4186843105268563, [(1, 54), (2, 5)]
*** center 5: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [89, 18, 0]]
** centroid: 6, normalized-entropy: 0.6536265622705767, [(1, 89), (2, 18)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 102, 15]]
** centroid: 7, normalized-entropy: 0.552495114325111, [(2, 102), (3, 15)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24624175661783862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24624175661783862, 0.18616472501754538] ***
*** finished computation of 7 references, err: [Inf, 0.24624175661783862, 0.18616472501754538] ***
*** center 1: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [140, 49, 0]]
** centroid: 2, normalized-entropy: 0.8256265261578954, [(1, 140), (2, 49)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [80, 3, 0]]
** centroid: 3, normalized-entropy: 0.2243269603450881, [(1, 80), (2, 3)]
*** center 4: selecting labels [1, 2, 3] (freq >= 2) [from [3, 154, 27]]
** centroid: 4, normalized-entropy: 0.4530124410664872, [(1, 3), (2, 154), (3, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [15, 40, 0]]
** centroid: 5, normalized-entropy: 0.8453509366224364, [(1, 15), (2, 40)]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 17)
[0.9440068811326295, 0.9419928910946874, 0.938030845216474, 0.9360168551785318, 0.9299988611365856, 0.9210048371725019, 0.9140188092283901, 0.9120018221814629, 0.908012803222384, 0.9079858301415187, 0.9009938081794369, 0.8980657304010599, 0.8959738181295068, 0.8929648211085336, 0.8920207632782482, 0.8699777621933311, 0.7630055204905505]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9440068811326295
finished with 19
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.6230873754737457] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6230873754737457, 0.35249126475030285] ***
*** starting iteration: 2; err: [Inf, 0.6230873754737457, 0.35249126475030285] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6230873754737457, 0.35249126475030285, 0.31133836336914933] ***
*** starting iteration: 3; err: [Inf, 0.6230873754737457, 0.35249126475030285, 0.31133836336914933] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6230873754737457, 0.35249126475030285, 0.31133836336914933, 0.2991592570350648] ***
*** finished computation of 3 references, err: [Inf, 0.6230873754737457, 0.35249126475030285, 0.31133836336914933, 0.2991592570350648] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [92, 155, 22]]
** centroid: 1, normalized-entropy: 0.8095342327876119, [(1, 92), (2, 155), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [195, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [97, 105, 0]]
** centroid: 3, normalized-entropy: 0.998868289449348, [(1, 97), (2, 105)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34856183071672425] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34856183071672425, 0.3160001510290661] ***
*** starting iteration: 2; err: [Inf, 0.34856183071672425, 0.3160001510290661] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34856183071672425, 0.3160001510290661, 0.29698942949635154] ***
*** starting iteration: 3; err: [Inf, 0.34856183071672425, 0.3160001510290661, 0.29698942949635154] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34856183071672425, 0.3160001510290661, 0.29698942949635154, 0.2948868348147312] ***
*** finished computation of 3 references, err: [Inf, 0.34856183071672425, 0.3160001510290661, 0.29698942949635154, 0.2948868348147312] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [97, 150, 15]]
** centroid: 1, normalized-entropy: 0.7745484335352053, [(1, 97), (2, 150), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [94, 112, 0]]
** centroid: 2, normalized-entropy: 0.994485462483463, [(1, 94), (2, 112)]
*** center 3: selecting labels [1] (freq >= 2) [from [199, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3793920380596736] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3793920380596736, 0.30062886560684826] ***
*** starting iteration: 2; err: [Inf, 0.3793920380596736, 0.30062886560684826] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3793920380596736, 0.30062886560684826, 0.29598723078841926] ***
*** starting iteration: 3; err: [Inf, 0.3793920380596736, 0.30062886560684826, 0.29598723078841926] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3793920380596736, 0.30062886560684826, 0.29598723078841926, 0.2953747261198296] ***
*** finished computation of 3 references, err: [Inf, 0.3793920380596736, 0.30062886560684826, 0.29598723078841926, 0.2953747261198296] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [1, 181, 27]]
** centroid: 1, normalized-entropy: 0.556910544484968, [(2, 181), (3, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [150, 54, 0]]
** centroid: 2, normalized-entropy: 0.8337649072106652, [(1, 150), (2, 54)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [243, 11, 0]]
** centroid: 3, normalized-entropy: 0.25725481991698845, [(1, 243), (2, 11)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3742132031753122] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3742132031753122, 0.25070381751871323] ***
*** starting iteration: 2; err: [Inf, 0.3742132031753122, 0.25070381751871323] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3742132031753122, 0.25070381751871323, 0.2386361682877034] ***
*** starting iteration: 3; err: [Inf, 0.3742132031753122, 0.25070381751871323, 0.2386361682877034] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3742132031753122, 0.25070381751871323, 0.2386361682877034, 0.23579970002174377] ***
*** finished computation of 3 references, err: [Inf, 0.3742132031753122, 0.25070381751871323, 0.2386361682877034, 0.23579970002174377] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [81, 177, 22]]
** centroid: 1, normalized-entropy: 0.7724331386394954, [(1, 81), (2, 177), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [124, 83, 0]]
** centroid: 2, normalized-entropy: 0.9715129705922371, [(1, 124), (2, 83)]
*** center 3: selecting labels [1] (freq >= 2) [from [179, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.279486577837788] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.279486577837788, 0.2380743195544342] ***
*** starting iteration: 2; err: [Inf, 0.279486577837788, 0.2380743195544342] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.279486577837788, 0.2380743195544342, 0.231934592973251] ***
*** starting iteration: 3; err: [Inf, 0.279486577837788, 0.2380743195544342, 0.231934592973251] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.279486577837788, 0.2380743195544342, 0.231934592973251, 0.23062754507320396] ***
*** finished computation of 3 references, err: [Inf, 0.279486577837788, 0.2380743195544342, 0.231934592973251, 0.23062754507320396] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 209, 15]]
** centroid: 1, normalized-entropy: 0.35449145090121015, [(2, 209), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [161, 46, 0]]
** centroid: 2, normalized-entropy: 0.7642045065086204, [(1, 161), (2, 46)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [229, 7, 0]]
** centroid: 3, normalized-entropy: 0.19268901576606412, [(1, 229), (2, 7)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34767062018584943] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34767062018584943, 0.2381292168718429] ***
*** starting iteration: 2; err: [Inf, 0.34767062018584943, 0.2381292168718429] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34767062018584943, 0.2381292168718429, 0.23418503453901995] ***
*** starting iteration: 3; err: [Inf, 0.34767062018584943, 0.2381292168718429, 0.23418503453901995] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34767062018584943, 0.2381292168718429, 0.23418503453901995, 0.2332052846147359] ***
*** finished computation of 3 references, err: [Inf, 0.34767062018584943, 0.2381292168718429, 0.23418503453901995, 0.2332052846147359] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [123, 69, 0]]
** centroid: 1, normalized-entropy: 0.9421631690835511, [(1, 123), (2, 69)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [46, 177, 27]]
** centroid: 2, normalized-entropy: 0.7248476254374797, [(1, 46), (2, 177), (3, 27)]
*** center 3: selecting labels [1] (freq >= 2) [from [225, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 19)
[0.9440068811326295, 0.9419928910946874, 0.938030845216474, 0.9360168551785318, 0.9299988611365856, 0.9219878561195927, 0.9210048371725019, 0.9140188092283901, 0.9120018221814629, 0.908012803222384, 0.9079858301415187, 0.9009938081794369, 0.8980657304010599, 0.896995798193403, 0.8959738181295068, 0.8929648211085336, 0.8920207632782482, 0.8699777621933311, 0.7630055204905505]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9440068811326295
finished with 19
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 19)
[0.9440068811326295, 0.9419928910946874, 0.938030845216474, 0.9360168551785318, 0.9299988611365856, 0.9219878561195927, 0.9210048371725019, 0.9140188092283901, 0.9120018221814629, 0.908012803222384, 0.9079858301415187, 0.9009938081794369, 0.8980657304010599, 0.896995798193403, 0.8959738181295068, 0.8929648211085336, 0.8920207632782482, 0.8699777621933311, 0.7630055204905505]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9440068811326295
finished with 19
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 19)
[0.9440068811326295, 0.9419928910946874, 0.938030845216474, 0.9360168551785318, 0.9299988611365856, 0.9219878561195927, 0.9210048371725019, 0.9140188092283901, 0.9120018221814629, 0.908012803222384, 0.9079858301415187, 0.9009938081794369, 0.8980657304010599, 0.896995798193403, 0.8959738181295068, 0.8929648211085336, 0.8920207632782482, 0.8699777621933311, 0.7630055204905505]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9440068811326295
finished with 19
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.24817318849498407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24817318849498407, 0.17841118173487486] ***
*** starting iteration: 2; err: [Inf, 0.24817318849498407, 0.17841118173487486] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24817318849498407, 0.17841118173487486, 0.1660428970498033] ***
*** starting iteration: 3; err: [Inf, 0.24817318849498407, 0.17841118173487486, 0.1660428970498033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24817318849498407, 0.17841118173487486, 0.1660428970498033, 0.16066340026725084] ***
*** finished computation of 7 references, err: [Inf, 0.24817318849498407, 0.17841118173487486, 0.1660428970498033, 0.16066340026725084] ***
*** center 1: selecting labels [1] (freq >= 1) [from [211, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [154, 72, 0]]
** centroid: 2, normalized-entropy: 0.9028350359954473, [(1, 154), (2, 72)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [19, 62, 0]]
** centroid: 3, normalized-entropy: 0.785889583138768, [(1, 19), (2, 62)]
*** center 4: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 170, 32]]
** centroid: 6, normalized-entropy: 0.6305062394675903, [(2, 170), (3, 32)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [45, 80, 0]]
** centroid: 7, normalized-entropy: 0.9426831892554921, [(1, 45), (2, 80)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24972326685488225] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24972326685488225, 0.18072269253619017] ***
*** starting iteration: 2; err: [Inf, 0.24972326685488225, 0.18072269253619017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24972326685488225, 0.18072269253619017, 0.16179504111595452] ***
*** starting iteration: 3; err: [Inf, 0.24972326685488225, 0.18072269253619017, 0.16179504111595452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24972326685488225, 0.18072269253619017, 0.16179504111595452, 0.1568100395463407] ***
*** finished computation of 7 references, err: [Inf, 0.24972326685488225, 0.18072269253619017, 0.16179504111595452, 0.1568100395463407] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [88, 46, 0]]
** centroid: 1, normalized-entropy: 0.9279262619599757, [(1, 88), (2, 46)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [66, 4, 0]]
** centroid: 2, normalized-entropy: 0.3159971329784246, [(1, 66), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 84, 16]]
** centroid: 3, normalized-entropy: 0.634309554640566, [(2, 84), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [9, 42, 0]]
** centroid: 5, normalized-entropy: 0.6722948170756378, [(1, 9), (2, 42)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [26, 4, 0]]
** centroid: 6, normalized-entropy: 0.5665095065529052, [(1, 26), (2, 4)]
*** center 7: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2123238605214283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2123238605214283, 0.18342387090157716] ***
*** starting iteration: 2; err: [Inf, 0.2123238605214283, 0.18342387090157716] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2123238605214283, 0.18342387090157716, 0.16562371202465148] ***
*** starting iteration: 3; err: [Inf, 0.2123238605214283, 0.18342387090157716, 0.16562371202465148] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2123238605214283, 0.18342387090157716, 0.16562371202465148, 0.16035700862668453] ***
*** finished computation of 7 references, err: [Inf, 0.2123238605214283, 0.18342387090157716, 0.16562371202465148, 0.16035700862668453] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [38, 37, 0]]
** centroid: 1, normalized-entropy: 0.999871756640849, [(1, 38), (2, 37)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 68, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 24, 7]]
** centroid: 5, normalized-entropy: 0.7706290693639406, [(2, 24), (3, 7)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [74, 26, 0]]
** centroid: 6, normalized-entropy: 0.8267463724926181, [(1, 74), (2, 26)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 51, 5]]
** centroid: 7, normalized-entropy: 0.4340811200043348, [(2, 51), (3, 5)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17349156978540123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17349156978540123, 0.158174814411439] ***
*** starting iteration: 2; err: [Inf, 0.17349156978540123, 0.158174814411439] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17349156978540123, 0.158174814411439, 0.1525465847356245] ***
*** starting iteration: 3; err: [Inf, 0.17349156978540123, 0.158174814411439, 0.1525465847356245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17349156978540123, 0.158174814411439, 0.1525465847356245, 0.14995086851902306] ***
*** finished computation of 7 references, err: [Inf, 0.17349156978540123, 0.158174814411439, 0.1525465847356245, 0.14995086851902306] ***
*** center 1: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [15, 37, 0]]
** centroid: 2, normalized-entropy: 0.8667256130949592, [(1, 15), (2, 37)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [88, 5, 0]]
** centroid: 3, normalized-entropy: 0.30217361847879526, [(1, 88), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [35, 31, 0]]
** centroid: 4, normalized-entropy: 0.9973487979180449, [(1, 35), (2, 31)]
*** center 5: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 64, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 47, 21]]
** centroid: 7, normalized-entropy: 0.8918107543797084, [(2, 47), (3, 21)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2270130523648113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2270130523648113, 0.1634147763531655] ***
*** starting iteration: 2; err: [Inf, 0.2270130523648113, 0.1634147763531655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2270130523648113, 0.1634147763531655, 0.157733578749001] ***
*** starting iteration: 3; err: [Inf, 0.2270130523648113, 0.1634147763531655, 0.157733578749001] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2270130523648113, 0.1634147763531655, 0.157733578749001, 0.15652323738764973] ***
*** finished computation of 7 references, err: [Inf, 0.2270130523648113, 0.1634147763531655, 0.157733578749001, 0.15652323738764973] ***
*** center 1: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [87, 35, 0]]
** centroid: 4, normalized-entropy: 0.864663651235729, [(1, 87), (2, 35)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [29, 31, 0]]
** centroid: 5, normalized-entropy: 0.99919835426364, [(1, 29), (2, 31)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 70, 14]]
** centroid: 6, normalized-entropy: 0.6500224216483541, [(2, 70), (3, 14)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [7, 45, 0]]
** centroid: 7, normalized-entropy: 0.5699613760403499, [(1, 7), (2, 45)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22011226456984878] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22011226456984878, 0.17103274918720127] ***
*** starting iteration: 2; err: [Inf, 0.22011226456984878, 0.17103274918720127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22011226456984878, 0.17103274918720127, 0.16101479201950133] ***
*** starting iteration: 3; err: [Inf, 0.22011226456984878, 0.17103274918720127, 0.16101479201950133] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22011226456984878, 0.17103274918720127, 0.16101479201950133, 0.15774807309359312] ***
*** finished computation of 7 references, err: [Inf, 0.22011226456984878, 0.17103274918720127, 0.16101479201950133, 0.15774807309359312] ***
*** center 1: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [26, 33, 0]]
** centroid: 2, normalized-entropy: 0.9898220559635807, [(1, 26), (2, 33)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 91, 17]]
** centroid: 3, normalized-entropy: 0.6280710155029396, [(2, 91), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [55, 11, 0]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(1, 55), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [36, 62, 0]]
** centroid: 6, normalized-entropy: 0.9486131982385807, [(1, 36), (2, 62)]
*** center 7: selecting labels [1] (freq >= 1) [from [43, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17950835731439294] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17950835731439294, 0.15813093295879663] ***
*** starting iteration: 2; err: [Inf, 0.17950835731439294, 0.15813093295879663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17950835731439294, 0.15813093295879663, 0.15263311774097382] ***
*** starting iteration: 3; err: [Inf, 0.17950835731439294, 0.15813093295879663, 0.15263311774097382] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17950835731439294, 0.15813093295879663, 0.15263311774097382, 0.15149987977929413] ***
*** finished computation of 7 references, err: [Inf, 0.17950835731439294, 0.15813093295879663, 0.15263311774097382, 0.15149987977929413] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [71, 9, 0]]
** centroid: 1, normalized-entropy: 0.5074109636646968, [(1, 71), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [42, 8, 0]]
** centroid: 2, normalized-entropy: 0.634309554640566, [(1, 42), (2, 8)]
*** center 3: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [37, 35, 0]]
** centroid: 4, normalized-entropy: 0.9994433330902989, [(1, 37), (2, 35)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [53, 9, 0]]
** centroid: 5, normalized-entropy: 0.5975977764379984, [(1, 53), (2, 9)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 70, 16]]
** centroid: 6, normalized-entropy: 0.6931274153282881, [(2, 70), (3, 16)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 51, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20515243579819797] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20515243579819797, 0.16081472336128355] ***
*** starting iteration: 2; err: [Inf, 0.20515243579819797, 0.16081472336128355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20515243579819797, 0.16081472336128355, 0.15105994526669383] ***
*** starting iteration: 3; err: [Inf, 0.20515243579819797, 0.16081472336128355, 0.15105994526669383] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20515243579819797, 0.16081472336128355, 0.15105994526669383, 0.14879139717202633] ***
*** finished computation of 7 references, err: [Inf, 0.20515243579819797, 0.16081472336128355, 0.15105994526669383, 0.14879139717202633] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [72, 8, 0]]
** centroid: 1, normalized-entropy: 0.46899559358928133, [(1, 72), (2, 8)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 65, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 61, 17]]
** centroid: 3, normalized-entropy: 0.7564041945982506, [(2, 61), (3, 17)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [73, 13, 0]]
** centroid: 4, normalized-entropy: 0.6127425554686624, [(1, 73), (2, 13)]
*** center 5: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [7, 56, 0]]
** centroid: 6, normalized-entropy: 0.5032583347756457, [(1, 7), (2, 56)]
*** center 7: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19075564310140908] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19075564310140908, 0.1585396771430969] ***
*** starting iteration: 2; err: [Inf, 0.19075564310140908, 0.1585396771430969] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19075564310140908, 0.1585396771430969, 0.15617257127165796] ***
*** starting iteration: 3; err: [Inf, 0.19075564310140908, 0.1585396771430969, 0.15617257127165796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19075564310140908, 0.1585396771430969, 0.15617257127165796, 0.15499322768393903] ***
*** finished computation of 7 references, err: [Inf, 0.19075564310140908, 0.1585396771430969, 0.15617257127165796, 0.15499322768393903] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [70, 2, 0]]
** centroid: 1, normalized-entropy: 0.18312206830137262, [(1, 70), (2, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [1, 77, 0]]
** centroid: 3, normalized-entropy: 0.098959095355743, [(1, 1), (2, 77)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 56, 18]]
** centroid: 4, normalized-entropy: 0.8003922080453356, [(2, 56), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [57, 4, 0]]
** centroid: 5, normalized-entropy: 0.34918437350730797, [(1, 57), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [34, 16, 0]]
** centroid: 6, normalized-entropy: 0.9043814577244941, [(1, 34), (2, 16)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [39, 36, 0]]
** centroid: 7, normalized-entropy: 0.998845535995202, [(1, 39), (2, 36)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2478869960382581] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2478869960382581, 0.16506663618981837] ***
*** starting iteration: 2; err: [Inf, 0.2478869960382581, 0.16506663618981837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2478869960382581, 0.16506663618981837, 0.15133901187544688] ***
*** starting iteration: 3; err: [Inf, 0.2478869960382581, 0.16506663618981837, 0.15133901187544688] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2478869960382581, 0.16506663618981837, 0.15133901187544688, 0.14771441336534918] ***
*** finished computation of 7 references, err: [Inf, 0.2478869960382581, 0.16506663618981837, 0.15133901187544688, 0.14771441336534918] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [48, 46, 0]]
** centroid: 1, normalized-entropy: 0.9996734260048917, [(1, 48), (2, 46)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 6, 0]]
** centroid: 2, normalized-entropy: 0.4912373418243334, [(1, 50), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 51, 20]]
** centroid: 3, normalized-entropy: 0.8577435372751958, [(2, 51), (3, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [60, 6, 0]]
** centroid: 6, normalized-entropy: 0.43949698692151346, [(1, 60), (2, 6)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [6, 85, 0]]
** centroid: 7, normalized-entropy: 0.35056382068186565, [(1, 6), (2, 85)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1899943631887436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1899943631887436, 0.16334860580042004] ***
*** starting iteration: 2; err: [Inf, 0.1899943631887436, 0.16334860580042004] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1899943631887436, 0.16334860580042004, 0.14929294539894908] ***
*** starting iteration: 3; err: [Inf, 0.1899943631887436, 0.16334860580042004, 0.14929294539894908] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1899943631887436, 0.16334860580042004, 0.14929294539894908, 0.14613345683924853] ***
*** finished computation of 7 references, err: [Inf, 0.1899943631887436, 0.16334860580042004, 0.14929294539894908, 0.14613345683924853] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 55, 14]]
** centroid: 1, normalized-entropy: 0.7276874545656657, [(2, 55), (3, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [66, 13, 0]]
** centroid: 2, normalized-entropy: 0.6451006442088483, [(1, 66), (2, 13)]
*** center 3: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 49, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [19, 43, 0]]
** centroid: 6, normalized-entropy: 0.8890349038123858, [(1, 19), (2, 43)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [42, 34, 0]]
** centroid: 7, normalized-entropy: 0.9919924034538556, [(1, 42), (2, 34)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2530982299167663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2530982299167663, 0.16954493736289442] ***
*** starting iteration: 2; err: [Inf, 0.2530982299167663, 0.16954493736289442] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2530982299167663, 0.16954493736289442, 0.1531209701523185] ***
*** starting iteration: 3; err: [Inf, 0.2530982299167663, 0.16954493736289442, 0.1531209701523185] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2530982299167663, 0.16954493736289442, 0.1531209701523185, 0.14696896068938076] ***
*** finished computation of 7 references, err: [Inf, 0.2530982299167663, 0.16954493736289442, 0.1531209701523185, 0.14696896068938076] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [57, 13, 0]]
** centroid: 1, normalized-entropy: 0.6924194863274741, [(1, 57), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [95, 1, 0]]
** centroid: 2, normalized-entropy: 0.08354288831032243, [(1, 95), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [49, 16, 0]]
** centroid: 4, normalized-entropy: 0.8051250074646822, [(1, 49), (2, 16)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 32, 13]]
** centroid: 5, normalized-entropy: 0.8672816222000259, [(2, 32), (3, 13)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 87, 0]]
** centroid: 6, normalized-entropy: 0.26014536394771426, [(1, 4), (2, 87)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 59, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23625889584049584] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23625889584049584, 0.1677523285318166] ***
*** starting iteration: 2; err: [Inf, 0.23625889584049584, 0.1677523285318166] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23625889584049584, 0.1677523285318166, 0.15507222319301217] ***
*** starting iteration: 3; err: [Inf, 0.23625889584049584, 0.1677523285318166, 0.15507222319301217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23625889584049584, 0.1677523285318166, 0.15507222319301217, 0.1514195233397186] ***
*** finished computation of 7 references, err: [Inf, 0.23625889584049584, 0.1677523285318166, 0.15507222319301217, 0.1514195233397186] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 71, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [78, 2, 0]]
** centroid: 2, normalized-entropy: 0.1686609314966701, [(1, 78), (2, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [68, 21, 0]]
** centroid: 5, normalized-entropy: 0.7882487221644084, [(1, 68), (2, 21)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 33, 16]]
** centroid: 6, normalized-entropy: 0.9113423759758414, [(2, 33), (3, 16)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [35, 53, 0]]
** centroid: 7, normalized-entropy: 0.9696055994904408, [(1, 35), (2, 53)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25282906008139255] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25282906008139255, 0.18880073793698102] ***
*** starting iteration: 2; err: [Inf, 0.25282906008139255, 0.18880073793698102] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25282906008139255, 0.18880073793698102, 0.16417505481559783] ***
*** starting iteration: 3; err: [Inf, 0.25282906008139255, 0.18880073793698102, 0.16417505481559783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25282906008139255, 0.18880073793698102, 0.16417505481559783, 0.1547679228587076] ***
*** finished computation of 7 references, err: [Inf, 0.25282906008139255, 0.18880073793698102, 0.16417505481559783, 0.1547679228587076] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 56, 2]]
** centroid: 1, normalized-entropy: 0.21639693245126485, [(2, 56), (3, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [81, 13, 0]]
** centroid: 2, normalized-entropy: 0.57976367540648, [(1, 81), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [72, 21, 0]]
** centroid: 3, normalized-entropy: 0.7706290693639406, [(1, 72), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [38, 24, 0]]
** centroid: 4, normalized-entropy: 0.9629004147713269, [(1, 38), (2, 24)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 22, 16]]
** centroid: 5, normalized-entropy: 0.9819407868640977, [(2, 22), (3, 16)]
*** center 6: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 56, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19444522638805212] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19444522638805212, 0.16299878260865808] ***
*** starting iteration: 2; err: [Inf, 0.19444522638805212, 0.16299878260865808] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19444522638805212, 0.16299878260865808, 0.15527700416836887] ***
*** starting iteration: 3; err: [Inf, 0.19444522638805212, 0.16299878260865808, 0.15527700416836887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19444522638805212, 0.16299878260865808, 0.15527700416836887, 0.15077397772390394] ***
*** finished computation of 7 references, err: [Inf, 0.19444522638805212, 0.16299878260865808, 0.15527700416836887, 0.15077397772390394] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 69, 2]]
** centroid: 1, normalized-entropy: 0.18512476010054582, [(2, 69), (3, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [97, 17, 0]]
** centroid: 2, normalized-entropy: 0.6076407686085387, [(1, 97), (2, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [16, 42, 0]]
** centroid: 3, normalized-entropy: 0.8497511372532974, [(1, 16), (2, 42)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 58, 14]]
** centroid: 4, normalized-entropy: 0.710676853856123, [(2, 58), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [48, 12, 0]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(1, 48), (2, 12)]
*** center 6: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20307333613932133] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20307333613932133, 0.16996831428818404] ***
*** starting iteration: 2; err: [Inf, 0.20307333613932133, 0.16996831428818404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20307333613932133, 0.16996831428818404, 0.15717672499641777] ***
*** starting iteration: 3; err: [Inf, 0.20307333613932133, 0.16996831428818404, 0.15717672499641777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20307333613932133, 0.16996831428818404, 0.15717672499641777, 0.15180503127537667] ***
*** finished computation of 7 references, err: [Inf, 0.20307333613932133, 0.16996831428818404, 0.15717672499641777, 0.15180503127537667] ***
*** center 1: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 87, 20]]
** centroid: 2, normalized-entropy: 0.6949749673676271, [(2, 87), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [46, 36, 0]]
** centroid: 3, normalized-entropy: 0.9892452969285004, [(1, 46), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [55, 6, 0]]
** centroid: 4, normalized-entropy: 0.4637773498877517, [(1, 55), (2, 6)]
*** center 5: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [39, 5, 0]]
** centroid: 6, normalized-entropy: 0.5107878229540133, [(1, 39), (2, 5)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 61, 0]]
** centroid: 7, normalized-entropy: 0.2729708579140699, [(1, 3), (2, 61)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18210292125493288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18210292125493288, 0.15569687712565064] ***
*** starting iteration: 2; err: [Inf, 0.18210292125493288, 0.15569687712565064] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18210292125493288, 0.15569687712565064, 0.15092819708166644] ***
*** starting iteration: 3; err: [Inf, 0.18210292125493288, 0.15569687712565064, 0.15092819708166644] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18210292125493288, 0.15569687712565064, 0.15092819708166644, 0.14891276898700745] ***
*** finished computation of 7 references, err: [Inf, 0.18210292125493288, 0.15569687712565064, 0.15092819708166644, 0.14891276898700745] ***
*** center 1: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [50, 23, 0]]
** centroid: 3, normalized-entropy: 0.8989377852081333, [(1, 50), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [46, 18, 0]]
** centroid: 4, normalized-entropy: 0.8571484374283717, [(1, 46), (2, 18)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 71, 13]]
** centroid: 5, normalized-entropy: 0.6216297820565386, [(2, 71), (3, 13)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 74, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [59, 7, 0]]
** centroid: 7, normalized-entropy: 0.48791799258948565, [(1, 59), (2, 7)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19616245601512491] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19616245601512491, 0.15384700734727086] ***
*** starting iteration: 2; err: [Inf, 0.19616245601512491, 0.15384700734727086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19616245601512491, 0.15384700734727086, 0.14999877210985868] ***
*** starting iteration: 3; err: [Inf, 0.19616245601512491, 0.15384700734727086, 0.14999877210985868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19616245601512491, 0.15384700734727086, 0.14999877210985868, 0.14891508618555963] ***
*** finished computation of 7 references, err: [Inf, 0.19616245601512491, 0.15384700734727086, 0.14999877210985868, 0.14891508618555963] ***
*** center 1: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [11, 52, 0]]
** centroid: 2, normalized-entropy: 0.6681273338436138, [(1, 11), (2, 52)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 70, 12]]
** centroid: 3, normalized-entropy: 0.6006085754131871, [(2, 70), (3, 12)]
*** center 4: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [14, 51, 0]]
** centroid: 5, normalized-entropy: 0.7516499461153354, [(1, 14), (2, 51)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [68, 4, 0]]
** centroid: 6, normalized-entropy: 0.3095434291503252, [(1, 68), (2, 4)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [40, 17, 0]]
** centroid: 7, normalized-entropy: 0.8791357668533337, [(1, 40), (2, 17)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21982187599968164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21982187599968164, 0.16823600477725267] ***
*** starting iteration: 2; err: [Inf, 0.21982187599968164, 0.16823600477725267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21982187599968164, 0.16823600477725267, 0.1579028644496575] ***
*** starting iteration: 3; err: [Inf, 0.21982187599968164, 0.16823600477725267, 0.1579028644496575] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21982187599968164, 0.16823600477725267, 0.1579028644496575, 0.15406502232537606] ***
*** finished computation of 7 references, err: [Inf, 0.21982187599968164, 0.16823600477725267, 0.1579028644496575, 0.15406502232537606] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [25, 40, 0]]
** centroid: 1, normalized-entropy: 0.961236604722876, [(1, 25), (2, 40)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 65, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [46, 51, 0]]
** centroid: 3, normalized-entropy: 0.998082507968892, [(1, 46), (2, 51)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [53, 12, 0]]
** centroid: 4, normalized-entropy: 0.6900703653284017, [(1, 53), (2, 12)]
*** center 5: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 24, 21]]
** centroid: 7, normalized-entropy: 0.9967916319816367, [(2, 24), (3, 21)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1921452212696895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1921452212696895, 0.15405993939191104] ***
*** starting iteration: 2; err: [Inf, 0.1921452212696895, 0.15405993939191104] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1921452212696895, 0.15405993939191104, 0.15151741234958171] ***
*** starting iteration: 3; err: [Inf, 0.1921452212696895, 0.15405993939191104, 0.15151741234958171] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1921452212696895, 0.15405993939191104, 0.15151741234958171, 0.1496008854471147] ***
*** finished computation of 7 references, err: [Inf, 0.1921452212696895, 0.15405993939191104, 0.15151741234958171, 0.1496008854471147] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 83, 16]]
** centroid: 1, normalized-entropy: 0.638161945314006, [(2, 83), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [21, 44, 0]]
** centroid: 2, normalized-entropy: 0.9076961653608385, [(1, 21), (2, 44)]
*** center 3: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [79, 7, 0]]
** centroid: 4, normalized-entropy: 0.40707680632541937, [(1, 79), (2, 7)]
*** center 5: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [44, 25, 0]]
** centroid: 6, normalized-entropy: 0.9445911819316588, [(1, 44), (2, 25)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [39, 24, 0]]
** centroid: 7, normalized-entropy: 0.9587118829771317, [(1, 39), (2, 24)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23269151929859072] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23269151929859072, 0.173871263445355] ***
*** starting iteration: 2; err: [Inf, 0.23269151929859072, 0.173871263445355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23269151929859072, 0.173871263445355, 0.16141253708302974] ***
*** starting iteration: 3; err: [Inf, 0.23269151929859072, 0.173871263445355, 0.16141253708302974] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23269151929859072, 0.173871263445355, 0.16141253708302974, 0.15782378480769693] ***
*** finished computation of 7 references, err: [Inf, 0.23269151929859072, 0.173871263445355, 0.16141253708302974, 0.15782378480769693] ***
*** center 1: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [19, 29, 0]]
** centroid: 4, normalized-entropy: 0.968461008760162, [(1, 19), (2, 29)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [54, 68, 0]]
** centroid: 5, normalized-entropy: 0.9904799742690307, [(1, 54), (2, 68)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 50, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 51, 11]]
** centroid: 7, normalized-entropy: 0.674398887071447, [(2, 51), (3, 11)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2202787077045068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2202787077045068, 0.17021050151623784] ***
*** starting iteration: 2; err: [Inf, 0.2202787077045068, 0.17021050151623784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2202787077045068, 0.17021050151623784, 0.16347047442197798] ***
*** starting iteration: 3; err: [Inf, 0.2202787077045068, 0.17021050151623784, 0.16347047442197798] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2202787077045068, 0.17021050151623784, 0.16347047442197798, 0.16170588523801416] ***
*** finished computation of 7 references, err: [Inf, 0.2202787077045068, 0.17021050151623784, 0.16347047442197798, 0.16170588523801416] ***
*** center 1: selecting labels [1] (freq >= 1) [from [121, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [8, 72, 0]]
** centroid: 2, normalized-entropy: 0.46899559358928133, [(1, 8), (2, 72)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [98, 5, 0]]
** centroid: 3, normalized-entropy: 0.28017814662275986, [(1, 98), (2, 5)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 28, 6]]
** centroid: 4, normalized-entropy: 0.6722948170756378, [(2, 28), (3, 6)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 14, 11]]
** centroid: 5, normalized-entropy: 0.9895875212220558, [(2, 14), (3, 11)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [72, 7, 0]]
** centroid: 6, normalized-entropy: 0.43180499427520785, [(1, 72), (2, 7)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 56, 0]]
** centroid: 7, normalized-entropy: 0.21639693245126485, [(1, 2), (2, 56)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22005012462101878] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22005012462101878, 0.17472822314267977] ***
*** starting iteration: 2; err: [Inf, 0.22005012462101878, 0.17472822314267977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22005012462101878, 0.17472822314267977, 0.16340766522567718] ***
*** starting iteration: 3; err: [Inf, 0.22005012462101878, 0.17472822314267977, 0.16340766522567718] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22005012462101878, 0.17472822314267977, 0.16340766522567718, 0.15874780301004648] ***
*** finished computation of 7 references, err: [Inf, 0.22005012462101878, 0.17472822314267977, 0.16340766522567718, 0.15874780301004648] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [7, 68, 0]]
** centroid: 1, normalized-entropy: 0.44749925503686355, [(1, 7), (2, 68)]
*** center 2: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [23, 35, 0]]
** centroid: 3, normalized-entropy: 0.9688977092243805, [(1, 23), (2, 35)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 27, 10]]
** centroid: 4, normalized-entropy: 0.8418521897563208, [(2, 27), (3, 10)]
*** center 5: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 35, 6]]
** centroid: 6, normalized-entropy: 0.6006085754131871, [(2, 35), (3, 6)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [87, 18, 0]]
** centroid: 7, normalized-entropy: 0.6609623351442084, [(1, 87), (2, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21998086455464363] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21998086455464363, 0.16385922980494796] ***
*** starting iteration: 2; err: [Inf, 0.21998086455464363, 0.16385922980494796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21998086455464363, 0.16385922980494796, 0.15912320326454937] ***
*** starting iteration: 3; err: [Inf, 0.21998086455464363, 0.16385922980494796, 0.15912320326454937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21998086455464363, 0.16385922980494796, 0.15912320326454937, 0.15651283848658204] ***
*** finished computation of 7 references, err: [Inf, 0.21998086455464363, 0.16385922980494796, 0.15912320326454937, 0.15651283848658204] ***
*** center 1: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [82, 35, 0]]
** centroid: 2, normalized-entropy: 0.8802436087136892, [(1, 82), (2, 35)]
*** center 3: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 72, 15]]
** centroid: 4, normalized-entropy: 0.6631968402398286, [(2, 72), (3, 15)]
*** center 5: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 63, 0]]
** centroid: 6, normalized-entropy: 0.19823496409776642, [(1, 2), (2, 63)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [27, 13, 0]]
** centroid: 7, normalized-entropy: 0.9097361225311661, [(1, 27), (2, 13)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23369058460462838] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23369058460462838, 0.1685068389205262] ***
*** starting iteration: 2; err: [Inf, 0.23369058460462838, 0.1685068389205262] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23369058460462838, 0.1685068389205262, 0.15758069794811308] ***
*** starting iteration: 3; err: [Inf, 0.23369058460462838, 0.1685068389205262, 0.15758069794811308] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23369058460462838, 0.1685068389205262, 0.15758069794811308, 0.1540875543653965] ***
*** finished computation of 7 references, err: [Inf, 0.23369058460462838, 0.1685068389205262, 0.15758069794811308, 0.1540875543653965] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [31, 67, 0]]
** centroid: 1, normalized-entropy: 0.9003418708227195, [(1, 31), (2, 67)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 47, 18]]
** centroid: 2, normalized-entropy: 0.8512243352621381, [(2, 47), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [60, 15, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 60), (2, 15)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 62, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [92, 2, 0]]
** centroid: 5, normalized-entropy: 0.14854949043034832, [(1, 92), (2, 2)]
*** center 6: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2491740590967238] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2491740590967238, 0.1723093917220831] ***
*** starting iteration: 2; err: [Inf, 0.2491740590967238, 0.1723093917220831] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2491740590967238, 0.1723093917220831, 0.15604047714732588] ***
*** starting iteration: 3; err: [Inf, 0.2491740590967238, 0.1723093917220831, 0.15604047714732588] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2491740590967238, 0.1723093917220831, 0.15604047714732588, 0.15168552626855672] ***
*** finished computation of 7 references, err: [Inf, 0.2491740590967238, 0.1723093917220831, 0.15604047714732588, 0.15168552626855672] ***
*** center 1: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 73, 9]]
** centroid: 3, normalized-entropy: 0.49917983618854633, [(2, 73), (3, 9)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [37, 28, 0]]
** centroid: 4, normalized-entropy: 0.9861260846302384, [(1, 37), (2, 28)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [82, 1, 0]]
** centroid: 5, normalized-entropy: 0.09408443883267342, [(1, 82), (2, 1)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 75, 7]]
** centroid: 6, normalized-entropy: 0.42080948947668984, [(2, 75), (3, 7)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [68, 7, 0]]
** centroid: 7, normalized-entropy: 0.44749925503686355, [(1, 68), (2, 7)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2503367366716266] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2503367366716266, 0.17465548372641207] ***
*** starting iteration: 2; err: [Inf, 0.2503367366716266, 0.17465548372641207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2503367366716266, 0.17465548372641207, 0.15765770956128836] ***
*** starting iteration: 3; err: [Inf, 0.2503367366716266, 0.17465548372641207, 0.15765770956128836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2503367366716266, 0.17465548372641207, 0.15765770956128836, 0.15160043468140066] ***
*** finished computation of 7 references, err: [Inf, 0.2503367366716266, 0.17465548372641207, 0.15765770956128836, 0.15160043468140066] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 90, 16]]
** centroid: 1, normalized-entropy: 0.612196127490834, [(2, 90), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [69, 13, 0]]
** centroid: 2, normalized-entropy: 0.6307970795750609, [(1, 69), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 25, 0]]
** centroid: 3, normalized-entropy: 0.9271587399898307, [(1, 48), (2, 25)]
*** center 4: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [8, 63, 0]]
** centroid: 7, normalized-entropy: 0.5079353563991225, [(1, 8), (2, 63)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2285564229916781] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2285564229916781, 0.15995229428075253] ***
*** starting iteration: 2; err: [Inf, 0.2285564229916781, 0.15995229428075253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2285564229916781, 0.15995229428075253, 0.15046532527543605] ***
*** starting iteration: 3; err: [Inf, 0.2285564229916781, 0.15995229428075253, 0.15046532527543605] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2285564229916781, 0.15995229428075253, 0.15046532527543605, 0.14693106705322861] ***
*** finished computation of 7 references, err: [Inf, 0.2285564229916781, 0.15995229428075253, 0.15046532527543605, 0.14693106705322861] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [76, 1, 0]]
** centroid: 1, normalized-entropy: 0.1000009430103234, [(1, 76), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [18, 59, 0]]
** centroid: 2, normalized-entropy: 0.7845191388986644, [(1, 18), (2, 59)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [11, 62, 0]]
** centroid: 3, normalized-entropy: 0.6115516951951333, [(1, 11), (2, 62)]
*** center 4: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 54, 17]]
** centroid: 5, normalized-entropy: 0.7941021417852022, [(2, 54), (3, 17)]
*** center 6: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [27, 16, 0]]
** centroid: 7, normalized-entropy: 0.9522656254366643, [(1, 27), (2, 16)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22468069459684192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22468069459684192, 0.17751036765798928] ***
*** starting iteration: 2; err: [Inf, 0.22468069459684192, 0.17751036765798928] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22468069459684192, 0.17751036765798928, 0.16353145354846493] ***
*** starting iteration: 3; err: [Inf, 0.22468069459684192, 0.17751036765798928, 0.16353145354846493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22468069459684192, 0.17751036765798928, 0.16353145354846493, 0.15726753773912788] ***
*** finished computation of 7 references, err: [Inf, 0.22468069459684192, 0.17751036765798928, 0.16353145354846493, 0.15726753773912788] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [30, 30, 0]]
** centroid: 1, normalized-entropy: 1.0, [(1, 30), (2, 30)]
*** center 2: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 19, 15]]
** centroid: 3, normalized-entropy: 0.9899927915575186, [(2, 19), (3, 15)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 67, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 48, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [77, 23, 0]]
** centroid: 6, normalized-entropy: 0.7780113035465377, [(1, 77), (2, 23)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [85, 2, 0]]
** centroid: 7, normalized-entropy: 0.15790637433488164, [(1, 85), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3460582391638309] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3460582391638309, 0.194307946652174] ***
*** starting iteration: 2; err: [Inf, 0.3460582391638309, 0.194307946652174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3460582391638309, 0.194307946652174, 0.16924595805816353] ***
*** starting iteration: 3; err: [Inf, 0.3460582391638309, 0.194307946652174, 0.16924595805816353] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3460582391638309, 0.194307946652174, 0.16924595805816353, 0.1604723849473521] ***
*** finished computation of 7 references, err: [Inf, 0.3460582391638309, 0.194307946652174, 0.16924595805816353, 0.1604723849473521] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [10, 58, 0]]
** centroid: 1, normalized-entropy: 0.6024308020404452, [(1, 10), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [72, 20, 0]]
** centroid: 2, normalized-entropy: 0.7553754125614286, [(1, 72), (2, 20)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 81, 19]]
** centroid: 3, normalized-entropy: 0.7014714598838974, [(2, 81), (3, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [12, 45, 0]]
** centroid: 7, normalized-entropy: 0.7424875695421234, [(1, 12), (2, 45)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26918272355757655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26918272355757655, 0.15552695950772613] ***
*** starting iteration: 2; err: [Inf, 0.26918272355757655, 0.15552695950772613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26918272355757655, 0.15552695950772613, 0.1508224112391472] ***
*** starting iteration: 3; err: [Inf, 0.26918272355757655, 0.15552695950772613, 0.1508224112391472] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26918272355757655, 0.15552695950772613, 0.1508224112391472, 0.1487088014613837] ***
*** finished computation of 7 references, err: [Inf, 0.26918272355757655, 0.15552695950772613, 0.1508224112391472, 0.1487088014613837] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [21, 69, 0]]
** centroid: 1, normalized-entropy: 0.7837769474847011, [(1, 21), (2, 69)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [55, 2, 0]]
** centroid: 2, normalized-entropy: 0.2192973081321754, [(1, 55), (2, 2)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [80, 7, 0]]
** centroid: 3, normalized-entropy: 0.40379715049939235, [(1, 80), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [46, 31, 0]]
** centroid: 4, normalized-entropy: 0.9724497147128791, [(1, 46), (2, 31)]
*** center 5: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 75, 9]]
** centroid: 7, normalized-entropy: 0.4912373418243334, [(2, 75), (3, 9)]
finished with 9 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 384,3 => 32,1 => 584), Dict(2 => 361,3 => 47,1 => 592))
[ Info: ===== scores for single classifier: {"micro_f1":0.937,"precision":0.937,"recall":0.937,"macro_recall":0.9468724264430636,"macro_f1":0.8927569768655776,"accuracy":0.937,"class_f1":{"2":0.9082969432314411,"3":0.8034188034188035,"1":0.9665551839464883},"class_precision":{"2":0.9570552147239264,"3":0.6714285714285714,"1":0.956953642384106},"class_recall":{"2":0.8642659279778393,"3":1.0,"1":0.9763513513513513}}
[ Info: ===== scores for 1: {"micro_f1":0.982,"precision":0.982,"recall":0.982,"macro_recall":0.9848206932694467,"macro_f1":0.9626186751235095,"accuracy":0.982,"class_f1":{"2":0.9747191011235954,"3":0.9215686274509803,"1":0.9915682967959528},"class_precision":{"2":0.9886039886039886,"3":0.8545454545454545,"1":0.98989898989899},"class_recall":{"2":0.961218836565097,"3":1.0,"1":0.9932432432432432}}
[ Info: ===== scores for 5: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9818478450749919,"macro_f1":0.9652110367091641,"accuracy":0.978,"class_f1":{"2":0.9691011235955055,"3":0.9400000000000001,"1":0.9865319865319865},"class_precision":{"2":0.9829059829059829,"3":0.8867924528301887,"1":0.9832214765100671},"class_recall":{"2":0.9556786703601108,"3":1.0,"1":0.9898648648648649}}
[ Info: ===== scores for 7: {"micro_f1":0.9810000000000001,"precision":0.981,"recall":0.981,"macro_recall":0.9846179281774851,"macro_f1":0.9674853697638509,"accuracy":0.981,"class_f1":{"2":0.9734265734265735,"3":0.9400000000000001,"1":0.989029535864979},"class_precision":{"2":0.9830508474576272,"3":0.8867924528301887,"1":0.9881956155143339},"class_recall":{"2":0.96398891966759,"3":1.0,"1":0.9898648648648649}}
[ Info: ===== scores for 9: {"micro_f1":0.985,"precision":0.985,"recall":0.985,"macro_recall":0.9883113723141425,"macro_f1":0.9705056769268637,"accuracy":0.985,"class_f1":{"2":0.9791376912378305,"3":0.9400000000000001,"1":0.9923793395427605},"class_precision":{"2":0.9832402234636871,"3":0.8867924528301887,"1":0.9949066213921901},"class_recall":{"2":0.9750692520775623,"3":1.0,"1":0.9898648648648649}}
[ Info: ===== scores for 11: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9845726959646628,"macro_f1":0.9660700305885865,"accuracy":0.979,"class_f1":{"2":0.970954356846473,"3":0.9400000000000001,"1":0.9872557349192864},"class_precision":{"2":0.9696132596685083,"3":0.8867924528301887,"1":0.9931623931623932},"class_recall":{"2":0.9722991689750693,"3":1.0,"1":0.981418918918919}}
(score = 0.98, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.98, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.98, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.98, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.981, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.981, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.982,"k":1,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.982,"precision":0.982,"recall":0.982,"macro_recall":0.9848206932694467,"macro_f1":0.9626186751235095,"accuracy":0.982,"class_f1":{"2":0.9747191011235954,"3":0.9215686274509803,"1":0.9915682967959528},"class_precision":{"2":0.9886039886039886,"3":0.8545454545454545,"1":0.98989898989899},"class_recall":{"2":0.961218836565097,"3":1.0,"1":0.9932432432432432}}
Test Summary: | Pass  Total
AKNC          |    8      8
[16, 1, 1, 1, 2, 5, 1, 11, 2, 9, 5, 3, 15, 2, 8, 3, 9, 4, 15, 6, 3, 9, 3, 6, 3, 27, 7, 2, 20, 11, 13, 11, 24, 5, 5, 39, 2, 35, 3, 27, 2, 21, 2, 13, 54, 2, 10, 7, 6, 6, 52, 20, 50, 15, 14, 12, 15, 3, 10, 4, 21, 2, 5, 36, 35, 4, 14, 3, 9, 8, 21, 6, 17, 17, 21, 17, 3, 2, 16, 4, 24, 64, 8, 2, 7, 19, 23, 10, 17, 120, 8, 10, 55, 47, 16, 4, 38, 37, 8, 4, 5, 61, 4, 10, 44, 6, 3, 33, 11, 1, 36, 2, 43, 67, 46, 109, 6, 11, 30, 27, 4, 22, 15, 16, 5, 23, 11, 63, 6, 17, 7, 5, 7, 5, 123, 81, 19, 6, 10, 21, 26, 17, 8, 125, 29, 184, 10, 3, 140, 9, 43, 57, 1589, 11, 6, 8, 27, 26, 3, 21, 3, 6, 30, 16, 6, 6, 58, 24, 131, 30, 5, 159, 17, 6, 8, 30, 3, 4, 4, 23, 18, 132, 7, 111, 13, 46, 7, 37, 40, 10, 10, 3, 150, 7, 25, 5, 282, 21, 123, 24, 4, 35, 22, 36, 1, 61, 4, 21, 55, 105, 22, 1, 113, 14, 11, 8, 31, 17, 38, 28, 12, 4, 9, 35, 3, 23, 14, 14, 98, 20, 11, 11, 8, 15, 10, 23, 4, 4, 165, 3, 4, 68, 27, 12, 35, 44, 20, 18, 19, 37, 22, 40, 23, 12, 8, 11, 4, 6, 116, 95, 28, 68, 107, 34, 8, 3, 5, 156, 10, 13, 4, 83, 11, 31, 13, 15, 26, 97, 104, 27, 53, 13, 22, 22, 2, 42, 13, 20, 8, 11, 15, 3, 136, 451, 27, 13, 21, 10, 59, 5]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6459999999999999, speedup = 0.25672534159272636, eval_ratio = 0.09933099999999999)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.43993055555555566,"recall":0.4392361111111112,"f1":null,"seconds":0.00027303583920001984,"exhaustive_search_seconds":0.000361759215593338,"evaluations":679.21875,"distances_sum":1698.1633166798304}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.6223958333333329,"recall":0.6223958333333329,"f1":null,"seconds":0.000413769856095314,"exhaustive_search_seconds":0.000361759215593338,"evaluations":885.046875,"distances_sum":1584.8865318876144}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.726562499999999,"recall":0.726562499999999,"f1":0.726562499999999,"seconds":0.0005188994109630585,"exhaustive_search_seconds":0.000361759215593338,"evaluations":1057.984375,"distances_sum":1531.818413044492}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.793402777777777,"recall":0.793402777777777,"f1":0.793402777777777,"seconds":0.0008092429488897324,"exhaustive_search_seconds":0.000361759215593338,"evaluations":1228.671875,"distances_sum":1505.8058028268215}
KCenters.DeloneInvIndex> reached performance {"precision":0.8376736111111104,"recall":0.8376736111111104,"f1":0.8376736111111104,"seconds":0.0007789414376020432,"exhaustive_search_seconds":0.000361759215593338,"evaluations":1396.4375,"distances_sum":1491.304892806931}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7910000000000003, speedup = 0.3820004524482184, eval_ratio = 0.133677)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
