Julia Version 1.5.0-DEV.868
Commit c3d6a463be (2020-05-06 16:24 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed MappedArrays ──────────────── v0.2.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed Missings ──────────────────── v0.4.3
  Installed TableTraits ───────────────── v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Tables ────────────────────── v1.0.4
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed Reexport ──────────────────── v0.2.0
  Installed DataAPI ───────────────────── v1.3.0
  Installed Compat ────────────────────── v3.9.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed InvertedIndices ───────────── v1.0.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.3
  Installed JSON ──────────────────────── v0.21.0
  Installed DataStructures ────────────── v0.17.15
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLDataPattern ─────────────── v0.5.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed OrderedCollections ────────── v1.2.0
  Installed MLDataUtils ───────────────── v0.5.1
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataFrames ────────────────── v0.20.2
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.9.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.15
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.3
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_MSMPV4/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_MSMPV4/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.9.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.3
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.932025450070699
[ Info: 0.8321307849884033
[ Info: 0.5539093809823196
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3250056021660566
mean(cdnet.distances) = 0.3893143930286169
mean(crand.distances) = 0.35481275347371893
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.51953125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.51953125,"f1":0.6654387279387283,"seconds":4.502013325691223e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.9765625,"distances_sum":1481.883223187949}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.642578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.642578125,"f1":0.7659673659673667,"seconds":5.368143320083618e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.5703125,"distances_sum":1831.1557776497211}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.16015625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.16015625,"f1":null,"seconds":3.032386302947998e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":4.9921875,"distances_sum":491.2606799471514}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.642578125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.642578125,"f1":0.7659673659673667,"seconds":5.368143320083618e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.5703125,"distances_sum":1831.1557776497211}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9369162087912095,"seconds":6.163492798805237e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8203125,"distances_sum":2701.258598045437}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9450320512820518,"seconds":5.681067705154419e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6875,"distances_sum":2802.2452852288034}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9418841575091582,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.7890625,"distances_sum":2743.2990963065113}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66015625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.66015625,"f1":0.7810784701409709,"seconds":4.9620866775512695e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.6796875,"distances_sum":1893.2277324631473}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7431640625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7431640625,"f1":0.842189928127429,"seconds":5.595386028289795e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.3828125,"distances_sum":2159.3859224980197}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9450320512820518,"seconds":5.681067705154419e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6875,"distances_sum":2802.2452852288034}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9599587912087916,"seconds":6.185844540596008e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.890625,"distances_sum":2875.453313769883}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9768086080586085,"seconds":6.282702088356018e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.953125,"distances_sum":3003.9407860396373}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9548820970695975,"seconds":6.096437573432922e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.859375,"distances_sum":2846.9356847472527}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9641082875457879,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9140625,"distances_sum":2906.9222270342934}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9671932234432238,"seconds":6.75395131111145e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9296875,"distances_sum":2938.353024661273}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9768086080586085,"seconds":6.282702088356018e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.953125,"distances_sum":3003.9407860396373}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9768086080586085,"seconds":6.282702088356018e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.953125,"distances_sum":3003.9407860396373}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1845703125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1845703125,"f1":null,"seconds":3.509223461151123e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":5.734375,"distances_sum":451.52219050414067}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1845703125,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.1845703125,"f1":null,"seconds":3.509223461151123e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":5.734375,"distances_sum":451.52219050414067}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6904296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6904296875,"f1":0.8064404345654355,"seconds":5.327165126800537e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.96875,"distances_sum":1719.330745616894}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6904296875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6904296875,"f1":0.8064404345654355,"seconds":5.327165126800537e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.96875,"distances_sum":1719.330745616894}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8725935522810531,"seconds":0.00014432892203330994,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.4375,"distances_sum":2035.7768788387637}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9550652472527478,"seconds":6.604939699172974e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8515625,"distances_sum":2578.008806068395}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.904410173160174,"seconds":7.005408406257629e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.4765625,"distances_sum":2202.044465205355}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9550652472527478,"seconds":6.604939699172974e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8515625,"distances_sum":2578.008806068395}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.919921875,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9550652472527478,"seconds":6.604939699172974e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8515625,"distances_sum":2578.008806068395}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.65625,"f1":0.7837598165723174,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.7734375,"distances_sum":1688.5757026919541}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.732421875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.732421875,"f1":0.8383907758907766,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.2421875,"distances_sum":1866.5706816532465}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.789072906260407,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.7421875,"distances_sum":1661.1444149229822}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.732421875,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.732421875,"f1":0.8383907758907766,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.2421875,"distances_sum":1866.5706816532465}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.734375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.734375,"f1":0.8384084665334675,"seconds":5.951151251792908e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.1484375,"distances_sum":1919.260540879541}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9414408508158515,"seconds":6.591901183128357e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.765625,"distances_sum":2492.2903914714348}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8734203296703305,"seconds":6.3925981521606445e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.4453125,"distances_sum":2045.3927127748598}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9356169871794878,"seconds":7.0873647928237915e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.6796875,"distances_sum":2471.399365911719}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9440793581418587,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.75,"distances_sum":2522.4424356793706}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.796875, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.796875,"f1":0.8800454753579762,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.515625,"distances_sum":2109.2407703285494}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9301453754578759,"seconds":5.751848220825195e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7734375,"distances_sum":2378.5298715956396}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9033203125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.9440793581418587,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.75,"distances_sum":2522.4424356793706}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9620936355311358,"seconds":6.6533684730529785e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.90625,"distances_sum":2611.9553534718925}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9573889652014657,"seconds":5.980953574180603e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8984375,"distances_sum":2565.6323566044957}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9620936355311358,"seconds":6.6533684730529785e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.90625,"distances_sum":2611.9553534718925}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9620936355311358,"seconds":6.6533684730529785e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.90625,"distances_sum":2611.9553534718925}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8653533966033973,"seconds":5.662441253662109e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.5625,"distances_sum":1977.677248476126}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.416015625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.416015625,"f1":null,"seconds":4.984438419342041e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":6.6953125,"distances_sum":1020.1839518979573}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.8653533966033973,"seconds":5.662441253662109e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.5625,"distances_sum":1977.677248476126}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9380125083250089,"seconds":6.126239895820618e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.84375,"distances_sum":2444.2969274733414}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.8721559690309697,"seconds":5.491077899932861e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.6640625,"distances_sum":2020.2080318379913}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9380125083250089,"seconds":6.126239895820618e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.84375,"distances_sum":2444.2969274733414}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.9803571428571431,"seconds":7.210299372673035e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.9921875,"distances_sum":2728.641635152695}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9580757783882788,"seconds":6.115064024925232e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.9453125,"distances_sum":2549.7344267792078}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":11,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.948460393772894,"seconds":5.833804607391357e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.875,"distances_sum":2508.2715676794987}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9613495879120886,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.9296875,"distances_sum":2591.410486947909}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9471299533799538,"seconds":5.662441253662109e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.8515625,"distances_sum":2554.1011477788734}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9428914835164841,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.8515625,"distances_sum":2476.185907544581}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9638671875,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9803571428571431,"seconds":7.210299372673035e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.9921875,"distances_sum":2728.641635152695}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9638671875,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9803571428571431,"seconds":7.210299372673035e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.9921875,"distances_sum":2728.641635152695}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.871692370129871,"seconds":5.120411515235901e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.78125,"distances_sum":1986.8519832595666}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6923828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6923828125,"f1":0.8072396353646362,"seconds":4.6622008085250854e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.34375,"distances_sum":1696.703956047056}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78515625,"f1":0.871692370129871,"seconds":5.120411515235901e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.78125,"distances_sum":1986.8519832595666}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.95917467948718,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.921875,"distances_sum":2572.820887003273}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9434123168498175,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.890625,"distances_sum":2445.8241976918184}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.8826897061272069,"seconds":5.211681127548218e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.765625,"distances_sum":2052.3519905755525}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.95917467948718,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.921875,"distances_sum":2572.820887003273}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9652758699633703,"seconds":6.107613444328308e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.9140625,"distances_sum":2603.1922878954433}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9706158424908429,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.953125,"distances_sum":2634.6767983681743}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9647180944055949,"seconds":5.649402737617493e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.9609375,"distances_sum":2598.878185614798}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9706158424908429,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.953125,"distances_sum":2634.6767983681743}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9706158424908429,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.953125,"distances_sum":2634.6767983681743}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7911414973914982,"seconds":4.896894097328186e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.6953125,"distances_sum":1628.7239391761423}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3876953125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3876953125,"f1":null,"seconds":3.993511199951172e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":6.3359375,"distances_sum":918.173361124633}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8608552905427915,"seconds":5.127862095832825e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.2578125,"distances_sum":1909.6500299628947}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.771484375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.771484375,"f1":0.8608552905427915,"seconds":5.127862095832825e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.2578125,"distances_sum":1909.6500299628947}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9538404304029309,"seconds":5.865469574928284e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8828125,"distances_sum":2440.1709989960805}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.8722080003330012,"seconds":5.23589551448822e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.3359375,"distances_sum":1943.3881695800987}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9624484890109893,"seconds":5.906447768211365e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.890625,"distances_sum":2511.2664017808975}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9070283882783889,"seconds":5.539506673812866e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.71875,"distances_sum":2126.1780208350365}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9624484890109893,"seconds":5.906447768211365e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.890625,"distances_sum":2511.2664017808975}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9716796875, conf: {"ssize":5,"bsize":13}, perf: {"precision":1.0,"recall":0.9716796875,"f1":0.9845982142857144,"seconds":6.159767508506775e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":9.0,"distances_sum":2663.237636661922}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9789434523809526,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9453125,"distances_sum":2634.8827355102117}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":4,"bsize":13}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.9802083333333338,"seconds":6.32554292678833e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.953125,"distances_sum":2648.510224943168}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9753720238095243,"seconds":6.1355531215667725e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.953125,"distances_sum":2598.551182630131}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9699061355311357,"seconds":5.83939254283905e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.859375,"distances_sum":2594.675283132456}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9716796875,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.9716796875,"f1":0.9845982142857144,"seconds":6.159767508506775e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":9.0,"distances_sum":2663.237636661922}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9716796875,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.9716796875,"f1":0.9845982142857144,"seconds":6.159767508506775e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":9.0,"distances_sum":2663.237636661922}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.7991362803862812,"seconds":3.7848949432373047e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.0390625,"distances_sum":1740.5886087865792}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4091796875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4091796875,"f1":null,"seconds":4.328787326812744e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":6.78125,"distances_sum":989.251250315595}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6787109375,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6787109375,"f1":0.7991362803862812,"seconds":3.7848949432373047e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.0390625,"distances_sum":1740.5886087865792}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8964457417582424,"seconds":6.683170795440674e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.6640625,"distances_sum":2305.6871802072124}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.9009677822177831,"seconds":6.552785634994507e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.6953125,"distances_sum":2311.434682267451}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9129807692307701,"seconds":6.236135959625244e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.6875,"distances_sum":2369.1498946834}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8466796875,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8466796875,"f1":0.9129807692307701,"seconds":6.236135959625244e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.6875,"distances_sum":2369.1498946834}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9722126831501836,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.90625,"distances_sum":2885.634951099204}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9738095238095241,"seconds":6.12996518611908e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9609375,"distances_sum":2880.84357955319}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9528102106227114,"seconds":6.431713700294495e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.75,"distances_sum":2703.0020665532934}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9662202380952385,"seconds":6.591901183128357e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9375,"distances_sum":2806.941958323001}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9738095238095241,"seconds":6.12996518611908e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9609375,"distances_sum":2880.84357955319}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9738095238095241,"seconds":6.12996518611908e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9609375,"distances_sum":2880.84357955319}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8657347860472869,"seconds":5.00120222568512e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.1953125,"distances_sum":2128.257824232447}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5419921875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5419921875,"f1":0.6884330946830952,"seconds":3.961846232414246e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.3515625,"distances_sum":1357.9081747608934}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.77734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.77734375,"f1":0.8657347860472869,"seconds":5.00120222568512e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.1953125,"distances_sum":2128.257824232447}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9222303737928744,"seconds":5.211681127548218e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.4453125,"distances_sum":2537.591461727475}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87109375,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.87109375,"f1":0.9222303737928744,"seconds":5.211681127548218e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.4453125,"distances_sum":2537.591461727475}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9692193223443226,"seconds":6.277114152908325e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.859375,"distances_sum":2836.484957478239}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9692193223443226,"seconds":6.277114152908325e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.859375,"distances_sum":2836.484957478239}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9692193223443226,"seconds":6.277114152908325e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.859375,"distances_sum":2836.484957478239}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.353515625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.353515625,"f1":null,"seconds":3.6228448152542114e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":6.078125,"distances_sum":878.509972926684}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6962890625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6962890625,"f1":0.8105868090243098,"seconds":5.00120222568512e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.1484375,"distances_sum":1880.0469642083058}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6962890625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6962890625,"f1":0.8105868090243098,"seconds":5.00120222568512e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.1484375,"distances_sum":1880.0469642083058}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8809940059940069,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.625,"distances_sum":2209.2831065682444}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7041015625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.7041015625,"f1":0.8150313228438236,"seconds":4.753470420837402e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.0625,"distances_sum":1898.6772234304644}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9340066183816188,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.78125,"distances_sum":2603.902362625902}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8017578125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.8017578125,"f1":0.8796744921744931,"seconds":5.034729838371277e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.5546875,"distances_sum":2240.1091686724585}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8916015625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8916015625,"f1":0.9340066183816188,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.78125,"distances_sum":2603.902362625902}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.950807005494506,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8046875,"distances_sum":2721.2189858364945}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9391858141858146,"seconds":5.433335900306702e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.75,"distances_sum":2629.3234255649954}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9387019230769235,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.75,"distances_sum":2598.187289257968}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9426313270063273,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.6953125,"distances_sum":2688.3198486039164}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.950807005494506,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8046875,"distances_sum":2721.2189858364945}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.912109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.950807005494506,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8046875,"distances_sum":2721.2189858364945}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.55078125, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.55078125,"f1":null,"seconds":4.04752790927887e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":7.2734375,"distances_sum":1345.7801215506277}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.8783175158175166,"seconds":5.1800161600112915e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.2890625,"distances_sum":2174.8438921622287}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5546875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5546875,"f1":0.6976743742368747,"seconds":4.241243004798889e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":7.2578125,"distances_sum":1394.5156903498064}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.798828125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.798828125,"f1":0.8783175158175166,"seconds":5.1800161600112915e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.2890625,"distances_sum":2174.8438921622287}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.90414307914308,"seconds":5.3551048040390015e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.421875,"distances_sum":2338.7553347974717}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9315856018981022,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.546875,"distances_sum":2512.792722397923}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9211626914751923,"seconds":5.466863512992859e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.5390625,"distances_sum":2437.6138382994745}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.884765625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.884765625,"f1":0.9315856018981022,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.546875,"distances_sum":2512.792722397923}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9386275183150188,"seconds":5.373731255531311e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.546875,"distances_sum":2582.2036964059726}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9431891025641028,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.5703125,"distances_sum":2586.2698098073483}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9431891025641028,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.5703125,"distances_sum":2586.2698098073483}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.90234375,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9431891025641028,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.5703125,"distances_sum":2586.2698098073483}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.353515625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.353515625,"f1":null,"seconds":3.4905970096588135e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":6.21875,"distances_sum":903.7163891949114}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.353515625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.353515625,"f1":null,"seconds":3.4905970096588135e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":6.21875,"distances_sum":903.7163891949114}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.908451444388945,"seconds":5.498528480529785e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.5625,"distances_sum":2383.6632435960823}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.84765625,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.84765625,"f1":0.908451444388945,"seconds":5.498528480529785e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.5625,"distances_sum":2383.6632435960823}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9424767940392945,"seconds":6.20819628238678e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.6953125,"distances_sum":2623.006435774256}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9383127289377298,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.71875,"distances_sum":2582.740419399572}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9424767940392945,"seconds":6.20819628238678e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.6953125,"distances_sum":2623.006435774256}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9013671875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9424767940392945,"seconds":6.20819628238678e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.6953125,"distances_sum":2623.006435774256}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5048828125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5048828125,"f1":0.6506222943722948,"seconds":3.91155481338501e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":6.8046875,"distances_sum":1397.7385099134972}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8429632867132872,"seconds":4.956498742103577e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":7.8671875,"distances_sum":2214.552323232232}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.751953125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.751953125,"f1":0.8429632867132872,"seconds":4.956498742103577e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":7.8671875,"distances_sum":2214.552323232232}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9414548992673999,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.640625,"distances_sum":2799.932046503739}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9569196428571435,"seconds":5.321577191352844e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.75,"distances_sum":2919.958788394272}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9569196428571435,"seconds":5.321577191352844e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.75,"distances_sum":2919.958788394272}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9667067307692312,"seconds":5.6568533182144165e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.765625,"distances_sum":2982.6409786911277}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9667067307692312,"seconds":5.6568533182144165e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.765625,"distances_sum":2982.6409786911277}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9667067307692312,"seconds":5.6568533182144165e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.765625,"distances_sum":2982.6409786911277}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.244140625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.244140625,"f1":null,"seconds":3.4831464290618896e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.21875,"distances_sum":494.06855149652876}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.7878043831168838,"seconds":8.298084139823914e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.3984375,"distances_sum":1276.7922676879798}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6591796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6591796875,"f1":0.7835326132201139,"seconds":5.679205060005188e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.4765625,"distances_sum":1257.6541576365944}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.662109375,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.662109375,"f1":0.7878043831168838,"seconds":8.298084139823914e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.3984375,"distances_sum":1276.7922676879798}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.945805236430237,"seconds":9.447336196899414e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8984375,"distances_sum":1999.7181223001662}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9362293956043962,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9140625,"distances_sum":1916.7412705990519}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.866948156010657,"seconds":8.106231689453125e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.4921875,"distances_sum":1599.1861177801804}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9395921786546794,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.90625,"distances_sum":1939.9848310237105}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9366019397269403,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.859375,"distances_sum":1952.9190215477295}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.90625,"f1":0.945805236430237,"seconds":9.447336196899414e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8984375,"distances_sum":1999.7181223001662}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9723958333333335,"seconds":6.452202796936035e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9609375,"distances_sum":2165.3529805463404}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9715602106227108,"seconds":0.00010961852967739105,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9609375,"distances_sum":2164.6201570055464}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9658203125, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.9658203125,"f1":0.9814732142857144,"seconds":8.247792720794678e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.984375,"distances_sum":2219.3791681695834}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.949542124542125,"seconds":6.420537829399109e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.90625,"distances_sum":2023.6929220032534}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9700721153846159,"seconds":2.899765968322754e-5,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9375,"distances_sum":2168.1648495930685}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9745192307692312,"seconds":6.735324859619141e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.984375,"distances_sum":2163.307776802802}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9577953296703299,"seconds":6.543472409248352e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9296875,"distances_sum":2058.5982942720166}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9529990842490849,"seconds":6.193295121192932e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8984375,"distances_sum":2044.1175728671356}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9658203125,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9814732142857144,"seconds":8.247792720794678e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.984375,"distances_sum":2219.3791681695834}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9658203125,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9814732142857144,"seconds":8.247792720794678e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.984375,"distances_sum":2219.3791681695834}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2216796875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2216796875,"f1":null,"seconds":3.341585397720337e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":5.8515625,"distances_sum":416.5484198704308}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2216796875,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.2216796875,"f1":null,"seconds":3.341585397720337e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":5.8515625,"distances_sum":416.5484198704308}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7421875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7421875,"f1":0.8391155719280728,"seconds":5.444511771202087e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.28125,"distances_sum":1531.0726613681788}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7421875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7421875,"f1":0.8391155719280728,"seconds":5.444511771202087e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.28125,"distances_sum":1531.0726613681788}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.8432447760572769,"seconds":5.299225449562073e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.2265625,"distances_sum":1569.1268238142763}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7451171875,"state":{"ssize":7,"bsize":5},"perf":{"precision":1.0,"recall":0.7451171875,"f1":0.8432447760572769,"seconds":5.299225449562073e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.2265625,"distances_sum":1569.1268238142763}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.7451171875,"state":{"ssize":7,"bsize":5},"perf":{"precision":1.0,"recall":0.7451171875,"f1":0.8432447760572769,"seconds":5.299225449562073e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.2265625,"distances_sum":1569.1268238142763}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5615234375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5615234375,"f1":0.7048586829836837,"seconds":4.719942808151245e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":7.609375,"distances_sum":1132.5348231277658}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.8014865342990352,"seconds":5.125999450683594e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.1328125,"distances_sum":1387.7345928419268}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7978515625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7978515625,"f1":0.8789840367965377,"seconds":5.6996941566467285e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.5390625,"distances_sum":1717.6130612234545}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7978515625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7978515625,"f1":0.8789840367965377,"seconds":5.6996941566467285e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.5390625,"distances_sum":1717.6130612234545}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9228396603396609,"seconds":5.405396223068237e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8203125,"distances_sum":1925.608333668833}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8662109375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8662109375,"f1":0.9228396603396609,"seconds":5.405396223068237e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8203125,"distances_sum":1925.608333668833}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9599046786546792,"seconds":5.379319190979004e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8828125,"distances_sum":2177.489347309035}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9743131868131869,"seconds":7.567927241325378e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.953125,"distances_sum":2293.0704561150105}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9729567307692311,"seconds":6.964430212974548e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.9296875,"distances_sum":2281.6319876524885}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9743131868131869,"seconds":7.567927241325378e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.953125,"distances_sum":2293.0704561150105}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9743131868131869,"seconds":7.567927241325378e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.953125,"distances_sum":2293.0704561150105}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3916015625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3916015625,"f1":null,"seconds":4.22261655330658e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":6.6328125,"distances_sum":819.164603193648}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2431640625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2431640625,"f1":null,"seconds":3.727152943611145e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":6.421875,"distances_sum":505.69090395924877}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3916015625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3916015625,"f1":null,"seconds":4.22261655330658e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":6.6328125,"distances_sum":819.164603193648}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.861536380286381,"seconds":5.304813385009766e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.5625,"distances_sum":1716.4258446772146}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8636348026973036,"seconds":4.926696419715881e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.4375,"distances_sum":1726.8334549054912}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.77734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.77734375,"f1":0.8636348026973036,"seconds":4.926696419715881e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.4375,"distances_sum":1726.8334549054912}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8970040376290382,"seconds":6.0014426708221436e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.6484375,"distances_sum":1864.3502302896818}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9298649267399274,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8515625,"distances_sum":2068.6755817110993}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9141400266400275,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.7265625,"distances_sum":1934.616657664899}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8779296875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8779296875,"f1":0.9298649267399274,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8515625,"distances_sum":2068.6755817110993}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8779296875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8779296875,"f1":0.9298649267399274,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8515625,"distances_sum":2068.6755817110993}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.66015625,"f1":0.7834002802752812,"seconds":5.161389708518982e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.1484375,"distances_sum":1444.9556672024441}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3544921875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3544921875,"f1":null,"seconds":3.50363552570343e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":5.8828125,"distances_sum":692.7201338304152}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8585060772560781,"seconds":5.0067901611328125e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.484375,"distances_sum":1807.8692059588004}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7666015625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7666015625,"f1":0.8585060772560781,"seconds":5.0067901611328125e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.484375,"distances_sum":1807.8692059588004}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9607376998002002,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8984375,"distances_sum":2383.683795882145}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9592293123543127,"seconds":5.671754479408264e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.90625,"distances_sum":2368.7652980034013}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9591575091575094,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.828125,"distances_sum":2399.615528540212}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9408024267399272,"seconds":5.323439836502075e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.890625,"distances_sum":2216.3361424556706}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9076210248085254,"seconds":5.010515451431274e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7265625,"distances_sum":1966.2886862547552}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9607376998002002,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8984375,"distances_sum":2383.683795882145}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9724015567765572,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9296875,"distances_sum":2446.2254727503814}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9664091117216121,"seconds":6.1336904764175415e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.890625,"distances_sum":2422.796794597143}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.9802827380952384,"seconds":5.591660737991333e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.953125,"distances_sum":2501.8395852737935}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.970703125, conf: {"ssize":8,"bsize":12}, perf: {"precision":1.0,"recall":0.970703125,"f1":0.9838541666666669,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9765625,"distances_sum":2529.467461587844}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9747996794871798,"seconds":5.513429641723633e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.953125,"distances_sum":2466.023403955063}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9696085164835169,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9453125,"distances_sum":2440.8942116494404}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.970703125,"state":{"ssize":8,"bsize":12},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.9838541666666669,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9765625,"distances_sum":2529.467461587844}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.970703125,"state":{"ssize":8,"bsize":12},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.9838541666666669,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9765625,"distances_sum":2529.467461587844}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8666729104229112,"seconds":5.166977643966675e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.5625,"distances_sum":1754.3144370762366}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8513148310023319,"seconds":5.003064870834351e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.4453125,"distances_sum":1678.3310348465345}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.77734375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.77734375,"f1":0.8666729104229112,"seconds":5.166977643966675e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.5625,"distances_sum":1754.3144370762366}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9324347527472536,"seconds":5.504116415977478e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.7890625,"distances_sum":2102.121973827094}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9256238553113559,"seconds":5.401670932769775e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8359375,"distances_sum":2039.124346418343}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.880859375,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.880859375,"f1":0.9324347527472536,"seconds":5.504116415977478e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.7890625,"distances_sum":2102.121973827094}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9744276556776561,"seconds":6.275251507759094e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.96875,"distances_sum":2398.128060901461}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9688072344322349,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.9609375,"distances_sum":2325.5484491867032}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9649782509157512,"seconds":5.496665835380554e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.9296875,"distances_sum":2322.158700766876}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9642513736263739,"seconds":6.776303052902222e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.9375,"distances_sum":2321.8744221561496}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9744276556776561,"seconds":6.275251507759094e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.96875,"distances_sum":2398.128060901461}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9744276556776561,"seconds":6.275251507759094e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.96875,"distances_sum":2398.128060901461}}, n: 9
mean(cfft.distances) = 0.3293624549900475
mean(cdnet.distances) = 0.3604796111061179
mean(crand.distances) = 0.3358105497855143
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.9088888888888889
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8488888888888889
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.9
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9199999999999999
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8733333333333334
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9444444444444445
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.84
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8911111111111111
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9244444444444445
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9311111111111111
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8822222222222221
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8955555555555555
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9155555555555557
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.928888888888889
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8933333333333334
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9111111111111111
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9222222222222222
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8955555555555555
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.86
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8866666666666667
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8644444444444445
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9022222222222224
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9022222222222224
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.888888888888889
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 12]]
** centroid: 11, normalized-entropy: 0.7219280948873623, [(2, 3), (3, 12)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 3, 3, 2, 3, 1]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 12]]
** centroid: 11, normalized-entropy: 0.7219280948873623, [(2, 3), (3, 12)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 3, 3, 2, 3, 1]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 12]]
** centroid: 11, normalized-entropy: 0.7219280948873623, [(2, 3), (3, 12)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 3, 3, 2, 3, 1]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 12]]
** centroid: 11, normalized-entropy: 0.7219280948873623, [(2, 3), (3, 12)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 3, 3, 2, 3, 1]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 12]]
** centroid: 11, normalized-entropy: 0.7219280948873623, [(2, 3), (3, 12)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 3, 3, 2, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 12]]
** centroid: 11, normalized-entropy: 0.7219280948873623, [(2, 3), (3, 12)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 3, 3, 2, 3, 1]
acc = 0.9533333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 12]]
** centroid: 11, normalized-entropy: 0.7219280948873623, [(2, 3), (3, 12)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 3, 3, 2, 3, 1]
acc = 0.96
*** finished computation of 12 references, err: [Inf, 0.5666118808090687] ***
*** center 1: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 17]]
** centroid: 8, normalized-entropy: 0.7024665512903904, [(2, 4), (3, 17)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 15 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.32189023875347944] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32189023875347944, 0.23953785840561542] ***
*** starting iteration: 2; err: [Inf, 0.32189023875347944, 0.23953785840561542] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32189023875347944, 0.23953785840561542, 0.23438239823733603] ***
*** starting iteration: 3; err: [Inf, 0.32189023875347944, 0.23953785840561542, 0.23438239823733603] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32189023875347944, 0.23953785840561542, 0.23438239823733603, 0.23247158573451696] ***
*** finished computation of 3 references, err: [Inf, 0.32189023875347944, 0.23953785840561542, 0.23438239823733603, 0.23247158573451696] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [240, 25, 0]]
** centroid: 1, normalized-entropy: 0.4507913883546652, [(1, 240), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [174, 34, 0]]
** centroid: 2, normalized-entropy: 0.6425267139094084, [(1, 174), (2, 34)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 165, 29]]
** centroid: 3, normalized-entropy: 0.6085488514177504, [(2, 165), (3, 29)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3179435284732879] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3179435284732879, 0.2503404736552371] ***
*** starting iteration: 2; err: [Inf, 0.3179435284732879, 0.2503404736552371] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3179435284732879, 0.2503404736552371, 0.2362764997001475] ***
*** starting iteration: 3; err: [Inf, 0.3179435284732879, 0.2503404736552371, 0.2362764997001475] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3179435284732879, 0.2503404736552371, 0.2362764997001475, 0.2350540670497843] ***
*** finished computation of 3 references, err: [Inf, 0.3179435284732879, 0.2503404736552371, 0.2362764997001475, 0.2350540670497843] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [104, 165, 21]]
** centroid: 1, normalized-entropy: 0.7998580930669582, [(1, 104), (2, 165), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [196, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [106, 75, 0]]
** centroid: 3, normalized-entropy: 0.9787355557523204, [(1, 106), (2, 75)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.41571366964970846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.41571366964970846, 0.21727349273524843] ***
*** finished computation of 7 references, err: [Inf, 0.41571366964970846, 0.21727349273524843] ***
*** center 1: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [88, 38, 0]]
** centroid: 2, normalized-entropy: 0.8832225588099292, [(1, 88), (2, 38)]
*** center 3: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 156, 28]]
** centroid: 4, normalized-entropy: 0.6152538910563409, [(2, 156), (3, 28)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [223, 15, 0]]
** centroid: 5, normalized-entropy: 0.3393386178610706, [(1, 223), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [27, 18, 0]]
** centroid: 6, normalized-entropy: 0.9709505944546688, [(1, 27), (2, 18)]
*** center 7: selecting labels [1] (freq >= 2) [from [18, 1, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19377550933540783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19377550933540783, 0.15082932205946148] ***
*** finished computation of 7 references, err: [Inf, 0.19377550933540783, 0.15082932205946148] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [110, 3, 0]]
** centroid: 1, normalized-entropy: 0.17677669701805485, [(1, 110), (2, 3)]
*** center 2: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [72, 31, 0]]
** centroid: 3, normalized-entropy: 0.8824744521750667, [(1, 72), (2, 31)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 143, 29]]
** centroid: 4, normalized-entropy: 0.6545028359927416, [(2, 143), (3, 29)]
*** center 5: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [40, 47, 0]]
** centroid: 7, normalized-entropy: 0.9953251070631713, [(1, 40), (2, 47)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24054839434814285] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24054839434814285, 0.16727813171862305] ***
*** finished computation of 7 references, err: [Inf, 0.24054839434814285, 0.16727813171862305] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [144, 62, 0]]
** centroid: 1, normalized-entropy: 0.8824744521750667, [(1, 144), (2, 62)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 103, 21]]
** centroid: 2, normalized-entropy: 0.6562267928205406, [(2, 103), (3, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [27, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 75, 0]]
** centroid: 5, normalized-entropy: 0.7990485210442682, [(1, 24), (2, 75)]
*** center 6: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24251584331267276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24251584331267276, 0.16329232215330386] ***
*** starting iteration: 2; err: [Inf, 0.24251584331267276, 0.16329232215330386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24251584331267276, 0.16329232215330386, 0.15044317131459312] ***
*** starting iteration: 3; err: [Inf, 0.24251584331267276, 0.16329232215330386, 0.15044317131459312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24251584331267276, 0.16329232215330386, 0.15044317131459312, 0.14633263213428538] ***
*** starting iteration: 4; err: [Inf, 0.24251584331267276, 0.16329232215330386, 0.15044317131459312, 0.14633263213428538] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24251584331267276, 0.16329232215330386, 0.15044317131459312, 0.14633263213428538, 0.14447842367054956] ***
*** starting iteration: 5; err: [Inf, 0.24251584331267276, 0.16329232215330386, 0.15044317131459312, 0.14633263213428538, 0.14447842367054956] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24251584331267276, 0.16329232215330386, 0.15044317131459312, 0.14633263213428538, 0.14447842367054956, 0.14360268291382416] ***
*** finished computation of 7 references, err: [Inf, 0.24251584331267276, 0.16329232215330386, 0.15044317131459312, 0.14633263213428538, 0.14447842367054956, 0.14360268291382416] ***
*** center 1: selecting labels [1] (freq >= 1) [from [116, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [83, 4, 0]]
** centroid: 3, normalized-entropy: 0.2690553027246505, [(1, 83), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [4, 81, 0]]
** centroid: 4, normalized-entropy: 0.2737691686829417, [(1, 4), (2, 81)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [89, 3, 0]]
** centroid: 5, normalized-entropy: 0.20731018585948177, [(1, 89), (2, 3)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 90, 28]]
** centroid: 6, normalized-entropy: 0.7905013842153699, [(2, 90), (3, 28)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [34, 50, 0]]
** centroid: 7, normalized-entropy: 0.9736680645496202, [(1, 34), (2, 50)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23035875047665966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23035875047665966, 0.16439050570901098] ***
*** starting iteration: 2; err: [Inf, 0.23035875047665966, 0.16439050570901098] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23035875047665966, 0.16439050570901098, 0.15225195173297015] ***
*** starting iteration: 3; err: [Inf, 0.23035875047665966, 0.16439050570901098, 0.15225195173297015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23035875047665966, 0.16439050570901098, 0.15225195173297015, 0.14788375684860228] ***
*** starting iteration: 4; err: [Inf, 0.23035875047665966, 0.16439050570901098, 0.15225195173297015, 0.14788375684860228] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23035875047665966, 0.16439050570901098, 0.15225195173297015, 0.14788375684860228, 0.14553085340653313] ***
*** starting iteration: 5; err: [Inf, 0.23035875047665966, 0.16439050570901098, 0.15225195173297015, 0.14788375684860228, 0.14553085340653313] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23035875047665966, 0.16439050570901098, 0.15225195173297015, 0.14788375684860228, 0.14553085340653313, 0.14482656055768167] ***
*** finished computation of 7 references, err: [Inf, 0.23035875047665966, 0.16439050570901098, 0.15225195173297015, 0.14788375684860228, 0.14553085340653313, 0.14482656055768167] ***
*** center 1: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 88, 29]]
** centroid: 2, normalized-entropy: 0.8078738537818512, [(2, 88), (3, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [65, 1, 0]]
** centroid: 3, normalized-entropy: 0.11327430349709665, [(1, 65), (2, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [106, 22, 0]]
** centroid: 5, normalized-entropy: 0.6619760641115651, [(1, 106), (2, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [36, 45, 0]]
** centroid: 6, normalized-entropy: 0.9910760598382222, [(1, 36), (2, 45)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [6, 68, 0]]
** centroid: 7, normalized-entropy: 0.40597703847557104, [(1, 6), (2, 68)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.17539892256863113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17539892256863113, 0.15030361006575368] ***
*** starting iteration: 2; err: [Inf, 0.17539892256863113, 0.15030361006575368] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17539892256863113, 0.15030361006575368, 0.14741648609765332] ***
*** starting iteration: 3; err: [Inf, 0.17539892256863113, 0.15030361006575368, 0.14741648609765332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17539892256863113, 0.15030361006575368, 0.14741648609765332, 0.14504545487322448] ***
*** starting iteration: 4; err: [Inf, 0.17539892256863113, 0.15030361006575368, 0.14741648609765332, 0.14504545487322448] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17539892256863113, 0.15030361006575368, 0.14741648609765332, 0.14504545487322448, 0.14384698181383793] ***
*** starting iteration: 5; err: [Inf, 0.17539892256863113, 0.15030361006575368, 0.14741648609765332, 0.14504545487322448, 0.14384698181383793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17539892256863113, 0.15030361006575368, 0.14741648609765332, 0.14504545487322448, 0.14384698181383793, 0.14331068788729107] ***
*** finished computation of 7 references, err: [Inf, 0.17539892256863113, 0.15030361006575368, 0.14741648609765332, 0.14504545487322448, 0.14384698181383793, 0.14331068788729107] ***
*** center 1: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [88, 16, 0]]
** centroid: 3, normalized-entropy: 0.6193821946787638, [(1, 88), (2, 16)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 96, 21]]
** centroid: 4, normalized-entropy: 0.6789538995185759, [(2, 96), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [67, 41, 0]]
** centroid: 5, normalized-entropy: 0.9577800211448372, [(1, 67), (2, 41)]
*** center 6: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [16, 87, 0]]
** centroid: 7, normalized-entropy: 0.6230433996216712, [(1, 16), (2, 87)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2485802621320561] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2485802621320561, 0.21859323074125234] ***
*** starting iteration: 2; err: [Inf, 0.2485802621320561, 0.21859323074125234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2485802621320561, 0.21859323074125234, 0.2067776204481184] ***
*** starting iteration: 3; err: [Inf, 0.2485802621320561, 0.21859323074125234, 0.2067776204481184] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2485802621320561, 0.21859323074125234, 0.2067776204481184, 0.19932227337581887] ***
*** finished computation of 7 references, err: [Inf, 0.2485802621320561, 0.21859323074125234, 0.2067776204481184, 0.19932227337581887] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [141, 17, 0]]
** centroid: 1, normalized-entropy: 0.49261866596516846, [(1, 141), (2, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [78, 4, 0]]
** centroid: 3, normalized-entropy: 0.2811937964320427, [(1, 78), (2, 4)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 101, 15]]
** centroid: 4, normalized-entropy: 0.5555437650236148, [(2, 101), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [76, 5, 0]]
** centroid: 5, normalized-entropy: 0.33426813256179383, [(1, 76), (2, 5)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 50, 13]]
** centroid: 6, normalized-entropy: 0.7344461802527668, [(2, 50), (3, 13)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [9, 51, 0]]
** centroid: 7, normalized-entropy: 0.6098403047164005, [(1, 9), (2, 51)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4141318715670365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4141318715670365, 0.251801290721081] ***
*** starting iteration: 2; err: [Inf, 0.4141318715670365, 0.251801290721081] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4141318715670365, 0.251801290721081, 0.22813206035197003] ***
*** starting iteration: 3; err: [Inf, 0.4141318715670365, 0.251801290721081, 0.22813206035197003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4141318715670365, 0.251801290721081, 0.22813206035197003, 0.21084056516782543] ***
*** finished computation of 7 references, err: [Inf, 0.4141318715670365, 0.251801290721081, 0.22813206035197003, 0.21084056516782543] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [57, 24, 0]]
** centroid: 1, normalized-entropy: 0.876716288999464, [(1, 57), (2, 24)]
*** center 2: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 78, 23]]
** centroid: 3, normalized-entropy: 0.7740204128451942, [(2, 78), (3, 23)]
*** center 4: selecting labels [1, 2, 3] (freq >= 2) [from [47, 117, 6]]
** centroid: 4, normalized-entropy: 0.6650308977896381, [(1, 47), (2, 117), (3, 6)]
*** center 5: selecting labels [1] (freq >= 2) [from [39, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [122, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [57, 5, 0]]
** centroid: 7, normalized-entropy: 0.4044483864864384, [(1, 57), (2, 5)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2987048501341507] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2987048501341507, 0.22647387893504647] ***
*** starting iteration: 2; err: [Inf, 0.2987048501341507, 0.22647387893504647] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2987048501341507, 0.22647387893504647, 0.21155112169437235] ***
*** starting iteration: 3; err: [Inf, 0.2987048501341507, 0.22647387893504647, 0.21155112169437235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2987048501341507, 0.22647387893504647, 0.21155112169437235, 0.20271660000465622] ***
*** finished computation of 7 references, err: [Inf, 0.2987048501341507, 0.22647387893504647, 0.21155112169437235, 0.20271660000465622] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [102, 43, 0]]
** centroid: 1, normalized-entropy: 0.8770348187509154, [(1, 102), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [19, 78, 0]]
** centroid: 2, normalized-entropy: 0.7136036068604937, [(1, 19), (2, 78)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 111, 21]]
** centroid: 3, normalized-entropy: 0.6321302781219708, [(2, 111), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [66, 8, 0]]
** centroid: 6, normalized-entropy: 0.4941829348497886, [(1, 66), (2, 8)]
*** center 7: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3471549501147557] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3471549501147557, 0.28882679291623264] ***
*** starting iteration: 2; err: [Inf, 0.3471549501147557, 0.28882679291623264] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3471549501147557, 0.28882679291623264, 0.2837751814060741] ***
*** starting iteration: 3; err: [Inf, 0.3471549501147557, 0.28882679291623264, 0.2837751814060741] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3471549501147557, 0.28882679291623264, 0.2837751814060741, 0.28365901016068085] ***
*** finished computation of 3 references, err: [Inf, 0.3471549501147557, 0.28882679291623264, 0.2837751814060741, 0.28365901016068085] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [164, 46, 0]]
** centroid: 1, normalized-entropy: 0.7584246665423688, [(1, 164), (2, 46)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [246, 8, 0]]
** centroid: 2, normalized-entropy: 0.20183992963258704, [(1, 246), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 174, 28]]
** centroid: 3, normalized-entropy: 0.5805970961414402, [(2, 174), (3, 28)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3763864063301767] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3763864063301767, 0.3055492411695722] ***
*** starting iteration: 2; err: [Inf, 0.3763864063301767, 0.3055492411695722] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3763864063301767, 0.3055492411695722, 0.29495692148112107] ***
*** starting iteration: 3; err: [Inf, 0.3763864063301767, 0.3055492411695722, 0.29495692148112107] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3763864063301767, 0.3055492411695722, 0.29495692148112107, 0.2899498031118597] ***
*** starting iteration: 4; err: [Inf, 0.3763864063301767, 0.3055492411695722, 0.29495692148112107, 0.2899498031118597] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3763864063301767, 0.3055492411695722, 0.29495692148112107, 0.2899498031118597, 0.28662993278385124] ***
*** starting iteration: 5; err: [Inf, 0.3763864063301767, 0.3055492411695722, 0.29495692148112107, 0.2899498031118597, 0.28662993278385124] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3763864063301767, 0.3055492411695722, 0.29495692148112107, 0.2899498031118597, 0.28662993278385124, 0.28527864545438514] ***
*** starting iteration: 6; err: [Inf, 0.3763864063301767, 0.3055492411695722, 0.29495692148112107, 0.2899498031118597, 0.28662993278385124, 0.28527864545438514] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3763864063301767, 0.3055492411695722, 0.29495692148112107, 0.2899498031118597, 0.28662993278385124, 0.28527864545438514, 0.2847884091209324] ***
*** finished computation of 3 references, err: [Inf, 0.3763864063301767, 0.3055492411695722, 0.29495692148112107, 0.2899498031118597, 0.28662993278385124, 0.28527864545438514, 0.2847884091209324] ***
*** center 1: selecting labels [1] (freq >= 1) [from [210, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [65, 161, 29]]
** centroid: 2, normalized-entropy: 0.8064696332889689, [(1, 65), (2, 161), (3, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [139, 63, 0]]
** centroid: 3, normalized-entropy: 0.895333045677229, [(1, 139), (2, 63)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4002080976794093] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4002080976794093, 0.29241631525768336] ***
*** starting iteration: 2; err: [Inf, 0.4002080976794093, 0.29241631525768336] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4002080976794093, 0.29241631525768336, 0.28776724502930173] ***
*** starting iteration: 3; err: [Inf, 0.4002080976794093, 0.29241631525768336, 0.28776724502930173] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4002080976794093, 0.29241631525768336, 0.28776724502930173, 0.28705816525851435] ***
*** finished computation of 3 references, err: [Inf, 0.4002080976794093, 0.29241631525768336, 0.28776724502930173, 0.28705816525851435] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [141, 86, 0]]
** centroid: 1, normalized-entropy: 0.9572290617728079, [(1, 141), (2, 86)]
*** center 2: selecting labels [1] (freq >= 1) [from [200, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [65, 154, 21]]
** centroid: 3, normalized-entropy: 0.7751919520168926, [(1, 65), (2, 154), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19108343066077108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19108343066077108, 0.16032787422473366] ***
*** finished computation of 7 references, err: [Inf, 0.19108343066077108, 0.16032787422473366] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [121, 33, 0]]
** centroid: 1, normalized-entropy: 0.7495952572594798, [(1, 121), (2, 33)]
*** center 2: selecting labels [1] (freq >= 2) [from [136, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 95, 28]]
** centroid: 3, normalized-entropy: 0.7738785654282402, [(2, 95), (3, 28)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [12, 38, 0]]
** centroid: 4, normalized-entropy: 0.7950402793845225, [(1, 12), (2, 38)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 3, 0]]
** centroid: 5, normalized-entropy: 0.2580186686648155, [(1, 66), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 59, 0]]
** centroid: 6, normalized-entropy: 0.4441260450795996, [(1, 6), (2, 59)]
*** center 7: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2521843484971488] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2521843484971488, 0.19493901759184998] ***
*** finished computation of 7 references, err: [Inf, 0.2521843484971488, 0.19493901759184998] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [86, 91, 0]]
** centroid: 1, normalized-entropy: 0.9994243005775637, [(1, 86), (2, 91)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 95, 29]]
** centroid: 2, normalized-entropy: 0.7846984744986523, [(2, 95), (3, 29)]
*** center 3: selecting labels [1] (freq >= 2) [from [22, 1, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [193, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [84, 35, 0]]
** centroid: 5, normalized-entropy: 0.8739810481273581, [(1, 84), (2, 35)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [29, 2, 0]]
** centroid: 6, normalized-entropy: 0.3451173149449528, [(1, 29), (2, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26730967750228285] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26730967750228285, 0.20489986989412573] ***
*** finished computation of 7 references, err: [Inf, 0.26730967750228285, 0.20489986989412573] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [133, 34, 0]]
** centroid: 1, normalized-entropy: 0.7290557863412994, [(1, 133), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [66, 93, 0]]
** centroid: 2, normalized-entropy: 0.9790981671667148, [(1, 66), (2, 93)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [2, 113, 21]]
** centroid: 3, normalized-entropy: 0.4591686745870402, [(1, 2), (2, 113), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [155, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.47578603233694583] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47578603233694583, 0.3009563380203492] ***
*** finished computation of 3 references, err: [Inf, 0.47578603233694583, 0.3009563380203492] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [107, 138, 28]]
** centroid: 1, normalized-entropy: 0.8606607964286455, [(1, 107), (2, 138), (3, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [113, 90, 0]]
** centroid: 2, normalized-entropy: 0.9907201466305607, [(1, 113), (2, 90)]
*** center 3: selecting labels [1] (freq >= 1) [from [190, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.47355690477429885] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47355690477429885, 0.2918704059980307] ***
*** finished computation of 3 references, err: [Inf, 0.47355690477429885, 0.2918704059980307] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [236, 34, 0]]
** centroid: 1, normalized-entropy: 0.5461582035252529, [(1, 236), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [178, 30, 0]]
** centroid: 2, normalized-entropy: 0.5952124653513116, [(1, 178), (2, 30)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 160, 29]]
** centroid: 3, normalized-entropy: 0.6183802864397098, [(2, 160), (3, 29)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4049236819432906] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4049236819432906, 0.30576854715866597] ***
*** finished computation of 3 references, err: [Inf, 0.4049236819432906, 0.30576854715866597] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [140, 172, 21]]
** centroid: 1, normalized-entropy: 0.8008396481050922, [(1, 140), (2, 172), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [102, 68, 0]]
** centroid: 2, normalized-entropy: 0.9709505944546688, [(1, 102), (2, 68)]
*** center 3: selecting labels [1] (freq >= 1) [from [164, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.26072306826699515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26072306826699515, 0.21695397100159647] ***
*** starting iteration: 2; err: [Inf, 0.26072306826699515, 0.21695397100159647] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26072306826699515, 0.21695397100159647, 0.20096299457769315] ***
*** starting iteration: 3; err: [Inf, 0.26072306826699515, 0.21695397100159647, 0.20096299457769315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26072306826699515, 0.21695397100159647, 0.20096299457769315, 0.19341507523849205] ***
*** starting iteration: 4; err: [Inf, 0.26072306826699515, 0.21695397100159647, 0.20096299457769315, 0.19341507523849205] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26072306826699515, 0.21695397100159647, 0.20096299457769315, 0.19341507523849205, 0.18934355260749758] ***
*** starting iteration: 5; err: [Inf, 0.26072306826699515, 0.21695397100159647, 0.20096299457769315, 0.19341507523849205, 0.18934355260749758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26072306826699515, 0.21695397100159647, 0.20096299457769315, 0.19341507523849205, 0.18934355260749758, 0.1880128872273182] ***
*** starting iteration: 6; err: [Inf, 0.26072306826699515, 0.21695397100159647, 0.20096299457769315, 0.19341507523849205, 0.18934355260749758, 0.1880128872273182] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26072306826699515, 0.21695397100159647, 0.20096299457769315, 0.19341507523849205, 0.18934355260749758, 0.1880128872273182, 0.1879063834843167] ***
*** finished computation of 7 references, err: [Inf, 0.26072306826699515, 0.21695397100159647, 0.20096299457769315, 0.19341507523849205, 0.18934355260749758, 0.1880128872273182, 0.1879063834843167] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [107, 29, 0]]
** centroid: 1, normalized-entropy: 0.7476215441648812, [(1, 107), (2, 29)]
*** center 2: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [6, 75, 0]]
** centroid: 3, normalized-entropy: 0.38094658570539014, [(1, 6), (2, 75)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 91, 28]]
** centroid: 4, normalized-entropy: 0.787126586201269, [(2, 91), (3, 28)]
*** center 5: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [42, 33, 0]]
** centroid: 7, normalized-entropy: 0.9895875212220558, [(1, 42), (2, 33)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3033638410381917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3033638410381917, 0.21844088723757368] ***
*** starting iteration: 2; err: [Inf, 0.3033638410381917, 0.21844088723757368] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3033638410381917, 0.21844088723757368, 0.20068053589265297] ***
*** starting iteration: 3; err: [Inf, 0.3033638410381917, 0.21844088723757368, 0.20068053589265297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3033638410381917, 0.21844088723757368, 0.20068053589265297, 0.1954865249270375] ***
*** starting iteration: 4; err: [Inf, 0.3033638410381917, 0.21844088723757368, 0.20068053589265297, 0.1954865249270375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3033638410381917, 0.21844088723757368, 0.20068053589265297, 0.1954865249270375, 0.1926324258934053] ***
*** starting iteration: 5; err: [Inf, 0.3033638410381917, 0.21844088723757368, 0.20068053589265297, 0.1954865249270375, 0.1926324258934053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3033638410381917, 0.21844088723757368, 0.20068053589265297, 0.1954865249270375, 0.1926324258934053, 0.19136337276249343] ***
*** starting iteration: 6; err: [Inf, 0.3033638410381917, 0.21844088723757368, 0.20068053589265297, 0.1954865249270375, 0.1926324258934053, 0.19136337276249343] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3033638410381917, 0.21844088723757368, 0.20068053589265297, 0.1954865249270375, 0.1926324258934053, 0.19136337276249343, 0.1908988864077297] ***
*** finished computation of 7 references, err: [Inf, 0.3033638410381917, 0.21844088723757368, 0.20068053589265297, 0.1954865249270375, 0.1926324258934053, 0.19136337276249343, 0.1908988864077297] ***
*** center 1: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 93, 29]]
** centroid: 2, normalized-entropy: 0.7912027614010296, [(2, 93), (3, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [128, 28, 0]]
** centroid: 3, normalized-entropy: 0.6789538995185759, [(1, 128), (2, 28)]
*** center 4: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [11, 84, 0]]
** centroid: 5, normalized-entropy: 0.5171354891896202, [(1, 11), (2, 84)]
*** center 6: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [47, 19, 0]]
** centroid: 7, normalized-entropy: 0.8659653498997099, [(1, 47), (2, 19)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3394299606950409] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3394299606950409, 0.22238687974592108] ***
*** starting iteration: 2; err: [Inf, 0.3394299606950409, 0.22238687974592108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3394299606950409, 0.22238687974592108, 0.20370678628363398] ***
*** starting iteration: 3; err: [Inf, 0.3394299606950409, 0.22238687974592108, 0.20370678628363398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3394299606950409, 0.22238687974592108, 0.20370678628363398, 0.19889366076589837] ***
*** starting iteration: 4; err: [Inf, 0.3394299606950409, 0.22238687974592108, 0.20370678628363398, 0.19889366076589837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3394299606950409, 0.22238687974592108, 0.20370678628363398, 0.19889366076589837, 0.19750529548154677] ***
*** starting iteration: 5; err: [Inf, 0.3394299606950409, 0.22238687974592108, 0.20370678628363398, 0.19889366076589837, 0.19750529548154677] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3394299606950409, 0.22238687974592108, 0.20370678628363398, 0.19889366076589837, 0.19750529548154677, 0.197130113384914] ***
*** finished computation of 7 references, err: [Inf, 0.3394299606950409, 0.22238687974592108, 0.20370678628363398, 0.19889366076589837, 0.19750529548154677, 0.197130113384914] ***
*** center 1: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [79, 22, 0]]
** centroid: 2, normalized-entropy: 0.756170148929897, [(1, 79), (2, 22)]
*** center 3: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 133, 21]]
** centroid: 4, normalized-entropy: 0.5746356978376794, [(2, 133), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [76, 51, 0]]
** centroid: 5, normalized-entropy: 0.971864344549656, [(1, 76), (2, 51)]
*** center 6: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [80, 34, 0]]
** centroid: 7, normalized-entropy: 0.8791357668533337, [(1, 80), (2, 34)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3589594794287662] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3589594794287662, 0.2477048552097255] ***
*** starting iteration: 2; err: [Inf, 0.3589594794287662, 0.2477048552097255] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3589594794287662, 0.2477048552097255, 0.23282117473014682] ***
*** starting iteration: 3; err: [Inf, 0.3589594794287662, 0.2477048552097255, 0.23282117473014682] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3589594794287662, 0.2477048552097255, 0.23282117473014682, 0.22910189805216752] ***
*** finished computation of 3 references, err: [Inf, 0.3589594794287662, 0.2477048552097255, 0.23282117473014682, 0.22910189805216752] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [165, 50, 0]]
** centroid: 1, normalized-entropy: 0.7824441294066888, [(1, 165), (2, 50)]
*** center 2: selecting labels [1] (freq >= 2) [from [242, 1, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [3, 177, 28]]
** centroid: 3, normalized-entropy: 0.4263764236866911, [(1, 3), (2, 177), (3, 28)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5413625124894987] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5413625124894987, 0.2563023607203293] ***
*** starting iteration: 2; err: [Inf, 0.5413625124894987, 0.2563023607203293] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5413625124894987, 0.2563023607203293, 0.23128241038150985] ***
*** starting iteration: 3; err: [Inf, 0.5413625124894987, 0.2563023607203293, 0.23128241038150985] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5413625124894987, 0.2563023607203293, 0.23128241038150985, 0.22694108923939035] ***
*** finished computation of 3 references, err: [Inf, 0.5413625124894987, 0.2563023607203293, 0.23128241038150985, 0.22694108923939035] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [8, 190, 29]]
** centroid: 1, normalized-entropy: 0.48215399444240714, [(1, 8), (2, 190), (3, 29)]
*** center 2: selecting labels [1] (freq >= 2) [from [242, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [164, 33, 0]]
** centroid: 3, normalized-entropy: 0.6519831154147788, [(1, 164), (2, 33)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29726742535223555] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29726742535223555, 0.26958663293022267] ***
*** starting iteration: 2; err: [Inf, 0.29726742535223555, 0.26958663293022267] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29726742535223555, 0.26958663293022267, 0.24357852835356184] ***
*** starting iteration: 3; err: [Inf, 0.29726742535223555, 0.26958663293022267, 0.24357852835356184] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29726742535223555, 0.26958663293022267, 0.24357852835356184, 0.22882134305254587] ***
*** finished computation of 3 references, err: [Inf, 0.29726742535223555, 0.26958663293022267, 0.24357852835356184, 0.22882134305254587] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [13, 192, 21]]
** centroid: 1, normalized-entropy: 0.4765564944915085, [(1, 13), (2, 192), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [153, 48, 0]]
** centroid: 2, normalized-entropy: 0.7930490047779772, [(1, 153), (2, 48)]
*** center 3: selecting labels [1] (freq >= 2) [from [240, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19510416635773606] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19510416635773606, 0.1512457817106287] ***
*** starting iteration: 2; err: [Inf, 0.19510416635773606, 0.1512457817106287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19510416635773606, 0.1512457817106287, 0.14679481807883615] ***
*** starting iteration: 3; err: [Inf, 0.19510416635773606, 0.1512457817106287, 0.14679481807883615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19510416635773606, 0.1512457817106287, 0.14679481807883615, 0.1458993318040405] ***
*** finished computation of 7 references, err: [Inf, 0.19510416635773606, 0.1512457817106287, 0.14679481807883615, 0.1458993318040405] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [25, 76, 0]]
** centroid: 1, normalized-entropy: 0.8073313266519867, [(1, 25), (2, 76)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [72, 16, 0]]
** centroid: 2, normalized-entropy: 0.6840384356390419, [(1, 72), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 71, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [102, 3, 0]]
** centroid: 5, normalized-entropy: 0.18717625687320805, [(1, 102), (2, 3)]
*** center 6: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 62, 28]]
** centroid: 7, normalized-entropy: 0.8944518845341284, [(2, 62), (3, 28)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18189322823907125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18189322823907125, 0.1521938511420382] ***
*** starting iteration: 2; err: [Inf, 0.18189322823907125, 0.1521938511420382] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18189322823907125, 0.1521938511420382, 0.14844626715794942] ***
*** starting iteration: 3; err: [Inf, 0.18189322823907125, 0.1521938511420382, 0.14844626715794942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18189322823907125, 0.1521938511420382, 0.14844626715794942, 0.14797464978142544] ***
*** finished computation of 7 references, err: [Inf, 0.18189322823907125, 0.1521938511420382, 0.14844626715794942, 0.14797464978142544] ***
*** center 1: selecting labels [1] (freq >= 2) [from [142, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 12, 0]]
** centroid: 2, normalized-entropy: 0.6292492238560344, [(1, 64), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 56, 29]]
** centroid: 3, normalized-entropy: 0.9259400597385792, [(2, 56), (3, 29)]
*** center 4: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 79, 0]]
** centroid: 6, normalized-entropy: 0.3681150054280774, [(1, 6), (2, 79)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [10, 77, 0]]
** centroid: 7, normalized-entropy: 0.5146464316834292, [(1, 10), (2, 77)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20254994126949935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20254994126949935, 0.151686388370197] ***
*** starting iteration: 2; err: [Inf, 0.20254994126949935, 0.151686388370197] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20254994126949935, 0.151686388370197, 0.14600434864213555] ***
*** starting iteration: 3; err: [Inf, 0.20254994126949935, 0.151686388370197, 0.14600434864213555] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20254994126949935, 0.151686388370197, 0.14600434864213555, 0.14550621802967484] ***
*** finished computation of 7 references, err: [Inf, 0.20254994126949935, 0.151686388370197, 0.14600434864213555, 0.14550621802967484] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 104, 21]]
** centroid: 1, normalized-entropy: 0.6531091121418665, [(2, 104), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [90, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [92, 35, 0]]
** centroid: 4, normalized-entropy: 0.8493728320452445, [(1, 92), (2, 35)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 25, 0]]
** centroid: 5, normalized-entropy: 0.9445911819316588, [(1, 44), (2, 25)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 75, 0]]
** centroid: 6, normalized-entropy: 0.17378132267943294, [(1, 2), (2, 75)]
*** center 7: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2791734198723604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2791734198723604, 0.22986029104928155] ***
*** starting iteration: 2; err: [Inf, 0.2791734198723604, 0.22986029104928155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2791734198723604, 0.22986029104928155, 0.21908367070433749] ***
*** starting iteration: 3; err: [Inf, 0.2791734198723604, 0.22986029104928155, 0.21908367070433749] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2791734198723604, 0.22986029104928155, 0.21908367070433749, 0.21036050688299174] ***
*** finished computation of 7 references, err: [Inf, 0.2791734198723604, 0.22986029104928155, 0.21908367070433749, 0.21036050688299174] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 72, 28]]
** centroid: 1, normalized-entropy: 0.8554508105601307, [(2, 72), (3, 28)]
*** center 2: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [69, 51, 0]]
** centroid: 4, normalized-entropy: 0.9837082626231858, [(1, 69), (2, 51)]
*** center 5: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [14, 92, 0]]
** centroid: 6, normalized-entropy: 0.5631028237513912, [(1, 14), (2, 92)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [30, 13, 0]]
** centroid: 7, normalized-entropy: 0.8841151220488478, [(1, 30), (2, 13)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26686479961373905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26686479961373905, 0.21482549485718383] ***
*** starting iteration: 2; err: [Inf, 0.26686479961373905, 0.21482549485718383] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26686479961373905, 0.21482549485718383, 0.2014748339905687] ***
*** starting iteration: 3; err: [Inf, 0.26686479961373905, 0.21482549485718383, 0.2014748339905687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26686479961373905, 0.21482549485718383, 0.2014748339905687, 0.196203814799209] ***
*** finished computation of 7 references, err: [Inf, 0.26686479961373905, 0.21482549485718383, 0.2014748339905687, 0.196203814799209] ***
*** center 1: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 56, 17]]
** centroid: 2, normalized-entropy: 0.7829924501610913, [(2, 56), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [95, 23, 0]]
** centroid: 3, normalized-entropy: 0.7116412885080164, [(1, 95), (2, 23)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 94, 12]]
** centroid: 4, normalized-entropy: 0.5095157180881823, [(2, 94), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [99, 9, 0]]
** centroid: 5, normalized-entropy: 0.4138168503036336, [(1, 99), (2, 9)]
*** center 6: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [40, 42, 0]]
** centroid: 7, normalized-entropy: 0.9995708393473225, [(1, 40), (2, 42)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23695929126668794] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23695929126668794, 0.20013305534520695] ***
*** starting iteration: 2; err: [Inf, 0.23695929126668794, 0.20013305534520695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23695929126668794, 0.20013305534520695, 0.19701321678015513] ***
*** starting iteration: 3; err: [Inf, 0.23695929126668794, 0.20013305534520695, 0.19701321678015513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23695929126668794, 0.20013305534520695, 0.19701321678015513, 0.19595349536258505] ***
*** finished computation of 7 references, err: [Inf, 0.23695929126668794, 0.20013305534520695, 0.19701321678015513, 0.19595349536258505] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 102, 21]]
** centroid: 1, normalized-entropy: 0.6593758812786991, [(2, 102), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [131, 42, 0]]
** centroid: 2, normalized-entropy: 0.7996239215204592, [(1, 131), (2, 42)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [5, 85, 0]]
** centroid: 3, normalized-entropy: 0.3095434291503252, [(1, 5), (2, 85)]
*** center 4: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [46, 11, 0]]
** centroid: 6, normalized-entropy: 0.7076690004167966, [(1, 46), (2, 11)]
*** center 7: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3119012463541405] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3119012463541405, 0.24637440512902117] ***
*** starting iteration: 2; err: [Inf, 0.3119012463541405, 0.24637440512902117] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3119012463541405, 0.24637440512902117, 0.23770098185149935] ***
*** starting iteration: 3; err: [Inf, 0.3119012463541405, 0.24637440512902117, 0.23770098185149935] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3119012463541405, 0.24637440512902117, 0.23770098185149935, 0.23692650688873665] ***
*** finished computation of 3 references, err: [Inf, 0.3119012463541405, 0.24637440512902117, 0.23770098185149935, 0.23692650688873665] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [93, 167, 28]]
** centroid: 1, normalized-entropy: 0.8261501020221602, [(1, 93), (2, 167), (3, 28)]
*** center 2: selecting labels [1] (freq >= 1) [from [199, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [118, 61, 0]]
** centroid: 3, normalized-entropy: 0.9255651771746847, [(1, 118), (2, 61)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 13)
[0.9209868551185917, 0.9189968411525298, 0.9059778341215466, 0.9050008091924261, 0.9019648390905877, 0.9010357663052274, 0.8999718281155408, 0.8689827552103001, 0.8679487871104637, 0.8629767492042942, 0.805919692147237, 0.8039686392979807, 0.7850125574676472]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 2) => 0.9209868551185917
finished with 14
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.2389540618447506] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2389540618447506, 0.18868143032716847] ***
*** starting iteration: 2; err: [Inf, 0.2389540618447506, 0.18868143032716847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2389540618447506, 0.18868143032716847, 0.18641034957311903] ***
*** starting iteration: 3; err: [Inf, 0.2389540618447506, 0.18868143032716847, 0.18641034957311903] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2389540618447506, 0.18868143032716847, 0.18641034957311903, 0.18570866252154647] ***
*** finished computation of 7 references, err: [Inf, 0.2389540618447506, 0.18868143032716847, 0.18641034957311903, 0.18570866252154647] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 82, 0]]
** centroid: 1, normalized-entropy: 0.3173238998358585, [(1, 5), (2, 82)]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [57, 42, 0]]
** centroid: 3, normalized-entropy: 0.9833761901392238, [(1, 57), (2, 42)]
*** center 4: selecting labels [1] (freq >= 2) [from [112, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [96, 4, 0]]
** centroid: 5, normalized-entropy: 0.24229218908241482, [(1, 96), (2, 4)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 95, 29]]
** centroid: 6, normalized-entropy: 0.7846984744986523, [(2, 95), (3, 29)]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2240343076795496] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2240343076795496, 0.18664196757124973] ***
*** starting iteration: 2; err: [Inf, 0.2240343076795496, 0.18664196757124973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2240343076795496, 0.18664196757124973, 0.18342184476872747] ***
*** starting iteration: 3; err: [Inf, 0.2240343076795496, 0.18664196757124973, 0.18342184476872747] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2240343076795496, 0.18664196757124973, 0.18342184476872747, 0.1829615780131436] ***
*** finished computation of 7 references, err: [Inf, 0.2240343076795496, 0.18664196757124973, 0.18342184476872747, 0.1829615780131436] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [138, 4, 0]]
** centroid: 1, normalized-entropy: 0.18512476010054582, [(1, 138), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [81, 3, 0]]
** centroid: 2, normalized-entropy: 0.2222848306856879, [(1, 81), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 55, 21]]
** centroid: 3, normalized-entropy: 0.8503821170987139, [(2, 55), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [83, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 75, 0]]
** centroid: 6, normalized-entropy: 0.17378132267943294, [(1, 2), (2, 75)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 102, 0]]
** centroid: 7, normalized-entropy: 0.13709947889981755, [(1, 2), (2, 102)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23135580400818842] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23135580400818842, 0.19144547462614403] ***
*** starting iteration: 2; err: [Inf, 0.23135580400818842, 0.19144547462614403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23135580400818842, 0.19144547462614403, 0.18609174592742087] ***
*** starting iteration: 3; err: [Inf, 0.23135580400818842, 0.19144547462614403, 0.18609174592742087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23135580400818842, 0.19144547462614403, 0.18609174592742087, 0.18575668584746965] ***
*** finished computation of 7 references, err: [Inf, 0.23135580400818842, 0.19144547462614403, 0.18609174592742087, 0.18575668584746965] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 91, 0]]
** centroid: 1, normalized-entropy: 0.2039058755048202, [(1, 3), (2, 91)]
*** center 2: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [82, 38, 0]]
** centroid: 3, normalized-entropy: 0.9007196798623592, [(1, 82), (2, 38)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [66, 21, 0]]
** centroid: 4, normalized-entropy: 0.7973265101474423, [(1, 66), (2, 21)]
*** center 5: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 78, 28]]
** centroid: 6, normalized-entropy: 0.8329458235361399, [(2, 78), (3, 28)]
*** center 7: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9209868551185917, 0.9199888511265758, 0.9189968411525298, 0.9059778341215466, 0.9050008091924261, 0.9019648390905877, 0.9010357663052274, 0.8999718281155408, 0.8689827552103001, 0.8679487871104637, 0.8629767492042942, 0.805919692147237, 0.8039686392979807, 0.7850125574676472]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 2) => 0.9209868551185917
finished with 16
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.48418451252522077] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.48418451252522077, 0.33522651078006077] ***
*** finished computation of 3 references, err: [Inf, 0.48418451252522077, 0.33522651078006077] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [210, 35, 0]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(1, 210), (2, 35)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [167, 76, 0]]
** centroid: 2, normalized-entropy: 0.8963305782359077, [(1, 167), (2, 76)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [33, 117, 28]]
** centroid: 3, normalized-entropy: 0.8002774483874748, [(1, 33), (2, 117), (3, 28)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.41012039760510244] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41012039760510244, 0.29872442620374945] ***
*** finished computation of 3 references, err: [Inf, 0.41012039760510244, 0.29872442620374945] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [1, 181, 29]]
** centroid: 1, normalized-entropy: 0.5792285918529808, [(2, 181), (3, 29)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [233, 9, 0]]
** centroid: 2, normalized-entropy: 0.22925705249183362, [(1, 233), (2, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [180, 34, 0]]
** centroid: 3, normalized-entropy: 0.6316198184485629, [(1, 180), (2, 34)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.38795954215506473] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38795954215506473, 0.31389789847933547] ***
*** finished computation of 3 references, err: [Inf, 0.38795954215506473, 0.31389789847933547] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [259, 21, 0]]
** centroid: 1, normalized-entropy: 0.3843115441264972, [(1, 259), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [107, 76, 0]]
** centroid: 2, normalized-entropy: 0.979200064695872, [(1, 107), (2, 76)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [40, 143, 21]]
** centroid: 3, normalized-entropy: 0.7305095788329172, [(1, 40), (2, 143), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3445256844529317] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3445256844529317, 0.2677270357843835] ***
*** finished computation of 3 references, err: [Inf, 0.3445256844529317, 0.2677270357843835] ***
*** center 1: selecting labels [1] (freq >= 2) [from [261, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [76, 95, 25]]
** centroid: 2, normalized-entropy: 0.8929843372101921, [(1, 76), (2, 95), (3, 25)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [73, 133, 3]]
** centroid: 3, normalized-entropy: 0.6516792351157671, [(1, 73), (2, 133), (3, 3)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.32656547762286003] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32656547762286003, 0.22833785592303282] ***
*** finished computation of 3 references, err: [Inf, 0.32656547762286003, 0.22833785592303282] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [127, 41, 0]]
** centroid: 1, normalized-entropy: 0.801706783437055, [(1, 127), (2, 41)]
*** center 2: selecting labels [1] (freq >= 2) [from [239, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [48, 183, 29]]
** centroid: 3, normalized-entropy: 0.7315943824221246, [(1, 48), (2, 183), (3, 29)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.40690940971356415] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40690940971356415, 0.2914116792646104] ***
*** finished computation of 3 references, err: [Inf, 0.40690940971356415, 0.2914116792646104] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [123, 240, 21]]
** centroid: 1, normalized-entropy: 0.7439777542873218, [(1, 123), (2, 240), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [217, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 16)
[0.9209868551185917, 0.9199888511265758, 0.9189968411525298, 0.9059778341215466, 0.9050008091924261, 0.9019648390905877, 0.9010357663052274, 0.8999718281155408, 0.8689827552103001, 0.8679487871104637, 0.8629767492042942, 0.8330845815875755, 0.805919692147237, 0.8039686392979807, 0.7850125574676472, 0.7750025474576373]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 2) => 0.9209868551185917
finished with 17
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.4835202022046521] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4835202022046521, 0.3004124331800477] ***
*** starting iteration: 2; err: [Inf, 0.4835202022046521, 0.3004124331800477] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4835202022046521, 0.3004124331800477, 0.28822568560513423] ***
*** starting iteration: 3; err: [Inf, 0.4835202022046521, 0.3004124331800477, 0.28822568560513423] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4835202022046521, 0.3004124331800477, 0.28822568560513423, 0.28564200600723677] ***
*** finished computation of 3 references, err: [Inf, 0.4835202022046521, 0.3004124331800477, 0.28822568560513423, 0.28564200600723677] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [67, 160, 29]]
** centroid: 1, normalized-entropy: 0.8112920653901369, [(1, 67), (2, 160), (3, 29)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [136, 64, 0]]
** centroid: 2, normalized-entropy: 0.9043814577244941, [(1, 136), (2, 64)]
*** center 3: selecting labels [1] (freq >= 1) [from [211, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4798603014757988] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4798603014757988, 0.29898881909718134] ***
*** starting iteration: 2; err: [Inf, 0.4798603014757988, 0.29898881909718134] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4798603014757988, 0.29898881909718134, 0.2910756559908457] ***
*** starting iteration: 3; err: [Inf, 0.4798603014757988, 0.29898881909718134, 0.2910756559908457] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4798603014757988, 0.29898881909718134, 0.2910756559908457, 0.28867620248710557] ***
*** finished computation of 3 references, err: [Inf, 0.4798603014757988, 0.29898881909718134, 0.2910756559908457, 0.28867620248710557] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [78, 152, 21]]
** centroid: 1, normalized-entropy: 0.7960081524533006, [(1, 78), (2, 152), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [129, 88, 0]]
** centroid: 2, normalized-entropy: 0.974093636178664, [(1, 129), (2, 88)]
*** center 3: selecting labels [1] (freq >= 1) [from [199, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3744454814929392] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3744454814929392, 0.3037348994481805] ***
*** starting iteration: 2; err: [Inf, 0.3744454814929392, 0.3037348994481805] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3744454814929392, 0.3037348994481805, 0.2929490292025311] ***
*** starting iteration: 3; err: [Inf, 0.3744454814929392, 0.3037348994481805, 0.2929490292025311] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3744454814929392, 0.3037348994481805, 0.2929490292025311, 0.29162072260548044] ***
*** finished computation of 3 references, err: [Inf, 0.3744454814929392, 0.3037348994481805, 0.2929490292025311, 0.29162072260548044] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [244, 30, 0]]
** centroid: 1, normalized-entropy: 0.49837285583060054, [(1, 244), (2, 30)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 168, 28]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(2, 168), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [166, 30, 0]]
** centroid: 3, normalized-entropy: 0.6174482957894681, [(1, 166), (2, 30)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 17)
[0.9209868551185917, 0.9199888511265758, 0.9189968411525298, 0.9059778341215466, 0.9050008091924261, 0.9019648390905877, 0.9010357663052274, 0.8999718281155408, 0.8780247313181445, 0.8689827552103001, 0.8679487871104637, 0.8629767492042942, 0.8330845815875755, 0.805919692147237, 0.8039686392979807, 0.7850125574676472, 0.7750025474576373]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 2) => 0.9209868551185917
finished with 18
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.25830595743738943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25830595743738943, 0.19331084180612107] ***
*** starting iteration: 2; err: [Inf, 0.25830595743738943, 0.19331084180612107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25830595743738943, 0.19331084180612107, 0.1840817780099675] ***
*** starting iteration: 3; err: [Inf, 0.25830595743738943, 0.19331084180612107, 0.1840817780099675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25830595743738943, 0.19331084180612107, 0.1840817780099675, 0.17330831133100824] ***
*** finished computation of 7 references, err: [Inf, 0.25830595743738943, 0.19331084180612107, 0.1840817780099675, 0.17330831133100824] ***
*** center 1: selecting labels [1] (freq >= 2) [from [138, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 18, 0]]
** centroid: 2, normalized-entropy: 0.8571484374283717, [(1, 46), (2, 18)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [1, 110, 23]]
** centroid: 3, normalized-entropy: 0.6643689507115365, [(2, 110), (3, 23)]
*** center 4: selecting labels [1, 2, 3] (freq >= 2) [from [55, 89, 5]]
** centroid: 4, normalized-entropy: 0.7187154117659061, [(1, 55), (2, 89), (3, 5)]
*** center 5: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [31, 11, 0]]
** centroid: 6, normalized-entropy: 0.8296071030882032, [(1, 31), (2, 11)]
*** center 7: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18954114124005747] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18954114124005747, 0.15341036476409886] ***
*** starting iteration: 2; err: [Inf, 0.18954114124005747, 0.15341036476409886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18954114124005747, 0.15341036476409886, 0.14907060154452584] ***
*** starting iteration: 3; err: [Inf, 0.18954114124005747, 0.15341036476409886, 0.14907060154452584] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18954114124005747, 0.15341036476409886, 0.14907060154452584, 0.14766425670667746] ***
*** finished computation of 7 references, err: [Inf, 0.18954114124005747, 0.15341036476409886, 0.14907060154452584, 0.14766425670667746] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [81, 41, 0]]
** centroid: 1, normalized-entropy: 0.9210038750793124, [(1, 81), (2, 41)]
*** center 2: selecting labels [1] (freq >= 2) [from [141, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [5, 72, 0]]
** centroid: 4, normalized-entropy: 0.34673146824966367, [(1, 5), (2, 72)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 61, 29]]
** centroid: 5, normalized-entropy: 0.9067816913292788, [(2, 61), (3, 29)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 1, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [10, 49, 0]]
** centroid: 7, normalized-entropy: 0.656540281386946, [(1, 10), (2, 49)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.32099309530963693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32099309530963693, 0.16911096444490994] ***
*** starting iteration: 2; err: [Inf, 0.32099309530963693, 0.16911096444490994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32099309530963693, 0.16911096444490994, 0.15866932045595758] ***
*** starting iteration: 3; err: [Inf, 0.32099309530963693, 0.16911096444490994, 0.15866932045595758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32099309530963693, 0.16911096444490994, 0.15866932045595758, 0.1534396761286909] ***
*** finished computation of 7 references, err: [Inf, 0.32099309530963693, 0.16911096444490994, 0.15866932045595758, 0.1534396761286909] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 141, 21]]
** centroid: 1, normalized-entropy: 0.5564215672884282, [(2, 141), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [16, 54, 0]]
** centroid: 3, normalized-entropy: 0.775512658133148, [(1, 16), (2, 54)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [109, 37, 0]]
** centroid: 4, normalized-entropy: 0.8166610936131945, [(1, 109), (2, 37)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 7, 0]]
** centroid: 5, normalized-entropy: 0.4645149440905521, [(1, 64), (2, 7)]
*** center 6: selecting labels [1] (freq >= 2) [from [85, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 18)
[0.9209868551185917, 0.9199888511265758, 0.9189968411525298, 0.9059778341215466, 0.9050008091924261, 0.9019648390905877, 0.9010357663052274, 0.8999718281155408, 0.8900037762313211, 0.8780247313181445, 0.8689827552103001, 0.8679487871104637, 0.8629767492042942, 0.8330845815875755, 0.805919692147237, 0.8039686392979807, 0.7850125574676472, 0.7750025474576373]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 2) => 0.9209868551185917
finished with 19
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.2500387953766328] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2500387953766328, 0.2099711081959963] ***
*** finished computation of 7 references, err: [Inf, 0.2500387953766328, 0.2099711081959963] ***
*** center 1: selecting labels [1] (freq >= 2) [from [122, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [128, 27, 0]]
** centroid: 2, normalized-entropy: 0.6672085178006011, [(1, 128), (2, 27)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 147, 28]]
** centroid: 3, normalized-entropy: 0.634309554640566, [(2, 147), (3, 28)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [22, 20, 0]]
** centroid: 4, normalized-entropy: 0.998363672593813, [(1, 22), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [70, 6, 0]]
** centroid: 5, normalized-entropy: 0.39845927409523557, [(1, 70), (2, 6)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [35, 28, 0]]
** centroid: 6, normalized-entropy: 0.9910760598382222, [(1, 35), (2, 28)]
*** center 7: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.43147867542692925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.43147867542692925, 0.2649564814580691] ***
*** finished computation of 7 references, err: [Inf, 0.43147867542692925, 0.2649564814580691] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [24, 20, 0]]
** centroid: 1, normalized-entropy: 0.9940302114769566, [(1, 24), (2, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [128, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 8, 0]]
** centroid: 3, normalized-entropy: 0.5547781633412736, [(1, 54), (2, 8)]
*** center 4: selecting labels [1, 2, 3] (freq >= 2) [from [27, 64, 28]]
** centroid: 4, normalized-entropy: 0.9198606593159115, [(1, 27), (2, 64), (3, 28)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [50, 96, 1]]
** centroid: 5, normalized-entropy: 0.9271587399898307, [(1, 50), (2, 96)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [58, 36, 0]]
** centroid: 6, normalized-entropy: 0.9601186626422924, [(1, 58), (2, 36)]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 13 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3057338961405677] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3057338961405677, 0.20984229416693972] ***
*** finished computation of 7 references, err: [Inf, 0.3057338961405677, 0.20984229416693972] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 81, 1]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [16, 47, 0]]
** centroid: 2, normalized-entropy: 0.8175072881213616, [(1, 16), (2, 47)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [16, 108, 20]]
** centroid: 3, normalized-entropy: 0.66818435069399, [(1, 16), (2, 108), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [136, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [85, 3, 0]]
** centroid: 5, normalized-entropy: 0.21450983370697788, [(1, 85), (2, 3)]
*** center 6: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 19)
[0.9209868551185917, 0.9199888511265758, 0.9189968411525298, 0.914003824183465, 0.9059778341215466, 0.9050008091924261, 0.9019648390905877, 0.9010357663052274, 0.8999718281155408, 0.8900037762313211, 0.8780247313181445, 0.8689827552103001, 0.8679487871104637, 0.8629767492042942, 0.8330845815875755, 0.805919692147237, 0.8039686392979807, 0.7850125574676472, 0.7750025474576373]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 2) => 0.9209868551185917
finished with 19
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 19)
[0.9209868551185917, 0.9199888511265758, 0.9189968411525298, 0.914003824183465, 0.9059778341215466, 0.9050008091924261, 0.9019648390905877, 0.9010357663052274, 0.8999718281155408, 0.8900037762313211, 0.8780247313181445, 0.8689827552103001, 0.8679487871104637, 0.8629767492042942, 0.8330845815875755, 0.805919692147237, 0.8039686392979807, 0.7850125574676472, 0.7750025474576373]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 2) => 0.9209868551185917
finished with 19
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 19)
[0.9209868551185917, 0.9199888511265758, 0.9189968411525298, 0.914003824183465, 0.9059778341215466, 0.9050008091924261, 0.9019648390905877, 0.9010357663052274, 0.8999718281155408, 0.8900037762313211, 0.8780247313181445, 0.8689827552103001, 0.8679487871104637, 0.8629767492042942, 0.8330845815875755, 0.805919692147237, 0.8039686392979807, 0.7850125574676472, 0.7750025474576373]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 2) => 0.9209868551185917
finished with 19
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.18559837938053533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18559837938053533, 0.15114663467358333] ***
*** starting iteration: 2; err: [Inf, 0.18559837938053533, 0.15114663467358333] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18559837938053533, 0.15114663467358333, 0.1462274437501328] ***
*** starting iteration: 3; err: [Inf, 0.18559837938053533, 0.15114663467358333, 0.1462274437501328] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18559837938053533, 0.15114663467358333, 0.1462274437501328, 0.14553404591139407] ***
*** finished computation of 7 references, err: [Inf, 0.18559837938053533, 0.15114663467358333, 0.1462274437501328, 0.14553404591139407] ***
*** center 1: selecting labels [1] (freq >= 2) [from [209, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [99, 12, 0]]
** centroid: 2, normalized-entropy: 0.4941829348497886, [(1, 99), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 85, 39]]
** centroid: 3, normalized-entropy: 0.898317954682582, [(2, 85), (3, 39)]
*** center 4: selecting labels [1] (freq >= 2) [from [140, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [144, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [12, 121, 0]]
** centroid: 6, normalized-entropy: 0.4372222722013413, [(1, 12), (2, 121)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [11, 128, 0]]
** centroid: 7, normalized-entropy: 0.3991299374356637, [(1, 11), (2, 128)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1985172154698521] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1985172154698521, 0.14657389898691325] ***
*** starting iteration: 2; err: [Inf, 0.1985172154698521, 0.14657389898691325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1985172154698521, 0.14657389898691325, 0.14368197026010604] ***
*** starting iteration: 3; err: [Inf, 0.1985172154698521, 0.14657389898691325, 0.14368197026010604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1985172154698521, 0.14657389898691325, 0.14368197026010604, 0.1433690120410174] ***
*** finished computation of 7 references, err: [Inf, 0.1985172154698521, 0.14657389898691325, 0.14368197026010604, 0.1433690120410174] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 63, 6]]
** centroid: 1, normalized-entropy: 0.42622865699814483, [(2, 63), (3, 6)]
*** center 2: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [64, 16, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 64), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [74, 6, 0]]
** centroid: 4, normalized-entropy: 0.3843115441264972, [(1, 74), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [38, 26, 0]]
** centroid: 5, normalized-entropy: 0.9744894033980525, [(1, 38), (2, 26)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 48, 11]]
** centroid: 6, normalized-entropy: 0.693965967334286, [(2, 48), (3, 11)]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19462304010428488] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19462304010428488, 0.1484496751409024] ***
*** starting iteration: 2; err: [Inf, 0.19462304010428488, 0.1484496751409024] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19462304010428488, 0.1484496751409024, 0.14444270682148636] ***
*** starting iteration: 3; err: [Inf, 0.19462304010428488, 0.1484496751409024, 0.14444270682148636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19462304010428488, 0.1484496751409024, 0.14444270682148636, 0.14370690378267317] ***
*** finished computation of 7 references, err: [Inf, 0.19462304010428488, 0.1484496751409024, 0.14444270682148636, 0.14370690378267317] ***
*** center 1: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 54, 16]]
** centroid: 2, normalized-entropy: 0.775512658133148, [(2, 54), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 4, 0]]
** centroid: 3, normalized-entropy: 0.3966277727783787, [(1, 47), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [81, 13, 0]]
** centroid: 4, normalized-entropy: 0.57976367540648, [(1, 81), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [18, 54, 0]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(1, 18), (2, 54)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 53, 0]]
** centroid: 6, normalized-entropy: 0.4236805715709106, [(1, 5), (2, 53)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19105769624374808] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19105769624374808, 0.14809729011636227] ***
*** starting iteration: 2; err: [Inf, 0.19105769624374808, 0.14809729011636227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19105769624374808, 0.14809729011636227, 0.14349607404693962] ***
*** starting iteration: 3; err: [Inf, 0.19105769624374808, 0.14809729011636227, 0.14349607404693962] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19105769624374808, 0.14809729011636227, 0.14349607404693962, 0.1423128424459137] ***
*** starting iteration: 4; err: [Inf, 0.19105769624374808, 0.14809729011636227, 0.14349607404693962, 0.1423128424459137] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19105769624374808, 0.14809729011636227, 0.14349607404693962, 0.1423128424459137, 0.1413728486644104] ***
*** finished computation of 7 references, err: [Inf, 0.19105769624374808, 0.14809729011636227, 0.14349607404693962, 0.1423128424459137, 0.1413728486644104] ***
*** center 1: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 7, 0]]
** centroid: 2, normalized-entropy: 0.47357292491745173, [(1, 62), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 53, 24]]
** centroid: 3, normalized-entropy: 0.8951127210954559, [(2, 53), (3, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [16, 48, 0]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(1, 16), (2, 48)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 54, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20603716525435448] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20603716525435448, 0.15179276997037233] ***
*** starting iteration: 2; err: [Inf, 0.20603716525435448, 0.15179276997037233] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20603716525435448, 0.15179276997037233, 0.14284690923430027] ***
*** starting iteration: 3; err: [Inf, 0.20603716525435448, 0.15179276997037233, 0.14284690923430027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20603716525435448, 0.15179276997037233, 0.14284690923430027, 0.14045742423832416] ***
*** starting iteration: 4; err: [Inf, 0.20603716525435448, 0.15179276997037233, 0.14284690923430027, 0.14045742423832416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20603716525435448, 0.15179276997037233, 0.14284690923430027, 0.14045742423832416, 0.13997254282422364] ***
*** finished computation of 7 references, err: [Inf, 0.20603716525435448, 0.15179276997037233, 0.14284690923430027, 0.14045742423832416, 0.13997254282422364] ***
*** center 1: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [78, 8, 0]]
** centroid: 2, normalized-entropy: 0.446481346896803, [(1, 78), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 43, 21]]
** centroid: 3, normalized-entropy: 0.912999213585247, [(2, 43), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [9, 65, 0]]
** centroid: 5, normalized-entropy: 0.5340042729285396, [(1, 9), (2, 65)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [15, 51, 0]]
** centroid: 6, normalized-entropy: 0.7732266742876346, [(1, 15), (2, 51)]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 1, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19744815604062751] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19744815604062751, 0.15215964588429778] ***
*** starting iteration: 2; err: [Inf, 0.19744815604062751, 0.15215964588429778] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19744815604062751, 0.15215964588429778, 0.1481065193647519] ***
*** starting iteration: 3; err: [Inf, 0.19744815604062751, 0.15215964588429778, 0.1481065193647519] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19744815604062751, 0.15215964588429778, 0.1481065193647519, 0.1470609236266464] ***
*** starting iteration: 4; err: [Inf, 0.19744815604062751, 0.15215964588429778, 0.1481065193647519, 0.1470609236266464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19744815604062751, 0.15215964588429778, 0.1481065193647519, 0.1470609236266464, 0.1460550513928756] ***
*** starting iteration: 5; err: [Inf, 0.19744815604062751, 0.15215964588429778, 0.1481065193647519, 0.1470609236266464, 0.1460550513928756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19744815604062751, 0.15215964588429778, 0.1481065193647519, 0.1470609236266464, 0.1460550513928756, 0.14529260918684303] ***
*** finished computation of 7 references, err: [Inf, 0.19744815604062751, 0.15215964588429778, 0.1481065193647519, 0.1470609236266464, 0.1460550513928756, 0.14529260918684303] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [46, 34, 0]]
** centroid: 1, normalized-entropy: 0.9837082626231858, [(1, 46), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 26, 0]]
** centroid: 2, normalized-entropy: 0.8926230133850988, [(1, 58), (2, 26)]
*** center 3: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 73, 20]]
** centroid: 4, normalized-entropy: 0.7510324165275097, [(2, 73), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 49, 0]]
** centroid: 5, normalized-entropy: 0.7408656862339816, [(1, 13), (2, 49)]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2143256624462083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2143256624462083, 0.1525207798015326] ***
*** starting iteration: 2; err: [Inf, 0.2143256624462083, 0.1525207798015326] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2143256624462083, 0.1525207798015326, 0.1464927887842059] ***
*** starting iteration: 3; err: [Inf, 0.2143256624462083, 0.1525207798015326, 0.1464927887842059] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2143256624462083, 0.1525207798015326, 0.1464927887842059, 0.14576514959707856] ***
*** finished computation of 7 references, err: [Inf, 0.2143256624462083, 0.1525207798015326, 0.1464927887842059, 0.14576514959707856] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [40, 10, 0]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(1, 40), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [78, 17, 0]]
** centroid: 2, normalized-entropy: 0.6777688570413568, [(1, 78), (2, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 66, 26]]
** centroid: 4, normalized-entropy: 0.8589810370425965, [(2, 66), (3, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 26, 0]]
** centroid: 5, normalized-entropy: 0.9635359835770286, [(1, 41), (2, 26)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 56, 0]]
** centroid: 6, normalized-entropy: 0.2899860470332091, [(1, 3), (2, 56)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2111466921698302] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2111466921698302, 0.1425993581674993] ***
*** starting iteration: 2; err: [Inf, 0.2111466921698302, 0.1425993581674993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2111466921698302, 0.1425993581674993, 0.13827606776729226] ***
*** starting iteration: 3; err: [Inf, 0.2111466921698302, 0.1425993581674993, 0.13827606776729226] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2111466921698302, 0.1425993581674993, 0.13827606776729226, 0.13815744011104106] ***
*** finished computation of 7 references, err: [Inf, 0.2111466921698302, 0.1425993581674993, 0.13827606776729226, 0.13815744011104106] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [14, 64, 0]]
** centroid: 1, normalized-entropy: 0.6789538995185759, [(1, 14), (2, 64)]
*** center 2: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 14, 0]]
** centroid: 4, normalized-entropy: 0.7051819722888517, [(1, 59), (2, 14)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 46, 22]]
** centroid: 5, normalized-entropy: 0.9081783472997053, [(2, 46), (3, 22)]
*** center 6: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [10, 49, 0]]
** centroid: 7, normalized-entropy: 0.656540281386946, [(1, 10), (2, 49)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19643760765343904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19643760765343904, 0.15053070976398886] ***
*** starting iteration: 2; err: [Inf, 0.19643760765343904, 0.15053070976398886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19643760765343904, 0.15053070976398886, 0.14468139952979983] ***
*** starting iteration: 3; err: [Inf, 0.19643760765343904, 0.15053070976398886, 0.14468139952979983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19643760765343904, 0.15053070976398886, 0.14468139952979983, 0.14385750286839902] ***
*** finished computation of 7 references, err: [Inf, 0.19643760765343904, 0.15053070976398886, 0.14468139952979983, 0.14385750286839902] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [11, 67, 0]]
** centroid: 1, normalized-entropy: 0.5869185834047994, [(1, 11), (2, 67)]
*** center 2: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [50, 32, 0]]
** centroid: 3, normalized-entropy: 0.9649567669505686, [(1, 50), (2, 32)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [52, 12, 0]]
** centroid: 4, normalized-entropy: 0.6962122601251459, [(1, 52), (2, 12)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 68, 16]]
** centroid: 5, normalized-entropy: 0.7024665512903904, [(2, 68), (3, 16)]
*** center 6: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18003066474944354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18003066474944354, 0.14913903601653875] ***
*** starting iteration: 2; err: [Inf, 0.18003066474944354, 0.14913903601653875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18003066474944354, 0.14913903601653875, 0.1437299577910453] ***
*** starting iteration: 3; err: [Inf, 0.18003066474944354, 0.14913903601653875, 0.1437299577910453] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18003066474944354, 0.14913903601653875, 0.1437299577910453, 0.1424558539194986] ***
*** starting iteration: 4; err: [Inf, 0.18003066474944354, 0.14913903601653875, 0.1437299577910453, 0.1424558539194986] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18003066474944354, 0.14913903601653875, 0.1437299577910453, 0.1424558539194986, 0.1420495849903673] ***
*** finished computation of 7 references, err: [Inf, 0.18003066474944354, 0.14913903601653875, 0.1437299577910453, 0.1424558539194986, 0.1420495849903673] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 76, 13]]
** centroid: 1, normalized-entropy: 0.5999108763872215, [(2, 76), (3, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 16, 0]]
** centroid: 3, normalized-entropy: 0.7531979910695015, [(1, 58), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [49, 21, 0]]
** centroid: 4, normalized-entropy: 0.8812908992306927, [(1, 49), (2, 21)]
*** center 5: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [73, 3, 0]]
** centroid: 6, normalized-entropy: 0.23987382528036535, [(1, 73), (2, 3)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 60, 3]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 60), (3, 3)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.190252577861771] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.190252577861771, 0.15066079566441476] ***
*** starting iteration: 2; err: [Inf, 0.190252577861771, 0.15066079566441476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.190252577861771, 0.15066079566441476, 0.14608110367972404] ***
*** starting iteration: 3; err: [Inf, 0.190252577861771, 0.15066079566441476, 0.14608110367972404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.190252577861771, 0.15066079566441476, 0.14608110367972404, 0.14391886378731578] ***
*** starting iteration: 4; err: [Inf, 0.190252577861771, 0.15066079566441476, 0.14608110367972404, 0.14391886378731578] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.190252577861771, 0.15066079566441476, 0.14608110367972404, 0.14391886378731578, 0.14322532819397749] ***
*** finished computation of 7 references, err: [Inf, 0.190252577861771, 0.15066079566441476, 0.14608110367972404, 0.14391886378731578, 0.14322532819397749] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 71, 0]]
** centroid: 1, normalized-entropy: 0.2447650820208971, [(1, 3), (2, 71)]
*** center 2: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 22, 0]]
** centroid: 3, normalized-entropy: 0.9132401614300725, [(1, 45), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [43, 14, 0]]
** centroid: 4, normalized-entropy: 0.8042522359016421, [(1, 43), (2, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [73, 5, 0]]
** centroid: 5, normalized-entropy: 0.34351974100740135, [(1, 73), (2, 5)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 75, 21]]
** centroid: 6, normalized-entropy: 0.7578784625383954, [(2, 75), (3, 21)]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19178698265645652] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19178698265645652, 0.14780062334984542] ***
*** starting iteration: 2; err: [Inf, 0.19178698265645652, 0.14780062334984542] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19178698265645652, 0.14780062334984542, 0.14415974093601108] ***
*** starting iteration: 3; err: [Inf, 0.19178698265645652, 0.14780062334984542, 0.14415974093601108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19178698265645652, 0.14780062334984542, 0.14415974093601108, 0.1436513569066301] ***
*** finished computation of 7 references, err: [Inf, 0.19178698265645652, 0.14780062334984542, 0.14415974093601108, 0.1436513569066301] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [37, 38, 0]]
** centroid: 1, normalized-entropy: 0.999871756640849, [(1, 37), (2, 38)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 6, 0]]
** centroid: 2, normalized-entropy: 0.5095157180881823, [(1, 47), (2, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 57, 14]]
** centroid: 4, normalized-entropy: 0.7162583911075451, [(2, 57), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [74, 5, 0]]
** centroid: 5, normalized-entropy: 0.340373285759646, [(1, 74), (2, 5)]
*** center 6: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 57, 0]]
** centroid: 7, normalized-entropy: 0.21357981533827744, [(1, 2), (2, 57)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20327134996745735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20327134996745735, 0.15067847769893705] ***
*** starting iteration: 2; err: [Inf, 0.20327134996745735, 0.15067847769893705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20327134996745735, 0.15067847769893705, 0.14748224098049104] ***
*** starting iteration: 3; err: [Inf, 0.20327134996745735, 0.15067847769893705, 0.14748224098049104] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20327134996745735, 0.15067847769893705, 0.14748224098049104, 0.14716657721623777] ***
*** finished computation of 7 references, err: [Inf, 0.20327134996745735, 0.15067847769893705, 0.14748224098049104, 0.14716657721623777] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [94, 5, 0]]
** centroid: 1, normalized-entropy: 0.2885385136944103, [(1, 94), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [41, 18, 0]]
** centroid: 2, normalized-entropy: 0.8874179270685693, [(1, 41), (2, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 51, 23]]
** centroid: 4, normalized-entropy: 0.8941071841443881, [(2, 51), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [27, 36, 0]]
** centroid: 5, normalized-entropy: 0.9852281360342514, [(1, 27), (2, 36)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1887242416869849] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1887242416869849, 0.1479316987558268] ***
*** starting iteration: 2; err: [Inf, 0.1887242416869849, 0.1479316987558268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1887242416869849, 0.1479316987558268, 0.1439729373753071] ***
*** starting iteration: 3; err: [Inf, 0.1887242416869849, 0.1479316987558268, 0.1439729373753071] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1887242416869849, 0.1479316987558268, 0.1439729373753071, 0.1436646958757192] ***
*** finished computation of 7 references, err: [Inf, 0.1887242416869849, 0.1479316987558268, 0.1439729373753071, 0.1436646958757192] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [8, 60, 0]]
** centroid: 1, normalized-entropy: 0.5225593745369407, [(1, 8), (2, 60)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 17, 0]]
** centroid: 2, normalized-entropy: 0.8171387756817725, [(1, 50), (2, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 70, 18]]
** centroid: 4, normalized-entropy: 0.7309263775906009, [(2, 70), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 20, 0]]
** centroid: 5, normalized-entropy: 0.7778108790853029, [(1, 67), (2, 20)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [53, 8, 0]]
** centroid: 6, normalized-entropy: 0.5605769426145328, [(1, 53), (2, 8)]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20677180280163884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20677180280163884, 0.1509085129201412] ***
*** starting iteration: 2; err: [Inf, 0.20677180280163884, 0.1509085129201412] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20677180280163884, 0.1509085129201412, 0.1449009855496697] ***
*** starting iteration: 3; err: [Inf, 0.20677180280163884, 0.1509085129201412, 0.1449009855496697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20677180280163884, 0.1509085129201412, 0.1449009855496697, 0.14432351427711546] ***
*** finished computation of 7 references, err: [Inf, 0.20677180280163884, 0.1509085129201412, 0.1449009855496697, 0.14432351427711546] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 75, 14]]
** centroid: 1, normalized-entropy: 0.6278191534832795, [(2, 75), (3, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [74, 2, 0]]
** centroid: 3, normalized-entropy: 0.17556502585750275, [(1, 74), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [54, 21, 0]]
** centroid: 4, normalized-entropy: 0.8554508105601307, [(1, 54), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [50, 14, 0]]
** centroid: 5, normalized-entropy: 0.7578784625383954, [(1, 50), (2, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 64, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20867628062143923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20867628062143923, 0.15177908102981746] ***
*** starting iteration: 2; err: [Inf, 0.20867628062143923, 0.15177908102981746] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20867628062143923, 0.15177908102981746, 0.14704754285886884] ***
*** starting iteration: 3; err: [Inf, 0.20867628062143923, 0.15177908102981746, 0.14704754285886884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20867628062143923, 0.15177908102981746, 0.14704754285886884, 0.14620975957158952] ***
*** finished computation of 7 references, err: [Inf, 0.20867628062143923, 0.15177908102981746, 0.14704754285886884, 0.14620975957158952] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [42, 19, 0]]
** centroid: 1, normalized-entropy: 0.8948692308065576, [(1, 42), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 4, 0]]
** centroid: 2, normalized-entropy: 0.4021791902022729, [(1, 46), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 72, 18]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 72), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [59, 16, 0]]
** centroid: 5, normalized-entropy: 0.7478061583312324, [(1, 59), (2, 16)]
*** center 6: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [14, 56, 0]]
** centroid: 7, normalized-entropy: 0.7219280948873623, [(1, 14), (2, 56)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21015985198225826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21015985198225826, 0.15157841982878745] ***
*** starting iteration: 2; err: [Inf, 0.21015985198225826, 0.15157841982878745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21015985198225826, 0.15157841982878745, 0.14884245032444596] ***
*** starting iteration: 3; err: [Inf, 0.21015985198225826, 0.15157841982878745, 0.14884245032444596] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21015985198225826, 0.15157841982878745, 0.14884245032444596, 0.14861813487671316] ***
*** finished computation of 7 references, err: [Inf, 0.21015985198225826, 0.15157841982878745, 0.14884245032444596, 0.14861813487671316] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [54, 9, 0]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(1, 54), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [86, 10, 0]]
** centroid: 2, normalized-entropy: 0.4820661480830933, [(1, 86), (2, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 74, 17]]
** centroid: 4, normalized-entropy: 0.6947570868163001, [(2, 74), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [39, 29, 0]]
** centroid: 5, normalized-entropy: 0.9843432030984676, [(1, 39), (2, 29)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 57, 0]]
** centroid: 6, normalized-entropy: 0.2863969571159561, [(1, 3), (2, 57)]
*** center 7: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.189481405666098] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.189481405666098, 0.15160979812545702] ***
*** starting iteration: 2; err: [Inf, 0.189481405666098, 0.15160979812545702] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.189481405666098, 0.15160979812545702, 0.14602561410889028] ***
*** starting iteration: 3; err: [Inf, 0.189481405666098, 0.15160979812545702, 0.14602561410889028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.189481405666098, 0.15160979812545702, 0.14602561410889028, 0.14404855940304698] ***
*** starting iteration: 4; err: [Inf, 0.189481405666098, 0.15160979812545702, 0.14602561410889028, 0.14404855940304698] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.189481405666098, 0.15160979812545702, 0.14602561410889028, 0.14404855940304698, 0.14340084094367922] ***
*** finished computation of 7 references, err: [Inf, 0.189481405666098, 0.15160979812545702, 0.14602561410889028, 0.14404855940304698, 0.14340084094367922] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [86, 8, 0]]
** centroid: 1, normalized-entropy: 0.4199210973757179, [(1, 86), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [69, 9, 0]]
** centroid: 2, normalized-entropy: 0.5159469300074472, [(1, 69), (2, 9)]
*** center 3: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 40, 17]]
** centroid: 4, normalized-entropy: 0.8791357668533337, [(2, 40), (3, 17)]
*** center 5: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 61, 0]]
** centroid: 6, normalized-entropy: 0.5535072654547254, [(1, 9), (2, 61)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 56, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.196286763895303] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.196286763895303, 0.15102391724474729] ***
*** starting iteration: 2; err: [Inf, 0.196286763895303, 0.15102391724474729] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.196286763895303, 0.15102391724474729, 0.14702367901057006] ***
*** starting iteration: 3; err: [Inf, 0.196286763895303, 0.15102391724474729, 0.14702367901057006] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.196286763895303, 0.15102391724474729, 0.14702367901057006, 0.14597134600766004] ***
*** starting iteration: 4; err: [Inf, 0.196286763895303, 0.15102391724474729, 0.14702367901057006, 0.14597134600766004] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.196286763895303, 0.15102391724474729, 0.14702367901057006, 0.14597134600766004, 0.14555852844193579] ***
*** finished computation of 7 references, err: [Inf, 0.196286763895303, 0.15102391724474729, 0.14702367901057006, 0.14597134600766004, 0.14555852844193579] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [17, 58, 0]]
** centroid: 1, normalized-entropy: 0.7721551435804817, [(1, 17), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 10, 0]]
** centroid: 2, normalized-entropy: 0.5435644431995963, [(1, 70), (2, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 55, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 41, 18]]
** centroid: 7, normalized-entropy: 0.8874179270685693, [(2, 41), (3, 18)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19758021566737444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19758021566737444, 0.15056310557574035] ***
*** starting iteration: 2; err: [Inf, 0.19758021566737444, 0.15056310557574035] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19758021566737444, 0.15056310557574035, 0.1448036268595606] ***
*** starting iteration: 3; err: [Inf, 0.19758021566737444, 0.15056310557574035, 0.1448036268595606] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19758021566737444, 0.15056310557574035, 0.1448036268595606, 0.14361329923942684] ***
*** starting iteration: 4; err: [Inf, 0.19758021566737444, 0.15056310557574035, 0.1448036268595606, 0.14361329923942684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19758021566737444, 0.15056310557574035, 0.1448036268595606, 0.14361329923942684, 0.14301607686653733] ***
*** finished computation of 7 references, err: [Inf, 0.19758021566737444, 0.15056310557574035, 0.1448036268595606, 0.14361329923942684, 0.14301607686653733] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 62, 0]]
** centroid: 1, normalized-entropy: 0.43055186701043935, [(1, 6), (2, 62)]
*** center 2: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 36, 0]]
** centroid: 3, normalized-entropy: 0.9572951876544017, [(1, 59), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 11, 0]]
** centroid: 4, normalized-entropy: 0.6274303352684106, [(1, 59), (2, 11)]
*** center 5: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 52, 27]]
** centroid: 7, normalized-entropy: 0.9265044456232997, [(2, 52), (3, 27)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20822398919425905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20822398919425905, 0.15143699418567122] ***
*** starting iteration: 2; err: [Inf, 0.20822398919425905, 0.15143699418567122] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20822398919425905, 0.15143699418567122, 0.146594835259486] ***
*** starting iteration: 3; err: [Inf, 0.20822398919425905, 0.15143699418567122, 0.146594835259486] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20822398919425905, 0.15143699418567122, 0.146594835259486, 0.1458747001271695] ***
*** finished computation of 7 references, err: [Inf, 0.20822398919425905, 0.15143699418567122, 0.146594835259486, 0.1458747001271695] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [45, 24, 0]]
** centroid: 1, normalized-entropy: 0.9321115676166747, [(1, 45), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 6, 0]]
** centroid: 2, normalized-entropy: 0.4743454375622396, [(1, 53), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 73, 21]]
** centroid: 3, normalized-entropy: 0.7663350359691776, [(2, 73), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [75, 13, 0]]
** centroid: 5, normalized-entropy: 0.6041234581483739, [(1, 75), (2, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 58, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18687550793588162] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18687550793588162, 0.14777724847849458] ***
*** starting iteration: 2; err: [Inf, 0.18687550793588162, 0.14777724847849458] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18687550793588162, 0.14777724847849458, 0.1417215458257124] ***
*** starting iteration: 3; err: [Inf, 0.18687550793588162, 0.14777724847849458, 0.1417215458257124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18687550793588162, 0.14777724847849458, 0.1417215458257124, 0.14086096232943238] ***
*** finished computation of 7 references, err: [Inf, 0.18687550793588162, 0.14777724847849458, 0.1417215458257124, 0.14086096232943238] ***
*** center 1: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 55, 21]]
** centroid: 2, normalized-entropy: 0.8503821170987139, [(2, 55), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 12, 0]]
** centroid: 3, normalized-entropy: 0.7568336324184036, [(1, 43), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 5, 0]]
** centroid: 4, normalized-entropy: 0.39993804743902767, [(1, 58), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 51, 0]]
** centroid: 5, normalized-entropy: 0.48546076074591343, [(1, 6), (2, 51)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [13, 58, 0]]
** centroid: 6, normalized-entropy: 0.6868088934028034, [(1, 13), (2, 58)]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2065538880713284] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2065538880713284, 0.1490568408370018] ***
*** starting iteration: 2; err: [Inf, 0.2065538880713284, 0.1490568408370018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2065538880713284, 0.1490568408370018, 0.1434606152717024] ***
*** starting iteration: 3; err: [Inf, 0.2065538880713284, 0.1490568408370018, 0.1434606152717024] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2065538880713284, 0.1490568408370018, 0.1434606152717024, 0.1431632385663688] ***
*** finished computation of 7 references, err: [Inf, 0.2065538880713284, 0.1490568408370018, 0.1434606152717024, 0.1431632385663688] ***
*** center 1: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 42, 21]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(2, 42), (3, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [64, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [85, 4, 0]]
** centroid: 4, normalized-entropy: 0.2645173683629748, [(1, 85), (2, 4)]
*** center 5: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 60, 0]]
** centroid: 6, normalized-entropy: 0.43949698692151346, [(1, 6), (2, 60)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 70, 0]]
** centroid: 7, normalized-entropy: 0.30337483608641397, [(1, 4), (2, 70)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18698554101213813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18698554101213813, 0.14949000592716039] ***
*** starting iteration: 2; err: [Inf, 0.18698554101213813, 0.14949000592716039] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18698554101213813, 0.14949000592716039, 0.14625043067522348] ***
*** starting iteration: 3; err: [Inf, 0.18698554101213813, 0.14949000592716039, 0.14625043067522348] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18698554101213813, 0.14949000592716039, 0.14625043067522348, 0.145551919946447] ***
*** finished computation of 7 references, err: [Inf, 0.18698554101213813, 0.14949000592716039, 0.14625043067522348, 0.145551919946447] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 94, 12]]
** centroid: 1, normalized-entropy: 0.5095157180881823, [(2, 94), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 2, 0]]
** centroid: 3, normalized-entropy: 0.2055925081850832, [(1, 60), (2, 2)]
*** center 4: selecting labels [1] (freq >= 2) [from [59, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 5, 0]]
** centroid: 5, normalized-entropy: 0.3674984948272913, [(1, 66), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 53, 0]]
** centroid: 6, normalized-entropy: 0.22536363912739493, [(1, 2), (2, 53)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [55, 25, 0]]
** centroid: 7, normalized-entropy: 0.8960382325345574, [(1, 55), (2, 25)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18814911786653102] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18814911786653102, 0.1489311007671058] ***
*** starting iteration: 2; err: [Inf, 0.18814911786653102, 0.1489311007671058] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18814911786653102, 0.1489311007671058, 0.14328127539856358] ***
*** starting iteration: 3; err: [Inf, 0.18814911786653102, 0.1489311007671058, 0.14328127539856358] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18814911786653102, 0.1489311007671058, 0.14328127539856358, 0.1423201152831316] ***
*** finished computation of 7 references, err: [Inf, 0.18814911786653102, 0.1489311007671058, 0.14328127539856358, 0.1423201152831316] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [70, 2, 0]]
** centroid: 1, normalized-entropy: 0.18312206830137262, [(1, 70), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 66, 17]]
** centroid: 2, normalized-entropy: 0.7314625617214586, [(2, 66), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 12, 0]]
** centroid: 3, normalized-entropy: 0.7153220528038851, [(1, 49), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [61, 26, 0]]
** centroid: 4, normalized-entropy: 0.8798813089176428, [(1, 61), (2, 26)]
*** center 5: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 72, 0]]
** centroid: 6, normalized-entropy: 0.5032583347756457, [(1, 9), (2, 72)]
*** center 7: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18821954326704143] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18821954326704143, 0.1450009029302746] ***
*** starting iteration: 2; err: [Inf, 0.18821954326704143, 0.1450009029302746] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18821954326704143, 0.1450009029302746, 0.142288563657552] ***
*** starting iteration: 3; err: [Inf, 0.18821954326704143, 0.1450009029302746, 0.142288563657552] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18821954326704143, 0.1450009029302746, 0.142288563657552, 0.142042204618454] ***
*** finished computation of 7 references, err: [Inf, 0.18821954326704143, 0.1450009029302746, 0.142288563657552, 0.142042204618454] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [60, 8, 0]]
** centroid: 1, normalized-entropy: 0.5225593745369407, [(1, 60), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [84, 10, 0]]
** centroid: 2, normalized-entropy: 0.48890859144051524, [(1, 84), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 52, 18]]
** centroid: 3, normalized-entropy: 0.8224042259549892, [(2, 52), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [20, 54, 0]]
** centroid: 5, normalized-entropy: 0.8418521897563208, [(1, 20), (2, 54)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 48, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19003881543502213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19003881543502213, 0.15341110775899142] ***
*** starting iteration: 2; err: [Inf, 0.19003881543502213, 0.15341110775899142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19003881543502213, 0.15341110775899142, 0.14777726201619953] ***
*** starting iteration: 3; err: [Inf, 0.19003881543502213, 0.15341110775899142, 0.14777726201619953] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19003881543502213, 0.15341110775899142, 0.14777726201619953, 0.14610927361808718] ***
*** starting iteration: 4; err: [Inf, 0.19003881543502213, 0.15341110775899142, 0.14777726201619953, 0.14610927361808718] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19003881543502213, 0.15341110775899142, 0.14777726201619953, 0.14610927361808718, 0.14581033720448613] ***
*** finished computation of 7 references, err: [Inf, 0.19003881543502213, 0.15341110775899142, 0.14777726201619953, 0.14610927361808718, 0.14581033720448613] ***
*** center 1: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [74, 7, 0]]
** centroid: 2, normalized-entropy: 0.42440514472480345, [(1, 74), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 49, 22]]
** centroid: 3, normalized-entropy: 0.893010810044601, [(2, 49), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 64, 0]]
** centroid: 5, normalized-entropy: 0.6789538995185759, [(1, 14), (2, 64)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 50, 0]]
** centroid: 6, normalized-entropy: 0.5373760853377334, [(1, 7), (2, 50)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [42, 4, 0]]
** centroid: 7, normalized-entropy: 0.42622865699814483, [(1, 42), (2, 4)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2052826634272933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2052826634272933, 0.14995324964076281] ***
*** starting iteration: 2; err: [Inf, 0.2052826634272933, 0.14995324964076281] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2052826634272933, 0.14995324964076281, 0.14380636381637305] ***
*** starting iteration: 3; err: [Inf, 0.2052826634272933, 0.14995324964076281, 0.14380636381637305] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2052826634272933, 0.14995324964076281, 0.14380636381637305, 0.14254045039787888] ***
*** starting iteration: 4; err: [Inf, 0.2052826634272933, 0.14995324964076281, 0.14380636381637305, 0.14254045039787888] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2052826634272933, 0.14995324964076281, 0.14380636381637305, 0.14254045039787888, 0.14165097335353494] ***
*** finished computation of 7 references, err: [Inf, 0.2052826634272933, 0.14995324964076281, 0.14380636381637305, 0.14254045039787888, 0.14165097335353494] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [70, 3, 0]]
** centroid: 1, normalized-entropy: 0.24729443986205674, [(1, 70), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 7, 0]]
** centroid: 2, normalized-entropy: 0.48791799258948565, [(1, 59), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 53, 26]]
** centroid: 3, normalized-entropy: 0.9140185106642174, [(2, 53), (3, 26)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 30, 0]]
** centroid: 4, normalized-entropy: 0.954434002924965, [(1, 50), (2, 30)]
*** center 5: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 62, 0]]
** centroid: 6, normalized-entropy: 0.43055186701043935, [(1, 6), (2, 62)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2017082569785416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2017082569785416, 0.15032236737571655] ***
*** starting iteration: 2; err: [Inf, 0.2017082569785416, 0.15032236737571655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2017082569785416, 0.15032236737571655, 0.14542083516716958] ***
*** starting iteration: 3; err: [Inf, 0.2017082569785416, 0.15032236737571655, 0.14542083516716958] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2017082569785416, 0.15032236737571655, 0.14542083516716958, 0.1447543298341334] ***
*** finished computation of 7 references, err: [Inf, 0.2017082569785416, 0.15032236737571655, 0.14542083516716958, 0.1447543298341334] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 72, 0]]
** centroid: 1, normalized-entropy: 0.3912435636292556, [(1, 6), (2, 72)]
*** center 2: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [50, 34, 0]]
** centroid: 3, normalized-entropy: 0.9736680645496202, [(1, 50), (2, 34)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [47, 16, 0]]
** centroid: 4, normalized-entropy: 0.8175072881213616, [(1, 47), (2, 16)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 60, 22]]
** centroid: 5, normalized-entropy: 0.8390040613676978, [(2, 60), (3, 22)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20394238211214544] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20394238211214544, 0.14669041478820144] ***
*** starting iteration: 2; err: [Inf, 0.20394238211214544, 0.14669041478820144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20394238211214544, 0.14669041478820144, 0.14280094831902534] ***
*** starting iteration: 3; err: [Inf, 0.20394238211214544, 0.14669041478820144, 0.14280094831902534] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20394238211214544, 0.14669041478820144, 0.14280094831902534, 0.14199800403509288] ***
*** finished computation of 7 references, err: [Inf, 0.20394238211214544, 0.14669041478820144, 0.14280094831902534, 0.14199800403509288] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 74, 17]]
** centroid: 1, normalized-entropy: 0.6947570868163001, [(2, 74), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 3, 0]]
** centroid: 3, normalized-entropy: 0.3013786435930858, [(1, 53), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [66, 19, 0]]
** centroid: 4, normalized-entropy: 0.7665599404543365, [(1, 66), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [50, 2, 0]]
** centroid: 5, normalized-entropy: 0.23519338181924157, [(1, 50), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 59, 0]]
** centroid: 6, normalized-entropy: 0.4441260450795996, [(1, 6), (2, 59)]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18247914397157727] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18247914397157727, 0.14951233865250832] ***
*** starting iteration: 2; err: [Inf, 0.18247914397157727, 0.14951233865250832] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18247914397157727, 0.14951233865250832, 0.1470711372192018] ***
*** starting iteration: 3; err: [Inf, 0.18247914397157727, 0.14951233865250832, 0.1470711372192018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18247914397157727, 0.14951233865250832, 0.1470711372192018, 0.14651752273365856] ***
*** finished computation of 7 references, err: [Inf, 0.18247914397157727, 0.14951233865250832, 0.1470711372192018, 0.14651752273365856] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 20, 0]]
** centroid: 1, normalized-entropy: 0.7966394665488286, [(1, 63), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 16, 0]]
** centroid: 2, normalized-entropy: 0.7320666900931937, [(1, 62), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 53, 22]]
** centroid: 4, normalized-entropy: 0.8729882944709463, [(2, 53), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [54, 20, 0]]
** centroid: 5, normalized-entropy: 0.8418521897563208, [(1, 54), (2, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 68, 3]]
** centroid: 7, normalized-entropy: 0.25253077151613923, [(2, 68), (3, 3)]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 346,3 => 39,1 => 615), Dict(2 => 344,3 => 47,1 => 609))
[ Info: ===== scores for single classifier: {"micro_f1":0.939,"precision":0.939,"recall":0.939,"macro_recall":0.9451079415995215,"macro_f1":0.9398280161587719,"accuracy":0.939,"class_f1":{"2":0.9057187017001546,"3":0.9591836734693878,"1":0.954581673306773},"class_precision":{"2":0.966996699669967,"3":0.9215686274509803,"1":0.9272445820433437},"class_recall":{"2":0.8517441860465116,"3":1.0,"1":0.9835796387520526}}
[ Info: ===== scores for 1: {"micro_f1":0.956,"precision":0.956,"recall":0.956,"macro_recall":0.96579727854788,"macro_f1":0.937155287728503,"accuracy":0.956,"class_f1":{"2":0.935672514619883,"3":0.9038461538461539,"1":0.971947194719472},"class_precision":{"2":0.9411764705882353,"3":0.8245614035087719,"1":0.9767827529021559},"class_recall":{"2":0.9302325581395349,"3":1.0,"1":0.9671592775041051}}
[ Info: ===== scores for 5: {"micro_f1":0.9500000000000001,"precision":0.95,"recall":0.95,"macro_recall":0.9591400313132471,"macro_f1":0.9404690174098255,"accuracy":0.95,"class_f1":{"2":0.9258160237388724,"3":0.9306930693069307,"1":0.9648979591836735},"class_precision":{"2":0.9454545454545454,"3":0.8703703703703703,"1":0.9594155844155844},"class_recall":{"2":0.9069767441860465,"3":1.0,"1":0.9704433497536946}}
[ Info: ===== scores for 7: {"micro_f1":0.951,"precision":0.951,"recall":0.951,"macro_recall":0.9601090235613091,"macro_f1":0.9441017888636937,"accuracy":0.951,"class_f1":{"2":0.9274074074074075,"3":0.9400000000000001,"1":0.9648979591836735},"class_precision":{"2":0.945619335347432,"3":0.8867924528301887,"1":0.9594155844155844},"class_recall":{"2":0.9098837209302325,"3":1.0,"1":0.9704433497536946}}
[ Info: ===== scores for 9: {"micro_f1":0.9500000000000001,"precision":0.95,"recall":0.95,"macro_recall":0.9608266188057687,"macro_f1":0.94068216692584,"accuracy":0.95,"class_f1":{"2":0.9266862170087976,"3":0.9306930693069307,"1":0.9646672144617913},"class_precision":{"2":0.9349112426035503,"3":0.8703703703703703,"1":0.9654605263157895},"class_recall":{"2":0.9186046511627907,"3":1.0,"1":0.9638752052545156}}
[ Info: ===== scores for 11: {"micro_f1":0.951,"precision":0.951,"recall":0.951,"macro_recall":0.9605306704344394,"macro_f1":0.9413150150084525,"accuracy":0.951,"class_f1":{"2":0.9276218611521417,"3":0.9306930693069307,"1":0.9656301145662848},"class_precision":{"2":0.9429429429429429,"3":0.8703703703703703,"1":0.9624796084828712},"class_recall":{"2":0.9127906976744186,"3":1.0,"1":0.9688013136288999}}
(score = 0.958, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.956, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.956, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.953, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.953, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.951, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.951, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.947, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.947, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.95, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.95, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.95, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.95, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.951, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.951, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.958,"k":1,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.958,"precision":0.958,"recall":0.958,"macro_recall":0.9673136161708736,"macro_f1":0.9440528429644061,"accuracy":0.958,"class_f1":{"2":0.9385964912280702,"3":0.9215686274509803,"1":0.971993410214168},"class_precision":{"2":0.9441176470588235,"3":0.8545454545454545,"1":0.9752066115702479},"class_recall":{"2":0.9331395348837209,"3":1.0,"1":0.9688013136288999}}
Test Summary: | Pass  Total
AKNC          |    8      8
[345, 2, 4, 4, 2, 1, 1, 1, 3, 1, 3, 7, 3, 6, 4, 5, 6, 2, 2, 4, 18, 7, 24, 19, 10, 4, 7, 1, 5, 18, 4, 4, 2, 9, 1, 4, 19, 7, 9, 8, 13, 18, 17, 14, 39, 28, 11, 3, 3, 11, 5, 15, 28, 7, 7, 13, 7, 27, 5, 13, 8, 10, 49, 7, 1, 5, 20, 9, 35, 8, 6, 39, 22, 20, 3, 14, 26, 10, 12, 14, 65, 13, 11, 16, 23, 2, 7, 2, 6, 3, 6, 10, 9, 10, 17, 72, 10, 54, 223, 24, 33, 31, 1, 32, 4, 71, 28, 10, 19, 81, 8, 31, 11, 26, 3, 117, 7, 4, 10, 33, 1, 4, 4, 1, 4, 8, 96, 35, 6, 2, 35, 63, 55, 8, 5, 55, 41, 8, 24, 13, 8, 9, 36, 10, 19, 6, 24, 14, 1001, 35, 13, 84, 23, 1, 117, 3, 28, 100, 2, 52, 15, 15, 140, 31, 65, 7, 28, 43, 25, 15, 68, 21, 19, 36, 27, 33, 16, 15, 2, 14, 2, 48, 7, 21, 14, 2, 3, 3, 29, 6, 9, 89, 9, 10, 43, 63, 32, 19, 72, 6, 31, 2, 10, 8, 7, 21, 12, 30, 24, 199, 18, 4, 11, 9, 29, 53, 14, 1, 49, 34, 18, 12, 117, 1, 856, 7, 165, 19, 80, 93, 16, 45, 11, 86, 26, 31, 17, 5, 65, 8, 19, 24, 26, 40, 87, 10, 121, 12, 29, 13, 9, 23, 9, 12, 311, 17, 32, 11, 152, 32, 15, 5, 11, 19, 1, 7, 11, 74, 5, 173, 44, 89, 17, 11, 5, 67, 6, 20, 5, 16, 7, 58, 45, 4, 29, 8, 23, 163, 49, 8, 8, 29, 8, 44, 20, 5, 4, 9, 19, 120]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.695, speedup = 0.30061786506887256, eval_ratio = 0.095109)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3833953373015876,"recall":0.37413194444444475,"f1":null,"seconds":0.00020294450223445892,"exhaustive_search_seconds":0.0007011629641056061,"evaluations":526.625,"distances_sum":1692.1207392996016}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5399305555555555,"recall":0.5399305555555555,"f1":null,"seconds":0.0003766808658838272,"exhaustive_search_seconds":0.0007011629641056061,"evaluations":730.3046875,"distances_sum":1628.2825210355961}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6493055555555552,"recall":0.6493055555555552,"f1":0.6493055555555552,"seconds":0.0004550628364086151,"exhaustive_search_seconds":0.0007011629641056061,"evaluations":867.359375,"distances_sum":1571.621299512971}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7239583333333333,"recall":0.7239583333333333,"f1":0.7239583333333333,"seconds":0.0007059648633003235,"exhaustive_search_seconds":0.0007011629641056061,"evaluations":1020.359375,"distances_sum":1542.8051013753657}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7881944444444438,"recall":0.7881944444444438,"f1":0.7881944444444438,"seconds":0.0006590820848941803,"exhaustive_search_seconds":0.0007011629641056061,"evaluations":1190.1640625,"distances_sum":1522.6675610359193}
KCenters.DeloneInvIndex> reached performance {"precision":0.8298611111111105,"recall":0.8298611111111105,"f1":0.8298611111111105,"seconds":0.000737454742193222,"exhaustive_search_seconds":0.0007011629641056061,"evaluations":1289.25,"distances_sum":1509.0944388021198}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8569999999999997, speedup = 0.44321820304553267, eval_ratio = 0.13453099999999998)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
