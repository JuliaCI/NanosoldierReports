Julia Version 1.6.0-DEV.408
Commit b19a3578af (2020-07-08 17:48 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed SparsityDetection ──────────── v0.3.3
  Installed SpecialFunctions ───────────── v0.10.3
  Installed Cassette ───────────────────── v0.3.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [684fba80] + SparsityDetection v0.3.3
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [7057c7e9] + Cassette v0.3.3
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [684fba80] + SparsityDetection v0.3.3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing SparsityDetection
Status `/tmp/jl_HA3AFQ/Project.toml`
  [7057c7e9] Cassette v0.3.3
  [6a86dc24] FiniteDiff v2.4.1
  [1bc83da4] SafeTestsets v0.0.1
  [684fba80] SparsityDetection v0.3.3
  [276daf66] SpecialFunctions v0.10.3
  [37e2e46d] LinearAlgebra
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_HA3AFQ/Manifest.toml`
  [4fba245c] ArrayInterface v2.9.0
  [7057c7e9] Cassette v0.3.3
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [6a86dc24] FiniteDiff v2.4.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [ae029012] Requires v1.0.1
  [1bc83da4] SafeTestsets v0.0.1
  [684fba80] SparsityDetection v0.3.3
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Explored path: SparsityDetection.Path(Bool[], 1)
Jacobian Sparsity: Test Failed at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:5
  Expression: jactestval(((Y, X)->begin
                typeof(X)
            end), [1], [2]) == Array{Int, 1}
   Evaluated: (Tagged(Tag{nametype(JacobianSparsityContext),2699130097,Nothing}(), [1], Meta(SparsityDetection.JacOutput(), Cassette.Meta{SparsityDetection.ProvinanceSet,Cassette.NoMetaMeta}[_])), Tagged(Tag{nametype(JacobianSparsityContext),2699130097,Nothing}(), [2], Meta(SparsityDetection.JacInput(), Cassette.Meta{SparsityDetection.ProvinanceSet,Cassette.NoMetaMeta}[_]))) == Vector{Int64}
Stacktrace:
 [1] top-level scope
   @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:5
 [2] include(fname::String)
   @ Base.MainInclude ./client.jl:444
 [3] top-level scope
   @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
 [4] top-level scope
   @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
 [5] top-level scope
   @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
Explored path: SparsityDetection.Path(Bool[], 1)
Jacobian Sparsity: Test Failed at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:6
  Expression: jactestval(((Y, X)->begin
                typeof(Y)
            end), [1], [2]) == Array{Int, 1}
   Evaluated: (Tagged(Tag{nametype(JacobianSparsityContext),4237105679,Nothing}(), [1], Meta(SparsityDetection.JacOutput(), Cassette.Meta{SparsityDetection.ProvinanceSet,Cassette.NoMetaMeta}[_])), Tagged(Tag{nametype(JacobianSparsityContext),4237105679,Nothing}(), [2], Meta(SparsityDetection.JacInput(), Cassette.Meta{SparsityDetection.ProvinanceSet,Cassette.NoMetaMeta}[_]))) == Vector{Int64}
Stacktrace:
 [1] top-level scope
   @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:6
 [2] include(fname::String)
   @ Base.MainInclude ./client.jl:444
 [3] top-level scope
   @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
 [4] top-level scope
   @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
 [5] top-level scope
   @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
Internal error: encountered unexpected error in runtime:
BoundsError(a=Array{Any, (0,)}[], i=(1,))
jl_bounds_error_ints at /workspace/srcdir/src/rtutils.c:183
getindex at ./array.jl:811
jfptr_getindex_10046.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
ssa_substitute_op! at ./compiler/ssair/inlining.jl:1256
ssa_substitute_op! at ./compiler/ssair/inlining.jl:1289
ssa_substitute! at ./compiler/ssair/inlining.jl:1244
jfptr_ssa_substituteNOT._9066.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
ir_inline_item! at ./compiler/ssair/inlining.jl:365
batch_inline! at ./compiler/ssair/inlining.jl:553
ssa_inlining_pass! at ./compiler/ssair/inlining.jl:77 [inlined]
run_passes at ./compiler/ssair/driver.jl:124
optimize at ./compiler/optimize.jl:176
typeinf at ./compiler/typeinfer.jl:33
typeinf_edge at ./compiler/typeinfer.jl:521
abstract_call_method at ./compiler/abstractinterpretation.jl:451
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:116
abstract_call_known at ./compiler/abstractinterpretation.jl:936
abstract_call at ./compiler/abstractinterpretation.jl:959
abstract_call at ./compiler/abstractinterpretation.jl:943
abstract_eval_statement at ./compiler/abstractinterpretation.jl:1065
typeinf_local at ./compiler/abstractinterpretation.jl:1319
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1375
typeinf at ./compiler/typeinfer.jl:12
typeinf_ext at ./compiler/typeinfer.jl:608
typeinf_ext_toplevel at ./compiler/typeinfer.jl:641
typeinf_ext_toplevel at ./compiler/typeinfer.jl:637
jfptr_typeinf_ext_toplevel_11714.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
jl_apply at /workspace/srcdir/src/julia.h:1711 [inlined]
jl_type_infer at /workspace/srcdir/src/gf.c:300
jl_generate_fptr at /workspace/srcdir/src/jitlayers.cpp:294
jl_compile_method_internal at /workspace/srcdir/src/gf.c:1859
jl_compile_method_internal at /workspace/srcdir/src/gf.c:1810 [inlined]
_jl_invoke at /workspace/srcdir/src/gf.c:2113 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2304
overdub at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
unknown function (ip: 0x7f5f79b92003)
#15 at ./none:0 [inlined]
recurse at /home/pkgeval/.julia/packages/Cassette/158rp/src/overdub.jl:0
unknown function (ip: 0x7f5f79b91831)
overdub at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
unknown function (ip: 0x7f5f79b90fc6)
overdub at /home/pkgeval/.julia/packages/Cassette/158rp/src/context.jl:266
unknown function (ip: 0x7f5f79b902e8)
#2 at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148 [inlined]
recurse at /home/pkgeval/.julia/packages/Cassette/158rp/src/overdub.jl:0
unknown function (ip: 0x7f5f79b8ff65)
#abstract_run#1 at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148
jl_apply at /workspace/srcdir/src/julia.h:1711 [inlined]
do_apply at /workspace/srcdir/src/builtins.c:655
abstract_run##kw at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:144
#jacobian_sparsity#21 at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:135
jacobian_sparsity##kw at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:130 [inlined]
jactester at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/common.jl:14
jactestval at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/common.jl:18
jl_apply at /workspace/srcdir/src/julia.h:1711 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:117
eval_value at /workspace/srcdir/src/interpreter.c:206
eval_stmt_value at /workspace/srcdir/src/interpreter.c:157 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:551
eval_body at /workspace/srcdir/src/interpreter.c:491
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:659
top-level scope at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:8
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:838
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:788
jl_toplevel_eval_in at /workspace/srcdir/src/toplevel.c:881
eval at ./boot.jl:340 [inlined]
include_string at ./loading.jl:1103
_include at ./loading.jl:1157
include at ./client.jl:444
jl_apply at /workspace/srcdir/src/julia.h:1711 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:117
eval_value at /workspace/srcdir/src/interpreter.c:206
eval_stmt_value at /workspace/srcdir/src/interpreter.c:157 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:551
eval_body at /workspace/srcdir/src/interpreter.c:491
eval_body at /workspace/srcdir/src/interpreter.c:491
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:659
macro expansion at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4 [inlined]
macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115 [inlined]
top-level scope at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:838
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:788
jl_toplevel_eval_in at /workspace/srcdir/src/toplevel.c:881
eval at ./boot.jl:340 [inlined]
include_string at ./loading.jl:1103
_include at ./loading.jl:1157
include at ./client.jl:444
jl_apply at /workspace/srcdir/src/julia.h:1711 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:117
eval_value at /workspace/srcdir/src/interpreter.c:206
eval_stmt_value at /workspace/srcdir/src/interpreter.c:157 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:551
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:659
top-level scope at none:6
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:838
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:788
jl_toplevel_eval_in at /workspace/srcdir/src/toplevel.c:881
eval at ./boot.jl:340
exec_options at ./client.jl:260
_start at ./client.jl:485
jfptr__start_33427.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
jl_apply at /workspace/srcdir/ui/../src/julia.h:1711 [inlined]
true_main at /workspace/srcdir/ui/repl.c:106
main at /workspace/srcdir/ui/repl.c:227
__libc_start_main at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
unknown function (ip: 0x4015e4)
Explored path: SparsityDetection.Path(Bool[], 1)
Jacobian Sparsity: Test Failed at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:8
  Expression: jactestval(((Y, X)->begin
                eltype(X)
            end), [1], [2]) == Int
   Evaluated: (Tagged(Tag{nametype(JacobianSparsityContext),3868722636,Nothing}(), [1], Meta(SparsityDetection.JacOutput(), Cassette.Meta{SparsityDetection.ProvinanceSet,Cassette.NoMetaMeta}[_])), Tagged(Tag{nametype(JacobianSparsityContext),3868722636,Nothing}(), [2], Meta(SparsityDetection.JacInput(), Cassette.Meta{SparsityDetection.ProvinanceSet,Cassette.NoMetaMeta}[_]))) == Int64
Stacktrace:
 [1] top-level scope
   @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:8
 [2] include(fname::String)
   @ Base.MainInclude ./client.jl:444
 [3] top-level scope
   @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
 [4] top-level scope
   @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
 [5] top-level scope
   @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
Explored path: SparsityDetection.Path(Bool[], 1)
Jacobian Sparsity: Test Failed at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:9
  Expression: jactestval(((Y, X)->begin
                typeof(X[1])
            end), [1], [2]) == Int
   Evaluated: (Tagged(Tag{nametype(JacobianSparsityContext),3575734643,Nothing}(), [1], Meta(SparsityDetection.JacOutput(), Cassette.Meta{SparsityDetection.ProvinanceSet,Cassette.NoMetaMeta}[_])), Tagged(Tag{nametype(JacobianSparsityContext),3575734643,Nothing}(), [2], Meta(SparsityDetection.JacInput(), Cassette.Meta{SparsityDetection.ProvinanceSet,Cassette.NoMetaMeta}[_]))) == Int64
Stacktrace:
 [1] top-level scope
   @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:9
 [2] include(fname::String)
   @ Base.MainInclude ./client.jl:444
 [3] top-level scope
   @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
 [4] top-level scope
   @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
 [5] top-level scope
   @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
Explored path: SparsityDetection.Path(Bool[], 1)
Jacobian Sparsity: Test Failed at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:10
  Expression: jactestval(((Y, X)->begin
                typeof(X[1] / 1)
            end), [1], [2]) == Float64
   Evaluated: (Tagged(Tag{nametype(JacobianSparsityContext),1325192446,Nothing}(), [1], Meta(SparsityDetection.JacOutput(), Cassette.Meta{SparsityDetection.ProvinanceSet,Cassette.NoMetaMeta}[_])), Tagged(Tag{nametype(JacobianSparsityContext),1325192446,Nothing}(), [2], Meta(SparsityDetection.JacInput(), Cassette.Meta{SparsityDetection.ProvinanceSet,Cassette.NoMetaMeta}[_]))) == Float64
Stacktrace:
 [1] top-level scope
   @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:10
 [2] include(fname::String)
   @ Base.MainInclude ./client.jl:444
 [3] top-level scope
   @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
 [4] top-level scope
   @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
 [5] top-level scope
   @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
Jacobian Sparsity: Error During Test at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:14
  Test threw exception
  Expression: jactestval(((Y, X)->begin
                (broadcasted(+, X, 1))[1]
            end), [1], [2]) == 3
  MethodError: no method matching isless(::Int64, ::Tuple{ctx,ctx})
  Closest candidates are:
    isless(!Matched::Missing, ::Any) at missing.jl:87
    isless(!Matched::Tuple{}, ::Tuple) at tuple.jl:357
    isless(::Real, !Matched::AbstractFloat) at operators.jl:166
    ...
  Stacktrace:
    [1] call
      @ ~/.julia/packages/Cassette/158rp/src/context.jl:457 [inlined]
    [2] fallback
      @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
    [3] recurse(::ctx, ::typeof(isless), ::Int64, ::tagged{Tuple{ctx,ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:536
    [4] overdub(::ctx, ::Function, ::Int64, ::tagged{Tuple{ctx,ctx}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
    [5] <
      @ ./operators.jl:277 [inlined]
    [6] recurse(::ctx, ::typeof(<), ::Int64, ::tagged{Tuple{ctx,ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
    [7] overdub(::ctx, ::Function, ::Int64, ::tagged{Tuple{ctx,ctx}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
    [8] <=
      @ ./operators.jl:326 [inlined]
    [9] recurse(::ctx, ::typeof(<=), ::Int64, ::tagged{Tuple{ctx,ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [10] overdub(::ctx, ::Function, ::Int64, ::tagged{Tuple{ctx,ctx}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
   [11] iterate
      @ ./tuple.jl:61 [inlined]
   [12] recurse(::ctx, ::typeof(iterate), ::tagged{Tuple{ctx,ctx}}, ::Int64)
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [13] overdub(::ctx, ::Function, ::tagged{Tuple{ctx,ctx}}, ::Int64)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
   [14] iterate
      @ ./tuple.jl:61 [inlined]
   [15] recurse(::ctx, ::typeof(iterate), ::tagged{Tuple{ctx,ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [16] overdub(ctx::ctx, f::Function, args::tagged{Tuple{ctx,ctx}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
   [17] iterate(t::tagged{Tuple{ctx,ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/tagging.jl:460
   [18] overdub(::ctx, ::typeof(Core._apply_iterate), ::Function, ::Function, ::tagged{Tuple{ctx,ctx}}, ::Function)
      @ SparsityDetection ~/.julia/packages/Cassette/158rp/src/context.jl:266
   [19] broadcasted
      @ ./broadcast.jl:1263 [inlined]
   [20] recurse(::ctx, ::typeof(broadcasted), ::typeof(+), ::tagged{Vector{Int64}}, ::Int64)
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [21] overdub(::ctx, ::Function, ::Function, ::tagged{Vector{Int64}}, ::Int64)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
   [22] #18
      @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:0 [inlined]
   [23] recurse(::ctx, ::var"#18#27", ::tagged{Vector{Int64}}, ::tagged{Vector{Int64}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [24] overdub(::ctx, ::Function, ::tagged{Vector{Int64}}, ::tagged{Vector{Int64}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
   [25] overdub(ctx::ctx, #unused#::typeof(Core._apply_iterate), iter::Function, f::Function, args::Tuple{tagged{Vector{Int64}},tagged{Vector{Int64}}})
      @ SparsityDetection ~/.julia/packages/Cassette/158rp/src/context.jl:266
   [26] #2
      @ ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148 [inlined]
   [27] recurse(overdub_context#256::ctx, overdub_arguments#257::SparsityDetection.var"#2#3"{var"#18#27",Tuple{tagged{Vector{Int64}},tagged{Vector{Int64}}}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [28] abstract_run(::SparsityDetection.var"#22#24", ::ctx, ::Function, ::tagged{Vector{Int64}}, ::Vararg{tagged{Vector{Int64}},N} where N; verbose::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148
   [29] jacobian_sparsity(::Function, ::Vector{Int64}, ::Vector{Int64}; sparsity::Sparsity, verbose::Bool, raw::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:135
   [30] jactester(::Function, ::Vector{Int64}, ::Vector{Int64})
      @ Main ~/.julia/packages/SparsityDetection/PbKzm/test/common.jl:14
   [31] jactestval(::Function, ::Vararg{Any,N} where N)
      @ Main ~/.julia/packages/SparsityDetection/PbKzm/test/common.jl:18
   [32] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:14
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
   [35] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [36] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
  
Jacobian Sparsity: Error During Test at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:15
  Test threw exception
  Expression: jactestval(f, [1], [2]) == [3]
  MethodError: no method matching isless(::Int64, ::Tuple{ctx,ctx})
  Closest candidates are:
    isless(!Matched::Missing, ::Any) at missing.jl:87
    isless(!Matched::Tuple{}, ::Tuple) at tuple.jl:357
    isless(::Real, !Matched::AbstractFloat) at operators.jl:166
    ...
  Stacktrace:
    [1] call
      @ ~/.julia/packages/Cassette/158rp/src/context.jl:457 [inlined]
    [2] fallback
      @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
    [3] recurse(::ctx, ::typeof(isless), ::Int64, ::tagged{Tuple{ctx,ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:536
    [4] overdub(::ctx, ::Function, ::Int64, ::tagged{Tuple{ctx,ctx}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
    [5] <
      @ ./operators.jl:277 [inlined]
    [6] recurse(::ctx, ::typeof(<), ::Int64, ::tagged{Tuple{ctx,ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
    [7] overdub(::ctx, ::Function, ::Int64, ::tagged{Tuple{ctx,ctx}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
    [8] <=
      @ ./operators.jl:326 [inlined]
    [9] recurse(::ctx, ::typeof(<=), ::Int64, ::tagged{Tuple{ctx,ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [10] overdub(::ctx, ::Function, ::Int64, ::tagged{Tuple{ctx,ctx}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
   [11] iterate
      @ ./tuple.jl:61 [inlined]
   [12] recurse(::ctx, ::typeof(iterate), ::tagged{Tuple{ctx,ctx}}, ::Int64)
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [13] overdub(::ctx, ::Function, ::tagged{Tuple{ctx,ctx}}, ::Int64)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
   [14] iterate
      @ ./tuple.jl:61 [inlined]
   [15] recurse(::ctx, ::typeof(iterate), ::tagged{Tuple{ctx,ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [16] overdub(ctx::ctx, f::Function, args::tagged{Tuple{ctx,ctx}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
   [17] iterate(t::tagged{Tuple{ctx,ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/tagging.jl:460
   [18] overdub(::ctx, ::typeof(Core._apply_iterate), ::Function, ::Function, ::tagged{Tuple{ctx,ctx}}, ::Function)
      @ SparsityDetection ~/.julia/packages/Cassette/158rp/src/context.jl:266
   [19] broadcasted
      @ ./broadcast.jl:1263 [inlined]
   [20] recurse(::ctx, ::typeof(broadcasted), ::typeof(+), ::tagged{Vector{Int64}}, ::Int64)
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [21] overdub(::ctx, ::Function, ::Function, ::tagged{Vector{Int64}}, ::Int64)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
   [22] f
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:12 [inlined]
   [23] recurse(::ctx, ::var"#f#26", ::tagged{Vector{Int64}}, ::tagged{Vector{Int64}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [24] overdub(::ctx, ::Function, ::tagged{Vector{Int64}}, ::tagged{Vector{Int64}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
   [25] overdub(ctx::ctx, #unused#::typeof(Core._apply_iterate), iter::Function, f::Function, args::Tuple{tagged{Vector{Int64}},tagged{Vector{Int64}}})
      @ SparsityDetection ~/.julia/packages/Cassette/158rp/src/context.jl:266
   [26] #2
      @ ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148 [inlined]
   [27] recurse(overdub_context#256::ctx, overdub_arguments#257::SparsityDetection.var"#2#3"{var"#f#26",Tuple{tagged{Vector{Int64}},tagged{Vector{Int64}}}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [28] abstract_run(::SparsityDetection.var"#22#24", ::ctx, ::Function, ::tagged{Vector{Int64}}, ::Vararg{tagged{Vector{Int64}},N} where N; verbose::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148
   [29] jacobian_sparsity(::Function, ::Vector{Int64}, ::Vector{Int64}; sparsity::Sparsity, verbose::Bool, raw::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:135
   [30] jactester(::Function, ::Vector{Int64}, ::Vector{Int64})
      @ Main ~/.julia/packages/SparsityDetection/PbKzm/test/common.jl:14
   [31] jactestval(::Function, ::Vararg{Any,N} where N)
      @ Main ~/.julia/packages/SparsityDetection/PbKzm/test/common.jl:18
   [32] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:15
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
   [35] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [36] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
  
Jacobian Sparsity: Error During Test at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:16
  Test threw exception
  Expression: sparse(jactestmeta(f, [1], [2])) == sparse([], [], true, 1, 1)
  MethodError: no method matching isless(::Int64, ::Tuple{ctx,ctx})
  Closest candidates are:
    isless(!Matched::Missing, ::Any) at missing.jl:87
    isless(!Matched::Tuple{}, ::Tuple) at tuple.jl:357
    isless(::Real, !Matched::AbstractFloat) at operators.jl:166
    ...
  Stacktrace:
    [1] call
      @ ~/.julia/packages/Cassette/158rp/src/context.jl:457 [inlined]
    [2] fallback
      @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
    [3] recurse(::ctx, ::typeof(isless), ::Int64, ::tagged{Tuple{ctx,ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:536
    [4] overdub(::ctx, ::Function, ::Int64, ::tagged{Tuple{ctx,ctx}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
    [5] <
      @ ./operators.jl:277 [inlined]
    [6] recurse(::ctx, ::typeof(<), ::Int64, ::tagged{Tuple{ctx,ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
    [7] overdub(::ctx, ::Function, ::Int64, ::tagged{Tuple{ctx,ctx}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
    [8] <=
      @ ./operators.jl:326 [inlined]
    [9] recurse(::ctx, ::typeof(<=), ::Int64, ::tagged{Tuple{ctx,ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [10] overdub(::ctx, ::Function, ::Int64, ::tagged{Tuple{ctx,ctx}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
   [11] iterate
      @ ./tuple.jl:61 [inlined]
   [12] recurse(::ctx, ::typeof(iterate), ::tagged{Tuple{ctx,ctx}}, ::Int64)
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [13] overdub(::ctx, ::Function, ::tagged{Tuple{ctx,ctx}}, ::Int64)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
   [14] iterate
      @ ./tuple.jl:61 [inlined]
   [15] recurse(::ctx, ::typeof(iterate), ::tagged{Tuple{ctx,ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [16] overdub(ctx::ctx, f::Function, args::tagged{Tuple{ctx,ctx}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
   [17] iterate(t::tagged{Tuple{ctx,ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/tagging.jl:460
   [18] overdub(::ctx, ::typeof(Core._apply_iterate), ::Function, ::Function, ::tagged{Tuple{ctx,ctx}}, ::Function)
      @ SparsityDetection ~/.julia/packages/Cassette/158rp/src/context.jl:266
   [19] broadcasted
      @ ./broadcast.jl:1263 [inlined]
   [20] recurse(::ctx, ::typeof(broadcasted), ::typeof(+), ::tagged{Vector{Int64}}, ::Int64)
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [21] overdub(::ctx, ::Function, ::Function, ::tagged{Vector{Int64}}, ::Int64)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
   [22] f
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:12 [inlined]
   [23] recurse(::ctx, ::var"#f#26", ::tagged{Vector{Int64}}, ::tagged{Vector{Int64}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [24] overdub(::ctx, ::Function, ::tagged{Vector{Int64}}, ::tagged{Vector{Int64}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
   [25] overdub(ctx::ctx, #unused#::typeof(Core._apply_iterate), iter::Function, f::Function, args::Tuple{tagged{Vector{Int64}},tagged{Vector{Int64}}})
      @ SparsityDetection ~/.julia/packages/Cassette/158rp/src/context.jl:266
   [26] #2
      @ ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148 [inlined]
   [27] recurse(overdub_context#256::ctx, overdub_arguments#257::SparsityDetection.var"#2#3"{var"#f#26",Tuple{tagged{Vector{Int64}},tagged{Vector{Int64}}}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [28] abstract_run(::SparsityDetection.var"#22#24", ::ctx, ::Function, ::tagged{Vector{Int64}}, ::Vararg{tagged{Vector{Int64}},N} where N; verbose::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148
   [29] jacobian_sparsity(::Function, ::Vector{Int64}, ::Vector{Int64}; sparsity::Sparsity, verbose::Bool, raw::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:135
   [30] jactester(::Function, ::Vector{Int64}, ::Vector{Int64})
      @ Main ~/.julia/packages/SparsityDetection/PbKzm/test/common.jl:14
   [31] jactestmeta(::Function, ::Vararg{Any,N} where N)
      @ Main ~/.julia/packages/SparsityDetection/PbKzm/test/common.jl:17
   [32] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:16
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
   [35] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [36] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
  
Broadcast timings
  y .= x
Jacobian Sparsity: Error During Test at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:24
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:24 =# @time jacobian_sparsity(((y, x)->begin
                    y .= x
                end), [1, 2, 3], [1, 2, 3]) == sparse([1, 2, 3], [1, 2, 3], true)
  MethodError: no method matching isless(::Int64, ::Tuple{ctx})
  Closest candidates are:
    isless(!Matched::Missing, ::Any) at missing.jl:87
    isless(!Matched::Tuple{}, ::Tuple) at tuple.jl:357
    isless(::Real, !Matched::AbstractFloat) at operators.jl:166
    ...
  Stacktrace:
    [1] call
      @ ~/.julia/packages/Cassette/158rp/src/context.jl:457 [inlined]
    [2] fallback
      @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
    [3] recurse(::ctx, ::typeof(isless), ::Int64, ::tagged{Tuple{ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:536
    [4] overdub(::ctx, ::Function, ::Int64, ::tagged{Tuple{ctx}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
    [5] <
      @ ./operators.jl:277 [inlined]
    [6] recurse(::ctx, ::typeof(<), ::Int64, ::tagged{Tuple{ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
    [7] overdub(::ctx, ::Function, ::Int64, ::tagged{Tuple{ctx}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
    [8] <=
      @ ./operators.jl:326 [inlined]
    [9] recurse(::ctx, ::typeof(<=), ::Int64, ::tagged{Tuple{ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [10] overdub(::ctx, ::Function, ::Int64, ::tagged{Tuple{ctx}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
   [11] iterate
      @ ./tuple.jl:61 [inlined]
   [12] recurse(::ctx, ::typeof(iterate), ::tagged{Tuple{ctx}}, ::Int64)
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [13] overdub(::ctx, ::Function, ::tagged{Tuple{ctx}}, ::Int64)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
   [14] iterate
      @ ./tuple.jl:61 [inlined]
   [15] recurse(::ctx, ::typeof(iterate), ::tagged{Tuple{ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [16] overdub(ctx::ctx, f::Function, args::tagged{Tuple{ctx}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
   [17] iterate(t::tagged{Tuple{ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/tagging.jl:460
   [18] overdub(::ctx, ::typeof(Core._apply_iterate), ::Function, ::Function, ::tagged{Tuple{ctx}}, ::Function)
      @ SparsityDetection ~/.julia/packages/Cassette/158rp/src/context.jl:266
   [19] broadcasted
      @ ./broadcast.jl:1257 [inlined]
   [20] recurse(::ctx, ::typeof(broadcasted), ::typeof(identity), ::tagged{Vector{Int64}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [21] overdub(::ctx, ::Function, ::Function, ::tagged{Vector{Int64}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
   [22] #19
      @ ./none:0 [inlined]
   [23] recurse(::ctx, ::var"#19#29", ::tagged{Vector{Int64}}, ::tagged{Vector{Int64}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [24] overdub(::ctx, ::Function, ::tagged{Vector{Int64}}, ::tagged{Vector{Int64}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
   [25] overdub(ctx::ctx, #unused#::typeof(Core._apply_iterate), iter::Function, f::Function, args::Tuple{tagged{Vector{Int64}},tagged{Vector{Int64}}})
      @ SparsityDetection ~/.julia/packages/Cassette/158rp/src/context.jl:266
   [26] #2
      @ ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148 [inlined]
   [27] recurse(overdub_context#256::ctx, overdub_arguments#257::SparsityDetection.var"#2#3"{var"#19#29",Tuple{tagged{Vector{Int64}},tagged{Vector{Int64}}}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [28] abstract_run(::SparsityDetection.var"#22#24", ::ctx, ::Function, ::tagged{Vector{Int64}}, ::Vararg{tagged{Vector{Int64}},N} where N; verbose::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148
   [29] jacobian_sparsity(::Function, ::Vector{Int64}, ::Vector{Int64}; sparsity::Sparsity, verbose::Bool, raw::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:135
   [30] jacobian_sparsity(::Function, ::Vector{Int64}, ::Vector{Int64})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:130
   [31] top-level scope
      @ timing.jl:174
   [32] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:24
   [33] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [34] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
   [35] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [36] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
  
  y[:] .= x .+ 1
Jacobian Sparsity: Error During Test at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:26
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:26 =# @time sparse(jactestmeta(g, [1], [2])) == sparse([1], [1], true)
  MethodError: no method matching isless(::Int64, ::Tuple{Vector{Int64},Colon})
  Closest candidates are:
    isless(!Matched::Missing, ::Any) at missing.jl:87
    isless(!Matched::Tuple{}, ::Tuple) at tuple.jl:357
    isless(::Real, !Matched::AbstractFloat) at operators.jl:166
    ...
  Stacktrace:
    [1] call
      @ ~/.julia/packages/Cassette/158rp/src/context.jl:457 [inlined]
    [2] fallback
      @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
    [3] recurse(::ctx, ::typeof(isless), ::Int64, ::tagged{Tuple{Vector{Int64},Colon}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:536
    [4] overdub(::ctx, ::Function, ::Int64, ::tagged{Tuple{Vector{Int64},Colon}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
    [5] <
      @ ./operators.jl:277 [inlined]
    [6] recurse(::ctx, ::typeof(<), ::Int64, ::tagged{Tuple{Vector{Int64},Colon}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
    [7] overdub(::ctx, ::Function, ::Int64, ::tagged{Tuple{Vector{Int64},Colon}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
    [8] <=
      @ ./operators.jl:326 [inlined]
    [9] recurse(::ctx, ::typeof(<=), ::Int64, ::tagged{Tuple{Vector{Int64},Colon}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [10] overdub(::ctx, ::Function, ::Int64, ::tagged{Tuple{Vector{Int64},Colon}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
   [11] iterate
      @ ./tuple.jl:61 [inlined]
   [12] recurse(::ctx, ::typeof(iterate), ::tagged{Tuple{Vector{Int64},Colon}}, ::Int64)
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [13] overdub(::ctx, ::Function, ::tagged{Tuple{Vector{Int64},Colon}}, ::Int64)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
   [14] iterate
      @ ./tuple.jl:61 [inlined]
   [15] recurse(::ctx, ::typeof(iterate), ::tagged{Tuple{Vector{Int64},Colon}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [16] overdub(ctx::ctx, f::Function, args::tagged{Tuple{Vector{Int64},Colon}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
   [17] iterate(t::tagged{Tuple{Vector{Int64},Colon}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/tagging.jl:460
   [18] overdub(ctx::ctx, #unused#::typeof(Core._apply_iterate), iter::Function, f::Function, args::tagged{Tuple{Vector{Int64},Colon}})
      @ SparsityDetection ~/.julia/packages/Cassette/158rp/src/context.jl:266
   [19] dotview
      @ ./broadcast.jl:1160 [inlined]
   [20] recurse(::ctx, ::typeof(Base.Broadcast.dotview), ::tagged{Vector{Int64}}, ::Colon)
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [21] overdub(::ctx, ::Function, ::tagged{Vector{Int64}}, ::Function)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
   [22] g
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:18 [inlined]
   [23] recurse(::ctx, ::var"#g#28", ::tagged{Vector{Int64}}, ::tagged{Vector{Int64}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [24] overdub(::ctx, ::Function, ::tagged{Vector{Int64}}, ::tagged{Vector{Int64}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
   [25] overdub(ctx::ctx, #unused#::typeof(Core._apply_iterate), iter::Function, f::Function, args::Tuple{tagged{Vector{Int64}},tagged{Vector{Int64}}})
      @ SparsityDetection ~/.julia/packages/Cassette/158rp/src/context.jl:266
   [26] #2
      @ ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148 [inlined]
   [27] recurse(overdub_context#256::ctx, overdub_arguments#257::SparsityDetection.var"#2#3"{var"#g#28",Tuple{tagged{Vector{Int64}},tagged{Vector{Int64}}}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [28] abstract_run(::SparsityDetection.var"#22#24", ::ctx, ::Function, ::tagged{Vector{Int64}}, ::Vararg{tagged{Vector{Int64}},N} where N; verbose::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148
   [29] jacobian_sparsity(::Function, ::Vector{Int64}, ::Vector{Int64}; sparsity::Sparsity, verbose::Bool, raw::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:135
   [30] jactester(::Function, ::Vector{Int64}, ::Vector{Int64})
      @ Main ~/.julia/packages/SparsityDetection/PbKzm/test/common.jl:14
   [31] jactestmeta(::Function, ::Vararg{Any,N} where N)
      @ Main ~/.julia/packages/SparsityDetection/PbKzm/test/common.jl:17
   [32] top-level scope
      @ timing.jl:174
   [33] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:26
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
   [36] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [37] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
  
  y[1:2] .= x[2:3]
Jacobian Sparsity: Error During Test at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:29
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:29 =# @time jacobian_sparsity(((y, x)->begin
                    y[1:2] .= x[2:3]
                end), [1, 2, 3], [1, 2, 3]) == sparse([1, 2], [2, 3], true, 3, 3)
  MethodError: no method matching Int64(::typeof(one))
  Closest candidates are:
    Int64(!Matched::Float64) at float.jl:706
    Int64(!Matched::Float32) at float.jl:706
    Int64(!Matched::Ptr) at boot.jl:736
    ...
  Stacktrace:
    [1] call
      @ ~/.julia/packages/Cassette/158rp/src/context.jl:457 [inlined]
    [2] fallback
      @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
    [3] recurse(::ctx, ::Type{Int64}, ::typeof(one))
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:536
    [4] overdub(ctx::ctx, f::Type, args::Function)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:58
    [5] oneunit
      @ ./number.jl:301 [inlined]
    [6] recurse(::ctx, ::typeof(oneunit), ::Int64)
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
    [7] overdub(ctx::ctx, f::Function, args::Int64)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:58
    [8] unitrange_last
      @ ./range.jl:285 [inlined]
    [9] recurse(::ctx, ::typeof(Base.unitrange_last), ::Int64, ::Int64)
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [10] overdub(::ctx, ::Function, ::Int64, ::Int64)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:58
   [11] UnitRange
      @ ./range.jl:280 [inlined]
   [12] recurse(::ctx, ::Type{UnitRange{Int64}}, ::Int64, ::Int64)
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [13] overdub(::ctx, ::Type, ::Int64, ::Int64)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:58
   [14] Colon
      @ ./range.jl:5 [inlined]
   [15] recurse(::ctx, ::Colon, ::Int64, ::Int64)
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [16] overdub(::ctx, ::Function, ::Int64, ::Int64)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:58
   [17] #20
      @ ./none:0 [inlined]
   [18] recurse(::ctx, ::var"#20#30", ::tagged{Vector{Int64}}, ::tagged{Vector{Int64}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [19] overdub(::ctx, ::Function, ::tagged{Vector{Int64}}, ::tagged{Vector{Int64}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
   [20] overdub(ctx::ctx, #unused#::typeof(Core._apply_iterate), iter::Function, f::Function, args::Tuple{tagged{Vector{Int64}},tagged{Vector{Int64}}})
      @ SparsityDetection ~/.julia/packages/Cassette/158rp/src/context.jl:266
   [21] #2
      @ ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148 [inlined]
   [22] recurse(overdub_context#256::ctx, overdub_arguments#257::SparsityDetection.var"#2#3"{var"#20#30",Tuple{tagged{Vector{Int64}},tagged{Vector{Int64}}}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [23] abstract_run(::SparsityDetection.var"#22#24", ::ctx, ::Function, ::tagged{Vector{Int64}}, ::Vararg{tagged{Vector{Int64}},N} where N; verbose::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148
   [24] jacobian_sparsity(::Function, ::Vector{Int64}, ::Vector{Int64}; sparsity::Sparsity, verbose::Bool, raw::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:135
   [25] jacobian_sparsity(::Function, ::Vector{Int64}, ::Vector{Int64})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:130
   [26] top-level scope
      @ timing.jl:174
   [27] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:29
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
   [30] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [31] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
  
Jacobian Sparsity: Error During Test at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:38
  Test threw exception
  Expression: jacobian_sparsity(testsparse!, out, x) == sparse([1, 2, 1, 2, 3, 2, 3, 4, 3, 4], [1, 1, 2, 2, 2, 3, 3, 3, 4, 4], true)
  MethodError: no method matching isless(::Int64, ::Tuple{DataType,Vector{Int64}})
  Closest candidates are:
    isless(!Matched::Missing, ::Any) at missing.jl:87
    isless(!Matched::Tuple{}, ::Tuple) at tuple.jl:357
    isless(::Real, !Matched::AbstractFloat) at operators.jl:166
    ...
  Stacktrace:
    [1] call
      @ ~/.julia/packages/Cassette/158rp/src/context.jl:457 [inlined]
    [2] fallback
      @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
    [3] recurse(::ctx, ::typeof(isless), ::Int64, ::tagged{Tuple{DataType,Vector{Int64}}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:536
    [4] overdub(::ctx, ::Function, ::Int64, ::tagged{Tuple{DataType,Vector{Int64}}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
    [5] <
      @ ./operators.jl:277 [inlined]
    [6] recurse(::ctx, ::typeof(<), ::Int64, ::tagged{Tuple{DataType,Vector{Int64}}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
    [7] overdub(::ctx, ::Function, ::Int64, ::tagged{Tuple{DataType,Vector{Int64}}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
    [8] <=
      @ ./operators.jl:326 [inlined]
    [9] recurse(::ctx, ::typeof(<=), ::Int64, ::tagged{Tuple{DataType,Vector{Int64}}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [10] overdub(::ctx, ::Function, ::Int64, ::tagged{Tuple{DataType,Vector{Int64}}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
   [11] iterate
      @ ./tuple.jl:61 [inlined]
   [12] recurse(::ctx, ::typeof(iterate), ::tagged{Tuple{DataType,Vector{Int64}}}, ::Int64)
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [13] overdub(::ctx, ::Function, ::tagged{Tuple{DataType,Vector{Int64}}}, ::Int64)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
   [14] iterate
      @ ./tuple.jl:61 [inlined]
   [15] recurse(::ctx, ::typeof(iterate), ::tagged{Tuple{DataType,Vector{Int64}}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [16] overdub(ctx::ctx, f::Function, args::tagged{Tuple{DataType,Vector{Int64}}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
   [17] iterate(t::tagged{Tuple{DataType,Vector{Int64}}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/tagging.jl:460
   [18] overdub(ctx::ctx, #unused#::typeof(Core._apply_iterate), iter::Function, f::Function, args::tagged{Tuple{DataType,Vector{Int64}}})
      @ SparsityDetection ~/.julia/packages/Cassette/158rp/src/context.jl:266
   [19] eachindex
      @ ./abstractarray.jl:209 [inlined]
   [20] recurse(::ctx, ::typeof(eachindex), ::Type{IndexLinear}, ::tagged{Vector{Int64}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [21] overdub(::ctx, ::Function, ::Type, ::tagged{Vector{Int64}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
   [22] lastindex
      @ ./abstractarray.jl:302 [inlined]
   [23] recurse(::ctx, ::typeof(lastindex), ::tagged{Vector{Int64}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [24] overdub(ctx::ctx, f::Function, args::tagged{Vector{Int64}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
   [25] testsparse!
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:34 [inlined]
   [26] recurse(::ctx, ::var"#testsparse!#31", ::tagged{Vector{Int64}}, ::tagged{Vector{Int64}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [27] overdub(::ctx, ::Function, ::tagged{Vector{Int64}}, ::tagged{Vector{Int64}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
   [28] overdub(ctx::ctx, #unused#::typeof(Core._apply_iterate), iter::Function, f::Function, args::Tuple{tagged{Vector{Int64}},tagged{Vector{Int64}}})
      @ SparsityDetection ~/.julia/packages/Cassette/158rp/src/context.jl:266
   [29] #2
      @ ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148 [inlined]
   [30] recurse(overdub_context#256::ctx, overdub_arguments#257::SparsityDetection.var"#2#3"{var"#testsparse!#31",Tuple{tagged{Vector{Int64}},tagged{Vector{Int64}}}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [31] abstract_run(::SparsityDetection.var"#22#24", ::ctx, ::Function, ::tagged{Vector{Int64}}, ::Vararg{tagged{Vector{Int64}},N} where N; verbose::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148
   [32] jacobian_sparsity(::Function, ::Vector{Int64}, ::Vector{Int64}; sparsity::Sparsity, verbose::Bool, raw::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:135
   [33] jacobian_sparsity(::Function, ::Vector{Int64}, ::Vector{Int64})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:130
   [34] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:38
   [35] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [36] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
   [37] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [38] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
  
BLAS: Error During Test at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:51
  Test threw exception
  Expression: all(jacobian_sparsity(f, out, x) .== 1)
  MethodError: no method matching rand(::typeof(length), ::typeof(length))
  Closest candidates are:
    rand(!Matched::Random.AbstractRNG, ::Any, !Matched::Integer, !Matched::Integer...) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/Random.jl:282
    rand(!Matched::Random.AbstractRNG, ::Any, !Matched::Tuple{Vararg{Int64,N}} where N) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/Random.jl:279
    rand(!Matched::Random.AbstractRNG, ::Any) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/Random.jl:253
    ...
  Stacktrace:
    [1] call
      @ ~/.julia/packages/Cassette/158rp/src/context.jl:457 [inlined]
    [2] fallback
      @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
    [3] recurse(::ctx, ::typeof(rand), ::typeof(length), ::typeof(length))
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:536
    [4] overdub(::ctx, ::Function, ::Function, ::Function)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:58
    [5] f
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:44 [inlined]
    [6] recurse(::ctx, ::var"#f#32", ::tagged{Vector{Float64}}, ::tagged{Vector{Float64}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
    [7] overdub(::ctx, ::Function, ::tagged{Vector{Float64}}, ::tagged{Vector{Float64}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
    [8] overdub(ctx::ctx, #unused#::typeof(Core._apply_iterate), iter::Function, f::Function, args::Tuple{tagged{Vector{Float64}},tagged{Vector{Float64}}})
      @ SparsityDetection ~/.julia/packages/Cassette/158rp/src/context.jl:266
    [9] #2
      @ ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148 [inlined]
   [10] recurse(overdub_context#256::ctx, overdub_arguments#257::SparsityDetection.var"#2#3"{var"#f#32",Tuple{tagged{Vector{Float64}},tagged{Vector{Float64}}}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [11] abstract_run(::SparsityDetection.var"#22#24", ::ctx, ::Function, ::tagged{Vector{Float64}}, ::Vararg{tagged{Vector{Float64}},N} where N; verbose::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148
   [12] jacobian_sparsity(::Function, ::Vector{Float64}, ::Vector{Float64}; sparsity::Sparsity, verbose::Bool, raw::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:135
   [13] jacobian_sparsity(::Function, ::Vector{Float64}, ::Vector{Float64})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:130
   [14] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:51
   [15] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [16] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:43
  
avoid branches in primitive functions with isleaf: Error During Test at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:65
  Test threw exception
  Expression: jacobian_sparsity(f, y, x) == sparse([1, 2, 3], [1, 2, 3], true)
  MethodError: no method matching (::Colon)(::Int64, ::typeof(length))
  Closest candidates are:
    (::Colon)(::T, ::Any, !Matched::T) where T<:Real at range.jl:41
    (::Colon)(::A, ::Any, !Matched::C) where {A<:Real, C<:Real} at range.jl:10
    (::Colon)(::T, ::Any, !Matched::T) where T at range.jl:40
    ...
  Stacktrace:
    [1] call
      @ ~/.julia/packages/Cassette/158rp/src/context.jl:457 [inlined]
    [2] fallback
      @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
    [3] recurse(::ctx, ::Colon, ::Int64, ::typeof(length))
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:536
    [4] overdub(::ctx, ::Function, ::Int64, ::Function)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:58
    [5] f
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:60 [inlined]
    [6] recurse(::ctx, ::var"#f#34", ::tagged{Vector{Float64}}, ::tagged{Vector{Float64}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
    [7] overdub(::ctx, ::Function, ::tagged{Vector{Float64}}, ::tagged{Vector{Float64}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
    [8] overdub(ctx::ctx, #unused#::typeof(Core._apply_iterate), iter::Function, f::Function, args::Tuple{tagged{Vector{Float64}},tagged{Vector{Float64}}})
      @ SparsityDetection ~/.julia/packages/Cassette/158rp/src/context.jl:266
    [9] #2
      @ ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148 [inlined]
   [10] recurse(overdub_context#256::ctx, overdub_arguments#257::SparsityDetection.var"#2#3"{var"#f#34",Tuple{tagged{Vector{Float64}},tagged{Vector{Float64}}}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [11] abstract_run(::SparsityDetection.var"#22#24", ::ctx, ::Function, ::tagged{Vector{Float64}}, ::Vararg{tagged{Vector{Float64}},N} where N; verbose::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148
   [12] jacobian_sparsity(::Function, ::Vector{Float64}, ::Vector{Float64}; sparsity::Sparsity, verbose::Bool, raw::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:135
   [13] jacobian_sparsity(::Function, ::Vector{Float64}, ::Vector{Float64})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:130
   [14] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:65
   [15] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [16] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:57
  
avoid branches in primitive functions with isleaf: Error During Test at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:69
  Test threw exception
  Expression: jacobian_sparsity(y, x) do y, x
        y .= exp.(x)
    end == sparse([1, 2, 3], [1, 2, 3], [1, 1, 1])
  MethodError: no method matching isless(::Int64, ::Tuple{ctx})
  Closest candidates are:
    isless(!Matched::Missing, ::Any) at missing.jl:87
    isless(!Matched::Tuple{}, ::Tuple) at tuple.jl:357
    isless(::Real, !Matched::AbstractFloat) at operators.jl:166
    ...
  Stacktrace:
    [1] call
      @ ~/.julia/packages/Cassette/158rp/src/context.jl:457 [inlined]
    [2] fallback
      @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
    [3] recurse(::ctx, ::typeof(isless), ::Int64, ::tagged{Tuple{ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:536
    [4] overdub(::ctx, ::Function, ::Int64, ::tagged{Tuple{ctx}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
    [5] <
      @ ./operators.jl:277 [inlined]
    [6] recurse(::ctx, ::typeof(<), ::Int64, ::tagged{Tuple{ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
    [7] overdub(::ctx, ::Function, ::Int64, ::tagged{Tuple{ctx}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
    [8] <=
      @ ./operators.jl:326 [inlined]
    [9] recurse(::ctx, ::typeof(<=), ::Int64, ::tagged{Tuple{ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [10] overdub(::ctx, ::Function, ::Int64, ::tagged{Tuple{ctx}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
   [11] iterate
      @ ./tuple.jl:61 [inlined]
   [12] recurse(::ctx, ::typeof(iterate), ::tagged{Tuple{ctx}}, ::Int64)
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [13] overdub(::ctx, ::Function, ::tagged{Tuple{ctx}}, ::Int64)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
   [14] iterate
      @ ./tuple.jl:61 [inlined]
   [15] recurse(::ctx, ::typeof(iterate), ::tagged{Tuple{ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [16] overdub(ctx::ctx, f::Function, args::tagged{Tuple{ctx}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:37
   [17] iterate(t::tagged{Tuple{ctx}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/tagging.jl:460
   [18] overdub(::ctx, ::typeof(Core._apply_iterate), ::Function, ::Function, ::tagged{Tuple{ctx}}, ::Function)
      @ SparsityDetection ~/.julia/packages/Cassette/158rp/src/context.jl:266
   [19] broadcasted
      @ ./broadcast.jl:1257 [inlined]
   [20] recurse(::ctx, ::typeof(broadcasted), ::typeof(exp), ::tagged{Vector{Float64}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [21] overdub(::ctx, ::Function, ::Function, ::tagged{Vector{Float64}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
   [22] #33
      @ ./none:0 [inlined]
   [23] recurse(::ctx, ::var"#33#35", ::tagged{Vector{Float64}}, ::tagged{Vector{Float64}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [24] overdub(::ctx, ::Function, ::tagged{Vector{Float64}}, ::tagged{Vector{Float64}})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
   [25] overdub(ctx::ctx, #unused#::typeof(Core._apply_iterate), iter::Function, f::Function, args::Tuple{tagged{Vector{Float64}},tagged{Vector{Float64}}})
      @ SparsityDetection ~/.julia/packages/Cassette/158rp/src/context.jl:266
   [26] #2
      @ ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148 [inlined]
   [27] recurse(overdub_context#256::ctx, overdub_arguments#257::SparsityDetection.var"#2#3"{var"#33#35",Tuple{tagged{Vector{Float64}},tagged{Vector{Float64}}}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
   [28] abstract_run(::SparsityDetection.var"#22#24", ::ctx, ::Function, ::tagged{Vector{Float64}}, ::Vararg{tagged{Vector{Float64}},N} where N; verbose::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148
   [29] jacobian_sparsity(::Function, ::Vector{Float64}, ::Vector{Float64}; sparsity::Sparsity, verbose::Bool, raw::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:135
   [30] jacobian_sparsity(::Function, ::Vector{Float64}, ::Vector{Float64})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:130
   [31] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:69
   [32] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [33] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:57
  
Fixed params: Error During Test at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:79
  Test threw exception
  Expression: jacobian_sparsity(f, [1, 1, 1], [1, 2, 3], Fixed(1)) == sparse([1, 2, 3], [1, 2, 3], true)
  TypeError: non-boolean (var"#f#36") used in boolean context
  Stacktrace:
    [1] f
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:77 [inlined]
    [2] recurse(::ctx, ::var"#f#36", ::tagged{Vector{Int64}}, ::tagged{Vector{Int64}}, ::Int64)
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
    [3] overdub(::ctx, ::Function, ::tagged{Vector{Int64}}, ::tagged{Vector{Int64}}, ::Int64)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
    [4] overdub(ctx::ctx, #unused#::typeof(Core._apply_iterate), iter::Function, f::Function, args::Tuple{tagged{Vector{Int64}},tagged{Vector{Int64}},Int64})
      @ SparsityDetection ~/.julia/packages/Cassette/158rp/src/context.jl:266
    [5] #2
      @ ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148 [inlined]
    [6] recurse(overdub_context#256::ctx, overdub_arguments#257::SparsityDetection.var"#2#3"{var"#f#36",Tuple{tagged{Vector{Int64}},tagged{Vector{Int64}},Int64}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
    [7] abstract_run(::SparsityDetection.var"#22#24", ::ctx, ::Function, ::tagged{Vector{Int64}}, ::Vararg{Any,N} where N; verbose::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148
    [8] jacobian_sparsity(f!::Function, Y::Vector{Int64}, X::Vector{Int64}, args::Fixed; sparsity::Sparsity, verbose::Bool, raw::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:135
    [9] jacobian_sparsity(f!::Function, Y::Vector{Int64}, X::Vector{Int64}, args::Fixed)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:130
   [10] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:79
   [11] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [12] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:77
  
Fixed params: Error During Test at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:80
  Test threw exception
  Expression: jacobian_sparsity(f, [1, 1, 1], [1, 2, 3], Fixed(-1)) == sparse([3, 2, 1], [1, 2, 3], true)
  TypeError: non-boolean (var"#f#36") used in boolean context
  Stacktrace:
    [1] f
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:77 [inlined]
    [2] recurse(::ctx, ::var"#f#36", ::tagged{Vector{Int64}}, ::tagged{Vector{Int64}}, ::Int64)
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
    [3] overdub(::ctx, ::Function, ::tagged{Vector{Int64}}, ::tagged{Vector{Int64}}, ::Int64)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
    [4] overdub(ctx::ctx, #unused#::typeof(Core._apply_iterate), iter::Function, f::Function, args::Tuple{tagged{Vector{Int64}},tagged{Vector{Int64}},Int64})
      @ SparsityDetection ~/.julia/packages/Cassette/158rp/src/context.jl:266
    [5] #2
      @ ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148 [inlined]
    [6] recurse(overdub_context#256::ctx, overdub_arguments#257::SparsityDetection.var"#2#3"{var"#f#36",Tuple{tagged{Vector{Int64}},tagged{Vector{Int64}},Int64}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
    [7] abstract_run(::SparsityDetection.var"#22#24", ::ctx, ::Function, ::tagged{Vector{Int64}}, ::Vararg{Any,N} where N; verbose::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148
    [8] jacobian_sparsity(f!::Function, Y::Vector{Int64}, X::Vector{Int64}, args::Fixed; sparsity::Sparsity, verbose::Bool, raw::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:135
    [9] jacobian_sparsity(f!::Function, Y::Vector{Int64}, X::Vector{Int64}, args::Fixed)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:130
   [10] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:80
   [11] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [12] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:77
  
Fixed params: Error During Test at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:81
  Test threw exception
  Expression: jacobian_sparsity(f, [1, 1, 1], [1, 2, 3], 2) == sparse([1, 2, 3, 3, 1], [1, 2, 3, 1, 3], true)
  TypeError: non-boolean (var"#f#36") used in boolean context
  Stacktrace:
    [1] f
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:77 [inlined]
    [2] recurse(::ctx, ::var"#f#36", ::tagged{Vector{Int64}}, ::tagged{Vector{Int64}}, ::tagged{Int64})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
    [3] overdub(::ctx, ::Function, ::tagged{Vector{Int64}}, ::tagged{Vector{Int64}}, ::tagged{Int64})
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/propagate_tags.jl:45
    [4] overdub(ctx::ctx, #unused#::typeof(Core._apply_iterate), iter::Function, f::Function, args::Tuple{tagged{Vector{Int64}},tagged{Vector{Int64}},tagged{Int64}})
      @ SparsityDetection ~/.julia/packages/Cassette/158rp/src/context.jl:266
    [5] #2
      @ ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148 [inlined]
    [6] recurse(overdub_context#256::ctx, overdub_arguments#257::SparsityDetection.var"#2#3"{var"#f#36",Tuple{tagged{Vector{Int64}},tagged{Vector{Int64}},tagged{Int64}}})
      @ Cassette ~/.julia/packages/Cassette/158rp/src/overdub.jl:0
    [7] abstract_run(::SparsityDetection.var"#22#24", ::ctx, ::Function, ::tagged{Vector{Int64}}, ::Vararg{Any,N} where N; verbose::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/controlflow.jl:148
    [8] jacobian_sparsity(f!::Function, Y::Vector{Int64}, X::Vector{Int64}, args::Int64; sparsity::Sparsity, verbose::Bool, raw::Bool)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:135
    [9] jacobian_sparsity(f!::Function, Y::Vector{Int64}, X::Vector{Int64}, args::Int64)
      @ SparsityDetection ~/.julia/packages/SparsityDetection/PbKzm/src/jacobian.jl:130
   [10] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:81
   [11] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [12] top-level scope
      @ ~/.julia/packages/SparsityDetection/PbKzm/test/jacobian.jl:77
  
Test Summary:                                       | Fail  Error  Total
Jacobian Sparsity                                   |    5     13     18
  BLAS                                              |           1      1
  avoid branches in primitive functions with isleaf |           2      2
  Fixed params                                      |           3      3
ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 13 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/SparsityDetection/PbKzm/test/runtests.jl:4
ERROR: Package SparsityDetection errored during testing
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1561
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:327
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:314
  [5] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#60
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:16
