Julia Version 1.6.0-DEV.387
Commit e23635c619 (2020-07-07 16:42 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Libgpg_error_jll ───────────── v1.36.0+1
  Installed Glib_jll ───────────────────── v2.59.0+2
  Installed CEnum ──────────────────────── v0.3.0
  Installed MetaGraphs ─────────────────── v0.6.5
  Installed MbedTLS ────────────────────── v1.0.2
  Installed BenchmarkTools ─────────────── v0.5.0
  Installed GPUCompiler ────────────────── v0.2.0
  Installed PicoQuant ──────────────────── v0.1.0
  Installed SortingAlgorithms ──────────── v0.3.1
  Installed Rmath ──────────────────────── v0.6.1
  Installed Libgcrypt_jll ──────────────── v1.8.5+1
  Installed Xorg_libXrender_jll ────────── v0.9.10+2
  Installed XML2_jll ───────────────────── v2.9.10+1
  Installed Libiconv_jll ───────────────── v1.16.0+5
  Installed Gettext_jll ────────────────── v0.20.1+4
  Installed Rmath_jll ──────────────────── v0.2.2+1
  Installed SIMDPirates ────────────────── v0.8.13
  Installed TupleTools ─────────────────── v1.2.0
  Installed VectorizationBase ──────────── v0.12.19
  Installed ZipFile ────────────────────── v0.9.2
  Installed Adapt ──────────────────────── v1.1.0
  Installed SCS ────────────────────────── v0.6.6
  Installed SpecialFunctions ───────────── v0.10.3
  Installed OffsetArrays ───────────────── v1.1.1
  Installed NNlib ──────────────────────── v0.7.2
  Installed ArgParse ───────────────────── v1.1.0
  Installed Cairo ──────────────────────── v1.0.3
  Installed FillArrays ─────────────────── v0.8.12
  Installed SLEEFPirates ───────────────── v0.5.4
  Installed GPUArrays ──────────────────── v3.4.1
  Installed FFTW_jll ───────────────────── v3.3.9+5
  Installed MacroTools ─────────────────── v0.5.5
  Installed CUDAapi ────────────────────── v4.0.0
  Installed HDF5 ───────────────────────── v0.13.2
  Installed PDMats ─────────────────────── v0.9.12
  Installed FileIO ─────────────────────── v1.3.0
  Installed Measures ───────────────────── v0.3.1
  Installed Cairo_jll ──────────────────── v1.16.0+4
  Installed Lz4_jll ────────────────────── v1.9.2+0
  Installed HarfBuzz_jll ───────────────── v2.6.1+5
  Installed Zstd_jll ───────────────────── v1.4.5+0
  Installed OpenBLAS_jll ───────────────── v0.3.9+5
  Installed FixedPointNumbers ──────────── v0.7.1
  Installed FFTW ───────────────────────── v1.2.2
  Installed MathOptInterface ───────────── v0.9.14
  Installed LightGraphs ────────────────── v1.3.3
  Installed Documenter ─────────────────── v0.25.0
  Installed FriBidi_jll ────────────────── v1.0.5+3
  Installed PCRE_jll ───────────────────── v8.42.0+2
  Installed Arpack ─────────────────────── v0.4.0
  Installed ExprTools ──────────────────── v0.1.1
  Installed AbstractTrees ──────────────── v0.3.3
  Installed DataStructures ─────────────── v0.17.19
  Installed ParserCombinator ───────────── v2.0.0
  Installed CuArrays ───────────────────── v2.2.2
  Installed AbstractFFTs ───────────────── v0.5.0
  Installed DeepDiffs ──────────────────── v1.2.0
  Installed BinaryProvider ─────────────── v0.5.10
  Installed FoldingTrees ───────────────── v1.0.0
  Installed SimpleTraits ───────────────── v0.9.2
  Installed IJulia ─────────────────────── v1.21.2
  Installed libpng_jll ─────────────────── v1.6.37+3
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed Convex ─────────────────────── v0.13.3
  Installed CodeTracking ───────────────── v1.0.0
  Installed Colors ─────────────────────── v0.11.2
  Installed TranscodingStreams ─────────── v0.9.5
  Installed ArnoldiMethod ──────────────── v0.0.4
  Installed ZMQ ────────────────────────── v1.2.1
  Installed LRUCache ───────────────────── v1.1.0
  Installed Libuuid_jll ────────────────── v2.34.0+4
  Installed ColorTypes ─────────────────── v0.9.1
  Installed Bzip2_jll ──────────────────── v1.0.6+2
  Installed AutoHashEquals ─────────────── v0.2.0
  Installed Xorg_libXext_jll ───────────── v1.3.4+2
  Installed OrderedCollections ─────────── v1.3.0
  Installed Zlib_jll ───────────────────── v1.2.11+14
  Installed Conda ──────────────────────── v1.4.1
  Installed LaTeXStrings ───────────────── v1.1.0
  Installed Compat ─────────────────────── v3.13.0
  Installed Xorg_libXau_jll ────────────── v1.0.9+2
  Installed StatsFuns ──────────────────── v0.9.5
  Installed HDF5_jll ───────────────────── v1.10.5+5
  Installed JSONSchema ─────────────────── v0.3.0
  Installed CUDAnative ─────────────────── v3.2.0
  Installed ZeroMQ_jll ─────────────────── v4.3.2+4
  Installed MutableArithmetics ─────────── v0.2.10
  Installed TestSetExtensions ──────────── v2.0.0
  Installed Pango_jll ──────────────────── v1.42.4+8
  Installed MKL_jll ────────────────────── v2020.1.216+0
  Installed CodecBzip2 ─────────────────── v0.7.2
  Installed NNPACK_jll ─────────────────── v2018.6.22+0
  Installed IntelOpenMP_jll ────────────── v2018.0.3+0
  Installed PyCall ─────────────────────── v1.91.4
  Installed LLVM ───────────────────────── v1.7.0
  Installed MbedTLS_jll ────────────────── v2.16.6+1
  Installed Arpack_jll ─────────────────── v3.5.0+3
  Installed Nullables ──────────────────── v1.0.0
  Installed FreeType2_jll ──────────────── v2.10.1+2
  Installed TextWrap ───────────────────── v1.0.1
  Installed QuadGK ─────────────────────── v2.4.0
  Installed TikzGraphs ─────────────────── v1.1.0
  Installed GraphIO ────────────────────── v0.5.0
  Installed IniFile ────────────────────── v0.5.0
  Installed Parsers ────────────────────── v1.0.7
  Installed Xorg_libxcb_jll ────────────── v1.13.0+2
  Installed Inflate ────────────────────── v0.1.2
  Installed IterTools ──────────────────── v1.3.0
  Installed CodecZlib ──────────────────── v0.7.0
  Installed SoftGlobalScope ────────────── v1.0.10
  Installed TikzPictures ───────────────── v3.1.0
  Installed Graphics ───────────────────── v1.0.2
  Installed Expat_jll ──────────────────── v2.2.7+3
  Installed Graphite2_jll ──────────────── v1.3.13+1
  Installed UnPack ─────────────────────── v1.0.1
  Installed Libmount_jll ───────────────── v2.34.0+1
  Installed MathProgBase ───────────────── v0.7.8
  Installed StatsBase ──────────────────── v0.33.0
  Installed Compose ────────────────────── v0.8.2
  Installed Missings ───────────────────── v0.4.3
  Installed LZO_jll ────────────────────── v2.10.0+1
  Installed Pixman_jll ─────────────────── v0.38.4+2
  Installed CpuId ──────────────────────── v0.2.2
  Installed EllipsisNotation ───────────── v0.4.0
  Installed Requires ───────────────────── v1.0.1
  Installed VersionParsing ─────────────── v1.2.0
  Installed Fontconfig_jll ─────────────── v2.13.1+12
  Installed Blosc ──────────────────────── v0.7.0
  Installed Libffi_jll ─────────────────── v3.2.1+1
  Installed HTTP ───────────────────────── v0.8.16
  Installed TensorOperations ───────────── v2.2.0
  Installed JSON ───────────────────────── v0.21.0
  Installed XSLT_jll ───────────────────── v1.1.33+2
  Installed NaNMath ────────────────────── v0.3.3
  Installed Xorg_libpthread_stubs_jll ──── v0.1.0+1
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed Strided ────────────────────── v1.0.1
  Installed TimerOutputs ───────────────── v0.5.6
  Installed StaticArrays ───────────────── v0.12.4
  Installed GraphPlot ──────────────────── v0.4.2
  Installed Cthulhu ────────────────────── v1.2.0
  Installed Reexport ───────────────────── v0.2.0
  Installed DataAPI ────────────────────── v1.3.0
  Installed QuantumInformation ─────────── v0.4.6
  Installed Xorg_libX11_jll ────────────── v1.6.9+2
  Installed JLD2 ───────────────────────── v0.1.13
  Installed Blosc_jll ──────────────────── v1.14.3+1
  Installed DocStringExtensions ────────── v0.8.2
  Installed LoopVectorization ──────────── v0.8.13
  Installed Xorg_xtrans_jll ────────────── v1.4.0+1
  Installed Xorg_libXdmcp_jll ──────────── v1.1.3+2
  Installed CUDAdrv ────────────────────── v6.3.0
  Installed Distributions ──────────────── v0.23.4
Updating `~/.julia/environments/v1.6/Project.toml`
  [2db47837] + PicoQuant v0.1.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [1520ce14] + AbstractTrees v0.3.3
  [79e6a3ab] + Adapt v1.1.0
  [c7e460c6] + ArgParse v1.1.0
  [ec485272] + ArnoldiMethod v0.0.4
  [7d9fca2a] + Arpack v0.4.0
  [68821587] + Arpack_jll v3.5.0+3
  [15f4f7f2] + AutoHashEquals v0.2.0
  [6e4b80f9] + BenchmarkTools v0.5.0
  [b99e7846] + BinaryProvider v0.5.10
  [a74b3585] + Blosc v0.7.0
  [0b7ba130] + Blosc_jll v1.14.3+1
  [6e34b625] + Bzip2_jll v1.0.6+2
  [fa961155] + CEnum v0.3.0
  [3895d2a7] + CUDAapi v4.0.0
  [c5f51814] + CUDAdrv v6.3.0
  [be33ccc6] + CUDAnative v3.2.0
  [159f3aea] + Cairo v1.0.3
  [83423d85] + Cairo_jll v1.16.0+4
  [da1fd8a2] + CodeTracking v1.0.0
  [523fee87] + CodecBzip2 v0.7.2
  [944b1d66] + CodecZlib v0.7.0
  [3da002f7] + ColorTypes v0.9.1
  [5ae59095] + Colors v0.11.2
  [34da2185] + Compat v3.13.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [a81c6b42] + Compose v0.8.2
  [8f4d0f93] + Conda v1.4.1
  [f65535da] + Convex v0.13.3
  [adafc99b] + CpuId v0.2.2
  [f68482b8] + Cthulhu v1.2.0
  [3a865a2d] + CuArrays v2.2.2
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.17.19
  [ab62b9b5] + DeepDiffs v1.2.0
  [31c24e10] + Distributions v0.23.4
  [ffbed154] + DocStringExtensions v0.8.2
  [e30172f5] + Documenter v0.25.0
  [da5c29d0] + EllipsisNotation v0.4.0
  [2e619515] + Expat_jll v2.2.7+3
  [e2ba6199] + ExprTools v0.1.1
  [7a1cc6ca] + FFTW v1.2.2
  [f5851436] + FFTW_jll v3.3.9+5
  [5789e2e9] + FileIO v1.3.0
  [1a297f60] + FillArrays v0.8.12
  [53c48c17] + FixedPointNumbers v0.7.1
  [1eca21be] + FoldingTrees v1.0.0
  [a3f928ae] + Fontconfig_jll v2.13.1+12
  [d7e528f0] + FreeType2_jll v2.10.1+2
  [559328eb] + FriBidi_jll v1.0.5+3
  [0c68f7d7] + GPUArrays v3.4.1
  [61eb1bfa] + GPUCompiler v0.2.0
  [78b55507] + Gettext_jll v0.20.1+4
  [7746bdde] + Glib_jll v2.59.0+2
  [aa1b3936] + GraphIO v0.5.0
  [a2cc645c] + GraphPlot v0.4.2
  [a2bd30eb] + Graphics v1.0.2
  [3b182d85] + Graphite2_jll v1.3.13+1
  [f67ccb44] + HDF5 v0.13.2
  [0234f1f7] + HDF5_jll v1.10.5+5
  [cd3eb016] + HTTP v0.8.16
  [2e76f6c2] + HarfBuzz_jll v2.6.1+5
  [7073ff75] + IJulia v1.21.2
  [d25df0c9] + Inflate v0.1.2
  [83e8ac13] + IniFile v0.5.0
  [1d5cc7b8] + IntelOpenMP_jll v2018.0.3+0
  [c8e1da08] + IterTools v1.3.0
  [033835bb] + JLD2 v0.1.13
  [682c06a0] + JSON v0.21.0
  [7d188eb4] + JSONSchema v0.3.0
  [929cbde3] + LLVM v1.7.0
  [8ac3fa9e] + LRUCache v1.1.0
  [dd4b983a] + LZO_jll v2.10.0+1
  [b964fa9f] + LaTeXStrings v1.1.0
  [e9f186c6] + Libffi_jll v3.2.1+1
  [d4300ac3] + Libgcrypt_jll v1.8.5+1
  [7add5ba3] + Libgpg_error_jll v1.36.0+1
  [94ce4f54] + Libiconv_jll v1.16.0+5
  [4b2f31a3] + Libmount_jll v2.34.0+1
  [38a345b3] + Libuuid_jll v2.34.0+4
  [093fc24a] + LightGraphs v1.3.3
  [bdcacae8] + LoopVectorization v0.8.13
  [5ced341a] + Lz4_jll v1.9.2+0
  [856f044c] + MKL_jll v2020.1.216+0
  [1914dd2f] + MacroTools v0.5.5
  [b8f27783] + MathOptInterface v0.9.14
  [fdba3010] + MathProgBase v0.7.8
  [739be429] + MbedTLS v1.0.2
  [c8ffd9c3] + MbedTLS_jll v2.16.6+1
  [442fdcdd] + Measures v0.3.1
  [626554b9] + MetaGraphs v0.6.5
  [e1d29d7a] + Missings v0.4.3
  [d8a4904e] + MutableArithmetics v0.2.10
  [a6bfbf70] + NNPACK_jll v2018.6.22+0
  [872c559c] + NNlib v0.7.2
  [77ba4419] + NaNMath v0.3.3
  [4d1e1d77] + Nullables v1.0.0
  [6fe1bfb0] + OffsetArrays v1.1.1
  [4536629a] + OpenBLAS_jll v0.3.9+5
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.3.0
  [2f80f16e] + PCRE_jll v8.42.0+2
  [90014a1f] + PDMats v0.9.12
  [36c8627f] + Pango_jll v1.42.4+8
  [fae87a5f] + ParserCombinator v2.0.0
  [69de0a69] + Parsers v1.0.7
  [2db47837] + PicoQuant v0.1.0
  [30392449] + Pixman_jll v0.38.4+2
  [438e738f] + PyCall v1.91.4
  [1fd47b50] + QuadGK v2.4.0
  [3c0b384b] + QuantumInformation v0.4.6
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.1
  [79098fc4] + Rmath v0.6.1
  [f50d1b31] + Rmath_jll v0.2.2+1
  [c946c3f1] + SCS v0.6.6
  [21efa798] + SIMDPirates v0.8.13
  [476501e8] + SLEEFPirates v0.5.4
  [699a6c99] + SimpleTraits v0.9.2
  [b85f4697] + SoftGlobalScope v1.0.10
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.4
  [2913bbd2] + StatsBase v0.33.0
  [4c63d2b9] + StatsFuns v0.9.5
  [5e0ebb24] + Strided v1.0.1
  [6aa20fa7] + TensorOperations v2.2.0
  [98d24dd4] + TestSetExtensions v2.0.0
  [b718987f] + TextWrap v1.0.1
  [b4f28e30] + TikzGraphs v1.1.0
  [37f6aa50] + TikzPictures v3.1.0
  [a759f4b9] + TimerOutputs v0.5.6
  [3bb67fe8] + TranscodingStreams v0.9.5
  [9d95972d] + TupleTools v1.2.0
  [3a884ed6] + UnPack v1.0.1
  [3d5dd08c] + VectorizationBase v0.12.19
  [81def892] + VersionParsing v1.2.0
  [02c8fc9c] + XML2_jll v2.9.10+1
  [aed1982a] + XSLT_jll v1.1.33+2
  [4f6342f7] + Xorg_libX11_jll v1.6.9+2
  [0c0b7dd1] + Xorg_libXau_jll v1.0.9+2
  [a3789734] + Xorg_libXdmcp_jll v1.1.3+2
  [1082639a] + Xorg_libXext_jll v1.3.4+2
  [ea2f1a96] + Xorg_libXrender_jll v0.9.10+2
  [14d82f49] + Xorg_libpthread_stubs_jll v0.1.0+1
  [c7cfdc94] + Xorg_libxcb_jll v1.13.0+2
  [c5fb5394] + Xorg_xtrans_jll v1.4.0+1
  [c2297ded] + ZMQ v1.2.1
  [8f1865be] + ZeroMQ_jll v4.3.2+4
  [a5390f91] + ZipFile v0.9.2
  [83775a58] + Zlib_jll v1.2.11+14
  [3161d3a3] + Zstd_jll v1.4.5+0
  [b53b4c65] + libpng_jll v1.6.37+3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [7b1f6079] + FileWatching
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building FFTW ────────→ `~/.julia/packages/FFTW/kcXL6/deps/build.log`
   Building SCS ─────────→ `~/.julia/packages/SCS/28Svy/deps/build.log`
   Building SLEEFPirates → `~/.julia/packages/SLEEFPirates/QzifL/deps/build.log`
   Building Conda ───────→ `~/.julia/packages/Conda/3rPhK/deps/build.log`
   Building PyCall ──────→ `~/.julia/packages/PyCall/zqDXB/deps/build.log`
   Building IJulia ──────→ `~/.julia/packages/IJulia/DrVMH/deps/build.log`
   Building HDF5 ────────→ `~/.julia/packages/HDF5/pAi1D/deps/build.log`
   Building PicoQuant ───→ `~/.julia/packages/PicoQuant/Hr8xP/deps/build.log`
┌ Error: Error building `PicoQuant`: 
│ Collecting pip
│   Downloading pip-20.1.1-py2.py3-none-any.whl (1.5 MB)
│ Collecting setuptools
│   Downloading setuptools-49.1.0-py3-none-any.whl (789 kB)
│ Collecting wheel
│   Downloading wheel-0.34.2-py2.py3-none-any.whl (26 kB)
│ Installing collected packages: pip, setuptools, wheel
│   WARNING: The scripts pip, pip3 and pip3.6 are installed in '/home/pkgeval/.local/bin' which is not on PATH.
│   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.
│   WARNING: The scripts easy_install and easy_install-3.6 are installed in '/home/pkgeval/.local/bin' which is not on PATH.
│   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.
│   WARNING: The script wheel is installed in '/home/pkgeval/.local/bin' which is not on PATH.
│   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.
│ Successfully installed pip-20.1.1 setuptools-49.1.0 wheel-0.34.2
│ Requirement already up-to-date: pip in /home/pkgeval/.local/lib/python3.6/site-packages (20.1.1)
│ Requirement already up-to-date: setuptools in /home/pkgeval/.local/lib/python3.6/site-packages (49.1.0)
│ Collecting qiskit==0.19.2
│   Downloading qiskit-0.19.2.tar.gz (3.9 kB)
│ Collecting pylatexenc==2.1
│   Downloading pylatexenc-2.1.tar.gz (119 kB)
│ Collecting qiskit-terra==0.14.1
│   Downloading qiskit_terra-0.14.1-cp36-cp36m-manylinux2010_x86_64.whl (6.7 MB)
│ Collecting qiskit-aer==0.5.1
│   Downloading qiskit_aer-0.5.1-cp36-cp36m-manylinux2010_x86_64.whl (23.4 MB)
│ Collecting qiskit-ibmq-provider==0.7.1
│   Downloading qiskit_ibmq_provider-0.7.1-py3-none-any.whl (155 kB)
│ Collecting qiskit-ignis==0.3.0
│   Downloading qiskit_ignis-0.3.0-py3-none-any.whl (172 kB)
│ Collecting qiskit-aqua==0.7.1
│   Downloading qiskit_aqua-0.7.1-py3-none-any.whl (1.9 MB)
│ Collecting psutil>=5
│   Downloading psutil-5.7.0.tar.gz (449 kB)
│ Collecting python-constraint>=1.4
│   Downloading python-constraint-1.4.0.tar.bz2 (18 kB)
│ Collecting networkx>=2.2; python_version > "3.5"
│   Downloading networkx-2.4-py3-none-any.whl (1.6 MB)
│ Collecting ply>=3.10
│   Downloading ply-3.11-py2.py3-none-any.whl (49 kB)
│ Collecting retworkx>=0.3.2
│   Downloading retworkx-0.3.4-cp36-cp36m-manylinux2010_x86_64.whl (763 kB)
│ Collecting scipy>=1.4
│   Downloading scipy-1.5.1-cp36-cp36m-manylinux1_x86_64.whl (25.9 MB)
│ Collecting fastjsonschema>=2.10
│   Downloading fastjsonschema-2.14.4-py3-none-any.whl (21 kB)
│ Collecting python-dateutil>=2.8.0
│   Downloading python_dateutil-2.8.1-py2.py3-none-any.whl (227 kB)
│ Collecting sympy>=1.3
│   Downloading sympy-1.6.1-py3-none-any.whl (5.8 MB)
│ Collecting jsonschema>=2.6
│   Downloading jsonschema-3.2.0-py2.py3-none-any.whl (56 kB)
│ Collecting marshmallow<4,>=3
│   Downloading marshmallow-3.6.1-py2.py3-none-any.whl (45 kB)
│ Collecting dill>=0.3
│   Downloading dill-0.3.2.zip (177 kB)
│ Collecting marshmallow-polyfield<6,>=5.7
│   Downloading marshmallow-polyfield-5.9.tar.gz (8.5 kB)
│ Collecting numpy>=1.17
│   Downloading numpy-1.19.0-cp36-cp36m-manylinux2010_x86_64.whl (14.6 MB)
│ Collecting cython>=0.27.1
│   Downloading Cython-0.29.20-cp36-cp36m-manylinux1_x86_64.whl (2.0 MB)
│ Collecting pybind11>=2.4
│   Downloading pybind11-2.5.0-py2.py3-none-any.whl (296 kB)
│ Collecting websockets<8,>=7
│   Downloading websockets-7.0-cp36-cp36m-manylinux1_x86_64.whl (63 kB)
│ Collecting urllib3>=1.21.1
│   Downloading urllib3-1.25.9-py2.py3-none-any.whl (126 kB)
│ Collecting requests-ntlm>=1.1.0
│   Downloading requests_ntlm-1.1.0-py2.py3-none-any.whl (5.7 kB)
│ Collecting requests>=2.19
│   Downloading requests-2.24.0-py2.py3-none-any.whl (61 kB)
│ Collecting nest-asyncio!=1.1.0,>=1.0.0
│   Downloading nest_asyncio-1.3.3-py3-none-any.whl (4.7 kB)
│ Requirement already satisfied: setuptools>=40.1.0 in /home/pkgeval/.local/lib/python3.6/site-packages (from qiskit-ignis==0.3.0->qiskit==0.19.2) (49.1.0)
│ Collecting scikit-learn>=0.20.0
│   Downloading scikit_learn-0.23.1-cp36-cp36m-manylinux1_x86_64.whl (6.8 MB)
│ Collecting pyscf; sys_platform != "win32"
│   Downloading pyscf-1.7.3-cp36-cp36m-manylinux1_x86_64.whl (26.0 MB)
│ Collecting dlx
│   Downloading dlx-1.0.4.tar.gz (5.5 kB)
│ Collecting docplex
│   Downloading docplex-2.14.186.tar.gz (572 kB)
│ Collecting h5py
│   Downloading h5py-2.10.0-cp36-cp36m-manylinux1_x86_64.whl (2.9 MB)
│ Collecting fastdtw
│   Downloading fastdtw-0.3.4.tar.gz (133 kB)
│ Collecting quandl
│   Downloading Quandl-3.5.0-py2.py3-none-any.whl (25 kB)
│ Collecting decorator>=4.3.0
│   Downloading decorator-4.4.2-py2.py3-none-any.whl (9.2 kB)
│ Requirement already satisfied: six>=1.5 in /usr/lib/python3/dist-packages (from python-dateutil>=2.8.0->qiskit-terra==0.14.1->qiskit==0.19.2) (1.11.0)
│ Collecting mpmath>=0.19
│   Downloading mpmath-1.1.0.tar.gz (512 kB)
│ Collecting attrs>=17.4.0
│   Downloading attrs-19.3.0-py2.py3-none-any.whl (39 kB)
│ Collecting pyrsistent>=0.14.0
│   Downloading pyrsistent-0.16.0.tar.gz (108 kB)
│ Collecting importlib-metadata; python_version < "3.8"
│   Downloading importlib_metadata-1.7.0-py2.py3-none-any.whl (31 kB)
│ Collecting cryptography>=1.3
│   Downloading cryptography-2.9.2-cp35-abi3-manylinux2010_x86_64.whl (2.7 MB)
│ Collecting ntlm-auth>=1.0.2
│   Downloading ntlm_auth-1.5.0-py2.py3-none-any.whl (29 kB)
│ Collecting chardet<4,>=3.0.2
│   Downloading chardet-3.0.4-py2.py3-none-any.whl (133 kB)
│ Collecting certifi>=2017.4.17
│   Downloading certifi-2020.6.20-py2.py3-none-any.whl (156 kB)
│ Collecting idna<3,>=2.5
│   Downloading idna-2.10-py2.py3-none-any.whl (58 kB)
│ Collecting threadpoolctl>=2.0.0
│   Downloading threadpoolctl-2.1.0-py3-none-any.whl (12 kB)
│ Collecting joblib>=0.11
│   Downloading joblib-0.16.0-py3-none-any.whl (300 kB)
│ Collecting inflection>=0.3.1
│   Downloading inflection-0.5.0-py2.py3-none-any.whl (5.8 kB)
│ Collecting pandas>=0.14
│   Downloading pandas-1.0.5-cp36-cp36m-manylinux1_x86_64.whl (10.1 MB)
│ Collecting more-itertools
│   Downloading more_itertools-8.4.0-py3-none-any.whl (43 kB)
│ Collecting zipp>=0.5
│   Downloading zipp-3.1.0-py3-none-any.whl (4.9 kB)
│ Collecting cffi!=1.11.3,>=1.8
│   Downloading cffi-1.14.0-cp36-cp36m-manylinux1_x86_64.whl (399 kB)
│ Requirement already satisfied: pytz>=2017.2 in /usr/lib/python3/dist-packages (from pandas>=0.14->quandl->qiskit-aqua==0.7.1->qiskit==0.19.2) (2018.3)
│ Collecting pycparser
│   Downloading pycparser-2.20-py2.py3-none-any.whl (112 kB)
│ Building wheels for collected packages: qiskit, pylatexenc, psutil, python-constraint, dill, marshmallow-polyfield, dlx, docplex, fastdtw, mpmath, pyrsistent
│   Building wheel for qiskit (setup.py): started
│   Building wheel for qiskit (setup.py): finished with status 'done'
│   Created wheel for qiskit: filename=qiskit-0.19.2-py3-none-any.whl size=2893 sha256=dcd2f8b4cd2c9e9832fcee8d870350a6d2271d3ce52a7ed43bc331bdc37bfab6
│   Stored in directory: /home/pkgeval/.cache/pip/wheels/13/dd/a0/e61097fc6b88bd6bfbb207094708cb57c865ddfe1df1b9bf17
│   Building wheel for pylatexenc (setup.py): started
│   Building wheel for pylatexenc (setup.py): finished with status 'done'
│   Created wheel for pylatexenc: filename=pylatexenc-2.1-py3-none-any.whl size=114984 sha256=4db13dc5198eea00dd4737cc16e21fe0bd62c44ff3415903136a8ae48837c15a
│   Stored in directory: /home/pkgeval/.cache/pip/wheels/10/c7/8f/f3472a55a64608f880e1fe8133c3e7b0a9afa2ff2e3052ecc4
│   Building wheel for psutil (setup.py): started
│   Building wheel for psutil (setup.py): finished with status 'error'
│   ERROR: Command errored out with exit status 1:
│    command: /usr/bin/python3 -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '"'"'/tmp/pip-install-o1493fwa/psutil/setup.py'"'"'; __file__='"'"'/tmp/pip-install-o1493fwa/psutil/setup.py'"'"';f=getattr(tokenize, '"'"'open'"'"', open)(__file__);code=f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' bdist_wheel -d /tmp/pip-wheel-5jc3c6tq
│        cwd: /tmp/pip-install-o1493fwa/psutil/
│   Complete output (44 lines):
│   running bdist_wheel
│   running build
│   running build_py
│   creating build
│   creating build/lib.linux-x86_64-3.6
│   creating build/lib.linux-x86_64-3.6/psutil
│   copying psutil/_pswindows.py -> build/lib.linux-x86_64-3.6/psutil
│   copying psutil/_psbsd.py -> build/lib.linux-x86_64-3.6/psutil
│   copying psutil/_compat.py -> build/lib.linux-x86_64-3.6/psutil
│   copying psutil/_common.py -> build/lib.linux-x86_64-3.6/psutil
│   copying psutil/_psposix.py -> build/lib.linux-x86_64-3.6/psutil
│   copying psutil/__init__.py -> build/lib.linux-x86_64-3.6/psutil
│   copying psutil/_psaix.py -> build/lib.linux-x86_64-3.6/psutil
│   copying psutil/_pslinux.py -> build/lib.linux-x86_64-3.6/psutil
│   copying psutil/_pssunos.py -> build/lib.linux-x86_64-3.6/psutil
│   copying psutil/_psosx.py -> build/lib.linux-x86_64-3.6/psutil
│   creating build/lib.linux-x86_64-3.6/psutil/tests
│   copying psutil/tests/test_aix.py -> build/lib.linux-x86_64-3.6/psutil/tests
│   copying psutil/tests/test_system.py -> build/lib.linux-x86_64-3.6/psutil/tests
│   copying psutil/tests/test_bsd.py -> build/lib.linux-x86_64-3.6/psutil/tests
│   copying psutil/tests/test_connections.py -> build/lib.linux-x86_64-3.6/psutil/tests
│   copying psutil/tests/test_unicode.py -> build/lib.linux-x86_64-3.6/psutil/tests
│   copying psutil/tests/test_posix.py -> build/lib.linux-x86_64-3.6/psutil/tests
│   copying psutil/tests/test_windows.py -> build/lib.linux-x86_64-3.6/psutil/tests
│   copying psutil/tests/test_misc.py -> build/lib.linux-x86_64-3.6/psutil/tests
│   copying psutil/tests/test_sunos.py -> build/lib.linux-x86_64-3.6/psutil/tests
│   copying psutil/tests/__init__.py -> build/lib.linux-x86_64-3.6/psutil/tests
│   copying psutil/tests/test_memory_leaks.py -> build/lib.linux-x86_64-3.6/psutil/tests
│   copying psutil/tests/test_osx.py -> build/lib.linux-x86_64-3.6/psutil/tests
│   copying psutil/tests/test_process.py -> build/lib.linux-x86_64-3.6/psutil/tests
│   copying psutil/tests/test_linux.py -> build/lib.linux-x86_64-3.6/psutil/tests
│   copying psutil/tests/__main__.py -> build/lib.linux-x86_64-3.6/psutil/tests
│   copying psutil/tests/test_contracts.py -> build/lib.linux-x86_64-3.6/psutil/tests
│   copying psutil/tests/runner.py -> build/lib.linux-x86_64-3.6/psutil/tests
│   running build_ext
│   building 'psutil._psutil_linux' extension
│   creating build/temp.linux-x86_64-3.6
│   creating build/temp.linux-x86_64-3.6/psutil
│   x86_64-linux-gnu-gcc -pthread -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -DPSUTIL_POSIX=1 -DPSUTIL_SIZEOF_PID_T=4 -DPSUTIL_VERSION=570 -DPSUTIL_LINUX=1 -I/usr/include/python3.6m -c psutil/_psutil_common.c -o build/temp.linux-x86_64-3.6/psutil/_psutil_common.o
│   psutil/_psutil_common.c:9:10: fatal error: Python.h: No such file or directory
│    #include <Python.h>
│             ^~~~~~~~~~
│   compilation terminated.
│   error: command 'x86_64-linux-gnu-gcc' failed with exit status 1
│   ----------------------------------------
│   ERROR: Failed building wheel for psutil
│   Running setup.py clean for psutil
│   Building wheel for python-constraint (setup.py): started
│   Building wheel for python-constraint (setup.py): finished with status 'done'
│   Created wheel for python-constraint: filename=python_constraint-1.4.0-py2.py3-none-any.whl size=24080 sha256=6e161100d6f795d20a3ef76b559e2480b37503e288fb054a87b01c9d8f3a1c16
│   Stored in directory: /home/pkgeval/.cache/pip/wheels/c2/e2/65/6222764e3e5b677acdb04b592abab7e15140a70baace656d81
│   Building wheel for dill (setup.py): started
│   Building wheel for dill (setup.py): finished with status 'done'
│   Created wheel for dill: filename=dill-0.3.2-py3-none-any.whl size=78912 sha256=0e9f582b832530e75d1b8bc20c31c55e571f78cd674223e6293720a855818a19
│   Stored in directory: /home/pkgeval/.cache/pip/wheels/02/49/cf/660924cd9bc5fcddc3a0246fe39800c83028d3ccea244de352
│   Building wheel for marshmallow-polyfield (setup.py): started
│   Building wheel for marshmallow-polyfield (setup.py): finished with status 'done'
│   Created wheel for marshmallow-polyfield: filename=marshmallow_polyfield-5.9-py3-none-any.whl size=8535 sha256=8a66465aab9a64d8040860ae806dec799b089de18db84239daa99989b4c7a55c
│   Stored in directory: /home/pkgeval/.cache/pip/wheels/9a/54/a7/4e0d56296d25c6eae6b1f213db626d8a4828228406abb73918
│   Building wheel for dlx (setup.py): started
│   Building wheel for dlx (setup.py): finished with status 'done'
│   Created wheel for dlx: filename=dlx-1.0.4-py3-none-any.whl size=5709 sha256=afc81c3449bd2e6e5abd3d74ae26e6316d9be0c0379e6ad1532dc93af50f7b03
│   Stored in directory: /home/pkgeval/.cache/pip/wheels/ad/a3/52/859d389366d76e9e371e5a2dabefde5da7678c0032f008ca0a
│   Building wheel for docplex (setup.py): started
│   Building wheel for docplex (setup.py): finished with status 'done'
│   Created wheel for docplex: filename=docplex-2.14.186-py3-none-any.whl size=634441 sha256=76f687ff1c3e2ffdd73252d2cce1ebce7fecafb051344ef9ee2a4afdf9106432
│   Stored in directory: /home/pkgeval/.cache/pip/wheels/af/8a/77/21b87b28bbef8aeea189643cb281511d584d1f30e57378dd9c
│   Building wheel for fastdtw (setup.py): started
│   Building wheel for fastdtw (setup.py): finished with status 'done'
│   Created wheel for fastdtw: filename=fastdtw-0.3.4-py3-none-any.whl size=3589 sha256=d74303124d81cf945b339c5d1b92a59f9162b68f863ffe901e5fe55139f6ed82
│   Stored in directory: /home/pkgeval/.cache/pip/wheels/50/66/7a/7c98f31ea8ecc3a04a5b20ec6b48fbdf02c899034e95cc1ede
│   Building wheel for mpmath (setup.py): started
│   Building wheel for mpmath (setup.py): finished with status 'done'
│   Created wheel for mpmath: filename=mpmath-1.1.0-py3-none-any.whl size=532239 sha256=f397ad6b214130164413764a2d421f213a3485a916df246eb290a8a881cabdb3
│   Stored in directory: /home/pkgeval/.cache/pip/wheels/e8/38/69/aa17553ad31f09ff5fa44c8a1a6c5b47e7c9261e9c7c16b9fb
│   Building wheel for pyrsistent (setup.py): started
│   Building wheel for pyrsistent (setup.py): finished with status 'done'
│   Created wheel for pyrsistent: filename=pyrsistent-0.16.0-cp36-cp36m-linux_x86_64.whl size=56582 sha256=a5c544c31f6f30efd55fead7b60224ff76350b39c3e4589e181906312c79c4f5
│   Stored in directory: /home/pkgeval/.cache/pip/wheels/d1/8a/1c/32ab9017418a2c64e4fbaf503c08648bed2f8eb311b869a464
│ Successfully built qiskit pylatexenc python-constraint dill marshmallow-polyfield dlx docplex fastdtw mpmath pyrsistent
│ Failed to build psutil
│ Installing collected packages: psutil, python-constraint, decorator, networkx, ply, retworkx, numpy, scipy, fastjsonschema, python-dateutil, mpmath, sympy, attrs, pyrsistent, zipp, importlib-metadata, jsonschema, marshmallow, dill, marshmallow-polyfield, qiskit-terra, cython, pybind11, qiskit-aer, websockets, urllib3, pycparser, cffi, cryptography, chardet, certifi, idna, requests, ntlm-auth, requests-ntlm, nest-asyncio, qiskit-ibmq-provider, qiskit-ignis, threadpoolctl, joblib, scikit-learn, h5py, pyscf, dlx, docplex, fastdtw, inflection, pandas, more-itertools, quandl, qiskit-aqua, qiskit, pylatexenc
│     Running setup.py install for psutil: started
│     Running setup.py install for psutil: finished with status 'error'
│     ERROR: Command errored out with exit status 1:
│      command: /usr/bin/python3 -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '"'"'/tmp/pip-install-o1493fwa/psutil/setup.py'"'"'; __file__='"'"'/tmp/pip-install-o1493fwa/psutil/setup.py'"'"';f=getattr(tokenize, '"'"'open'"'"', open)(__file__);code=f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' install --record /tmp/pip-record-tcqk7rl0/install-record.txt --single-version-externally-managed --user --prefix= --compile --install-headers /home/pkgeval/.local/include/python3.6m/psutil
│          cwd: /tmp/pip-install-o1493fwa/psutil/
│     Complete output (44 lines):
│     running install
│     running build
│     running build_py
│     creating build
│     creating build/lib.linux-x86_64-3.6
│     creating build/lib.linux-x86_64-3.6/psutil
│     copying psutil/_pswindows.py -> build/lib.linux-x86_64-3.6/psutil
│     copying psutil/_psbsd.py -> build/lib.linux-x86_64-3.6/psutil
│     copying psutil/_compat.py -> build/lib.linux-x86_64-3.6/psutil
│     copying psutil/_common.py -> build/lib.linux-x86_64-3.6/psutil
│     copying psutil/_psposix.py -> build/lib.linux-x86_64-3.6/psutil
│     copying psutil/__init__.py -> build/lib.linux-x86_64-3.6/psutil
│     copying psutil/_psaix.py -> build/lib.linux-x86_64-3.6/psutil
│     copying psutil/_pslinux.py -> build/lib.linux-x86_64-3.6/psutil
│     copying psutil/_pssunos.py -> build/lib.linux-x86_64-3.6/psutil
│     copying psutil/_psosx.py -> build/lib.linux-x86_64-3.6/psutil
│     creating build/lib.linux-x86_64-3.6/psutil/tests
│     copying psutil/tests/test_aix.py -> build/lib.linux-x86_64-3.6/psutil/tests
│     copying psutil/tests/test_system.py -> build/lib.linux-x86_64-3.6/psutil/tests
│     copying psutil/tests/test_bsd.py -> build/lib.linux-x86_64-3.6/psutil/tests
│     copying psutil/tests/test_connections.py -> build/lib.linux-x86_64-3.6/psutil/tests
│     copying psutil/tests/test_unicode.py -> build/lib.linux-x86_64-3.6/psutil/tests
│     copying psutil/tests/test_posix.py -> build/lib.linux-x86_64-3.6/psutil/tests
│     copying psutil/tests/test_windows.py -> build/lib.linux-x86_64-3.6/psutil/tests
│     copying psutil/tests/test_misc.py -> build/lib.linux-x86_64-3.6/psutil/tests
│     copying psutil/tests/test_sunos.py -> build/lib.linux-x86_64-3.6/psutil/tests
│     copying psutil/tests/__init__.py -> build/lib.linux-x86_64-3.6/psutil/tests
│     copying psutil/tests/test_memory_leaks.py -> build/lib.linux-x86_64-3.6/psutil/tests
│     copying psutil/tests/test_osx.py -> build/lib.linux-x86_64-3.6/psutil/tests
│     copying psutil/tests/test_process.py -> build/lib.linux-x86_64-3.6/psutil/tests
│     copying psutil/tests/test_linux.py -> build/lib.linux-x86_64-3.6/psutil/tests
│     copying psutil/tests/__main__.py -> build/lib.linux-x86_64-3.6/psutil/tests
│     copying psutil/tests/test_contracts.py -> build/lib.linux-x86_64-3.6/psutil/tests
│     copying psutil/tests/runner.py -> build/lib.linux-x86_64-3.6/psutil/tests
│     running build_ext
│     building 'psutil._psutil_linux' extension
│     creating build/temp.linux-x86_64-3.6
│     creating build/temp.linux-x86_64-3.6/psutil
│     x86_64-linux-gnu-gcc -pthread -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -DPSUTIL_POSIX=1 -DPSUTIL_SIZEOF_PID_T=4 -DPSUTIL_VERSION=570 -DPSUTIL_LINUX=1 -I/usr/include/python3.6m -c psutil/_psutil_common.c -o build/temp.linux-x86_64-3.6/psutil/_psutil_common.o
│     psutil/_psutil_common.c:9:10: fatal error: Python.h: No such file or directory
│      #include <Python.h>
│               ^~~~~~~~~~
│     compilation terminated.
│     error: command 'x86_64-linux-gnu-gcc' failed with exit status 1
│     ----------------------------------------
│ ERROR: Command errored out with exit status 1: /usr/bin/python3 -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '"'"'/tmp/pip-install-o1493fwa/psutil/setup.py'"'"'; __file__='"'"'/tmp/pip-install-o1493fwa/psutil/setup.py'"'"';f=getattr(tokenize, '"'"'open'"'"', open)(__file__);code=f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' install --record /tmp/pip-record-tcqk7rl0/install-record.txt --single-version-externally-managed --user --prefix= --compile --install-headers /home/pkgeval/.local/include/python3.6m/psutil Check the logs for full command output.
│ ERROR: LoadError: failed process: Process(`python3 -m pip install --user qiskit==0.19.2 pylatexenc==2.1`, ProcessExited(1)) [1]
│ 
│ Stacktrace:
│  [1] pipeline_error
│    @ ./process.jl:525 [inlined]
│  [2] run(::Cmd; wait::Bool)
│    @ Base ./process.jl:440
│  [3] run(::Cmd)
│    @ Base ./process.jl:438
│  [4] top-level scope
│    @ ~/.julia/packages/PicoQuant/Hr8xP/deps/build.jl:29
│  [5] include(fname::String)
│    @ Base.MainInclude ./client.jl:444
│  [6] top-level scope
│    @ none:5
│ in expression starting at /home/pkgeval/.julia/packages/PicoQuant/Hr8xP/deps/build.jl:29
│ Running build.jl for the PicoQuant package.
│ Pip not found on your sytstem. Downloading it.
│ Installing required python packages using pip
└ @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:936
    Testing PicoQuant
Status `/tmp/jl_KTZEFV/Project.toml`
  [c7e460c6] ArgParse v1.1.0
  [159f3aea] Cairo v1.0.3
  [34da2185] Compat v3.13.0
  [a81c6b42] Compose v0.8.2
  [864edb3b] DataStructures v0.17.19
  [e30172f5] Documenter v0.25.0
  [da5c29d0] EllipsisNotation v0.4.0
  [7a1cc6ca] FFTW v1.2.2
  [aa1b3936] GraphIO v0.5.0
  [a2cc645c] GraphPlot v0.4.2
  [f67ccb44] HDF5 v0.13.2
  [7073ff75] IJulia v1.21.2
  [682c06a0] JSON v0.21.0
  [093fc24a] LightGraphs v1.3.3
  [626554b9] MetaGraphs v0.6.5
  [fae87a5f] ParserCombinator v2.0.0
  [2db47837] PicoQuant v0.1.0
  [438e738f] PyCall v1.91.4
  [3c0b384b] QuantumInformation v0.4.6
  [6aa20fa7] TensorOperations v2.2.0
  [98d24dd4] TestSetExtensions v2.0.0
  [b4f28e30] TikzGraphs v1.1.0
  [37f6aa50] TikzPictures v3.1.0
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_KTZEFV/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [1520ce14] AbstractTrees v0.3.3
  [79e6a3ab] Adapt v1.1.0
  [c7e460c6] ArgParse v1.1.0
  [ec485272] ArnoldiMethod v0.0.4
  [7d9fca2a] Arpack v0.4.0
  [68821587] Arpack_jll v3.5.0+3
  [15f4f7f2] AutoHashEquals v0.2.0
  [6e4b80f9] BenchmarkTools v0.5.0
  [b99e7846] BinaryProvider v0.5.10
  [a74b3585] Blosc v0.7.0
  [0b7ba130] Blosc_jll v1.14.3+1
  [6e34b625] Bzip2_jll v1.0.6+2
  [fa961155] CEnum v0.3.0
  [3895d2a7] CUDAapi v4.0.0
  [c5f51814] CUDAdrv v6.3.0
  [be33ccc6] CUDAnative v3.2.0
  [159f3aea] Cairo v1.0.3
  [83423d85] Cairo_jll v1.16.0+4
  [da1fd8a2] CodeTracking v1.0.0
  [523fee87] CodecBzip2 v0.7.2
  [944b1d66] CodecZlib v0.7.0
  [3da002f7] ColorTypes v0.9.1
  [5ae59095] Colors v0.11.2
  [34da2185] Compat v3.13.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [a81c6b42] Compose v0.8.2
  [8f4d0f93] Conda v1.4.1
  [f65535da] Convex v0.13.3
  [adafc99b] CpuId v0.2.2
  [f68482b8] Cthulhu v1.2.0
  [3a865a2d] CuArrays v2.2.2
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.17.19
  [ab62b9b5] DeepDiffs v1.2.0
  [31c24e10] Distributions v0.23.4
  [ffbed154] DocStringExtensions v0.8.2
  [e30172f5] Documenter v0.25.0
  [da5c29d0] EllipsisNotation v0.4.0
  [2e619515] Expat_jll v2.2.7+3
  [e2ba6199] ExprTools v0.1.1
  [7a1cc6ca] FFTW v1.2.2
  [f5851436] FFTW_jll v3.3.9+5
  [5789e2e9] FileIO v1.3.0
  [1a297f60] FillArrays v0.8.12
  [53c48c17] FixedPointNumbers v0.7.1
  [1eca21be] FoldingTrees v1.0.0
  [a3f928ae] Fontconfig_jll v2.13.1+12
  [d7e528f0] FreeType2_jll v2.10.1+2
  [559328eb] FriBidi_jll v1.0.5+3
  [0c68f7d7] GPUArrays v3.4.1
  [61eb1bfa] GPUCompiler v0.2.0
  [78b55507] Gettext_jll v0.20.1+4
  [7746bdde] Glib_jll v2.59.0+2
  [aa1b3936] GraphIO v0.5.0
  [a2cc645c] GraphPlot v0.4.2
  [a2bd30eb] Graphics v1.0.2
  [3b182d85] Graphite2_jll v1.3.13+1
  [f67ccb44] HDF5 v0.13.2
  [0234f1f7] HDF5_jll v1.10.5+5
  [cd3eb016] HTTP v0.8.16
  [2e76f6c2] HarfBuzz_jll v2.6.1+5
  [7073ff75] IJulia v1.21.2
  [d25df0c9] Inflate v0.1.2
  [83e8ac13] IniFile v0.5.0
  [1d5cc7b8] IntelOpenMP_jll v2018.0.3+0
  [c8e1da08] IterTools v1.3.0
  [033835bb] JLD2 v0.1.13
  [682c06a0] JSON v0.21.0
  [7d188eb4] JSONSchema v0.3.0
  [929cbde3] LLVM v1.7.0
  [8ac3fa9e] LRUCache v1.1.0
  [dd4b983a] LZO_jll v2.10.0+1
  [b964fa9f] LaTeXStrings v1.1.0
  [e9f186c6] Libffi_jll v3.2.1+1
  [d4300ac3] Libgcrypt_jll v1.8.5+1
  [7add5ba3] Libgpg_error_jll v1.36.0+1
  [94ce4f54] Libiconv_jll v1.16.0+5
  [4b2f31a3] Libmount_jll v2.34.0+1
  [38a345b3] Libuuid_jll v2.34.0+4
  [093fc24a] LightGraphs v1.3.3
  [bdcacae8] LoopVectorization v0.8.13
  [5ced341a] Lz4_jll v1.9.2+0
  [856f044c] MKL_jll v2020.1.216+0
  [1914dd2f] MacroTools v0.5.5
  [b8f27783] MathOptInterface v0.9.14
  [fdba3010] MathProgBase v0.7.8
  [739be429] MbedTLS v1.0.2
  [c8ffd9c3] MbedTLS_jll v2.16.6+1
  [442fdcdd] Measures v0.3.1
  [626554b9] MetaGraphs v0.6.5
  [e1d29d7a] Missings v0.4.3
  [d8a4904e] MutableArithmetics v0.2.10
  [a6bfbf70] NNPACK_jll v2018.6.22+0
  [872c559c] NNlib v0.7.2
  [77ba4419] NaNMath v0.3.3
  [4d1e1d77] Nullables v1.0.0
  [6fe1bfb0] OffsetArrays v1.1.1
  [4536629a] OpenBLAS_jll v0.3.9+5
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.3.0
  [2f80f16e] PCRE_jll v8.42.0+2
  [90014a1f] PDMats v0.9.12
  [36c8627f] Pango_jll v1.42.4+8
  [fae87a5f] ParserCombinator v2.0.0
  [69de0a69] Parsers v1.0.7
  [2db47837] PicoQuant v0.1.0
  [30392449] Pixman_jll v0.38.4+2
  [438e738f] PyCall v1.91.4
  [1fd47b50] QuadGK v2.4.0
  [3c0b384b] QuantumInformation v0.4.6
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+1
  [c946c3f1] SCS v0.6.6
  [21efa798] SIMDPirates v0.8.13
  [476501e8] SLEEFPirates v0.5.4
  [699a6c99] SimpleTraits v0.9.2
  [b85f4697] SoftGlobalScope v1.0.10
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [2913bbd2] StatsBase v0.33.0
  [4c63d2b9] StatsFuns v0.9.5
  [5e0ebb24] Strided v1.0.1
  [6aa20fa7] TensorOperations v2.2.0
  [98d24dd4] TestSetExtensions v2.0.0
  [b718987f] TextWrap v1.0.1
  [b4f28e30] TikzGraphs v1.1.0
  [37f6aa50] TikzPictures v3.1.0
  [a759f4b9] TimerOutputs v0.5.6
  [3bb67fe8] TranscodingStreams v0.9.5
  [9d95972d] TupleTools v1.2.0
  [3a884ed6] UnPack v1.0.1
  [3d5dd08c] VectorizationBase v0.12.19
  [81def892] VersionParsing v1.2.0
  [02c8fc9c] XML2_jll v2.9.10+1
  [aed1982a] XSLT_jll v1.1.33+2
  [4f6342f7] Xorg_libX11_jll v1.6.9+2
  [0c0b7dd1] Xorg_libXau_jll v1.0.9+2
  [a3789734] Xorg_libXdmcp_jll v1.1.3+2
  [1082639a] Xorg_libXext_jll v1.3.4+2
  [ea2f1a96] Xorg_libXrender_jll v0.9.10+2
  [14d82f49] Xorg_libpthread_stubs_jll v0.1.0+1
  [c7cfdc94] Xorg_libxcb_jll v1.13.0+2
  [c5fb5394] Xorg_xtrans_jll v1.4.0+1
  [c2297ded] ZMQ v1.2.1
  [8f1865be] ZeroMQ_jll v4.3.2+4
  [a5390f91] ZipFile v0.9.2
  [83775a58] Zlib_jll v1.2.11+14
  [3161d3a3] Zstd_jll v1.4.5+0
  [b53b4c65] libpng_jll v1.6.37+3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [7b1f6079] FileWatching
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
WARNING: Compat.Test is deprecated, use Test instead.
  likely near /home/pkgeval/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:2

algorithms_tests: Test state preparation algorithm: Error During Test at /home/pkgeval/.julia/packages/PicoQuant/Hr8xP/test/algorithms_tests.jl:64
  Test threw exception
  Expression: begin
    qubits = 1
    circ = create_simple_preparation_circuit(qubits, 4, 42)
    ψ = get_statevector_using_picoquant(circ, big_endian = false)
    ψ′ = get_statevector_using_qiskit(circ, big_endian = false)
    overlap = ((a, b)->begin
                abs(transpose(conj.(a)) * b)
            end)
    overlap(ψ, ψ′) ≈ 1.0
end
  PyError (PyImport_ImportModule
  
  The Python package qiskit could not be found by pyimport. Usually this means
  that you did not install qiskit in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the qiskit module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the qiskit module, you can use `pyimport_conda("qiskit", PKG)`,
  where PKG is the Anaconda package the contains the module qiskit,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'qiskit'",)
  
  Stacktrace:
   [1] pyimport(name::String)
     @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] create_simple_preparation_circuit(qubits::Int64, depth::Int64, seed::Int64)
     @ PicoQuant ~/.julia/packages/PicoQuant/Hr8xP/src/algorithms.jl:43
   [3] top-level scope
     @ ~/.julia/packages/PicoQuant/Hr8xP/test/algorithms_tests.jl:64
   [4] top-level scope
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [5] top-level scope
     @ ~/.julia/packages/PicoQuant/Hr8xP/test/algorithms_tests.jl:64
  
Test state preparation algorithm: Error During Test at /home/pkgeval/.julia/packages/PicoQuant/Hr8xP/test/algorithms_tests.jl:77
  Test threw exception
  Expression: begin
    qubits = 3
    circ = create_simple_preparation_circuit(qubits, 4, 42)
    ψ = get_statevector_using_picoquant(circ, big_endian = false)
    ψ′ = get_statevector_using_qiskit(circ, big_endian = false)
    overlap = ((a, b)->begin
                abs(transpose(conj.(a)) * b)
            end)
    overlap(ψ, ψ′) ≈ 1.0
end
  PyError (PyImport_ImportModule
  
  The Python package qiskit could not be found by pyimport. Usually this means
  that you did not install qiskit in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the qiskit module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the qiskit module, you can use `pyimport_conda("qiskit", PKG)`,
  where PKG is the Anaconda package the contains the module qiskit,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'qiskit'",)
  
  Stacktrace:
   [1] pyimport(name::String)
     @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] create_simple_preparation_circuit(qubits::Int64, depth::Int64, seed::Int64)
     @ PicoQuant ~/.julia/packages/PicoQuant/Hr8xP/src/algorithms.jl:43
   [3] top-level scope
     @ ~/.julia/packages/PicoQuant/Hr8xP/test/algorithms_tests.jl:77
   [4] top-level scope
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [5] top-level scope
     @ ~/.julia/packages/PicoQuant/Hr8xP/test/algorithms_tests.jl:64
  
Small QFT circuit test: Error During Test at /home/pkgeval/.julia/packages/PicoQuant/Hr8xP/test/algorithms_tests.jl:92
  Test threw exception
  Expression: begin
    n = 3
    prep_circ = create_simple_preparation_circuit(n, 3, 43)
    qft_circ = create_qft_circuit(n)
    full_circ = prep_circ.combine(qft_circ)
    qft_input = get_statevector_using_qiskit(prep_circ, big_endian = false)
    ref_output = ifft(qft_input)
    norm = (x->begin
                x ./ sqrt(sum(x .* conj.(x)))
            end)
    ref_output = norm(ref_output)
    ψ = get_statevector_using_picoquant(full_circ)
    overlap = ((a, b)->begin
                abs(transpose(conj.(a)) * b)
            end)
    overlap(ψ, ref_output) ≈ 1.0
end
  PyError (PyImport_ImportModule
  
  The Python package qiskit could not be found by pyimport. Usually this means
  that you did not install qiskit in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the qiskit module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the qiskit module, you can use `pyimport_conda("qiskit", PKG)`,
  where PKG is the Anaconda package the contains the module qiskit,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'qiskit'",)
  
  Stacktrace:
   [1] pyimport(name::String)
     @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] create_simple_preparation_circuit(qubits::Int64, depth::Int64, seed::Int64)
     @ PicoQuant ~/.julia/packages/PicoQuant/Hr8xP/src/algorithms.jl:43
   [3] top-level scope
     @ ~/.julia/packages/PicoQuant/Hr8xP/test/algorithms_tests.jl:92
   [4] top-level scope
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [5] top-level scope
     @ ~/.julia/packages/PicoQuant/Hr8xP/test/algorithms_tests.jl:92
  
Larger QFT circuit test: Error During Test at /home/pkgeval/.julia/packages/PicoQuant/Hr8xP/test/algorithms_tests.jl:115
  Test threw exception
  Expression: begin
    n = 8
    prep_circ = create_simple_preparation_circuit(n, 3, 43)
    qft_circ = create_qft_circuit(n)
    full_circ = prep_circ.combine(qft_circ)
    qft_input = get_statevector_using_qiskit(prep_circ, big_endian = false)
    ref_output = ifft(qft_input)
    norm = (x->begin
                x ./ sqrt(sum(x .* conj.(x)))
            end)
    ref_output = norm(ref_output)
    ψ = get_statevector_using_picoquant(full_circ)
    overlap = ((a, b)->begin
                abs(transpose(conj.(a)) * b)
            end)
    overlap(ψ, ref_output) ≈ 1.0
end
  PyError (PyImport_ImportModule
  
  The Python package qiskit could not be found by pyimport. Usually this means
  that you did not install qiskit in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the qiskit module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the qiskit module, you can use `pyimport_conda("qiskit", PKG)`,
  where PKG is the Anaconda package the contains the module qiskit,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'qiskit'",)
  
  Stacktrace:
   [1] pyimport(name::String)
     @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] create_simple_preparation_circuit(qubits::Int64, depth::Int64, seed::Int64)
     @ PicoQuant ~/.julia/packages/PicoQuant/Hr8xP/src/algorithms.jl:43
   [3] top-level scope
     @ ~/.julia/packages/PicoQuant/Hr8xP/test/algorithms_tests.jl:115
   [4] top-level scope
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [5] top-level scope
     @ ~/.julia/packages/PicoQuant/Hr8xP/test/algorithms_tests.jl:115
  

bin_tests: 
layer1_tests: Test executing dsl commands from file: Error During Test at /home/pkgeval/.julia/packages/PicoQuant/Hr8xP/test/layer1_tests.jl:3
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package qiskit could not be found by pyimport. Usually this means
  that you did not install qiskit in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the qiskit module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the qiskit module, you can use `pyimport_conda("qiskit", PKG)`,
  where PKG is the Anaconda package the contains the module qiskit,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'qiskit'",)
  
  Stacktrace:
    [1] pyimport(name::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
    [2] load_qasm_as_circuit(qasm_str::String)
      @ PicoQuant ~/.julia/packages/PicoQuant/Hr8xP/src/layer3.jl:394
    [3] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer1_tests.jl:11
    [4] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
    [5] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer1_tests.jl:4
    [6] include(mod::Module, _path::String)
      @ Base ./Base.jl:374
    [7] top-level scope
      @ ~/.julia/packages/TestSetExtensions/lB7xG/src/TestSetExtensions.jl:40
    [8] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
    [9] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [10] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
   [11] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [12] top-level scope
      @ none:6
   [13] eval(m::Module, e::Any)
      @ Core ./boot.jl:340
   [14] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [15] _start()
      @ Base ./client.jl:485
  

layer2_tests: Test building, saving and loading contraction plans with DSLBackend: Error During Test at /home/pkgeval/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:28
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package qiskit could not be found by pyimport. Usually this means
  that you did not install qiskit in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the qiskit module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the qiskit module, you can use `pyimport_conda("qiskit", PKG)`,
  where PKG is the Anaconda package the contains the module qiskit,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'qiskit'",)
  
  Stacktrace:
    [1] pyimport(name::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
    [2] load_qasm_as_circuit(qasm_str::String)
      @ PicoQuant ~/.julia/packages/PicoQuant/Hr8xP/src/layer3.jl:394
    [3] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:39
    [4] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
    [5] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:30
    [6] include(mod::Module, _path::String)
      @ Base ./Base.jl:374
    [7] top-level scope
      @ ~/.julia/packages/TestSetExtensions/lB7xG/src/TestSetExtensions.jl:40
    [8] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
    [9] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [10] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
   [11] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [12] top-level scope
      @ none:6
   [13] eval(m::Module, e::Any)
      @ Core ./boot.jl:340
   [14] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [15] _start()
      @ Base ./client.jl:485
  
Test contract functions for DSLBackend: Error During Test at /home/pkgeval/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:77
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package qiskit could not be found by pyimport. Usually this means
  that you did not install qiskit in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the qiskit module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the qiskit module, you can use `pyimport_conda("qiskit", PKG)`,
  where PKG is the Anaconda package the contains the module qiskit,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'qiskit'",)
  
  Stacktrace:
    [1] pyimport(name::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
    [2] load_qasm_as_circuit(qasm_str::String)
      @ PicoQuant ~/.julia/packages/PicoQuant/Hr8xP/src/layer3.jl:394
    [3] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:89
    [4] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
    [5] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:80
    [6] include(mod::Module, _path::String)
      @ Base ./Base.jl:374
    [7] top-level scope
      @ ~/.julia/packages/TestSetExtensions/lB7xG/src/TestSetExtensions.jl:40
    [8] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
    [9] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [10] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
   [11] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [12] top-level scope
      @ none:6
   [13] eval(m::Module, e::Any)
      @ Core ./boot.jl:340
   [14] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [15] _start()
      @ Base ./client.jl:485
  
Test full wavefunction contraction for DSLBackend: Error During Test at /home/pkgeval/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:146
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package qiskit could not be found by pyimport. Usually this means
  that you did not install qiskit in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the qiskit module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the qiskit module, you can use `pyimport_conda("qiskit", PKG)`,
  where PKG is the Anaconda package the contains the module qiskit,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'qiskit'",)
  
  Stacktrace:
    [1] pyimport(name::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
    [2] load_qasm_as_circuit(qasm_str::String)
      @ PicoQuant ~/.julia/packages/PicoQuant/Hr8xP/src/layer3.jl:394
    [3] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:160
    [4] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
    [5] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:149
    [6] include(mod::Module, _path::String)
      @ Base ./Base.jl:374
    [7] top-level scope
      @ ~/.julia/packages/TestSetExtensions/lB7xG/src/TestSetExtensions.jl:40
    [8] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
    [9] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [10] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
   [11] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [12] top-level scope
      @ none:6
   [13] eval(m::Module, e::Any)
      @ Core ./boot.jl:340
   [14] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [15] _start()
      @ Base ./client.jl:485
  
test set: Error During Test at /home/pkgeval/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:192
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package qiskit could not be found by pyimport. Usually this means
  that you did not install qiskit in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the qiskit module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the qiskit module, you can use `pyimport_conda("qiskit", PKG)`,
  where PKG is the Anaconda package the contains the module qiskit,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'qiskit'",)
  
  Stacktrace:
    [1] pyimport(name::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
    [2] load_qasm_as_circuit(qasm_str::String)
      @ PicoQuant ~/.julia/packages/PicoQuant/Hr8xP/src/layer3.jl:394
    [3] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:210
    [4] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
    [5] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:194
    [6] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
    [7] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:180
    [8] include(mod::Module, _path::String)
      @ Base ./Base.jl:374
    [9] top-level scope
      @ ~/.julia/packages/TestSetExtensions/lB7xG/src/TestSetExtensions.jl:40
   [10] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
   [11] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [12] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
   [13] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [14] top-level scope
      @ none:6
   [15] eval(m::Module, e::Any)
      @ Core ./boot.jl:340
   [16] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [17] _start()
      @ Base ./client.jl:485
  
Test tensor network contraction with MPS methods for DSLBackend: Error During Test at /home/pkgeval/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:245
  Test threw exception
  Expression: begin
    try
        (backend_funcs[:init])()
        n = 5
        circ = create_ghz_preparation_circuit(n)
        tn = convert_qiskit_circ_to_network(circ, decompose = true, transpile = true)
        add_input!(tn, "0" ^ n)
        mps_nodes = contract_mps_tensor_network_circuit!(tn)
        calculate_mps_amplitudes!(tn, mps_nodes)
        (backend_funcs[:execute])()
        ref_output = zeros(ComplexF64, 2 ^ n)
        ref_output[[1, end]] .= 1 / sqrt(2)
        load_tensor_data(backend, :result) ≈ ref_output
    finally
        (backend_funcs[:finalise])()
    end
end
  PyError (PyImport_ImportModule
  
  The Python package qiskit could not be found by pyimport. Usually this means
  that you did not install qiskit in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the qiskit module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the qiskit module, you can use `pyimport_conda("qiskit", PKG)`,
  where PKG is the Anaconda package the contains the module qiskit,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'qiskit'",)
  
  Stacktrace:
   [1] pyimport(name::String)
     @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] create_ghz_preparation_circuit(qubits::Int64)
     @ PicoQuant ~/.julia/packages/PicoQuant/Hr8xP/src/algorithms.jl:73
   [3] top-level scope
     @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:245
   [4] top-level scope
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [5] top-level scope
     @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:245
  
Test building, saving and loading contraction plans with InteractiveBackend: Error During Test at /home/pkgeval/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:28
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package qiskit could not be found by pyimport. Usually this means
  that you did not install qiskit in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the qiskit module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the qiskit module, you can use `pyimport_conda("qiskit", PKG)`,
  where PKG is the Anaconda package the contains the module qiskit,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'qiskit'",)
  
  Stacktrace:
    [1] pyimport(name::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
    [2] load_qasm_as_circuit(qasm_str::String)
      @ PicoQuant ~/.julia/packages/PicoQuant/Hr8xP/src/layer3.jl:394
    [3] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:39
    [4] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
    [5] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:30
    [6] include(mod::Module, _path::String)
      @ Base ./Base.jl:374
    [7] top-level scope
      @ ~/.julia/packages/TestSetExtensions/lB7xG/src/TestSetExtensions.jl:40
    [8] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
    [9] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [10] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
   [11] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [12] top-level scope
      @ none:6
   [13] eval(m::Module, e::Any)
      @ Core ./boot.jl:340
   [14] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [15] _start()
      @ Base ./client.jl:485
  
Test contract functions for InteractiveBackend: Error During Test at /home/pkgeval/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:77
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package qiskit could not be found by pyimport. Usually this means
  that you did not install qiskit in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the qiskit module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the qiskit module, you can use `pyimport_conda("qiskit", PKG)`,
  where PKG is the Anaconda package the contains the module qiskit,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'qiskit'",)
  
  Stacktrace:
    [1] pyimport(name::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
    [2] load_qasm_as_circuit(qasm_str::String)
      @ PicoQuant ~/.julia/packages/PicoQuant/Hr8xP/src/layer3.jl:394
    [3] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:89
    [4] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
    [5] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:80
    [6] include(mod::Module, _path::String)
      @ Base ./Base.jl:374
    [7] top-level scope
      @ ~/.julia/packages/TestSetExtensions/lB7xG/src/TestSetExtensions.jl:40
    [8] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
    [9] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [10] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
   [11] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [12] top-level scope
      @ none:6
   [13] eval(m::Module, e::Any)
      @ Core ./boot.jl:340
   [14] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [15] _start()
      @ Base ./client.jl:485
  
Test full wavefunction contraction for InteractiveBackend: Error During Test at /home/pkgeval/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:146
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package qiskit could not be found by pyimport. Usually this means
  that you did not install qiskit in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the qiskit module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the qiskit module, you can use `pyimport_conda("qiskit", PKG)`,
  where PKG is the Anaconda package the contains the module qiskit,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'qiskit'",)
  
  Stacktrace:
    [1] pyimport(name::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
    [2] load_qasm_as_circuit(qasm_str::String)
      @ PicoQuant ~/.julia/packages/PicoQuant/Hr8xP/src/layer3.jl:394
    [3] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:160
    [4] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
    [5] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:149
    [6] include(mod::Module, _path::String)
      @ Base ./Base.jl:374
    [7] top-level scope
      @ ~/.julia/packages/TestSetExtensions/lB7xG/src/TestSetExtensions.jl:40
    [8] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
    [9] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [10] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
   [11] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [12] top-level scope
      @ none:6
   [13] eval(m::Module, e::Any)
      @ Core ./boot.jl:340
   [14] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [15] _start()
      @ Base ./client.jl:485
  
test set: Error During Test at /home/pkgeval/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:192
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package qiskit could not be found by pyimport. Usually this means
  that you did not install qiskit in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the qiskit module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the qiskit module, you can use `pyimport_conda("qiskit", PKG)`,
  where PKG is the Anaconda package the contains the module qiskit,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'qiskit'",)
  
  Stacktrace:
    [1] pyimport(name::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
    [2] load_qasm_as_circuit(qasm_str::String)
      @ PicoQuant ~/.julia/packages/PicoQuant/Hr8xP/src/layer3.jl:394
    [3] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:210
    [4] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
    [5] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:194
    [6] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
    [7] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:180
    [8] include(mod::Module, _path::String)
      @ Base ./Base.jl:374
    [9] top-level scope
      @ ~/.julia/packages/TestSetExtensions/lB7xG/src/TestSetExtensions.jl:40
   [10] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
   [11] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [12] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
   [13] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [14] top-level scope
      @ none:6
   [15] eval(m::Module, e::Any)
      @ Core ./boot.jl:340
   [16] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [17] _start()
      @ Base ./client.jl:485
  
Test tensor network contraction with MPS methods for InteractiveBackend: Error During Test at /home/pkgeval/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:245
  Test threw exception
  Expression: begin
    try
        (backend_funcs[:init])()
        n = 5
        circ = create_ghz_preparation_circuit(n)
        tn = convert_qiskit_circ_to_network(circ, decompose = true, transpile = true)
        add_input!(tn, "0" ^ n)
        mps_nodes = contract_mps_tensor_network_circuit!(tn)
        calculate_mps_amplitudes!(tn, mps_nodes)
        (backend_funcs[:execute])()
        ref_output = zeros(ComplexF64, 2 ^ n)
        ref_output[[1, end]] .= 1 / sqrt(2)
        load_tensor_data(backend, :result) ≈ ref_output
    finally
        (backend_funcs[:finalise])()
    end
end
  PyError (PyImport_ImportModule
  
  The Python package qiskit could not be found by pyimport. Usually this means
  that you did not install qiskit in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the qiskit module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the qiskit module, you can use `pyimport_conda("qiskit", PKG)`,
  where PKG is the Anaconda package the contains the module qiskit,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'qiskit'",)
  
  Stacktrace:
   [1] pyimport(name::String)
     @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] create_ghz_preparation_circuit(qubits::Int64)
     @ PicoQuant ~/.julia/packages/PicoQuant/Hr8xP/src/algorithms.jl:73
   [3] top-level scope
     @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:245
   [4] top-level scope
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [5] top-level scope
     @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer2_tests.jl:245
  

layer3_tests: Test loading and conversion of qasm: Error During Test at /home/pkgeval/.julia/packages/PicoQuant/Hr8xP/test/layer3_tests.jl:3
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package qiskit could not be found by pyimport. Usually this means
  that you did not install qiskit in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the qiskit module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the qiskit module, you can use `pyimport_conda("qiskit", PKG)`,
  where PKG is the Anaconda package the contains the module qiskit,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'qiskit'",)
  
  Stacktrace:
    [1] pyimport(name::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
    [2] load_qasm_as_circuit(qasm_str::String)
      @ PicoQuant ~/.julia/packages/PicoQuant/Hr8xP/src/layer3.jl:394
    [3] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer3_tests.jl:12
    [4] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
    [5] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer3_tests.jl:5
    [6] include(mod::Module, _path::String)
      @ Base ./Base.jl:374
    [7] top-level scope
      @ ~/.julia/packages/TestSetExtensions/lB7xG/src/TestSetExtensions.jl:40
    [8] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
    [9] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [10] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
   [11] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [12] top-level scope
      @ none:6
   [13] eval(m::Module, e::Any)
      @ Core ./boot.jl:340
   [14] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [15] _start()
      @ Base ./client.jl:485
  
Test gate addition with decomposition: Error During Test at /home/pkgeval/.julia/packages/PicoQuant/Hr8xP/test/layer3_tests.jl:69
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package qiskit could not be found by pyimport. Usually this means
  that you did not install qiskit in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the qiskit module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the qiskit module, you can use `pyimport_conda("qiskit", PKG)`,
  where PKG is the Anaconda package the contains the module qiskit,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'qiskit'",)
  
  Stacktrace:
    [1] pyimport(name::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
    [2] load_qasm_as_circuit(qasm_str::String)
      @ PicoQuant ~/.julia/packages/PicoQuant/Hr8xP/src/layer3.jl:394
    [3] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer3_tests.jl:77
    [4] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
    [5] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer3_tests.jl:70
    [6] include(mod::Module, _path::String)
      @ Base ./Base.jl:374
    [7] top-level scope
      @ ~/.julia/packages/TestSetExtensions/lB7xG/src/TestSetExtensions.jl:40
    [8] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
    [9] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [10] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
   [11] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [12] top-level scope
      @ none:6
   [13] eval(m::Module, e::Any)
      @ Core ./boot.jl:340
   [14] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [15] _start()
      @ Base ./client.jl:485
  
Test transpilation: Error During Test at /home/pkgeval/.julia/packages/PicoQuant/Hr8xP/test/layer3_tests.jl:86
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package qiskit could not be found by pyimport. Usually this means
  that you did not install qiskit in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the qiskit module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the qiskit module, you can use `pyimport_conda("qiskit", PKG)`,
  where PKG is the Anaconda package the contains the module qiskit,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'qiskit'",)
  
  Stacktrace:
    [1] pyimport(name::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
    [2] load_qasm_as_circuit(qasm_str::String)
      @ PicoQuant ~/.julia/packages/PicoQuant/Hr8xP/src/layer3.jl:394
    [3] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer3_tests.jl:93
    [4] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
    [5] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/layer3_tests.jl:87
    [6] include(mod::Module, _path::String)
      @ Base ./Base.jl:374
    [7] top-level scope
      @ ~/.julia/packages/TestSetExtensions/lB7xG/src/TestSetExtensions.jl:40
    [8] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
    [9] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [10] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
   [11] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [12] top-level scope
      @ none:6
   [13] eval(m::Module, e::Any)
      @ Core ./boot.jl:340
   [14] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [15] _start()
      @ Base ./client.jl:485
  

visualise_tests: Test contracting a network: Error During Test at /home/pkgeval/.julia/packages/PicoQuant/Hr8xP/test/visualise_tests.jl:3
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package qiskit could not be found by pyimport. Usually this means
  that you did not install qiskit in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the qiskit module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the qiskit module, you can use `pyimport_conda("qiskit", PKG)`,
  where PKG is the Anaconda package the contains the module qiskit,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'qiskit'",)
  
  Stacktrace:
    [1] pyimport(name::String)
      @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
    [2] load_qasm_as_circuit(qasm_str::String)
      @ PicoQuant ~/.julia/packages/PicoQuant/Hr8xP/src/layer3.jl:394
    [3] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/visualise_tests.jl:12
    [4] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
    [5] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/visualise_tests.jl:5
    [6] include(mod::Module, _path::String)
      @ Base ./Base.jl:374
    [7] top-level scope
      @ ~/.julia/packages/TestSetExtensions/lB7xG/src/TestSetExtensions.jl:40
    [8] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
    [9] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [10] top-level scope
      @ ~/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:6
   [11] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [12] top-level scope
      @ none:6
   [13] eval(m::Module, e::Any)
      @ Core ./boot.jl:340
   [14] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [15] _start()
      @ Base ./client.jl:485
  

Test Summary:                                                                 | Pass  Error  Total
All the tests                                                                 |    8     19     27
  Test state preparation algorithm                                            |           2      2
  Small QFT circuit test                                                      |           1      1
  Larger QFT circuit test                                                     |           1      1
  Test executing dsl commands from file                                       |           1      1
  Test tensor functions                                                       |    2             2
  Test building, saving and loading contraction plans with DSLBackend         |           1      1
  Test contract functions for DSLBackend                                      |           1      1
  Test full wavefunction contraction for DSLBackend                           |           1      1
  Test tensor chain compression for DSLBackend                                |    1      1      2
    test set                                                                  |           1      1
  Test tensor network contraction with MPS methods for DSLBackend             |           1      1
  Test building, saving and loading contraction plans with InteractiveBackend |           1      1
  Test contract functions for InteractiveBackend                              |           1      1
  Test full wavefunction contraction for InteractiveBackend                   |           1      1
  Test tensor chain compression for InteractiveBackend                        |    1      1      2
    test set                                                                  |           1      1
  Test tensor network contraction with MPS methods for InteractiveBackend     |           1      1
  Test loading and conversion of qasm                                         |           1      1
  Test tensor network data structure                                          |    3             3
  Test tensor decomposition                                                   |    1             1
  Test gate addition with decomposition                                       |           1      1
  Test transpilation                                                          |           1      1
  Test contracting a network                                                  |           1      1
ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 19 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/PicoQuant/Hr8xP/test/runtests.jl:5
ERROR: Package PicoQuant errored during testing
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1561
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:327
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:314
  [5] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#60
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:16
