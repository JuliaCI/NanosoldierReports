Julia Version 1.6.0-DEV.387
Commit e23635c619 (2020-07-07 16:42 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ── v0.3.1
  Installed Missings ─────────── v0.4.3
  Installed DataAPI ──────────── v1.3.0
  Installed Parsers ──────────── v1.0.7
  Installed OrderedCollections ─ v1.3.0
  Installed JSON ─────────────── v0.21.0
  Installed StatsBase ────────── v0.32.2
  Installed SimilaritySearch ─── v0.3.20
  Installed DataStructures ───── v0.17.19
Updating `~/.julia/environments/v1.6/Project.toml`
  [053f045d] + SimilaritySearch v0.3.20
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.17.19
  [682c06a0] + JSON v0.21.0
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.3.0
  [69de0a69] + Parsers v1.0.7
  [053f045d] + SimilaritySearch v0.3.20
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [de0858da] + Printf
  [9a3f8284] + Random
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [4ec0a83e] + Unicode
    Testing SimilaritySearch
Status `/tmp/jl_HDQfru/Project.toml`
  [864edb3b] DataStructures v0.17.19
  [682c06a0] JSON v0.21.0
  [053f045d] SimilaritySearch v0.3.20
  [2913bbd2] StatsBase v0.32.2
  [ade2ca70] Dates
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_HDQfru/Manifest.toml`
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.17.19
  [682c06a0] JSON v0.21.0
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.3.0
  [69de0a69] Parsers v1.0.7
  [053f045d] SimilaritySearch v0.3.20
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [de0858da] Printf
  [9a3f8284] Random
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
bit ops       |    3      3
res = KnnResult(4, 4, Item[Item(48, 0.0118944645f0), Item(43, 0.030779004f0), Item(16, 0.03874302f0), Item(1, 0.053984404f0)])
Vsorted = Item[Item(48, 0.0118944645f0), Item(43, 0.030779004f0), Item(16, 0.03874302f0), Item(1, 0.053984404f0)]
Test Summary: | Pass  Total
Result set    |    3      3
Test Summary: | Pass  Total
pairwise      |    1      1
(recall_lower_bound, dist) = (1.0, SimilaritySearch.l2_distance)
(dist, p) = (SimilaritySearch.l2_distance, PerformanceResult(1.0, 1.0, 1.0, 0.004231119155883789, 0.004927635192871094, 301.0, 50.84808672219515))
(recall_lower_bound, dist) = (1.0, SimilaritySearch.l1_distance)
(dist, p) = (SimilaritySearch.l1_distance, PerformanceResult(1.0, 1.0, 1.0, 0.005719876289367676, 0.005080167452494303, 301.0, 73.98110210895538))
(recall_lower_bound, dist) = (1.0, SimilaritySearch.linf_distance)
(dist, p) = (SimilaritySearch.linf_distance, PerformanceResult(1.0, 1.0, 1.0, 0.004435205459594726, 0.0050417025883992515, 301.0, 41.3532817363739))
(recall_lower_bound, dist) = (0.1, SimilaritySearch.squared_l2_distance)
(dist, p) = (SimilaritySearch.squared_l2_distance, PerformanceResult(1.0, 1.0, 1.0, 0.004159839948018392, 0.00485836664835612, 301.0, 9.542189134604996))
(recall_lower_bound, dist) = (1.0, SimilaritySearch.var"#_lp#1"{Float64,Float64}(3.0, 0.3333333333333333))
(dist, p) = (SimilaritySearch.var"#_lp#1"{Float64,Float64}(3.0, 0.3333333333333333), PerformanceResult(1.0, 1.0, 1.0, 0.004204384485880534, 0.0058236360549926754, 301.0, 45.91325655952096))
(recall_lower_bound, dist) = (0.1, SimilaritySearch.var"#_lp#1"{Float64,Float64}(0.5, 2.0))
(dist, p) = (SimilaritySearch.var"#_lp#1"{Float64,Float64}(0.5, 2.0), PerformanceResult(1.0, 1.0, 1.0, 0.00018170674641927083, 0.00014936129252115886, 301.0, 181.41039604321122))
Test Summary:    | Pass  Total
indexing vectors |   18     18
[ Info: inserting items into the index
[ Info: inserting items into the index
[ Info: Creating a pivot table with 1 pivots and distance=jaccard_distance
[ Info: inserting items into the index
[ Info: inserting items into the index
[ Info: Creating a pivot table with 1 pivots and distance=dice_distance
[ Info: inserting items into the index
[ Info: inserting items into the index
[ Info: Creating a pivot table with 1 pivots and distance=intersection_distance
[ Info: inserting items into the index
[ Info: inserting items into the index
[ Info: Creating a pivot table with 1 pivots and distance=common_prefix_distance
[ Info: inserting items into the index
[ Info: inserting items into the index
[ Info: Creating a pivot table with 1 pivots and distance=levenshtein_distance
[ Info: inserting items into the index
[ Info: inserting items into the index
[ Info: Creating a pivot table with 1 pivots and distance=lcs_distance
[ Info: inserting items into the index
[ Info: inserting items into the index
[ Info: Creating a pivot table with 1 pivots and distance=hamming_distance
Test Summary:      | Pass  Total
indexing sequences |   28     28
p = PerformanceResult(1.0, 1.0, 1.0, 5.862712860107422e-5, 0.011887168884277344, 300.0, 26.403876854106784)
p = PerformanceResult(1.0, 1.0, 1.0, 5.800724029541016e-5, 2.7195612589518228e-5, 300.0, 26.403876854106784)
p = PerformanceResult(1.0, 1.0, 1.0, 0.004370856285095215, 0.0040866613388061525, 300.0, 1.525530856893056)
p = PerformanceResult(1.0, 1.0, 1.0, 5.130238003200955e-5, 2.0702679951985676e-5, 300.0, 1.525530856893056)
(p1, p2, p3, p4) = (PerformanceResult(1.0, 1.0, 1.0, 5.862712860107422e-5, 0.011887168884277344, 300.0, 26.403876854106784), PerformanceResult(1.0, 1.0, 1.0, 5.800724029541016e-5, 2.7195612589518228e-5, 300.0, 26.403876854106784), PerformanceResult(1.0, 1.0, 1.0, 0.004370856285095215, 0.0040866613388061525, 300.0, 1.525530856893056), PerformanceResult(1.0, 1.0, 1.0, 5.130238003200955e-5, 2.0702679951985676e-5, 300.0, 1.525530856893056))
[ Info: select_sss: db=Vector{Vector{UInt32}}, alpha=0.35, distance=hamming_distance, shuf=false
[ Info: the maximum distance estimated as 122.0, now selecting pivots
[ Info: Creating a pivot table with 300 pivots and distance=hamming_distance
p = PerformanceResult(1.0, 1.0, 1.0, 0.008903098106384278, 0.003922772407531738, 348.3, 28617.0)
[ Info: Creating a pivot table with 16 pivots and distance=hamming_distance
p = PerformanceResult(1.0, 1.0, 1.0, 0.007684493064880371, 0.003258363405863444, 302.76666666666665, 6953.0)
Test Summary: | Pass  Total
misc          |   10     10
(recall_lower_bound, dist) = (1.0, SimilaritySearch.l2_distance)
Kvp = Kvp
[ Info: Kvp, refs=Vector{Vector{Float32}}, k=3, numrefs=32, dist=l2_distance
(dist, p) = (SimilaritySearch.l2_distance, PerformanceResult(1.0, 1.0, 1.0, 2.38498051961263e-5, 1.2262662251790364e-5, 92.96666666666667, 50.74573674052954))
(recall_lower_bound, dist) = (1.0, SimilaritySearch.l1_distance)
Kvp = Kvp
[ Info: Kvp, refs=Vector{Vector{Float32}}, k=3, numrefs=32, dist=l1_distance
(dist, p) = (SimilaritySearch.l1_distance, PerformanceResult(1.0, 1.0, 1.0, 2.426306406656901e-5, 1.2000401814778646e-5, 82.96666666666667, 73.89171087741852))
(recall_lower_bound, dist) = (1.0, SimilaritySearch.linf_distance)
Kvp = Kvp
[ Info: Kvp, refs=Vector{Vector{Float32}}, k=3, numrefs=32, dist=linf_distance
(dist, p) = (SimilaritySearch.linf_distance, PerformanceResult(1.0, 1.0, 1.0, 2.449353535970052e-5, 1.683235168457031e-5, 87.43333333333334, 41.237072110176086))
(recall_lower_bound, dist) = (1.0, SimilaritySearch.var"#_lp#1"{Float64,Float64}(3.0, 0.3333333333333333))
Kvp = Kvp
[ Info: Kvp, refs=Vector{Vector{Float32}}, k=3, numrefs=32, dist=_lp
(dist, p) = (SimilaritySearch.var"#_lp#1"{Float64,Float64}(3.0, 0.3333333333333333), PerformanceResult(1.0, 1.0, 1.0, 7.807413736979166e-5, 0.00015266736348470053, 94.33333333333333, 45.80150139704347))
(recall_lower_bound, dist) = (0.1, SimilaritySearch.var"#_lp#1"{Float64,Float64}(0.5, 2.0))
Kvp = Kvp
[ Info: Kvp, refs=Vector{Vector{Float32}}, k=3, numrefs=32, dist=_lp
(dist, p) = (SimilaritySearch.var"#_lp#1"{Float64,Float64}(0.5, 2.0), PerformanceResult(0.81, 0.81, 0.81, 5.3723653157552086e-5, 0.0001399676005045573, 70.13333333333334, 192.14813384786248))
Test Summary:    | Pass  Total
indexing vectors |   10     10
[ Info: inserting items into the index
[ Info: Kvp, refs=Vector{Vector{Int64}}, k=3, numrefs=32, dist=jaccard_distance
[ Info: inserting items into the index
[ Info: Kvp, refs=Vector{Vector{Int64}}, k=3, numrefs=32, dist=dice_distance
[ Info: inserting items into the index
[ Info: Kvp, refs=Vector{Vector{Int64}}, k=3, numrefs=32, dist=intersection_distance
[ Info: inserting items into the index
[ Info: Kvp, refs=Vector{Vector{Int64}}, k=3, numrefs=32, dist=common_prefix_distance
[ Info: inserting items into the index
[ Info: Kvp, refs=Vector{Vector{Int64}}, k=3, numrefs=32, dist=levenshtein_distance
[ Info: inserting items into the index
[ Info: Kvp, refs=Vector{Vector{Int64}}, k=3, numrefs=32, dist=lcs_distance
[ Info: inserting items into the index
[ Info: Kvp, refs=Vector{Vector{Int64}}, k=3, numrefs=32, dist=hamming_distance
Test Summary:      | Pass  Total
indexing sequences |   14     14
*** advance 1 from 1000; 2020-07-09T01:05:41.096
(dist, p) = (SimilaritySearch.l2_distance, PerformanceResult(0.9080000000000003, 0.9080000000000003, 0.9080000000000003, 2.308368682861328e-5, 2.546072006225586e-5, 151.07, 51.96715335431509))
[ Info: adding more items
(dist, p) = (SimilaritySearch.l2_distance, PerformanceResult(1.0, 1.0, 1.0, 2.150297164916992e-5, 2.0718574523925783e-5, 154.71, 0.0))
*** advance 1 from 1000; 2020-07-09T01:05:41.736
(dist, p) = (SimilaritySearch.l1_distance, PerformanceResult(0.89, 0.89, 0.89, 2.4173259735107422e-5, 2.473115921020508e-5, 151.42, 78.1500269882381))
[ Info: adding more items
(dist, p) = (SimilaritySearch.l1_distance, PerformanceResult(1.0, 1.0, 1.0, 2.3455619812011718e-5, 2.0329952239990233e-5, 155.17, 0.0))
*** advance 1 from 1000; 2020-07-09T01:05:42.341
(dist, p) = (SimilaritySearch.linf_distance, PerformanceResult(0.887, 0.887, 0.887, 2.498149871826172e-5, 3.683090209960937e-5, 151.77, 42.25409919023514))
[ Info: adding more items
(dist, p) = (SimilaritySearch.linf_distance, PerformanceResult(1.0, 1.0, 1.0, 2.49481201171875e-5, 3.605127334594727e-5, 155.32, 0.0))
*** advance 1 from 1000; 2020-07-09T01:05:42.951
(dist, p) = (SimilaritySearch.var"#_lp#1"{Float64,Float64}(3.0, 0.3333333333333333), PerformanceResult(0.8910000000000003, 0.8910000000000003, 0.8910000000000003, 0.00016016006469726562, 0.0007065105438232422, 151.27, 46.91803300275933))
[ Info: adding more items
(dist, p) = (SimilaritySearch.var"#_lp#1"{Float64,Float64}(3.0, 0.3333333333333333), PerformanceResult(1.0, 1.0, 1.0, 0.00015095949172973632, 0.0007987117767333984, 154.75, 0.0))
*** advance 1 from 1000; 2020-07-09T01:05:43.630
(dist, p) = (SimilaritySearch.var"#_lp#1"{Float64,Float64}(0.5, 2.0), PerformanceResult(0.8564444444444443, 0.8549999999999999, 0.8556842105263156, 0.00011966705322265625, 0.0005326604843139648, 150.9, 207.21634264755994))
[ Info: adding more items
(dist, p) = (SimilaritySearch.var"#_lp#1"{Float64,Float64}(0.5, 2.0), PerformanceResult(1.0, 1.0, 1.0, 0.00012267112731933593, 0.0007799100875854492, 154.54, 0.0))
*** advance 1 from 1000; 2020-07-09T01:05:45.040
(dist, p) = (SimilaritySearch.angle_distance, PerformanceResult(0.9080000000000003, 0.9080000000000003, 0.9080000000000003, 3.381490707397461e-5, 6.070137023925781e-5, 151.07, 51.97707693895791))
[ Info: adding more items
(dist, p) = (SimilaritySearch.angle_distance, PerformanceResult(1.0, 1.0, 1.0, 3.408432006835938e-5, 5.9051513671875e-5, 154.71, 0.01350574879324995))
Test Summary:    | Pass  Total
indexing vectors |   12     12
[ Info: inserting items into the index
*** advance 1 from 1000; 2020-07-09T01:05:47.131
(dist, p) = (SimilaritySearch.jaccard_distance, PerformanceResult(0.7539999999999998, 0.7539999999999998, 0.7539999999999998, 0.0014774656295776366, 7.661104202270507e-5, 204.57, 198.21666868031025))
[ Info: inserting items into the index
*** advance 1 from 1000; 2020-07-09T01:05:48.142
(dist, p) = (SimilaritySearch.dice_distance, PerformanceResult(0.7579999999999997, 0.7579999999999997, 0.7579999999999997, 0.0014540362358093262, 8.758068084716796e-5, 203.45, 112.19365321844816))
[ Info: inserting items into the index
*** advance 1 from 1000; 2020-07-09T01:05:48.987
(dist, p) = (SimilaritySearch.intersection_distance, PerformanceResult(0.638, 0.638, 0.6380000000000001, 0.0016808509826660156, 0.00013243913650512696, 258.78, 3.0))
[ Info: inserting items into the index
*** advance 1 from 1000; 2020-07-09T01:05:50.055
(dist, p) = (SimilaritySearch.common_prefix_distance, PerformanceResult(0.9790000000000002, 0.9790000000000002, 0.9790000000000002, 0.0022240686416625977, 1.749992370605469e-5, 217.93, 597.0000208467245))
[ Info: inserting items into the index
*** advance 1 from 1000; 2020-07-09T01:05:51.288
(dist, p) = (SimilaritySearch.levenshtein_distance, PerformanceResult(0.5590000000000002, 0.5590000000000002, 0.5590000000000002, 0.0026343965530395506, 0.0005075788497924805, 252.55, 2377.0))
[ Info: inserting items into the index
*** advance 1 from 1000; 2020-07-09T01:05:52.646
(dist, p) = (SimilaritySearch.lcs_distance, PerformanceResult(0.402, 0.402, NaN, 0.0017741036415100098, 0.0003557896614074707, 248.88, 3654.0))
[ Info: inserting items into the index
*** advance 1 from 1000; 2020-07-09T01:05:53.709
(dist, p) = (SimilaritySearch.hamming_distance, PerformanceResult(0.5760000000000002, 0.5760000000000002, 0.5760000000000002, 0.0018579936027526855, 3.4551620483398435e-5, 244.9, 2393.0))
Test Summary:      | Pass  Total
indexing sequences |    7      7
[ Info: inserting items to the index
==== BEGIN Opt. IHCSearch, expected recall: 0.9, n: 9
  == Begin Opt. IHCSearch iteration: 1, expected recall: 0.9, n: 9
    ** Opt. IHCSearch. A new best conf was found> score: 2.090909090909091, conf: {"restarts":7}, perf: {"precision":1.0,"recall":0.90625,"f1":0.94778814935065,"seconds":5.3551048040390015e-6,"exhaustive_search_seconds":1.9762665033340454e-6,"evaluations":8.25,"distances_sum":602.3873232603073}, best_list's length: 3, n: 9
  == End Opt. IHCSearch. Iteration finished; {"score":2.090909090909091,"state":{"restarts":7},"perf":{"precision":1.0,"recall":0.90625,"f1":0.94778814935065,"seconds":5.3551048040390015e-6,"exhaustive_search_seconds":1.9762665033340454e-6,"evaluations":8.25,"distances_sum":602.3873232603073}}, beam: 3, n: 9
  == Begin Opt. IHCSearch iteration: 2, expected recall: 0.9, n: 9
  == End Opt. IHCSearch. Iteration finished; {"score":2.090909090909091,"state":{"restarts":7},"perf":{"precision":1.0,"recall":0.90625,"f1":0.94778814935065,"seconds":5.3551048040390015e-6,"exhaustive_search_seconds":1.9762665033340454e-6,"evaluations":8.25,"distances_sum":602.3873232603073}}, beam: 4, n: 9
==== END Opt. IHCSearch. Finished, best: {"score":2.090909090909091,"state":{"restarts":7},"perf":{"precision":1.0,"recall":0.90625,"f1":0.94778814935065,"seconds":5.3551048040390015e-6,"exhaustive_search_seconds":1.9762665033340454e-6,"evaluations":8.25,"distances_sum":602.3873232603073}}, n: 9
==== BEGIN Opt. IHCSearch, expected recall: 0.9, n: 99
  == Begin Opt. IHCSearch iteration: 1, expected recall: 0.9, n: 99
    ** Opt. IHCSearch. A new best conf was found> score: 3.56, conf: {"restarts":4}, perf: {"precision":0.9088541666666659,"recall":0.9088541666666659,"f1":0.9088541666666659,"seconds":1.726299524307251e-5,"exhaustive_search_seconds":7.0873647928237915e-6,"evaluations":38.671875,"distances_sum":290.997501604259}, best_list's length: 5, n: 99
  == End Opt. IHCSearch. Iteration finished; {"score":3.56,"state":{"restarts":4},"perf":{"precision":0.9088541666666659,"recall":0.9088541666666659,"f1":0.9088541666666659,"seconds":1.726299524307251e-5,"exhaustive_search_seconds":7.0873647928237915e-6,"evaluations":38.671875,"distances_sum":290.997501604259}}, beam: 4, n: 99
  == Begin Opt. IHCSearch iteration: 2, expected recall: 0.9, n: 99
  == End Opt. IHCSearch. Iteration finished; {"score":3.56,"state":{"restarts":4},"perf":{"precision":0.9088541666666659,"recall":0.9088541666666659,"f1":0.9088541666666659,"seconds":1.726299524307251e-5,"exhaustive_search_seconds":7.0873647928237915e-6,"evaluations":38.671875,"distances_sum":290.997501604259}}, beam: 4, n: 99
==== END Opt. IHCSearch. Finished, best: {"score":3.56,"state":{"restarts":4},"perf":{"precision":0.9088541666666659,"recall":0.9088541666666659,"f1":0.9088541666666659,"seconds":1.726299524307251e-5,"exhaustive_search_seconds":7.0873647928237915e-6,"evaluations":38.671875,"distances_sum":290.997501604259}}, n: 99
==== BEGIN Opt. IHCSearch, expected recall: 0.9, n: 999
  == Begin Opt. IHCSearch iteration: 1, expected recall: 0.9, n: 999
    ** Opt. IHCSearch. A new best conf was found> score: 0.8602430555555544, conf: {"restarts":10}, perf: {"precision":0.8602430555555544,"recall":0.8602430555555544,"f1":0.8602430555555544,"seconds":5.728378891944885e-5,"exhaustive_search_seconds":3.164075314998627e-5,"evaluations":127.3984375,"distances_sum":124.1315464694053}, best_list's length: 2, n: 999
    ** Opt. IHCSearch. A new best conf was found> score: 0.8637152777777765, conf: {"restarts":11}, perf: {"precision":0.8637152777777765,"recall":0.8637152777777765,"f1":0.8637152777777765,"seconds":7.010810077190399e-5,"exhaustive_search_seconds":3.164075314998627e-5,"evaluations":134.46875,"distances_sum":123.73744411021471}, best_list's length: 3, n: 999
    ** Opt. IHCSearch. A new best conf was found> score: 0.8611111111111098, conf: {"restarts":13}, perf: {"precision":0.8611111111111098,"recall":0.8611111111111098,"f1":0.8611111111111098,"seconds":0.0001046694815158844,"exhaustive_search_seconds":3.164075314998627e-5,"evaluations":150.4296875,"distances_sum":123.72632936574519}, best_list's length: 4, n: 999
    ** Opt. IHCSearch. A new best conf was found> score: 0.8663194444444438, conf: {"restarts":14}, perf: {"precision":0.8663194444444438,"recall":0.8663194444444438,"f1":0.8663194444444438,"seconds":6.544776260852814e-5,"exhaustive_search_seconds":3.164075314998627e-5,"evaluations":154.984375,"distances_sum":123.33167847059667}, best_list's length: 5, n: 999
    ** Opt. IHCSearch. A new best conf was found> score: 0.8732638888888878, conf: {"restarts":12}, perf: {"precision":0.8732638888888878,"recall":0.8732638888888878,"f1":0.8732638888888878,"seconds":6.473995745182037e-5,"exhaustive_search_seconds":3.164075314998627e-5,"evaluations":144.9296875,"distances_sum":123.46219982765615}, best_list's length: 6, n: 999
  == End Opt. IHCSearch. Iteration finished; {"score":0.8732638888888878,"state":{"restarts":12},"perf":{"precision":0.8732638888888878,"recall":0.8732638888888878,"f1":0.8732638888888878,"seconds":6.473995745182037e-5,"exhaustive_search_seconds":3.164075314998627e-5,"evaluations":144.9296875,"distances_sum":123.46219982765615}}, beam: 4, n: 999
  == Begin Opt. IHCSearch iteration: 2, expected recall: 0.9, n: 999
    ** Opt. IHCSearch. A new best conf was found> score: 0.8741319444444434, conf: {"restarts":21}, perf: {"precision":0.8741319444444434,"recall":0.8741319444444434,"f1":0.8741319444444434,"seconds":7.842108607292175e-5,"exhaustive_search_seconds":3.164075314998627e-5,"evaluations":195.7109375,"distances_sum":123.6922503169626}, best_list's length: 5, n: 999
    ** Opt. IHCSearch. A new best conf was found> score: 0.8741319444444433, conf: {"restarts":15}, perf: {"precision":0.8741319444444433,"recall":0.8741319444444433,"f1":0.8741319444444433,"seconds":5.989335477352142e-5,"exhaustive_search_seconds":3.164075314998627e-5,"evaluations":161.1796875,"distances_sum":123.73635224439204}, best_list's length: 8, n: 999
    ** Opt. IHCSearch. A new best conf was found> score: 0.8793402777777768, conf: {"restarts":24}, perf: {"precision":0.8793402777777768,"recall":0.8793402777777768,"f1":0.8793402777777768,"seconds":8.159130811691284e-5,"exhaustive_search_seconds":3.164075314998627e-5,"evaluations":212.34375,"distances_sum":122.95036858133972}, best_list's length: 9, n: 999
  == End Opt. IHCSearch. Iteration finished; {"score":0.8793402777777768,"state":{"restarts":24},"perf":{"precision":0.8793402777777768,"recall":0.8793402777777768,"f1":0.8793402777777768,"seconds":8.159130811691284e-5,"exhaustive_search_seconds":3.164075314998627e-5,"evaluations":212.34375,"distances_sum":122.95036858133972}}, beam: 4, n: 999
==== END Opt. IHCSearch. Finished, best: {"score":0.8793402777777768,"state":{"restarts":24},"perf":{"precision":0.8793402777777768,"recall":0.8793402777777768,"f1":0.8793402777777768,"seconds":8.159130811691284e-5,"exhaustive_search_seconds":3.164075314998627e-5,"evaluations":212.34375,"distances_sum":122.95036858133972}}, n: 999
==== BEGIN Opt. IHCSearch, expected recall: 0.9, n: 9999
  == Begin Opt. IHCSearch iteration: 1, expected recall: 0.9, n: 9999
  == End Opt. IHCSearch. Iteration finished; {"score":0.8585069444444433,"state":{"restarts":24},"perf":{"precision":0.8585069444444433,"recall":0.8585069444444433,"f1":0.8585069444444433,"seconds":0.00013384409248828888,"exhaustive_search_seconds":0.00038081221282482147,"evaluations":332.2734375,"distances_sum":56.313436029013246}}, beam: 4, n: 9999
==== END Opt. IHCSearch. Finished, best: {"score":0.8585069444444433,"state":{"restarts":24},"perf":{"precision":0.8585069444444433,"recall":0.8585069444444433,"f1":0.8585069444444433,"seconds":0.00013384409248828888,"exhaustive_search_seconds":0.00038081221282482147,"evaluations":332.2734375,"distances_sum":56.313436029013246}}, n: 9999
added n=10000, neighborhood=5, IHCSearch(24), SatNeighborhood(32), 2020-07-09T01:06:01.937
[ Info: done; now testing
res = KnnResult(10, 10, Item[Item(9698, 0.033698305f0), Item(4235, 0.03825449f0), Item(7794, 0.038621686f0), Item(61, 0.041625913f0), Item(9737, 0.04405396f0), Item(2827, 0.0496235f0), Item(2185, 0.050131444f0), Item(5027, 0.05236437f0), Item(436, 0.057666052f0), Item(546, 0.060130194f0)])
[ Info: inserting items to the index
==== BEGIN Opt. BeamSearch, expected recall: 0.9, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.859375,"state":{"bsize":3},"perf":{"precision":1.0,"recall":0.859375,"f1":0.911865738428239,"seconds":0.003733934834599495,"exhaustive_search_seconds":2.1401792764663696e-6,"evaluations":7.875,"distances_sum":566.7910033762455}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.859375,"state":{"bsize":3},"perf":{"precision":1.0,"recall":0.859375,"f1":0.911865738428239,"seconds":0.003733934834599495,"exhaustive_search_seconds":2.1401792764663696e-6,"evaluations":7.875,"distances_sum":566.7910033762455}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.9, n: 99
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.9, n: 99
  == End Opt. BeamSearch. Iteration finished; {"score":4.095261358085002,"state":{"bsize":3},"perf":{"precision":0.9800347222222219,"recall":0.9800347222222219,"f1":0.9800347222222219,"seconds":1.600012183189392e-5,"exhaustive_search_seconds":6.975606083869934e-6,"evaluations":31.984375,"distances_sum":288.1321558840573}}, beam: 3, n: 99
==== END Opt. BeamSearch. Finished, best: {"score":4.095261358085002,"state":{"bsize":3},"perf":{"precision":0.9800347222222219,"recall":0.9800347222222219,"f1":0.9800347222222219,"seconds":1.600012183189392e-5,"exhaustive_search_seconds":6.975606083869934e-6,"evaluations":31.984375,"distances_sum":288.1321558840573}}, n: 99
==== BEGIN Opt. BeamSearch, expected recall: 0.9, n: 999
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.9, n: 999
    ** Opt. BeamSearch. A new best conf was found> score: 17.781102362204724, conf: {"bsize":4}, perf: {"precision":0.9921874999999998,"recall":0.9921874999999998,"f1":0.9921874999999998,"seconds":2.823956310749054e-5,"exhaustive_search_seconds":3.0273571610450745e-5,"evaluations":59.53125,"distances_sum":121.39644820475951}, best_list's length: 5, n: 999
  == End Opt. BeamSearch. Iteration finished; {"score":17.781102362204724,"state":{"bsize":4},"perf":{"precision":0.9921874999999998,"recall":0.9921874999999998,"f1":0.9921874999999998,"seconds":2.823956310749054e-5,"exhaustive_search_seconds":3.0273571610450745e-5,"evaluations":59.53125,"distances_sum":121.39644820475951}}, beam: 4, n: 999
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.9, n: 999
  == End Opt. BeamSearch. Iteration finished; {"score":17.781102362204724,"state":{"bsize":4},"perf":{"precision":0.9921874999999998,"recall":0.9921874999999998,"f1":0.9921874999999998,"seconds":2.823956310749054e-5,"exhaustive_search_seconds":3.0273571610450745e-5,"evaluations":59.53125,"distances_sum":121.39644820475951}}, beam: 4, n: 999
==== END Opt. BeamSearch. Finished, best: {"score":17.781102362204724,"state":{"bsize":4},"perf":{"precision":0.9921874999999998,"recall":0.9921874999999998,"f1":0.9921874999999998,"seconds":2.823956310749054e-5,"exhaustive_search_seconds":3.0273571610450745e-5,"evaluations":59.53125,"distances_sum":121.39644820475951}}, n: 999
==== BEGIN Opt. BeamSearch, expected recall: 0.9, n: 9999
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.9, n: 9999
  == End Opt. BeamSearch. Iteration finished; {"score":104.00780684104627,"state":{"bsize":4},"perf":{"precision":0.987847222222222,"recall":0.987847222222222,"f1":0.987847222222222,"seconds":5.066581070423126e-5,"exhaustive_search_seconds":0.0003908909857273102,"evaluations":97.0703125,"distances_sum":54.26276021124795}}, beam: 4, n: 9999
==== END Opt. BeamSearch. Finished, best: {"score":104.00780684104627,"state":{"bsize":4},"perf":{"precision":0.987847222222222,"recall":0.987847222222222,"f1":0.987847222222222,"seconds":5.066581070423126e-5,"exhaustive_search_seconds":0.0003908909857273102,"evaluations":97.0703125,"distances_sum":54.26276021124795}}, n: 9999
added n=10000, neighborhood=4, BeamSearch(4), SatNeighborhood(32), 2020-07-09T01:06:06.241
[ Info: done; now testing
res = KnnResult(10, 10, Item[Item(8099, 0.032341074f0), Item(8500, 0.041223362f0), Item(8970, 0.04131301f0), Item(5047, 0.041685056f0), Item(2639, 0.044110887f0), Item(7842, 0.044222288f0), Item(9162, 0.062095877f0), Item(1559, 0.06515527f0), Item(86, 0.06913411f0), Item(8899, 0.07012108f0)])
Test Summary:        | Pass  Total
some vector indexing |    2      2
    Testing SimilaritySearch tests passed 
