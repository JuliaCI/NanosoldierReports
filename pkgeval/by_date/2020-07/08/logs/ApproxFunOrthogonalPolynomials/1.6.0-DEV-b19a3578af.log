Julia Version 1.6.0-DEV.408
Commit b19a3578af (2020-07-08 17:48 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Reexport ─────────────────────── v0.2.0
  Installed NaNMath ──────────────────────── v0.3.3
  Installed OpenBLAS_jll ─────────────────── v0.3.9+5
  Installed IntervalSets ─────────────────── v0.5.1
  Installed InfiniteArrays ───────────────── v0.7.3
  Installed BlockBandedMatrices ──────────── v0.8.9
  Installed DSP ──────────────────────────── v0.6.7
  Installed ApproxFunOrthogonalPolynomials ─ v0.3.4
  Installed LowRankApprox ────────────────── v0.4.0
  Installed FastTransforms ───────────────── v0.8.2
  Installed BinaryProvider ───────────────── v0.5.10
  Installed BandedMatrices ───────────────── v0.15.15
  Installed ToeplitzMatrices ─────────────── v0.6.0
  Installed GMP_jll ──────────────────────── v6.2.0+1
  Installed DataAPI ──────────────────────── v1.3.0
  Installed RecipesBase ──────────────────── v1.0.1
  Installed IterTools ────────────────────── v1.3.0
  Installed SortingAlgorithms ────────────── v0.3.1
  Installed ArrayLayouts ─────────────────── v0.3.5
  Installed Zlib_jll ─────────────────────── v1.2.11+14
  Installed Missings ─────────────────────── v0.4.3
  Installed FastTransforms_jll ───────────── v0.2.13+1
  Installed Calculus ─────────────────────── v0.5.1
  Installed MKL_jll ──────────────────────── v2020.1.216+0
  Installed OpenSpecFun_jll ──────────────── v0.5.3+3
  Installed FastGaussQuadrature ──────────── v0.4.2
  Installed LazyArrays ───────────────────── v0.16.13
  Installed Polynomials ──────────────────── v1.1.3
  Installed FFTW ─────────────────────────── v1.2.2
  Installed MacroTools ───────────────────── v0.5.5
  Installed DualNumbers ──────────────────── v0.6.2
  Installed Libiconv_jll ─────────────────── v1.16.0+5
  Installed FillArrays ───────────────────── v0.8.12
  Installed DomainSets ───────────────────── v0.3.1
  Installed DataStructures ───────────────── v0.17.19
  Installed MatrixFactorizations ─────────── v0.4.1
  Installed EzXML ────────────────────────── v1.1.0
  Installed XML2_jll ─────────────────────── v2.9.10+1
  Installed ExprTools ────────────────────── v0.1.1
  Installed CompilerSupportLibraries_jll ─── v0.3.3+0
  Installed OrderedCollections ───────────── v1.3.0
  Installed AbstractFFTs ─────────────────── v0.5.0
  Installed Compat ───────────────────────── v3.13.0
  Installed Nullables ────────────────────── v1.0.0
  Installed Intervals ────────────────────── v1.3.4
  Installed StaticArrays ─────────────────── v0.12.4
  Installed BlockArrays ──────────────────── v0.12.10
  Installed Mocking ──────────────────────── v0.7.1
  Installed EllipsisNotation ─────────────── v0.4.0
  Installed IntelOpenMP_jll ──────────────── v2018.0.3+0
  Installed MPFR_jll ─────────────────────── v4.0.2+2
  Installed StatsBase ────────────────────── v0.33.0
  Installed FFTW_jll ─────────────────────── v3.3.9+5
  Installed SpecialFunctions ─────────────── v0.10.3
  Installed ApproxFunBase ────────────────── v0.3.5
  Installed TimeZones ────────────────────── v1.2.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [b70543e2] + ApproxFunOrthogonalPolynomials v0.3.4
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [fbd15aa5] + ApproxFunBase v0.3.5
  [b70543e2] + ApproxFunOrthogonalPolynomials v0.3.4
  [4c555306] + ArrayLayouts v0.3.5
  [aae01518] + BandedMatrices v0.15.15
  [b99e7846] + BinaryProvider v0.5.10
  [8e7c35d0] + BlockArrays v0.12.10
  [ffab5731] + BlockBandedMatrices v0.8.9
  [49dc2e85] + Calculus v0.5.1
  [34da2185] + Compat v3.13.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [717857b8] + DSP v0.6.7
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.17.19
  [5b8099bc] + DomainSets v0.3.1
  [fa6b7ba4] + DualNumbers v0.6.2
  [da5c29d0] + EllipsisNotation v0.4.0
  [e2ba6199] + ExprTools v0.1.1
  [8f5d6c58] + EzXML v1.1.0
  [7a1cc6ca] + FFTW v1.2.2
  [f5851436] + FFTW_jll v3.3.9+5
  [442a2c76] + FastGaussQuadrature v0.4.2
  [057dd010] + FastTransforms v0.8.2
  [34b6f7d7] + FastTransforms_jll v0.2.13+1
  [1a297f60] + FillArrays v0.8.12
  [781609d7] + GMP_jll v6.2.0+1
  [4858937d] + InfiniteArrays v0.7.3
  [1d5cc7b8] + IntelOpenMP_jll v2018.0.3+0
  [8197267c] + IntervalSets v0.5.1
  [d8418881] + Intervals v1.3.4
  [c8e1da08] + IterTools v1.3.0
  [5078a376] + LazyArrays v0.16.13
  [94ce4f54] + Libiconv_jll v1.16.0+5
  [898213cb] + LowRankApprox v0.4.0
  [856f044c] + MKL_jll v2020.1.216+0
  [3a97d323] + MPFR_jll v4.0.2+2
  [1914dd2f] + MacroTools v0.5.5
  [a3b82374] + MatrixFactorizations v0.4.1
  [e1d29d7a] + Missings v0.4.3
  [78c3b35d] + Mocking v0.7.1
  [77ba4419] + NaNMath v0.3.3
  [4d1e1d77] + Nullables v1.0.0
  [4536629a] + OpenBLAS_jll v0.3.9+5
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.3.0
  [f27b6e38] + Polynomials v1.1.3
  [3cdcf5f2] + RecipesBase v1.0.1
  [189a3867] + Reexport v0.2.0
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.4
  [2913bbd2] + StatsBase v0.33.0
  [f269a46b] + TimeZones v1.2.0
  [c751599d] + ToeplitzMatrices v0.6.0
  [02c8fc9c] + XML2_jll v2.9.10+1
  [83775a58] + Zlib_jll v1.2.11+14
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building FFTW ──────────→ `~/.julia/packages/FFTW/kcXL6/deps/build.log`
   Building TimeZones ─────→ `~/.julia/packages/TimeZones/OjMoF/deps/build.log`
   Building FastTransforms → `~/.julia/packages/FastTransforms/MjTJy/deps/build.log`
    Testing ApproxFunOrthogonalPolynomials
Status `/tmp/jl_8EtDCh/Project.toml`
  [621f4979] AbstractFFTs v0.5.0
  [fbd15aa5] ApproxFunBase v0.3.5
  [b70543e2] ApproxFunOrthogonalPolynomials v0.3.4
  [aae01518] BandedMatrices v0.15.15
  [8e7c35d0] BlockArrays v0.12.10
  [ffab5731] BlockBandedMatrices v0.8.9
  [5b8099bc] DomainSets v0.3.1
  [7a1cc6ca] FFTW v1.2.2
  [442a2c76] FastGaussQuadrature v0.4.2
  [057dd010] FastTransforms v0.8.2
  [1a297f60] FillArrays v0.8.12
  [8197267c] IntervalSets v0.5.1
  [5078a376] LazyArrays v0.16.13
  [189a3867] Reexport v0.2.0
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [37e2e46d] LinearAlgebra
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_8EtDCh/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [fbd15aa5] ApproxFunBase v0.3.5
  [b70543e2] ApproxFunOrthogonalPolynomials v0.3.4
  [4c555306] ArrayLayouts v0.3.5
  [aae01518] BandedMatrices v0.15.15
  [b99e7846] BinaryProvider v0.5.10
  [8e7c35d0] BlockArrays v0.12.10
  [ffab5731] BlockBandedMatrices v0.8.9
  [49dc2e85] Calculus v0.5.1
  [34da2185] Compat v3.13.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [717857b8] DSP v0.6.7
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.17.19
  [5b8099bc] DomainSets v0.3.1
  [fa6b7ba4] DualNumbers v0.6.2
  [da5c29d0] EllipsisNotation v0.4.0
  [e2ba6199] ExprTools v0.1.1
  [8f5d6c58] EzXML v1.1.0
  [7a1cc6ca] FFTW v1.2.2
  [f5851436] FFTW_jll v3.3.9+5
  [442a2c76] FastGaussQuadrature v0.4.2
  [057dd010] FastTransforms v0.8.2
  [34b6f7d7] FastTransforms_jll v0.2.13+1
  [1a297f60] FillArrays v0.8.12
  [781609d7] GMP_jll v6.2.0+1
  [4858937d] InfiniteArrays v0.7.3
  [1d5cc7b8] IntelOpenMP_jll v2018.0.3+0
  [8197267c] IntervalSets v0.5.1
  [d8418881] Intervals v1.3.4
  [c8e1da08] IterTools v1.3.0
  [5078a376] LazyArrays v0.16.13
  [94ce4f54] Libiconv_jll v1.16.0+5
  [898213cb] LowRankApprox v0.4.0
  [856f044c] MKL_jll v2020.1.216+0
  [3a97d323] MPFR_jll v4.0.2+2
  [1914dd2f] MacroTools v0.5.5
  [a3b82374] MatrixFactorizations v0.4.1
  [e1d29d7a] Missings v0.4.3
  [78c3b35d] Mocking v0.7.1
  [77ba4419] NaNMath v0.3.3
  [4d1e1d77] Nullables v1.0.0
  [4536629a] OpenBLAS_jll v0.3.9+5
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.3.0
  [f27b6e38] Polynomials v1.1.3
  [3cdcf5f2] RecipesBase v1.0.1
  [189a3867] Reexport v0.2.0
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [2913bbd2] StatsBase v0.33.0
  [f269a46b] TimeZones v1.2.0
  [c751599d] ToeplitzMatrices v0.6.0
  [02c8fc9c] XML2_jll v2.9.10+1
  [83775a58] Zlib_jll v1.2.11+14
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Domain        |    1      1
Test Summary: | Pass  Total
Clenshaw      |    1      1
  5.356444 seconds (5.39 M allocations: 288.165 MiB, 7.67% gc time)
Test Summary: | Pass  Total
Chebyshev     |  488    488
119.714098 seconds (94.43 M allocations: 5.078 GiB, 3.76% gc time)
Test Summary: | Pass  Total
Complex       |   13     13
  5.980086 seconds (2.73 M allocations: 153.416 MiB, 5.52% gc time)
Test Summary: | Pass  Total
broadcast     |   18     18
 38.087153 seconds (25.88 M allocations: 1.382 GiB, 3.74% gc time)
  6.850052 seconds (4.51 M allocations: 229.763 MiB, 7.55% gc time)
  8.447011 seconds (6.44 M allocations: 390.835 MiB, 3.17% gc time)
  8.387340 seconds (7.28 M allocations: 381.095 MiB, 3.69% gc time)
  0.119916 seconds (29.39 k allocations: 1.911 MiB)
  1.417639 seconds (1.16 M allocations: 58.626 MiB, 3.74% gc time)
InterlaceOperator: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] BlockBandedMatrices.BlockSkylineSizes(rows::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, cols::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, l::Fill{Int64,1,Tuple{Base.OneTo{Int64}}}, u::Fill{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockBandedMatrices ~/.julia/packages/BlockBandedMatrices/Ma22F/src/BlockSkylineMatrix.jl:62
    [9] BlockSkylineSizes
      @ ~/.julia/packages/BlockBandedMatrices/Ma22F/src/BlockSkylineMatrix.jl:69 [inlined]
   [10] BlockSkylineMatrix
      @ ~/.julia/packages/BlockBandedMatrices/Ma22F/src/BlockSkylineMatrix.jl:221 [inlined]
   [11] (BlockBandedMatrix{T} where T)(A::Zeros{Float64,2,Tuple{Base.OneTo{Int64},Base.OneTo{Int64}}}, rdims::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, cdims::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, lu::Tuple{Int64,Int64})
      @ BlockBandedMatrices ~/.julia/packages/BlockBandedMatrices/Ma22F/src/BlockSkylineMatrix.jl:229
   [12] (BlockBandedMatrix{T} where T)(#unused#::Type{Zeros}, V::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:686
   [13] (BlockBandedMatrix{T} where T)(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/general/InterlaceOperator.jl:423
   [14] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [15] defaultgetindex(B::InterlaceOperator{Float64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [16] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [17] backend_testinfoperator(A::InterlaceOperator{Float64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [18] testinfoperator(A::InterlaceOperator{Float64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:161
   [19] testraggedbelowoperator(A::InterlaceOperator{Float64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [20] testblockbandedoperator(A::InterlaceOperator{Float64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:216
   [21] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:210
   [22] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [23] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:205
   [24] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [25] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
InterlaceOperator: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] BlockBandedMatrices.BlockSkylineSizes(rows::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, cols::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, l::Fill{Int64,1,Tuple{Base.OneTo{Int64}}}, u::Fill{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockBandedMatrices ~/.julia/packages/BlockBandedMatrices/Ma22F/src/BlockSkylineMatrix.jl:62
    [9] BlockSkylineSizes
      @ ~/.julia/packages/BlockBandedMatrices/Ma22F/src/BlockSkylineMatrix.jl:69 [inlined]
   [10] BlockSkylineMatrix
      @ ~/.julia/packages/BlockBandedMatrices/Ma22F/src/BlockSkylineMatrix.jl:221 [inlined]
   [11] (BlockBandedMatrix{T} where T)(A::Zeros{Float64,2,Tuple{Base.OneTo{Int64},Base.OneTo{Int64}}}, rdims::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, cdims::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, lu::Tuple{Int64,Int64})
      @ BlockBandedMatrices ~/.julia/packages/BlockBandedMatrices/Ma22F/src/BlockSkylineMatrix.jl:229
   [12] (BlockBandedMatrix{T} where T)(#unused#::Type{Zeros}, V::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:686
   [13] (BlockBandedMatrix{T} where T)(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/general/InterlaceOperator.jl:423
   [14] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [15] defaultgetindex(B::InterlaceOperator{Float64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [16] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [17] backend_testinfoperator(A::InterlaceOperator{Float64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [18] testinfoperator(A::InterlaceOperator{Float64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:162
   [19] testraggedbelowoperator(A::InterlaceOperator{Float64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [20] testblockbandedoperator(A::InterlaceOperator{Float64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:216
   [21] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:210
   [22] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [23] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:205
   [24] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [25] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
InterlaceOperator: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] BlockBandedMatrices.BlockSkylineSizes(rows::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, cols::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, l::Fill{Int64,1,Tuple{Base.OneTo{Int64}}}, u::Fill{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockBandedMatrices ~/.julia/packages/BlockBandedMatrices/Ma22F/src/BlockSkylineMatrix.jl:62
    [9] BlockSkylineSizes
      @ ~/.julia/packages/BlockBandedMatrices/Ma22F/src/BlockSkylineMatrix.jl:69 [inlined]
   [10] BlockSkylineMatrix
      @ ~/.julia/packages/BlockBandedMatrices/Ma22F/src/BlockSkylineMatrix.jl:221 [inlined]
   [11] (BlockBandedMatrix{T} where T)(A::Zeros{Float32,2,Tuple{Base.OneTo{Int64},Base.OneTo{Int64}}}, rdims::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, cdims::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, lu::Tuple{Int64,Int64})
      @ BlockBandedMatrices ~/.julia/packages/BlockBandedMatrices/Ma22F/src/BlockSkylineMatrix.jl:229
   [12] (BlockBandedMatrix{T} where T)(#unused#::Type{Zeros}, V::ApproxFunBase.SubOperator{Float32,InterlaceOperator{Float32,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:686
   [13] (BlockBandedMatrix{T} where T)(S::ApproxFunBase.SubOperator{Float32,InterlaceOperator{Float32,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/general/InterlaceOperator.jl:423
   [14] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float32,InterlaceOperator{Float32,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [15] defaultgetindex(B::InterlaceOperator{Float32,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [16] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [17] backend_testinfoperator(A::InterlaceOperator{Float32,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [18] testinfoperator(A::InterlaceOperator{Float64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:163
   [19] testraggedbelowoperator(A::InterlaceOperator{Float64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [20] testblockbandedoperator(A::InterlaceOperator{Float64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:216
   [21] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:210
   [22] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [23] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:205
   [24] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [25] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
InterlaceOperator: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] BlockBandedMatrices.BlockSkylineSizes(rows::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, cols::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, l::Fill{Int64,1,Tuple{Base.OneTo{Int64}}}, u::Fill{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockBandedMatrices ~/.julia/packages/BlockBandedMatrices/Ma22F/src/BlockSkylineMatrix.jl:62
    [9] BlockSkylineSizes
      @ ~/.julia/packages/BlockBandedMatrices/Ma22F/src/BlockSkylineMatrix.jl:69 [inlined]
   [10] BlockSkylineMatrix
      @ ~/.julia/packages/BlockBandedMatrices/Ma22F/src/BlockSkylineMatrix.jl:221 [inlined]
   [11] (BlockBandedMatrix{T} where T)(A::Zeros{ComplexF64,2,Tuple{Base.OneTo{Int64},Base.OneTo{Int64}}}, rdims::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, cdims::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, lu::Tuple{Int64,Int64})
      @ BlockBandedMatrices ~/.julia/packages/BlockBandedMatrices/Ma22F/src/BlockSkylineMatrix.jl:229
   [12] (BlockBandedMatrix{T} where T)(#unused#::Type{Zeros}, V::ApproxFunBase.SubOperator{ComplexF64,InterlaceOperator{ComplexF64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:686
   [13] (BlockBandedMatrix{T} where T)(S::ApproxFunBase.SubOperator{ComplexF64,InterlaceOperator{ComplexF64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/general/InterlaceOperator.jl:423
   [14] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{ComplexF64,InterlaceOperator{ComplexF64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [15] defaultgetindex(B::InterlaceOperator{ComplexF64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [16] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [17] backend_testinfoperator(A::InterlaceOperator{ComplexF64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [18] testinfoperator(A::InterlaceOperator{Float64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:164
   [19] testraggedbelowoperator(A::InterlaceOperator{Float64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [20] testblockbandedoperator(A::InterlaceOperator{Float64,2,ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.ArraySpace{Space,1,ApproxFunBase.AnyDomain,Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:216
   [21] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:210
   [22] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [23] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:205
   [24] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [25] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:161
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:162
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{Float32,InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{Float32,InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float32,InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:163
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{ComplexF64,InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{ComplexF64,InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{ComplexF64,InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:164
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:161
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:162
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{Float32,InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{Float32,InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float32,InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:163
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{ComplexF64,InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{ComplexF64,InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{ComplexF64,InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:164
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},SVector{1,Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:161
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:162
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{Float32,InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{Float32,InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float32,InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:163
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{ComplexF64,InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{ComplexF64,InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{ComplexF64,InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:164
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:161
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:162
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{Float32,InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{Float32,InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float32,InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:163
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{ComplexF64,InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{ComplexF64,InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{ComplexF64,InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:164
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,DomainSets.Point{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Vector{Int64},Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:161
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:162
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{Float32,InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{Float32,InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float32,InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:163
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{ComplexF64,InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{ComplexF64,InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{ComplexF64,InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:164
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:161
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float64,InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:162
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{Float32,InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{Float32,InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float32,InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{Float32,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:163
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
Chebyshev Dirichlet: Error During Test at /home/pkgeval/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
  Test threw exception
  Expression: Matrix(A[Block(3):Block(4), Block(2):Block(4)]) ≈ Matrix(A[blockstart(rangespace(A), 3):blockstop(rangespace(A), 4), blockstart(domainspace(A), 2):blockstop(domainspace(A), 4)])
  BoundsError: attempt to access 0-element Vector{Int64} at index [0]
  Stacktrace:
    [1] getindex
      @ ./array.jl:811 [inlined]
    [2] last
      @ ./abstractarray.jl:362 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:434 [inlined]
    [4] _vcat_cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:429 [inlined]
    [5] cumsum
      @ ~/.julia/packages/LazyArrays/qCGat/src/lazyconcat.jl:439 [inlined]
    [6] _blocklengths2blocklasts
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:55 [inlined]
    [7] blockedrange
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blockaxis.jl:56 [inlined]
    [8] map
      @ ./tuple.jl:158 [inlined]
    [9] BlockArrays.PseudoBlockArray(::Matrix{Float64}, ::LazyArrays.ApplyArray{Int64,1,typeof(vcat),Tuple{Vector{Int64},Ones{Int64,1,Tuple{Base.OneTo{Int64}}}}}, ::Ones{Int64,1,Tuple{Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/pseudo_blockarray.jl:70
   [10] default_BlockMatrix(S::ApproxFunBase.SubOperator{ComplexF64,InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:712
   [11] (BlockArrays.PseudoBlockMatrix{T,R,BS} where BS<:Tuple{AbstractUnitRange{Int64},AbstractUnitRange{Int64}} where R<:AbstractArray{T,2} where T)(S::ApproxFunBase.SubOperator{ComplexF64,InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:725
   [12] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{ComplexF64,InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [13] defaultgetindex(B::InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [14] getindex
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208 [inlined]
   [15] backend_testinfoperator(A::InterlaceOperator{ComplexF64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:140
   [16] testinfoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:164
   [17] testraggedbelowoperator(A::InterlaceOperator{Float64,1,Chebyshev{ChebyshevInterval{Float64},Float64},ApproxFunBase.ArraySpace{Space,1,ChebyshevInterval{Float64},Any},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}}}}},ApproxFunBase.CachedIterator{Tuple{Int64,Int64},ApproxFunBase.BlockInterlacer{Tuple{Ones{Int64,1,Tuple{InfiniteArrays.OneToInf{Int64}}},Vector{Int64}}}},Tuple{InfiniteArrays.SignedInfinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:184
   [18] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:295
   [19] top-level scope
      @ timing.jl:174
   [20] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:288
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [22] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:287
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [24] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:7
  
 50.332872 seconds (24.07 M allocations: 1.361 GiB, 2.07% gc time)
Test Summary:                          |  Pass  Error  Total
Operator                               | 12338     28  12366
  Evaluation                           |   290           290
  Conversion                           |   788           788
  Derivative                           |   397           397
  Toeplitz                             |   785           785
  Multiplication                       |  1178          1178
  Integral                             |   394           394
  Special functions                    |     4             4
  Permutation                          |   393           393
  Mixed                                |  2755          2755
  Cached                               |     7             7
  Reverse                              |   786           786
  Sub-operator re-view bug             |     3             3
  Sub-operators                        |  1573          1573
  InterlaceOperator                    |   389      4    393
  Projection and subspaces             |    13            13
  Zero operator has correct bandwidths |     1             1
  hcat of functionals (#407)           |     1             1
  views of views                       |     1             1
  Multiplication functions             |     5             5
  lastindex                            |     4             4
  Chebyshev Neumann                    |     1             1
  Chebyshev Dirichlet                  |  2178     24   2202
  JacobiZ                              |   392           392
ERROR: LoadError: LoadError: Some tests did not pass: 12338 passed, 0 failed, 28 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/OperatorTest.jl:6
in expression starting at /home/pkgeval/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/runtests.jl:11
ERROR: Package ApproxFunOrthogonalPolynomials errored during testing
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1561
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:327
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:314
  [5] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#60
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:16
