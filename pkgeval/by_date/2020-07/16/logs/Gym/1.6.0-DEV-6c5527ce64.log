Julia Version 1.6.0-DEV.476
Commit 6c5527ce64 (2020-07-16 17:28 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed VersionParsing ─ v1.2.0
  Installed Parsers ──────── v1.0.7
  Installed Conda ────────── v1.4.1
  Installed Gym ──────────── v1.1.4
  Installed MacroTools ───── v0.5.5
  Installed PyCall ───────── v1.91.4
  Installed JSON ─────────── v0.21.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [b0807396] + Gym v1.1.4
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [8f4d0f93] + Conda v1.4.1
  [b0807396] + Gym v1.1.4
  [682c06a0] + JSON v0.21.0
  [1914dd2f] + MacroTools v0.5.5
  [69de0a69] + Parsers v1.0.7
  [438e738f] + PyCall v1.91.4
  [81def892] + VersionParsing v1.2.0
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [de0858da] + Printf
  [9a3f8284] + Random
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [4ec0a83e] + Unicode
   Building Conda ─→ `~/.julia/packages/Conda/3rPhK/deps/build.log`
   Building PyCall → `~/.julia/packages/PyCall/zqDXB/deps/build.log`
   Building Gym ───→ `~/.julia/packages/Gym/exeFO/deps/build.log`
┌ Error: Error building `Gym`: 
│ ERROR: LoadError: LoadError: parsing command `pip install --user -e .[$env]`: special characters "#{}()[]<>|&*?~;" must be quoted in commands
│ Stacktrace:
│  [1] error(s::String)
│    @ Base ./error.jl:33
│  [2] shell_parse(str::String, interpolate::Bool; special::String)
│    @ Base ./shell.jl:100
│  [3] @cmd(__source__::LineNumberNode, __module__::Module, str::Any)
│    @ Base ./cmd.jl:389
│  [4] include(fname::String)
│    @ Base.MainInclude ./client.jl:444
│  [5] top-level scope
│    @ none:5
│ in expression starting at /home/pkgeval/.julia/packages/Gym/exeFO/deps/build.jl:6
│ in expression starting at /home/pkgeval/.julia/packages/Gym/exeFO/deps/build.jl:1
└ @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:936
    Testing Gym
Status `/tmp/jl_myDQzq/Project.toml`
  [b0807396] Gym v1.1.4
  [438e738f] PyCall v1.91.4
  [8dfed614] Test
Status `/tmp/jl_myDQzq/Manifest.toml`
  [8f4d0f93] Conda v1.4.1
  [b0807396] Gym v1.1.4
  [682c06a0] JSON v0.21.0
  [1914dd2f] MacroTools v0.5.5
  [69de0a69] Parsers v1.0.7
  [438e738f] PyCall v1.91.4
  [81def892] VersionParsing v1.2.0
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [de0858da] Printf
  [9a3f8284] Random
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [4ec0a83e] Unicode
ERROR: LoadError: InitError: PyError (PyImport_ImportModule

The Python package gym could not be found by pyimport. Usually this means
that you did not install gym in the Python version being used by PyCall.

PyCall is currently configured to use the Python version at:

/usr/bin/python3

and you should use whatever mechanism you usually use (apt-get, pip, conda,
etcetera) to install the Python package containing the gym module.

One alternative is to re-configure PyCall to use a different Python
version on your system: set ENV["PYTHON"] to the path/name of the python
executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.

Another alternative is to configure PyCall to use a Julia-specific Python
distribution via the Conda.jl package (which installs a private Anaconda
Python distribution), which has the advantage that packages can be installed
and kept up-to-date via Julia.  As explained in the PyCall documentation,
set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
To install the gym module, you can use `pyimport_conda("gym", PKG)`,
where PKG is the Anaconda package the contains the module gym,
or alternatively you can use the Conda package directly (via
`using Conda` followed by `Conda.add` etcetera).

) <class 'ModuleNotFoundError'>
ModuleNotFoundError("No module named 'gym'",)

Stacktrace:
 [1] pyimport(name::String)
   @ PyCall ~/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
 [2] __init__()
   @ Gym ~/.julia/packages/Gym/exeFO/src/Gym.jl:10
 [3] _include_from_serialized(path::String, depmods::Vector{Any})
   @ Base ./loading.jl:697
 [4] _require_from_serialized(path::String)
   @ Base ./loading.jl:749
 [5] _require(pkg::Base.PkgId)
   @ Base ./loading.jl:1040
 [6] require(uuidkey::Base.PkgId)
   @ Base ./loading.jl:928
 [7] require(into::Module, mod::Symbol)
   @ Base ./loading.jl:923
 [8] include(fname::String)
   @ Base.MainInclude ./client.jl:444
 [9] top-level scope
   @ none:6
during initialization of module Gym
in expression starting at /home/pkgeval/.julia/packages/Gym/exeFO/test/runtests.jl:1
ERROR: Package Gym errored during testing
Stacktrace:
  [1] pkgerror(::String, ::Vararg{String,N} where N)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1561
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:327
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:314
  [5] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#60
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:16
