Julia Version 1.6.0-DEV.483
Commit e36194a437 (2020-07-17 16:26 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed CpuId ─────────────── v0.2.2
  Installed UnPack ────────────── v1.0.1
  Installed SIMDPirates ───────── v0.8.16
  Installed VectorizationBase ─── v0.12.24
  Installed SLEEFPirates ──────── v0.5.4
  Installed OffsetArrays ──────── v1.1.1
  Installed DocStringExtensions ─ v0.8.2
  Installed LoopVectorization ─── v0.8.18
Updating `~/.julia/environments/v1.6/Project.toml`
  [bdcacae8] + LoopVectorization v0.8.18
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [adafc99b] + CpuId v0.2.2
  [ffbed154] + DocStringExtensions v0.8.2
  [bdcacae8] + LoopVectorization v0.8.18
  [6fe1bfb0] + OffsetArrays v1.1.1
  [21efa798] + SIMDPirates v0.8.16
  [476501e8] + SLEEFPirates v0.5.4
  [3a884ed6] + UnPack v1.0.1
  [3d5dd08c] + VectorizationBase v0.12.24
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building SLEEFPirates → `~/.julia/packages/SLEEFPirates/QzifL/deps/build.log`
    Testing LoopVectorization
Status `/tmp/jl_kHIacV/Project.toml`
  [ffbed154] DocStringExtensions v0.8.2
  [bdcacae8] LoopVectorization v0.8.18
  [6fe1bfb0] OffsetArrays v1.1.1
  [21efa798] SIMDPirates v0.8.16
  [476501e8] SLEEFPirates v0.5.4
  [3a884ed6] UnPack v1.0.1
  [3d5dd08c] VectorizationBase v0.12.24
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [8dfed614] Test
Status `/tmp/jl_kHIacV/Manifest.toml`
  [adafc99b] CpuId v0.2.2
  [ffbed154] DocStringExtensions v0.8.2
  [bdcacae8] LoopVectorization v0.8.18
  [6fe1bfb0] OffsetArrays v1.1.1
  [21efa798] SIMDPirates v0.8.16
  [476501e8] SLEEFPirates v0.5.4
  [3a884ed6] UnPack v1.0.1
  [3d5dd08c] VectorizationBase v0.12.24
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
LoopVectorization.REGISTER_COUNT = 32
#= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/printmethods.jl:2 =# @__LINE__() = 2
  5.484903 seconds (2.79 M allocations: 158.147 MiB, 1.32% gc time)
(Float64, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/fallback.jl:4 =# @__LINE__()) = (Float64, 4)
 23.228015 seconds (11.89 M allocations: 676.862 MiB, 2.99% gc time)
  0.133992 seconds (75.50 k allocations: 4.628 MiB)
  8.387340 seconds (7.28 M allocations: 415.162 MiB, 2.12% gc time)
  1.917704 seconds (2.19 M allocations: 123.744 MiB, 3.56% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/offsetarrays.jl:203 =# @__LINE__()) = (Float32, 203)
r = -1:1
r = -2:2
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/offsetarrays.jl:203 =# @__LINE__()) = (Float64, 203)
r = -1:1
r = -2:2
633.642678 seconds (299.89 M allocations: 24.301 GiB, 4.12% gc time)
(Float64, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/tensors.jl:51 =# @__LINE__()) = (Float64, 51)
 19.739761 seconds (14.14 M allocations: 830.664 MiB, 4.62% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/map.jl:4 =# @__LINE__()) = (Float32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/map.jl:4 =# @__LINE__()) = (Float64, 4)
  6.127460 seconds (7.10 M allocations: 405.928 MiB, 2.48% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/filter.jl:4 =# @__LINE__()) = (Float32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/filter.jl:4 =# @__LINE__()) = (Float64, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/filter.jl:4 =# @__LINE__()) = (Int32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/filter.jl:4 =# @__LINE__()) = (Int64, 4)
  1.014204 seconds (808.75 k allocations: 47.884 MiB, 1.97% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/mapreduce.jl:19 =# @__LINE__()) = (Int32, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/mapreduce.jl:19 =# @__LINE__()) = (Int64, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/mapreduce.jl:19 =# @__LINE__()) = (Float32, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/mapreduce.jl:19 =# @__LINE__()) = (Float64, 19)
171.635624 seconds (442.75 M allocations: 29.301 GiB, 7.29% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/ifelsemasks.jl:321 =# @__LINE__()) = (Float32, 321)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/ifelsemasks.jl:321 =# @__LINE__()) = (Float64, 321)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/ifelsemasks.jl:321 =# @__LINE__()) = (Int32, 321)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/ifelsemasks.jl:321 =# @__LINE__()) = (Int64, 321)
 61.645951 seconds (45.50 M allocations: 2.534 GiB, 5.91% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/dot.jl:220 =# @__LINE__()) = (Float32, 220)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/dot.jl:220 =# @__LINE__()) = (Float64, 220)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/dot.jl:220 =# @__LINE__()) = (Int32, 220)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/dot.jl:220 =# @__LINE__()) = (Int64, 220)
 37.912141 seconds (37.97 M allocations: 2.147 GiB, 3.05% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/special.jl:339 =# @__LINE__()) = (Float32, 339)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/special.jl:339 =# @__LINE__()) = (Float64, 339)
 12.830067 seconds (12.11 M allocations: 658.020 MiB, 1.83% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/gemv.jl:211 =# @__LINE__()) = (Float32, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/gemv.jl:211 =# @__LINE__()) = (Float64, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/gemv.jl:211 =# @__LINE__()) = (Int32, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/gemv.jl:211 =# @__LINE__()) = (Int64, 211)
 89.055824 seconds (76.22 M allocations: 3.764 GiB, 3.40% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/miscellaneous.jl:759 =# @__LINE__()) = (Float32, 759)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/miscellaneous.jl:759 =# @__LINE__()) = (Float64, 759)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/miscellaneous.jl:1032 =# @__LINE__()) = (Float32, 1032)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/miscellaneous.jl:1032 =# @__LINE__()) = (Float64, 1032)
137.801628 seconds (162.48 M allocations: 8.685 GiB, 6.96% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/copy.jl:114 =# @__LINE__()) = (Float32, 114)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/copy.jl:114 =# @__LINE__()) = (Float64, 114)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/copy.jl:114 =# @__LINE__()) = (Int32, 114)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/copy.jl:114 =# @__LINE__()) = (Int64, 114)
 10.150683 seconds (8.21 M allocations: 444.265 MiB, 2.73% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/broadcast.jl:5 =# @__LINE__()) = (Float32, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/broadcast.jl:5 =# @__LINE__()) = (Float64, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/broadcast.jl:5 =# @__LINE__()) = (Int32, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/broadcast.jl:5 =# @__LINE__()) = (Int64, 5)
333.194986 seconds (133.20 M allocations: 8.197 GiB, 2.94% gc time)
OPS = Tuple{:numericconstant,Symbol("##zero#13591"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f16f753f150, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f16f753f380, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f16f753f3f0, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#13591"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f16f88eb850, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f16f88eb8c0, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f16f8a24ec0, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#13591"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f172aac2ac0, (16,)), VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f172aac2b30, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f172aac2ba0, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#13591"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f17a0e53460, (16,)), VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007f17a0e534d0, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007f17a0e53540, (16,)))
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/gemm.jl:638 =# @__LINE__()) = (Float32, 638)
199.919250 seconds (100.67 M allocations: 6.729 GiB, 4.55% gc time)
 58.549354 seconds (41.63 M allocations: 2.594 GiB, 3.56% gc time)
 79.526409 seconds (42.26 M allocations: 2.673 GiB, 4.93% gc time)
 49.564254 seconds (34.95 M allocations: 2.359 GiB, 6.56% gc time)
 19.754176 seconds (12.96 M allocations: 866.312 MiB, 3.69% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/gemm.jl:638 =# @__LINE__()) = (Float64, 638)
203.031409 seconds (99.97 M allocations: 6.694 GiB, 4.77% gc time)
 63.061768 seconds (41.51 M allocations: 2.589 GiB, 3.76% gc time)
 79.446790 seconds (43.25 M allocations: 2.766 GiB, 3.67% gc time)
 47.419626 seconds (34.91 M allocations: 2.357 GiB, 5.17% gc time)
 19.552817 seconds (12.83 M allocations: 858.463 MiB, 3.77% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/gemm.jl:638 =# @__LINE__()) = (Int32, 638)
242.047663 seconds (108.04 M allocations: 7.030 GiB, 3.48% gc time)
 76.047643 seconds (43.60 M allocations: 2.662 GiB, 4.14% gc time)
 99.042960 seconds (42.98 M allocations: 2.653 GiB, 4.07% gc time)
 65.127309 seconds (36.93 M allocations: 2.428 GiB, 4.22% gc time)
 23.354658 seconds (13.29 M allocations: 873.215 MiB, 3.05% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/gemm.jl:638 =# @__LINE__()) = (Int64, 638)
254.901796 seconds (107.81 M allocations: 7.021 GiB, 3.55% gc time)
 83.669061 seconds (43.52 M allocations: 2.660 GiB, 3.51% gc time)
101.672557 seconds (43.94 M allocations: 2.745 GiB, 2.96% gc time)
 66.636009 seconds (36.90 M allocations: 2.427 GiB, 4.53% gc time)
 23.217893 seconds (13.29 M allocations: 873.077 MiB, 3.33% gc time)
1869.140690 seconds (958.64 M allocations: 61.980 GiB, 4.03% gc time)
Test Summary:        | Pass  Total
LoopVectorization.jl | 1479   1479
3424.086290 seconds (2.22 G allocations: 144.661 GiB, 4.20% gc time)
    Testing LoopVectorization tests passed 
