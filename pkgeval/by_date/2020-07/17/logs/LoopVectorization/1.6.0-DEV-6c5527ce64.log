Julia Version 1.6.0-DEV.476
Commit 6c5527ce64 (2020-07-16 17:28 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed CpuId ─────────────── v0.2.2
  Installed UnPack ────────────── v1.0.1
  Installed SIMDPirates ───────── v0.8.16
  Installed VectorizationBase ─── v0.12.24
  Installed OffsetArrays ──────── v1.1.1
  Installed SLEEFPirates ──────── v0.5.4
  Installed DocStringExtensions ─ v0.8.2
  Installed LoopVectorization ─── v0.8.18
Updating `~/.julia/environments/v1.6/Project.toml`
  [bdcacae8] + LoopVectorization v0.8.18
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [adafc99b] + CpuId v0.2.2
  [ffbed154] + DocStringExtensions v0.8.2
  [bdcacae8] + LoopVectorization v0.8.18
  [6fe1bfb0] + OffsetArrays v1.1.1
  [21efa798] + SIMDPirates v0.8.16
  [476501e8] + SLEEFPirates v0.5.4
  [3a884ed6] + UnPack v1.0.1
  [3d5dd08c] + VectorizationBase v0.12.24
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building SLEEFPirates → `~/.julia/packages/SLEEFPirates/QzifL/deps/build.log`
    Testing LoopVectorization
Status `/tmp/jl_tZU7eq/Project.toml`
  [ffbed154] DocStringExtensions v0.8.2
  [bdcacae8] LoopVectorization v0.8.18
  [6fe1bfb0] OffsetArrays v1.1.1
  [21efa798] SIMDPirates v0.8.16
  [476501e8] SLEEFPirates v0.5.4
  [3a884ed6] UnPack v1.0.1
  [3d5dd08c] VectorizationBase v0.12.24
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [8dfed614] Test
Status `/tmp/jl_tZU7eq/Manifest.toml`
  [adafc99b] CpuId v0.2.2
  [ffbed154] DocStringExtensions v0.8.2
  [bdcacae8] LoopVectorization v0.8.18
  [6fe1bfb0] OffsetArrays v1.1.1
  [21efa798] SIMDPirates v0.8.16
  [476501e8] SLEEFPirates v0.5.4
  [3a884ed6] UnPack v1.0.1
  [3d5dd08c] VectorizationBase v0.12.24
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
LoopVectorization.REGISTER_COUNT = 32
#= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/printmethods.jl:2 =# @__LINE__() = 2
  5.244612 seconds (2.80 M allocations: 158.798 MiB, 1.38% gc time)
(Float64, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/fallback.jl:4 =# @__LINE__()) = (Float64, 4)
 24.298377 seconds (11.90 M allocations: 678.304 MiB, 3.08% gc time)
  0.133000 seconds (75.53 k allocations: 4.629 MiB)
  8.403262 seconds (7.27 M allocations: 415.137 MiB, 1.61% gc time)
  1.976373 seconds (2.19 M allocations: 123.939 MiB, 3.91% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/offsetarrays.jl:203 =# @__LINE__()) = (Float32, 203)
r = -1:1
r = -2:2
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/offsetarrays.jl:203 =# @__LINE__()) = (Float64, 203)
r = -1:1
r = -2:2
701.840106 seconds (299.88 M allocations: 24.302 GiB, 3.73% gc time)
(Float64, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/tensors.jl:51 =# @__LINE__()) = (Float64, 51)
 22.413528 seconds (14.14 M allocations: 830.831 MiB, 5.17% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/map.jl:4 =# @__LINE__()) = (Float32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/map.jl:4 =# @__LINE__()) = (Float64, 4)
  8.050878 seconds (7.10 M allocations: 406.088 MiB, 2.58% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/filter.jl:4 =# @__LINE__()) = (Float32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/filter.jl:4 =# @__LINE__()) = (Float64, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/filter.jl:4 =# @__LINE__()) = (Int32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/filter.jl:4 =# @__LINE__()) = (Int64, 4)
  1.124118 seconds (808.80 k allocations: 47.913 MiB)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/mapreduce.jl:19 =# @__LINE__()) = (Int32, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/mapreduce.jl:19 =# @__LINE__()) = (Int64, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/mapreduce.jl:19 =# @__LINE__()) = (Float32, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/mapreduce.jl:19 =# @__LINE__()) = (Float64, 19)
190.449856 seconds (442.76 M allocations: 29.302 GiB, 6.97% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/ifelsemasks.jl:321 =# @__LINE__()) = (Float32, 321)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/ifelsemasks.jl:321 =# @__LINE__()) = (Float64, 321)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/ifelsemasks.jl:321 =# @__LINE__()) = (Int32, 321)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/ifelsemasks.jl:321 =# @__LINE__()) = (Int64, 321)
 69.713984 seconds (45.50 M allocations: 2.534 GiB, 6.38% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/dot.jl:220 =# @__LINE__()) = (Float32, 220)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/dot.jl:220 =# @__LINE__()) = (Float64, 220)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/dot.jl:220 =# @__LINE__()) = (Int32, 220)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/dot.jl:220 =# @__LINE__()) = (Int64, 220)
 45.112774 seconds (37.97 M allocations: 2.147 GiB, 3.77% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/special.jl:339 =# @__LINE__()) = (Float32, 339)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/special.jl:339 =# @__LINE__()) = (Float64, 339)
 13.885697 seconds (12.11 M allocations: 658.135 MiB, 2.54% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/gemv.jl:211 =# @__LINE__()) = (Float32, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/gemv.jl:211 =# @__LINE__()) = (Float64, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/gemv.jl:211 =# @__LINE__()) = (Int32, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/gemv.jl:211 =# @__LINE__()) = (Int64, 211)
 95.911734 seconds (76.22 M allocations: 3.764 GiB, 2.72% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/miscellaneous.jl:759 =# @__LINE__()) = (Float32, 759)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/miscellaneous.jl:759 =# @__LINE__()) = (Float64, 759)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/miscellaneous.jl:1032 =# @__LINE__()) = (Float32, 1032)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/miscellaneous.jl:1032 =# @__LINE__()) = (Float64, 1032)
151.012055 seconds (162.47 M allocations: 8.684 GiB, 7.21% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/copy.jl:114 =# @__LINE__()) = (Float32, 114)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/copy.jl:114 =# @__LINE__()) = (Float64, 114)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/copy.jl:114 =# @__LINE__()) = (Int32, 114)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/copy.jl:114 =# @__LINE__()) = (Int64, 114)
 10.251322 seconds (8.21 M allocations: 444.339 MiB, 1.83% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/broadcast.jl:5 =# @__LINE__()) = (Float32, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/broadcast.jl:5 =# @__LINE__()) = (Float64, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/broadcast.jl:5 =# @__LINE__()) = (Int32, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/broadcast.jl:5 =# @__LINE__()) = (Int64, 5)
383.500901 seconds (133.21 M allocations: 8.198 GiB, 2.72% gc time)
OPS = Tuple{:numericconstant,Symbol("##zero#13591"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fb6aac8bfc0, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fb6aac60210, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fb6aac60280, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#13591"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007fb6aef90520, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fb6aef90590, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fb6aef95a90, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#13591"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fb6af4c6040, (16,)), VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007fb6af4c60b0, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fb6af4c6120, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#13591"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007fb6afbc9470, (16,)), VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007fb6afbc94e0, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fb6afbc9550, (16,)))
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/gemm.jl:638 =# @__LINE__()) = (Float32, 638)
204.717400 seconds (100.68 M allocations: 6.731 GiB, 4.58% gc time)
 65.077431 seconds (41.63 M allocations: 2.594 GiB, 4.19% gc time)
 78.911279 seconds (42.25 M allocations: 2.673 GiB, 3.63% gc time)
 52.561970 seconds (34.95 M allocations: 2.359 GiB, 5.98% gc time)
 22.728021 seconds (12.96 M allocations: 866.311 MiB, 6.59% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/gemm.jl:638 =# @__LINE__()) = (Float64, 638)
209.199010 seconds (99.97 M allocations: 6.696 GiB, 4.85% gc time)
 65.017611 seconds (41.51 M allocations: 2.589 GiB, 5.63% gc time)
 82.688330 seconds (43.24 M allocations: 2.765 GiB, 4.04% gc time)
 49.622225 seconds (34.91 M allocations: 2.357 GiB, 5.67% gc time)
 20.792200 seconds (12.83 M allocations: 858.463 MiB, 3.59% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/gemm.jl:638 =# @__LINE__()) = (Int32, 638)
270.613587 seconds (108.04 M allocations: 7.031 GiB, 3.70% gc time)
 79.298791 seconds (43.60 M allocations: 2.662 GiB, 2.43% gc time)
 99.780137 seconds (42.98 M allocations: 2.653 GiB, 3.04% gc time)
 72.379852 seconds (36.93 M allocations: 2.428 GiB, 4.73% gc time)
 23.993279 seconds (13.29 M allocations: 873.212 MiB, 3.10% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/ISCVZ/test/gemm.jl:638 =# @__LINE__()) = (Int64, 638)
264.393122 seconds (107.81 M allocations: 7.022 GiB, 3.81% gc time)
 78.473809 seconds (43.52 M allocations: 2.660 GiB, 3.69% gc time)
