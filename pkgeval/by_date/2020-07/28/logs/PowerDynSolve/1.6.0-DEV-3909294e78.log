Julia Version 1.6.0-DEV.549
Commit 3909294e78 (2020-07-28 17:02 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed GenericSVD ─────────────────── v0.2.2
  Installed Requires ───────────────────── v0.5.2
  Installed CpuId ──────────────────────── v0.2.2
  Installed PowerDynSolve ──────────────── v1.0.0
  Installed TableTraits ────────────────── v1.0.0
  Installed NaNMath ────────────────────── v0.3.4
  Installed ArrayInterface ─────────────── v2.11.0
  Installed MacroTools ─────────────────── v0.5.5
  Installed RecipesBase ────────────────── v0.7.0
  Installed PowerDynBase ───────────────── v1.0.0
  Installed FunctionWrappers ───────────── v1.1.1
  Installed PowerDynOperationPoint ─────── v1.0.0
  Installed DataStructures ─────────────── v0.17.19
  Installed DiffEqDiffTools ────────────── v1.7.0
  Installed DocStringExtensions ────────── v0.8.2
  Installed SIMDPirates ────────────────── v0.8.21
  Installed Distances ──────────────────── v0.9.0
  Installed Lazy ───────────────────────── v0.15.0
  Installed ExponentialUtilities ───────── v1.6.0
  Installed MuladdMacro ────────────────── v0.2.2
  Installed IteratorInterfaceExtensions ── v1.0.0
  Installed RecursiveArrayTools ────────── v1.2.1
  Installed FiniteDiff ─────────────────── v2.5.1
  Installed OffsetArrays ───────────────── v1.1.2
  Installed DiffEqBase ─────────────────── v5.16.5
  Installed OrdinaryDiffEq ─────────────── v5.10.0
  Installed LoopVectorization ──────────── v0.8.20
  Installed DiffRules ──────────────────── v1.0.1
  Installed ForwardDiff ────────────────── v0.10.12
  Installed DiffResults ────────────────── v1.0.2
  Installed StaticArrays ───────────────── v0.11.1
  Installed TreeViews ──────────────────── v0.3.0
  Installed SpecialFunctions ───────────── v0.10.3
  Installed Roots ──────────────────────── v0.8.4
  Installed DiffEqOperators ────────────── v3.5.0
  Installed UnPack ─────────────────────── v1.0.1
  Installed CommonSubexpressions ───────── v0.3.0
  Installed RecursiveFactorization ─────── v0.1.4
  Installed OrderedCollections ─────────── v1.3.0
  Installed VectorizationBase ──────────── v0.12.29
  Installed IterativeSolvers ───────────── v0.8.4
  Installed Parameters ─────────────────── v0.11.0
  Installed SLEEFPirates ───────────────── v0.5.5
  Installed NLsolve ────────────────────── v4.4.0
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed Compat ─────────────────────── v3.13.0
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed LineSearches ───────────────── v7.0.1
  Installed NLSolversBase ──────────────── v7.6.1
  Installed Reexport ───────────────────── v0.2.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [b2d36aa5] + PowerDynSolve v1.0.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [4fba245c] + ArrayInterface v2.11.0
  [bbf7d656] + CommonSubexpressions v0.3.0
  [34da2185] + Compat v3.13.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [adafc99b] + CpuId v0.2.2
  [864edb3b] + DataStructures v0.17.19
  [2b5f629d] + DiffEqBase v5.16.5
  [01453d9d] + DiffEqDiffTools v1.7.0
  [9fdde737] + DiffEqOperators v3.5.0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [b4f34e82] + Distances v0.9.0
  [ffbed154] + DocStringExtensions v0.8.2
  [d4d017d3] + ExponentialUtilities v1.6.0
  [6a86dc24] + FiniteDiff v2.5.1
  [f6369f11] + ForwardDiff v0.10.12
  [069b7b12] + FunctionWrappers v1.1.1
  [01680d73] + GenericSVD v0.2.2
  [42fd0dbc] + IterativeSolvers v0.8.4
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [50d2b5c4] + Lazy v0.15.0
  [d3d80556] + LineSearches v7.0.1
  [bdcacae8] + LoopVectorization v0.8.20
  [1914dd2f] + MacroTools v0.5.5
  [46d2c3a1] + MuladdMacro v0.2.2
  [d41bc354] + NLSolversBase v7.6.1
  [2774e3e8] + NLsolve v4.4.0
  [77ba4419] + NaNMath v0.3.4
  [6fe1bfb0] + OffsetArrays v1.1.2
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.3.0
  [1dea7af3] + OrdinaryDiffEq v5.10.0
  [d96e819e] + Parameters v0.11.0
  [7ffb48b1] + PowerDynBase v1.0.0
  [95be4243] + PowerDynOperationPoint v1.0.0
  [b2d36aa5] + PowerDynSolve v1.0.0
  [3cdcf5f2] + RecipesBase v0.7.0
  [731186ca] + RecursiveArrayTools v1.2.1
  [f2c3362d] + RecursiveFactorization v0.1.4
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v0.5.2
  [f2b01f46] + Roots v0.8.4
  [21efa798] + SIMDPirates v0.8.21
  [476501e8] + SLEEFPirates v0.5.5
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.11.1
  [3783bdb8] + TableTraits v1.0.0
  [a2a6695c] + TreeViews v0.3.0
  [3a884ed6] + UnPack v1.0.1
  [3d5dd08c] + VectorizationBase v0.12.29
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building SLEEFPirates → `~/.julia/packages/SLEEFPirates/jGsib/deps/build.log`
    Testing PowerDynSolve
Status `/tmp/jl_ZQIpfh/Project.toml`
  [a8cc5b0e] Crayons v4.0.3
  [2b5f629d] DiffEqBase v5.16.5
  [50d2b5c4] Lazy v0.15.0
  [2774e3e8] NLsolve v4.4.0
  [1dea7af3] OrdinaryDiffEq v5.10.0
  [d96e819e] Parameters v0.11.0
  [7ffb48b1] PowerDynBase v1.0.0
  [95be4243] PowerDynOperationPoint v1.0.0
  [b2d36aa5] PowerDynSolve v1.0.0
  [3cdcf5f2] RecipesBase v0.7.0
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [8dfed614] Test
Status `/tmp/jl_ZQIpfh/Manifest.toml`
  [4fba245c] ArrayInterface v2.11.0
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.13.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [adafc99b] CpuId v0.2.2
  [a8cc5b0e] Crayons v4.0.3
  [864edb3b] DataStructures v0.17.19
  [2b5f629d] DiffEqBase v5.16.5
  [01453d9d] DiffEqDiffTools v1.7.0
  [9fdde737] DiffEqOperators v3.5.0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [b4f34e82] Distances v0.9.0
  [ffbed154] DocStringExtensions v0.8.2
  [d4d017d3] ExponentialUtilities v1.6.0
  [6a86dc24] FiniteDiff v2.5.1
  [f6369f11] ForwardDiff v0.10.12
  [069b7b12] FunctionWrappers v1.1.1
  [01680d73] GenericSVD v0.2.2
  [42fd0dbc] IterativeSolvers v0.8.4
  [82899510] IteratorInterfaceExtensions v1.0.0
  [50d2b5c4] Lazy v0.15.0
  [d3d80556] LineSearches v7.0.1
  [bdcacae8] LoopVectorization v0.8.20
  [1914dd2f] MacroTools v0.5.5
  [46d2c3a1] MuladdMacro v0.2.2
  [d41bc354] NLSolversBase v7.6.1
  [2774e3e8] NLsolve v4.4.0
  [77ba4419] NaNMath v0.3.4
  [6fe1bfb0] OffsetArrays v1.1.2
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.3.0
  [1dea7af3] OrdinaryDiffEq v5.10.0
  [d96e819e] Parameters v0.11.0
  [7ffb48b1] PowerDynBase v1.0.0
  [95be4243] PowerDynOperationPoint v1.0.0
  [b2d36aa5] PowerDynSolve v1.0.0
  [3cdcf5f2] RecipesBase v0.7.0
  [731186ca] RecursiveArrayTools v1.2.1
  [f2c3362d] RecursiveFactorization v0.1.4
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v0.5.2
  [f2b01f46] Roots v0.8.4
  [21efa798] SIMDPirates v0.8.21
  [476501e8] SLEEFPirates v0.5.5
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.11.1
  [3783bdb8] TableTraits v1.0.0
  [a2a6695c] TreeViews v0.3.0
  [3a884ed6] UnPack v1.0.1
  [3d5dd08c] VectorizationBase v0.12.29
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
┌ Warning: `@get!(dict, key, default)` at /home/pkgeval/.julia/packages/Requires/9Jse8/src/require.jl:11 is deprecated, use `get!(()->default, dict, key)` instead.
└ @ Base deprecated.jl:204
WARNING: Method definition combine_axes(Any, Any) in module Broadcast at broadcast.jl:484 overwritten in module DiffEqBase at /home/pkgeval/.julia/packages/DiffEqBase/DqkH4/src/diffeqfastbc.jl:18.
  ** incremental compilation may be fatally broken for this module **

WARNING: Compat.TypeUtils is deprecated, call the respective Base functions directly
  likely near /home/pkgeval/.julia/packages/DiffEqBase/DqkH4/src/utils.jl:47
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/DiffEqBase/DqkH4/src/utils.jl:47
WARNING: importing deprecated binding TypeUtils.typename into DiffEqBase.
WARNING: Compat.TypeUtils is deprecated, call the respective Base functions directly
  likely near /home/pkgeval/.julia/packages/OrdinaryDiffEq/nvFNT/src/OrdinaryDiffEq.jl:4
WARNING: Method definition combine_axes(Any, Any) in module Broadcast at broadcast.jl:484 overwritten in module DiffEqBase at /home/pkgeval/.julia/packages/DiffEqBase/DqkH4/src/diffeqfastbc.jl:18.
  ** incremental compilation may be fatally broken for this module **

WARNING: Compat.TypeUtils is deprecated, call the respective Base functions directly
  likely near /home/pkgeval/.julia/packages/DiffEqOperators/YrhHv/src/DiffEqOperators.jl:4
WARNING: Method definition combine_axes(Any, Any) in module Broadcast at broadcast.jl:484 overwritten in module DiffEqBase at /home/pkgeval/.julia/packages/DiffEqBase/DqkH4/src/diffeqfastbc.jl:18.
  ** incremental compilation may be fatally broken for this module **

WARNING: Compat.TypeUtils is deprecated, call the respective Base functions directly
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/src/PowerDynSolve.jl:8
WARNING: Method definition combine_axes(Any, Any) in module Broadcast at broadcast.jl:484 overwritten in module DiffEqBase at /home/pkgeval/.julia/packages/DiffEqBase/DqkH4/src/diffeqfastbc.jl:18.
  ** incremental compilation may be fatally broken for this module **

WARNING: Compat.TypeUtils is deprecated, call the respective Base functions directly
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:1
random_seed = 1234 = 1234
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
in parameterless_type at /home/pkgeval/.julia/packages/DiffEqBase/DqkH4/src/utils.jl
Integration Tests: 401.837036766 s
random_seed = 1234 = 1234
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6
    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:847
    [2] copyto_unaliased!(deststyle::IndexLinear, dest::Matrix{Float64}, srcstyle::IndexCartesian, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:925
    [3] copyto!
      @ ./abstractarray.jl:899 [inlined]
    [4] copyto_axcheck!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:1005
    [5] Array
      @ ./array.jl:562 [inlined]
    [6] Array
      @ ./boot.jl:451 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:554
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::UnitRange{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [11] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [12] macro expansion
      @ ./timing.jl:233 [inlined]
   [13] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [14] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1189 [inlined]
   [15] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [16] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [17] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
  
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6
    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:847
    [2] copyto_unaliased!(deststyle::IndexLinear, dest::Matrix{Float64}, srcstyle::IndexCartesian, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:925
    [3] copyto!
      @ ./abstractarray.jl:899 [inlined]
    [4] copyto_axcheck!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:1005
    [5] Array
      @ ./array.jl:562 [inlined]
    [6] Array
      @ ./boot.jl:451 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:554
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Colon, ::Symbol; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [11] GridSolution
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71 [inlined]
   [12] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, #unused#::Type{Val{:i}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:91
   [13] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::UnitRange{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [14] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [16] macro expansion
      @ ./timing.jl:233 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1189 [inlined]
   [19] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [20] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [21] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
  
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6
    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:847
    [2] copyto_unaliased!(deststyle::IndexLinear, dest::Matrix{Float64}, srcstyle::IndexCartesian, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:925
    [3] copyto!
      @ ./abstractarray.jl:899 [inlined]
    [4] copyto_axcheck!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:1005
    [5] Array
      @ ./array.jl:562 [inlined]
    [6] Array
      @ ./boot.jl:451 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:554
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::UnitRange{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, #unused#::Type{Val{:s}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:95
   [11] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::UnitRange{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [12] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, #unused#::Type{Val{:p}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:96
   [13] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::UnitRange{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [14] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [16] macro expansion
      @ ./timing.jl:233 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1189 [inlined]
   [19] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [20] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [21] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
  
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6
    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:847
    [2] copyto_unaliased!(deststyle::IndexLinear, dest::Matrix{Float64}, srcstyle::IndexCartesian, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:925
    [3] copyto!
      @ ./abstractarray.jl:899 [inlined]
    [4] copyto_axcheck!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:1005
    [5] Array
      @ ./array.jl:562 [inlined]
    [6] Array
      @ ./boot.jl:451 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:554
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::UnitRange{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, #unused#::Type{Val{:v}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:89
   [11] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::UnitRange{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [12] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [13] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [14] macro expansion
      @ ./timing.jl:233 [inlined]
   [15] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [16] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1189 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [19] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
  
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6
    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:847
    [2] copyto_unaliased!(deststyle::IndexLinear, dest::Matrix{Float64}, srcstyle::IndexCartesian, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:925
    [3] copyto!
      @ ./abstractarray.jl:899 [inlined]
    [4] copyto_axcheck!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:1005
    [5] Array
      @ ./array.jl:562 [inlined]
    [6] Array
      @ ./boot.jl:451 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:554
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, #unused#::Type{Val{:int}}, i::Int64)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:98
    [9] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, sym::Symbol, args::Int64)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [11] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [12] macro expansion
      @ ./timing.jl:233 [inlined]
   [13] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [14] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1189 [inlined]
   [15] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [16] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [17] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
  
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6
    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:847
    [2] copyto_unaliased!(deststyle::IndexLinear, dest::Matrix{Float64}, srcstyle::IndexCartesian, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:925
    [3] copyto!
      @ ./abstractarray.jl:899 [inlined]
    [4] copyto_axcheck!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:1005
    [5] Array
      @ ./array.jl:562 [inlined]
    [6] Array
      @ ./boot.jl:451 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:554
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, #unused#::Type{Val{:int}}, i::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:98
    [9] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, #unused#::Type{Val{:ω}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:100
   [10] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::UnitRange{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [11] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [12] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [13] macro expansion
      @ ./timing.jl:233 [inlined]
   [14] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [15] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1189 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [17] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [18] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
  
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:120
  Test threw exception
  Expression: sol(t, n, :int, 1) == sol(t, n, :ω)
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6
    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:847
    [2] copyto_unaliased!(deststyle::IndexLinear, dest::Matrix{Float64}, srcstyle::IndexCartesian, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:925
    [3] copyto!
      @ ./abstractarray.jl:899 [inlined]
    [4] copyto_axcheck!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:1005
    [5] Array
      @ ./array.jl:562 [inlined]
    [6] Array
      @ ./boot.jl:451 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:554
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, #unused#::Type{Val{:int}}, i::Int64)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:98
    [9] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, sym::Symbol, args::Int64)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:120
   [11] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [12] macro expansion
      @ ./timing.jl:233 [inlined]
   [13] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [14] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1189 [inlined]
   [15] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [16] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [17] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
  
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6
    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:847
    [2] copyto_unaliased!(deststyle::IndexLinear, dest::Matrix{Float64}, srcstyle::IndexCartesian, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:925
    [3] copyto!
      @ ./abstractarray.jl:899 [inlined]
    [4] copyto_axcheck!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:1005
    [5] Array
      @ ./array.jl:562 [inlined]
    [6] Array
      @ ./boot.jl:451 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:554
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Colon, ::Symbol; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [11] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Colon, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [12] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [13] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [14] macro expansion
      @ ./timing.jl:233 [inlined]
   [15] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [16] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1189 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [19] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
  
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6
    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:847
    [2] copyto_unaliased!(deststyle::IndexLinear, dest::Matrix{Float64}, srcstyle::IndexCartesian, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:925
    [3] copyto!
      @ ./abstractarray.jl:899 [inlined]
    [4] copyto_axcheck!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:1005
    [5] Array
      @ ./array.jl:562 [inlined]
    [6] Array
      @ ./boot.jl:451 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:554
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Colon, ::Symbol; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [11] GridSolution
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71 [inlined]
   [12] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:i}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:91
   [13] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [14] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Colon, ::Symbol; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [15] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Colon, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [16] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [17] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [18] macro expansion
      @ ./timing.jl:233 [inlined]
   [19] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [20] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1189 [inlined]
   [21] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [22] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [23] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
  
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6
    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:847
    [2] copyto_unaliased!(deststyle::IndexLinear, dest::Matrix{Float64}, srcstyle::IndexCartesian, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:925
    [3] copyto!
      @ ./abstractarray.jl:899 [inlined]
    [4] copyto_axcheck!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:1005
    [5] Array
      @ ./array.jl:562 [inlined]
    [6] Array
      @ ./boot.jl:451 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:554
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:s}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:95
   [11] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [12] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:p}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:96
   [13] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [14] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Colon, ::Symbol; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [15] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Colon, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [16] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [17] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [18] macro expansion
      @ ./timing.jl:233 [inlined]
   [19] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [20] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1189 [inlined]
   [21] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [22] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [23] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
  
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6
    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:847
    [2] copyto_unaliased!(deststyle::IndexLinear, dest::Matrix{Float64}, srcstyle::IndexCartesian, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:925
    [3] copyto!
      @ ./abstractarray.jl:899 [inlined]
    [4] copyto_axcheck!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:1005
    [5] Array
      @ ./array.jl:562 [inlined]
    [6] Array
      @ ./boot.jl:451 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:554
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:v}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:89
   [11] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [12] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Colon, ::Symbol; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [13] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Colon, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [14] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [16] macro expansion
      @ ./timing.jl:233 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1189 [inlined]
   [19] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [20] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [21] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
  
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6
    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:847
    [2] copyto_unaliased!(deststyle::IndexLinear, dest::Matrix{Float64}, srcstyle::IndexCartesian, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:925
    [3] copyto!
      @ ./abstractarray.jl:899 [inlined]
    [4] copyto_axcheck!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:1005
    [5] Array
      @ ./array.jl:562 [inlined]
    [6] Array
      @ ./boot.jl:451 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:554
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:int}}, i::Int64)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:98
    [9] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, sym::Symbol, args::Int64)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Colon, sym::Symbol, args::Int64; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [11] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Colon, sym::Symbol, args::Int64)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [12] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [13] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [14] macro expansion
      @ ./timing.jl:233 [inlined]
   [15] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [16] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1189 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [19] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
  
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6
    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:847
    [2] copyto_unaliased!(deststyle::IndexLinear, dest::Matrix{Float64}, srcstyle::IndexCartesian, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:925
    [3] copyto!
      @ ./abstractarray.jl:899 [inlined]
    [4] copyto_axcheck!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:1005
    [5] Array
      @ ./array.jl:562 [inlined]
    [6] Array
      @ ./boot.jl:451 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:554
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:int}}, i::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:98
    [9] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:ω}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:100
   [10] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [11] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Colon, ::Symbol; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [12] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Colon, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [13] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [14] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [15] macro expansion
      @ ./timing.jl:233 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [17] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1189 [inlined]
   [18] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [19] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [20] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
  
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:120
  Test threw exception
  Expression: sol(t, n, :int, 1) == sol(t, n, :ω)
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6
    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:847
    [2] copyto_unaliased!(deststyle::IndexLinear, dest::Matrix{Float64}, srcstyle::IndexCartesian, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:925
    [3] copyto!
      @ ./abstractarray.jl:899 [inlined]
    [4] copyto_axcheck!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:1005
    [5] Array
      @ ./array.jl:562 [inlined]
    [6] Array
      @ ./boot.jl:451 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:554
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:int}}, i::Int64)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:98
    [9] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, sym::Symbol, args::Int64)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Colon, sym::Symbol, args::Int64; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [11] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Colon, sym::Symbol, args::Int64)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [12] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:120
   [13] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [14] macro expansion
      @ ./timing.jl:233 [inlined]
   [15] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [16] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1189 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [19] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
  
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6
    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:847
    [2] copyto_unaliased!(deststyle::IndexLinear, dest::Matrix{Float64}, srcstyle::IndexCartesian, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:925
    [3] copyto!
      @ ./abstractarray.jl:899 [inlined]
    [4] copyto_axcheck!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:1005
    [5] Array
      @ ./array.jl:562 [inlined]
    [6] Array
      @ ./boot.jl:451 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:554
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Colon, ::Symbol; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [11] GridSolution
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71 [inlined]
   [12] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Int64, #unused#::Type{Val{:i}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:91
   [13] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Int64, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [14] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [16] macro expansion
      @ ./timing.jl:233 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1189 [inlined]
   [19] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [20] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [21] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
  
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6
    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:847
    [2] copyto_unaliased!(deststyle::IndexLinear, dest::Matrix{Float64}, srcstyle::IndexCartesian, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:925
    [3] copyto!
      @ ./abstractarray.jl:899 [inlined]
    [4] copyto_axcheck!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:1005
    [5] Array
      @ ./array.jl:562 [inlined]
    [6] Array
      @ ./boot.jl:451 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:554
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Colon, ::Symbol; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [11] GridSolution
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71 [inlined]
   [12] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Int64, #unused#::Type{Val{:i}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:91
   [13] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Int64, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [14] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Int64, #unused#::Type{Val{:s}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:95
   [15] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Int64, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [16] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Int64, #unused#::Type{Val{:p}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:96
   [17] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Int64, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [18] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [19] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [20] macro expansion
      @ ./timing.jl:233 [inlined]
   [21] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [22] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1189 [inlined]
   [23] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [24] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [25] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
  
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6
    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:847
    [2] copyto_unaliased!(deststyle::IndexLinear, dest::Matrix{Float64}, srcstyle::IndexCartesian, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:925
    [3] copyto!
      @ ./abstractarray.jl:899 [inlined]
    [4] copyto_axcheck!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:1005
    [5] Array
      @ ./array.jl:562 [inlined]
    [6] Array
      @ ./boot.jl:451 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:554
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Colon, ::Symbol; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [11] GridSolution
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71 [inlined]
   [12] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Int64, #unused#::Type{Val{:i}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:91
   [13] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Int64, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [14] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [16] macro expansion
      @ ./timing.jl:233 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1189 [inlined]
   [19] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [20] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [21] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
  
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6
    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:847
    [2] copyto_unaliased!(deststyle::IndexLinear, dest::Matrix{Float64}, srcstyle::IndexCartesian, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:925
    [3] copyto!
      @ ./abstractarray.jl:899 [inlined]
    [4] copyto_axcheck!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:1005
    [5] Array
      @ ./array.jl:562 [inlined]
    [6] Array
      @ ./boot.jl:451 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:554
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Colon, ::Symbol; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [11] GridSolution
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71 [inlined]
   [12] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Int64, #unused#::Type{Val{:i}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:91
   [13] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Int64, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [14] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Int64, #unused#::Type{Val{:s}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:95
   [15] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Int64, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [16] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Int64, #unused#::Type{Val{:p}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:96
   [17] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Int64, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [18] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [19] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [20] macro expansion
      @ ./timing.jl:233 [inlined]
   [21] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [22] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1189 [inlined]
   [23] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [24] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [25] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
  
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
  Got exception outside of a @test
  LoadError: MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6
    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:847
    [2] copyto_unaliased!(deststyle::IndexLinear, dest::Matrix{Float64}, srcstyle::IndexCartesian, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:925
    [3] copyto!
      @ ./abstractarray.jl:899 [inlined]
    [4] copyto_axcheck!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:1005
    [5] Array
      @ ./array.jl:562 [inlined]
    [6] Array
      @ ./boot.jl:451 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:554
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:int}}, i::Vector{Int64})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:98
    [9] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, sym::Symbol, args::Vector{Int64})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Colon, sym::Symbol, args::Vector{Int64}; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [11] GridSolution
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71 [inlined]
   [12] (::var"#18#24"{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},PowerDynSolve.GridSolution})()
      @ Main /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:633
   [13] redirect_stderr(f::var"#18#24"{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},PowerDynSolve.GridSolution}, stream::IOStream)
      @ Base ./stream.jl:1224
   [14] #17
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:632 [inlined]
   [15] open(::var"#17#23"{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},PowerDynSolve.GridSolution}, ::String, ::Vararg{String,N} where N; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
      @ Base ./io.jl:330
   [16] open(::Function, ::String, ::String)
      @ Base ./io.jl:328
   [17] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:631
   [18] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:122
   [19] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [20] macro expansion
      @ ./timing.jl:233 [inlined]
   [21] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [22] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1189 [inlined]
   [23] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [24] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [25] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
   [26] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [27] top-level scope
      @ none:6
   [28] eval(m::Module, e::Any)
      @ Core ./boot.jl:340
   [29] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [30] _start()
      @ Base ./client.jl:484
  in expression starting at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:101
  
random_seed = 1234 = 1234
Plot Recipes Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
  Got exception outside of a @test
  LoadError: MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6
    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:847
    [2] copyto_unaliased!(deststyle::IndexLinear, dest::Matrix{Float64}, srcstyle::IndexCartesian, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:925
    [3] copyto!
      @ ./abstractarray.jl:899 [inlined]
    [4] copyto_axcheck!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:1005
    [5] Array
      @ ./array.jl:562 [inlined]
    [6] Array
      @ ./boot.jl:451 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64,2,Vector{Vector{Float64}},StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:554
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:v}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:89
   [11] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [12] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:129 [inlined]
   [13] apply_recipe(::Dict{Symbol,Any}, ::PowerDynSolve.GridSolution, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/RecipesBase/zBoFG/src/RecipesBase.jl:275
   [14] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/plotrecipes.jl:48
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [16] macro expansion
      @ ./timing.jl:233 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1189 [inlined]
   [19] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [20] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [21] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
   [22] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [23] top-level scope
      @ none:6
   [24] eval(m::Module, e::Any)
      @ Core ./boot.jl:340
   [25] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [26] _start()
      @ Base ./client.jl:484
  in expression starting at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/plotrecipes.jl:25
  
Test Summary:          | Pass  Error  Broken  Total
All Tests              |  124     20       2    146
  Integration Tests    |   12              2     14
  Grid Solutions Tests |  100     19            119
  Plot Recipes Tests   |   12      1             13
ERROR: LoadError: Some tests did not pass: 124 passed, 0 failed, 20 errored, 2 broken.
in expression starting at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:10
ERROR: Package PowerDynSolve errored during testing
Stacktrace:
  [1] pkgerror(::String, ::Vararg{String,N} where N)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1561
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:327
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:314
  [5] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#60
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:16
