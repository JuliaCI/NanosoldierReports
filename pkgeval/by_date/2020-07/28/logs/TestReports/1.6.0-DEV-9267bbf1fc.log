Julia Version 1.6.0-DEV.548
Commit 9267bbf1fc (2020-07-27 16:57 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed XML2_jll ───── v2.9.10+1
  Installed Libiconv_jll ─ v1.16.0+5
  Installed Zlib_jll ───── v1.2.11+14
  Installed EzXML ──────── v1.1.0
  Installed TestReports ── v0.2.2
Updating `~/.julia/environments/v1.6/Project.toml`
  [dcd651b4] + TestReports v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [8f5d6c58] + EzXML v1.1.0
  [94ce4f54] + Libiconv_jll v1.16.0+5
  [dcd651b4] + TestReports v0.2.2
  [02c8fc9c] + XML2_jll v2.9.10+1
  [83775a58] + Zlib_jll v1.2.11+14
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing TestReports
Status `/tmp/jl_x3vyBb/Project.toml`
  [8f5d6c58] EzXML v1.1.0
  [324d217c] ReferenceTests v0.9.1
  [dcd651b4] TestReports v0.2.2
  [44cfe95a] Pkg
  [8dfed614] Test
  [cf7118a7] UUIDs
Status `/tmp/jl_x3vyBb/Manifest.toml`
  [13072b0f] AxisAlgorithms v1.0.0
  [3da002f7] ColorTypes v0.10.7
  [c3611d14] ColorVectorSpace v0.8.5
  [5ae59095] Colors v0.12.3
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [150eb455] CoordinateTransformations v0.6.0
  [a8cc5b0e] Crayons v4.0.3
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.17.19
  [ab62b9b5] DeepDiffs v1.2.0
  [b4f34e82] Distances v0.9.0
  [8f5d6c58] EzXML v1.1.0
  [5789e2e9] FileIO v1.4.0
  [53c48c17] FixedPointNumbers v0.8.4
  [a2bd30eb] Graphics v1.0.2
  [bbac6d45] IdentityRanges v0.3.1
  [a09fc81d] ImageCore v0.8.14
  [d8c32880] ImageInTerminal v0.4.4
  [02fcd773] ImageTransformations v0.8.5
  [a98d9a8b] Interpolations v0.12.10
  [94ce4f54] Libiconv_jll v1.16.0+5
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [e94cdb99] MosaicViews v0.2.2
  [77ba4419] NaNMath v0.3.4
  [6fe1bfb0] OffsetArrays v1.1.2
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.3.0
  [5432bcbf] PaddedViews v0.5.5
  [c84ed2f1] Ratios v0.4.0
  [189a3867] Reexport v0.2.0
  [324d217c] ReferenceTests v0.9.1
  [ae029012] Requires v1.0.1
  [6038ab10] Rotations v1.0.1
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [2913bbd2] StatsBase v0.33.0
  [dcd651b4] TestReports v0.2.2
  [efce3f68] WoodburyMatrices v0.5.2
  [02c8fc9c] XML2_jll v2.9.10+1
  [83775a58] Zlib_jll v1.2.11+14
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
SingleNest    |    1      1
Test for "complexexample.txt" failed.
- DIFF ------------------------
"""
  <?xml version=\"1.0\" encoding=\"UTF-8\"?>
  <testsuites name=\"Example/Math\" id=\"_id_\" tests=\"13\" failures=\"4\" errors=\"3\"><testsuite name=\"Multiplication\" id=\"_id_\" tests=\"3\" failures=\"1\" errors=\"0\"><testcase name=\"pass (info lost)\" id=\"_testcase_id_\"/><testcase name=\"1 * 2 == 5\" id=\"_testcase_id_\"><failure message=\"2 == 5\" type=\"test\">Test Failed
    Expression: 1 * 2 == 5
     Evaluated: 2 == 5</failure></testcase><testcase name=\"pass (info lost)\" id=\"_testcase_id_\"/></testsuite><testsuite name=\"\" id=\"_id_\" tests=\"1\" failures=\"0\" errors=\"0\"><testcase name=\"pass (info lost)\" id=\"_testcase_id_\"/></testsuite><testsuite name=\"\" id=\"_id_\" tests=\"1\" failures=\"1\" errors=\"0\"><testcase name=\"sqrt(20) == 5\" id=\"_testcase_id_\"><failure message=\"4.47213595499958 == 5\" type=\"test\">Test Failed
    Expression: sqrt(20) == 5
     Evaluated: 4.47213595499958 == 5</failure></testcase></testsuite><testsuite name=\"\" id=\"_id_\" tests=\"1\" failures=\"0\" errors=\"0\"><testcase name=\"pass (info lost)\" id=\"_testcase_id_\"/></testsuite><testsuite name=\"addition\" id=\"_id_\" tests=\"3\" failures=\"1\" errors=\"0\"><testcase name=\"pass (info lost)\" id=\"_testcase_id_\"/><testcase name=\"1 + 2 == 5\" id=\"_testcase_id_\"><failure message=\"3 == 5\" type=\"test\">Test Failed
    Expression: 1 + 2 == 5
     Evaluated: 3 == 5</failure></testcase><testcase name=\"pass (info lost)\" id=\"_testcase_id_\"/></testsuite><testsuite name=\"addition/negative addition\" id=\"_id_\" tests=\"3\" failures=\"1\" errors=\"0\"><testcase name=\"pass (info lost)\" id=\"_testcase_id_\"/><testcase name=\"1 + -2 == 1\" id=\"_testcase_id_\"><failure message=\"-1 == 1\" type=\"test\">Test Failed
    Expression: 1 + -2 == 1
     Evaluated: -1 == 1</failure></testcase><testcase name=\"pass (info lost)\" id=\"_testcase_id_\"/></testsuite><testsuite name=\"other\" id=\"_id_\" tests=\"0\" failures=\"0\" errors=\"3\"><testcase name=\"sqrt(-1)\" id=\"_testcase_id_\"><skip/></testcase><error message=\"Inf\" type=\"String\">
  Stacktrace:
-  [1] to_xml(::Test.Error)
-  [2] (::TestReports.var\"#4#5\")(::Test.Error)
-  [3] iterate at ./generator.jl:47 [inlined]
-  [4] collect_to!(::Array{EzXML.Node,1}, ::Base.Generator{Array{Test.Result,1},TestReports.var\"#4#5\"}, ::Int64, ::Int64)
-  [5] collect_to_with_first! at ./array.jl:689 [inlined]
-  [6] _collect(::Array{Test.Result,1}, ::Base.Generator{Array{Test.Result,1},TestReports.var\"#4#5\"}, ::Base.EltypeUnknown, ::Base.HasShape{1})
-  [7] collect_similar(::Array{Test.Result,1}, ::Base.Generator{Array{Test.Result,1},TestReports.var\"#4#5\"})
-  [8] map(::Function, ::Array{Test.Result,1})
-  [9] to_xml(::ReportingTestSet)
-  [10] (::TestReports.var\"#2#3\")(::ReportingTestSet)
-  [11] iterate at ./generator.jl:47 [inlined]
-  [12] collect_to!(::Array{EzXML.Node,1}, ::Base.Generator{Array{Test.AbstractTestSet,1},TestReports.var\"#2#3\"}, ::Int64, ::Int64)
-  [13] collect_to_with_first! at ./array.jl:689 [inlined]
-  [14] _collect(::Array{Test.AbstractTestSet,1}, ::Base.Generator{Array{Test.AbstractTestSet,1},TestReports.var\"#2#3\"}, ::Base.EltypeUnknown, ::Base.HasShape{1})
-  [15] collect_similar(::Array{Test.AbstractTestSet,1}, ::Base.Generator{Array{Test.AbstractTestSet,1},TestReports.var\"#2#3\"})
-  [16] map(::Function, ::Array{Test.AbstractTestSet,1})
-  [17] report(::ReportingTestSet)
-  [18] |&gt;(::ReportingTestSet, ::typeof(report))
+   [1] to_xml(v::Test.Error)
+     @ TestReports ~/.julia/packages/TestReports/gfqXX/src/to_xml.jl:132
+   [2] (::TestReports.var\"#4#5\")(result::Test.Error)
+     @ TestReports ~/.julia/packages/TestReports/gfqXX/src/to_xml.jl:102
+   [3] iterate
+     @ ./generator.jl:47 [inlined]
+   [4] collect_to!(dest::Vector{EzXML.Node}, itr::Base.Generator{Vector{Test.Result},TestReports.var\"#4#5\"}, offs::Int64, st::Int64)
+     @ Base ./array.jl:732
+   [5] collect_to_with_first!(dest::Vector{EzXML.Node}, v1::EzXML.Node, itr::Base.Generator{Vector{Test.Result},TestReports.var\"#4#5\"}, st::Int64)
+     @ Base ./array.jl:710
+   [6] _collect(c::Vector{Test.Result}, itr::Base.Generator{Vector{Test.Result},TestReports.var\"#4#5\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})
+     @ Base ./array.jl:704
+   [7] collect_similar(cont::Vector{Test.Result}, itr::Base.Generator{Vector{Test.Result},TestReports.var\"#4#5\"})
+     @ Base ./array.jl:628
+   [8] map(f::Function, A::Vector{Test.Result})
+     @ Base ./abstractarray.jl:2225
+   [9] to_xml(ts::ReportingTestSet)
+     @ TestReports ~/.julia/packages/TestReports/gfqXX/src/to_xml.jl:101
+  [10] (::TestReports.var\"#2#3\")(result::ReportingTestSet)
+     @ TestReports ~/.julia/packages/TestReports/gfqXX/src/to_xml.jl:78
+  [11] iterate
+     @ ./generator.jl:47 [inlined]
+  [12] collect_to!(dest::Vector{EzXML.Node}, itr::Base.Generator{Vector{Test.AbstractTestSet},TestReports.var\"#2#3\"}, offs::Int64, st::Int64)
+     @ Base ./array.jl:732
+  [13] collect_to_with_first!
+     @ ./array.jl:710 [inlined]
+  [14] _collect(c::Vector{Test.AbstractTestSet}, itr::Base.Generator{Vector{Test.AbstractTestSet},TestReports.var\"#2#3\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})
+     @ Base ./array.jl:704
+  [15] collect_similar(cont::Vector{Test.AbstractTestSet}, itr::Base.Generator{Vector{Test.AbstractTestSet},TestReports.var\"#2#3\"})
+     @ Base ./array.jl:628
+  [16] map(f::Function, A::Vector{Test.AbstractTestSet})
+     @ Base ./abstractarray.jl:2225
+  [17] report(ts::ReportingTestSet)
+     @ TestReports ~/.julia/packages/TestReports/gfqXX/src/to_xml.jl:77
+  [18] |&gt;(x::ReportingTestSet, f::typeof(report))
+     @ Base ./operators.jl:836
   [19] top-level scope
-  [20] include(::Module, ::String)
-  [21] exec_options(::Base.JLOptions)
-  [22] _start() at ./client.jl:484</error><error message=\"ErrorException(&quot;Nooo&quot;)\" type=\"String\">
+     @ ~/.julia/packages/TestReports/gfqXX/test/example.jl:5
+  [20] include(mod::Module, _path::String)
+     @ Base ./Base.jl:375
+  [21] exec_options(opts::Base.JLOptions)
+     @ Base ./client.jl:284
+  [22] _start()
+     @ Base ./client.jl:484</error><error message=\"ErrorException(&quot;Nooo&quot;)\" type=\"String\">
  Stacktrace:
-  [1] to_xml(::Test.Error)
-  [2] (::TestReports.var\"#4#5\")(::Test.Error)
-  [3] iterate at ./generator.jl:47 [inlined]
-  [4] collect_to!(::Array{EzXML.Node,1}, ::Base.Generator{Array{Test.Result,1},TestReports.var\"#4#5\"}, ::Int64, ::Int64)
-  [5] collect_to_with_first! at ./array.jl:689 [inlined]
-  [6] _collect(::Array{Test.Result,1}, ::Base.Generator{Array{Test.Result,1},TestReports.var\"#4#5\"}, ::Base.EltypeUnknown, ::Base.HasShape{1})
-  [7] collect_similar(::Array{Test.Result,1}, ::Base.Generator{Array{Test.Result,1},TestReports.var\"#4#5\"})
-  [8] map(::Function, ::Array{Test.Result,1})
-  [9] to_xml(::ReportingTestSet)
-  [10] (::TestReports.var\"#2#3\")(::ReportingTestSet)
-  [11] iterate at ./generator.jl:47 [inlined]
-  [12] collect_to!(::Array{EzXML.Node,1}, ::Base.Generator{Array{Test.AbstractTestSet,1},TestReports.var\"#2#3\"}, ::Int64, ::Int64)
-  [13] collect_to_with_first! at ./array.jl:689 [inlined]
-  [14] _collect(::Array{Test.AbstractTestSet,1}, ::Base.Generator{Array{Test.AbstractTestSet,1},TestReports.var\"#2#3\"}, ::Base.EltypeUnknown, ::Base.HasShape{1})
-  [15] collect_similar(::Array{Test.AbstractTestSet,1}, ::Base.Generator{Array{Test.AbstractTestSet,1},TestReports.var\"#2#3\"})
-  [16] map(::Function, ::Array{Test.AbstractTestSet,1})
-  [17] report(::ReportingTestSet)
-  [18] |&gt;(::ReportingTestSet, ::typeof(report))
+   [1] to_xml(v::Test.Error)
+     @ TestReports ~/.julia/packages/TestReports/gfqXX/src/to_xml.jl:132
+   [2] (::TestReports.var\"#4#5\")(result::Test.Error)
+     @ TestReports ~/.julia/packages/TestReports/gfqXX/src/to_xml.jl:102
+   [3] iterate
+     @ ./generator.jl:47 [inlined]
+   [4] collect_to!(dest::Vector{EzXML.Node}, itr::Base.Generator{Vector{Test.Result},TestReports.var\"#4#5\"}, offs::Int64, st::Int64)
+     @ Base ./array.jl:732
+   [5] collect_to_with_first!(dest::Vector{EzXML.Node}, v1::EzXML.Node, itr::Base.Generator{Vector{Test.Result},TestReports.var\"#4#5\"}, st::Int64)
+     @ Base ./array.jl:710
+   [6] _collect(c::Vector{Test.Result}, itr::Base.Generator{Vector{Test.Result},TestReports.var\"#4#5\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})
+     @ Base ./array.jl:704
+   [7] collect_similar(cont::Vector{Test.Result}, itr::Base.Generator{Vector{Test.Result},TestReports.var\"#4#5\"})
+     @ Base ./array.jl:628
+   [8] map(f::Function, A::Vector{Test.Result})
+     @ Base ./abstractarray.jl:2225
+   [9] to_xml(ts::ReportingTestSet)
+     @ TestReports ~/.julia/packages/TestReports/gfqXX/src/to_xml.jl:101
+  [10] (::TestReports.var\"#2#3\")(result::ReportingTestSet)
+     @ TestReports ~/.julia/packages/TestReports/gfqXX/src/to_xml.jl:78
+  [11] iterate
+     @ ./generator.jl:47 [inlined]
+  [12] collect_to!(dest::Vector{EzXML.Node}, itr::Base.Generator{Vector{Test.AbstractTestSet},TestReports.var\"#2#3\"}, offs::Int64, st::Int64)
+     @ Base ./array.jl:732
+  [13] collect_to_with_first!
+     @ ./array.jl:710 [inlined]
+  [14] _collect(c::Vector{Test.AbstractTestSet}, itr::Base.Generator{Vector{Test.AbstractTestSet},TestReports.var\"#2#3\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})
+     @ Base ./array.jl:704
+  [15] collect_similar(cont::Vector{Test.AbstractTestSet}, itr::Base.Generator{Vector{Test.AbstractTestSet},TestReports.var\"#2#3\"})
+     @ Base ./array.jl:628
+  [16] map(f::Function, A::Vector{Test.AbstractTestSet})
+     @ Base ./abstractarray.jl:2225
+  [17] report(ts::ReportingTestSet)
+     @ TestReports ~/.julia/packages/TestReports/gfqXX/src/to_xml.jl:77
+  [18] |&gt;(x::ReportingTestSet, f::typeof(report))
+     @ Base ./operators.jl:836
   [19] top-level scope
-  [20] include(::Module, ::String)
-  [21] exec_options(::Base.JLOptions)
-  [22] _start() at ./client.jl:484</error><error message=\"DimensionMismatch(&quot;B has leading dimension 4, but needs 2&quot;)\" type=\"String\">
+     @ ~/.julia/packages/TestReports/gfqXX/test/example.jl:5
+  [20] include(mod::Module, _path::String)
+     @ Base ./Base.jl:375
+  [21] exec_options(opts::Base.JLOptions)
+     @ Base ./client.jl:284
+  [22] _start()
+     @ Base ./client.jl:484</error><error message=\"DimensionMismatch(&quot;B has leading dimension 4, but needs 2&quot;)\" type=\"String\">
  Stacktrace:
-  [1] to_xml(::Test.Error)
-  [2] (::TestReports.var\"#4#5\")(::Test.Error)
-  [3] iterate at ./generator.jl:47 [inlined]
-  [4] collect_to!(::Array{EzXML.Node,1}, ::Base.Generator{Array{Test.Result,1},TestReports.var\"#4#5\"}, ::Int64, ::Int64)
-  [5] collect_to_with_first! at ./array.jl:689 [inlined]
-  [6] _collect(::Array{Test.Result,1}, ::Base.Generator{Array{Test.Result,1},TestReports.var\"#4#5\"}, ::Base.EltypeUnknown, ::Base.HasShape{1})
-  [7] collect_similar(::Array{Test.Result,1}, ::Base.Generator{Array{Test.Result,1},TestReports.var\"#4#5\"})
-  [8] map(::Function, ::Array{Test.Result,1})
-  [9] to_xml(::ReportingTestSet)
-  [10] (::TestReports.var\"#2#3\")(::ReportingTestSet)
-  [11] iterate at ./generator.jl:47 [inlined]
-  [12] collect_to!(::Array{EzXML.Node,1}, ::Base.Generator{Array{Test.AbstractTestSet,1},TestReports.var\"#2#3\"}, ::Int64, ::Int64)
-  [13] collect_to_with_first! at ./array.jl:689 [inlined]
-  [14] _collect(::Array{Test.AbstractTestSet,1}, ::Base.Generator{Array{Test.AbstractTestSet,1},TestReports.var\"#2#3\"}, ::Base.EltypeUnknown, ::Base.HasShape{1})
-  [15] collect_similar(::Array{Test.AbstractTestSet,1}, ::Base.Generator{Array{Test.AbstractTestSet,1},TestReports.var\"#2#3\"})
-  [16] map(::Function, ::Array{Test.AbstractTestSet,1})
-  [17] report(::ReportingTestSet)
-  [18] |&gt;(::ReportingTestSet, ::typeof(report))
+   [1] to_xml(v::Test.Error)
+     @ TestReports ~/.julia/packages/TestReports/gfqXX/src/to_xml.jl:132
+   [2] (::TestReports.var\"#4#5\")(result::Test.Error)
+     @ TestReports ~/.julia/packages/TestReports/gfqXX/src/to_xml.jl:102
+   [3] iterate
+     @ ./generator.jl:47 [inlined]
+   [4] collect_to!(dest::Vector{EzXML.Node}, itr::Base.Generator{Vector{Test.Result},TestReports.var\"#4#5\"}, offs::Int64, st::Int64)
+     @ Base ./array.jl:732
+   [5] collect_to_with_first!(dest::Vector{EzXML.Node}, v1::EzXML.Node, itr::Base.Generator{Vector{Test.Result},TestReports.var\"#4#5\"}, st::Int64)
+     @ Base ./array.jl:710
+   [6] _collect(c::Vector{Test.Result}, itr::Base.Generator{Vector{Test.Result},TestReports.var\"#4#5\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})
+     @ Base ./array.jl:704
+   [7] collect_similar(cont::Vector{Test.Result}, itr::Base.Generator{Vector{Test.Result},TestReports.var\"#4#5\"})
+     @ Base ./array.jl:628
+   [8] map(f::Function, A::Vector{Test.Result})
+     @ Base ./abstractarray.jl:2225
+   [9] to_xml(ts::ReportingTestSet)
+     @ TestReports ~/.julia/packages/TestReports/gfqXX/src/to_xml.jl:101
+  [10] (::TestReports.var\"#2#3\")(result::ReportingTestSet)
+     @ TestReports ~/.julia/packages/TestReports/gfqXX/src/to_xml.jl:78
+  [11] iterate
+     @ ./generator.jl:47 [inlined]
+  [12] collect_to!(dest::Vector{EzXML.Node}, itr::Base.Generator{Vector{Test.AbstractTestSet},TestReports.var\"#2#3\"}, offs::Int64, st::Int64)
+     @ Base ./array.jl:732
+  [13] collect_to_with_first!
+     @ ./array.jl:710 [inlined]
+  [14] _collect(c::Vector{Test.AbstractTestSet}, itr::Base.Generator{Vector{Test.AbstractTestSet},TestReports.var\"#2#3\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})
+     @ Base ./array.jl:704
+  [15] collect_similar(cont::Vector{Test.AbstractTestSet}, itr::Base.Generator{Vector{Test.AbstractTestSet},TestReports.var\"#2#3\"})
+     @ Base ./array.jl:628
+  [16] map(f::Function, A::Vector{Test.AbstractTestSet})
+     @ Base ./abstractarray.jl:2225
+  [17] report(ts::ReportingTestSet)
+     @ TestReports ~/.julia/packages/TestReports/gfqXX/src/to_xml.jl:77
+  [18] |&gt;(x::ReportingTestSet, f::typeof(report))
+     @ Base ./operators.jl:836
   [19] top-level scope
-  [20] include(::Module, ::String)
-  [21] exec_options(::Base.JLOptions)
-  [22] _start() at ./client.jl:484</error></testsuite><testsuite name=\"using function from a module\" id=\"_id_\" tests=\"1\" failures=\"0\" errors=\"0\"><testcase name=\"pass (info lost)\" id=\"_testcase_id_\"/></testsuite></testsuites>
+     @ ~/.julia/packages/TestReports/gfqXX/test/example.jl:5
+  [20] include(mod::Module, _path::String)
+     @ Base ./Base.jl:375
+  [21] exec_options(opts::Base.JLOptions)
+     @ Base ./client.jl:284
+  [22] _start()
+     @ Base ./client.jl:484</error></testsuite><testsuite name=\"using function from a module\" id=\"_id_\" tests=\"1\" failures=\"0\" errors=\"0\"><testcase name=\"pass (info lost)\" id=\"_testcase_id_\"/></testsuite></testsuites>
  
  """
-------------------------------
Complex Example: Error During Test at /home/pkgeval/.julia/packages/TestReports/gfqXX/test/runtests.jl:20
  Got exception outside of a @test
  You need to run the tests interactively with 'include("test/runtests.jl")' to update reference images
  Stacktrace:
    [1] error(s::String)
      @ Base ./error.jl:33
    [2] test_reference(file::FileIO.File{FileIO.DataFormat{:TXT}}, raw_actual::String, equiv::Nothing, rendermode::Nothing; kw::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
      @ ReferenceTests ~/.julia/packages/ReferenceTests/JDrHL/src/test_reference.jl:140
    [3] test_reference(file::FileIO.File{FileIO.DataFormat{:TXT}}, raw_actual::String, equiv::Nothing, rendermode::Nothing)
      @ ReferenceTests ~/.julia/packages/ReferenceTests/JDrHL/src/test_reference.jl:100
    [4] test_reference(filename::String, raw_actual::String; by::Nothing, render::Nothing, kw::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
      @ ReferenceTests ~/.julia/packages/ReferenceTests/JDrHL/src/test_reference.jl:90
    [5] test_reference(filename::String, raw_actual::String)
      @ ReferenceTests ~/.julia/packages/ReferenceTests/JDrHL/src/test_reference.jl:90
    [6] top-level scope
      @ ~/.julia/packages/TestReports/gfqXX/test/runtests.jl:22
    [7] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
    [8] top-level scope
      @ ~/.julia/packages/TestReports/gfqXX/test/runtests.jl:21
    [9] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [10] top-level scope
      @ none:6
   [11] eval(m::Module, e::Any)
      @ Core ./boot.jl:340
   [12] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [13] _start()
      @ Base ./client.jl:484
  
Test Summary:   | Error  Total
Complex Example |     1      1
ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/TestReports/gfqXX/test/runtests.jl:20
ERROR: Package TestReports errored during testing
Stacktrace:
  [1] pkgerror(::String, ::Vararg{String,N} where N)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1561
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:327
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:314
  [5] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#60
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:16
