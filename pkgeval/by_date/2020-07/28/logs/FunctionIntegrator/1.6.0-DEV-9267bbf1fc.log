Julia Version 1.6.0-DEV.548
Commit 9267bbf1fc (2020-07-27 16:57 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed FastGaussQuadrature ────────── v0.4.2
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.2
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_TJUNjX/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_TJUNjX/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  1.183540 seconds (1.37 M allocations: 72.636 MiB, 14.83% gc time)
Running: chebyshev_quadrature with k=1
  1.904706 seconds (2.24 M allocations: 128.650 MiB, 2.71% gc time)
Running: chebyshev_quadrature with k=2
  0.290881 seconds (425.06 k allocations: 24.388 MiB)
Running: chebyshev_quadrature with k=3
  0.340836 seconds (544.94 k allocations: 29.871 MiB, 10.22% gc time)
Running: chebyshev_quadrature with k=4
  0.312435 seconds (487.81 k allocations: 26.417 MiB)
Running: jacobi_quadrature with α=β=1
 41.162616 seconds (39.37 M allocations: 3.137 GiB, 9.37% gc time)
Running: laguerre_quadrature with k=1
  3.307251 seconds (3.33 M allocations: 185.514 MiB, 2.87% gc time)
Running: legendre_quadrature
  0.198203 seconds (215.12 k allocations: 12.315 MiB)
Running: lobatto_quadrature
  0.397986 seconds (343.69 k allocations: 20.586 MiB, 11.61% gc time)
Running: radau_quadrature
  0.250446 seconds (326.02 k allocations: 19.584 MiB)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 80.587423 seconds (100.02 M allocations: 1.491 GiB, 0.33% gc time)
Running: rectangle_rule_midpoint.
  0.145240 seconds (173.73 k allocations: 3.887 MiB)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 80.307600 seconds (100.02 M allocations: 1.491 GiB, 0.35% gc time)
Running: rombergs_method
  0.587930 seconds (752.77 k allocations: 43.337 MiB, 5.43% gc time)
Running: simpsons_rule
  0.038831 seconds (47.35 k allocations: 2.120 MiB)
Running: simpsons38_rule
  0.095414 seconds (113.05 k allocations: 5.970 MiB)
Running: trapezoidal_rule
  0.280625 seconds (1.52 M allocations: 25.793 MiB)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.082129 seconds (32.64 k allocations: 1.943 MiB)
Running: chebyshev_quadrature with k=1
  0.524048 seconds (275.58 k allocations: 13.978 MiB)
Running: chebyshev_quadrature with k=2
  0.156443 seconds (115.88 k allocations: 3.802 MiB)
Running: chebyshev_quadrature with k=3
  0.147673 seconds (105.24 k allocations: 3.650 MiB)
Running: chebyshev_quadrature with k=4
  0.179173 seconds (87.85 k allocations: 3.298 MiB, 17.38% gc time)
Running: jacobi_quadrature with α=β=1
  2.081008 seconds (536.35 k allocations: 163.523 MiB, 4.51% gc time)
Running: legendre_quadrature
  0.153334 seconds (62.46 k allocations: 3.485 MiB)
Running: lobatto_quadrature
  0.021149 seconds (16.79 k allocations: 1.036 MiB)
Running: radau_quadrature
  0.021645 seconds (16.77 k allocations: 1.036 MiB)
Running: rectangle_rule_left
 29.506123 seconds (471.41 M allocations: 7.025 GiB, 2.96% gc time)
Running: rectangle_rule_midpoint
  0.000071 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 29.093928 seconds (476.96 M allocations: 7.107 GiB, 2.11% gc time)
Running: rombergs_method
  0.399173 seconds (360.44 k allocations: 20.325 MiB)
Running: simpsons_rule
  0.000036 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.064442 seconds (19.90 k allocations: 1.195 MiB)
Running: trapezoidal_rule
  0.060692 seconds (18.35 k allocations: 1.100 MiB)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.028304 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.105629 seconds (2.40 k allocations: 113.453 KiB)
Running: chebyshev_quadrature with k=2
  0.102038 seconds (2.65 k allocations: 121.469 KiB)
Running: chebyshev_quadrature with k=3
  0.109006 seconds (3.08 k allocations: 133.688 KiB)
Running: chebyshev_quadrature with k=4
  0.113983 seconds (3.08 k allocations: 133.750 KiB)
Running: jacobi_quadrature with α=β=1
  0.358875 seconds (379.00 k allocations: 19.793 MiB)
Running: legendre_quadrature
  0.059230 seconds (1.24 k allocations: 63.609 KiB)
Running: lobatto_quadrature
  0.000136 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000066 seconds (71 allocations: 3.078 KiB)
Running: rectangle_rule_left
  0.000525 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000359 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000505 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.097588 seconds (1.01 k allocations: 54.109 KiB)
Running: simpsons_rule
  0.000104 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.036597 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.035842 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.096979 seconds (75.84 k allocations: 4.401 MiB)
Running: chebyshev_quadrature with k=1
  0.314398 seconds (240.27 k allocations: 13.487 MiB, 13.82% gc time)
Running: chebyshev_quadrature with k=2
  0.284525 seconds (295.46 k allocations: 16.565 MiB)
Running: chebyshev_quadrature with k=3
  0.205465 seconds (275.42 k allocations: 14.986 MiB)
Running: chebyshev_quadrature with k=4
  0.253331 seconds (275.45 k allocations: 14.899 MiB, 9.60% gc time)
Running: jacobi_quadrature with α=β=1
  2.329686 seconds (465.77 k allocations: 164.176 MiB, 8.71% gc time)
Running: legendre_quadrature
  0.148160 seconds (193.01 k allocations: 11.129 MiB)
Running: lobatto_quadrature
  0.173207 seconds (204.22 k allocations: 11.812 MiB)
Running: radau_quadrature
  0.206155 seconds (204.21 k allocations: 11.814 MiB)
Running: rectangle_rule_left
  1.266097 seconds (19.76 k allocations: 1.194 MiB)
Running: rectangle_rule_midpoint
  0.030330 seconds (25.93 k allocations: 1.615 MiB)
Running: rectangle_rule_right
  1.127654 seconds (18.27 k allocations: 1.105 MiB)
Running: rombergs_method
  0.159241 seconds (139.92 k allocations: 8.060 MiB, 12.92% gc time)
Running: simpsons_rule
  0.030395 seconds (29.02 k allocations: 1.803 MiB)
Running: simpsons38_rule
  0.037261 seconds (44.65 k allocations: 2.788 MiB)
Running: trapezoidal_rule
  0.028508 seconds (45.20 k allocations: 1.825 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.045737 seconds (101.41 k allocations: 3.076 MiB)
Running: chebyshev_quadrature with k=1
  0.199275 seconds (247.36 k allocations: 13.619 MiB)
Running: chebyshev_quadrature with k=2
  0.290875 seconds (303.09 k allocations: 16.593 MiB)
Running: chebyshev_quadrature with k=3
  0.349697 seconds (282.83 k allocations: 15.019 MiB)
Running: chebyshev_quadrature with k=4
  0.297375 seconds (282.86 k allocations: 15.006 MiB)
Running: hermite_quadrature with k=2
 15.458848 seconds (22.13 M allocations: 1.148 GiB, 10.09% gc time)
Running: jacobi_quadrature with α=β=1
  0.444554 seconds (475.80 k allocations: 50.458 MiB, 8.12% gc time)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.246063 seconds (288.36 k allocations: 15.898 MiB)
Running: legendre_quadrature
  0.197116 seconds (200.07 k allocations: 11.456 MiB, 17.72% gc time)
Running: lobatto_quadrature
  0.216586 seconds (225.73 k allocations: 37.627 MiB)
Running: radau_quadrature
  0.223830 seconds (222.32 k allocations: 30.282 MiB, 9.26% gc time)
Running: rectangle_rule_left
  0.029422 seconds (22.91 k allocations: 1.353 MiB)
Running: rectangle_rule_midpoint
  0.028303 seconds (27.88 k allocations: 1.711 MiB)
Running: rectangle_rule_right
  0.027419 seconds (19.48 k allocations: 1.166 MiB)
Running: rombergs_method
  0.117916 seconds (142.74 k allocations: 8.123 MiB)
Running: simpsons_rule
  0.037640 seconds (41.26 k allocations: 2.157 MiB)
Running: simpsons38_rule
  0.045711 seconds (60.02 k allocations: 3.196 MiB)
Running: trapezoidal_rule
  0.033103 seconds (31.57 k allocations: 1.770 MiB)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.042132 seconds (61.52 k allocations: 2.360 MiB)
Running: chebyshev_quadrature with k=1
  0.228724 seconds (242.49 k allocations: 13.352 MiB, 15.09% gc time)
Running: chebyshev_quadrature with k=2
  0.256554 seconds (297.81 k allocations: 16.314 MiB)
Running: chebyshev_quadrature with k=3
  0.226701 seconds (277.69 k allocations: 14.784 MiB)
Running: chebyshev_quadrature with k=4
  0.241041 seconds (277.72 k allocations: 14.770 MiB, 12.24% gc time)
Running: hermite_quadrature with k=2
  0.149763 seconds (177.72 k allocations: 10.160 MiB)
Running: jacobi_quadrature with α=β=1
  9.754397 seconds (468.37 k allocations: 1.176 GiB, 15.47% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.245129 seconds (283.22 k allocations: 15.695 MiB)
Running: legendre_quadrature
  0.239456 seconds (195.24 k allocations: 11.221 MiB, 13.79% gc time)
Running: lobatto_quadrature
  0.219773 seconds (216.09 k allocations: 23.338 MiB)
Running: radau_quadrature
  0.234873 seconds (215.24 k allocations: 21.263 MiB, 7.19% gc time)
Running: rectangle_rule_left
  0.026034 seconds (20.47 k allocations: 1.235 MiB)
Running: rectangle_rule_midpoint
  0.028372 seconds (26.66 k allocations: 1.653 MiB)
Running: rectangle_rule_right
  0.025421 seconds (18.24 k allocations: 1.106 MiB)
Running: rombergs_method
  0.140623 seconds (138.22 k allocations: 7.930 MiB)
Running: simpsons_rule
  0.037335 seconds (33.50 k allocations: 1.931 MiB)
Running: simpsons38_rule
  0.053048 seconds (50.55 k allocations: 2.939 MiB)
Running: trapezoidal_rule
  0.037374 seconds (26.25 k allocations: 1.593 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.038068 seconds (32.48 k allocations: 1.957 MiB)
Running: chebyshev_quadrature with k=1
  0.253501 seconds (240.82 k allocations: 13.578 MiB)
Running: chebyshev_quadrature with k=2
  0.238587 seconds (296.04 k allocations: 16.652 MiB, 10.70% gc time)
Running: chebyshev_quadrature with k=3
  0.228278 seconds (276.02 k allocations: 14.983 MiB)
Running: chebyshev_quadrature with k=4
  0.294197 seconds (276.05 k allocations: 14.817 MiB, 14.90% gc time)
Running: jacobi_quadrature with α=β=1
  2.251214 seconds (466.41 k allocations: 195.251 MiB, 3.84% gc time)
Running: legendre_quadrature
  0.165466 seconds (193.57 k allocations: 11.135 MiB)
Running: lobatto_quadrature
  0.222874 seconds (204.78 k allocations: 11.843 MiB, 10.44% gc time)
Running: radau_quadrature
  0.187284 seconds (204.78 k allocations: 11.906 MiB)
Running: rectangle_rule_left
  0.328935 seconds (20.33 k allocations: 1.222 MiB)
Running: rectangle_rule_midpoint
  0.028315 seconds (26.30 k allocations: 1.635 MiB)
Running: rectangle_rule_right
  0.114967 seconds (18.64 k allocations: 1.125 MiB)
Running: rombergs_method
  0.148154 seconds (151.29 k allocations: 8.828 MiB)
Running: simpsons_rule
  0.032725 seconds (29.77 k allocations: 1.835 MiB)
Running: simpsons38_rule
  0.037365 seconds (45.42 k allocations: 2.821 MiB)
Running: trapezoidal_rule
  0.026566 seconds (46.19 k allocations: 1.861 MiB)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.035027 seconds (33.24 k allocations: 1.905 MiB)
Running: chebyshev_quadrature with k=1
  0.232899 seconds (241.39 k allocations: 13.512 MiB, 10.69% gc time)
Running: chebyshev_quadrature with k=2
  0.230411 seconds (296.64 k allocations: 16.567 MiB)
Running: chebyshev_quadrature with k=3
  0.208392 seconds (276.56 k allocations: 14.903 MiB)
Running: chebyshev_quadrature with k=4
  0.231897 seconds (276.59 k allocations: 14.982 MiB, 9.14% gc time)
Running: jacobi_quadrature with α=β=1
  1.511598 seconds (467.08 k allocations: 149.923 MiB, 7.98% gc time)
Running: legendre_quadrature
  0.175528 seconds (194.15 k allocations: 11.153 MiB)
Running: lobatto_quadrature
  0.250752 seconds (205.36 k allocations: 11.857 MiB, 19.18% gc time)
Running: radau_quadrature
  0.153734 seconds (205.35 k allocations: 11.862 MiB)
Running: rectangle_rule_left
  1.150256 seconds (20.60 k allocations: 1.236 MiB)
Running: rectangle_rule_midpoint
  0.026685 seconds (26.29 k allocations: 1.635 MiB)
Running: rectangle_rule_right
  1.134671 seconds (18.62 k allocations: 1.124 MiB)
Running: rombergs_method
  0.135527 seconds (141.22 k allocations: 8.120 MiB)
Running: simpsons_rule
  0.034690 seconds (30.52 k allocations: 1.863 MiB)
Running: simpsons38_rule
  0.038861 seconds (46.17 k allocations: 2.850 MiB)
Running: trapezoidal_rule
  0.029278 seconds (58.45 k allocations: 2.062 MiB)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.150152 seconds (152.90 k allocations: 9.087 MiB)
Running: chebyshev_quadrature with k=1
  0.141469 seconds (91.40 k allocations: 3.305 MiB)
Running: chebyshev_quadrature with k=2
  0.153271 seconds (127.17 k allocations: 3.997 MiB)
Running: chebyshev_quadrature with k=3
  0.162093 seconds (115.75 k allocations: 3.827 MiB)
Running: chebyshev_quadrature with k=4
  0.168725 seconds (95.28 k allocations: 3.423 MiB)
Running: jacobi_quadrature with α=β=1
  1.726856 seconds (509.97 k allocations: 169.379 MiB, 10.63% gc time)
Running: legendre_quadrature
  0.164252 seconds (38.51 k allocations: 2.116 MiB, 13.63% gc time)
Running: lobatto_quadrature
  0.000112 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000045 seconds (148 allocations: 4.375 KiB)
Running: rectangle_rule_left
 45.973032 seconds (590.00 M allocations: 8.792 GiB, 2.98% gc time)
Running: rectangle_rule_midpoint
  0.000081 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 47.029099 seconds (592.75 M allocations: 8.833 GiB, 2.94% gc time)
Running: rombergs_method
  0.105003 seconds (42.05 k allocations: 2.267 MiB)
Running: simpsons_rule
  0.000036 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.024583 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.020955 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 33.322791 seconds (629.34 M allocations: 9.388 GiB, 4.34% gc time)
Running: chebyshev_quadrature with k=1
  0.603130 seconds (439.22 k allocations: 24.269 MiB)
Running: chebyshev_quadrature with k=2
 13.982739 seconds (496.58 k allocations: 4.042 GiB, 4.79% gc time)
Running: chebyshev_quadrature with k=3
  6.089513 seconds (290.51 k allocations: 1.643 GiB, 5.02% gc time)
Running: chebyshev_quadrature with k=4
  7.631712 seconds (290.55 k allocations: 2.262 GiB, 2.69% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 54.625281 seconds (505.31 k allocations: 13.255 GiB, 3.56% gc time)
Running: legendre_quadrature.
  6.568526 seconds (232.90 k allocations: 1.976 GiB, 2.86% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 56.865902 seconds (8.24 M allocations: 13.384 GiB, 4.31% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 58.580397 seconds (7.24 M allocations: 13.369 GiB, 3.15% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.036991 seconds (23.35 k allocations: 1.403 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.195475 seconds (31.97 k allocations: 1.959 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.652289 seconds (23.57 k allocations: 1.413 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.289696 seconds (456.67 k allocations: 153.700 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 43.681236 seconds (600.04 M allocations: 8.943 GiB, 8.78% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 42.065240 seconds (600.05 M allocations: 8.944 GiB, 8.19% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 43.640407 seconds (600.04 M allocations: 8.943 GiB, 8.97% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.065424 seconds (182.52 k allocations: 4.518 MiB)
Running: chebyshev_quadrature with k=1
  0.313135 seconds (257.98 k allocations: 14.019 MiB)
Running: chebyshev_quadrature with k=2
  0.469903 seconds (284.14 k allocations: 15.179 MiB)
Running: chebyshev_quadrature with k=3
  0.448693 seconds (260.63 k allocations: 13.457 MiB)
Running: chebyshev_quadrature with k=4
  0.217106 seconds (260.66 k allocations: 13.453 MiB)
Running: jacobi_quadrature with α=β=1
  0.423000 seconds (405.38 k allocations: 35.875 MiB)
Running: laguerre_quadrature with k=2
  0.188133 seconds (187.98 k allocations: 10.889 MiB)
Running: legendre_quadrature
  0.136807 seconds (151.74 k allocations: 8.390 MiB)
Running: lobatto_quadrature
  0.062291 seconds (10.88 k allocations: 15.109 MiB)
Running: radau_quadrature
  0.057698 seconds (9.66 k allocations: 13.183 MiB)
Running: rectangle_rule_left
  0.090031 seconds (19.81 k allocations: 1.170 MiB)
Running: rectangle_rule_midpoint
  0.076479 seconds (26.77 k allocations: 1.640 MiB)
Running: rectangle_rule_right
  0.104760 seconds (18.36 k allocations: 1.094 MiB)
Running: rombergs_method
  0.330663 seconds (171.42 k allocations: 9.755 MiB)
Running: simpsons_rule
  0.001985 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.055850 seconds (81.45 k allocations: 3.520 MiB)
Running: trapezoidal_rule
  0.215720 seconds (2.39 M allocations: 37.757 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.001955 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.101970 seconds (2.58 k allocations: 1.696 MiB)
Running: chebyshev_quadrature with k=2
  0.105531 seconds (2.84 k allocations: 2.359 MiB)
Running: chebyshev_quadrature with k=3
  0.117818 seconds (3.26 k allocations: 2.060 MiB)
Running: chebyshev_quadrature with k=4
  0.112957 seconds (3.26 k allocations: 1.501 MiB)
Running: jacobi_quadrature with α=β=1
  6.764941 seconds (402.17 k allocations: 906.503 MiB, 5.04% gc time)
Running: legendre_quadrature
  0.074007 seconds (1.33 k allocations: 72.281 KiB)
Running: lobatto_quadrature
  0.000204 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.000227 seconds (221 allocations: 8.812 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  4.223865 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000516 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  3.555583 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.065946 seconds (1.16 k allocations: 66.734 KiB)
Running: simpsons_rule
  0.000038 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000047 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001110 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.000839 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.104728 seconds (2.48 k allocations: 576.609 KiB)
Running: chebyshev_quadrature with k=2
  0.107793 seconds (2.73 k allocations: 777.391 KiB)
Running: chebyshev_quadrature with k=3
  0.113895 seconds (3.15 k allocations: 685.641 KiB)
Running: chebyshev_quadrature with k=4
  0.117663 seconds (3.16 k allocations: 516.203 KiB)
Running: jacobi_quadrature with α=β=1
  2.752386 seconds (388.45 k allocations: 253.763 MiB)
Running: legendre_quadrature
  0.057228 seconds (1.28 k allocations: 65.438 KiB)
Running: lobatto_quadrature
  0.000084 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.000034 seconds (81 allocations: 3.453 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
 14.773437 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.001059 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
 11.068985 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.068548 seconds (1.18 k allocations: 62.562 KiB)
Running: simpsons_rule
  0.000049 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000044 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001831 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
