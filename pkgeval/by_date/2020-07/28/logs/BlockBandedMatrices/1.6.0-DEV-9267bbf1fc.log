Julia Version 1.6.0-DEV.548
Commit 9267bbf1fc (2020-07-27 16:57 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed MatrixFactorizations ─ v0.5.1
  Installed ArrayLayouts ───────── v0.3.7
  Installed Compat ─────────────── v3.13.0
  Installed FillArrays ─────────── v0.8.13
  Installed BlockBandedMatrices ── v0.8.11
  Installed BlockArrays ────────── v0.12.10
  Installed BandedMatrices ─────── v0.15.15
Updating `~/.julia/environments/v1.6/Project.toml`
  [ffab5731] + BlockBandedMatrices v0.8.11
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [4c555306] + ArrayLayouts v0.3.7
  [aae01518] + BandedMatrices v0.15.15
  [8e7c35d0] + BlockArrays v0.12.10
  [ffab5731] + BlockBandedMatrices v0.8.11
  [34da2185] + Compat v3.13.0
  [1a297f60] + FillArrays v0.8.13
  [a3b82374] + MatrixFactorizations v0.5.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing BlockBandedMatrices
Status `/tmp/jl_ta2bPw/Project.toml`
  [4c555306] ArrayLayouts v0.3.7
  [aae01518] BandedMatrices v0.15.15
  [8e7c35d0] BlockArrays v0.12.10
  [ffab5731] BlockBandedMatrices v0.8.11
  [1a297f60] FillArrays v0.8.13
  [a3b82374] MatrixFactorizations v0.5.1
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [44cfe95a] Pkg
  [9a3f8284] Random
  [1a1011a3] SharedArrays
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_ta2bPw/Manifest.toml`
  [4c555306] ArrayLayouts v0.3.7
  [aae01518] BandedMatrices v0.15.15
  [8e7c35d0] BlockArrays v0.12.10
  [ffab5731] BlockBandedMatrices v0.8.11
  [34da2185] Compat v3.13.0
  [1a297f60] FillArrays v0.8.13
  [a3b82374] MatrixFactorizations v0.5.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
  0.126021 seconds (122.31 k allocations: 7.022 MiB, 11.68% gc time)
  0.155447 seconds (56.48 k allocations: 2.697 MiB)
Test Summary:     | Pass  Total
BlockBandedMatrix |   68     68
Test Summary:      | Pass  Total
BlockSkylineMatrix |  383    383
Test Summary:           | Pass  Total
BandedBlockBandedMatrix |  179    179
  0.000211 seconds (45 allocations: 11.906 KiB)
  0.000127 seconds (45 allocations: 11.906 KiB)
  1.666245 seconds (1.75 M allocations: 86.900 MiB, 4.74% gc time)
  0.000274 seconds (1.26 k allocations: 159.422 KiB)
Test Summary: | Pass  Total
broadcasting  |   98     98
Test Summary: |
lmul!/rmul!   | No tests
BlockBandedMatrix linear algebra: Error During Test at /home/pkgeval/.julia/packages/BlockBandedMatrices/ljLQ0/test/test_linalg.jl:38
  Test threw exception
  Expression: A * X ≈ (similar(X) .= MulAdd(A, X)) ≈ Matrix(A) * X
  MethodError: no method matching elsize(::Type{PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockedUnitRange{Vector{Int64}},Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockedUnitRange{Vector{Int64}},Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(::PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockedUnitRange{Vector{Int64}},Base.OneTo{Int64}}}, ::Int64, ::Vararg{Int64,N} where N)
      @ Base ./abstractarray.jl:1075
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,2,PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockedUnitRange{Vector{Int64}},Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:405
    [4] gemm!(transA::Char, transB::Char, alpha::Float64, A::SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, B::SubArray{Float64,2,PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockedUnitRange{Vector{Int64}},Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},Base.OneTo{Int64}}},false}, beta::Float64, C::SubArray{Float64,2,PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockedUnitRange{Vector{Int64}},Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:1452
    [5] _gemm!(tA::Char, tB::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, B::SubArray{Float64,2,PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockedUnitRange{Vector{Int64}},Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},Base.OneTo{Int64}}},false}, β::Float64, C::SubArray{Float64,2,PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockedUnitRange{Vector{Int64}},Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},Base.OneTo{Int64}}},false})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:295
    [6] materialize!(M::MulAdd{ColumnMajor,ColumnMajor,ColumnMajor,Float64,SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false},SubArray{Float64,2,PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockedUnitRange{Vector{Int64}},Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},Base.OneTo{Int64}}},false},SubArray{Float64,2,PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockedUnitRange{Vector{Int64}},Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},Base.OneTo{Int64}}},false}})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:314
    [7] muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, B::SubArray{Float64,2,PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockedUnitRange{Vector{Int64}},Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},Base.OneTo{Int64}}},false}, β::Float64, C::SubArray{Float64,2,PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockedUnitRange{Vector{Int64}},Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},Base.OneTo{Int64}}},false})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:80
    [8] _block_muladd!(α::Float64, A::BlockBandedMatrix{Float64}, X::PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockedUnitRange{Vector{Int64}},Base.OneTo{Int64}}}, β::Float64, Y::PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockedUnitRange{Vector{Int64}},Base.OneTo{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:100
    [9] materialize!
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:130 [inlined]
   [10] muladd!
      @ ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:80 [inlined]
   [11] copyto!
      @ ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:94 [inlined]
   [12] copy
      @ ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:82 [inlined]
   [13] materialize
      @ ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:81 [inlined]
   [14] _mul
      @ ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:447 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:448 [inlined]
   [16] *(A::BlockBandedMatrix{Float64}, B::Matrix{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/BlockBandedMatrices/ljLQ0/test/test_linalg.jl:38
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [19] top-level scope
      @ ~/.julia/packages/BlockBandedMatrices/ljLQ0/test/test_linalg.jl:18
  
BlockBandedMatrix linear algebra: Error During Test at /home/pkgeval/.julia/packages/BlockBandedMatrices/ljLQ0/test/test_linalg.jl:39
  Test threw exception
  Expression: X * A ≈ (similar(X) .= MulAdd(X, A)) ≈ Matrix(X) * A
  MethodError: no method matching elsize(::Type{PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{Base.OneTo{Int64},BlockedUnitRange{Vector{Int64}}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{Base.OneTo{Int64},BlockedUnitRange{Vector{Int64}}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(::PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{Base.OneTo{Int64},BlockedUnitRange{Vector{Int64}}}}, ::Int64, ::Vararg{Int64,N} where N)
      @ Base ./abstractarray.jl:1075
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,2,PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{Base.OneTo{Int64},BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false})
      @ Base ./subarray.jl:405
    [4] gemm!(transA::Char, transB::Char, alpha::Float64, A::SubArray{Float64,2,PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{Base.OneTo{Int64},BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, B::SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, C::SubArray{Float64,2,PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{Base.OneTo{Int64},BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:1452
    [5] _gemm!(tA::Char, tB::Char, α::Float64, A::SubArray{Float64,2,PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{Base.OneTo{Int64},BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, B::SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, C::SubArray{Float64,2,PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{Base.OneTo{Int64},BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:295
    [6] materialize!(M::MulAdd{ColumnMajor,ColumnMajor,ColumnMajor,Float64,SubArray{Float64,2,PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{Base.OneTo{Int64},BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false},SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false},SubArray{Float64,2,PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{Base.OneTo{Int64},BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:314
    [7] muladd!(α::Float64, A::SubArray{Float64,2,PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{Base.OneTo{Int64},BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, B::SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, C::SubArray{Float64,2,PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{Base.OneTo{Int64},BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:80
    [8] _block_muladd!(α::Float64, A::PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{Base.OneTo{Int64},BlockedUnitRange{Vector{Int64}}}}, X::BlockBandedMatrix{Float64}, β::Float64, Y::PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{Base.OneTo{Int64},BlockedUnitRange{Vector{Int64}}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:100
    [9] materialize!
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:139 [inlined]
   [10] muladd!
      @ ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:80 [inlined]
   [11] copyto!
      @ ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:94 [inlined]
   [12] copy
      @ ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:82 [inlined]
   [13] materialize
      @ ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:81 [inlined]
   [14] _mul
      @ ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:447 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:448 [inlined]
   [16] *(A::Matrix{Float64}, B::BlockBandedMatrix{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:463
   [17] top-level scope
      @ ~/.julia/packages/BlockBandedMatrices/ljLQ0/test/test_linalg.jl:39
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [19] top-level scope
      @ ~/.julia/packages/BlockBandedMatrices/ljLQ0/test/test_linalg.jl:18
  
BlockBandedMatrix linear algebra: Error During Test at /home/pkgeval/.julia/packages/BlockBandedMatrices/ljLQ0/test/test_linalg.jl:54
  Test threw exception
  Expression: U \ v ≈ w
  MethodError: no method matching elsize(::Type{PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}}, I::Int64)
      @ Base ./abstractarray.jl:1075
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}}},false})
      @ Base ./subarray.jl:405
    [4] gemv!(trans::Char, alpha::Float64, A::SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, X::SubArray{Float64,1,PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, Y::SubArray{Float64,1,PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:704
    [5] _gemv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}}},false})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:286
    [6] materialize!(M::MulAdd{ColumnMajor,DenseColumnMajor,DenseColumnMajor,Float64,SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false},SubArray{Float64,1,PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false},SubArray{Float64,1,PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}}},false}})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:300
    [7] muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, B::SubArray{Float64,1,PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, C::SubArray{Float64,1,PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}}},false})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:80
    [8] materialize!
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:238 [inlined]
    [9] ldiv!
      @ ~/.julia/packages/ArrayLayouts/RffWD/src/ldiv.jl:81 [inlined]
   [10] copyto!
      @ ~/.julia/packages/ArrayLayouts/RffWD/src/triangular.jl:122 [inlined]
   [11] copy
      @ ~/.julia/packages/ArrayLayouts/RffWD/src/ldiv.jl:21 [inlined]
   [12] materialize
      @ ~/.julia/packages/ArrayLayouts/RffWD/src/ldiv.jl:22 [inlined]
   [13] ldiv
      @ ~/.julia/packages/ArrayLayouts/RffWD/src/ldiv.jl:78 [inlined]
   [14] \(A::UpperTriangular{Float64,BlockBandedMatrix{Float64}}, x::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/RffWD/src/ldiv.jl:119
   [15] top-level scope
      @ ~/.julia/packages/BlockBandedMatrices/ljLQ0/test/test_linalg.jl:54
   [16] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [17] top-level scope
      @ ~/.julia/packages/BlockBandedMatrices/ljLQ0/test/test_linalg.jl:18
  
BlockBandedMatrix linear algebra: Error During Test at /home/pkgeval/.julia/packages/BlockBandedMatrices/ljLQ0/test/test_linalg.jl:57
  Test threw exception
  Expression: ldiv!(U, v) === v
  MethodError: no method matching elsize(::Type{PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}}, I::Int64)
      @ Base ./abstractarray.jl:1075
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}}},false})
      @ Base ./subarray.jl:405
    [4] gemv!(trans::Char, alpha::Float64, A::SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, X::SubArray{Float64,1,PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, Y::SubArray{Float64,1,PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:704
    [5] _gemv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}}},false})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:286
    [6] materialize!(M::MulAdd{ColumnMajor,DenseColumnMajor,DenseColumnMajor,Float64,SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false},SubArray{Float64,1,PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false},SubArray{Float64,1,PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}}},false}})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:300
    [7] muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, B::SubArray{Float64,1,PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, C::SubArray{Float64,1,PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}}},false})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/RffWD/src/muladd.jl:80
    [8] materialize!
      @ ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:238 [inlined]
    [9] ldiv!
      @ ~/.julia/packages/ArrayLayouts/RffWD/src/ldiv.jl:81 [inlined]
   [10] ldiv!(A::UpperTriangular{Float64,BlockBandedMatrix{Float64}}, x::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/RffWD/src/ldiv.jl:114
   [11] top-level scope
      @ ~/.julia/packages/BlockBandedMatrices/ljLQ0/test/test_linalg.jl:57
   [12] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [13] top-level scope
      @ ~/.julia/packages/BlockBandedMatrices/ljLQ0/test/test_linalg.jl:18
  
BlockBandedMatrix linear algebra: Test Failed at /home/pkgeval/.julia/packages/BlockBandedMatrices/ljLQ0/test/test_linalg.jl:58
  Expression: v ≈ w
   Evaluated: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.00032141187470780734, 0.00026881720430107527, 0.0002304147465437793, 0.014285714285714285] ≈ [0.1376534967803157, 0.016310738090136334, 0.0797103550859139, 0.000892089130317613, 0.000553710494679897, 0.0003975357397701831, 0.00032141187470780734, 0.00026881720430107527, 0.0002304147465437793, 0.014285714285714285]
Stacktrace:
 [1] top-level scope
   @ ~/.julia/packages/BlockBandedMatrices/ljLQ0/test/test_linalg.jl:58
 [2] top-level scope
   @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
 [3] top-level scope
   @ ~/.julia/packages/BlockBandedMatrices/ljLQ0/test/test_linalg.jl:18
Test Summary:                    | Pass  Fail  Error  Total
BlockBandedMatrix linear algebra |   12     1      4     17
ERROR: LoadError: LoadError: Some tests did not pass: 12 passed, 1 failed, 4 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/BlockBandedMatrices/ljLQ0/test/test_linalg.jl:17
in expression starting at /home/pkgeval/.julia/packages/BlockBandedMatrices/ljLQ0/test/runtests.jl:7
ERROR: Package BlockBandedMatrices errored during testing
Stacktrace:
  [1] pkgerror(::String, ::Vararg{String,N} where N)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1561
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:327
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:314
  [5] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#60
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:16
