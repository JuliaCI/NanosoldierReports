Julia Version 1.6.0-DEV.558
Commit 710cf2813a (2020-07-30 17:00 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed CpuId ─────────────── v0.2.2
  Installed SIMDPirates ───────── v0.8.21
  Installed UnPack ────────────── v1.0.1
  Installed VectorizationBase ─── v0.12.29
  Installed OffsetArrays ──────── v1.1.2
  Installed SLEEFPirates ──────── v0.5.5
  Installed DocStringExtensions ─ v0.8.2
  Installed LoopVectorization ─── v0.8.20
Updating `~/.julia/environments/v1.6/Project.toml`
  [bdcacae8] + LoopVectorization v0.8.20
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [adafc99b] + CpuId v0.2.2
  [ffbed154] + DocStringExtensions v0.8.2
  [bdcacae8] + LoopVectorization v0.8.20
  [6fe1bfb0] + OffsetArrays v1.1.2
  [21efa798] + SIMDPirates v0.8.21
  [476501e8] + SLEEFPirates v0.5.5
  [3a884ed6] + UnPack v1.0.1
  [3d5dd08c] + VectorizationBase v0.12.29
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building SLEEFPirates → `~/.julia/packages/SLEEFPirates/jGsib/deps/build.log`
    Testing LoopVectorization
Status `/tmp/jl_dGzZTO/Project.toml`
  [ffbed154] DocStringExtensions v0.8.2
  [bdcacae8] LoopVectorization v0.8.20
  [6fe1bfb0] OffsetArrays v1.1.2
  [21efa798] SIMDPirates v0.8.21
  [476501e8] SLEEFPirates v0.5.5
  [3a884ed6] UnPack v1.0.1
  [3d5dd08c] VectorizationBase v0.12.29
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [8dfed614] Test
Status `/tmp/jl_dGzZTO/Manifest.toml`
  [adafc99b] CpuId v0.2.2
  [ffbed154] DocStringExtensions v0.8.2
  [bdcacae8] LoopVectorization v0.8.20
  [6fe1bfb0] OffsetArrays v1.1.2
  [21efa798] SIMDPirates v0.8.21
  [476501e8] SLEEFPirates v0.5.5
  [3a884ed6] UnPack v1.0.1
  [3d5dd08c] VectorizationBase v0.12.29
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
LoopVectorization.REGISTER_COUNT = 32
#= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/printmethods.jl:2 =# @__LINE__() = 2
  5.330299 seconds (2.77 M allocations: 155.954 MiB, 1.62% gc time)
(Float64, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/fallback.jl:4 =# @__LINE__()) = (Float64, 4)
 22.627045 seconds (11.80 M allocations: 668.168 MiB, 2.71% gc time)
  0.121222 seconds (75.25 k allocations: 4.575 MiB)
  7.989253 seconds (7.22 M allocations: 409.544 MiB, 2.40% gc time)
  1.884150 seconds (2.17 M allocations: 121.775 MiB, 4.60% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/offsetarrays.jl:203 =# @__LINE__()) = (Float32, 203)
r = -1:1
r = -2:2
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/offsetarrays.jl:203 =# @__LINE__()) = (Float64, 203)
r = -1:1
r = -2:2
631.702990 seconds (298.92 M allocations: 24.128 GiB, 4.83% gc time)
(Float64, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/tensors.jl:51 =# @__LINE__()) = (Float64, 51)
 19.993913 seconds (14.05 M allocations: 818.664 MiB, 1.82% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/map.jl:4 =# @__LINE__()) = (Float32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/map.jl:4 =# @__LINE__()) = (Float64, 4)
  7.357458 seconds (7.23 M allocations: 410.841 MiB, 2.68% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/filter.jl:4 =# @__LINE__()) = (Float32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/filter.jl:4 =# @__LINE__()) = (Float64, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/filter.jl:4 =# @__LINE__()) = (Int32, 4)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/filter.jl:4 =# @__LINE__()) = (Int64, 4)
  1.156175 seconds (792.99 k allocations: 46.613 MiB)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/mapreduce.jl:19 =# @__LINE__()) = (Int32, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/mapreduce.jl:19 =# @__LINE__()) = (Int64, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/mapreduce.jl:19 =# @__LINE__()) = (Float32, 19)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/mapreduce.jl:19 =# @__LINE__()) = (Float64, 19)
198.640687 seconds (442.62 M allocations: 29.260 GiB, 7.49% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/ifelsemasks.jl:321 =# @__LINE__()) = (Float32, 321)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/ifelsemasks.jl:321 =# @__LINE__()) = (Float64, 321)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/ifelsemasks.jl:321 =# @__LINE__()) = (Int32, 321)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/ifelsemasks.jl:321 =# @__LINE__()) = (Int64, 321)
 74.514329 seconds (50.29 M allocations: 2.750 GiB, 5.26% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/dot.jl:234 =# @__LINE__()) = (Float32, 234)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/dot.jl:234 =# @__LINE__()) = (Float64, 234)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/dot.jl:234 =# @__LINE__()) = (Int32, 234)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/dot.jl:234 =# @__LINE__()) = (Int64, 234)
 43.131374 seconds (38.99 M allocations: 2.191 GiB, 3.77% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/special.jl:339 =# @__LINE__()) = (Float32, 339)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/special.jl:339 =# @__LINE__()) = (Float64, 339)
 16.182282 seconds (12.79 M allocations: 690.024 MiB, 3.34% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/gemv.jl:211 =# @__LINE__()) = (Float32, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/gemv.jl:211 =# @__LINE__()) = (Float64, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/gemv.jl:211 =# @__LINE__()) = (Int32, 211)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/gemv.jl:211 =# @__LINE__()) = (Int64, 211)
 94.875984 seconds (75.91 M allocations: 3.720 GiB, 2.66% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/miscellaneous.jl:757 =# @__LINE__()) = (Float32, 757)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/miscellaneous.jl:757 =# @__LINE__()) = (Float64, 757)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/miscellaneous.jl:1030 =# @__LINE__()) = (Float32, 1030)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/miscellaneous.jl:1030 =# @__LINE__()) = (Float64, 1030)
165.791891 seconds (161.51 M allocations: 8.585 GiB, 8.51% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/copy.jl:129 =# @__LINE__()) = (Float32, 129)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/copy.jl:129 =# @__LINE__()) = (Float64, 129)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/copy.jl:129 =# @__LINE__()) = (Int32, 129)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/copy.jl:129 =# @__LINE__()) = (Int64, 129)
 11.279590 seconds (8.55 M allocations: 463.779 MiB, 3.72% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/broadcast.jl:5 =# @__LINE__()) = (Float32, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/broadcast.jl:5 =# @__LINE__()) = (Float64, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/broadcast.jl:5 =# @__LINE__()) = (Int32, 5)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/broadcast.jl:5 =# @__LINE__()) = (Int64, 5)
337.623385 seconds (132.54 M allocations: 8.107 GiB, 3.29% gc time)
OPS = Tuple{:numericconstant,Symbol("##zero#13768"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fa7735af700, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fa7735af930, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fa7735af9a0, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#13768"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007fa7720bb070, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fa7720bb0e0, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fa772168440, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#13768"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fa773d44c20, (16,)), VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007fa773d44c90, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fa773d44d00, (16,)))
OPS = Tuple{:numericconstant,Symbol("##zero#13768"),LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000013, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03),:LoopVectorization,:vfmadd_fast,LoopVectorization.OperationStruct(0x0000000000000132, 0x0000000000000003, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:identity,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01),:LoopVectorization,:getindex,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x04),:LoopVectorization,:vadd,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000605, LoopVectorization.compute, 0x00, 0x04),:LoopVectorization,:setindex!,LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000007, LoopVectorization.memstore, 0x03, 0x05)}
ARF = Tuple{LoopVectorization.ArrayRefStruct{:A,Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000103, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:B,Symbol("##vptr##_B")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000),LoopVectorization.ArrayRefStruct{:C,Symbol("##vptr##_C")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000)}
AM = Tuple{0,Tuple{},Tuple{},Tuple{},Tuple{},Tuple{(1, LoopVectorization.IntOrFloat)},Tuple{}}
LPSYM = Tuple{:m,:n,:k}
LB = Tuple{VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1},VectorizationBase.StaticLowerUnitRange{1}}
vargs = (VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007fa777079c50, (16,)), VectorizationBase.RowMajorStridedPointer{Float64,1}(Ptr{Float64} @0x00007fa777079da0, (16,)), VectorizationBase.PackedStridedPointer{Float64,1}(Ptr{Float64} @0x00007fa777079e10, (16,)))
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/gemm.jl:638 =# @__LINE__()) = (Float32, 638)
219.407081 seconds (100.31 M allocations: 6.670 GiB, 6.57% gc time)
 67.641363 seconds (41.46 M allocations: 2.565 GiB, 5.80% gc time)
 87.568621 seconds (42.04 M allocations: 2.640 GiB, 5.47% gc time)
 57.460214 seconds (34.74 M allocations: 2.328 GiB, 6.58% gc time)
 25.117778 seconds (12.90 M allocations: 856.905 MiB, 4.67% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/gemm.jl:638 =# @__LINE__()) = (Float64, 638)
211.993797 seconds (99.61 M allocations: 6.636 GiB, 5.40% gc time)
 61.864897 seconds (41.34 M allocations: 2.561 GiB, 3.14% gc time)
 80.302470 seconds (43.04 M allocations: 2.731 GiB, 3.63% gc time)
 49.744793 seconds (34.70 M allocations: 2.326 GiB, 4.41% gc time)
 18.914490 seconds (12.77 M allocations: 849.228 MiB, 3.26% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/gemm.jl:638 =# @__LINE__()) = (Int32, 638)
273.390083 seconds (107.66 M allocations: 6.969 GiB, 4.18% gc time)
 81.551765 seconds (43.43 M allocations: 2.633 GiB, 3.12% gc time)
106.300748 seconds (42.80 M allocations: 2.622 GiB, 3.58% gc time)
 69.136256 seconds (36.72 M allocations: 2.396 GiB, 4.73% gc time)
 23.911293 seconds (13.23 M allocations: 863.995 MiB, 3.63% gc time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/v1q4e/test/gemm.jl:638 =# @__LINE__()) = (Int64, 638)
261.577295 seconds (107.43 M allocations: 6.961 GiB, 4.02% gc time)
 83.688623 seconds (43.35 M allocations: 2.631 GiB, 3.27% gc time)
