Julia Version 1.6.0-DEV.552
Commit 4e50c989df (2020-07-29 11:07 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed FileIO ────── v1.4.0
  Installed GAFramework ─ v0.4.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.0
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_TtoSa0/Project.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_TtoSa0/Manifest.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723097788185805
curgen: 20 fitness: 0.21723097788185805
curgen: 30 fitness: 0.21723097788185805
curgen: 40 fitness: 0.21723097788185805
curgen: 50 fitness: 0.21723097788185805
CoordinateCreature{Vector{Float64}}([0.2223036850595257], -0.21723097788185805) 0.2223036850595257 -0.21723097788185805
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2580898285826607
curgen: 100 fitness: 3.258180797483463
curgen: 150 fitness: 3.2582852460283087
curgen: 200 fitness: 3.258370886442689
curgen: 250 fitness: 3.2583765753472043
curgen: 300 fitness: 3.258445886557809
curgen: 350 fitness: 3.258451440782112
curgen: 400 fitness: 3.2584531482921295
curgen: 450 fitness: 3.2584531482921295
curgen: 500 fitness: 3.258461773779827
CoordinateCreature{Vector{Float64}}([0.22268542379148906, 0.22226052722176454, -0.22273527911177643, 0.22254789906740613, 0.22239078474114443, -0.22252308299743298, 0.22320592676467857, -0.22262286685921898, 0.22223242150813866, 0.22247732179397892, 0.2223706256704947, -0.222606715591014, -0.22270954930305395, 0.2223276133106755, -0.22216136141750034], -3.258461773779827) [0.22268542379148906, 0.22226052722176454, -0.22273527911177643, 0.22254789906740613, 0.22239078474114443, -0.22252308299743298, 0.22320592676467857, -0.22262286685921898, 0.22223242150813866, 0.22247732179397892, 0.2223706256704947, -0.222606715591014, -0.22270954930305395, 0.2223276133106755, -0.22216136141750034] -3.258461773779827
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.004289913367642839
curgen: 100 fitness: -0.003923849588630901
curgen: 150 fitness: -0.0016083590505502343
curgen: 200 fitness: -0.0016083590505502343
curgen: 250 fitness: -0.0016083590505502343
curgen: 300 fitness: -0.0016083590505502343
curgen: 350 fitness: -0.0015661174400065647
curgen: 400 fitness: -0.0015661174400065647
curgen: 450 fitness: -0.0015661174400065647
curgen: 500 fitness: -0.0015661174400065647
CoordinateCreature{Vector{Float64}}([-0.0005308054189067275, -0.0008479903446032347, -0.000407508606298461, 2.0029831150219363e-5, -0.0002564232226394021, 0.0004540455501110658, -0.00017981304416621194, -0.000531193879075618, 0.00037434488046546744, 0.00014973100569313884, 0.0004496050976321472, -0.00036313221564694556, 0.0007182534387998639, 0.00043533851186975536, 0.0022222619619331804], 0.0015661174400065647) [-0.0005308054189067275, -0.0008479903446032347, -0.000407508606298461, 2.0029831150219363e-5, -0.0002564232226394021, 0.0004540455501110658, -0.00017981304416621194, -0.000531193879075618, 0.00037434488046546744, 0.00014973100569313884, 0.0004496050976321472, -0.00036313221564694556, 0.0007182534387998639, 0.00043533851186975536, 0.0022222619619331804] 0.0015661174400065647
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
