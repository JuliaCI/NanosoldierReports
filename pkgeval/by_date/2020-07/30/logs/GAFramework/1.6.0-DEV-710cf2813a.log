Julia Version 1.6.0-DEV.558
Commit 710cf2813a (2020-07-30 17:00 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.0
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_BaYG1Y/Project.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_BaYG1Y/Manifest.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.2172087505192438
curgen: 20 fitness: 0.21721727535318264
curgen: 30 fitness: 0.21723150155363427
curgen: 40 fitness: 0.21723150155363427
curgen: 50 fitness: 0.21723150155363427
CoordinateCreature{Vector{Float64}}([0.22276745598347544], -0.21723150155363427) 0.22276745598347544 -0.21723150155363427
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2580106945944842
curgen: 100 fitness: 3.258209602040276
curgen: 150 fitness: 3.258266587410572
curgen: 200 fitness: 3.258266587410572
curgen: 250 fitness: 3.258333855976101
curgen: 300 fitness: 3.25842001250635
curgen: 350 fitness: 3.258421653191633
curgen: 400 fitness: 3.2584331982239196
curgen: 450 fitness: 3.258449044336629
curgen: 500 fitness: 3.258449044336629
CoordinateCreature{Vector{Float64}}([0.22261186844848166, 0.22239214364322277, 0.22263590915123763, -0.22299485284041287, 0.2224793699739227, 0.22245043892548685, -0.22243209811035933, 0.22223689042632364, 0.2225605506593159, 0.22281323638233863, -0.22213051888908542, -0.22196023600489456, 0.22251996670526006, -0.22207657877678122, 0.22227476464992799], -3.258449044336629) [0.22261186844848166, 0.22239214364322277, 0.22263590915123763, -0.22299485284041287, 0.2224793699739227, 0.22245043892548685, -0.22243209811035933, 0.22223689042632364, 0.2225605506593159, 0.22281323638233863, -0.22213051888908542, -0.22196023600489456, 0.22251996670526006, -0.22207657877678122, 0.22227476464992799] -3.258449044336629
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.001545737496513766
curgen: 100 fitness: -0.0012280186715827313
curgen: 150 fitness: -0.0012280186715827313
curgen: 200 fitness: -0.0009408990802057815
curgen: 250 fitness: -0.0009408990802057815
curgen: 300 fitness: -0.0008865878522783532
curgen: 350 fitness: -0.0008865878522783532
curgen: 400 fitness: -0.0008865878522783532
curgen: 450 fitness: -0.0008865878522783532
curgen: 500 fitness: -0.0008865878522783532
CoordinateCreature{Vector{Float64}}([0.0008559876558804691, 3.6608490531508736e-5, -0.0008182307740182224, 0.0001643852789201851, 0.0005893081625813793, -5.235796318212802e-5, -0.0008476298146367639, -0.00011340172833740596, -1.7164563478389667e-5, 0.00022399709672168457, 3.3172983458354182e-6, 0.00033761007612359713, 0.0002905641711250803, -0.0003056235517707915, 0.0012706871611318214], 0.0008865878522783532) [0.0008559876558804691, 3.6608490531508736e-5, -0.0008182307740182224, 0.0001643852789201851, 0.0005893081625813793, -5.235796318212802e-5, -0.0008476298146367639, -0.00011340172833740596, -1.7164563478389667e-5, 0.00022399709672168457, 3.3172983458354182e-6, 0.00033761007612359713, 0.0002905641711250803, -0.0003056235517707915, 0.0012706871611318214] 0.0008865878522783532
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
