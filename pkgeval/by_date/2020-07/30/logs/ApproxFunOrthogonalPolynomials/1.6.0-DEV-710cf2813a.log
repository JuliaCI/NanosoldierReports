Julia Version 1.6.0-DEV.558
Commit 710cf2813a (2020-07-30 17:00 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed XML2_jll ─────────────────────── v2.9.10+1
  Installed Missings ─────────────────────── v0.4.3
  Installed InfiniteArrays ───────────────── v0.7.3
  Installed EzXML ────────────────────────── v1.1.0
  Installed FillArrays ───────────────────── v0.8.13
  Installed MacroTools ───────────────────── v0.5.5
  Installed ApproxFunOrthogonalPolynomials ─ v0.3.4
  Installed ApproxFunBase ────────────────── v0.3.5
  Installed EllipsisNotation ─────────────── v0.4.0
  Installed MPFR_jll ─────────────────────── v4.0.2+2
  Installed Nullables ────────────────────── v1.0.0
  Installed GMP_jll ──────────────────────── v6.2.0+1
  Installed IntervalSets ─────────────────── v0.5.1
  Installed SpecialFunctions ─────────────── v0.10.3
  Installed FastTransforms ───────────────── v0.8.2
  Installed StaticArrays ─────────────────── v0.12.4
  Installed RecipesBase ──────────────────── v1.0.2
  Installed CompilerSupportLibraries_jll ─── v0.3.3+0
  Installed ArrayLayouts ─────────────────── v0.3.8
  Installed Compat ───────────────────────── v3.13.0
  Installed MatrixFactorizations ─────────── v0.5.1
  Installed DataStructures ───────────────── v0.17.19
  Installed Polynomials ──────────────────── v1.1.3
  Installed FastGaussQuadrature ──────────── v0.4.2
  Installed SortingAlgorithms ────────────── v0.3.1
  Installed AbstractFFTs ─────────────────── v0.5.0
  Installed MKL_jll ──────────────────────── v2020.1.216+0
  Installed Calculus ─────────────────────── v0.5.1
  Installed Zlib_jll ─────────────────────── v1.2.11+14
  Installed Libiconv_jll ─────────────────── v1.16.0+5
  Installed NaNMath ──────────────────────── v0.3.4
  Installed StatsBase ────────────────────── v0.33.0
  Installed IterTools ────────────────────── v1.3.0
  Installed ToeplitzMatrices ─────────────── v0.6.0
  Installed Reexport ─────────────────────── v0.2.0
  Installed FFTW_jll ─────────────────────── v3.3.9+5
  Installed DSP ──────────────────────────── v0.6.7
  Installed OrderedCollections ───────────── v1.3.0
  Installed BlockBandedMatrices ──────────── v0.8.11
  Installed LowRankApprox ────────────────── v0.4.0
  Installed FFTW ─────────────────────────── v1.2.2
  Installed Intervals ────────────────────── v1.4.1
  Installed TimeZones ────────────────────── v1.3.1
  Installed OpenSpecFun_jll ──────────────── v0.5.3+3
  Installed DataAPI ──────────────────────── v1.3.0
  Installed BinaryProvider ───────────────── v0.5.10
  Installed BandedMatrices ───────────────── v0.15.15
  Installed ExprTools ────────────────────── v0.1.1
  Installed DualNumbers ──────────────────── v0.6.2
  Installed BlockArrays ──────────────────── v0.12.10
  Installed FastTransforms_jll ───────────── v0.2.13+1
  Installed IntelOpenMP_jll ──────────────── v2018.0.3+0
  Installed OpenBLAS_jll ─────────────────── v0.3.9+5
  Installed Mocking ──────────────────────── v0.7.1
  Installed DomainSets ───────────────────── v0.3.1
  Installed LazyArrays ───────────────────── v0.16.15
Updating `~/.julia/environments/v1.6/Project.toml`
  [b70543e2] + ApproxFunOrthogonalPolynomials v0.3.4
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [fbd15aa5] + ApproxFunBase v0.3.5
  [b70543e2] + ApproxFunOrthogonalPolynomials v0.3.4
  [4c555306] + ArrayLayouts v0.3.8
  [aae01518] + BandedMatrices v0.15.15
  [b99e7846] + BinaryProvider v0.5.10
  [8e7c35d0] + BlockArrays v0.12.10
  [ffab5731] + BlockBandedMatrices v0.8.11
  [49dc2e85] + Calculus v0.5.1
  [34da2185] + Compat v3.13.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [717857b8] + DSP v0.6.7
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.17.19
  [5b8099bc] + DomainSets v0.3.1
  [fa6b7ba4] + DualNumbers v0.6.2
  [da5c29d0] + EllipsisNotation v0.4.0
  [e2ba6199] + ExprTools v0.1.1
  [8f5d6c58] + EzXML v1.1.0
  [7a1cc6ca] + FFTW v1.2.2
  [f5851436] + FFTW_jll v3.3.9+5
  [442a2c76] + FastGaussQuadrature v0.4.2
  [057dd010] + FastTransforms v0.8.2
  [34b6f7d7] + FastTransforms_jll v0.2.13+1
  [1a297f60] + FillArrays v0.8.13
  [781609d7] + GMP_jll v6.2.0+1
  [4858937d] + InfiniteArrays v0.7.3
  [1d5cc7b8] + IntelOpenMP_jll v2018.0.3+0
  [8197267c] + IntervalSets v0.5.1
  [d8418881] + Intervals v1.4.1
  [c8e1da08] + IterTools v1.3.0
  [5078a376] + LazyArrays v0.16.15
  [94ce4f54] + Libiconv_jll v1.16.0+5
  [898213cb] + LowRankApprox v0.4.0
  [856f044c] + MKL_jll v2020.1.216+0
  [3a97d323] + MPFR_jll v4.0.2+2
  [1914dd2f] + MacroTools v0.5.5
  [a3b82374] + MatrixFactorizations v0.5.1
  [e1d29d7a] + Missings v0.4.3
  [78c3b35d] + Mocking v0.7.1
  [77ba4419] + NaNMath v0.3.4
  [4d1e1d77] + Nullables v1.0.0
  [4536629a] + OpenBLAS_jll v0.3.9+5
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.3.0
  [f27b6e38] + Polynomials v1.1.3
  [3cdcf5f2] + RecipesBase v1.0.2
  [189a3867] + Reexport v0.2.0
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.4
  [2913bbd2] + StatsBase v0.33.0
  [f269a46b] + TimeZones v1.3.1
  [c751599d] + ToeplitzMatrices v0.6.0
  [02c8fc9c] + XML2_jll v2.9.10+1
  [83775a58] + Zlib_jll v1.2.11+14
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building FFTW ──────────→ `~/.julia/packages/FFTW/kcXL6/deps/build.log`
   Building TimeZones ─────→ `~/.julia/packages/TimeZones/cAGJs/deps/build.log`
   Building FastTransforms → `~/.julia/packages/FastTransforms/MjTJy/deps/build.log`
    Testing ApproxFunOrthogonalPolynomials
Status `/tmp/jl_Uzngx2/Project.toml`
  [621f4979] AbstractFFTs v0.5.0
  [fbd15aa5] ApproxFunBase v0.3.5
  [b70543e2] ApproxFunOrthogonalPolynomials v0.3.4
  [aae01518] BandedMatrices v0.15.15
  [8e7c35d0] BlockArrays v0.12.10
  [ffab5731] BlockBandedMatrices v0.8.11
  [5b8099bc] DomainSets v0.3.1
  [7a1cc6ca] FFTW v1.2.2
  [442a2c76] FastGaussQuadrature v0.4.2
  [057dd010] FastTransforms v0.8.2
  [1a297f60] FillArrays v0.8.13
  [8197267c] IntervalSets v0.5.1
  [5078a376] LazyArrays v0.16.15
  [189a3867] Reexport v0.2.0
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [37e2e46d] LinearAlgebra
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_Uzngx2/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [fbd15aa5] ApproxFunBase v0.3.5
  [b70543e2] ApproxFunOrthogonalPolynomials v0.3.4
  [4c555306] ArrayLayouts v0.3.8
  [aae01518] BandedMatrices v0.15.15
  [b99e7846] BinaryProvider v0.5.10
  [8e7c35d0] BlockArrays v0.12.10
  [ffab5731] BlockBandedMatrices v0.8.11
  [49dc2e85] Calculus v0.5.1
  [34da2185] Compat v3.13.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [717857b8] DSP v0.6.7
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.17.19
  [5b8099bc] DomainSets v0.3.1
  [fa6b7ba4] DualNumbers v0.6.2
  [da5c29d0] EllipsisNotation v0.4.0
  [e2ba6199] ExprTools v0.1.1
  [8f5d6c58] EzXML v1.1.0
  [7a1cc6ca] FFTW v1.2.2
  [f5851436] FFTW_jll v3.3.9+5
  [442a2c76] FastGaussQuadrature v0.4.2
  [057dd010] FastTransforms v0.8.2
  [34b6f7d7] FastTransforms_jll v0.2.13+1
  [1a297f60] FillArrays v0.8.13
  [781609d7] GMP_jll v6.2.0+1
  [4858937d] InfiniteArrays v0.7.3
  [1d5cc7b8] IntelOpenMP_jll v2018.0.3+0
  [8197267c] IntervalSets v0.5.1
  [d8418881] Intervals v1.4.1
  [c8e1da08] IterTools v1.3.0
  [5078a376] LazyArrays v0.16.15
  [94ce4f54] Libiconv_jll v1.16.0+5
  [898213cb] LowRankApprox v0.4.0
  [856f044c] MKL_jll v2020.1.216+0
  [3a97d323] MPFR_jll v4.0.2+2
  [1914dd2f] MacroTools v0.5.5
  [a3b82374] MatrixFactorizations v0.5.1
  [e1d29d7a] Missings v0.4.3
  [78c3b35d] Mocking v0.7.1
  [77ba4419] NaNMath v0.3.4
  [4d1e1d77] Nullables v1.0.0
  [4536629a] OpenBLAS_jll v0.3.9+5
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.3.0
  [f27b6e38] Polynomials v1.1.3
  [3cdcf5f2] RecipesBase v1.0.2
  [189a3867] Reexport v0.2.0
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [2913bbd2] StatsBase v0.33.0
  [f269a46b] TimeZones v1.3.1
  [c751599d] ToeplitzMatrices v0.6.0
  [02c8fc9c] XML2_jll v2.9.10+1
  [83775a58] Zlib_jll v1.2.11+14
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Domain        |    1      1
Test Summary: | Pass  Total
Clenshaw      |    1      1
  4.218302 seconds (4.83 M allocations: 275.659 MiB, 3.31% gc time)
Test Summary: | Pass  Total
Chebyshev     |  488    488
115.856042 seconds (98.87 M allocations: 5.546 GiB, 4.87% gc time)
Test Summary: | Pass  Total
Complex       |   13     13
  5.291057 seconds (3.56 M allocations: 205.677 MiB, 2.56% gc time)
Test Summary: | Pass  Total
broadcast     |   18     18
 34.780508 seconds (27.91 M allocations: 1.569 GiB, 3.70% gc time)
  4.912970 seconds (4.57 M allocations: 240.927 MiB, 4.99% gc time)
  7.730851 seconds (6.89 M allocations: 435.961 MiB, 4.26% gc time)
  8.363264 seconds (6.66 M allocations: 361.088 MiB, 3.35% gc time)
  0.115790 seconds (31.68 k allocations: 2.044 MiB)
  1.281959 seconds (1.32 M allocations: 67.575 MiB, 4.35% gc time)
 38.327197 seconds (24.88 M allocations: 1.463 GiB, 2.61% gc time)
Test Summary: |  Pass  Total
Operator      | 12366  12366
387.977558 seconds (305.99 M allocations: 16.338 GiB, 4.10% gc time)
  0.701375 seconds (616.54 k allocations: 36.481 MiB, 11.19% gc time)
  2.145543 seconds (1.54 M allocations: 94.675 MiB, 3.02% gc time)
  3.171488 seconds (2.36 M allocations: 142.405 MiB, 4.48% gc time)
  3.222092 seconds (4.00 M allocations: 158.376 MiB, 4.11% gc time)
  3.730633 seconds (3.88 M allocations: 228.703 MiB, 3.35% gc time)
  6.056267 seconds (6.49 M allocations: 357.592 MiB, 3.93% gc time)
  8.999324 seconds (5.76 M allocations: 330.810 MiB, 4.83% gc time)
  3.578946 seconds (2.56 M allocations: 156.197 MiB, 2.65% gc time)
Test Summary: | Pass  Total
ODE           | 2729   2729
202.813302 seconds (174.63 M allocations: 9.528 GiB, 4.71% gc time)
Test Summary:       | Pass  Total
Eigenvalue problems |   13     13
162.818972 seconds (121.24 M allocations: 6.704 GiB, 4.47% gc time)
  2.491375 seconds (1.64 M allocations: 100.753 MiB, 5.03% gc time)
  0.233327 seconds (25.70 k allocations: 1.234 MiB)
  5.638142 seconds (4.49 M allocations: 269.830 MiB, 4.29% gc time)
  0.947526 seconds (903.27 k allocations: 50.122 MiB, 17.47% gc time)
Test Summary: | Pass  Broken  Total
Vector        |  446       1    447
 85.462024 seconds (64.57 M allocations: 3.649 GiB, 4.18% gc time)
  0.000388 seconds (164 allocations: 8.172 KiB)
  7.530317 seconds (6.19 M allocations: 329.544 MiB, 7.74% gc time)
  0.234533 seconds (11 allocations: 32.703 KiB)
  9.894196 seconds (8.58 M allocations: 739.725 MiB, 8.11% gc time)
 10.837136 seconds (8.08 M allocations: 464.490 MiB, 4.13% gc time)
 13.219121 seconds (10.70 M allocations: 549.204 MiB, 5.08% gc time)
  4.429976 seconds (2.29 M allocations: 125.575 MiB)
 12.175208 seconds (8.12 M allocations: 410.868 MiB, 15.39% gc time)
  6.018378 seconds (3.13 M allocations: 174.059 MiB, 6.89% gc time)
 19.763695 seconds (13.13 M allocations: 736.000 MiB, 4.50% gc time)
  8.981572 seconds (7.98 M allocations: 405.244 MiB, 4.59% gc time)
Test Summary: | Pass  Total
Jacobi        | 4811   4811
208.872135 seconds (142.82 M allocations: 8.306 GiB, 5.84% gc time)
Test Summary:                 | Pass  Total
Laguerre and WeightedLaguerre |   21     21
106.342294 seconds (67.81 M allocations: 3.171 GiB, 3.00% gc time)
Test Summary:           | Pass  Total
Hermite and GaussWeight |  415    415
 49.711160 seconds (42.50 M allocations: 2.219 GiB, 8.13% gc time)
  0.151673 seconds (93.49 k allocations: 5.913 MiB)
  2.591886 seconds (3.33 M allocations: 171.189 MiB, 7.27% gc time)
  4.078590 seconds (2.35 M allocations: 143.017 MiB, 9.25% gc time)
  0.001928 seconds (3.40 k allocations: 236.375 KiB)
  2.614354 seconds (1.79 M allocations: 115.819 MiB, 20.39% gc time)
Test Summary: | Pass  Broken  Total
Spaces        | 1745       1   1746
318.479930 seconds (226.67 M allocations: 13.679 GiB, 6.39% gc time)
  2.226346 seconds (1.87 M allocations: 115.901 MiB)
  1.815084 seconds (1.31 M allocations: 80.357 MiB, 12.01% gc time)
  0.301254 seconds (141.33 k allocations: 9.508 MiB)
  3.617031 seconds (2.23 M allocations: 138.905 MiB, 12.66% gc time)
  0.343168 seconds (213.45 k allocations: 12.995 MiB)
  1.028405 seconds (2.21 M allocations: 202.138 MiB, 21.17% gc time)
  1.145353 seconds (2.38 M allocations: 210.352 MiB, 18.47% gc time)
Partial derivative operators: Error During Test at /home/pkgeval/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/MultivariateTest.jl:129
  Got exception outside of a @test
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(::BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}}, ::Int64, ::Vararg{Int64,N} where N)
      @ Base ./abstractarray.jl:1075
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.BlockIndexRange{1,Tuple{UnitRange{Int64}}},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false})
      @ Base ./subarray.jl:405
    [4] pointer(x::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.BlockIndexRange{1,Tuple{UnitRange{Int64}}},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false})
      @ Base ./abstractarray.jl:1065
    [5] _gbmm!(α::Float64, A_data::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, B_data::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, C_data::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.BlockIndexRange{1,Tuple{UnitRange{Int64}}},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::Tuple{Int64,Int64,Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/banded/gbmm.jl:297
    [6] gbmm!(tA::Char, tB::Char, α::Float64, A::SubArray{Float64,2,BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, B::SubArray{Float64,2,BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, C::SubArray{Float64,2,BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/banded/gbmm.jl:288
    [7] _banded_muladd!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:179 [inlined]
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:187 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/x9nhz/src/muladd.jl:80 [inlined]
   [10] _block_muladd!(α::Float64, A::BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}}, X::BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}}, β::Float64, Y::BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:100
   [11] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},Float64,BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}},BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}},BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:112
   [12] muladd!
      @ ~/.julia/packages/ArrayLayouts/x9nhz/src/muladd.jl:80 [inlined]
   [13] copyto!
      @ ~/.julia/packages/ArrayLayouts/x9nhz/src/muladd.jl:94 [inlined]
   [14] copy
      @ ~/.julia/packages/ArrayLayouts/x9nhz/src/muladd.jl:82 [inlined]
   [15] materialize(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.ZerosLayout,Float64,BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}},BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}},Zeros{Float64,2,Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}}})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/x9nhz/src/muladd.jl:81
   [16] _mul
      @ ~/.julia/packages/ArrayLayouts/x9nhz/src/muladd.jl:447 [inlined]
   [17] mul
      @ ~/.julia/packages/ArrayLayouts/x9nhz/src/muladd.jl:448 [inlined]
   [18] *(A::BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}}, B::BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/x9nhz/src/muladd.jl:460
   [19] BandedBlockBandedMatrix(V::ApproxFunBase.SubOperator{Float64,TimesOperator{Float64,Tuple{InfiniteArrays.Infinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/general/algebra.jl:498
   [20] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float64,TimesOperator{Float64,Tuple{InfiniteArrays.Infinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [21] defaultgetindex(B::TimesOperator{Float64,Tuple{InfiniteArrays.Infinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [22] getindex(B::TimesOperator{Float64,Tuple{InfiniteArrays.Infinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208
   [23] ApproxFunBase.RaggedMatrix(V::ApproxFunBase.SubOperator{Float64,TimesOperator{Float64,Tuple{InfiniteArrays.Infinity,InfiniteArrays.Infinity}},Tuple{UnitRange{Int64},UnitRange{Int64}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/general/algebra.jl:392
   [24] AbstractArray
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781 [inlined]
   [25] axpy!(a::Float64, X::ApproxFunBase.SubOperator{Float64,TimesOperator{Float64,Tuple{InfiniteArrays.Infinity,InfiniteArrays.Infinity}},Tuple{UnitRange{Int64},UnitRange{Int64}},Tuple{Int64,Int64},Tuple{Int64,Int64}}, Y::ApproxFunBase.RaggedMatrix{Float64})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:675
   [26] axpy!(α::Float64, P::ApproxFunBase.SubOperator{Float64,PlusOperator{Float64,Tuple{InfiniteArrays.Infinity,InfiniteArrays.Infinity}},Tuple{UnitRange{Int64},UnitRange{Int64}},Tuple{Int64,Int64},Tuple{Int64,Int64}}, A::ApproxFunBase.RaggedMatrix{Float64})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/general/algebra.jl:123
   [27] convert_axpy!
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:696 [inlined]
   [28] ApproxFunBase.RaggedMatrix(P::ApproxFunBase.SubOperator{Float64,PlusOperator{Float64,Tuple{InfiniteArrays.Infinity,InfiniteArrays.Infinity}},Tuple{UnitRange{Int64},UnitRange{Int64}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/general/algebra.jl:116
   [29] testraggedbelowoperator(A::PlusOperator{Float64,Tuple{InfiniteArrays.Infinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:179
   [30] testblockbandedoperator(A::PlusOperator{Float64,Tuple{InfiniteArrays.Infinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:216
   [31] testbandedblockbandedoperator(A::PlusOperator{Float64,Tuple{InfiniteArrays.Infinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:231
   [32] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/MultivariateTest.jl:141
   [33] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [34] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/MultivariateTest.jl:130
   [35] top-level scope
      @ timing.jl:174
   [36] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/MultivariateTest.jl:129
   [37] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [38] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/MultivariateTest.jl:8
   [39] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [40] top-level scope
      @ ./timing.jl:174
   [41] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [42] top-level scope
      @ none:6
   [43] eval(m::Module, e::Any)
      @ Core ./boot.jl:340
   [44] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [45] _start()
      @ Base ./client.jl:484
  
 82.284661 seconds (50.64 M allocations: 2.517 GiB, 5.41% gc time)
 14.208803 seconds (12.09 M allocations: 736.332 MiB, 3.99% gc time)
2d derivative (issue #346): Error During Test at /home/pkgeval/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/MultivariateTest.jl:279
  Got exception outside of a @test
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(::BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}}, ::Int64, ::Vararg{Int64,N} where N)
      @ Base ./abstractarray.jl:1075
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.BlockIndexRange{1,Tuple{UnitRange{Int64}}},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false})
      @ Base ./subarray.jl:405
    [4] pointer(x::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.BlockIndexRange{1,Tuple{UnitRange{Int64}}},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false})
      @ Base ./abstractarray.jl:1065
    [5] _gbmm!(α::Float64, A_data::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, B_data::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, C_data::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.BlockIndexRange{1,Tuple{UnitRange{Int64}}},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::Tuple{Int64,Int64,Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/banded/gbmm.jl:297
    [6] gbmm!(tA::Char, tB::Char, α::Float64, A::SubArray{Float64,2,BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, B::SubArray{Float64,2,BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, C::SubArray{Float64,2,BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/banded/gbmm.jl:288
    [7] _banded_muladd!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:179 [inlined]
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:187 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/x9nhz/src/muladd.jl:80 [inlined]
   [10] _block_muladd!(α::Float64, A::BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}}, X::BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}}, β::Float64, Y::BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:100
   [11] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},Float64,BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}},BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}},BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:112
   [12] muladd!
      @ ~/.julia/packages/ArrayLayouts/x9nhz/src/muladd.jl:80 [inlined]
   [13] copyto!
      @ ~/.julia/packages/ArrayLayouts/x9nhz/src/muladd.jl:94 [inlined]
   [14] copy
      @ ~/.julia/packages/ArrayLayouts/x9nhz/src/muladd.jl:82 [inlined]
   [15] materialize(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.ZerosLayout,Float64,BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}},BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}},Zeros{Float64,2,Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}}})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/x9nhz/src/muladd.jl:81
   [16] _mul
      @ ~/.julia/packages/ArrayLayouts/x9nhz/src/muladd.jl:447 [inlined]
   [17] mul
      @ ~/.julia/packages/ArrayLayouts/x9nhz/src/muladd.jl:448 [inlined]
   [18] *(A::BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}}, B::BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},BlockArrays.BlockedUnitRange{Vector{Int64}}})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/x9nhz/src/muladd.jl:460
   [19] BandedBlockBandedMatrix(V::ApproxFunBase.SubOperator{Float64,TimesOperator{Float64,Tuple{InfiniteArrays.Infinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/general/algebra.jl:498
   [20] (AbstractMatrix{T} where T)(V::ApproxFunBase.SubOperator{Float64,TimesOperator{Float64,Tuple{InfiniteArrays.Infinity,InfiniteArrays.Infinity}},Tuple{BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}},BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781
   [21] defaultgetindex(B::TimesOperator{Float64,Tuple{InfiniteArrays.Infinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:234
   [22] getindex(B::TimesOperator{Float64,Tuple{InfiniteArrays.Infinity,InfiniteArrays.Infinity}}, k::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}}, j::BlockArrays.BlockRange{1,Tuple{UnitRange{Int64}}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:208
   [23] ApproxFunBase.RaggedMatrix(V::ApproxFunBase.SubOperator{Float64,TimesOperator{Float64,Tuple{InfiniteArrays.Infinity,InfiniteArrays.Infinity}},Tuple{UnitRange{Int64},UnitRange{Int64}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/general/algebra.jl:392
   [24] AbstractArray
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:781 [inlined]
   [25] axpy!(a::Float64, X::ApproxFunBase.SubOperator{Float64,TimesOperator{Float64,Tuple{InfiniteArrays.Infinity,InfiniteArrays.Infinity}},Tuple{UnitRange{Int64},UnitRange{Int64}},Tuple{Int64,Int64},Tuple{Int64,Int64}}, Y::ApproxFunBase.RaggedMatrix{Float64})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:675
   [26] axpy!(α::Float64, P::ApproxFunBase.SubOperator{Float64,PlusOperator{Float64,Tuple{InfiniteArrays.Infinity,InfiniteArrays.Infinity}},Tuple{UnitRange{Int64},UnitRange{Int64}},Tuple{Int64,Int64},Tuple{Int64,Int64}}, A::ApproxFunBase.RaggedMatrix{Float64})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/general/algebra.jl:123
   [27] convert_axpy!
      @ ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/Operator.jl:696 [inlined]
   [28] ApproxFunBase.RaggedMatrix(P::ApproxFunBase.SubOperator{Float64,PlusOperator{Float64,Tuple{InfiniteArrays.Infinity,InfiniteArrays.Infinity}},Tuple{UnitRange{Int64},UnitRange{Int64}},Tuple{Int64,Int64},Tuple{Int64,Int64}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/Operators/general/algebra.jl:116
   [29] testraggedbelowoperator(A::PlusOperator{Float64,Tuple{InfiniteArrays.Infinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:179
   [30] testblockbandedoperator(A::PlusOperator{Float64,Tuple{InfiniteArrays.Infinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:216
   [31] testbandedblockbandedoperator(A::PlusOperator{Float64,Tuple{InfiniteArrays.Infinity,InfiniteArrays.Infinity}})
      @ ApproxFunBase ~/.julia/packages/ApproxFunBase/Jv4NR/src/testing.jl:231
   [32] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/MultivariateTest.jl:292
   [33] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [34] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/MultivariateTest.jl:280
   [35] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [36] top-level scope
      @ ~/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/MultivariateTest.jl:8
   [37] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [38] top-level scope
      @ ./timing.jl:174
   [39] include(fname::String)
      @ Base.MainInclude ./client.jl:443
   [40] top-level scope
      @ none:6
   [41] eval(m::Module, e::Any)
      @ Core ./boot.jl:340
   [42] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [43] _start()
      @ Base ./client.jl:484
  
Test Summary:                  | Pass  Error  Total
Multivariate                   | 2536      2   2538
  Square                       |  119           119
  LowRankFun                   |    3             3
  Vec segment                  |    9             9
  Multivariate calculus        |    3             3
  KroneckerOperator            |    2             2
  Partial derivative operators |  813      1    814
  x,y constructors             |   12            12
  conversion between           |   10            10
  Cheby * Interval             |    5             5
  DefiniteIntegral             |    1             1
  Piecewise Tensor             |    7             7
  Bug in chop of ProductFun    |    2             2
  off domain evaluate          |    2             2
  Dirichlet                    | 1514          1514
  2d derivative (issue #346)   |   26      1     27
  ProductFun                   |    4             4
  Functional*Fun               |    2             2
  matrix                       |    2             2
ERROR: LoadError: LoadError: Some tests did not pass: 2536 passed, 0 failed, 2 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/MultivariateTest.jl:7
in expression starting at /home/pkgeval/.julia/packages/ApproxFunOrthogonalPolynomials/5OUpO/test/runtests.jl:19
 ** On entry to DTBSV  parameter number  5 had an illegal value
 ** On entry to DTBSV  parameter number  5 had an illegal value
ERROR: Package ApproxFunOrthogonalPolynomials errored during testing
Stacktrace:
  [1] pkgerror(::String, ::Vararg{String,N} where N)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1567
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:328
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:315
  [5] #test#62
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:16
