Julia Version 1.6.0-DEV.449
Commit 110765a87a (2020-07-13 17:31 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed XML2_jll ───────────────────── v2.9.10+1
  Installed Libiconv_jll ───────────────── v1.16.0+5
  Installed CodecZlib ──────────────────── v0.6.0
  Installed GenericSVD ─────────────────── v0.3.0
  Installed DataStructures ─────────────── v0.17.19
  Installed Intervals ──────────────────── v1.4.0
  Installed CombinedParsers ────────────── v0.1.0
  Installed DoubleFloats ───────────────── v1.1.13
  Installed Tries ──────────────────────── v0.1.3
  Installed Mocking ────────────────────── v0.7.1
  Installed WeakRefStrings ─────────────── v0.6.2
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed Requires ───────────────────── v1.0.1
  Installed AbstractTrees ──────────────── v0.3.3
  Installed TextParse ──────────────────── v1.0.0
  Installed TimeZones ──────────────────── v1.2.0
  Installed TranscodingStreams ─────────── v0.9.5
  Installed Polynomials ────────────────── v1.1.3
  Installed Nullables ──────────────────── v1.0.0
  Installed EzXML ──────────────────────── v1.1.0
  Installed Zlib_jll ───────────────────── v1.2.11+14
  Installed ExprTools ──────────────────── v0.1.1
  Installed GenericSchur ───────────────── v0.4.0
  Installed RecipesBase ────────────────── v1.0.1
  Installed SpecialFunctions ───────────── v0.10.3
  Installed BinaryProvider ─────────────── v0.5.10
  Installed DataAPI ────────────────────── v1.3.0
  Installed InternedStrings ────────────── v0.7.0
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed Quadmath ───────────────────── v0.5.4
  Installed AutoHashEquals ─────────────── v0.2.0
  Installed OrderedCollections ─────────── v1.3.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [5ae71ed2] + CombinedParsers v0.1.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [1520ce14] + AbstractTrees v0.3.3
  [15f4f7f2] + AutoHashEquals v0.2.0
  [b99e7846] + BinaryProvider v0.5.10
  [944b1d66] + CodecZlib v0.6.0
  [5ae71ed2] + CombinedParsers v0.1.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.17.19
  [497a8b3b] + DoubleFloats v1.1.13
  [e2ba6199] + ExprTools v0.1.1
  [8f5d6c58] + EzXML v1.1.0
  [01680d73] + GenericSVD v0.3.0
  [c145ed77] + GenericSchur v0.4.0
  [7d512f48] + InternedStrings v0.7.0
  [d8418881] + Intervals v1.4.0
  [94ce4f54] + Libiconv_jll v1.16.0+5
  [78c3b35d] + Mocking v0.7.1
  [4d1e1d77] + Nullables v1.0.0
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.3.0
  [f27b6e38] + Polynomials v1.1.3
  [be4d8f0f] + Quadmath v0.5.4
  [3cdcf5f2] + RecipesBase v1.0.1
  [ae029012] + Requires v1.0.1
  [276daf66] + SpecialFunctions v0.10.3
  [e0df1984] + TextParse v1.0.0
  [f269a46b] + TimeZones v1.2.0
  [3bb67fe8] + TranscodingStreams v0.9.5
  [666c268a] + Tries v0.1.3
  [ea10d353] + WeakRefStrings v0.6.2
  [02c8fc9c] + XML2_jll v2.9.10+1
  [83775a58] + Zlib_jll v1.2.11+14
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building CodecZlib → `~/.julia/packages/CodecZlib/5t9zO/deps/build.log`
   Building TimeZones → `~/.julia/packages/TimeZones/OjMoF/deps/build.log`
    Testing CombinedParsers
Status `/tmp/jl_Vrre6A/Project.toml`
  [1520ce14] AbstractTrees v0.3.3
  [15f4f7f2] AutoHashEquals v0.2.0
  [5ae71ed2] CombinedParsers v0.1.0
  [7d512f48] InternedStrings v0.7.0
  [4d1e1d77] Nullables v1.0.0
  [e0df1984] TextParse v1.0.0
  [666c268a] Tries v0.1.3
  [8dfed614] Test
Status `/tmp/jl_Vrre6A/Manifest.toml`
  [1520ce14] AbstractTrees v0.3.3
  [15f4f7f2] AutoHashEquals v0.2.0
  [b99e7846] BinaryProvider v0.5.10
  [944b1d66] CodecZlib v0.6.0
  [5ae71ed2] CombinedParsers v0.1.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.17.19
  [497a8b3b] DoubleFloats v1.1.13
  [e2ba6199] ExprTools v0.1.1
  [8f5d6c58] EzXML v1.1.0
  [01680d73] GenericSVD v0.3.0
  [c145ed77] GenericSchur v0.4.0
  [7d512f48] InternedStrings v0.7.0
  [d8418881] Intervals v1.4.0
  [94ce4f54] Libiconv_jll v1.16.0+5
  [78c3b35d] Mocking v0.7.1
  [4d1e1d77] Nullables v1.0.0
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.3.0
  [f27b6e38] Polynomials v1.1.3
  [be4d8f0f] Quadmath v0.5.4
  [3cdcf5f2] RecipesBase v1.0.1
  [ae029012] Requires v1.0.1
  [276daf66] SpecialFunctions v0.10.3
  [e0df1984] TextParse v1.0.0
  [f269a46b] TimeZones v1.2.0
  [3bb67fe8] TranscodingStreams v0.9.5
  [666c268a] Tries v0.1.3
  [ea10d353] WeakRefStrings v0.6.2
  [02c8fc9c] XML2_jll v2.9.10+1
  [83775a58] Zlib_jll v1.2.11+14
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
ERROR: LoadError: LoadError: LoadError: Any <: CombinedParsers.CombinedParser. Fix with `push!(x|CombinedParsers.NamedParser{CombinedParsers.Transformation{CombinedParsers.Regexp.var"#122#123",CombinedParsers.Sequence{Tuple{String,CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},SubString},CombinedParsers.Transformation{CombinedParsers.Regexp.var"#116#118",CombinedParsers.Sequence{Tuple{CombinedParsers.Transformation{CombinedParsers.Regexp.var"#108#109",CombinedParsers.Sequence{Tuple{CombinedParsers.NamedParser{CombinedParsers.Transformation{CombinedParsers.Regexp.var"#106#107",CombinedParsers.Repeat{CombinedParsers.Transformation{CombinedParsers.var"#68#69"{2},CombinedParsers.Sequence{Tuple{CombinedParsers.Transformation{CombinedParsers.Regexp.var"#46#50",CombinedParsers.Repeat{CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}},Vector{Tuple{Int64,Any}},Vector{CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}}},Vector{Tuple{Int64,Any}},Vector{_A} where _A},CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},CombinedParsers.CombinedParser},CombinedParsers.Transformation{CombinedParsers.Regexp.var"#46#50",CombinedParsers.Repeat{CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}},Vector{Tuple{Int64,Any}},Vector{CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}}},Vector{Tuple{Int64,Any}},Vector{_A} where _A}},Vector{Any},Tuple{Vector{_A} where _A,CombinedParsers.CombinedParser,Vector{_A} where _A}},Vector{Any},CombinedParsers.CombinedParser},Vector{Vector{Any}},Vector{CombinedParsers.CombinedParser}},Vector{Vector{Any}},CombinedParsers.CombinedParser},Vector{Vector{Any}},CombinedParsers.CombinedParser},CombinedParsers.Repeat{CombinedParsers.Transformation{CombinedParsers.var"#68#69"{2},CombinedParsers.Sequence{Tuple{Char,CombinedParsers.NamedParser{CombinedParsers.Transformation{CombinedParsers.Regexp.var"#106#107",CombinedParsers.Repeat{CombinedParsers.Transformation{CombinedParsers.var"#68#69"{2},CombinedParsers.Sequence{Tuple{CombinedParsers.Transformation{CombinedParsers.Regexp.var"#46#50",CombinedParsers.Repeat{CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}},Vector{Tuple{Int64,Any}},Vector{CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}}},Vector{Tuple{Int64,Any}},Vector{_A} where _A},CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},CombinedParsers.CombinedParser},CombinedParsers.Transformation{CombinedParsers.Regexp.var"#46#50",CombinedParsers.Repeat{CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}},Vector{Tuple{Int64,Any}},Vector{CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}}},Vector{Tuple{Int64,Any}},Vector{_A} where _A}},Vector{Any},Tuple{Vector{_A} where _A,CombinedParsers.CombinedParser,Vector{_A} where _A}},Vector{Any},CombinedParsers.CombinedParser},Vector{Vector{Any}},Vector{CombinedParsers.CombinedParser}},Vector{Vector{Any}},CombinedParsers.CombinedParser},Vector{Vector{Any}},CombinedParsers.CombinedParser}},Vector{Any},Tuple{Char,CombinedParsers.CombinedParser}},Vector{Any},CombinedParsers.CombinedParser},Vector{Vector{Any}},Vector{CombinedParsers.CombinedParser}}},Vector{Any},Tuple{CombinedParsers.CombinedParser,Vector{CombinedParsers.CombinedParser}}},Vector{Any},Any},CombinedParsers.Repeat{CombinedParsers.FlatMap{CombinedParsers.Sequence{Tuple{CombinedParsers.NamedParser{CombinedParsers.Transformation{CombinedParsers.var"#68#69"{2},CombinedParsers.Sequence{Tuple{String,CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},Tuple{UInt32,UInt32}}},Vector{Any},Tuple{String,Tuple{UInt32,UInt32}}},Vector{Any},Tuple{UInt32,UInt32}},Vector{Any},Tuple{UInt32,UInt32}},CombinedParsers.Optional{CombinedParsers.CharIn{Char},Union{CombinedParsers.MatchState, CombinedParsers.None},Union{Missing, Char}}},Vector{Any},Tuple{Tuple{UInt32,UInt32},Union{Missing, Char}}},Tuple{var"#s56",var"#s55",var"#s54"} where var"#s54" where var"#s55" where var"#s56",CombinedParsers.Regexp.var"#114#115",Vector{CombinedParsers.CombinedParser}},Vector{Tuple{var"#s56",var"#s55",var"#s54"} where var"#s54" where var"#s55" where var"#s56"},Vector{Vector{CombinedParsers.CombinedParser}}}},Vector{Any},Tuple{Any,Vector{Vector{CombinedParsers.CombinedParser}}}},Vector{Any},CombinedParsers.CombinedParser},String},Vector{Any},Tuple{String,SubString,CombinedParsers.CombinedParser,String}},Vector{Any},Any},Vector{Any},Any},y)`.
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:33
  [2] push!(x::CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},CombinedParsers.CombinedParser}, y::CombinedParsers.NamedParser{CombinedParsers.Transformation{CombinedParsers.Regexp.var"#122#123",CombinedParsers.Sequence{Tuple{String,CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},SubString},CombinedParsers.Transformation{CombinedParsers.Regexp.var"#116#118",CombinedParsers.Sequence{Tuple{CombinedParsers.Transformation{CombinedParsers.Regexp.var"#108#109",CombinedParsers.Sequence{Tuple{CombinedParsers.NamedParser{CombinedParsers.Transformation{CombinedParsers.Regexp.var"#106#107",CombinedParsers.Repeat{CombinedParsers.Transformation{CombinedParsers.var"#68#69"{2},CombinedParsers.Sequence{Tuple{CombinedParsers.Transformation{CombinedParsers.Regexp.var"#46#50",CombinedParsers.Repeat{CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}},Vector{Tuple{Int64,Any}},Vector{CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}}},Vector{Tuple{Int64,Any}},Vector{_A} where _A},CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},CombinedParsers.CombinedParser},CombinedParsers.Transformation{CombinedParsers.Regexp.var"#46#50",CombinedParsers.Repeat{CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}},Vector{Tuple{Int64,Any}},Vector{CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}}},Vector{Tuple{Int64,Any}},Vector{_A} where _A}},Vector{Any},Tuple{Vector{_A} where _A,CombinedParsers.CombinedParser,Vector{_A} where _A}},Vector{Any},CombinedParsers.CombinedParser},Vector{Vector{Any}},Vector{CombinedParsers.CombinedParser}},Vector{Vector{Any}},CombinedParsers.CombinedParser},Vector{Vector{Any}},CombinedParsers.CombinedParser},CombinedParsers.Repeat{CombinedParsers.Transformation{CombinedParsers.var"#68#69"{2},CombinedParsers.Sequence{Tuple{Char,CombinedParsers.NamedParser{CombinedParsers.Transformation{CombinedParsers.Regexp.var"#106#107",CombinedParsers.Repeat{CombinedParsers.Transformation{CombinedParsers.var"#68#69"{2},CombinedParsers.Sequence{Tuple{CombinedParsers.Transformation{CombinedParsers.Regexp.var"#46#50",CombinedParsers.Repeat{CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}},Vector{Tuple{Int64,Any}},Vector{CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}}},Vector{Tuple{Int64,Any}},Vector{_A} where _A},CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},CombinedParsers.CombinedParser},CombinedParsers.Transformation{CombinedParsers.Regexp.var"#46#50",CombinedParsers.Repeat{CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}},Vector{Tuple{Int64,Any}},Vector{CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}}},Vector{Tuple{Int64,Any}},Vector{_A} where _A}},Vector{Any},Tuple{Vector{_A} where _A,CombinedParsers.CombinedParser,Vector{_A} where _A}},Vector{Any},CombinedParsers.CombinedParser},Vector{Vector{Any}},Vector{CombinedParsers.CombinedParser}},Vector{Vector{Any}},CombinedParsers.CombinedParser},Vector{Vector{Any}},CombinedParsers.CombinedParser}},Vector{Any},Tuple{Char,CombinedParsers.CombinedParser}},Vector{Any},CombinedParsers.CombinedParser},Vector{Vector{Any}},Vector{CombinedParsers.CombinedParser}}},Vector{Any},Tuple{CombinedParsers.CombinedParser,Vector{CombinedParsers.CombinedParser}}},Vector{Any},Any},CombinedParsers.Repeat{CombinedParsers.FlatMap{CombinedParsers.Sequence{Tuple{CombinedParsers.NamedParser{CombinedParsers.Transformation{CombinedParsers.var"#68#69"{2},CombinedParsers.Sequence{Tuple{String,CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},Tuple{UInt32,UInt32}}},Vector{Any},Tuple{String,Tuple{UInt32,UInt32}}},Vector{Any},Tuple{UInt32,UInt32}},Vector{Any},Tuple{UInt32,UInt32}},CombinedParsers.Optional{CombinedParsers.CharIn{Char},Union{CombinedParsers.MatchState, CombinedParsers.None},Union{Missing, Char}}},Vector{Any},Tuple{Tuple{UInt32,UInt32},Union{Missing, Char}}},Tuple{var"#s56",var"#s55",var"#s54"} where var"#s54" where var"#s55" where var"#s56",CombinedParsers.Regexp.var"#114#115",Vector{CombinedParsers.CombinedParser}},Vector{Tuple{var"#s56",var"#s55",var"#s54"} where var"#s54" where var"#s55" where var"#s56"},Vector{Vector{CombinedParsers.CombinedParser}}}},Vector{Any},Tuple{Any,Vector{Vector{CombinedParsers.CombinedParser}}}},Vector{Any},CombinedParsers.CombinedParser},String},Vector{Any},Tuple{String,SubString,CombinedParsers.CombinedParser,String}},Vector{Any},Any},Vector{Any},Any})
    @ CombinedParsers ~/.julia/packages/CombinedParsers/1ECpL/src/CombinedParsers.jl:2504
  [3] push!(x::CombinedParsers.NamedParser{CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},CombinedParsers.CombinedParser},Tuple{Int64,Any},CombinedParsers.CombinedParser}, y::CombinedParsers.NamedParser{CombinedParsers.Transformation{CombinedParsers.Regexp.var"#122#123",CombinedParsers.Sequence{Tuple{String,CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},SubString},CombinedParsers.Transformation{CombinedParsers.Regexp.var"#116#118",CombinedParsers.Sequence{Tuple{CombinedParsers.Transformation{CombinedParsers.Regexp.var"#108#109",CombinedParsers.Sequence{Tuple{CombinedParsers.NamedParser{CombinedParsers.Transformation{CombinedParsers.Regexp.var"#106#107",CombinedParsers.Repeat{CombinedParsers.Transformation{CombinedParsers.var"#68#69"{2},CombinedParsers.Sequence{Tuple{CombinedParsers.Transformation{CombinedParsers.Regexp.var"#46#50",CombinedParsers.Repeat{CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}},Vector{Tuple{Int64,Any}},Vector{CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}}},Vector{Tuple{Int64,Any}},Vector{_A} where _A},CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},CombinedParsers.CombinedParser},CombinedParsers.Transformation{CombinedParsers.Regexp.var"#46#50",CombinedParsers.Repeat{CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}},Vector{Tuple{Int64,Any}},Vector{CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}}},Vector{Tuple{Int64,Any}},Vector{_A} where _A}},Vector{Any},Tuple{Vector{_A} where _A,CombinedParsers.CombinedParser,Vector{_A} where _A}},Vector{Any},CombinedParsers.CombinedParser},Vector{Vector{Any}},Vector{CombinedParsers.CombinedParser}},Vector{Vector{Any}},CombinedParsers.CombinedParser},Vector{Vector{Any}},CombinedParsers.CombinedParser},CombinedParsers.Repeat{CombinedParsers.Transformation{CombinedParsers.var"#68#69"{2},CombinedParsers.Sequence{Tuple{Char,CombinedParsers.NamedParser{CombinedParsers.Transformation{CombinedParsers.Regexp.var"#106#107",CombinedParsers.Repeat{CombinedParsers.Transformation{CombinedParsers.var"#68#69"{2},CombinedParsers.Sequence{Tuple{CombinedParsers.Transformation{CombinedParsers.Regexp.var"#46#50",CombinedParsers.Repeat{CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}},Vector{Tuple{Int64,Any}},Vector{CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}}},Vector{Tuple{Int64,Any}},Vector{_A} where _A},CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},CombinedParsers.CombinedParser},CombinedParsers.Transformation{CombinedParsers.Regexp.var"#46#50",CombinedParsers.Repeat{CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}},Vector{Tuple{Int64,Any}},Vector{CombinedParsers.CombinedParser{CombinedParsers.MatchState,CombinedParsers.Always}}},Vector{Tuple{Int64,Any}},Vector{_A} where _A}},Vector{Any},Tuple{Vector{_A} where _A,CombinedParsers.CombinedParser,Vector{_A} where _A}},Vector{Any},CombinedParsers.CombinedParser},Vector{Vector{Any}},Vector{CombinedParsers.CombinedParser}},Vector{Vector{Any}},CombinedParsers.CombinedParser},Vector{Vector{Any}},CombinedParsers.CombinedParser}},Vector{Any},Tuple{Char,CombinedParsers.CombinedParser}},Vector{Any},CombinedParsers.CombinedParser},Vector{Vector{Any}},Vector{CombinedParsers.CombinedParser}}},Vector{Any},Tuple{CombinedParsers.CombinedParser,Vector{CombinedParsers.CombinedParser}}},Vector{Any},Any},CombinedParsers.Repeat{CombinedParsers.FlatMap{CombinedParsers.Sequence{Tuple{CombinedParsers.NamedParser{CombinedParsers.Transformation{CombinedParsers.var"#68#69"{2},CombinedParsers.Sequence{Tuple{String,CombinedParsers.Either{Vector{Any},Tuple{Int64,Any},Tuple{UInt32,UInt32}}},Vector{Any},Tuple{String,Tuple{UInt32,UInt32}}},Vector{Any},Tuple{UInt32,UInt32}},Vector{Any},Tuple{UInt32,UInt32}},CombinedParsers.Optional{CombinedParsers.CharIn{Char},Union{CombinedParsers.MatchState, CombinedParsers.None},Union{Missing, Char}}},Vector{Any},Tuple{Tuple{UInt32,UInt32},Union{Missing, Char}}},Tuple{var"#s56",var"#s55",var"#s54"} where var"#s54" where var"#s55" where var"#s56",CombinedParsers.Regexp.var"#114#115",Vector{CombinedParsers.CombinedParser}},Vector{Tuple{var"#s56",var"#s55",var"#s54"} where var"#s54" where var"#s55" where var"#s56"},Vector{Vector{CombinedParsers.CombinedParser}}}},Vector{Any},Tuple{Any,Vector{Vector{CombinedParsers.CombinedParser}}}},Vector{Any},CombinedParsers.CombinedParser},String},Vector{Any},Tuple{String,SubString,CombinedParsers.CombinedParser,String}},Vector{Any},Any},Vector{Any},Any})
    @ CombinedParsers ~/.julia/packages/CombinedParsers/1ECpL/src/CombinedParsers.jl:2527
  [4] top-level scope
    @ ~/.julia/packages/CombinedParsers/1ECpL/src/re-parser.jl:531
  [5] include
    @ ./Base.jl:375 [inlined]
  [6] include(x::String)
    @ CombinedParsers.Regexp ~/.julia/packages/CombinedParsers/1ECpL/src/re.jl:4
  [7] top-level scope
    @ ~/.julia/packages/CombinedParsers/1ECpL/src/re.jl:553
  [8] include
    @ ./Base.jl:375 [inlined]
  [9] include(x::String)
    @ CombinedParsers ~/.julia/packages/CombinedParsers/1ECpL/src/CombinedParsers.jl:13
 [10] top-level scope
    @ ~/.julia/packages/CombinedParsers/1ECpL/src/CombinedParsers.jl:2746
 [11] include
    @ ./Base.jl:375 [inlined]
 [12] include_package_for_output(input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId,UInt64}}, uuid_tuple::Tuple{UInt64,UInt64}, source::String)
    @ Base ./loading.jl:1219
 [13] top-level scope
    @ none:1
 [14] eval
    @ ./boot.jl:340 [inlined]
 [15] eval(x::Expr)
    @ Base.MainInclude ./client.jl:446
 [16] top-level scope
    @ none:1
in expression starting at /home/pkgeval/.julia/packages/CombinedParsers/1ECpL/src/re-parser.jl:531
in expression starting at /home/pkgeval/.julia/packages/CombinedParsers/1ECpL/src/re.jl:1
in expression starting at /home/pkgeval/.julia/packages/CombinedParsers/1ECpL/src/CombinedParsers.jl:6
ERROR: LoadError: Failed to precompile CombinedParsers [5ae71ed2-6f8a-4ed1-b94f-e14e8158f19e] to /home/pkgeval/.julia/compiled/v1.6/CombinedParsers/VKXl5_eHPLd.ji.
Stacktrace:
 [1] error(s::String)
   @ Base ./error.jl:33
 [2] compilecache(pkg::Base.PkgId, path::String)
   @ Base ./loading.jl:1350
 [3] _require(pkg::Base.PkgId)
   @ Base ./loading.jl:1030
 [4] require(uuidkey::Base.PkgId)
   @ Base ./loading.jl:928
 [5] require(into::Module, mod::Symbol)
   @ Base ./loading.jl:923
 [6] include(fname::String)
   @ Base.MainInclude ./client.jl:444
 [7] top-level scope
   @ none:6
in expression starting at /home/pkgeval/.julia/packages/CombinedParsers/1ECpL/test/runtests.jl:1
ERROR: Package CombinedParsers errored during testing
Stacktrace:
  [1] pkgerror(::String, ::Vararg{String,N} where N)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1561
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:327
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:314
  [5] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#60
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:16
