Julia Version 1.6.0-DEV.387
Commit e23635c619 (2020-07-07 16:42 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Zlib_jll ───────────────────── v1.2.11+14
  Installed XML2_jll ───────────────────── v2.9.10+1
  Installed IterTools ──────────────────── v1.3.0
  Installed RecipesBase ────────────────── v1.0.1
  Installed ExprTools ──────────────────── v0.1.1
  Installed FFTW ───────────────────────── v1.2.2
  Installed InfiniteLinearAlgebra ──────── v0.3.5
  Installed BandedMatrices ─────────────── v0.15.15
  Installed Compat ─────────────────────── v3.13.0
  Installed MKL_jll ────────────────────── v2020.1.216+0
  Installed Libiconv_jll ───────────────── v1.16.0+5
  Installed AbstractFFTs ───────────────── v0.5.0
  Installed EzXML ──────────────────────── v1.1.0
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed IntelOpenMP_jll ────────────── v2018.0.3+0
  Installed SpecialFunctions ───────────── v0.10.3
  Installed BlockArrays ────────────────── v0.12.10
  Installed Reexport ───────────────────── v0.2.0
  Installed Polynomials ────────────────── v1.1.3
  Installed StaticArrays ───────────────── v0.12.3
  Installed SemiseparableMatrices ──────── v0.1.0
  Installed BlockBandedMatrices ────────── v0.8.9
  Installed Intervals ──────────────────── v1.3.4
  Installed FFTW_jll ───────────────────── v3.3.9+5
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed MatrixFactorizations ───────── v0.4.1
  Installed ArrayLayouts ───────────────── v0.3.5
  Installed FillArrays ─────────────────── v0.8.12
  Installed MacroTools ─────────────────── v0.5.5
  Installed DSP ────────────────────────── v0.6.7
  Installed TimeZones ──────────────────── v1.2.0
  Installed Mocking ────────────────────── v0.7.1
  Installed LazyBandedMatrices ─────────── v0.2.11
  Installed InfiniteArrays ─────────────── v0.7.3
  Installed LazyArrays ─────────────────── v0.16.13
Updating `~/.julia/environments/v1.6/Project.toml`
  [cde9dba0] + InfiniteLinearAlgebra v0.3.5
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [4c555306] + ArrayLayouts v0.3.5
  [aae01518] + BandedMatrices v0.15.15
  [8e7c35d0] + BlockArrays v0.12.10
  [ffab5731] + BlockBandedMatrices v0.8.9
  [34da2185] + Compat v3.13.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [717857b8] + DSP v0.6.7
  [e2ba6199] + ExprTools v0.1.1
  [8f5d6c58] + EzXML v1.1.0
  [7a1cc6ca] + FFTW v1.2.2
  [f5851436] + FFTW_jll v3.3.9+5
  [1a297f60] + FillArrays v0.8.12
  [4858937d] + InfiniteArrays v0.7.3
  [cde9dba0] + InfiniteLinearAlgebra v0.3.5
  [1d5cc7b8] + IntelOpenMP_jll v2018.0.3+0
  [d8418881] + Intervals v1.3.4
  [c8e1da08] + IterTools v1.3.0
  [5078a376] + LazyArrays v0.16.13
  [d7e5e226] + LazyBandedMatrices v0.2.11
  [94ce4f54] + Libiconv_jll v1.16.0+5
  [856f044c] + MKL_jll v2020.1.216+0
  [1914dd2f] + MacroTools v0.5.5
  [a3b82374] + MatrixFactorizations v0.4.1
  [78c3b35d] + Mocking v0.7.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [f27b6e38] + Polynomials v1.1.3
  [3cdcf5f2] + RecipesBase v1.0.1
  [189a3867] + Reexport v0.2.0
  [f8ebbe35] + SemiseparableMatrices v0.1.0
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.3
  [f269a46b] + TimeZones v1.2.0
  [02c8fc9c] + XML2_jll v2.9.10+1
  [83775a58] + Zlib_jll v1.2.11+14
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building FFTW ─────→ `~/.julia/packages/FFTW/kcXL6/deps/build.log`
   Building TimeZones → `~/.julia/packages/TimeZones/OjMoF/deps/build.log`
    Testing InfiniteLinearAlgebra
Status `/tmp/jl_nJ39qA/Project.toml`
  [4c555306] ArrayLayouts v0.3.5
  [aae01518] BandedMatrices v0.15.15
  [8e7c35d0] BlockArrays v0.12.10
  [ffab5731] BlockBandedMatrices v0.8.9
  [1a297f60] FillArrays v0.8.12
  [4858937d] InfiniteArrays v0.7.3
  [cde9dba0] InfiniteLinearAlgebra v0.3.5
  [5078a376] LazyArrays v0.16.13
  [d7e5e226] LazyBandedMatrices v0.2.11
  [a3b82374] MatrixFactorizations v0.4.1
  [f8ebbe35] SemiseparableMatrices v0.1.0
  [276daf66] SpecialFunctions v0.10.3
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [8dfed614] Test
Status `/tmp/jl_nJ39qA/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [4c555306] ArrayLayouts v0.3.5
  [aae01518] BandedMatrices v0.15.15
  [8e7c35d0] BlockArrays v0.12.10
  [ffab5731] BlockBandedMatrices v0.8.9
  [34da2185] Compat v3.13.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [717857b8] DSP v0.6.7
  [e2ba6199] ExprTools v0.1.1
  [8f5d6c58] EzXML v1.1.0
  [7a1cc6ca] FFTW v1.2.2
  [f5851436] FFTW_jll v3.3.9+5
  [1a297f60] FillArrays v0.8.12
  [4858937d] InfiniteArrays v0.7.3
  [cde9dba0] InfiniteLinearAlgebra v0.3.5
  [1d5cc7b8] IntelOpenMP_jll v2018.0.3+0
  [d8418881] Intervals v1.3.4
  [c8e1da08] IterTools v1.3.0
  [5078a376] LazyArrays v0.16.13
  [d7e5e226] LazyBandedMatrices v0.2.11
  [94ce4f54] Libiconv_jll v1.16.0+5
  [856f044c] MKL_jll v2020.1.216+0
  [1914dd2f] MacroTools v0.5.5
  [a3b82374] MatrixFactorizations v0.4.1
  [78c3b35d] Mocking v0.7.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [f27b6e38] Polynomials v1.1.3
  [3cdcf5f2] RecipesBase v1.0.1
  [189a3867] Reexport v0.2.0
  [f8ebbe35] SemiseparableMatrices v0.1.0
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.3
  [f269a46b] TimeZones v1.2.0
  [02c8fc9c] XML2_jll v2.9.10+1
  [83775a58] Zlib_jll v1.2.11+14
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
∞-banded      |    6      6
Test Summary:  | Pass  Total
∞-block arrays |    5      5
Test Summary:                | Pass  Total
∞-Toeplitz and Pert-Toeplitz |   16     16
Test Summary: | Pass  Broken  Total
Algebra       |   74       3     77
Test Summary: | Pass  Total
HessenbergQ   |   28     28
Test Summary: | Pass  Total
Inf QL        |   81     81
  0.420857 seconds (141.00 k allocations: 7.811 MiB, 36.18% gc time)
  0.012169 seconds (4.01 k allocations: 2.431 MiB)
  0.438440 seconds (610.83 k allocations: 34.909 MiB)
block-banded: Error During Test at /home/pkgeval/.julia/packages/InfiniteLinearAlgebra/ifzpO/test/test_infqr.jl:220
  Test threw exception
  Expression: ((F.Q)' * [1; zeros(∞)])[1:6] ≈ [-0.9701425001453321, 0, -0.23386170701251197, 0, 0, -0.06193705069863463]
  MethodError: no method matching elsize(::Type{PseudoBlockVector{Float64,SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Vector{Int64}}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
    [1] elsize(A::PseudoBlockVector{Float64,SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Vector{Int64}}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::PseudoBlockVector{Float64,SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Vector{Int64}}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,PseudoBlockVector{Float64,SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}}},false})
      @ Base ./subarray.jl:402
    [4] ormqr!(side::Char, trans::Char, A::SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, tau::SubArray{Float64,1,PseudoBlockVector{Float64,SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, C::SubArray{Float64,1,PseudoBlockVector{Float64,SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}}},false})
      @ LinearAlgebra.LAPACK /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/lapack.jl:2760
    [5] _apply_qr!(#unused#::ColumnMajor, #unused#::DenseColumnMajor, #unused#::DenseColumnMajor, A::SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, τ::SubArray{Float64,1,PseudoBlockVector{Float64,SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, B::SubArray{Float64,1,PseudoBlockVector{Float64,SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}}},false})
      @ BlockBandedMatrices ~/.julia/packages/BlockBandedMatrices/Ma22F/src/blockskylineqr.jl:4
    [6] apply_qr!(A::SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, τ::SubArray{Float64,1,PseudoBlockVector{Float64,SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, B::SubArray{Float64,1,PseudoBlockVector{Float64,SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}}},false})
      @ BlockBandedMatrices ~/.julia/packages/BlockBandedMatrices/Ma22F/src/blockskylineqr.jl:8
    [7] materialize!(Mul::Lmul{ArrayLayouts.AdjQRPackedQLayout{BlockBandedMatrices.BlockBandedColumns{ColumnMajor},DenseColumnMajor},DenseColumnMajor,Adjoint{Float64,MatrixFactorizations.QRPackedQ{Float64,SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}},BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}}},false},SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true}}},SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true}})
      @ BlockBandedMatrices ~/.julia/packages/BlockBandedMatrices/Ma22F/src/blockskylineqr.jl:90
    [8] lmul!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/lmul.jl:45 [inlined]
    [9] lmul!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/lmul.jl:72 [inlined]
   [10] materialize!(M::Lmul{ArrayLayouts.AdjQRPackedQLayout{AdaptiveLayout{BlockBandedMatrices.BlockBandedColumns{ColumnMajor}},UnknownLayout},LazyArrays.PaddedLayout{DenseColumnMajor},Adjoint{Float64,MatrixFactorizations.QRPackedQ{Float64,InfiniteLinearAlgebra.AdaptiveQRFactors{Float64,BlockBandedMatrix{Float64},KronTrav{Float64,2,BroadcastMatrix{Float64,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Matrix{Float64},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}},InfiniteLinearAlgebra.AdaptiveQRTau{Float64,BlockBandedMatrix{Float64},KronTrav{Float64,2,BroadcastMatrix{Float64,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Matrix{Float64},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}}}},LazyArrays.CachedArray{Float64,1,Vector{Float64},Zeros{Float64,1,Tuple{OneToInf{Int64}}}}})
      @ InfiniteLinearAlgebra ~/.julia/packages/InfiniteLinearAlgebra/ifzpO/src/infqr.jl:267
   [11] lmul!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/lmul.jl:45 [inlined]
   [12] lmul!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/lmul.jl:70 [inlined]
   [13] _lmul_copymutable(A::Adjoint{Float64,MatrixFactorizations.QRPackedQ{Float64,InfiniteLinearAlgebra.AdaptiveQRFactors{Float64,BlockBandedMatrix{Float64},KronTrav{Float64,2,BroadcastMatrix{Float64,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Matrix{Float64},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}},InfiniteLinearAlgebra.AdaptiveQRTau{Float64,BlockBandedMatrix{Float64},KronTrav{Float64,2,BroadcastMatrix{Float64,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Matrix{Float64},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}}}}, x::LazyArrays.CachedArray{Float64,1,Vector{Float64},Zeros{Float64,1,Tuple{OneToInf{Int64}}}})
      @ InfiniteLinearAlgebra ~/.julia/packages/InfiniteLinearAlgebra/ifzpO/src/infqr.jl:277
   [14] *(A::Adjoint{Float64,MatrixFactorizations.QRPackedQ{Float64,InfiniteLinearAlgebra.AdaptiveQRFactors{Float64,BlockBandedMatrix{Float64},KronTrav{Float64,2,BroadcastMatrix{Float64,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Matrix{Float64},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}},InfiniteLinearAlgebra.AdaptiveQRTau{Float64,BlockBandedMatrix{Float64},KronTrav{Float64,2,BroadcastMatrix{Float64,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Matrix{Float64},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}}}}, x::LazyArrays.CachedArray{Float64,1,Vector{Float64},Zeros{Float64,1,Tuple{OneToInf{Int64}}}})
      @ InfiniteLinearAlgebra ~/.julia/packages/InfiniteLinearAlgebra/ifzpO/src/infqr.jl:283
   [15] top-level scope
      @ ~/.julia/packages/InfiniteLinearAlgebra/ifzpO/test/test_infqr.jl:220
   [16] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [17] top-level scope
      @ ~/.julia/packages/InfiniteLinearAlgebra/ifzpO/test/test_infqr.jl:213
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/InfiniteLinearAlgebra/ifzpO/test/test_infqr.jl:11
  
block-banded: Error During Test at /home/pkgeval/.julia/packages/InfiniteLinearAlgebra/ifzpO/test/test_infqr.jl:212
  Got exception outside of a @test
  MethodError: no method matching elsize(::Type{PseudoBlockVector{Float64,SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Vector{Int64}}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
    [1] elsize(A::PseudoBlockVector{Float64,SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Vector{Int64}}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::PseudoBlockVector{Float64,SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Vector{Int64}}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,PseudoBlockVector{Float64,SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}}},false})
      @ Base ./subarray.jl:402
    [4] ormqr!(side::Char, trans::Char, A::SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, tau::SubArray{Float64,1,PseudoBlockVector{Float64,SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, C::SubArray{Float64,1,PseudoBlockVector{Float64,SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}}},false})
      @ LinearAlgebra.LAPACK /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/lapack.jl:2760
    [5] _apply_qr!(#unused#::ColumnMajor, #unused#::DenseColumnMajor, #unused#::DenseColumnMajor, A::SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, τ::SubArray{Float64,1,PseudoBlockVector{Float64,SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, B::SubArray{Float64,1,PseudoBlockVector{Float64,SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}}},false})
      @ BlockBandedMatrices ~/.julia/packages/BlockBandedMatrices/Ma22F/src/blockskylineqr.jl:4
    [6] apply_qr!(A::SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, τ::SubArray{Float64,1,PseudoBlockVector{Float64,SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, B::SubArray{Float64,1,PseudoBlockVector{Float64,SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}}},false})
      @ BlockBandedMatrices ~/.julia/packages/BlockBandedMatrices/Ma22F/src/blockskylineqr.jl:8
    [7] materialize!(Mul::Lmul{ArrayLayouts.AdjQRPackedQLayout{BlockBandedMatrices.BlockBandedColumns{ColumnMajor},DenseColumnMajor},DenseColumnMajor,Adjoint{Float64,MatrixFactorizations.QRPackedQ{Float64,SubArray{Float64,2,BlockBandedMatrix{Float64},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}},BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Vector{Int64}}}},false},SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true}}},SubArray{Float64,1,Vector{Float64},Tuple{UnitRange{Int64}},true}})
      @ BlockBandedMatrices ~/.julia/packages/BlockBandedMatrices/Ma22F/src/blockskylineqr.jl:90
    [8] lmul!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/lmul.jl:45 [inlined]
    [9] lmul!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/lmul.jl:72 [inlined]
   [10] materialize!(M::Lmul{ArrayLayouts.AdjQRPackedQLayout{AdaptiveLayout{BlockBandedMatrices.BlockBandedColumns{ColumnMajor}},UnknownLayout},LazyArrays.PaddedLayout{DenseColumnMajor},Adjoint{Float64,MatrixFactorizations.QRPackedQ{Float64,InfiniteLinearAlgebra.AdaptiveQRFactors{Float64,BlockBandedMatrix{Float64},KronTrav{Float64,2,BroadcastMatrix{Float64,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Matrix{Float64},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}},InfiniteLinearAlgebra.AdaptiveQRTau{Float64,BlockBandedMatrix{Float64},KronTrav{Float64,2,BroadcastMatrix{Float64,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Matrix{Float64},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}}}},LazyArrays.CachedArray{Float64,1,Vector{Float64},Zeros{Float64,1,Tuple{OneToInf{Int64}}}}})
      @ InfiniteLinearAlgebra ~/.julia/packages/InfiniteLinearAlgebra/ifzpO/src/infqr.jl:267
   [11] lmul!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/lmul.jl:45 [inlined]
   [12] lmul!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/lmul.jl:70 [inlined]
   [13] _lmul_copymutable(A::Adjoint{Float64,MatrixFactorizations.QRPackedQ{Float64,InfiniteLinearAlgebra.AdaptiveQRFactors{Float64,BlockBandedMatrix{Float64},KronTrav{Float64,2,BroadcastMatrix{Float64,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Matrix{Float64},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}},InfiniteLinearAlgebra.AdaptiveQRTau{Float64,BlockBandedMatrix{Float64},KronTrav{Float64,2,BroadcastMatrix{Float64,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Matrix{Float64},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}}}}, x::LazyArrays.CachedArray{Float64,1,Vector{Float64},Zeros{Float64,1,Tuple{OneToInf{Int64}}}})
      @ InfiniteLinearAlgebra ~/.julia/packages/InfiniteLinearAlgebra/ifzpO/src/infqr.jl:277
   [14] *
      @ ~/.julia/packages/InfiniteLinearAlgebra/ifzpO/src/infqr.jl:283 [inlined]
   [15] \(F::MatrixFactorizations.QR{Float64,InfiniteLinearAlgebra.AdaptiveQRFactors{Float64,BlockBandedMatrix{Float64},KronTrav{Float64,2,BroadcastMatrix{Float64,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Matrix{Float64},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}},InfiniteLinearAlgebra.AdaptiveQRTau{Float64,BlockBandedMatrix{Float64},KronTrav{Float64,2,BroadcastMatrix{Float64,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Matrix{Float64},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}}}, B::LazyArrays.CachedArray{Float64,1,Vector{Float64},Zeros{Float64,1,Tuple{OneToInf{Int64}}}})
      @ InfiniteLinearAlgebra ~/.julia/packages/InfiniteLinearAlgebra/ifzpO/src/infqr.jl:309
   [16] top-level scope
      @ ~/.julia/packages/InfiniteLinearAlgebra/ifzpO/test/test_infqr.jl:223
   [17] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [18] top-level scope
      @ ~/.julia/packages/InfiniteLinearAlgebra/ifzpO/test/test_infqr.jl:213
   [19] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [20] top-level scope
      @ ~/.julia/packages/InfiniteLinearAlgebra/ifzpO/test/test_infqr.jl:11
   [21] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [22] top-level scope
      @ ~/.julia/packages/InfiniteLinearAlgebra/ifzpO/test/runtests.jl:227
   [23] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [24] top-level scope
      @ none:6
   [25] eval(m::Module, e::Any)
      @ Core ./boot.jl:340
   [26] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:260
   [27] _start()
      @ Base ./client.jl:485
  
Test Summary:       | Pass  Error  Total
Adaptive QR         |   82      2     84
  test partialqr!   |    7             7
  AdaptiveQRFactors |    7             7
  col/rowsupport    |   15            15
  Qmul              |   12            12
  Bessel J          |    3             3
  5-band            |    1             1
  broadcast         |    5             5
  triangular infqr  |    2             2
  almost-banded     |   27            27
  block-banded      |    3      2      5
ERROR: LoadError: LoadError: Some tests did not pass: 82 passed, 0 failed, 2 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/InfiniteLinearAlgebra/ifzpO/test/test_infqr.jl:10
in expression starting at /home/pkgeval/.julia/packages/InfiniteLinearAlgebra/ifzpO/test/runtests.jl:227
ERROR: Package InfiniteLinearAlgebra errored during testing
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1561
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:327
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:314
  [5] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#60
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:16
