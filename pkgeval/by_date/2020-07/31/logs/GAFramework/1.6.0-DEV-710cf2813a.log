Julia Version 1.6.0-DEV.558
Commit 710cf2813a (2020-07-30 17:00 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.0
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_3pTk3n/Project.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_3pTk3n/Manifest.toml`
  [5789e2e9] FileIO v1.4.0
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21712933918370697
curgen: 20 fitness: 0.21722848811248005
curgen: 30 fitness: 0.21723205899727452
curgen: 40 fitness: 0.21723245615985312
curgen: 50 fitness: 0.21723245615985312
CoordinateCreature{Vector{Float64}}([-0.22238554316630543], -0.21723245615985312) -0.22238554316630543 -0.21723245615985312
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2579709140493858
curgen: 100 fitness: 3.25833409091408
curgen: 150 fitness: 3.258376340531032
curgen: 200 fitness: 3.25838766954368
curgen: 250 fitness: 3.2584007176078185
curgen: 300 fitness: 3.258410986848234
curgen: 350 fitness: 3.2584119048844893
curgen: 400 fitness: 3.25844655764197
curgen: 450 fitness: 3.2584489536106584
curgen: 500 fitness: 3.2584489536106584
CoordinateCreature{Vector{Float64}}([-0.22216700603743827, -0.22255788427794876, 0.2222486223762898, 0.2227465757635041, 0.222688682615619, 0.2225378267869874, -0.2223889134703136, 0.2226120206497496, 0.22263748015330145, 0.22265086198452558, 0.22240367301305514, -0.22271482952647553, -0.22259545646235404, -0.2225320420126395, 0.2216247599945287], -3.258449018876346) [-0.22216700603743827, -0.22255788427794876, 0.2222486223762898, 0.2227465757635041, 0.222688682615619, 0.2225378267869874, -0.2223889134703136, 0.2226120206497496, 0.22263748015330145, 0.22265086198452558, 0.22240367301305514, -0.22271482952647553, -0.22259545646235404, -0.2225320420126395, 0.2216247599945287] -3.258449018876346
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0024414208488678923
curgen: 100 fitness: -0.0023190207532195473
curgen: 150 fitness: -0.0023190207532195473
curgen: 200 fitness: -0.0023190207532195473
curgen: 250 fitness: -0.002299836847271308
curgen: 300 fitness: -0.002299836847271308
curgen: 350 fitness: -0.0020975440673396406
curgen: 400 fitness: -0.0014944993820336094
curgen: 450 fitness: -0.0014944993820336094
curgen: 500 fitness: -0.001475398939533079
CoordinateCreature{Vector{Float64}}([-0.0005135651232490535, 0.0020280102568518525, 0.000728891370803796, -0.0007083438579120491, 0.00026716578395068744, -0.0011411269068287086, 0.0002879516964735372, 0.00026260931434532144, 0.0001349108689214804, -9.21249886621995e-5, 0.00019847901836149862, 0.0004375384728011267, 0.00023420405996003686, -0.00039006144904468206, -0.00019310273142298062], 0.001475398939533079) [-0.0005135651232490535, 0.0020280102568518525, 0.000728891370803796, -0.0007083438579120491, 0.00026716578395068744, -0.0011411269068287086, 0.0002879516964735372, 0.00026260931434532144, 0.0001349108689214804, -9.21249886621995e-5, 0.00019847901836149862, 0.0004375384728011267, 0.00023420405996003686, -0.00039006144904468206, -0.00019310273142298062] 0.001475398939533079
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
