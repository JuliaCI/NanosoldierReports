Julia Version 1.6.0-DEV.483
Commit e36194a437 (2020-07-17 16:26 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed SimpleWeightedGraphs ───────── v1.1.1
  Installed Compat ─────────────────────── v3.13.0
  Installed SimpleTraits ───────────────── v0.9.2
  Installed SpecialFunctions ───────────── v0.10.3
  Installed StatsBase ──────────────────── v0.33.0
  Installed Manifolds ──────────────────── v0.3.5
  Installed Distributions ──────────────── v0.23.5
  Installed Missings ───────────────────── v0.4.3
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed Rmath ──────────────────────── v0.6.1
  Installed MuladdMacro ────────────────── v0.2.2
  Installed PDMats ─────────────────────── v0.10.0
  Installed DataAPI ────────────────────── v1.3.0
  Installed SortingAlgorithms ──────────── v0.3.1
  Installed QuadGK ─────────────────────── v2.4.0
  Installed Rmath_jll ──────────────────── v0.2.2+1
  Installed Einsum ─────────────────────── v0.4.1
  Installed Requires ───────────────────── v1.0.1
  Installed HybridArrays ───────────────── v0.3.6
  Installed OrderedCollections ─────────── v1.3.0
  Installed MacroTools ─────────────────── v0.5.5
  Installed DataStructures ─────────────── v0.17.19
  Installed FiniteDifferences ──────────── v0.10.6
  Installed ChainRulesCore ─────────────── v0.9.4
  Installed ManifoldsBase ──────────────── v0.9.0
  Installed Inflate ────────────────────── v0.1.2
  Installed FillArrays ─────────────────── v0.8.13
  Installed ArnoldiMethod ──────────────── v0.0.4
  Installed LightGraphs ────────────────── v1.3.3
  Installed StatsFuns ──────────────────── v0.9.5
  Installed StaticArrays ───────────────── v0.12.4
Updating `~/.julia/environments/v1.6/Project.toml`
  [1cead3c2] + Manifolds v0.3.5
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [ec485272] + ArnoldiMethod v0.0.4
  [d360d2e6] + ChainRulesCore v0.9.4
  [34da2185] + Compat v3.13.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.17.19
  [31c24e10] + Distributions v0.23.5
  [b7d42ee7] + Einsum v0.4.1
  [1a297f60] + FillArrays v0.8.13
  [26cc04aa] + FiniteDifferences v0.10.6
  [1baab800] + HybridArrays v0.3.6
  [d25df0c9] + Inflate v0.1.2
  [093fc24a] + LightGraphs v1.3.3
  [1914dd2f] + MacroTools v0.5.5
  [1cead3c2] + Manifolds v0.3.5
  [3362f125] + ManifoldsBase v0.9.0
  [e1d29d7a] + Missings v0.4.3
  [46d2c3a1] + MuladdMacro v0.2.2
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.3.0
  [90014a1f] + PDMats v0.10.0
  [1fd47b50] + QuadGK v2.4.0
  [ae029012] + Requires v1.0.1
  [79098fc4] + Rmath v0.6.1
  [f50d1b31] + Rmath_jll v0.2.2+1
  [699a6c99] + SimpleTraits v0.9.2
  [47aef6b3] + SimpleWeightedGraphs v1.1.1
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.4
  [2913bbd2] + StatsBase v0.33.0
  [4c63d2b9] + StatsFuns v0.9.5
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing Manifolds
Status `/tmp/jl_A3Ne90/Project.toml`
  [31c24e10] Distributions v0.23.5
  [497a8b3b] DoubleFloats v1.1.13
  [b7d42ee7] Einsum v0.4.1
  [6a86dc24] FiniteDiff v2.5.0
  [26cc04aa] FiniteDifferences v0.10.6
  [f6369f11] ForwardDiff v0.10.12
  [1baab800] HybridArrays v0.3.6
  [093fc24a] LightGraphs v1.3.3
  [1cead3c2] Manifolds v0.3.5
  [3362f125] ManifoldsBase v0.9.0
  [1dea7af3] OrdinaryDiffEq v5.41.0
  [ae029012] Requires v1.0.1
  [37e2e3b7] ReverseDiff v1.4.1
  [47aef6b3] SimpleWeightedGraphs v1.1.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [2913bbd2] StatsBase v0.33.0
  [37e2e46d] LinearAlgebra
  [d6f4376e] Markdown
  [9a3f8284] Random
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_A3Ne90/Manifest.toml`
  [1520ce14] AbstractTrees v0.3.3
  [79e6a3ab] Adapt v2.0.2
  [ec485272] ArnoldiMethod v0.0.4
  [4fba245c] ArrayInterface v2.9.1
  [d360d2e6] ChainRulesCore v0.9.4
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.13.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [88cd18e8] ConsoleProgressMonitor v0.1.2
  [adafc99b] CpuId v0.2.2
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.17.19
  [2b5f629d] DiffEqBase v6.40.9
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [b4f34e82] Distances v0.9.0
  [31c24e10] Distributions v0.23.5
  [ffbed154] DocStringExtensions v0.8.2
  [497a8b3b] DoubleFloats v1.1.13
  [b7d42ee7] Einsum v0.4.1
  [d4d017d3] ExponentialUtilities v1.7.0
  [e2ba6199] ExprTools v0.1.1
  [8f5d6c58] EzXML v1.1.0
  [1a297f60] FillArrays v0.8.13
  [6a86dc24] FiniteDiff v2.5.0
  [26cc04aa] FiniteDifferences v0.10.6
  [f6369f11] ForwardDiff v0.10.12
  [069b7b12] FunctionWrappers v1.1.1
  [01680d73] GenericSVD v0.3.0
  [c145ed77] GenericSchur v0.4.0
  [1baab800] HybridArrays v0.3.6
  [d25df0c9] Inflate v0.1.2
  [d8418881] Intervals v1.4.0
  [42fd0dbc] IterativeSolvers v0.8.4
  [82899510] IteratorInterfaceExtensions v1.0.0
  [2ee39098] LabelledArrays v1.3.0
  [1d6d02ad] LeftChildRightSiblingTrees v0.1.2
  [94ce4f54] Libiconv_jll v1.16.0+5
  [093fc24a] LightGraphs v1.3.3
  [d3d80556] LineSearches v7.0.1
  [e6f89c97] LoggingExtras v0.4.2
  [bdcacae8] LoopVectorization v0.8.18
  [1914dd2f] MacroTools v0.5.5
  [1cead3c2] Manifolds v0.3.5
  [3362f125] ManifoldsBase v0.9.0
  [e1d29d7a] Missings v0.4.3
  [78c3b35d] Mocking v0.7.1
  [46d2c3a1] MuladdMacro v0.2.2
  [d41bc354] NLSolversBase v7.6.1
  [2774e3e8] NLsolve v4.4.0
  [77ba4419] NaNMath v0.3.4
  [6fe1bfb0] OffsetArrays v1.1.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.3.0
  [1dea7af3] OrdinaryDiffEq v5.41.0
  [90014a1f] PDMats v0.10.0
  [d96e819e] Parameters v0.12.1
  [f27b6e38] Polynomials v1.1.3
  [33c8b6b6] ProgressLogging v0.1.3
  [92933f4c] ProgressMeter v1.3.2
  [1fd47b50] QuadGK v2.4.0
  [be4d8f0f] Quadmath v0.5.4
  [3cdcf5f2] RecipesBase v1.0.1
  [731186ca] RecursiveArrayTools v2.5.0
  [f2c3362d] RecursiveFactorization v0.1.4
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [37e2e3b7] ReverseDiff v1.4.1
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+1
  [f2b01f46] Roots v1.0.3
  [21efa798] SIMDPirates v0.8.16
  [476501e8] SLEEFPirates v0.5.4
  [699a6c99] SimpleTraits v0.9.2
  [47aef6b3] SimpleWeightedGraphs v1.1.1
  [a2af1166] SortingAlgorithms v0.3.1
  [47a9eef4] SparseDiffTools v1.9.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [2913bbd2] StatsBase v0.33.0
  [4c63d2b9] StatsFuns v0.9.5
  [3783bdb8] TableTraits v1.0.0
  [5d786b92] TerminalLoggers v0.1.2
  [f269a46b] TimeZones v1.3.1
  [a2a6695c] TreeViews v0.3.0
  [3a884ed6] UnPack v1.0.1
  [3d5dd08c] VectorizationBase v0.12.24
  [19fa3120] VertexSafeGraphs v0.1.2
  [02c8fc9c] XML2_jll v2.9.10+1
  [83775a58] Zlib_jll v1.2.11+14
  [700de1a5] ZygoteRules v0.2.0
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary:           | Pass  Total
Differentiation backend |   51     51
Test Summary:    | Pass  Total
rdiff_ functions |    4      4
Test Summary:            | Pass  Total
Riemannian differentials |    8      8
Test Summary:        | Pass  Total
Riemannian gradients |    6      6
Skipping Base.active_repl
Skipping Base.active_repl_backend
Test Summary: | Pass  Total
Ambiguities   |    3      3
┌ Info: Manifolds.jl Test settings:
│ 
│ Testing Float32:  false
│ Testing Double64: false
└ Testing Static:   false
Test Summary:      | Pass  Total
SizedAbstractArray |   59     59
Test Summary:    | Pass  Total
CenteredMatrices |  335    335
Test Summary: | Pass  Total
Circle        |  498    498
Test Summary:  | Pass  Total
Cholesky Space |  129    129
Test Summary: | Pass  Total
Euclidean     | 1095   1095
Test Summary: | Pass  Total
fixed Rank    |  122    122
Test Summary:         | Pass  Total
Generalized Grassmann |  134    134
Test Summary:       | Pass  Total
Generalized Stiefel |  129    129
Test Summary: | Pass  Total
Grassmann     |  311    311
Test Summary:    | Pass  Total
Hyperbolic Space |  508    508
Test Summary:       | Pass  Total
Probability simplex |  130    130
Test Summary: | Pass  Total
Rotations     | 1078   1078
Test Summary:         | Pass  Total
SkewSymmetricMatrices |  561    561
Test Summary: | Pass  Total
Sphere        |  295    295
Test Summary:           | Pass  Total
SphereSymmetricMatrices |  231    231
Test Summary: | Pass  Total
Stiefel       |  269    269
Test Summary:     | Pass  Total
SymmetricMatrices |  655    655
Test Summary:                        | Pass  Total
Symmetric Positive Definite Matrices |  539    539
Test Summary:                | Pass  Total
MultinomialMatrices manifold |  108    108
Test Summary:    | Pass  Total
Oblique manifold |  126    126
Test Summary: | Pass  Total
Torus         |  116    116
Test Summary:    | Pass  Total
Product manifold |  828    828
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,2,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},Matrix{Float64}}(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, deriv::Matrix{Float64}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}},HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}, tv::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}, pts::Vector{HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}},PowerBasisData{Vector{CachedBasis{ℝ,DiagonalizingOrthonormalBasis{ℝ,SVector{3,Float64}},DiagonalizingBasisData{SVector{3,Float64},Vector{Vector{Float64}},Vector{Float64}}}}}},CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},PowerBasisData{Vector{CachedBasis{ℝ,DefaultOrthonormalBasis{ℝ},Vector{SVector{3,Float64}}}}}},DefaultOrthonormalBasis{ℝ},ProjectedOrthonormalBasis{:svd,ℝ}}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridMatrix{3,Dynamic(),Float64,2,Matrix{Float64}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Float64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Matrix{Float64}}}, vector_transport_methods::Vector{PowerVectorTransport})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
  Test threw exception
  Expression: d12 ≈ (ReverseDiff.gradient(exp_f, [t]))[1]
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:5
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#exp_f#480"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:8
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
ReverseDiff support: Error During Test at /home/pkgeval/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
  Test threw exception
  Expression: (ReverseDiff.gradient(retract_f, [t]))[1] ≥ 0
  AssertionError: IndexStyle(value) === IndexLinear()
  Stacktrace:
    [1] ReverseDiff.TrackedArray{Float64,Float64,3,HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},Array{Float64,3}}(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:77
    [2] ReverseDiff.TrackedArray(value::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, deriv::Array{Float64,3}, tape::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:86
    [3] track(x::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/tracked.jl:439
    [4] broadcast_mul(x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, #unused#::Type{Float64})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:421
    [5] broadcast(#unused#::typeof(*), x::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, y::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/elementwise.jl:342
    [6] _materialize(f::Function, args::Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:294
    [7] materialize(bc::Base.Broadcast.Broadcasted{ReverseDiff.TrackedStyle,Nothing,typeof(*),Tuple{ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/derivatives/broadcast.jl:311
    [8] *(a::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}}, b::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}})
      @ HybridArrays ~/.julia/packages/HybridArrays/TnVVq/src/linalg.jl:28
    [9] (::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})(t::ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:11
   [10] ReverseDiff.GradientTape(f::Manifolds.var"#retract_f#481"{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}},HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/tape.jl:199
   [11] gradient(f::Function, input::Vector{Float64}, cfg::ReverseDiff.GradientConfig{ReverseDiff.TrackedArray{Float64,Float64,1,Vector{Float64},Vector{Float64}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/tCOFA/src/api/gradients.jl:22
   [12] test_reversediff(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}, tv::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_reversediff.jl:13
   [13] macro expansion
      @ ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [15] test_manifold(M::PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}, pts::Vector{HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}}; basis_has_specialized_diagonalizing_get::Bool, basis_types_to_from::Tuple{}, basis_types_vecs::Tuple{}, default_inverse_retraction_method::LogarithmicInverseRetraction, default_retraction_method::ExponentialRetraction, exp_log_atol_multiplier::Int64, exp_log_rtol_multiplier::Int64, expected_dimension_type::Type, inverse_retraction_methods::Vector{Manifolds.InversePowerRetraction{LogarithmicInverseRetraction}}, is_mutating::Bool, is_point_atol_multiplier::Int64, is_tangent_atol_multiplier::Float64, mid_point12::HybridArray{Tuple{3,Dynamic(),Dynamic()},Float64,3,3,Array{Float64,3}}, point_distributions::Vector{Manifolds.PowerPointDistribution{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation},ProjectedPointDistribution{SVector{3,Float64},Sphere{2,ℝ},MvNormal{Float64,PDMats.ScalMat{Float64},SVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, projection_atol_multiplier::Int64, rand_tvector_atol_multiplier::Float64, retraction_atol_multiplier::Int64, retraction_methods::Vector{PowerRetraction{ExponentialRetraction}}, retraction_rtol_multiplier::Int64, test_exp_log::Bool, test_forward_diff::Bool, test_is_tangent::Bool, test_injectivity_radius::Bool, test_musical_isomorphisms::Bool, test_mutating_rand::Bool, test_project_point::Bool, test_project_tangent::Bool, test_representation_size::Bool, test_reverse_diff::Bool, test_tangent_vector_broadcasting::Bool, test_vector_transport::Bool, test_vector_spaces::Bool, test_vee_hat::Bool, tvector_distributions::Vector{Manifolds.PowerFVectorDistribution{TangentBundleFibers{PowerManifold{ℝ,Sphere{2,ℝ},Tuple{5,7},ArrayPowerRepresentation}},Manifolds.ProjectedFVectorDistribution{MVector{3,Float64},TangentBundleFibers{Sphere{2,ℝ}},MVector{3,Float64},MvNormal{Float64,PDMats.ScalMat{Float64},MVector{3,Float64}},typeof(project!)},Array{Float64,3}}}, vector_transport_methods::Vector{Any})
      @ Manifolds ~/.julia/packages/Manifolds/sLRpC/src/tests/tests_general.jl:553
  
Test Summary:                                           | Pass  Error  Total
Power manifold                                          | 3226    108   3334
  get_component, set_component!, getindex and setindex! |   18            18
  power vector transport                                |    1             1
  Type Matrix{Float64}...                               |  466           466
  Type HybridMatrix{3,Dynam...                          |  412     54    466
    dimension                                           |    4             4
    representation                                      |    9             9
    is_manifold_point                                   |    6             6
    is_tangent_vector                                   |    6             6
    log/exp tests                                       |   21            21
    (inverse &) retraction tests                        |   12            12
    vector spaces tests                                 |    6             6
    basic linear algebra in tangent space               |   12            12
    broadcasted linear algebra in tangent space         |   12            12
    vector transport                                    |   24            24
    vee and hat                                         |    6             6
    midpoint                                            |    2             2
    ForwardDiff support                                 |   54            54
    ReverseDiff support                                 |          54     54
    Musical isomorphisms                                |    2             2
    number_eltype                                       |    6             6
    copyto!                                             |    6             6
    point distributions                                 |   30            30
    tangent vector distributions                        |   10            10
  Type Array{Float64,3}...                              |  261           261
  Type HybridArray{Tuple{3,...                          |  207     54    261
    dimension                                           |    4             4
    representation                                      |   12            12
    is_manifold_point                                   |    6             6
    is_tangent_vector                                   |    6             6
    log/exp tests                                       |   21            21
    (inverse &) retraction tests                        |   12            12
    vector spaces tests                                 |    6             6
    basic linear algebra in tangent space               |   12            12
    broadcasted linear algebra in tangent space         |   12            12
    vee and hat                                         |    6             6
    midpoint                                            |    2             2
    ForwardDiff support                                 |   54            54
    ReverseDiff support                                 |          54     54
    Musical isomorphisms                                |    2             2
    number_eltype                                       |    6             6
    copyto!                                             |    6             6
    point distributions                                 |   30            30
    tangent vector distributions                        |   10            10
  Type Array{Float64,3}...                              |  333           333
  Type HybridArray{Tuple{3,...                          |  333           333
  Type Vector{Matrix{Float6...                          |  333           333
  Type Array{Float64,4}...                              |  210           210
  Type HybridArray{Tuple{3,...                          |  210           210
  Type Matrix{Matrix{Float6...                          |  210           210
  Power manifold of Circle                              |  108           108
  Basis printing                                        |    1             1
  Power manifold of Circle                              |  102           102
ERROR: LoadError: LoadError: Some tests did not pass: 3226 passed, 0 failed, 108 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/Manifolds/sLRpC/test/power_manifold.jl:9
in expression starting at /home/pkgeval/.julia/packages/Manifolds/sLRpC/test/runtests.jl:60
ERROR: Package Manifolds errored during testing
Stacktrace:
  [1] pkgerror(::String, ::Vararg{String,N} where N)
    @ Pkg.Types /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1561
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:327
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:314
  [5] #test#61
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#60
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:16
