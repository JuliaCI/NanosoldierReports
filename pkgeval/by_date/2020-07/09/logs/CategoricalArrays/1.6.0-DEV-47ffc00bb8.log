Julia Version 1.6.0-DEV.415
Commit 47ffc00bb8 (2020-07-09 14:34 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Missings ────────── v0.4.3
  Installed DataAPI ─────────── v1.3.0
  Installed Parsers ─────────── v1.0.7
  Installed CategoricalArrays ─ v0.8.1
  Installed JSON ────────────── v0.21.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [324d7699] + CategoricalArrays v0.8.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.8.1
  [9a962f9c] + DataAPI v1.3.0
  [682c06a0] + JSON v0.21.0
  [e1d29d7a] + Missings v0.4.3
  [69de0a69] + Parsers v1.0.7
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [de0858da] + Printf
  [9a3f8284] + Random
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [4ec0a83e] + Unicode
    Testing CategoricalArrays
Status `/tmp/jl_nraif5/Project.toml`
  [324d7699] CategoricalArrays v0.8.1
  [9a962f9c] DataAPI v1.3.0
  [682c06a0] JSON v0.21.0
  [e1d29d7a] Missings v0.4.3
  [ade2ca70] Dates
  [9fa8497b] Future
  [de0858da] Printf
  [10745b16] Statistics
  [8dfed614] Test
  [4ec0a83e] Unicode
Status `/tmp/jl_nraif5/Manifest.toml`
  [324d7699] CategoricalArrays v0.8.1
  [9a962f9c] DataAPI v1.3.0
  [682c06a0] JSON v0.21.0
  [e1d29d7a] Missings v0.4.3
  [69de0a69] Parsers v1.0.7
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [de0858da] Printf
  [9a3f8284] Random
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
01_value.jl   |   58     58
Test Summary:      | Pass  Total
04_constructors.jl |   70     70
convert() for CategoricalPool{Int, DefaultRefType} and values: Error During Test at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:47
  Test threw exception
  Expression: convert(Union{T, U}, v1) === v1
  MethodError: convert(::Type{Union{Missing, CategoricalArrays.CategoricalValue{Int64,R} where R<:Integer}}, ::CategoricalArrays.CategoricalValue{Int64,UInt32}) is ambiguous. Candidates:
    convert(::Type{S}, x::T) where {S, T<:CategoricalArrays.CategoricalValue} in CategoricalArrays at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/src/value.jl:68
    convert(::Type{T}, x::T) where T>:Missing in Base at missing.jl:67
    convert(::Type{T}, x) where T>:Missing in Base at missing.jl:69
    convert(::Type{T}, x::T) where T in Base at essentials.jl:171
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] macro expansion
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:47 [inlined]
   [2] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115 [inlined]
   [3] top-level scope
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:7
  
convert() for CategoricalPool{Int, DefaultRefType} and values: Error During Test at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:48
  Test threw exception
  Expression: convert(Union{T, U}, v2) === v2
  MethodError: convert(::Type{Union{Missing, CategoricalArrays.CategoricalValue{Int64,R} where R<:Integer}}, ::CategoricalArrays.CategoricalValue{Int64,UInt32}) is ambiguous. Candidates:
    convert(::Type{S}, x::T) where {S, T<:CategoricalArrays.CategoricalValue} in CategoricalArrays at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/src/value.jl:68
    convert(::Type{T}, x::T) where T>:Missing in Base at missing.jl:67
    convert(::Type{T}, x) where T>:Missing in Base at missing.jl:69
    convert(::Type{T}, x::T) where T in Base at essentials.jl:171
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] macro expansion
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:48 [inlined]
   [2] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115 [inlined]
   [3] top-level scope
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:7
  
convert() for CategoricalPool{Int, DefaultRefType} and values: Error During Test at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:49
  Test threw exception
  Expression: convert(Union{T, U}, v3) === v3
  MethodError: convert(::Type{Union{Missing, CategoricalArrays.CategoricalValue{Int64,R} where R<:Integer}}, ::CategoricalArrays.CategoricalValue{Int64,UInt32}) is ambiguous. Candidates:
    convert(::Type{S}, x::T) where {S, T<:CategoricalArrays.CategoricalValue} in CategoricalArrays at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/src/value.jl:68
    convert(::Type{T}, x::T) where T>:Missing in Base at missing.jl:67
    convert(::Type{T}, x) where T>:Missing in Base at missing.jl:69
    convert(::Type{T}, x::T) where T in Base at essentials.jl:171
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] macro expansion
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:49 [inlined]
   [2] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115 [inlined]
   [3] top-level scope
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:7
  
convert() for CategoricalPool{Int, DefaultRefType} and values: Error During Test at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:47
  Test threw exception
  Expression: convert(Union{T, U}, v1) === v1
  MethodError: convert(::Type{Union{Nothing, CategoricalArrays.CategoricalValue{Int64,R} where R<:Integer}}, ::CategoricalArrays.CategoricalValue{Int64,UInt32}) is ambiguous. Candidates:
    convert(::Type{S}, x::T) where {S, T<:CategoricalArrays.CategoricalValue} in CategoricalArrays at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/src/value.jl:68
    convert(::Type{T}, x::T) where T>:Nothing in Base at some.jl:35
    convert(::Type{T}, x) where T>:Nothing in Base at some.jl:36
    convert(::Type{T}, x::T) where T in Base at essentials.jl:171
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] macro expansion
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:47 [inlined]
   [2] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115 [inlined]
   [3] top-level scope
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:7
  
convert() for CategoricalPool{Int, DefaultRefType} and values: Error During Test at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:48
  Test threw exception
  Expression: convert(Union{T, U}, v2) === v2
  MethodError: convert(::Type{Union{Nothing, CategoricalArrays.CategoricalValue{Int64,R} where R<:Integer}}, ::CategoricalArrays.CategoricalValue{Int64,UInt32}) is ambiguous. Candidates:
    convert(::Type{S}, x::T) where {S, T<:CategoricalArrays.CategoricalValue} in CategoricalArrays at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/src/value.jl:68
    convert(::Type{T}, x::T) where T>:Nothing in Base at some.jl:35
    convert(::Type{T}, x) where T>:Nothing in Base at some.jl:36
    convert(::Type{T}, x::T) where T in Base at essentials.jl:171
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] macro expansion
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:48 [inlined]
   [2] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115 [inlined]
   [3] top-level scope
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:7
  
convert() for CategoricalPool{Int, DefaultRefType} and values: Error During Test at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:49
  Test threw exception
  Expression: convert(Union{T, U}, v3) === v3
  MethodError: convert(::Type{Union{Nothing, CategoricalArrays.CategoricalValue{Int64,R} where R<:Integer}}, ::CategoricalArrays.CategoricalValue{Int64,UInt32}) is ambiguous. Candidates:
    convert(::Type{S}, x::T) where {S, T<:CategoricalArrays.CategoricalValue} in CategoricalArrays at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/src/value.jl:68
    convert(::Type{T}, x::T) where T>:Nothing in Base at some.jl:35
    convert(::Type{T}, x) where T>:Nothing in Base at some.jl:36
    convert(::Type{T}, x::T) where T in Base at essentials.jl:171
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] macro expansion
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:49 [inlined]
   [2] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115 [inlined]
   [3] top-level scope
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:7
  
convert() for CategoricalPool{Int, DefaultRefType} and values: Error During Test at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:47
  Test threw exception
  Expression: convert(Union{T, U}, v1) === v1
  MethodError: convert(::Type{Union{Missing, CategoricalArrays.CategoricalValue}}, ::CategoricalArrays.CategoricalValue{Int64,UInt32}) is ambiguous. Candidates:
    convert(::Type{S}, x::T) where {S, T<:CategoricalArrays.CategoricalValue} in CategoricalArrays at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/src/value.jl:68
    convert(::Type{T}, x::T) where T>:Missing in Base at missing.jl:67
    convert(::Type{T}, x) where T>:Missing in Base at missing.jl:69
    convert(::Type{T}, x::T) where T in Base at essentials.jl:171
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] macro expansion
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:47 [inlined]
   [2] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115 [inlined]
   [3] top-level scope
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:7
  
convert() for CategoricalPool{Int, DefaultRefType} and values: Error During Test at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:48
  Test threw exception
  Expression: convert(Union{T, U}, v2) === v2
  MethodError: convert(::Type{Union{Missing, CategoricalArrays.CategoricalValue}}, ::CategoricalArrays.CategoricalValue{Int64,UInt32}) is ambiguous. Candidates:
    convert(::Type{S}, x::T) where {S, T<:CategoricalArrays.CategoricalValue} in CategoricalArrays at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/src/value.jl:68
    convert(::Type{T}, x::T) where T>:Missing in Base at missing.jl:67
    convert(::Type{T}, x) where T>:Missing in Base at missing.jl:69
    convert(::Type{T}, x::T) where T in Base at essentials.jl:171
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] macro expansion
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:48 [inlined]
   [2] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115 [inlined]
   [3] top-level scope
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:7
  
convert() for CategoricalPool{Int, DefaultRefType} and values: Error During Test at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:49
  Test threw exception
  Expression: convert(Union{T, U}, v3) === v3
  MethodError: convert(::Type{Union{Missing, CategoricalArrays.CategoricalValue}}, ::CategoricalArrays.CategoricalValue{Int64,UInt32}) is ambiguous. Candidates:
    convert(::Type{S}, x::T) where {S, T<:CategoricalArrays.CategoricalValue} in CategoricalArrays at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/src/value.jl:68
    convert(::Type{T}, x::T) where T>:Missing in Base at missing.jl:67
    convert(::Type{T}, x) where T>:Missing in Base at missing.jl:69
    convert(::Type{T}, x::T) where T in Base at essentials.jl:171
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] macro expansion
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:49 [inlined]
   [2] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115 [inlined]
   [3] top-level scope
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:7
  
convert() for CategoricalPool{Int, DefaultRefType} and values: Error During Test at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:47
  Test threw exception
  Expression: convert(Union{T, U}, v1) === v1
  MethodError: convert(::Type{Union{Nothing, CategoricalArrays.CategoricalValue}}, ::CategoricalArrays.CategoricalValue{Int64,UInt32}) is ambiguous. Candidates:
    convert(::Type{S}, x::T) where {S, T<:CategoricalArrays.CategoricalValue} in CategoricalArrays at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/src/value.jl:68
    convert(::Type{T}, x::T) where T>:Nothing in Base at some.jl:35
    convert(::Type{T}, x) where T>:Nothing in Base at some.jl:36
    convert(::Type{T}, x::T) where T in Base at essentials.jl:171
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] macro expansion
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:47 [inlined]
   [2] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115 [inlined]
   [3] top-level scope
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:7
  
convert() for CategoricalPool{Int, DefaultRefType} and values: Error During Test at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:48
  Test threw exception
  Expression: convert(Union{T, U}, v2) === v2
  MethodError: convert(::Type{Union{Nothing, CategoricalArrays.CategoricalValue}}, ::CategoricalArrays.CategoricalValue{Int64,UInt32}) is ambiguous. Candidates:
    convert(::Type{S}, x::T) where {S, T<:CategoricalArrays.CategoricalValue} in CategoricalArrays at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/src/value.jl:68
    convert(::Type{T}, x::T) where T>:Nothing in Base at some.jl:35
    convert(::Type{T}, x) where T>:Nothing in Base at some.jl:36
    convert(::Type{T}, x::T) where T in Base at essentials.jl:171
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] macro expansion
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:48 [inlined]
   [2] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115 [inlined]
   [3] top-level scope
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:7
  
convert() for CategoricalPool{Int, DefaultRefType} and values: Error During Test at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:49
  Test threw exception
  Expression: convert(Union{T, U}, v3) === v3
  MethodError: convert(::Type{Union{Nothing, CategoricalArrays.CategoricalValue}}, ::CategoricalArrays.CategoricalValue{Int64,UInt32}) is ambiguous. Candidates:
    convert(::Type{S}, x::T) where {S, T<:CategoricalArrays.CategoricalValue} in CategoricalArrays at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/src/value.jl:68
    convert(::Type{T}, x::T) where T>:Nothing in Base at some.jl:35
    convert(::Type{T}, x) where T>:Nothing in Base at some.jl:36
    convert(::Type{T}, x::T) where T in Base at essentials.jl:171
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] macro expansion
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:49 [inlined]
   [2] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115 [inlined]
   [3] top-level scope
     @ ~/.julia/packages/CategoricalArrays/nd8kj/test/05_convert.jl:7
  
Test Summary:                                                   | Pass  Error  Total
05_convert.jl                                                   |   61     12     73
  convert() for CategoricalPool{Int, DefaultRefType} and values |   37     12     49
  promote_type                                                  |   13            13
  convert() preserves `ordered`                                 |    1             1
  convert() with Union{T, Nothing}                              |    3             3
  levelcode                                                     |    7             7
Test Summary:                                                   | Pass  Error  Total
05_convert.jl                                                   |   61     12     73
  convert() for CategoricalPool{Int, DefaultRefType} and values |   37     12     49
  promote_type                                                  |   13            13
  convert() preserves `ordered`                                 |    1             1
  convert() with Union{T, Nothing}                              |    3             3
  levelcode                                                     |    7             7
ERROR: LoadError: Some tests did not pass: 61 passed, 0 failed, 12 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/CategoricalArrays/nd8kj/test/runtests.jl:5
caused by [exception 1]
Some tests did not pass: 61 passed, 0 failed, 12 errored, 0 broken.
ERROR: Package CategoricalArrays errored during testing
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1561
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:327
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:314
  [5] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#60
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:16
