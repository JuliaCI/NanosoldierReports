Julia Version 1.6.0-DEV.338
Commit bb9361f2f7 (2020-07-01 07:32 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Libiconv_jll ───────────────── v1.16.0+5
  Installed Compat ─────────────────────── v3.12.0
  Installed SpecialFunctions ───────────── v0.10.3
  Installed ExprTools ──────────────────── v0.1.1
  Installed RecipesBase ────────────────── v1.0.1
  Installed InfiniteLinearAlgebra ──────── v0.3.5
  Installed DSP ────────────────────────── v0.6.7
  Installed Polynomials ────────────────── v1.1.1
  Installed MatrixFactorizations ───────── v0.4.1
  Installed EzXML ──────────────────────── v1.1.0
  Installed IntelOpenMP_jll ────────────── v2018.0.3+0
  Installed XML2_jll ───────────────────── v2.9.10+1
  Installed AbstractFFTs ───────────────── v0.5.0
  Installed SemiseparableMatrices ──────── v0.1.0
  Installed FillArrays ─────────────────── v0.8.11
  Installed FFTW ───────────────────────── v1.2.2
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed LazyArrays ─────────────────── v0.16.13
  Installed Reexport ───────────────────── v0.2.0
  Installed ArrayLayouts ───────────────── v0.3.5
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed Mocking ────────────────────── v0.7.1
  Installed FFTW_jll ───────────────────── v3.3.9+5
  Installed LazyBandedMatrices ─────────── v0.2.11
  Installed MacroTools ─────────────────── v0.5.5
  Installed BlockBandedMatrices ────────── v0.8.8
  Installed IterTools ──────────────────── v1.3.0
  Installed BandedMatrices ─────────────── v0.15.14
  Installed BlockArrays ────────────────── v0.12.9
  Installed MKL_jll ────────────────────── v2020.1.216+0
  Installed Intervals ──────────────────── v1.3.3
  Installed InfiniteArrays ─────────────── v0.7.3
  Installed StaticArrays ───────────────── v0.12.3
  Installed Zlib_jll ───────────────────── v1.2.11+14
  Installed TimeZones ──────────────────── v1.2.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [cde9dba0] + InfiniteLinearAlgebra v0.3.5
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [4c555306] + ArrayLayouts v0.3.5
  [aae01518] + BandedMatrices v0.15.14
  [8e7c35d0] + BlockArrays v0.12.9
  [ffab5731] + BlockBandedMatrices v0.8.8
  [34da2185] + Compat v3.12.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [717857b8] + DSP v0.6.7
  [e2ba6199] + ExprTools v0.1.1
  [8f5d6c58] + EzXML v1.1.0
  [7a1cc6ca] + FFTW v1.2.2
  [f5851436] + FFTW_jll v3.3.9+5
  [1a297f60] + FillArrays v0.8.11
  [4858937d] + InfiniteArrays v0.7.3
  [cde9dba0] + InfiniteLinearAlgebra v0.3.5
  [1d5cc7b8] + IntelOpenMP_jll v2018.0.3+0
  [d8418881] + Intervals v1.3.3
  [c8e1da08] + IterTools v1.3.0
  [5078a376] + LazyArrays v0.16.13
  [d7e5e226] + LazyBandedMatrices v0.2.11
  [94ce4f54] + Libiconv_jll v1.16.0+5
  [856f044c] + MKL_jll v2020.1.216+0
  [1914dd2f] + MacroTools v0.5.5
  [a3b82374] + MatrixFactorizations v0.4.1
  [78c3b35d] + Mocking v0.7.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [f27b6e38] + Polynomials v1.1.1
  [3cdcf5f2] + RecipesBase v1.0.1
  [189a3867] + Reexport v0.2.0
  [f8ebbe35] + SemiseparableMatrices v0.1.0
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.3
  [f269a46b] + TimeZones v1.2.0
  [02c8fc9c] + XML2_jll v2.9.10+1
  [83775a58] + Zlib_jll v1.2.11+14
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building FFTW ─────→ `~/.julia/packages/FFTW/kcXL6/deps/build.log`
   Building TimeZones → `~/.julia/packages/TimeZones/OjMoF/deps/build.log`
    Testing InfiniteLinearAlgebra
Status `/tmp/jl_UlTq24/Project.toml`
  [4c555306] ArrayLayouts v0.3.5
  [aae01518] BandedMatrices v0.15.14
  [8e7c35d0] BlockArrays v0.12.9
  [ffab5731] BlockBandedMatrices v0.8.8
  [1a297f60] FillArrays v0.8.11
  [4858937d] InfiniteArrays v0.7.3
  [cde9dba0] InfiniteLinearAlgebra v0.3.5
  [5078a376] LazyArrays v0.16.13
  [d7e5e226] LazyBandedMatrices v0.2.11
  [a3b82374] MatrixFactorizations v0.4.1
  [f8ebbe35] SemiseparableMatrices v0.1.0
  [276daf66] SpecialFunctions v0.10.3
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [8dfed614] Test
Status `/tmp/jl_UlTq24/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [4c555306] ArrayLayouts v0.3.5
  [aae01518] BandedMatrices v0.15.14
  [8e7c35d0] BlockArrays v0.12.9
  [ffab5731] BlockBandedMatrices v0.8.8
  [34da2185] Compat v3.12.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [717857b8] DSP v0.6.7
  [e2ba6199] ExprTools v0.1.1
  [8f5d6c58] EzXML v1.1.0
  [7a1cc6ca] FFTW v1.2.2
  [f5851436] FFTW_jll v3.3.9+5
  [1a297f60] FillArrays v0.8.11
  [4858937d] InfiniteArrays v0.7.3
  [cde9dba0] InfiniteLinearAlgebra v0.3.5
  [1d5cc7b8] IntelOpenMP_jll v2018.0.3+0
  [d8418881] Intervals v1.3.3
  [c8e1da08] IterTools v1.3.0
  [5078a376] LazyArrays v0.16.13
  [d7e5e226] LazyBandedMatrices v0.2.11
  [94ce4f54] Libiconv_jll v1.16.0+5
  [856f044c] MKL_jll v2020.1.216+0
  [1914dd2f] MacroTools v0.5.5
  [a3b82374] MatrixFactorizations v0.4.1
  [78c3b35d] Mocking v0.7.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [f27b6e38] Polynomials v1.1.1
  [3cdcf5f2] RecipesBase v1.0.1
  [189a3867] Reexport v0.2.0
  [f8ebbe35] SemiseparableMatrices v0.1.0
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.3
  [f269a46b] TimeZones v1.2.0
  [02c8fc9c] XML2_jll v2.9.10+1
  [83775a58] Zlib_jll v1.2.11+14
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
∞-banded      |    6      6
Test Summary:  | Pass  Total
∞-block arrays |    5      5
Test Summary:                | Pass  Total
∞-Toeplitz and Pert-Toeplitz |   16     16
Test Summary: | Pass  Broken  Total
Algebra       |   74       3     77
Test Summary: | Pass  Total
HessenbergQ   |   28     28
Test Summary: | Pass  Total
Inf QL        |   81     81
  0.126155 seconds (141.01 k allocations: 7.813 MiB)
  0.009387 seconds (4.01 k allocations: 2.431 MiB)
  0.513417 seconds (610.85 k allocations: 34.912 MiB)
block-banded: Error During Test at /home/pkgeval/.julia/packages/InfiniteLinearAlgebra/ifzpO/test/test_infqr.jl:220
  Test threw exception
  Expression: ((F.Q)' * [1; zeros(∞)])[1:6] ≈ [-0.9701425001453321, 0, -0.23386170701251197, 0, 0, -0.06193705069863463]
  MethodError: no method matching elsize(::Type{PseudoBlockArray{Float64,1,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Array{Int64,1}}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::PseudoBlockArray{Float64,1,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Array{Int64,1}}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::PseudoBlockArray{Float64,1,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Array{Int64,1}}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Array{Int64,1}}}},false}) at ./subarray.jl:402
   [4] ormqr!(::Char, ::Char, ::SubArray{Float64,2,BlockSkylineMatrix{Float64,Array{Float64,1},BlockBandedMatrices.BlockSkylineSizes{Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},BandedMatrix{Int64,Array{Int64,2},Base.OneTo{Int64}},Array{Int64,1}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Array{Int64,1}}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/lapack.jl:2760
   [5] _apply_qr!(::ColumnMajor, ::DenseColumnMajor, ::DenseColumnMajor, ::SubArray{Float64,2,BlockSkylineMatrix{Float64,Array{Float64,1},BlockBandedMatrices.BlockSkylineSizes{Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},BandedMatrix{Int64,Array{Int64,2},Base.OneTo{Int64}},Array{Int64,1}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Array{Int64,1}}}},false}) at /home/pkgeval/.julia/packages/BlockBandedMatrices/ukxR8/src/blockskylineqr.jl:4
   [6] apply_qr!(::SubArray{Float64,2,BlockSkylineMatrix{Float64,Array{Float64,1},BlockBandedMatrices.BlockSkylineSizes{Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},BandedMatrix{Int64,Array{Int64,2},Base.OneTo{Int64}},Array{Int64,1}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Array{Int64,1}}}},false}) at /home/pkgeval/.julia/packages/BlockBandedMatrices/ukxR8/src/blockskylineqr.jl:8
   [7] materialize!(::Lmul{ArrayLayouts.AdjQRPackedQLayout{BlockBandedMatrices.BlockBandedColumns{ColumnMajor},DenseColumnMajor},DenseColumnMajor,Adjoint{Float64,MatrixFactorizations.QRPackedQ{Float64,SubArray{Float64,2,BlockSkylineMatrix{Float64,Array{Float64,1},BlockBandedMatrices.BlockSkylineSizes{Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},BandedMatrix{Int64,Array{Int64,2},Base.OneTo{Int64}},Array{Int64,1}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Array{Int64,1}}},BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Array{Int64,1}}}},false},SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true}}},SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true}}) at /home/pkgeval/.julia/packages/BlockBandedMatrices/ukxR8/src/blockskylineqr.jl:90
   [8] lmul! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/lmul.jl:45 [inlined]
   [9] lmul! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/lmul.jl:72 [inlined]
   [10] materialize!(::Lmul{ArrayLayouts.AdjQRPackedQLayout{AdaptiveLayout{BlockBandedMatrices.BlockBandedColumns{ColumnMajor}},UnknownLayout},LazyArrays.PaddedLayout{DenseColumnMajor},Adjoint{Float64,MatrixFactorizations.QRPackedQ{Float64,InfiniteLinearAlgebra.AdaptiveQRFactors{Float64,BlockSkylineMatrix{Float64,Array{Float64,1},BlockBandedMatrices.BlockSkylineSizes{Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},BandedMatrix{Int64,Array{Int64,2},Base.OneTo{Int64}},Array{Int64,1}}},KronTrav{Float64,2,BroadcastArray{Float64,2,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Array{Float64,2},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}},InfiniteLinearAlgebra.AdaptiveQRTau{Float64,BlockSkylineMatrix{Float64,Array{Float64,1},BlockBandedMatrices.BlockSkylineSizes{Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},BandedMatrix{Int64,Array{Int64,2},Base.OneTo{Int64}},Array{Int64,1}}},KronTrav{Float64,2,BroadcastArray{Float64,2,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Array{Float64,2},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}}}},LazyArrays.CachedArray{Float64,1,Array{Float64,1},Zeros{Float64,1,Tuple{OneToInf{Int64}}}}}) at /home/pkgeval/.julia/packages/InfiniteLinearAlgebra/ifzpO/src/infqr.jl:267
   [11] lmul! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/lmul.jl:45 [inlined]
   [12] lmul! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/lmul.jl:70 [inlined]
   [13] _lmul_copymutable(::Adjoint{Float64,MatrixFactorizations.QRPackedQ{Float64,InfiniteLinearAlgebra.AdaptiveQRFactors{Float64,BlockSkylineMatrix{Float64,Array{Float64,1},BlockBandedMatrices.BlockSkylineSizes{Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},BandedMatrix{Int64,Array{Int64,2},Base.OneTo{Int64}},Array{Int64,1}}},KronTrav{Float64,2,BroadcastArray{Float64,2,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Array{Float64,2},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}},InfiniteLinearAlgebra.AdaptiveQRTau{Float64,BlockSkylineMatrix{Float64,Array{Float64,1},BlockBandedMatrices.BlockSkylineSizes{Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},BandedMatrix{Int64,Array{Int64,2},Base.OneTo{Int64}},Array{Int64,1}}},KronTrav{Float64,2,BroadcastArray{Float64,2,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Array{Float64,2},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}}}}, ::LazyArrays.CachedArray{Float64,1,Array{Float64,1},Zeros{Float64,1,Tuple{OneToInf{Int64}}}}) at /home/pkgeval/.julia/packages/InfiniteLinearAlgebra/ifzpO/src/infqr.jl:277
   [14] *(::Adjoint{Float64,MatrixFactorizations.QRPackedQ{Float64,InfiniteLinearAlgebra.AdaptiveQRFactors{Float64,BlockSkylineMatrix{Float64,Array{Float64,1},BlockBandedMatrices.BlockSkylineSizes{Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},BandedMatrix{Int64,Array{Int64,2},Base.OneTo{Int64}},Array{Int64,1}}},KronTrav{Float64,2,BroadcastArray{Float64,2,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Array{Float64,2},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}},InfiniteLinearAlgebra.AdaptiveQRTau{Float64,BlockSkylineMatrix{Float64,Array{Float64,1},BlockBandedMatrices.BlockSkylineSizes{Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},BandedMatrix{Int64,Array{Int64,2},Base.OneTo{Int64}},Array{Int64,1}}},KronTrav{Float64,2,BroadcastArray{Float64,2,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Array{Float64,2},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}}}}, ::LazyArrays.CachedArray{Float64,1,Array{Float64,1},Zeros{Float64,1,Tuple{OneToInf{Int64}}}}) at /home/pkgeval/.julia/packages/InfiniteLinearAlgebra/ifzpO/src/infqr.jl:283
   [15] top-level scope at /home/pkgeval/.julia/packages/InfiniteLinearAlgebra/ifzpO/test/test_infqr.jl:220
   [16] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [17] top-level scope at /home/pkgeval/.julia/packages/InfiniteLinearAlgebra/ifzpO/test/test_infqr.jl:213
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/InfiniteLinearAlgebra/ifzpO/test/test_infqr.jl:11
  
block-banded: Error During Test at /home/pkgeval/.julia/packages/InfiniteLinearAlgebra/ifzpO/test/test_infqr.jl:212
  Got exception outside of a @test
  MethodError: no method matching elsize(::Type{PseudoBlockArray{Float64,1,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Array{Int64,1}}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::PseudoBlockArray{Float64,1,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Array{Int64,1}}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::PseudoBlockArray{Float64,1,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Array{Int64,1}}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Array{Int64,1}}}},false}) at ./subarray.jl:402
   [4] ormqr!(::Char, ::Char, ::SubArray{Float64,2,BlockSkylineMatrix{Float64,Array{Float64,1},BlockBandedMatrices.BlockSkylineSizes{Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},BandedMatrix{Int64,Array{Int64,2},Base.OneTo{Int64}},Array{Int64,1}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Array{Int64,1}}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/lapack.jl:2760
   [5] _apply_qr!(::ColumnMajor, ::DenseColumnMajor, ::DenseColumnMajor, ::SubArray{Float64,2,BlockSkylineMatrix{Float64,Array{Float64,1},BlockBandedMatrices.BlockSkylineSizes{Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},BandedMatrix{Int64,Array{Int64,2},Base.OneTo{Int64}},Array{Int64,1}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Array{Int64,1}}}},false}) at /home/pkgeval/.julia/packages/BlockBandedMatrices/ukxR8/src/blockskylineqr.jl:4
   [6] apply_qr!(::SubArray{Float64,2,BlockSkylineMatrix{Float64,Array{Float64,1},BlockBandedMatrices.BlockSkylineSizes{Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},BandedMatrix{Int64,Array{Int64,2},Base.OneTo{Int64}},Array{Int64,1}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},UnitRange{Int64}},BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,PseudoBlockArray{Float64,1,SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true},Tuple{BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Array{Int64,1}}}},false}) at /home/pkgeval/.julia/packages/BlockBandedMatrices/ukxR8/src/blockskylineqr.jl:8
   [7] materialize!(::Lmul{ArrayLayouts.AdjQRPackedQLayout{BlockBandedMatrices.BlockBandedColumns{ColumnMajor},DenseColumnMajor},DenseColumnMajor,Adjoint{Float64,MatrixFactorizations.QRPackedQ{Float64,SubArray{Float64,2,BlockSkylineMatrix{Float64,Array{Float64,1},BlockBandedMatrices.BlockSkylineSizes{Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},BandedMatrix{Int64,Array{Int64,2},Base.OneTo{Int64}},Array{Int64,1}}},Tuple{BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Array{Int64,1}}},BlockArrays.BlockSlice{BlockRange{1,Tuple{UnitRange{Int64}}},BlockedUnitRange{Array{Int64,1}}}},false},SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true}}},SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true}}) at /home/pkgeval/.julia/packages/BlockBandedMatrices/ukxR8/src/blockskylineqr.jl:90
   [8] lmul! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/lmul.jl:45 [inlined]
   [9] lmul! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/lmul.jl:72 [inlined]
   [10] materialize!(::Lmul{ArrayLayouts.AdjQRPackedQLayout{AdaptiveLayout{BlockBandedMatrices.BlockBandedColumns{ColumnMajor}},UnknownLayout},LazyArrays.PaddedLayout{DenseColumnMajor},Adjoint{Float64,MatrixFactorizations.QRPackedQ{Float64,InfiniteLinearAlgebra.AdaptiveQRFactors{Float64,BlockSkylineMatrix{Float64,Array{Float64,1},BlockBandedMatrices.BlockSkylineSizes{Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},BandedMatrix{Int64,Array{Int64,2},Base.OneTo{Int64}},Array{Int64,1}}},KronTrav{Float64,2,BroadcastArray{Float64,2,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Array{Float64,2},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}},InfiniteLinearAlgebra.AdaptiveQRTau{Float64,BlockSkylineMatrix{Float64,Array{Float64,1},BlockBandedMatrices.BlockSkylineSizes{Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},BandedMatrix{Int64,Array{Int64,2},Base.OneTo{Int64}},Array{Int64,1}}},KronTrav{Float64,2,BroadcastArray{Float64,2,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Array{Float64,2},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}}}},LazyArrays.CachedArray{Float64,1,Array{Float64,1},Zeros{Float64,1,Tuple{OneToInf{Int64}}}}}) at /home/pkgeval/.julia/packages/InfiniteLinearAlgebra/ifzpO/src/infqr.jl:267
   [11] lmul! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/lmul.jl:45 [inlined]
   [12] lmul! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/lmul.jl:70 [inlined]
   [13] _lmul_copymutable(::Adjoint{Float64,MatrixFactorizations.QRPackedQ{Float64,InfiniteLinearAlgebra.AdaptiveQRFactors{Float64,BlockSkylineMatrix{Float64,Array{Float64,1},BlockBandedMatrices.BlockSkylineSizes{Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},BandedMatrix{Int64,Array{Int64,2},Base.OneTo{Int64}},Array{Int64,1}}},KronTrav{Float64,2,BroadcastArray{Float64,2,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Array{Float64,2},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}},InfiniteLinearAlgebra.AdaptiveQRTau{Float64,BlockSkylineMatrix{Float64,Array{Float64,1},BlockBandedMatrices.BlockSkylineSizes{Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},BandedMatrix{Int64,Array{Int64,2},Base.OneTo{Int64}},Array{Int64,1}}},KronTrav{Float64,2,BroadcastArray{Float64,2,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Array{Float64,2},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}}}}, ::LazyArrays.CachedArray{Float64,1,Array{Float64,1},Zeros{Float64,1,Tuple{OneToInf{Int64}}}}) at /home/pkgeval/.julia/packages/InfiniteLinearAlgebra/ifzpO/src/infqr.jl:277
   [14] * at /home/pkgeval/.julia/packages/InfiniteLinearAlgebra/ifzpO/src/infqr.jl:283 [inlined]
   [15] \(::MatrixFactorizations.QR{Float64,InfiniteLinearAlgebra.AdaptiveQRFactors{Float64,BlockSkylineMatrix{Float64,Array{Float64,1},BlockBandedMatrices.BlockSkylineSizes{Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},BandedMatrix{Int64,Array{Int64,2},Base.OneTo{Int64}},Array{Int64,1}}},KronTrav{Float64,2,BroadcastArray{Float64,2,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Array{Float64,2},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}},InfiniteLinearAlgebra.AdaptiveQRTau{Float64,BlockSkylineMatrix{Float64,Array{Float64,1},BlockBandedMatrices.BlockSkylineSizes{Tuple{BlockedUnitRange{Array{Int64,1}},BlockedUnitRange{Array{Int64,1}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Fill{Int64,1,Tuple{Base.OneTo{Int64}}},BandedMatrix{Int64,Array{Int64,2},Base.OneTo{Int64}},Array{Int64,1}}},KronTrav{Float64,2,BroadcastArray{Float64,2,typeof(-),Tuple{BandedMatrix{Float64,ApplyArray{Float64,2,typeof(*),Tuple{Array{Float64,2},ApplyArray{Float64,2,typeof(vcat),Tuple{Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}},Fill{Float64,2,Tuple{Base.OneTo{Int64},OneToInf{Int64}}}}}}},OneToInf{Int64}},Diagonal{Int64,Fill{Int64,1,Tuple{OneToInf{Int64}}}}}},Diagonal{Float64,Ones{Float64,1,Tuple{OneToInf{Int64}}}},Tuple{BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}},BlockedUnitRange{Cumsum{Int64,1,OneToInf{Int64}}}}}}}, ::LazyArrays.CachedArray{Float64,1,Array{Float64,1},Zeros{Float64,1,Tuple{OneToInf{Int64}}}}) at /home/pkgeval/.julia/packages/InfiniteLinearAlgebra/ifzpO/src/infqr.jl:309
   [16] top-level scope at /home/pkgeval/.julia/packages/InfiniteLinearAlgebra/ifzpO/test/test_infqr.jl:223
   [17] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [18] top-level scope at /home/pkgeval/.julia/packages/InfiniteLinearAlgebra/ifzpO/test/test_infqr.jl:213
   [19] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [20] top-level scope at /home/pkgeval/.julia/packages/InfiniteLinearAlgebra/ifzpO/test/test_infqr.jl:11
   [21] include(::String) at ./client.jl:444
   [22] top-level scope at /home/pkgeval/.julia/packages/InfiniteLinearAlgebra/ifzpO/test/runtests.jl:227
   [23] include(::String) at ./client.jl:444
   [24] top-level scope at none:6
   [25] eval(::Module, ::Any) at ./boot.jl:340
   [26] exec_options(::Base.JLOptions) at ./client.jl:260
   [27] _start() at ./client.jl:485
  
Test Summary:       | Pass  Error  Total
Adaptive QR         |   82      2     84
  test partialqr!   |    7             7
  AdaptiveQRFactors |    7             7
  col/rowsupport    |   15            15
  Qmul              |   12            12
  Bessel J          |    3             3
  5-band            |    1             1
  broadcast         |    5             5
  triangular infqr  |    2             2
  almost-banded     |   27            27
  block-banded      |    3      2      5
ERROR: LoadError: LoadError: Some tests did not pass: 82 passed, 0 failed, 2 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/InfiniteLinearAlgebra/ifzpO/test/test_infqr.jl:10
in expression starting at /home/pkgeval/.julia/packages/InfiniteLinearAlgebra/ifzpO/test/runtests.jl:227
ERROR: Package InfiniteLinearAlgebra errored during testing
Stacktrace:
 [1] pkgerror(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1561
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:327
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:314
 [5] #test#61 at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
 [6] test at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
 [7] #test#60 at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
 [8] test at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope at none:16
