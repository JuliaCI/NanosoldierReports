Julia Version 1.6.0-DEV.338
Commit bb9361f2f7 (2020-07-01 07:32 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed UnPack ─────────────────────── v1.0.1
  Installed NameResolution ─────────────── v0.1.3
  Installed Inflate ────────────────────── v0.1.2
  Installed DiffEqOperators ────────────── v4.10.0
  Installed Parameters ─────────────────── v0.12.1
  Installed DocStringExtensions ────────── v0.8.2
  Installed ForwardDiff ────────────────── v0.10.12
  Installed LightGraphs ────────────────── v1.3.3
  Installed SIMDPirates ────────────────── v0.8.13
  Installed JuliaVariables ─────────────── v0.2.0
  Installed ProgressMeter ──────────────── v1.3.1
  Installed PrettyPrint ────────────────── v0.1.0
  Installed TableTraits ────────────────── v1.0.0
  Installed SpecialFunctions ───────────── v0.10.3
  Installed SLEEFPirates ───────────────── v0.5.1
  Installed IterativeSolvers ───────────── v0.8.4
  Installed DiffRules ──────────────────── v1.0.1
  Installed SafeTestsets ───────────────── v0.0.1
  Installed RecipesBase ────────────────── v1.0.1
  Installed Compat ─────────────────────── v3.12.0
  Installed ZygoteRules ────────────────── v0.2.0
  Installed Roots ──────────────────────── v1.0.2
  Installed CanonicalTraits ────────────── v0.2.1
  Installed TimerOutputs ───────────────── v0.5.6
  Installed DiffEqJump ─────────────────── v6.9.2
  Installed FunctionWrappers ───────────── v1.1.1
  Installed AbstractTrees ──────────────── v0.3.3
  Installed ConsoleProgressMonitor ─────── v0.1.2
  Installed ProgressLogging ────────────── v0.1.3
  Installed MLStyle ────────────────────── v0.3.1
  Installed RecursiveFactorization ─────── v0.1.3
  Installed TreeViews ──────────────────── v0.3.0
  Installed MatrixFactorizations ───────── v0.4.1
  Installed Requires ───────────────────── v1.0.1
  Installed IteratorInterfaceExtensions ── v1.0.0
  Installed DiffEqBase ─────────────────── v6.40.0
  Installed RandomNumbers ──────────────── v1.4.0
  Installed FillArrays ─────────────────── v0.8.11
  Installed BinaryProvider ─────────────── v0.5.10
  Installed GeneralizedGenerated ───────── v0.2.4
  Installed NNlib ──────────────────────── v0.6.6
  Installed DiffResults ────────────────── v1.0.2
  Installed MuladdMacro ────────────────── v0.2.2
  Installed PoissonRandom ──────────────── v0.4.0
  Installed SimpleTraits ───────────────── v0.9.2
  Installed SymbolicUtils ──────────────── v0.4.2
  Installed Unitful ────────────────────── v1.3.0
  Installed VectorizationBase ──────────── v0.12.16
  Installed LazyArrays ─────────────────── v0.16.13
  Installed LoopVectorization ──────────── v0.8.8
  Installed LLVM ───────────────────────── v1.7.0
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed Formatting ─────────────────── v0.4.1
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed CpuId ──────────────────────── v0.2.2
  Installed ArrayLayouts ───────────────── v0.3.5
  Installed LabelledArrays ─────────────── v1.2.2
  Installed OffsetArrays ───────────────── v1.1.0
  Installed Latexify ───────────────────── v0.13.5
  Installed CEnum ──────────────────────── v0.4.1
  Installed TerminalLoggers ────────────── v0.1.2
  Installed DataStructures ─────────────── v0.17.19
  Installed ChainRulesCore ─────────────── v0.9.1
  Installed RecursiveArrayTools ────────── v2.5.0
  Installed ConstructionBase ───────────── v1.0.0
  Installed ArrayInterface ─────────────── v2.9.0
  Installed MacroTools ─────────────────── v0.5.5
  Installed NaNMath ────────────────────── v0.3.3
  Installed BlockBandedMatrices ────────── v0.8.8
  Installed CommonSubexpressions ───────── v0.3.0
  Installed LaTeXStrings ───────────────── v1.1.0
  Installed BandedMatrices ─────────────── v0.15.14
  Installed BlockArrays ────────────────── v0.12.9
  Installed LeftChildRightSiblingTrees ─── v0.1.2
  Installed LoggingExtras ──────────────── v0.4.1
  Installed OrderedCollections ─────────── v1.2.0
  Installed ArnoldiMethod ──────────────── v0.0.4
  Installed StaticArrays ───────────────── v0.12.3
  Installed Combinatorics ──────────────── v1.0.2
  Installed ModelingToolkit ────────────── v3.11.0
  Installed AbstractAlgebra ────────────── v0.9.2
Updating `~/.julia/environments/v1.6/Project.toml`
  [9fdde737] + DiffEqOperators v4.10.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [c3fe647b] + AbstractAlgebra v0.9.2
  [1520ce14] + AbstractTrees v0.3.3
  [ec485272] + ArnoldiMethod v0.0.4
  [4fba245c] + ArrayInterface v2.9.0
  [4c555306] + ArrayLayouts v0.3.5
  [aae01518] + BandedMatrices v0.15.14
  [b99e7846] + BinaryProvider v0.5.10
  [8e7c35d0] + BlockArrays v0.12.9
  [ffab5731] + BlockBandedMatrices v0.8.8
  [fa961155] + CEnum v0.4.1
  [a603d957] + CanonicalTraits v0.2.1
  [d360d2e6] + ChainRulesCore v0.9.1
  [861a8166] + Combinatorics v1.0.2
  [bbf7d656] + CommonSubexpressions v0.3.0
  [34da2185] + Compat v3.12.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [88cd18e8] + ConsoleProgressMonitor v0.1.2
  [187b0558] + ConstructionBase v1.0.0
  [adafc99b] + CpuId v0.2.2
  [864edb3b] + DataStructures v0.17.19
  [2b5f629d] + DiffEqBase v6.40.0
  [c894b116] + DiffEqJump v6.9.2
  [9fdde737] + DiffEqOperators v4.10.0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [ffbed154] + DocStringExtensions v0.8.2
  [1a297f60] + FillArrays v0.8.11
  [59287772] + Formatting v0.4.1
  [f6369f11] + ForwardDiff v0.10.12
  [069b7b12] + FunctionWrappers v1.1.1
  [6b9d7cbe] + GeneralizedGenerated v0.2.4
  [d25df0c9] + Inflate v0.1.2
  [42fd0dbc] + IterativeSolvers v0.8.4
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [b14d175d] + JuliaVariables v0.2.0
  [929cbde3] + LLVM v1.7.0
  [b964fa9f] + LaTeXStrings v1.1.0
  [2ee39098] + LabelledArrays v1.2.2
  [23fbe1c1] + Latexify v0.13.5
  [5078a376] + LazyArrays v0.16.13
  [1d6d02ad] + LeftChildRightSiblingTrees v0.1.2
  [093fc24a] + LightGraphs v1.3.3
  [e6f89c97] + LoggingExtras v0.4.1
  [bdcacae8] + LoopVectorization v0.8.8
  [d8e11817] + MLStyle v0.3.1
  [1914dd2f] + MacroTools v0.5.5
  [a3b82374] + MatrixFactorizations v0.4.1
  [961ee093] + ModelingToolkit v3.11.0
  [46d2c3a1] + MuladdMacro v0.2.2
  [872c559c] + NNlib v0.6.6
  [77ba4419] + NaNMath v0.3.3
  [71a1bf82] + NameResolution v0.1.3
  [6fe1bfb0] + OffsetArrays v1.1.0
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.2.0
  [d96e819e] + Parameters v0.12.1
  [e409e4f3] + PoissonRandom v0.4.0
  [8162dcfd] + PrettyPrint v0.1.0
  [33c8b6b6] + ProgressLogging v0.1.3
  [92933f4c] + ProgressMeter v1.3.1
  [e6cf234a] + RandomNumbers v1.4.0
  [3cdcf5f2] + RecipesBase v1.0.1
  [731186ca] + RecursiveArrayTools v2.5.0
  [f2c3362d] + RecursiveFactorization v0.1.3
  [ae029012] + Requires v1.0.1
  [f2b01f46] + Roots v1.0.2
  [21efa798] + SIMDPirates v0.8.13
  [476501e8] + SLEEFPirates v0.5.1
  [1bc83da4] + SafeTestsets v0.0.1
  [699a6c99] + SimpleTraits v0.9.2
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.3
  [d1185830] + SymbolicUtils v0.4.2
  [3783bdb8] + TableTraits v1.0.0
  [5d786b92] + TerminalLoggers v0.1.2
  [a759f4b9] + TimerOutputs v0.5.6
  [a2a6695c] + TreeViews v0.3.0
  [3a884ed6] + UnPack v1.0.1
  [1986cc42] + Unitful v1.3.0
  [3d5dd08c] + VectorizationBase v0.12.16
  [700de1a5] + ZygoteRules v0.2.0
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building VectorizationBase → `~/.julia/packages/VectorizationBase/v6esN/deps/build.log`
   Building SLEEFPirates ─────→ `~/.julia/packages/SLEEFPirates/kmfoV/deps/build.log`
   Building NNlib ────────────→ `~/.julia/packages/NNlib/FAI3o/deps/build.log`
    Testing DiffEqOperators
Status `/tmp/jl_OtZ6uN/Project.toml`
  [aae01518] BandedMatrices v0.15.14
  [ffab5731] BlockBandedMatrices v0.8.8
  [2b5f629d] DiffEqBase v6.40.0
  [9fdde737] DiffEqOperators v4.10.0
  [1a297f60] FillArrays v0.8.11
  [f6369f11] ForwardDiff v0.10.12
  [5078a376] LazyArrays v0.16.13
  [961ee093] ModelingToolkit v3.11.0
  [872c559c] NNlib v0.6.6
  [1dea7af3] OrdinaryDiffEq v5.41.0
  [d96e819e] Parameters v0.12.1
  [1bc83da4] SafeTestsets v0.0.1
  [7ccca996] SimpleDifferentialOperators v0.6.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.3
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [4607b0f0] SuiteSparse
  [8dfed614] Test
Status `/tmp/jl_OtZ6uN/Manifest.toml`
  [c3fe647b] AbstractAlgebra v0.9.2
  [1520ce14] AbstractTrees v0.3.3
  [79e6a3ab] Adapt v2.0.2
  [ec485272] ArnoldiMethod v0.0.4
  [4fba245c] ArrayInterface v2.9.0
  [4c555306] ArrayLayouts v0.3.5
  [aae01518] BandedMatrices v0.15.14
  [b99e7846] BinaryProvider v0.5.10
  [8e7c35d0] BlockArrays v0.12.9
  [ffab5731] BlockBandedMatrices v0.8.8
  [fa961155] CEnum v0.4.1
  [a603d957] CanonicalTraits v0.2.1
  [d360d2e6] ChainRulesCore v0.9.1
  [861a8166] Combinatorics v1.0.2
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.12.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [88cd18e8] ConsoleProgressMonitor v0.1.2
  [187b0558] ConstructionBase v1.0.0
  [adafc99b] CpuId v0.2.2
  [864edb3b] DataStructures v0.17.19
  [2b5f629d] DiffEqBase v6.40.0
  [c894b116] DiffEqJump v6.9.2
  [9fdde737] DiffEqOperators v4.10.0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [b4f34e82] Distances v0.9.0
  [ffbed154] DocStringExtensions v0.8.2
  [d4d017d3] ExponentialUtilities v1.7.0
  [1a297f60] FillArrays v0.8.11
  [6a86dc24] FiniteDiff v2.3.2
  [59287772] Formatting v0.4.1
  [f6369f11] ForwardDiff v0.10.12
  [069b7b12] FunctionWrappers v1.1.1
  [6b9d7cbe] GeneralizedGenerated v0.2.4
  [01680d73] GenericSVD v0.3.0
  [d25df0c9] Inflate v0.1.2
  [42fd0dbc] IterativeSolvers v0.8.4
  [82899510] IteratorInterfaceExtensions v1.0.0
  [b14d175d] JuliaVariables v0.2.0
  [929cbde3] LLVM v1.7.0
  [b964fa9f] LaTeXStrings v1.1.0
  [2ee39098] LabelledArrays v1.2.2
  [23fbe1c1] Latexify v0.13.5
  [5078a376] LazyArrays v0.16.13
  [1d6d02ad] LeftChildRightSiblingTrees v0.1.2
  [093fc24a] LightGraphs v1.3.3
  [d3d80556] LineSearches v7.0.1
  [e6f89c97] LoggingExtras v0.4.1
  [bdcacae8] LoopVectorization v0.8.8
  [d8e11817] MLStyle v0.3.1
  [1914dd2f] MacroTools v0.5.5
  [a3b82374] MatrixFactorizations v0.4.1
  [961ee093] ModelingToolkit v3.11.0
  [46d2c3a1] MuladdMacro v0.2.2
  [d41bc354] NLSolversBase v7.6.1
  [2774e3e8] NLsolve v4.4.0
  [872c559c] NNlib v0.6.6
  [77ba4419] NaNMath v0.3.3
  [71a1bf82] NameResolution v0.1.3
  [6fe1bfb0] OffsetArrays v1.1.0
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.2.0
  [1dea7af3] OrdinaryDiffEq v5.41.0
  [d96e819e] Parameters v0.12.1
  [e409e4f3] PoissonRandom v0.4.0
  [8162dcfd] PrettyPrint v0.1.0
  [33c8b6b6] ProgressLogging v0.1.3
  [92933f4c] ProgressMeter v1.3.1
  [e6cf234a] RandomNumbers v1.4.0
  [3cdcf5f2] RecipesBase v1.0.1
  [731186ca] RecursiveArrayTools v2.5.0
  [f2c3362d] RecursiveFactorization v0.1.3
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [f2b01f46] Roots v1.0.2
  [21efa798] SIMDPirates v0.8.13
  [476501e8] SLEEFPirates v0.5.1
  [1bc83da4] SafeTestsets v0.0.1
  [7ccca996] SimpleDifferentialOperators v0.6.1
  [699a6c99] SimpleTraits v0.9.2
  [47a9eef4] SparseDiffTools v1.9.0
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.3
  [d1185830] SymbolicUtils v0.4.2
  [3783bdb8] TableTraits v1.0.0
  [5d786b92] TerminalLoggers v0.1.2
  [a759f4b9] TimerOutputs v0.5.6
  [a2a6695c] TreeViews v0.3.0
  [3a884ed6] UnPack v1.0.1
  [1986cc42] Unitful v1.3.0
  [3d5dd08c] VectorizationBase v0.12.16
  [19fa3120] VertexSafeGraphs v0.1.2
  [700de1a5] ZygoteRules v0.2.0
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary:   | Pass  Total
Utilities Tests |    4      4
565.429876 seconds (45.97 M allocations: 2.803 GiB, 0.45% gc time)
Test Summary:   | Pass  Total
Poisson example |    1      1
  9.674253 seconds (9.27 M allocations: 514.783 MiB, 4.04% gc time)
Test Summary:         | Pass  Total
Heat equation example |    1      1
205.854172 seconds (24.78 M allocations: 5.266 GiB, 0.98% gc time)
Test Summary:                      | Pass  Total
Robin Boundary Condition Operators |  124    124
  4.196196 seconds (2.89 M allocations: 156.256 MiB, 4.25% gc time)
Test Summary:              | Pass  Broken  Total
JacVec Operators Interface |   34       4     38
138.601299 seconds (88.46 M allocations: 4.891 GiB, 3.66% gc time)
Test Summary:                 | Pass  Total
Composite Operators Interface |   12     12
  5.941725 seconds (4.89 M allocations: 261.703 MiB, 4.19% gc time)
Test Summary:                   | Pass  Broken  Total
BC and Coefficient Compositions |  103       6    109
 57.625010 seconds (22.75 M allocations: 1.223 GiB, 1.90% gc time)
Test Summary:                  | Pass  Total
Derivative Operators Interface | 1080   1080
 62.625754 seconds (192.59 M allocations: 10.286 GiB, 16.40% gc time)
Test Summary:                        | Pass  Total
Ghost Derivative Operators Interface |    4      4
  0.096836 seconds (29.68 k allocations: 1.910 MiB)
Test Summary:                         | Pass  Total
Validate Regular Derivative Operators |   30     30
  8.984431 seconds (5.54 M allocations: 313.835 MiB, 3.61% gc time)
Test Summary:                          | Pass  Total
Validate and Compare Generic Operators |   72     72
  8.833898 seconds (3.84 M allocations: 379.580 MiB, 3.38% gc time)
Test Summary:                                 |   Pass   Total
Validate Boundary Padded Array Concretization | 106331  106331
 29.354688 seconds (27.06 M allocations: 1.434 GiB, 3.90% gc time)
┌ Warning: Assignment to `A` in soft scope is ambiguous because a global variable by the same name exists: `A` will be treated as a new local. Disambiguate by using `local A` to suppress this warning or `global A` to assign to the existing global variable.
└ @ ~/.julia/packages/DiffEqOperators/QiB3a/test/MultiDimBC_test.jl:84
Test Summary:                                  | Pass  Broken  Total
Validate Higher Dimensional Boundary Extension |  351       3    354
 93.328387 seconds (90.33 M allocations: 4.646 GiB, 5.09% gc time)
Test Summary:         | Pass  Total
Matrix-Free Operators |   34     34
 25.731680 seconds (25.12 M allocations: 1.412 GiB, 4.16% gc time)
Test Summary:                    | Pass  Total
JacVec Operator Integration Test |    2      2
640.173246 seconds (31.81 M allocations: 3.716 GiB, 1.54% gc time)
Test Summary: | Pass  Total
Convolutions  |    6      6
  0.665425 seconds (341.10 k allocations: 20.558 MiB)
Test Summary:             |   Pass   Total
Differentiation Dimension | 476861  476861
 24.624949 seconds (19.27 M allocations: 1.084 GiB, 4.92% gc time)
First Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:18
  Test threw exception
  Expression: L1 * M ≈ Array(L1, size(M)) * vec(M) ≈ sparse(L1, size(M)) * M ≈ BandedMatrix(L1, size(M)) * M ≈ BandedBlockBandedMatrix(L1, size(M)) * M
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:18
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:12
  
First Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:19
  Test threw exception
  Expression: L2 * M ≈ Array(L2, size(M)) * vec(M) ≈ sparse(L2, size(M)) * M ≈ BandedMatrix(L2, size(M)) * M ≈ BandedBlockBandedMatrix(L2, size(M)) * M
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:19
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:12
  
First Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:20
  Test threw exception
  Expression: L3 * M ≈ Array(L3, size(M)) * vec(M) ≈ sparse(L3, size(M)) * M ≈ BandedMatrix(L3, size(M)) * M ≈ BandedBlockBandedMatrix(L3, size(M)) * M
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:20
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:12
  
First Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:24
  Test threw exception
  Expression: vec(L1 * M) ≈ Array(L1, size(M)) * vec(M) ≈ sparse(L1, size(M)) * vec(M) ≈ BandedMatrix(L1, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L1, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:24
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:12
  
First Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:25
  Test threw exception
  Expression: vec(L2 * M) ≈ Array(L2, size(M)) * vec(M) ≈ sparse(L2, size(M)) * vec(M) ≈ BandedMatrix(L2, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L2, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:25
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:12
  
First Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:26
  Test threw exception
  Expression: vec(L3 * M) ≈ Array(L3, size(M)) * vec(M) ≈ sparse(L3, size(M)) * vec(M) ≈ BandedMatrix(L3, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L3, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:26
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:12
  
Second Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:38
  Test threw exception
  Expression: vec(L1 * M) ≈ Array(L1, size(M)) * vec(M) ≈ sparse(L1, size(M)) * vec(M) ≈ BandedMatrix(L1, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L1, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:38
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:32
  
Second Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:39
  Test threw exception
  Expression: vec(L2 * M) ≈ Array(L2, size(M)) * vec(M) ≈ sparse(L2, size(M)) * vec(M) ≈ BandedMatrix(L2, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L2, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:39
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:32
  
Second Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:40
  Test threw exception
  Expression: vec(L3 * M) ≈ Array(L3, size(M)) * vec(M) ≈ sparse(L3, size(M)) * vec(M) ≈ BandedMatrix(L3, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L3, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:40
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:32
  
Second Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:44
  Test threw exception
  Expression: vec(L1 * M) ≈ Array(L1, size(M)) * vec(M) ≈ sparse(L1, size(M)) * vec(M) ≈ BandedMatrix(L1, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L1, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:44
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:32
  
Second Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:45
  Test threw exception
  Expression: vec(L2 * M) ≈ Array(L2, size(M)) * vec(M) ≈ sparse(L2, size(M)) * vec(M) ≈ BandedMatrix(L2, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L2, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:45
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:32
  
Second Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:46
  Test threw exception
  Expression: vec(L3 * M) ≈ Array(L3, size(M)) * vec(M) ≈ sparse(L3, size(M)) * vec(M) ≈ BandedMatrix(L3, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L3, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:46
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:32
  
Second Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:50
  Test threw exception
  Expression: vec(L1 * M) ≈ Array(L1, size(M)) * vec(M) ≈ sparse(L1, size(M)) * vec(M) ≈ BandedMatrix(L1, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L1, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:50
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:32
  
Second Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:51
  Test threw exception
  Expression: vec(L2 * M) ≈ Array(L2, size(M)) * vec(M) ≈ sparse(L2, size(M)) * vec(M) ≈ BandedMatrix(L2, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L2, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:51
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:32
  
Second Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:52
  Test threw exception
  Expression: vec(L3 * M) ≈ Array(L3, size(M)) * vec(M) ≈ sparse(L3, size(M)) * vec(M) ≈ BandedMatrix(L3, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L3, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:52
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:32
  
Third Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:65
  Test threw exception
  Expression: vec(L1 * M) ≈ Array(L1, size(M)) * vec(M) ≈ sparse(L1, size(M)) * vec(M) ≈ BandedMatrix(L1, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L1, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:65
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:58
  
Third Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:66
  Test threw exception
  Expression: vec(L2 * M) ≈ Array(L2, size(M)) * vec(M) ≈ sparse(L2, size(M)) * vec(M) ≈ BandedMatrix(L2, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L2, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:66
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:58
  
Third Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:67
  Test threw exception
  Expression: vec(L3 * M) ≈ Array(L3, size(M)) * vec(M) ≈ sparse(L3, size(M)) * vec(M) ≈ BandedMatrix(L3, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L3, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:67
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:58
  
Third Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:71
  Test threw exception
  Expression: vec(L1 * M) ≈ Array(L1, size(M)) * vec(M) ≈ sparse(L1, size(M)) * vec(M) ≈ BandedMatrix(L1, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L1, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:71
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:58
  
Third Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:72
  Test threw exception
  Expression: vec(L2 * M) ≈ Array(L2, size(M)) * vec(M) ≈ sparse(L2, size(M)) * vec(M) ≈ BandedMatrix(L2, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L2, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:72
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:58
  
Third Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:73
  Test threw exception
  Expression: vec(L3 * M) ≈ Array(L3, size(M)) * vec(M) ≈ sparse(L3, size(M)) * vec(M) ≈ BandedMatrix(L3, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L3, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:73
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:58
  
Third Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:77
  Test threw exception
  Expression: vec(L1 * M) ≈ Array(L1, size(M)) * vec(M) ≈ sparse(L1, size(M)) * vec(M) ≈ BandedMatrix(L1, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L1, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:77
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:58
  
Third Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:78
  Test threw exception
  Expression: vec(L2 * M) ≈ Array(L2, size(M)) * vec(M) ≈ sparse(L2, size(M)) * vec(M) ≈ BandedMatrix(L2, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L2, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:78
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:58
  
Third Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:79
  Test threw exception
  Expression: vec(L3 * M) ≈ Array(L3, size(M)) * vec(M) ≈ sparse(L3, size(M)) * vec(M) ≈ BandedMatrix(L3, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L3, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:79
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:58
  
Fifth Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:91
  Test threw exception
  Expression: vec(L1 * M) ≈ Array(L1, size(M)) * vec(M) ≈ sparse(L1, size(M)) * vec(M) ≈ BandedMatrix(L1, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L1, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:91
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:85
  
Fifth Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:92
  Test threw exception
  Expression: vec(L2 * M) ≈ Array(L2, size(M)) * vec(M) ≈ sparse(L2, size(M)) * vec(M) ≈ BandedMatrix(L2, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L2, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:92
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:85
  
Fifth Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:93
  Test threw exception
  Expression: vec(L3 * M) ≈ Array(L3, size(M)) * vec(M) ≈ sparse(L3, size(M)) * vec(M) ≈ BandedMatrix(L3, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L3, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:93
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:85
  
Fifth Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:97
  Test threw exception
  Expression: vec(L1 * M) ≈ Array(L1, size(M)) * vec(M) ≈ sparse(L1, size(M)) * vec(M) ≈ BandedMatrix(L1, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L1, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:97
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:85
  
Fifth Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:98
  Test threw exception
  Expression: vec(L2 * M) ≈ Array(L2, size(M)) * vec(M) ≈ sparse(L2, size(M)) * vec(M) ≈ BandedMatrix(L2, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L2, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:98
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:85
  
Fifth Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:99
  Test threw exception
  Expression: vec(L3 * M) ≈ Array(L3, size(M)) * vec(M) ≈ sparse(L3, size(M)) * vec(M) ≈ BandedMatrix(L3, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L3, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:99
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:85
  
Fifth Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:103
  Test threw exception
  Expression: vec(L1 * M) ≈ Array(L1, size(M)) * vec(M) ≈ sparse(L1, size(M)) * vec(M) ≈ BandedMatrix(L1, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L1, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:103
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:85
  
Fifth Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:104
  Test threw exception
  Expression: vec(L2 * M) ≈ Array(L2, size(M)) * vec(M) ≈ sparse(L2, size(M)) * vec(M) ≈ BandedMatrix(L2, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L2, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:104
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:85
  
Fifth Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:105
  Test threw exception
  Expression: vec(L3 * M) ≈ Array(L3, size(M)) * vec(M) ≈ sparse(L3, size(M)) * vec(M) ≈ BandedMatrix(L3, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L3, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Type{var"#s71"} where var"#s71"<:(Array{T,N} where N)) where T at array.jl:222
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    ...
  Stacktrace:
   [1] elsize(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}) at ./abstractarray.jl:153
   [2] _memory_offset(::BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}}, ::Int64) at ./abstractarray.jl:1021
   [3] unsafe_convert(::Type{Ptr{Float64}}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at ./subarray.jl:402
   [4] gbmv!(::Char, ::Int64, ::Int64, ::Int64, ::Float64, ::SubArray{Float64,2,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:780
   [5] banded_gbmv!(::Char, ::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:20
   [6] _banded_gbmv! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:29 [inlined]
   [7] _banded_muladd!(::Float64, ::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, ::Float64, ::SubArray{Float64,1,BlockArrays.PseudoBlockArray{Float64,1,Array{Float64,1},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false}) at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:50
   [8] materialize! at /home/pkgeval/.julia/packages/BandedMatrices/JW3gn/src/generic/matmul.jl:54 [inlined]
   [9] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},Array{Float64,1}}) at /home/pkgeval/.julia/packages/BlockArrays/C4I7e/src/blocklinalg.jl:91
   [11] muladd! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto! at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize(::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.ZerosLayout,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}},Array{Float64,1},FillArrays.Zeros{Float64,1,Tuple{Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81
   [15] mul at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockArray{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},Base.OneTo{Int64}}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:105
   [18] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:85
  
Test Summary:                     | Error  Total
Higher Dimensional Concretization |    33     33
  First Dimension                 |     6      6
  Second Dimension                |     9      9
  Third Dimension                 |     9      9
  Fifth Dimension                 |     9      9
ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 33 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/runtests.jl:9
ERROR: Package DiffEqOperators errored during testing
Stacktrace:
 [1] pkgerror(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1561
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:327
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:314
 [5] #test#61 at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
 [6] test at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
 [7] #test#60 at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
 [8] test at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope at none:16
