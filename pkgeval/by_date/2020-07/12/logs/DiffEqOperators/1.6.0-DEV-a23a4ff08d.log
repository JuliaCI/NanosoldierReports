Julia Version 1.6.0-DEV.430
Commit a23a4ff08d (2020-07-11 14:53 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed LeftChildRightSiblingTrees ─── v0.1.2
  Installed ConstructionBase ───────────── v1.0.0
  Installed FunctionWrappers ───────────── v1.1.1
  Installed SimpleTraits ───────────────── v0.9.2
  Installed NameResolution ─────────────── v0.1.3
  Installed DiffEqOperators ────────────── v4.10.0
  Installed AbstractTrees ──────────────── v0.3.3
  Installed CommonSubexpressions ───────── v0.3.0
  Installed PrettyPrint ────────────────── v0.1.0
  Installed Formatting ─────────────────── v0.4.1
  Installed CEnum ──────────────────────── v0.4.1
  Installed MacroTools ─────────────────── v0.5.5
  Installed RecursiveArrayTools ────────── v2.5.0
  Installed SymbolicUtils ──────────────── v0.4.3
  Installed SLEEFPirates ───────────────── v0.5.4
  Installed DataStructures ─────────────── v0.17.19
  Installed Compat ─────────────────────── v3.13.0
  Installed VectorizationBase ──────────── v0.12.21
  Installed StaticArrays ───────────────── v0.12.4
  Installed GeneralizedGenerated ───────── v0.2.4
  Installed BlockArrays ────────────────── v0.12.10
  Installed ModelingToolkit ────────────── v3.13.0
  Installed LightGraphs ────────────────── v1.3.3
  Installed SafeTestsets ───────────────── v0.0.1
  Installed TableTraits ────────────────── v1.0.0
  Installed LoggingExtras ──────────────── v0.4.1
  Installed DiffEqJump ─────────────────── v6.9.3
  Installed ArnoldiMethod ──────────────── v0.0.4
  Installed Latexify ───────────────────── v0.13.5
  Installed Combinatorics ──────────────── v1.0.2
  Installed DiffEqBase ─────────────────── v6.40.7
  Installed DiffResults ────────────────── v1.0.2
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed PoissonRandom ──────────────── v0.4.0
  Installed DocStringExtensions ────────── v0.8.2
  Installed NaNMath ────────────────────── v0.3.3
  Installed LaTeXStrings ───────────────── v1.1.0
  Installed MuladdMacro ────────────────── v0.2.2
  Installed RecursiveFactorization ─────── v0.1.4
  Installed Roots ──────────────────────── v1.0.3
  Installed BlockBandedMatrices ────────── v0.8.10
  Installed LoopVectorization ──────────── v0.8.15
  Installed MLStyle ────────────────────── v0.3.1
  Installed ArrayInterface ─────────────── v2.9.1
  Installed Inflate ────────────────────── v0.1.2
  Installed OrderedCollections ─────────── v1.3.0
  Installed Requires ───────────────────── v1.0.1
  Installed TimerOutputs ───────────────── v0.5.6
  Installed Parameters ─────────────────── v0.12.1
  Installed Unitful ────────────────────── v1.3.0
  Installed TreeViews ──────────────────── v0.3.0
  Installed RandomNumbers ──────────────── v1.4.0
  Installed DiffRules ──────────────────── v1.0.1
  Installed ProgressLogging ────────────── v0.1.3
  Installed IterativeSolvers ───────────── v0.8.4
  Installed ProgressMeter ──────────────── v1.3.2
  Installed LazyArrays ─────────────────── v0.16.14
  Installed IteratorInterfaceExtensions ── v1.0.0
  Installed ZygoteRules ────────────────── v0.2.0
  Installed UnPack ─────────────────────── v1.0.1
  Installed TerminalLoggers ────────────── v0.1.2
  Installed ConsoleProgressMonitor ─────── v0.1.2
  Installed JuliaVariables ─────────────── v0.2.0
  Installed FillArrays ─────────────────── v0.8.12
  Installed MatrixFactorizations ───────── v0.4.1
  Installed CanonicalTraits ────────────── v0.2.1
  Installed SpecialFunctions ───────────── v0.10.3
  Installed OffsetArrays ───────────────── v1.1.1
  Installed AbstractAlgebra ────────────── v0.9.2
  Installed BandedMatrices ─────────────── v0.15.15
  Installed ForwardDiff ────────────────── v0.10.12
  Installed BinaryProvider ─────────────── v0.5.10
  Installed ChainRulesCore ─────────────── v0.9.3
  Installed RecipesBase ────────────────── v1.0.1
  Installed CpuId ──────────────────────── v0.2.2
  Installed SIMDPirates ────────────────── v0.8.13
  Installed LabelledArrays ─────────────── v1.3.0
  Installed NNlib ──────────────────────── v0.6.6
  Installed LLVM ───────────────────────── v2.0.0
  Installed ArrayLayouts ───────────────── v0.3.5
Updating `~/.julia/environments/v1.6/Project.toml`
  [9fdde737] + DiffEqOperators v4.10.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [c3fe647b] + AbstractAlgebra v0.9.2
  [1520ce14] + AbstractTrees v0.3.3
  [ec485272] + ArnoldiMethod v0.0.4
  [4fba245c] + ArrayInterface v2.9.1
  [4c555306] + ArrayLayouts v0.3.5
  [aae01518] + BandedMatrices v0.15.15
  [b99e7846] + BinaryProvider v0.5.10
  [8e7c35d0] + BlockArrays v0.12.10
  [ffab5731] + BlockBandedMatrices v0.8.10
  [fa961155] + CEnum v0.4.1
  [a603d957] + CanonicalTraits v0.2.1
  [d360d2e6] + ChainRulesCore v0.9.3
  [861a8166] + Combinatorics v1.0.2
  [bbf7d656] + CommonSubexpressions v0.3.0
  [34da2185] + Compat v3.13.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [88cd18e8] + ConsoleProgressMonitor v0.1.2
  [187b0558] + ConstructionBase v1.0.0
  [adafc99b] + CpuId v0.2.2
  [864edb3b] + DataStructures v0.17.19
  [2b5f629d] + DiffEqBase v6.40.7
  [c894b116] + DiffEqJump v6.9.3
  [9fdde737] + DiffEqOperators v4.10.0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [ffbed154] + DocStringExtensions v0.8.2
  [1a297f60] + FillArrays v0.8.12
  [59287772] + Formatting v0.4.1
  [f6369f11] + ForwardDiff v0.10.12
  [069b7b12] + FunctionWrappers v1.1.1
  [6b9d7cbe] + GeneralizedGenerated v0.2.4
  [d25df0c9] + Inflate v0.1.2
  [42fd0dbc] + IterativeSolvers v0.8.4
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [b14d175d] + JuliaVariables v0.2.0
  [929cbde3] + LLVM v2.0.0
  [b964fa9f] + LaTeXStrings v1.1.0
  [2ee39098] + LabelledArrays v1.3.0
  [23fbe1c1] + Latexify v0.13.5
  [5078a376] + LazyArrays v0.16.14
  [1d6d02ad] + LeftChildRightSiblingTrees v0.1.2
  [093fc24a] + LightGraphs v1.3.3
  [e6f89c97] + LoggingExtras v0.4.1
  [bdcacae8] + LoopVectorization v0.8.15
  [d8e11817] + MLStyle v0.3.1
  [1914dd2f] + MacroTools v0.5.5
  [a3b82374] + MatrixFactorizations v0.4.1
  [961ee093] + ModelingToolkit v3.13.0
  [46d2c3a1] + MuladdMacro v0.2.2
  [872c559c] + NNlib v0.6.6
  [77ba4419] + NaNMath v0.3.3
  [71a1bf82] + NameResolution v0.1.3
  [6fe1bfb0] + OffsetArrays v1.1.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.3.0
  [d96e819e] + Parameters v0.12.1
  [e409e4f3] + PoissonRandom v0.4.0
  [8162dcfd] + PrettyPrint v0.1.0
  [33c8b6b6] + ProgressLogging v0.1.3
  [92933f4c] + ProgressMeter v1.3.2
  [e6cf234a] + RandomNumbers v1.4.0
  [3cdcf5f2] + RecipesBase v1.0.1
  [731186ca] + RecursiveArrayTools v2.5.0
  [f2c3362d] + RecursiveFactorization v0.1.4
  [ae029012] + Requires v1.0.1
  [f2b01f46] + Roots v1.0.3
  [21efa798] + SIMDPirates v0.8.13
  [476501e8] + SLEEFPirates v0.5.4
  [1bc83da4] + SafeTestsets v0.0.1
  [699a6c99] + SimpleTraits v0.9.2
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.4
  [d1185830] + SymbolicUtils v0.4.3
  [3783bdb8] + TableTraits v1.0.0
  [5d786b92] + TerminalLoggers v0.1.2
  [a759f4b9] + TimerOutputs v0.5.6
  [a2a6695c] + TreeViews v0.3.0
  [3a884ed6] + UnPack v1.0.1
  [1986cc42] + Unitful v1.3.0
  [3d5dd08c] + VectorizationBase v0.12.21
  [700de1a5] + ZygoteRules v0.2.0
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building SLEEFPirates → `~/.julia/packages/SLEEFPirates/QzifL/deps/build.log`
   Building NNlib ───────→ `~/.julia/packages/NNlib/FAI3o/deps/build.log`
    Testing DiffEqOperators
Status `/tmp/jl_1hwfVi/Project.toml`
  [aae01518] BandedMatrices v0.15.15
  [ffab5731] BlockBandedMatrices v0.8.10
  [2b5f629d] DiffEqBase v6.40.7
  [9fdde737] DiffEqOperators v4.10.0
  [1a297f60] FillArrays v0.8.12
  [f6369f11] ForwardDiff v0.10.12
  [5078a376] LazyArrays v0.16.14
  [961ee093] ModelingToolkit v3.13.0
  [872c559c] NNlib v0.6.6
  [1dea7af3] OrdinaryDiffEq v5.41.0
  [d96e819e] Parameters v0.12.1
  [1bc83da4] SafeTestsets v0.0.1
  [7ccca996] SimpleDifferentialOperators v0.6.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [4607b0f0] SuiteSparse
  [8dfed614] Test
Status `/tmp/jl_1hwfVi/Manifest.toml`
  [c3fe647b] AbstractAlgebra v0.9.2
  [1520ce14] AbstractTrees v0.3.3
  [79e6a3ab] Adapt v2.0.2
  [ec485272] ArnoldiMethod v0.0.4
  [4fba245c] ArrayInterface v2.9.1
  [4c555306] ArrayLayouts v0.3.5
  [aae01518] BandedMatrices v0.15.15
  [b99e7846] BinaryProvider v0.5.10
  [8e7c35d0] BlockArrays v0.12.10
  [ffab5731] BlockBandedMatrices v0.8.10
  [fa961155] CEnum v0.4.1
  [a603d957] CanonicalTraits v0.2.1
  [d360d2e6] ChainRulesCore v0.9.3
  [861a8166] Combinatorics v1.0.2
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.13.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [88cd18e8] ConsoleProgressMonitor v0.1.2
  [187b0558] ConstructionBase v1.0.0
  [adafc99b] CpuId v0.2.2
  [864edb3b] DataStructures v0.17.19
  [2b5f629d] DiffEqBase v6.40.7
  [c894b116] DiffEqJump v6.9.3
  [9fdde737] DiffEqOperators v4.10.0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [b4f34e82] Distances v0.9.0
  [ffbed154] DocStringExtensions v0.8.2
  [d4d017d3] ExponentialUtilities v1.7.0
  [1a297f60] FillArrays v0.8.12
  [6a86dc24] FiniteDiff v2.4.1
  [59287772] Formatting v0.4.1
  [f6369f11] ForwardDiff v0.10.12
  [069b7b12] FunctionWrappers v1.1.1
  [6b9d7cbe] GeneralizedGenerated v0.2.4
  [01680d73] GenericSVD v0.3.0
  [d25df0c9] Inflate v0.1.2
  [42fd0dbc] IterativeSolvers v0.8.4
  [82899510] IteratorInterfaceExtensions v1.0.0
  [b14d175d] JuliaVariables v0.2.0
  [929cbde3] LLVM v2.0.0
  [b964fa9f] LaTeXStrings v1.1.0
  [2ee39098] LabelledArrays v1.3.0
  [23fbe1c1] Latexify v0.13.5
  [5078a376] LazyArrays v0.16.14
  [1d6d02ad] LeftChildRightSiblingTrees v0.1.2
  [093fc24a] LightGraphs v1.3.3
  [d3d80556] LineSearches v7.0.1
  [e6f89c97] LoggingExtras v0.4.1
  [bdcacae8] LoopVectorization v0.8.15
  [d8e11817] MLStyle v0.3.1
  [1914dd2f] MacroTools v0.5.5
  [a3b82374] MatrixFactorizations v0.4.1
  [961ee093] ModelingToolkit v3.13.0
  [46d2c3a1] MuladdMacro v0.2.2
  [d41bc354] NLSolversBase v7.6.1
  [2774e3e8] NLsolve v4.4.0
  [872c559c] NNlib v0.6.6
  [77ba4419] NaNMath v0.3.3
  [71a1bf82] NameResolution v0.1.3
  [6fe1bfb0] OffsetArrays v1.1.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.3.0
  [1dea7af3] OrdinaryDiffEq v5.41.0
  [d96e819e] Parameters v0.12.1
  [e409e4f3] PoissonRandom v0.4.0
  [8162dcfd] PrettyPrint v0.1.0
  [33c8b6b6] ProgressLogging v0.1.3
  [92933f4c] ProgressMeter v1.3.2
  [e6cf234a] RandomNumbers v1.4.0
  [3cdcf5f2] RecipesBase v1.0.1
  [731186ca] RecursiveArrayTools v2.5.0
  [f2c3362d] RecursiveFactorization v0.1.4
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [f2b01f46] Roots v1.0.3
  [21efa798] SIMDPirates v0.8.13
  [476501e8] SLEEFPirates v0.5.4
  [1bc83da4] SafeTestsets v0.0.1
  [7ccca996] SimpleDifferentialOperators v0.6.1
  [699a6c99] SimpleTraits v0.9.2
  [47a9eef4] SparseDiffTools v1.9.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [d1185830] SymbolicUtils v0.4.3
  [3783bdb8] TableTraits v1.0.0
  [5d786b92] TerminalLoggers v0.1.2
  [a759f4b9] TimerOutputs v0.5.6
  [a2a6695c] TreeViews v0.3.0
  [3a884ed6] UnPack v1.0.1
  [1986cc42] Unitful v1.3.0
  [3d5dd08c] VectorizationBase v0.12.21
  [19fa3120] VertexSafeGraphs v0.1.2
  [700de1a5] ZygoteRules v0.2.0
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary:   | Pass  Total
Utilities Tests |    4      4
585.641321 seconds (28.21 M allocations: 1.892 GiB, 0.46% gc time)
Test Summary:   | Pass  Total
Poisson example |    1      1
 13.775548 seconds (10.27 M allocations: 587.277 MiB, 2.99% gc time)
Test Summary:         | Pass  Total
Heat equation example |    1      1
213.304020 seconds (21.68 M allocations: 1.306 GiB, 0.54% gc time)
Test Summary:                      | Pass  Total
Robin Boundary Condition Operators |  124    124
  7.787079 seconds (4.63 M allocations: 273.997 MiB, 1.86% gc time)
Test Summary:              | Pass  Broken  Total
JacVec Operators Interface |   34       4     38
151.079466 seconds (108.12 M allocations: 6.618 GiB, 4.65% gc time)
Test Summary:                 | Pass  Total
Composite Operators Interface |   12     12
  6.316693 seconds (4.82 M allocations: 271.391 MiB, 2.80% gc time)
WARNING: Method definition f(Any) in module ##262 at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/bc_coeff_compositions.jl:328 overwritten at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/bc_coeff_compositions.jl:371.
WARNING: Method definition f2(Any) in module ##262 at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/bc_coeff_compositions.jl:329 overwritten at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/bc_coeff_compositions.jl:372.
Test Summary:                   | Pass  Broken  Total
BC and Coefficient Compositions |  103       6    109
 66.401501 seconds (25.30 M allocations: 1.415 GiB, 2.76% gc time)
Test Summary:                  | Pass  Total
Derivative Operators Interface | 1080   1080
 65.840945 seconds (195.80 M allocations: 10.506 GiB, 15.43% gc time)
Test Summary:                        | Pass  Total
Ghost Derivative Operators Interface |    4      4
  0.076514 seconds (30.41 k allocations: 1.954 MiB)
Test Summary:                         | Pass  Total
Validate Regular Derivative Operators |   30     30
  8.120121 seconds (6.17 M allocations: 351.531 MiB)
Test Summary:                          | Pass  Total
Validate and Compare Generic Operators |   72     72
  6.958655 seconds (4.13 M allocations: 396.782 MiB, 3.51% gc time)
Test Summary:                                 |  Pass  Total
Validate Boundary Padded Array Concretization | 76655  76655
 23.640147 seconds (27.85 M allocations: 1.501 GiB, 2.77% gc time)
┌ Warning: Assignment to `A` in soft scope is ambiguous because a global variable by the same name exists: `A` will be treated as a new local. Disambiguate by using `local A` to suppress this warning or `global A` to assign to the existing global variable.
└ @ ~/.julia/packages/DiffEqOperators/QiB3a/test/MultiDimBC_test.jl:84
Test Summary:                                  | Pass  Broken  Total
Validate Higher Dimensional Boundary Extension |  351       3    354
 72.280082 seconds (99.38 M allocations: 5.221 GiB, 2.88% gc time)
Test Summary:         | Pass  Total
Matrix-Free Operators |   34     34
 26.295163 seconds (35.18 M allocations: 2.179 GiB, 4.96% gc time)
Test Summary:                    | Pass  Total
JacVec Operator Integration Test |    2      2
447.858971 seconds (35.32 M allocations: 4.033 GiB, 1.31% gc time)
Test Summary: | Pass  Total
Convolutions  |    6      6
  0.615232 seconds (352.94 k allocations: 21.305 MiB, 22.28% gc time)
Test Summary:             |   Pass   Total
Differentiation Dimension | 476861  476861
 13.535977 seconds (22.43 M allocations: 1.305 GiB, 3.62% gc time)
First Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:18
  Test threw exception
  Expression: L1 * M ≈ Array(L1, size(M)) * vec(M) ≈ sparse(L1, size(M)) * M ≈ BandedMatrix(L1, size(M)) * M ≈ BandedBlockBandedMatrix(L1, size(M)) * M
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:18
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:12
  
First Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:19
  Test threw exception
  Expression: L2 * M ≈ Array(L2, size(M)) * vec(M) ≈ sparse(L2, size(M)) * M ≈ BandedMatrix(L2, size(M)) * M ≈ BandedBlockBandedMatrix(L2, size(M)) * M
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:19
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:12
  
First Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:20
  Test threw exception
  Expression: L3 * M ≈ Array(L3, size(M)) * vec(M) ≈ sparse(L3, size(M)) * M ≈ BandedMatrix(L3, size(M)) * M ≈ BandedBlockBandedMatrix(L3, size(M)) * M
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:20
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:12
  
First Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:24
  Test threw exception
  Expression: vec(L1 * M) ≈ Array(L1, size(M)) * vec(M) ≈ sparse(L1, size(M)) * vec(M) ≈ BandedMatrix(L1, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L1, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:24
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:12
  
First Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:25
  Test threw exception
  Expression: vec(L2 * M) ≈ Array(L2, size(M)) * vec(M) ≈ sparse(L2, size(M)) * vec(M) ≈ BandedMatrix(L2, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L2, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:25
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:12
  
First Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:26
  Test threw exception
  Expression: vec(L3 * M) ≈ Array(L3, size(M)) * vec(M) ≈ sparse(L3, size(M)) * vec(M) ≈ BandedMatrix(L3, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L3, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:26
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:12
  
Second Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:38
  Test threw exception
  Expression: vec(L1 * M) ≈ Array(L1, size(M)) * vec(M) ≈ sparse(L1, size(M)) * vec(M) ≈ BandedMatrix(L1, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L1, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:38
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:32
  
Second Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:39
  Test threw exception
  Expression: vec(L2 * M) ≈ Array(L2, size(M)) * vec(M) ≈ sparse(L2, size(M)) * vec(M) ≈ BandedMatrix(L2, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L2, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:39
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:32
  
Second Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:40
  Test threw exception
  Expression: vec(L3 * M) ≈ Array(L3, size(M)) * vec(M) ≈ sparse(L3, size(M)) * vec(M) ≈ BandedMatrix(L3, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L3, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:40
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:32
  
Second Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:44
  Test threw exception
  Expression: vec(L1 * M) ≈ Array(L1, size(M)) * vec(M) ≈ sparse(L1, size(M)) * vec(M) ≈ BandedMatrix(L1, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L1, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:44
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:32
  
Second Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:45
  Test threw exception
  Expression: vec(L2 * M) ≈ Array(L2, size(M)) * vec(M) ≈ sparse(L2, size(M)) * vec(M) ≈ BandedMatrix(L2, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L2, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:45
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:32
  
Second Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:46
  Test threw exception
  Expression: vec(L3 * M) ≈ Array(L3, size(M)) * vec(M) ≈ sparse(L3, size(M)) * vec(M) ≈ BandedMatrix(L3, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L3, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:46
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:32
  
Second Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:50
  Test threw exception
  Expression: vec(L1 * M) ≈ Array(L1, size(M)) * vec(M) ≈ sparse(L1, size(M)) * vec(M) ≈ BandedMatrix(L1, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L1, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:50
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:32
  
Second Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:51
  Test threw exception
  Expression: vec(L2 * M) ≈ Array(L2, size(M)) * vec(M) ≈ sparse(L2, size(M)) * vec(M) ≈ BandedMatrix(L2, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L2, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:51
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:32
  
Second Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:52
  Test threw exception
  Expression: vec(L3 * M) ≈ Array(L3, size(M)) * vec(M) ≈ sparse(L3, size(M)) * vec(M) ≈ BandedMatrix(L3, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L3, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:52
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:32
  
Third Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:65
  Test threw exception
  Expression: vec(L1 * M) ≈ Array(L1, size(M)) * vec(M) ≈ sparse(L1, size(M)) * vec(M) ≈ BandedMatrix(L1, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L1, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:65
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:58
  
Third Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:66
  Test threw exception
  Expression: vec(L2 * M) ≈ Array(L2, size(M)) * vec(M) ≈ sparse(L2, size(M)) * vec(M) ≈ BandedMatrix(L2, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L2, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:66
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:58
  
Third Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:67
  Test threw exception
  Expression: vec(L3 * M) ≈ Array(L3, size(M)) * vec(M) ≈ sparse(L3, size(M)) * vec(M) ≈ BandedMatrix(L3, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L3, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:67
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:58
  
Third Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:71
  Test threw exception
  Expression: vec(L1 * M) ≈ Array(L1, size(M)) * vec(M) ≈ sparse(L1, size(M)) * vec(M) ≈ BandedMatrix(L1, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L1, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:71
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:58
  
Third Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:72
  Test threw exception
  Expression: vec(L2 * M) ≈ Array(L2, size(M)) * vec(M) ≈ sparse(L2, size(M)) * vec(M) ≈ BandedMatrix(L2, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L2, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:72
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:58
  
Third Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:73
  Test threw exception
  Expression: vec(L3 * M) ≈ Array(L3, size(M)) * vec(M) ≈ sparse(L3, size(M)) * vec(M) ≈ BandedMatrix(L3, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L3, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:73
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:58
  
Third Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:77
  Test threw exception
  Expression: vec(L1 * M) ≈ Array(L1, size(M)) * vec(M) ≈ sparse(L1, size(M)) * vec(M) ≈ BandedMatrix(L1, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L1, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:77
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:58
  
Third Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:78
  Test threw exception
  Expression: vec(L2 * M) ≈ Array(L2, size(M)) * vec(M) ≈ sparse(L2, size(M)) * vec(M) ≈ BandedMatrix(L2, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L2, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:78
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:58
  
Third Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:79
  Test threw exception
  Expression: vec(L3 * M) ≈ Array(L3, size(M)) * vec(M) ≈ sparse(L3, size(M)) * vec(M) ≈ BandedMatrix(L3, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L3, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:79
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:58
  
Fifth Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:91
  Test threw exception
  Expression: vec(L1 * M) ≈ Array(L1, size(M)) * vec(M) ≈ sparse(L1, size(M)) * vec(M) ≈ BandedMatrix(L1, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L1, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:91
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:85
  
Fifth Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:92
  Test threw exception
  Expression: vec(L2 * M) ≈ Array(L2, size(M)) * vec(M) ≈ sparse(L2, size(M)) * vec(M) ≈ BandedMatrix(L2, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L2, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:92
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:85
  
Fifth Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:93
  Test threw exception
  Expression: vec(L3 * M) ≈ Array(L3, size(M)) * vec(M) ≈ sparse(L3, size(M)) * vec(M) ≈ BandedMatrix(L3, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L3, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:93
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:85
  
Fifth Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:97
  Test threw exception
  Expression: vec(L1 * M) ≈ Array(L1, size(M)) * vec(M) ≈ sparse(L1, size(M)) * vec(M) ≈ BandedMatrix(L1, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L1, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:97
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:85
  
Fifth Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:98
  Test threw exception
  Expression: vec(L2 * M) ≈ Array(L2, size(M)) * vec(M) ≈ sparse(L2, size(M)) * vec(M) ≈ BandedMatrix(L2, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L2, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:98
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:85
  
Fifth Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:99
  Test threw exception
  Expression: vec(L3 * M) ≈ Array(L3, size(M)) * vec(M) ≈ sparse(L3, size(M)) * vec(M) ≈ BandedMatrix(L3, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L3, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:99
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:85
  
Fifth Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:103
  Test threw exception
  Expression: vec(L1 * M) ≈ Array(L1, size(M)) * vec(M) ≈ sparse(L1, size(M)) * vec(M) ≈ BandedMatrix(L1, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L1, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:103
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:85
  
Fifth Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:104
  Test threw exception
  Expression: vec(L2 * M) ≈ Array(L2, size(M)) * vec(M) ≈ sparse(L2, size(M)) * vec(M) ≈ BandedMatrix(L2, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L2, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:104
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:85
  
Fifth Dimension: Error During Test at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:105
  Test threw exception
  Expression: vec(L3 * M) ≈ Array(L3, size(M)) * vec(M) ≈ sparse(L3, size(M)) * vec(M) ≈ BandedMatrix(L3, size(M)) * vec(M) ≈ BandedBlockBandedMatrix(L3, size(M)) * vec(M)
  MethodError: no method matching elsize(::Type{BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}})
  Closest candidates are:
    elsize(!Matched::Base.CodeUnits{T,S} where S<:AbstractString) where T at strings/basic.jl:738
    elsize(!Matched::Random.UnsafeView{T}) where T at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Random/src/RNGs.jl:440
    elsize(!Matched::AbstractArray) at abstractarray.jl:153
    ...
  Stacktrace:
    [1] elsize(A::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}})
      @ Base ./abstractarray.jl:153
    [2] _memory_offset(x::BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}}, I::Int64)
      @ Base ./abstractarray.jl:1021
    [3] unsafe_convert(#unused#::Type{Ptr{Float64}}, V::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ Base ./subarray.jl:402
    [4] gbmv!(trans::Char, m::Int64, kl::Int64, ku::Int64, alpha::Float64, A::SubArray{Float64,2,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, beta::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ LinearAlgebra.BLAS /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/blas.jl:784
    [5] banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:20
    [6] _banded_gbmv!(tA::Char, α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:29
    [7] _banded_muladd!(α::Float64, A::SubArray{Float64,2,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}},BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, x::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},UnitRange{Int64}}},false}, β::Float64, y::SubArray{Float64,1,BlockArrays.PseudoBlockVector{Float64,Vector{Float64},Tuple{Base.OneTo{Int64}}},Tuple{BlockArrays.BlockSlice{BlockArrays.Block{1,Int64},Base.OneTo{Int64}}},false})
      @ BandedMatrices ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:50
    [8] materialize!
      @ ~/.julia/packages/BandedMatrices/dobxA/src/generic/matmul.jl:54 [inlined]
    [9] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [10] materialize!(M::ArrayLayouts.MulAdd{BlockBandedMatrices.BandedBlockBandedColumns{ArrayLayouts.ColumnMajor},ArrayLayouts.DenseColumnMajor,ArrayLayouts.DenseColumnMajor,Float64,BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}},Vector{Float64},Vector{Float64}})
      @ BlockArrays ~/.julia/packages/BlockArrays/Iqf2f/src/blocklinalg.jl:91
   [11] muladd!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:80 [inlined]
   [12] copyto!
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:94 [inlined]
   [13] copy
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:82 [inlined]
   [14] materialize
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:81 [inlined]
   [15] mul
      @ ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:447 [inlined]
   [16] *(A::BlockBandedMatrices.BandedBlockBandedMatrix{Float64,BlockArrays.PseudoBlockMatrix{Float64,Matrix{Float64},Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}},BlockArrays.BlockedUnitRange{Vector{Int64}}}},Base.OneTo{Int64}}, B::Vector{Float64})
      @ ArrayLayouts ~/.julia/packages/ArrayLayouts/vlcZk/src/muladd.jl:461
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:105
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [19] top-level scope
      @ ~/.julia/packages/DiffEqOperators/QiB3a/test/concretization.jl:85
  
Test Summary:                     | Error  Total
Higher Dimensional Concretization |    33     33
  First Dimension                 |     6      6
  Second Dimension                |     9      9
  Third Dimension                 |     9      9
  Fifth Dimension                 |     9      9
ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 33 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/runtests.jl:9
ERROR: Package DiffEqOperators errored during testing
Stacktrace:
  [1] pkgerror(::String, ::Vararg{String,N} where N)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1561
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:327
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:314
  [5] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#60
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:16
