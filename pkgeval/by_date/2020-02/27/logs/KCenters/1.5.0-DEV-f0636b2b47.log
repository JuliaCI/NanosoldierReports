Julia Version 1.5.0-DEV.355
Commit f0636b2b47 (2020-02-27 13:55 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Missings ──────────────────── v0.4.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed DataAPI ───────────────────── v1.1.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Compat ────────────────────── v3.6.0
  Installed KCenters ──────────────────── v0.2.2
  Installed MLDataUtils ───────────────── v0.5.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed TableTraits ───────────────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Reexport ──────────────────── v0.2.0
  Installed Parsers ───────────────────── v0.3.11
  Installed MLDataPattern ─────────────── v0.5.0
  Installed StatsBase ─────────────────── v0.32.1
  Installed InvertedIndices ───────────── v1.0.0
  Installed Tables ────────────────────── v1.0.2
  Installed DataFrames ────────────────── v0.20.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed LearnBase ─────────────────── v0.2.2
  Installed OrderedCollections ────────── v1.1.0
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed DataStructures ────────────── v0.17.10
  Installed JSON ──────────────────────── v0.21.0
  Installed SimilaritySearch ──────────── v0.3.19
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.6.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.10
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.2
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_Ian7XZ/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.6.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.10
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.2
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.932025450070699
[ Info: 0.8307796732584636
[ Info: 0.5544419614970684
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.32481760886808236
mean(cdnet.distances) = 0.3783859258145094
mean(crand.distances) = 0.3753515527645747
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8552811771561781,"seconds":5.206093192100525e-6,"exhaustive_search_seconds":1.0766088962554932e-6,"evaluations":8.5078125,"distances_sum":2280.3672344609454}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76171875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.76171875,"f1":0.8552811771561781,"seconds":5.206093192100525e-6,"exhaustive_search_seconds":1.0766088962554932e-6,"evaluations":8.5078125,"distances_sum":2280.3672344609454}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9351133241758244,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.0766088962554932e-6,"evaluations":8.859375,"distances_sum":2750.827470746234}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9530963827838831,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.0766088962554932e-6,"evaluations":8.9375,"distances_sum":2845.316551719177}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9530963827838831,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.0766088962554932e-6,"evaluations":8.9375,"distances_sum":2845.316551719177}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9613324175824179,"seconds":6.273388862609863e-6,"exhaustive_search_seconds":1.0766088962554932e-6,"evaluations":8.984375,"distances_sum":2899.7157493667005}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9630983599733604,"seconds":5.979090929031372e-6,"exhaustive_search_seconds":1.0766088962554932e-6,"evaluations":8.90625,"distances_sum":2938.7145830697436}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9680288461538464,"seconds":6.3944607973098755e-6,"exhaustive_search_seconds":1.0766088962554932e-6,"evaluations":8.984375,"distances_sum":2976.0178778249456}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9680288461538464,"seconds":6.3944607973098755e-6,"exhaustive_search_seconds":1.0766088962554932e-6,"evaluations":8.984375,"distances_sum":2976.0178778249456}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9680288461538464,"seconds":6.3944607973098755e-6,"exhaustive_search_seconds":1.0766088962554932e-6,"evaluations":8.984375,"distances_sum":2976.0178778249456}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.349609375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.349609375,"f1":null,"seconds":4.118308424949646e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":6.859375,"distances_sum":776.5160303865273}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.708984375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.708984375,"f1":0.8191121378621388,"seconds":5.256384611129761e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.5546875,"distances_sum":1725.6321585892788}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5341796875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5341796875,"f1":0.6854014041514048,"seconds":4.367902874946594e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":7.71875,"distances_sum":1262.7659911916362}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.708984375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.708984375,"f1":0.8191121378621388,"seconds":5.256384611129761e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.5546875,"distances_sum":1725.6321585892788}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9349478646353652,"seconds":6.789341568946838e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.890625,"distances_sum":2326.8004137810954}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9299424533799536,"seconds":5.494803190231323e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.8671875,"distances_sum":2297.865486739631}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8496829559329567,"seconds":5.217269062995911e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.75,"distances_sum":1847.831901953313}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8694659507159516,"seconds":5.230307579040527e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.828125,"distances_sum":1938.024428147296}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9372512903762908,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.875,"distances_sum":2342.748869589444}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.925944368131869,"seconds":5.45009970664978e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.953125,"distances_sum":2211.2287558608796}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8935546875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9372512903762908,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.875,"distances_sum":2342.748869589444}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9532051282051285,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.9296875,"distances_sum":2439.1521484199625}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9677483974358977,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.984375,"distances_sum":2523.308415562134}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9409028471528476,"seconds":5.811452865600586e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.890625,"distances_sum":2363.625492897047}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9593234890109896,"seconds":5.850568413734436e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.9296875,"distances_sum":2485.8290475201475}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9653502747252752,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.9453125,"distances_sum":2532.09332530309}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9718578296703301,"seconds":6.137415766716003e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.953125,"distances_sum":2560.569687743031}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9649553571428576,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.921875,"distances_sum":2522.7650298208346}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.951104624542125,"seconds":5.97536563873291e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.90625,"distances_sum":2433.3253874329484}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.952258158508159,"seconds":5.884096026420593e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.8515625,"distances_sum":2446.6224860211582}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9647722069597076,"seconds":6.036832928657532e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.9296875,"distances_sum":2524.3003520063207}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9718578296703301,"seconds":6.137415766716003e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.953125,"distances_sum":2560.569687743031}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9718578296703301,"seconds":6.137415766716003e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.953125,"distances_sum":2560.569687743031}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.7951512029637039,"seconds":4.589557647705078e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.640625,"distances_sum":1711.376414522713}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.435546875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.435546875,"f1":null,"seconds":3.973022103309631e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.65625,"distances_sum":1023.5558229303034}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.677734375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.677734375,"f1":0.7951512029637039,"seconds":4.589557647705078e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.640625,"distances_sum":1711.376414522713}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9484832875457879,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8203125,"distances_sum":2546.0428996123405}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8597792832167842,"seconds":5.2209943532943726e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.46875,"distances_sum":2002.666536403602}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8612705003330012,"seconds":4.980713129043579e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.4453125,"distances_sum":1995.5507820032014}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9484832875457879,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8203125,"distances_sum":2546.0428996123405}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9631753663003665,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8671875,"distances_sum":2703.3605680896353}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9567021520146525,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.828125,"distances_sum":2615.598024568506}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9631753663003665,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8671875,"distances_sum":2703.3605680896353}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9345703125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9631753663003665,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8671875,"distances_sum":2703.3605680896353}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.349609375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.349609375,"f1":null,"seconds":3.5874545574188232e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":5.8828125,"distances_sum":795.1526381390497}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1494140625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1494140625,"f1":null,"seconds":3.3099204301834106e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":5.0390625,"distances_sum":362.6457581007603}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.349609375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.349609375,"f1":null,"seconds":3.5874545574188232e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":5.8828125,"distances_sum":795.1526381390497}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.578125, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.578125,"f1":0.712705003330004,"seconds":4.28222119808197e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.109375,"distances_sum":1299.0047296583245}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6962890625, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6962890625,"f1":0.8077703546453553,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.875,"distances_sum":1601.895910798065}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6962890625,"state":{"ssize":7,"bsize":4},"perf":{"precision":1.0,"recall":0.6962890625,"f1":0.8077703546453553,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.875,"distances_sum":1601.895910798065}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7978515625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7978515625,"f1":0.880137050449551,"seconds":5.368143320083618e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.4140625,"distances_sum":1905.134538138456}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9255551739926746,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.484375,"distances_sum":2198.9108966904314}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9049653471528478,"seconds":5.619600415229797e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.40625,"distances_sum":2050.893068907809}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8701171875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8701171875,"f1":0.9255551739926746,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.484375,"distances_sum":2198.9108966904314}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8701171875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8701171875,"f1":0.9255551739926746,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.484375,"distances_sum":2198.9108966904314}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.654296875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.654296875,"f1":0.7763404997780006,"seconds":5.044043064117432e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.03125,"distances_sum":1604.740722921804}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5654296875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5654296875,"f1":0.708979215229216,"seconds":4.451721906661987e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":7.28125,"distances_sum":1322.643762777386}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.654296875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.654296875,"f1":0.7763404997780006,"seconds":5.044043064117432e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.03125,"distances_sum":1604.740722921804}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8547364094239103,"seconds":4.9620866775512695e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.359375,"distances_sum":1941.7788630620053}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7373046875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7373046875,"f1":0.8427718115218124,"seconds":3.7532299757003784e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.2421875,"distances_sum":1871.28734324613}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9363953754578761,"seconds":7.243826985359192e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.828125,"distances_sum":2354.5350710582698}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.8074446386946394,"seconds":6.152316927909851e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.125,"distances_sum":1693.5296848947194}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8534434315684324,"seconds":6.40377402305603e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.328125,"distances_sum":1906.334225918949}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8896484375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8896484375,"f1":0.9363953754578761,"seconds":7.243826985359192e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.828125,"distances_sum":2354.5350710582698}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9707818223443228,"seconds":7.409602403640747e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.9296875,"distances_sum":2570.469766137331}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9452094780219784,"seconds":7.027760148048401e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.890625,"distances_sum":2392.697741653056}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9381353021978027,"seconds":5.19677996635437e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.78125,"distances_sum":2369.717483152149}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9707818223443228,"seconds":7.409602403640747e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.9296875,"distances_sum":2570.469766137331}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9707818223443228,"seconds":7.409602403640747e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.9296875,"distances_sum":2570.469766137331}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8670350482850491,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.1171875,"distances_sum":1836.5601528177315}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.208984375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.208984375,"f1":null,"seconds":3.952533006668091e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":5.6875,"distances_sum":504.2894097310641}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.78125,"f1":0.8670350482850491,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.1171875,"distances_sum":1836.5601528177315}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8919731310356317,"seconds":6.670132279396057e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.1953125,"distances_sum":1938.5264724633837}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.963787774725275,"seconds":7.187947630882263e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.890625,"distances_sum":2390.281833651648}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9092064185814194,"seconds":6.98678195476532e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.53125,"distances_sum":2087.4809216886597}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.963787774725275,"seconds":7.187947630882263e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.890625,"distances_sum":2390.281833651648}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":8,"bsize":12}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9784798534798538,"seconds":7.51204788684845e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.90625,"distances_sum":2496.4246237006896}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":8,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9784798534798538,"seconds":7.51204788684845e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.90625,"distances_sum":2496.4246237006896}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":8,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9784798534798538,"seconds":7.51204788684845e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.90625,"distances_sum":2496.4246237006896}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.556640625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.556640625,"f1":0.6960733710733717,"seconds":2.9597431421279907e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":6.65625,"distances_sum":1190.8931372530562}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5703125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5703125,"f1":null,"seconds":2.950429916381836e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":6.7109375,"distances_sum":1201.478967260221}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5703125,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5703125,"f1":null,"seconds":2.950429916381836e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":6.7109375,"distances_sum":1201.478967260221}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5966796875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5966796875,"f1":0.7313832001332007,"seconds":2.985820174217224e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":6.890625,"distances_sum":1280.942519543439}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9235467657342665,"seconds":4.1369348764419556e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.5859375,"distances_sum":2104.9569382550194}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8662109375,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8662109375,"f1":0.9235467657342665,"seconds":4.1369348764419556e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.5859375,"distances_sum":2104.9569382550194}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9585966117216121,"seconds":1.2468546628952026e-5,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.7734375,"distances_sum":2396.254071594387}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9585966117216121,"seconds":1.2468546628952026e-5,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.7734375,"distances_sum":2396.254071594387}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9267578125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9585966117216121,"seconds":1.2468546628952026e-5,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.7734375,"distances_sum":2396.254071594387}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.208984375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.208984375,"f1":null,"seconds":6.448477506637573e-6,"exhaustive_search_seconds":2.7976930141448975e-6,"evaluations":5.4765625,"distances_sum":446.5470721236246}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3994140625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3994140625,"f1":null,"seconds":7.452443242073059e-6,"exhaustive_search_seconds":2.7976930141448975e-6,"evaluations":5.9765625,"distances_sum":826.4826580696766}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.7923709970584978,"seconds":9.525567293167114e-6,"exhaustive_search_seconds":2.7976930141448975e-6,"evaluations":7.3125,"distances_sum":1432.1258487565497}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.671875,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.671875,"f1":0.7923709970584978,"seconds":9.525567293167114e-6,"exhaustive_search_seconds":2.7976930141448975e-6,"evaluations":7.3125,"distances_sum":1432.1258487565497}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9444482600732605,"seconds":1.1753290891647339e-5,"exhaustive_search_seconds":2.7976930141448975e-6,"evaluations":8.7265625,"distances_sum":2197.0045565440096}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.8438228438228446,"seconds":1.0423362255096436e-5,"exhaustive_search_seconds":2.7976930141448975e-6,"evaluations":7.921875,"distances_sum":1641.1517053898}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73046875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.73046875,"f1":0.8346693237318247,"seconds":9.767711162567139e-6,"exhaustive_search_seconds":2.7976930141448975e-6,"evaluations":7.890625,"distances_sum":1577.2512052600464}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9052734375,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9052734375,"f1":0.9444482600732605,"seconds":1.1753290891647339e-5,"exhaustive_search_seconds":2.7976930141448975e-6,"evaluations":8.7265625,"distances_sum":2197.0045565440096}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9505666208791215,"seconds":4.027038812637329e-6,"exhaustive_search_seconds":2.7976930141448975e-6,"evaluations":8.7265625,"distances_sum":2235.895665682175}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9505666208791215,"seconds":4.027038812637329e-6,"exhaustive_search_seconds":2.7976930141448975e-6,"evaluations":8.7265625,"distances_sum":2235.895665682175}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9130859375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9505666208791215,"seconds":4.027038812637329e-6,"exhaustive_search_seconds":2.7976930141448975e-6,"evaluations":8.7265625,"distances_sum":2235.895665682175}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6533203125,"f1":0.7784991050616058,"seconds":3.0454248189926147e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":7.4453125,"distances_sum":1394.5760816909167}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6533203125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6533203125,"f1":0.7784991050616058,"seconds":3.0454248189926147e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":7.4453125,"distances_sum":1394.5760816909167}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.8997970779220783,"seconds":3.473833203315735e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.2109375,"distances_sum":1953.6774685313235}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9570169413919418,"seconds":3.6172568798065186e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.828125,"distances_sum":2326.3097176271485}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9570169413919418,"seconds":3.6172568798065186e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.828125,"distances_sum":2326.3097176271485}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9711137820512823,"seconds":3.8333237171173096e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.9296875,"distances_sum":2394.143119933249}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9681948260073263,"seconds":4.0102750062942505e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.8984375,"distances_sum":2384.696099176942}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9571860431235436,"seconds":3.999099135398865e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.84375,"distances_sum":2317.3518596263125}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9711137820512823,"seconds":3.8333237171173096e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.9296875,"distances_sum":2394.143119933249}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9711137820512823,"seconds":3.8333237171173096e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.9296875,"distances_sum":2394.143119933249}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6669921875,"f1":0.7863889582639592,"seconds":3.0025839805603027e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":7.625,"distances_sum":1491.5739016792147}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6669921875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6669921875,"f1":0.7863889582639592,"seconds":3.0025839805603027e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":7.625,"distances_sum":1491.5739016792147}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6669921875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6669921875,"f1":0.7863889582639592,"seconds":3.0025839805603027e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":7.625,"distances_sum":1491.5739016792147}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.6669921875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6669921875,"f1":0.7863889582639592,"seconds":3.0025839805603027e-6,"exhaustive_search_seconds":8.977949619293213e-7,"evaluations":7.625,"distances_sum":1491.5739016792147}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5693359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5693359375,"f1":0.7102796509046516,"seconds":2.7976930141448975e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":7.2578125,"distances_sum":1196.1965634525852}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8647472319347328,"seconds":3.3117830753326416e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.3671875,"distances_sum":1795.0384613130282}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.8647472319347328,"seconds":3.3117830753326416e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.3671875,"distances_sum":1795.0384613130282}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9068452380952389,"seconds":4.198402166366577e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.671875,"distances_sum":2036.9147175963656}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.8849447427572434,"seconds":3.982335329055786e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.515625,"distances_sum":1888.659719739397}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9219093406593413,"seconds":3.894791007041931e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.6875,"distances_sum":2157.5492809796137}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8662109375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8662109375,"f1":0.9219093406593413,"seconds":3.894791007041931e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.6875,"distances_sum":2157.5492809796137}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9400417291042297,"seconds":4.317611455917358e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.734375,"distances_sum":2308.174512166832}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9372309981684988,"seconds":6.755813956260681e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.7265625,"distances_sum":2263.7206178855354}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.934649725274726,"seconds":7.70576298236847e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.75,"distances_sum":2237.8468776259606}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9559924450549457,"seconds":7.24010169506073e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.8046875,"distances_sum":2397.2554425793123}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9524858821733826,"seconds":6.759539246559143e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.7890625,"distances_sum":2391.6152016990627}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9559924450549457,"seconds":7.24010169506073e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.8046875,"distances_sum":2397.2554425793123}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.921875,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9559924450549457,"seconds":7.24010169506073e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.8046875,"distances_sum":2397.2554425793123}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8466151903651911,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.890625,"distances_sum":1730.804883075671}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.685546875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.685546875,"f1":0.7996715090465099,"seconds":4.947185516357422e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.34375,"distances_sum":1575.5081820250064}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7568359375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7568359375,"f1":0.8466151903651911,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.890625,"distances_sum":1730.804883075671}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8686665764790774,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.921875,"distances_sum":1862.2831846529816}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9403159340659347,"seconds":6.010755896568298e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.6015625,"distances_sum":2324.358091973025}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9381009615384623,"seconds":6.1802566051483154e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.6640625,"distances_sum":2282.074072656141}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8955078125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.8955078125,"f1":0.9403159340659347,"seconds":6.010755896568298e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.6015625,"distances_sum":2324.358091973025}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9729567307692312,"seconds":6.720423698425293e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.921875,"distances_sum":2441.5659770276247}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9407826548451554,"seconds":6.198883056640625e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.671875,"distances_sum":2302.201615444523}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9763221153846158,"seconds":6.3925981521606445e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.9140625,"distances_sum":2481.5457484241037}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.967971611721612,"seconds":6.252899765968323e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.8671875,"distances_sum":2422.297040744185}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9424793956043962,"seconds":3.904104232788086e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.7109375,"distances_sum":2292.493605873701}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9763221153846158,"seconds":6.3925981521606445e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.9140625,"distances_sum":2481.5457484241037}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9763221153846158,"seconds":6.3925981521606445e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.9140625,"distances_sum":2481.5457484241037}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.193359375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.193359375,"f1":null,"seconds":2.0563602447509766e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":5.421875,"distances_sum":415.3292605630579}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8670626248751255,"seconds":3.8370490074157715e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":7.5390625,"distances_sum":1744.7947467946456}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.701171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.701171875,"f1":0.8130562146187155,"seconds":3.596767783164978e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":7.34375,"distances_sum":1493.8935153652174}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.77734375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.77734375,"f1":0.8670626248751255,"seconds":3.8370490074157715e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":7.5390625,"distances_sum":1744.7947467946456}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9133585164835171,"seconds":4.285946488380432e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.375,"distances_sum":2042.8678892567782}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9445054945054951,"seconds":4.503875970840454e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.6875,"distances_sum":2327.320666931748}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9323577464202472,"seconds":4.202127456665039e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.703125,"distances_sum":2211.1455777429937}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9035292832167842,"seconds":4.129484295845032e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.40625,"distances_sum":1988.901200783931}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9346700174825184,"seconds":4.990026354789734e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.6875,"distances_sum":2257.8462536743027}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9445054945054951,"seconds":4.503875970840454e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.6875,"distances_sum":2327.320666931748}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9580586080586085,"seconds":5.681067705154419e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.890625,"distances_sum":2355.876872344679}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9772722069597073,"seconds":5.491077899932861e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.9140625,"distances_sum":2494.9106239329126}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9558836996337,"seconds":4.144385457038879e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.8359375,"distances_sum":2338.3222666780475}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9718406593406597,"seconds":4.103407263755798e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.9375,"distances_sum":2430.3753717331438}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9655734890109894,"seconds":4.038214683532715e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.890625,"distances_sum":2408.820531000047}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9665579212454215,"seconds":4.0996819734573364e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.875,"distances_sum":2414.1408726566997}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9537603021978027,"seconds":6.472691893577576e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.875,"distances_sum":2328.317416715075}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9772722069597073,"seconds":5.491077899932861e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.9140625,"distances_sum":2494.9106239329126}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9772722069597073,"seconds":5.491077899932861e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":8.9140625,"distances_sum":2494.9106239329126}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.212890625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.212890625,"f1":null,"seconds":3.511086106300354e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.1640625,"distances_sum":472.6245893442441}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.390625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.390625,"f1":null,"seconds":4.062429070472717e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.625,"distances_sum":737.6056560949783}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.212890625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.212890625,"f1":null,"seconds":3.4514814615249634e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.2265625,"distances_sum":500.4133614683121}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.390625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.390625,"f1":null,"seconds":4.062429070472717e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.625,"distances_sum":737.6056560949783}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5830078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5830078125,"f1":0.7188880563880571,"seconds":4.6510249376297e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.203125,"distances_sum":1208.2448018280008}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.439453125, conf: {"ssize":7,"bsize":2}, perf: {"precision":null,"recall":0.439453125,"f1":null,"seconds":2.60770320892334e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.6953125,"distances_sum":897.3717545373861}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.7963905885780894,"seconds":3.2763928174972534e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.4921875,"distances_sum":1433.7398390350277}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7119140625, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.7119140625,"f1":0.8218462093462103,"seconds":3.4011900424957275e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.734375,"distances_sum":1529.6268192355262}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.701171875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.701171875,"f1":0.8123572607947616,"seconds":3.7141144275665283e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.671875,"distances_sum":1495.9644179687052}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.42578125, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.42578125,"f1":null,"seconds":3.7066638469696045e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.6796875,"distances_sum":880.6882471388095}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.400390625, conf: {"ssize":8,"bsize":2}, perf: {"precision":null,"recall":0.400390625,"f1":null,"seconds":4.066154360771179e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.5703125,"distances_sum":796.8646080526113}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7119140625,"state":{"ssize":6,"bsize":4},"perf":{"precision":1.0,"recall":0.7119140625,"f1":0.8218462093462103,"seconds":3.4011900424957275e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.734375,"distances_sum":1529.6268192355262}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8595446220446228,"seconds":5.751848220825195e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.7734375,"distances_sum":1713.7783714042023}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9506982600732605,"seconds":6.722286343574524e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.84375,"distances_sum":2310.2801706307373}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9478110431235437,"seconds":6.720423698425293e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.890625,"distances_sum":2270.8736164074594}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8552124958374966,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.703125,"distances_sum":1689.521747243386}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9459535256410261,"seconds":6.629154086112976e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8984375,"distances_sum":2233.677458649641}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8965404387279396,"seconds":6.2622129917144775e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.6875,"distances_sum":1941.5248038764241}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9118818681318687,"seconds":6.340444087982178e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.78125,"distances_sum":2009.7333502748713}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9506982600732605,"seconds":6.722286343574524e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.84375,"distances_sum":2310.2801706307373}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9130859375,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9506982600732605,"seconds":6.722286343574524e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.84375,"distances_sum":2310.2801706307373}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.708984375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.708984375,"f1":0.8229114635364643,"seconds":5.427747964859009e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.03125,"distances_sum":1474.7936422386376}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.248046875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.248046875,"f1":null,"seconds":3.850087523460388e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":6.4296875,"distances_sum":570.7420861331316}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.708984375,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.708984375,"f1":0.8229114635364643,"seconds":5.427747964859009e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.03125,"distances_sum":1474.7936422386376}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.905208333333334,"seconds":6.334856152534485e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.4921875,"distances_sum":1925.7540544464305}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9585451007326012,"seconds":6.705522537231445e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.8671875,"distances_sum":2317.30115310026}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8599598318348327,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.9765625,"distances_sum":1685.1426376441198}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.8770094488844498,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.0859375,"distances_sum":1772.046928003534}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9585451007326012,"seconds":6.705522537231445e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.8671875,"distances_sum":2317.30115310026}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9712454212454216,"seconds":6.765127182006836e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.96875,"distances_sum":2389.333688267303}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9712454212454216,"seconds":6.765127182006836e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.96875,"distances_sum":2389.333688267303}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9712454212454216,"seconds":6.765127182006836e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.96875,"distances_sum":2389.333688267303}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5302734375, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.5302734375,"f1":null,"seconds":3.384426236152649e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":6.953125,"distances_sum":1067.6984162665738}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.375, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.375,"f1":null,"seconds":3.080815076828003e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":6.1953125,"distances_sum":738.951495990977}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5517578125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5517578125,"f1":0.6985389610389616,"seconds":4.9501657485961914e-5,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":7.09375,"distances_sum":1155.693725432085}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5517578125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5517578125,"f1":0.6985389610389616,"seconds":4.9501657485961914e-5,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":7.09375,"distances_sum":1155.693725432085}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.93208041958042,"seconds":3.8798898458480835e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":8.7421875,"distances_sum":2196.825184468621}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.875,"f1":0.9280250999001004,"seconds":4.509463906288147e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":8.71875,"distances_sum":2120.895797492371}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8646181943056951,"seconds":3.1869858503341675e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":8.15625,"distances_sum":1827.3308554995715}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.884765625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.884765625,"f1":0.93208041958042,"seconds":3.8798898458480835e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":8.7421875,"distances_sum":2196.825184468621}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9361836080586087,"seconds":3.7923455238342285e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":8.7109375,"distances_sum":2265.250602184246}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.970758928571429,"seconds":5.185604095458984e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":8.9140625,"distances_sum":2437.856402082949}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9667239010989017,"seconds":4.429370164871216e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":8.859375,"distances_sum":2424.847534652753}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9533341658341664,"seconds":3.956258296966553e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":8.7890625,"distances_sum":2348.8828350314516}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.970758928571429,"seconds":5.185604095458984e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":8.9140625,"distances_sum":2437.856402082949}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.970758928571429,"seconds":5.185604095458984e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":8.9140625,"distances_sum":2437.856402082949}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.412109375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.412109375,"f1":null,"seconds":2.33575701713562e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":6.1640625,"distances_sum":801.7390255897541}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2470703125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2470703125,"f1":null,"seconds":2.088025212287903e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":6.0234375,"distances_sum":527.6218800449478}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2353515625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2353515625,"f1":null,"seconds":2.0191073417663574e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":6.0390625,"distances_sum":517.9219714224264}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.412109375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.412109375,"f1":null,"seconds":2.33575701713562e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":6.1640625,"distances_sum":801.7390255897541}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.421875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.421875,"f1":null,"seconds":2.332031726837158e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":6.078125,"distances_sum":806.0047688810052}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.8819196428571437,"seconds":5.21540641784668e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.84375,"distances_sum":1835.1529828427952}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.8033152611277619,"seconds":4.168599843978882e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.5234375,"distances_sum":1464.262386346392}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.59375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.59375,"f1":null,"seconds":2.7529895305633545e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.09375,"distances_sum":1214.8260601063062}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6923828125, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6923828125,"f1":0.8082427988677998,"seconds":2.853572368621826e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.59375,"distances_sum":1465.2163835407555}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6669921875,"f1":0.7900521353646361,"seconds":3.0454248189926147e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.4140625,"distances_sum":1380.6133944856242}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7958984375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7958984375,"f1":0.8783206376956385,"seconds":3.2838433980941772e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.7421875,"distances_sum":1805.6631649667033}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.798828125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.798828125,"f1":0.8819196428571437,"seconds":5.21540641784668e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.84375,"distances_sum":1835.1529828427952}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9731227106227109,"seconds":3.7923455238342285e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.90625,"distances_sum":2455.432522594042}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8017578125, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.8017578125,"f1":0.8823952089577098,"seconds":5.166977643966675e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.8671875,"distances_sum":1830.1290624815786}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.8989042207792216,"seconds":3.343448042869568e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.125,"distances_sum":1958.607543123283}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9310439560439568,"seconds":3.816559910774231e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.7734375,"distances_sum":2169.121111792459}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9731227106227109,"seconds":3.7923455238342285e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.90625,"distances_sum":2455.432522594042}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9731227106227109,"seconds":3.7923455238342285e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.90625,"distances_sum":2455.432522594042}}, n: 9
mean(cfft.distances) = 0.3288230884467158
mean(cdnet.distances) = 0.4240593269578219
mean(crand.distances) = 0.32478616453492254
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8777777777777778
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9511111111111111
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.9177777777777778
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8911111111111111
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8755555555555555
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9466666666666667
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8999999999999999
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8844444444444445
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9244444444444445
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9177777777777777
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9311111111111111
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8866666666666667
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9222222222222222
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8933333333333332
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9044444444444445
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.931111111111111
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9377777777777778
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444443
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8888888888888888
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8533333333333334
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8999999999999999
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9133333333333332
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 1, 2, 3, 2, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 1, 2, 3, 2, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 1, 2, 3, 2, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 1, 2, 3, 2, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 1, 2, 3, 2, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 1, 2, 3, 2, 2, 2, 3, 3, 1, 3]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 1, 2, 3, 2, 2, 2, 3, 3, 1, 3]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.5525460470716158] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 24, 1]]
** centroid: 1, normalized-entropy: 0.24229218908241482, [(2, 24), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 22]]
** centroid: 4, normalized-entropy: 0.2580186686648155, [(2, 1), (3, 22)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 19, 1]]
** centroid: 5, normalized-entropy: 0.2863969571159561, [(2, 19), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 8: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 10, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
finished with 13 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.2254053704607001] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2254053704607001, 0.16109581827369585] ***
*** finished computation of 7 references, err: [Inf, 0.2254053704607001, 0.16109581827369585] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [16, 93, 0]]
** centroid: 1, normalized-entropy: 0.601746073097597, [(1, 16), (2, 93)]
*** center 2: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 65, 25]]
** centroid: 3, normalized-entropy: 0.8524051786494784, [(2, 65), (3, 25)]
*** center 4: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [102, 80, 0]]
** centroid: 5, normalized-entropy: 0.9894340222202265, [(1, 102), (2, 80)]
*** center 6: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20379553640937095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20379553640937095, 0.1657176998079471] ***
*** finished computation of 7 references, err: [Inf, 0.20379553640937095, 0.1657176998079471] ***
*** center 1: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [66, 34, 0]]
** centroid: 2, normalized-entropy: 0.9248187049730301, [(1, 66), (2, 34)]
*** center 3: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [151, 22, 0]]
** centroid: 4, normalized-entropy: 0.5496189140638493, [(1, 151), (2, 22)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 100, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 75, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 14, 20]]
** centroid: 7, normalized-entropy: 0.9774178175281716, [(2, 14), (3, 20)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23271254050395992] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23271254050395992, 0.16434394734921395] ***
*** finished computation of 7 references, err: [Inf, 0.23271254050395992, 0.16434394734921395] ***
*** center 1: selecting labels [1] (freq >= 1) [from [119, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [114, 8, 0]]
** centroid: 2, normalized-entropy: 0.34918437350730797, [(1, 114), (2, 8)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [38, 61, 0]]
** centroid: 3, normalized-entropy: 0.9607079018756469, [(1, 38), (2, 61)]
*** center 4: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 6, 24]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(2, 6), (3, 24)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [42, 85, 0]]
** centroid: 6, normalized-entropy: 0.9156487708004134, [(1, 42), (2, 85)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 73, 1]]
** centroid: 7, normalized-entropy: 0.10327508457163559, [(2, 73), (3, 1)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.40691640965959375] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40691640965959375, 0.25812620223239735] ***
*** finished computation of 3 references, err: [Inf, 0.40691640965959375, 0.25812620223239735] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [151, 4, 0]]
** centroid: 1, normalized-entropy: 0.1729043043833541, [(1, 151), (2, 4)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [7, 227, 25]]
** centroid: 2, normalized-entropy: 0.3994563666184157, [(1, 7), (2, 227), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [245, 7, 0]]
** centroid: 3, normalized-entropy: 0.18312206830137262, [(1, 245), (2, 7)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2913928846821658] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2913928846821658, 0.24106539629268525] ***
*** finished computation of 3 references, err: [Inf, 0.2913928846821658, 0.24106539629268525] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [41, 188, 20]]
** centroid: 1, normalized-entropy: 0.6478548442622021, [(1, 41), (2, 188), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [120, 45, 0]]
** centroid: 2, normalized-entropy: 0.8453509366224364, [(1, 120), (2, 45)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [241, 12, 0]]
** centroid: 3, normalized-entropy: 0.275381400622869, [(1, 241), (2, 12)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2927133197403294] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2927133197403294, 0.24725554084246126] ***
*** finished computation of 3 references, err: [Inf, 0.2927133197403294, 0.24725554084246126] ***
*** center 1: selecting labels [1] (freq >= 1) [from [178, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [109, 197, 25]]
** centroid: 2, normalized-entropy: 0.7916640205398274, [(1, 109), (2, 197), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [122, 36, 0]]
** centroid: 3, normalized-entropy: 0.7742411580847273, [(1, 122), (2, 36)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27906456255345596] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27906456255345596, 0.24852619034884213] ***
*** starting iteration: 2; err: [Inf, 0.27906456255345596, 0.24852619034884213] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27906456255345596, 0.24852619034884213, 0.239382298171028] ***
*** starting iteration: 3; err: [Inf, 0.27906456255345596, 0.24852619034884213, 0.239382298171028] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27906456255345596, 0.24852619034884213, 0.239382298171028, 0.23786069389835401] ***
*** finished computation of 3 references, err: [Inf, 0.27906456255345596, 0.24852619034884213, 0.239382298171028, 0.23786069389835401] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 175, 25]]
** centroid: 1, normalized-entropy: 0.5435644431995963, [(2, 175), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [229, 22, 0]]
** centroid: 2, normalized-entropy: 0.42857477672280103, [(1, 229), (2, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [174, 41, 0]]
** centroid: 3, normalized-entropy: 0.7029286613707619, [(1, 174), (2, 41)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33560888023524804] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33560888023524804, 0.23314486978564417] ***
*** starting iteration: 2; err: [Inf, 0.33560888023524804, 0.23314486978564417] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33560888023524804, 0.23314486978564417, 0.23295332726113488] ***
*** finished computation of 3 references, err: [Inf, 0.33560888023524804, 0.23314486978564417, 0.23295332726113488] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [246, 24, 0]]
** centroid: 1, normalized-entropy: 0.43275015878875417, [(1, 246), (2, 24)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 171, 20]]
** centroid: 2, normalized-entropy: 0.48375688068896455, [(2, 171), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [156, 50, 0]]
** centroid: 3, normalized-entropy: 0.7995318105266797, [(1, 156), (2, 50)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.288124835805624] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.288124835805624, 0.24839877546101674] ***
*** starting iteration: 2; err: [Inf, 0.288124835805624, 0.24839877546101674] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.288124835805624, 0.24839877546101674, 0.23995791354972026] ***
*** starting iteration: 3; err: [Inf, 0.288124835805624, 0.24839877546101674, 0.23995791354972026] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.288124835805624, 0.24839877546101674, 0.23995791354972026, 0.2382655074509947] ***
*** finished computation of 3 references, err: [Inf, 0.288124835805624, 0.24839877546101674, 0.23995791354972026, 0.2382655074509947] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [91, 158, 25]]
** centroid: 1, normalized-entropy: 0.821032378047396, [(1, 91), (2, 158), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [114, 75, 0]]
** centroid: 2, normalized-entropy: 0.9690632527820694, [(1, 114), (2, 75)]
*** center 3: selecting labels [1] (freq >= 1) [from [204, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.1978729943571439] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1978729943571439, 0.1542244984519419] ***
*** finished computation of 7 references, err: [Inf, 0.1978729943571439, 0.1542244984519419] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [50, 70, 0]]
** centroid: 1, normalized-entropy: 0.9798687566511527, [(1, 50), (2, 70)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [54, 4, 0]]
** centroid: 2, normalized-entropy: 0.36205125173399805, [(1, 54), (2, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [124, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 60, 25]]
** centroid: 4, normalized-entropy: 0.8739810481273581, [(2, 60), (3, 25)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [72, 6, 0]]
** centroid: 5, normalized-entropy: 0.3912435636292556, [(1, 72), (2, 6)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [103, 6, 0]]
** centroid: 6, normalized-entropy: 0.30745653299528936, [(1, 103), (2, 6)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 92, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18099388563823976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18099388563823976, 0.15372660439782615] ***
*** finished computation of 7 references, err: [Inf, 0.18099388563823976, 0.15372660439782615] ***
*** center 1: selecting labels [1] (freq >= 1) [from [139, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 46, 20]]
** centroid: 2, normalized-entropy: 0.8849636363831529, [(2, 46), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 6, 0]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(1, 48), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [86, 10, 0]]
** centroid: 4, normalized-entropy: 0.4820661480830933, [(1, 86), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [27, 89, 0]]
** centroid: 5, normalized-entropy: 0.7827892889687528, [(1, 27), (2, 89)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 79, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [102, 15, 0]]
** centroid: 7, normalized-entropy: 0.552495114325111, [(1, 102), (2, 15)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1890244164435693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1890244164435693, 0.150760431712524] ***
*** finished computation of 7 references, err: [Inf, 0.1890244164435693, 0.150760431712524] ***
*** center 1: selecting labels [1] (freq >= 1) [from [117, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 53, 25]]
** centroid: 2, normalized-entropy: 0.9049382594235603, [(2, 53), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [65, 12, 0]]
** centroid: 3, normalized-entropy: 0.6242741010130388, [(1, 65), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [90, 22, 0]]
** centroid: 4, normalized-entropy: 0.7147274731317893, [(1, 90), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [33, 80, 0]]
** centroid: 5, normalized-entropy: 0.8713360108238786, [(1, 33), (2, 80)]
*** center 6: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 66, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19110481387602765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19110481387602765, 0.151946593634994] ***
*** finished computation of 7 references, err: [Inf, 0.19110481387602765, 0.151946593634994] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [71, 77, 0]]
** centroid: 1, normalized-entropy: 0.9988141148293563, [(1, 71), (2, 77)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [66, 3, 0]]
** centroid: 2, normalized-entropy: 0.2580186686648155, [(1, 66), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 64, 25]]
** centroid: 4, normalized-entropy: 0.8566727035015875, [(2, 64), (3, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [96, 16, 0]]
** centroid: 5, normalized-entropy: 0.5916727785823274, [(1, 96), (2, 16)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 78, 0]]
** centroid: 6, normalized-entropy: 0.22853814395352806, [(1, 3), (2, 78)]
*** center 7: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19940093314104798] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19940093314104798, 0.1537104423159267] ***
*** finished computation of 7 references, err: [Inf, 0.19940093314104798, 0.1537104423159267] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 95, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [61, 10, 0]]
** centroid: 3, normalized-entropy: 0.5864477034453907, [(1, 61), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [124, 2, 0]]
** centroid: 4, normalized-entropy: 0.11759466565886466, [(1, 124), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [116, 18, 0]]
** centroid: 5, normalized-entropy: 0.569190343735683, [(1, 116), (2, 18)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 89, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 31, 20]]
** centroid: 7, normalized-entropy: 0.9661773513883509, [(2, 31), (3, 20)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19486334527852475] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19486334527852475, 0.15181565509391376] ***
*** finished computation of 7 references, err: [Inf, 0.19486334527852475, 0.15181565509391376] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [18, 116, 0]]
** centroid: 1, normalized-entropy: 0.569190343735683, [(1, 18), (2, 116)]
*** center 2: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [70, 23, 0]]
** centroid: 3, normalized-entropy: 0.8069896049203007, [(1, 70), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [69, 30, 0]]
** centroid: 4, normalized-entropy: 0.8849636363831529, [(1, 69), (2, 30)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 64, 25]]
** centroid: 5, normalized-entropy: 0.8566727035015875, [(2, 64), (3, 25)]
*** center 6: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19077653026169128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19077653026169128, 0.1552725482631374] ***
*** starting iteration: 2; err: [Inf, 0.19077653026169128, 0.1552725482631374] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19077653026169128, 0.1552725482631374, 0.15096037195682213] ***
*** starting iteration: 3; err: [Inf, 0.19077653026169128, 0.1552725482631374, 0.15096037195682213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19077653026169128, 0.1552725482631374, 0.15096037195682213, 0.1505389181021657] ***
*** finished computation of 7 references, err: [Inf, 0.19077653026169128, 0.1552725482631374, 0.15096037195682213, 0.1505389181021657] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [30, 77, 0]]
** centroid: 1, normalized-entropy: 0.8559596826463527, [(1, 30), (2, 77)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [67, 4, 0]]
** centroid: 2, normalized-entropy: 0.3127333763966432, [(1, 67), (2, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [118, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 56, 25]]
** centroid: 4, normalized-entropy: 0.8915996278279094, [(2, 56), (3, 25)]
*** center 5: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [85, 6, 0]]
** centroid: 6, normalized-entropy: 0.35056382068186565, [(1, 85), (2, 6)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 95, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2122321366004344] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2122321366004344, 0.15211565736639335] ***
*** starting iteration: 2; err: [Inf, 0.2122321366004344, 0.15211565736639335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2122321366004344, 0.15211565736639335, 0.14789804134858603] ***
*** starting iteration: 3; err: [Inf, 0.2122321366004344, 0.15211565736639335, 0.14789804134858603] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2122321366004344, 0.15211565736639335, 0.14789804134858603, 0.1476499596017244] ***
*** finished computation of 7 references, err: [Inf, 0.2122321366004344, 0.15211565736639335, 0.14789804134858603, 0.1476499596017244] ***
*** center 1: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 86, 20]]
** centroid: 2, normalized-entropy: 0.6987003526563345, [(2, 86), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [55, 39, 0]]
** centroid: 3, normalized-entropy: 0.978998737002276, [(1, 55), (2, 39)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [74, 40, 0]]
** centroid: 4, normalized-entropy: 0.9348490242345946, [(1, 74), (2, 40)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [26, 80, 0]]
** centroid: 5, normalized-entropy: 0.8037159237834126, [(1, 26), (2, 80)]
*** center 6: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18947675674343886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18947675674343886, 0.15247293036833204] ***
*** starting iteration: 2; err: [Inf, 0.18947675674343886, 0.15247293036833204] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18947675674343886, 0.15247293036833204, 0.1498773988626752] ***
*** starting iteration: 3; err: [Inf, 0.18947675674343886, 0.15247293036833204, 0.1498773988626752] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18947675674343886, 0.15247293036833204, 0.1498773988626752, 0.1489129765559619] ***
*** finished computation of 7 references, err: [Inf, 0.18947675674343886, 0.15247293036833204, 0.1498773988626752, 0.1489129765559619] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 95, 25]]
** centroid: 1, normalized-entropy: 0.7382848661434506, [(2, 95), (3, 25)]
*** center 2: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [72, 26, 0]]
** centroid: 4, normalized-entropy: 0.834648285181383, [(1, 72), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [62, 26, 0]]
** centroid: 5, normalized-entropy: 0.8756633923230399, [(1, 62), (2, 26)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 86, 0]]
** centroid: 6, normalized-entropy: 0.21265863988163503, [(1, 3), (2, 86)]
*** center 7: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 8)
[0.9520148891406376, 0.9410038781296267, 0.9379798960637284, 0.9279878681076287, 0.8880077682472892, 0.8700257143370916, 0.8338967710225195, 0.807001612390834]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.3, 2) => 0.9520148891406376
finished with 8
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 8)
[0.9520148891406376, 0.9410038781296267, 0.9379798960637284, 0.9279878681076287, 0.8880077682472892, 0.8700257143370916, 0.8338967710225195, 0.807001612390834]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.3, 2) => 0.9520148891406376
finished with 9
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.27417478406544515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27417478406544515, 0.21759903914778977] ***
*** finished computation of 7 references, err: [Inf, 0.27417478406544515, 0.21759903914778977] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [41, 42, 0]]
** centroid: 1, normalized-entropy: 0.9998952874186191, [(1, 41), (2, 42)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 36, 25]]
** centroid: 2, normalized-entropy: 0.9764143081154868, [(2, 36), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [103, 14, 0]]
** centroid: 3, normalized-entropy: 0.5283773417314562, [(1, 103), (2, 14)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 50, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [56, 96, 0]]
** centroid: 6, normalized-entropy: 0.9494520153879484, [(1, 56), (2, 96)]
*** center 7: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25483048304139094] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25483048304139094, 0.20633020484750195] ***
*** finished computation of 7 references, err: [Inf, 0.25483048304139094, 0.20633020484750195] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [49, 39, 0]]
** centroid: 1, normalized-entropy: 0.9906649266228326, [(1, 49), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [139, 32, 0]]
** centroid: 2, normalized-entropy: 0.6954384265317016, [(1, 139), (2, 32)]
*** center 3: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 105, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [36, 48, 0]]
** centroid: 5, normalized-entropy: 0.9852281360342514, [(1, 36), (2, 48)]
*** center 6: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 21, 20]]
** centroid: 7, normalized-entropy: 0.9995708393473225, [(2, 21), (3, 20)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26276446294285233] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26276446294285233, 0.21232450584779078] ***
*** finished computation of 7 references, err: [Inf, 0.26276446294285233, 0.21232450584779078] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [11, 73, 25]]
** centroid: 1, normalized-entropy: 0.762468454738746, [(1, 11), (2, 73), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [45, 19, 0]]
** centroid: 2, normalized-entropy: 0.877437311089633, [(1, 45), (2, 19)]
*** center 3: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 108, 0]]
** centroid: 6, normalized-entropy: 0.3912435636292556, [(1, 9), (2, 108)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [76, 33, 0]]
** centroid: 7, normalized-entropy: 0.8846293067903075, [(1, 76), (2, 33)]
finished with 12 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 9)
[0.9520148891406376, 0.9410038781296267, 0.9379798960637284, 0.9290128451805099, 0.9279878681076287, 0.8880077682472892, 0.8700257143370916, 0.8338967710225195, 0.807001612390834]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.3, 2) => 0.9520148891406376
finished with 9
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 9)
[0.9520148891406376, 0.9410038781296267, 0.9379798960637284, 0.9290128451805099, 0.9279878681076287, 0.8880077682472892, 0.8700257143370916, 0.8338967710225195, 0.807001612390834]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.3, 2) => 0.9520148891406376
finished with 9
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 9)
[0.9520148891406376, 0.9410038781296267, 0.9379798960637284, 0.9290128451805099, 0.9279878681076287, 0.8880077682472892, 0.8700257143370916, 0.8338967710225195, 0.807001612390834]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.3, 2) => 0.9520148891406376
finished with 9
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 9)
[0.9520148891406376, 0.9410038781296267, 0.9379798960637284, 0.9290128451805099, 0.9279878681076287, 0.8880077682472892, 0.8700257143370916, 0.8338967710225195, 0.807001612390834]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.3, 2) => 0.9520148891406376
finished with 10
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.2206500014590866] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2206500014590866, 0.18936467081778222] ***
*** starting iteration: 2; err: [Inf, 0.2206500014590866, 0.18936467081778222] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2206500014590866, 0.18936467081778222, 0.18832093934659977] ***
*** starting iteration: 3; err: [Inf, 0.2206500014590866, 0.18936467081778222, 0.18832093934659977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2206500014590866, 0.18936467081778222, 0.18832093934659977, 0.18831682114305348] ***
*** finished computation of 7 references, err: [Inf, 0.2206500014590866, 0.18936467081778222, 0.18832093934659977, 0.18831682114305348] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [109, 10, 0]]
** centroid: 1, normalized-entropy: 0.41623480238728294, [(1, 109), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [69, 10, 0]]
** centroid: 2, normalized-entropy: 0.5479900080939728, [(1, 69), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 44, 25]]
** centroid: 3, normalized-entropy: 0.9445911819316588, [(2, 44), (3, 25)]
*** center 4: selecting labels [1] (freq >= 1) [from [123, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [101, 6, 0]]
** centroid: 5, normalized-entropy: 0.31166198862303296, [(1, 101), (2, 6)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 80, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 88, 0]]
** centroid: 7, normalized-entropy: 0.08887969568457589, [(1, 1), (2, 88)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23929417162792926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23929417162792926, 0.19764508925534707] ***
*** starting iteration: 2; err: [Inf, 0.23929417162792926, 0.19764508925534707] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23929417162792926, 0.19764508925534707, 0.19420621230237667] ***
*** starting iteration: 3; err: [Inf, 0.23929417162792926, 0.19764508925534707, 0.19420621230237667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23929417162792926, 0.19764508925534707, 0.19420621230237667, 0.1939790046241866] ***
*** finished computation of 7 references, err: [Inf, 0.23929417162792926, 0.19764508925534707, 0.19420621230237667, 0.1939790046241866] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [14, 86, 0]]
** centroid: 1, normalized-entropy: 0.5842388116428561, [(1, 14), (2, 86)]
*** center 2: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [91, 1, 0]]
** centroid: 3, normalized-entropy: 0.08650421412134586, [(1, 91), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [94, 9, 0]]
** centroid: 4, normalized-entropy: 0.4276590022251725, [(1, 94), (2, 9)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 63, 20]]
** centroid: 5, normalized-entropy: 0.7966394665488286, [(2, 63), (3, 20)]
*** center 6: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [17, 86, 0]]
** centroid: 7, normalized-entropy: 0.646251622274129, [(1, 17), (2, 86)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23089450090213204] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23089450090213204, 0.19347607161056646] ***
*** starting iteration: 2; err: [Inf, 0.23089450090213204, 0.19347607161056646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23089450090213204, 0.19347607161056646, 0.18973535711030898] ***
*** starting iteration: 3; err: [Inf, 0.23089450090213204, 0.19347607161056646, 0.18973535711030898] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23089450090213204, 0.19347607161056646, 0.18973535711030898, 0.18805601704039093] ***
*** starting iteration: 4; err: [Inf, 0.23089450090213204, 0.19347607161056646, 0.18973535711030898, 0.18805601704039093] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23089450090213204, 0.19347607161056646, 0.18973535711030898, 0.18805601704039093, 0.18639024136472085] ***
*** starting iteration: 5; err: [Inf, 0.23089450090213204, 0.19347607161056646, 0.18973535711030898, 0.18805601704039093, 0.18639024136472085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23089450090213204, 0.19347607161056646, 0.18973535711030898, 0.18805601704039093, 0.18639024136472085, 0.18515854539011775] ***
*** starting iteration: 6; err: [Inf, 0.23089450090213204, 0.19347607161056646, 0.18973535711030898, 0.18805601704039093, 0.18639024136472085, 0.18515854539011775] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23089450090213204, 0.19347607161056646, 0.18973535711030898, 0.18805601704039093, 0.18639024136472085, 0.18515854539011775, 0.1845713271473212] ***
*** finished computation of 7 references, err: [Inf, 0.23089450090213204, 0.19347607161056646, 0.18973535711030898, 0.18805601704039093, 0.18639024136472085, 0.18515854539011775, 0.1845713271473212] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [8, 89, 0]]
** centroid: 1, normalized-entropy: 0.4108378385169277, [(1, 8), (2, 89)]
*** center 2: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [84, 6, 0]]
** centroid: 3, normalized-entropy: 0.3533593350214213, [(1, 84), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [86, 4, 0]]
** centroid: 4, normalized-entropy: 0.2623112196143368, [(1, 86), (2, 4)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 57, 25]]
** centroid: 5, normalized-entropy: 0.8871723027673716, [(2, 57), (3, 25)]
*** center 6: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [26, 77, 0]]
** centroid: 7, normalized-entropy: 0.8151025048028707, [(1, 26), (2, 77)]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 10)
[0.9520148891406376, 0.9410038781296267, 0.9379798960637284, 0.9290128451805099, 0.9279878681076287, 0.9209808611006216, 0.8880077682472892, 0.8700257143370916, 0.8338967710225195, 0.807001612390834]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.3, 2) => 0.9520148891406376
finished with 11
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.4834838470880378] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4834838470880378, 0.3081357020230309] ***
*** finished computation of 3 references, err: [Inf, 0.4834838470880378, 0.3081357020230309] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [78, 145, 25]]
** centroid: 1, normalized-entropy: 0.8273221304976234, [(1, 78), (2, 145), (3, 25)]
*** center 2: selecting labels [1] (freq >= 1) [from [168, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [157, 93, 0]]
** centroid: 3, normalized-entropy: 0.9521953766259578, [(1, 157), (2, 93)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.32050783563310326] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32050783563310326, 0.29855377504091035] ***
*** finished computation of 3 references, err: [Inf, 0.32050783563310326, 0.29855377504091035] ***
*** center 1: selecting labels [1] (freq >= 1) [from [172, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [91, 133, 20]]
** centroid: 2, normalized-entropy: 0.82253451500733, [(1, 91), (2, 133), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [139, 112, 0]]
** centroid: 3, normalized-entropy: 0.9916369388949186, [(1, 139), (2, 112)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3807743215777058] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3807743215777058, 0.3116365668721318] ***
*** finished computation of 3 references, err: [Inf, 0.3807743215777058, 0.3116365668721318] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [216, 15, 0]]
** centroid: 1, normalized-entropy: 0.34673146824966367, [(1, 216), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [124, 106, 0]]
** centroid: 2, normalized-entropy: 0.9955773958501508, [(1, 124), (2, 106)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [69, 112, 25]]
** centroid: 3, normalized-entropy: 0.8680207969095405, [(1, 69), (2, 112), (3, 25)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 11)
[0.9520148891406376, 0.9410038781296267, 0.9379798960637284, 0.9290128451805099, 0.9279878681076287, 0.9209808611006216, 0.8880077682472892, 0.8700257143370916, 0.8338967710225195, 0.8230116343888799, 0.807001612390834]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.3, 2) => 0.9520148891406376
finished with 11
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.19759428032609866] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19759428032609866, 0.1539778789654374] ***
*** finished computation of 7 references, err: [Inf, 0.19759428032609866, 0.1539778789654374] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 156, 27]]
** centroid: 1, normalized-entropy: 0.603652249754401, [(2, 156), (3, 27)]
*** center 2: selecting labels [1] (freq >= 2) [from [140, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [97, 13, 0]]
** centroid: 3, normalized-entropy: 0.5241118769066088, [(1, 97), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [172, 25, 0]]
** centroid: 4, normalized-entropy: 0.5488845983745034, [(1, 172), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [102, 44, 0]]
** centroid: 5, normalized-entropy: 0.8829589691462253, [(1, 102), (2, 44)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 120, 8]]
** centroid: 6, normalized-entropy: 0.3372900666170139, [(2, 120), (3, 8)]
*** center 7: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18882447790168225] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18882447790168225, 0.14872123227640988] ***
*** finished computation of 7 references, err: [Inf, 0.18882447790168225, 0.14872123227640988] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [9, 76, 0]]
** centroid: 1, normalized-entropy: 0.48736957102366285, [(1, 9), (2, 76)]
*** center 2: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 4, 0]]
** centroid: 3, normalized-entropy: 0.3712323266408756, [(1, 52), (2, 4)]
*** center 4: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [85, 11, 0]]
** centroid: 6, normalized-entropy: 0.5135877363803757, [(1, 85), (2, 11)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 31, 14]]
** centroid: 7, normalized-entropy: 0.8944518845341284, [(2, 31), (3, 14)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18849297445081176] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18849297445081176, 0.15352927075326442] ***
*** finished computation of 7 references, err: [Inf, 0.18849297445081176, 0.15352927075326442] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [101, 11, 0]]
** centroid: 1, normalized-entropy: 0.46330931881705484, [(1, 101), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [45, 7, 0]]
** centroid: 2, normalized-entropy: 0.5699613760403499, [(1, 45), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 34, 18]]
** centroid: 3, normalized-entropy: 0.9305861291319927, [(2, 34), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [12, 69, 0]]
** centroid: 5, normalized-entropy: 0.6051865766334207, [(1, 12), (2, 69)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 53, 0]]
** centroid: 6, normalized-entropy: 0.5605769426145328, [(1, 8), (2, 53)]
*** center 7: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1880039470139891] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1880039470139891, 0.15170443849638104] ***
*** finished computation of 7 references, err: [Inf, 0.1880039470139891, 0.15170443849638104] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [58, 40, 0]]
** centroid: 1, normalized-entropy: 0.9755259511264975, [(1, 58), (2, 40)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [39, 4, 0]]
** centroid: 2, normalized-entropy: 0.446481346896803, [(1, 39), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 61, 14]]
** centroid: 3, normalized-entropy: 0.6944460704939805, [(2, 61), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [42, 6, 0]]
** centroid: 5, normalized-entropy: 0.5435644431995963, [(1, 42), (2, 6)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 78, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [84, 1, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19563814421463757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19563814421463757, 0.1547703183479607] ***
*** finished computation of 7 references, err: [Inf, 0.19563814421463757, 0.1547703183479607] ***
*** center 1: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 39, 19]]
** centroid: 2, normalized-entropy: 0.912441179764541, [(2, 39), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [41, 6, 0]]
** centroid: 3, normalized-entropy: 0.5509844433017146, [(1, 41), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 18, 0]]
** centroid: 4, normalized-entropy: 0.7642045065086204, [(1, 63), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 55, 0]]
** centroid: 5, normalized-entropy: 0.9366673818775627, [(1, 30), (2, 55)]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 65, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1805539129935205] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1805539129935205, 0.14924630915932358] ***
*** finished computation of 7 references, err: [Inf, 0.1805539129935205, 0.14924630915932358] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 73, 20]]
** centroid: 1, normalized-entropy: 0.7510324165275097, [(2, 73), (3, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 19, 0]]
** centroid: 4, normalized-entropy: 0.785889583138768, [(1, 62), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 21, 0]]
** centroid: 5, normalized-entropy: 0.8453509366224364, [(1, 56), (2, 21)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 64, 0]]
** centroid: 6, normalized-entropy: 0.4220005168831531, [(1, 6), (2, 64)]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20222202746570112] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20222202746570112, 0.15359163734130563] ***
*** finished computation of 7 references, err: [Inf, 0.20222202746570112, 0.15359163734130563] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [47, 26, 0]]
** centroid: 1, normalized-entropy: 0.9394532068181357, [(1, 47), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 21, 0]]
** centroid: 2, normalized-entropy: 0.8503821170987139, [(1, 55), (2, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 56, 16]]
** centroid: 4, normalized-entropy: 0.7642045065086204, [(2, 56), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 63, 0]]
** centroid: 5, normalized-entropy: 0.8904916402194913, [(1, 28), (2, 63)]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1896525790449232] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1896525790449232, 0.153437107661739] ***
*** finished computation of 7 references, err: [Inf, 0.1896525790449232, 0.153437107661739] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 61, 1]]
*** center 2: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 15, 0]]
** centroid: 3, normalized-entropy: 0.7918583525674836, [(1, 48), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [97, 6, 0]]
** centroid: 4, normalized-entropy: 0.32046828741158423, [(1, 97), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [37, 41, 0]]
** centroid: 5, normalized-entropy: 0.9981021327390103, [(1, 37), (2, 41)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 60, 19]]
** centroid: 6, normalized-entropy: 0.7958812735955936, [(2, 60), (3, 19)]
*** center 7: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1946084940386936] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1946084940386936, 0.15520716603845358] ***
*** finished computation of 7 references, err: [Inf, 0.1946084940386936, 0.15520716603845358] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 3, 0]]
** centroid: 2, normalized-entropy: 0.25253077151613923, [(1, 68), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 34, 22]]
** centroid: 3, normalized-entropy: 0.9666186325481027, [(2, 34), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 38, 0]]
** centroid: 5, normalized-entropy: 0.9934472383802028, [(1, 46), (2, 38)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 53, 0]]
** centroid: 6, normalized-entropy: 0.5605769426145328, [(1, 8), (2, 53)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 54, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18654641255084425] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18654641255084425, 0.15037060120422394] ***
*** finished computation of 7 references, err: [Inf, 0.18654641255084425, 0.15037060120422394] ***
*** center 1: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 51, 17]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(2, 51), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [66, 8, 0]]
** centroid: 3, normalized-entropy: 0.4941829348497886, [(1, 66), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [8, 54, 0]]
** centroid: 4, normalized-entropy: 0.5547781633412736, [(1, 8), (2, 54)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [27, 54, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 27), (2, 54)]
*** center 6: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18368857884407044] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18368857884407044, 0.14914027944114058] ***
*** finished computation of 7 references, err: [Inf, 0.18368857884407044, 0.14914027944114058] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [25, 60, 0]]
** centroid: 1, normalized-entropy: 0.8739810481273581, [(1, 25), (2, 60)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 10, 0]]
** centroid: 2, normalized-entropy: 0.625262405223423, [(1, 54), (2, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 61, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [79, 17, 0]]
** centroid: 5, normalized-entropy: 0.673654715229001, [(1, 79), (2, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 32, 21]]
** centroid: 7, normalized-entropy: 0.9687003436508602, [(2, 32), (3, 21)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1933619829658419] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1933619829658419, 0.15029068589024247] ***
*** finished computation of 7 references, err: [Inf, 0.1933619829658419, 0.15029068589024247] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [43, 54, 0]]
** centroid: 1, normalized-entropy: 0.9907034651869471, [(1, 43), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 3, 0]]
** centroid: 2, normalized-entropy: 0.3095434291503252, [(1, 51), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 50, 15]]
** centroid: 4, normalized-entropy: 0.7793498372920851, [(2, 50), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 24, 0]]
** centroid: 5, normalized-entropy: 0.8951127210954559, [(1, 53), (2, 24)]
*** center 6: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 56, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19817081640660764] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19817081640660764, 0.14995403762347997] ***
*** finished computation of 7 references, err: [Inf, 0.19817081640660764, 0.14995403762347997] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [50, 35, 0]]
** centroid: 1, normalized-entropy: 0.9774178175281716, [(1, 50), (2, 35)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 2, 0]]
** centroid: 2, normalized-entropy: 0.2108423003185322, [(1, 58), (2, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 52, 21]]
** centroid: 4, normalized-entropy: 0.8656939941993219, [(2, 52), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 28, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 56), (2, 28)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 57, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19597013455629347] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19597013455629347, 0.15037717337161302] ***
*** finished computation of 7 references, err: [Inf, 0.19597013455629347, 0.15037717337161302] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [54, 6, 0]]
** centroid: 1, normalized-entropy: 0.46899559358928133, [(1, 54), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 17, 0]]
** centroid: 2, normalized-entropy: 0.7615877869576693, [(1, 60), (2, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 43, 15]]
** centroid: 4, normalized-entropy: 0.8246578332945033, [(2, 43), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [60, 37, 0]]
** centroid: 5, normalized-entropy: 0.9590550044058676, [(1, 60), (2, 37)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 76, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19020144136063755] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19020144136063755, 0.15068217486608773] ***
*** finished computation of 7 references, err: [Inf, 0.19020144136063755, 0.15068217486608773] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [13, 55, 0]]
** centroid: 1, normalized-entropy: 0.7039260680195971, [(1, 13), (2, 55)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 12, 0]]
** centroid: 2, normalized-entropy: 0.6098403047164005, [(1, 68), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 68, 17]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(2, 68), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [47, 29, 0]]
** centroid: 5, normalized-entropy: 0.9591495543968941, [(1, 47), (2, 29)]
*** center 6: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19055091570690275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19055091570690275, 0.15276092005427927] ***
*** finished computation of 7 references, err: [Inf, 0.19055091570690275, 0.15276092005427927] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [92, 9, 0]]
** centroid: 1, normalized-entropy: 0.43348846324460666, [(1, 92), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 5, 0]]
** centroid: 2, normalized-entropy: 0.378958787501346, [(1, 63), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 39, 14]]
** centroid: 3, normalized-entropy: 0.8329458235361399, [(2, 39), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [19, 57, 0]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(1, 19), (2, 57)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [42, 5, 0]]
** centroid: 6, normalized-entropy: 0.48890859144051524, [(1, 42), (2, 5)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 69, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18350440506450832] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18350440506450832, 0.1520678745592013] ***
*** finished computation of 7 references, err: [Inf, 0.18350440506450832, 0.1520678745592013] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [100, 3, 0]]
** centroid: 1, normalized-entropy: 0.18999075553626757, [(1, 100), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [44, 11, 0]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(1, 44), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 39, 16]]
** centroid: 3, normalized-entropy: 0.8698926856041562, [(2, 39), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 80, 0]]
** centroid: 5, normalized-entropy: 0.32275695889739825, [(1, 5), (2, 80)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [11, 58, 0]]
** centroid: 7, normalized-entropy: 0.6329208984823799, [(1, 11), (2, 58)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18328094481304288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18328094481304288, 0.14819714975170792] ***
*** finished computation of 7 references, err: [Inf, 0.18328094481304288, 0.14819714975170792] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [10, 75, 0]]
** centroid: 1, normalized-entropy: 0.5225593745369407, [(1, 10), (2, 75)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 3, 0]]
** centroid: 2, normalized-entropy: 0.3095434291503252, [(1, 51), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 65, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [80, 4, 0]]
** centroid: 6, normalized-entropy: 0.2761954276479391, [(1, 80), (2, 4)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 28, 19]]
** centroid: 7, normalized-entropy: 0.9733854352299557, [(2, 28), (3, 19)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19164362256415188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19164362256415188, 0.15528574840538203] ***
*** finished computation of 7 references, err: [Inf, 0.19164362256415188, 0.15528574840538203] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [14, 78, 0]]
** centroid: 1, normalized-entropy: 0.6152538910563409, [(1, 14), (2, 78)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 17, 0]]
** centroid: 2, normalized-entropy: 0.829059069399666, [(1, 48), (2, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 75, 19]]
** centroid: 4, normalized-entropy: 0.7261630586710504, [(2, 75), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 15, 0]]
** centroid: 5, normalized-entropy: 0.6864381668766382, [(1, 67), (2, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [36, 3, 0]]
** centroid: 7, normalized-entropy: 0.3912435636292556, [(1, 36), (2, 3)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1764429197125137] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1764429197125137, 0.14645672293566167] ***
*** finished computation of 7 references, err: [Inf, 0.1764429197125137, 0.14645672293566167] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 76, 18]]
** centroid: 1, normalized-entropy: 0.7045767128725937, [(2, 76), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [42, 2, 0]]
** centroid: 3, normalized-entropy: 0.2667649878030262, [(1, 42), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 14, 0]]
** centroid: 4, normalized-entropy: 0.7162583911075451, [(1, 57), (2, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 15, 0]]
** centroid: 5, normalized-entropy: 0.7012065844539666, [(1, 64), (2, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [19, 63, 0]]
** centroid: 7, normalized-entropy: 0.7809756883263416, [(1, 19), (2, 63)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1921073791887611] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1921073791887611, 0.15293394497595728] ***
*** finished computation of 7 references, err: [Inf, 0.1921073791887611, 0.15293394497595728] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 81, 21]]
** centroid: 1, normalized-entropy: 0.7335379291086666, [(2, 81), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 5, 0]]
** centroid: 3, normalized-entropy: 0.4186843105268563, [(1, 54), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 22, 0]]
** centroid: 4, normalized-entropy: 0.8533728188427888, [(1, 57), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 15, 0]]
** centroid: 5, normalized-entropy: 0.7114160189012126, [(1, 62), (2, 15)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18213894990086554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18213894990086554, 0.14831440872885288] ***
*** finished computation of 7 references, err: [Inf, 0.18213894990086554, 0.14831440872885288] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 85, 22]]
** centroid: 1, normalized-entropy: 0.7330022650766125, [(2, 85), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 2, 0]]
** centroid: 3, normalized-entropy: 0.2538784402981617, [(1, 45), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [64, 13, 0]]
** centroid: 4, normalized-entropy: 0.6550239908788728, [(1, 64), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 17, 0]]
** centroid: 5, normalized-entropy: 0.7412466905234424, [(1, 64), (2, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [14, 54, 0]]
** centroid: 7, normalized-entropy: 0.7335379291086666, [(1, 14), (2, 54)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20281584694981575] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20281584694981575, 0.15706484282016756] ***
*** finished computation of 7 references, err: [Inf, 0.20281584694981575, 0.15706484282016756] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [35, 52, 0]]
** centroid: 1, normalized-entropy: 0.9722794620968822, [(1, 35), (2, 52)]
*** center 2: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 5, 0]]
** centroid: 3, normalized-entropy: 0.4507913883546652, [(1, 48), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 9, 0]]
** centroid: 4, normalized-entropy: 0.5032583347756457, [(1, 72), (2, 9)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 42, 17]]
** centroid: 5, normalized-entropy: 0.8663006754980497, [(2, 42), (3, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 51, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18862168424203993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18862168424203993, 0.1494404355334118] ***
*** finished computation of 7 references, err: [Inf, 0.18862168424203993, 0.1494404355334118] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [13, 81, 0]]
** centroid: 1, normalized-entropy: 0.57976367540648, [(1, 13), (2, 81)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 8, 0]]
** centroid: 2, normalized-entropy: 0.5665095065529052, [(1, 52), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 60, 19]]
** centroid: 4, normalized-entropy: 0.7958812735955936, [(2, 60), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [78, 15, 0]]
** centroid: 5, normalized-entropy: 0.6373874992221911, [(1, 78), (2, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [42, 2, 0]]
** centroid: 7, normalized-entropy: 0.2667649878030262, [(1, 42), (2, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20618482803553342] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20618482803553342, 0.1504061815403402] ***
*** finished computation of 7 references, err: [Inf, 0.20618482803553342, 0.1504061815403402] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [47, 47, 0]]
** centroid: 1, normalized-entropy: 1.0, [(1, 47), (2, 47)]
*** center 2: selecting labels [1] (freq >= 2) [from [49, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 45, 18]]
** centroid: 4, normalized-entropy: 0.8631205685666311, [(2, 45), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [58, 13, 0]]
** centroid: 5, normalized-entropy: 0.6868088934028034, [(1, 58), (2, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 61, 0]]
** centroid: 7, normalized-entropy: 0.20307392998664567, [(1, 2), (2, 61)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18962641773186625] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18962641773186625, 0.1531383253913373] ***
*** finished computation of 7 references, err: [Inf, 0.18962641773186625, 0.1531383253913373] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [56, 11, 0]]
** centroid: 1, normalized-entropy: 0.6442142137378306, [(1, 56), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 14, 0]]
** centroid: 2, normalized-entropy: 0.7771529943226336, [(1, 47), (2, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 59, 14]]
** centroid: 4, normalized-entropy: 0.7051819722888517, [(2, 59), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 22, 0]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(1, 66), (2, 22)]
*** center 6: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 81, 1]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18524698945879936] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18524698945879936, 0.15183327180333436] ***
*** finished computation of 7 references, err: [Inf, 0.18524698945879936, 0.15183327180333436] ***
*** center 1: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 27, 15]]
** centroid: 2, normalized-entropy: 0.940285958670631, [(2, 27), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 8, 0]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(1, 48), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [69, 11, 0]]
** centroid: 4, normalized-entropy: 0.5776539033535634, [(1, 69), (2, 11)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [16, 73, 0]]
** centroid: 5, normalized-entropy: 0.6795851972782937, [(1, 16), (2, 73)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 59, 0]]
** centroid: 7, normalized-entropy: 0.2795055456366802, [(1, 3), (2, 59)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20257825185358525] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20257825185358525, 0.15064944425038992] ***
*** finished computation of 7 references, err: [Inf, 0.20257825185358525, 0.15064944425038992] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [75, 7, 0]]
** centroid: 1, normalized-entropy: 0.42080948947668984, [(1, 75), (2, 7)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 27, 16]]
** centroid: 2, normalized-entropy: 0.9522656254366643, [(2, 27), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [69, 2, 0]]
** centroid: 3, normalized-entropy: 0.18512476010054582, [(1, 69), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 4, 0]]
** centroid: 4, normalized-entropy: 0.2974722489192896, [(1, 72), (2, 4)]
*** center 5: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 77, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 70, 0]]
** centroid: 7, normalized-entropy: 0.30337483608641397, [(1, 4), (2, 70)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1908397991284728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1908397991284728, 0.15017971851304174] ***
*** finished computation of 7 references, err: [Inf, 0.1908397991284728, 0.15017971851304174] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [44, 50, 0]]
** centroid: 1, normalized-entropy: 0.9970590569034106, [(1, 44), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 14, 0]]
** centroid: 2, normalized-entropy: 0.7335379291086666, [(1, 54), (2, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 74, 17]]
** centroid: 4, normalized-entropy: 0.6947570868163001, [(2, 74), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 29, 0]]
** centroid: 5, normalized-entropy: 0.9725523165688429, [(1, 43), (2, 29)]
*** center 6: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19235671008657665] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19235671008657665, 0.1528091284427792] ***
*** finished computation of 7 references, err: [Inf, 0.19235671008657665, 0.1528091284427792] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [75, 12, 0]]
** centroid: 1, normalized-entropy: 0.5787946246321198, [(1, 75), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [65, 5, 0]]
** centroid: 2, normalized-entropy: 0.3712323266408756, [(1, 65), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 34, 20]]
** centroid: 3, normalized-entropy: 0.9509560484549724, [(2, 34), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 70, 0]]
** centroid: 5, normalized-entropy: 0.7793498372920851, [(1, 21), (2, 70)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [43, 1, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1853273920547217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1853273920547217, 0.15152121147233993] ***
*** finished computation of 7 references, err: [Inf, 0.1853273920547217, 0.15152121147233993] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [87, 2, 0]]
** centroid: 1, normalized-entropy: 0.1551032721030341, [(1, 87), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 48, 11]]
** centroid: 2, normalized-entropy: 0.693965967334286, [(2, 48), (3, 11)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [42, 3, 0]]
** centroid: 3, normalized-entropy: 0.3533593350214213, [(1, 42), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [43, 63, 0]]
** centroid: 4, normalized-entropy: 0.9741655523680581, [(1, 43), (2, 63)]
*** center 5: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [21, 56, 0]]
** centroid: 6, normalized-entropy: 0.8453509366224364, [(1, 21), (2, 56)]
*** center 7: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 358,3 => 35,1 => 607), Dict(2 => 380,3 => 39,1 => 581))
[ Info: ===== scores for single classifier: {"micro_f1":0.91,"precision":0.91,"recall":0.91,"macro_recall":0.9389573330917655,"macro_f1":0.8492975505993267,"accuracy":0.91,"class_f1":{"2":0.8857868020304568,"3":0.7155963302752294,"1":0.9465095194922938},"class_precision":{"2":0.8553921568627451,"3":0.5571428571428572,"1":1.0},"class_recall":{"2":0.9184210526315789,"3":1.0,"1":0.8984509466437177}}
[ Info: ===== scores for 1: {"micro_f1":0.977,"precision":0.977,"recall":0.977,"macro_recall":0.9583324622956836,"macro_f1":0.9707968882905994,"accuracy":0.977,"class_f1":{"2":0.9694555112881805,"3":0.9600000000000001,"1":0.9829351535836177},"class_precision":{"2":0.9785522788203753,"3":1.0,"1":0.9746192893401016},"class_recall":{"2":0.9605263157894737,"3":0.9230769230769231,"1":0.9913941480206541}}
[ Info: ===== scores for 5: {"micro_f1":0.963,"precision":0.963,"recall":0.963,"macro_recall":0.9503003337816275,"macro_f1":0.9607997123725586,"accuracy":0.963,"class_f1":{"2":0.9517601043024772,"3":0.9600000000000001,"1":0.9706390328151987},"class_precision":{"2":0.9431524547803618,"3":1.0,"1":0.9740034662045061},"class_recall":{"2":0.9605263157894737,"3":0.9230769230769231,"1":0.9672977624784854}}
[ Info: ===== scores for 7: {"micro_f1":0.959,"precision":0.959,"recall":0.959,"macro_recall":0.9477019704033021,"macro_f1":0.9579373442944071,"accuracy":0.959,"class_f1":{"2":0.9466840052015605,"3":0.9600000000000001,"1":0.9671280276816608},"class_precision":{"2":0.9357326478149101,"3":1.0,"1":0.9721739130434782},"class_recall":{"2":0.9578947368421052,"3":0.9230769230769231,"1":0.9621342512908778}}
[ Info: ===== scores for 9: {"micro_f1":0.96,"precision":0.96,"recall":0.96,"macro_recall":0.955945509433144,"macro_f1":0.9589467943972595,"accuracy":0.96,"class_f1":{"2":0.947780678851175,"3":0.9610389610389611,"1":0.9680207433016421},"class_precision":{"2":0.9404145077720207,"3":0.9736842105263158,"1":0.9722222222222222},"class_recall":{"2":0.9552631578947368,"3":0.9487179487179487,"1":0.963855421686747}}
[ Info: ===== scores for 11: {"micro_f1":0.955,"precision":0.955,"recall":0.955,"macro_recall":0.9524699530723627,"macro_f1":0.9515166566014023,"accuracy":0.955,"class_f1":{"2":0.9413298565840938,"3":0.9487179487179487,"1":0.9645021645021644},"class_precision":{"2":0.9328165374677002,"3":0.9487179487179487,"1":0.9703832752613241},"class_recall":{"2":0.95,"3":0.9487179487179487,"1":0.9586919104991394}}
(score = 0.975, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.975, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.977, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.975, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.975, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.977, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.963, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.963, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.963, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.963, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.964, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.964, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.959, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.959, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.977,"k":1,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.977,"precision":0.977,"recall":0.977,"macro_recall":0.9583324622956836,"macro_f1":0.9707968882905994,"accuracy":0.977,"class_f1":{"2":0.9694555112881805,"3":0.9600000000000001,"1":0.9829351535836177},"class_precision":{"2":0.9785522788203753,"3":1.0,"1":0.9746192893401016},"class_recall":{"2":0.9605263157894737,"3":0.9230769230769231,"1":0.9913941480206541}}
Test Summary: | Pass  Total
AKNC          |    8      8
[644, 1, 2, 2, 1, 1, 3, 4, 4, 2, 32, 19, 14, 3, 4, 5, 3, 2, 8, 5, 2, 3, 2, 1, 19, 10, 4, 12, 23, 7, 7, 3, 5, 11, 28, 65, 3, 5, 4, 10, 3, 22, 3, 3, 13, 16, 11, 6, 16, 20, 5, 3, 13, 18, 5, 2, 2, 3, 2, 14, 14, 5, 4, 3, 26, 8, 8, 14, 3, 62, 13, 8, 5, 64, 40, 20, 68, 8, 23, 2, 4, 34, 15, 19, 4, 26, 40, 50, 2, 27, 53, 31, 18, 11, 7, 3, 10, 8, 12, 5, 42, 46, 12, 5, 35, 6, 3, 3, 44, 18, 10, 31, 1, 3, 16, 22, 11, 18, 28, 5, 8, 11, 116, 6, 5, 7, 24, 51, 26, 21, 8, 1, 16, 3, 41, 4, 171, 3, 14, 5, 28, 9, 188, 10, 17, 26, 11, 132, 493, 11, 6, 18, 27, 10, 5, 10, 4, 133, 83, 13, 144, 195, 29, 16, 4, 130, 27, 26, 78, 16, 7, 2, 5, 16, 51, 10, 97, 15, 62, 17, 10, 9, 7, 5, 5, 1, 44, 8, 33, 50, 33, 27, 1, 9, 87, 13, 78, 25, 17, 12, 80, 6, 27, 21, 95, 79, 3, 28, 8, 10, 51, 26, 10, 198, 23, 51, 46, 47, 47, 19, 12, 21, 12, 21, 22, 82, 55, 3, 164, 40, 43, 98, 12, 27, 2, 34, 2, 11, 2, 92, 9, 112, 35, 15, 96, 10, 154, 9, 22, 247, 25, 36, 50, 54, 22, 224, 1, 5, 61, 51, 4, 50, 9, 55, 20, 29, 2, 43, 12, 140, 6, 4, 34, 29, 20, 67, 11, 17, 5, 203, 20, 7, 4, 42, 40, 49, 7, 34, 3, 13, 6, 129, 116, 9, 10, 29, 54, 7, 7, 291]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6209999999999998, speedup = 0.3287022056137201, eval_ratio = 0.068872)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3681299603174601,"recall":0.3602430555555553,"f1":null,"seconds":0.00015801750123500824,"exhaustive_search_seconds":0.00035649165511131287,"evaluations":451.21875,"distances_sum":1754.435043719189}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5173611111111112,"recall":0.5173611111111112,"f1":null,"seconds":0.00024517253041267395,"exhaustive_search_seconds":0.00035649165511131287,"evaluations":561.71875,"distances_sum":1675.1351132642708}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.623263888888889,"recall":0.623263888888889,"f1":0.623263888888889,"seconds":0.0003172531723976135,"exhaustive_search_seconds":0.00035649165511131287,"evaluations":650.53125,"distances_sum":1609.7150490448623}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7031249999999996,"recall":0.7031249999999996,"f1":0.7031249999999996,"seconds":0.0003645215183496475,"exhaustive_search_seconds":0.00035649165511131287,"evaluations":744.46875,"distances_sum":1575.706400113819}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7769097222222215,"recall":0.7769097222222215,"f1":0.7769097222222215,"seconds":0.00044428929686546326,"exhaustive_search_seconds":0.00035649165511131287,"evaluations":850.8046875,"distances_sum":1552.8858073314516}
KCenters.DeloneInvIndex> reached performance {"precision":0.8246527777777771,"recall":0.8246527777777771,"f1":0.8246527777777771,"seconds":0.0005129557102918625,"exhaustive_search_seconds":0.00035649165511131287,"evaluations":968.6953125,"distances_sum":1540.5272811409543}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.796, speedup = 0.7293707816242108, eval_ratio = 0.097299)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
