Julia Version 1.5.0-DEV.295
Commit f5afdf9080 (2020-02-19 18:51 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed InvertedIndices ───────────── v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Parsers ───────────────────── v0.3.11
  Installed KCenters ──────────────────── v0.2.1
  Installed Tables ────────────────────── v1.0.1
  Installed MLDataUtils ───────────────── v0.5.0
  Installed MLDataPattern ─────────────── v0.5.0
  Installed DataFrames ────────────────── v0.20.2
  Installed DataValueInterfaces ───────── v1.0.0
  Installed DataAPI ───────────────────── v1.1.0
  Installed JSON ──────────────────────── v0.21.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed OrderedCollections ────────── v1.1.0
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed CategoricalArrays ─────────── v0.7.7
  Installed SimilaritySearch ──────────── v0.3.19
  Installed PooledArrays ──────────────── v0.5.3
  Installed Reexport ──────────────────── v0.2.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Compat ────────────────────── v3.5.0
  Installed TableTraits ───────────────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataStructures ────────────── v0.17.9
  Installed StatsBase ─────────────────── v0.32.1
  Installed Missings ──────────────────── v0.4.3
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.1
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.5.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.1
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.1
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_kPBqfi/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.5.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.1
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.1
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9316620069742203
[ Info: 0.8321307849884033
[ Info: 0.5556568817794323
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.32531724544862906
mean(cdnet.distances) = 0.3996147283663352
mean(crand.distances) = 0.32605083954830966
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.265625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.265625,"f1":null,"seconds":4.26173210144043e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":6.7109375,"distances_sum":610.2964212118247}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7431640625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7431640625,"f1":0.8454045954045962,"seconds":4.891306161880493e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.4765625,"distances_sum":1822.4778477257962}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7431640625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7431640625,"f1":0.8454045954045962,"seconds":4.891306161880493e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.4765625,"distances_sum":1822.4778477257962}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9408169955044959,"seconds":3.876164555549622e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.953125,"distances_sum":2364.294552347131}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8955078125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8955078125,"f1":0.9408169955044959,"seconds":3.876164555549622e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.953125,"distances_sum":2364.294552347131}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9586195054945059,"seconds":6.493180990219116e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.96875,"distances_sum":2501.8260850908805}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9502892940392944,"seconds":6.146728992462158e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.953125,"distances_sum":2465.541119625}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9586195054945059,"seconds":6.493180990219116e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.96875,"distances_sum":2501.8260850908805}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9586195054945059,"seconds":6.493180990219116e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.96875,"distances_sum":2501.8260850908805}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4404296875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4404296875,"f1":null,"seconds":3.1441450119018555e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.9375,"distances_sum":894.382031873365}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8546573218448226,"seconds":4.328787326812744e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.2578125,"distances_sum":1697.8843012290008}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.201171875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.201171875,"f1":null,"seconds":2.9727816581726074e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.234375,"distances_sum":436.1992856990297}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.8026426698301706,"seconds":4.077330231666565e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.921875,"distances_sum":1488.356648664391}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7578125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7578125,"f1":0.8546573218448226,"seconds":4.328787326812744e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.2578125,"distances_sum":1697.8843012290008}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9587683150183155,"seconds":5.0514936447143555e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.859375,"distances_sum":2306.0852951330517}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8648299617049625,"seconds":4.213303327560425e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.2890625,"distances_sum":1752.2698372292023}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9494162087912092,"seconds":5.034729838371277e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8046875,"distances_sum":2243.710948016275}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9587683150183155,"seconds":5.0514936447143555e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.859375,"distances_sum":2306.0852951330517}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9681375915750919,"seconds":5.086883902549744e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8828125,"distances_sum":2357.4489876063503}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.9826636904761906,"seconds":5.349516868591309e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.984375,"distances_sum":2456.6137395740866}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9791666666666667,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9609375,"distances_sum":2429.905592105364}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9681032509157513,"seconds":5.122274160385132e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9140625,"distances_sum":2369.8898264763643}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9677734375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9826636904761906,"seconds":5.349516868591309e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.984375,"distances_sum":2456.6137395740866}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9677734375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9826636904761906,"seconds":5.349516868591309e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.984375,"distances_sum":2456.6137395740866}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8692828005328014,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.421875,"distances_sum":1795.22771032645}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.21875,"f1":null,"seconds":2.469867467880249e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":6.15625,"distances_sum":482.6051718136465}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7802734375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7802734375,"f1":0.8692828005328014,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.421875,"distances_sum":1795.22771032645}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9567224442224446,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.8671875,"distances_sum":2337.1844334849175}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9648497335997341,"seconds":4.654750227928162e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.8828125,"distances_sum":2370.1741826971875}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9648497335997341,"seconds":4.654750227928162e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.8828125,"distances_sum":2370.1741826971875}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":8,"bsize":13}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.9825892857142862,"seconds":6.515532732009888e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.9765625,"distances_sum":2489.6410089102983}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":9,"bsize":13}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.9825892857142859,"seconds":6.373971700668335e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.953125,"distances_sum":2493.516758438558}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9688072344322347,"seconds":6.645917892456055e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.9296875,"distances_sum":2386.388894337362}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9666151556776561,"seconds":5.850568413734436e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.90625,"distances_sum":2397.15710320329}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9677734375,"state":{"ssize":8,"bsize":13},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9825892857142862,"seconds":6.515532732009888e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.9765625,"distances_sum":2489.6410089102983}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9677734375,"state":{"ssize":8,"bsize":13},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9825892857142862,"seconds":6.515532732009888e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.9765625,"distances_sum":2489.6410089102983}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.67578125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.67578125,"f1":0.7942182817182826,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":7.9609375,"distances_sum":1593.126747459658}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66015625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.66015625,"f1":0.782791167166168,"seconds":4.170462489128113e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":7.8984375,"distances_sum":1544.3153095995115}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5634765625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5634765625,"f1":0.7009572025197032,"seconds":4.302710294723511e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":7.140625,"distances_sum":1291.8211549518683}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.67578125,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.67578125,"f1":0.7942182817182826,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":7.9609375,"distances_sum":1593.126747459658}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8095703125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8095703125,"f1":0.8851965742590749,"seconds":5.198642611503601e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.59375,"distances_sum":1970.6328583444429}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.9199982309357314,"seconds":6.858259439468384e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.765625,"distances_sum":2162.4801885424395}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8697901057276067,"seconds":6.258487701416016e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.703125,"distances_sum":1898.0540312198102}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8593906093906102,"seconds":6.331130862236023e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.6328125,"distances_sum":1855.2468420192677}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.907698551448552,"seconds":5.865469574928284e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.65625,"distances_sum":2102.648378083148}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.86328125,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.86328125,"f1":0.9199982309357314,"seconds":6.858259439468384e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.765625,"distances_sum":2162.4801885424395}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":10,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9447229853479857,"seconds":5.0943344831466675e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.8671875,"distances_sum":2336.303211003467}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9237694597069601,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.7734375,"distances_sum":2180.143086043865}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9639537545787551,"seconds":4.479661583900452e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.8828125,"distances_sum":2440.472985200666}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9568337912087919,"seconds":6.502494215965271e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.8515625,"distances_sum":2409.5035780564735}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9521093489843494,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.8984375,"distances_sum":2373.7934933458805}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":9,"bsize":10},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9639537545787551,"seconds":4.479661583900452e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.8828125,"distances_sum":2440.472985200666}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9345703125,"state":{"ssize":9,"bsize":10},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9639537545787551,"seconds":4.479661583900452e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.8828125,"distances_sum":2440.472985200666}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5595703125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5595703125,"f1":null,"seconds":3.606081008911133e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":7.234375,"distances_sum":1185.4522789691323}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1904296875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1904296875,"f1":null,"seconds":3.077089786529541e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":5.5234375,"distances_sum":422.5621812011866}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5595703125,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5595703125,"f1":null,"seconds":3.606081008911133e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":7.234375,"distances_sum":1185.4522789691323}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9126691017316024,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.6953125,"distances_sum":1999.930256894166}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8709452006327016,"seconds":4.28222119808197e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.3046875,"distances_sum":1784.4685765571357}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9453353937728943,"seconds":4.751607775688171e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.78125,"distances_sum":2191.380244355893}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.796875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.796875,"f1":0.8811329295704305,"seconds":5.401670932769775e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.296875,"distances_sum":1847.7805807530383}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5908203125, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5908203125,"f1":0.727615960428461,"seconds":4.6156346797943115e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":7.2890625,"distances_sum":1313.7935610818272}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9453353937728943,"seconds":4.751607775688171e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.78125,"distances_sum":2191.380244355893}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9646062271062275,"seconds":4.887580871582031e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.921875,"distances_sum":2322.2568350174497}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9579842032967038,"seconds":5.926936864852905e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.9140625,"distances_sum":2274.4834147797033}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9581330128205133,"seconds":5.019828677177429e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8671875,"distances_sum":2262.918957016162}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9703754578754582,"seconds":5.034729838371277e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.90625,"distances_sum":2377.2046059181575}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9703754578754582,"seconds":5.034729838371277e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.90625,"distances_sum":2377.2046059181575}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9703754578754582,"seconds":5.034729838371277e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.90625,"distances_sum":2377.2046059181575}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3876953125, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3876953125,"f1":null,"seconds":4.174187779426575e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":5.671875,"distances_sum":777.8503718994624}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3876953125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3876953125,"f1":null,"seconds":3.5651028156280518e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":5.6015625,"distances_sum":796.47352305828}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.197265625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.197265625,"f1":null,"seconds":2.687796950340271e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":4.984375,"distances_sum":449.4596224711757}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.380859375, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.380859375,"f1":null,"seconds":3.7942081689834595e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":5.40625,"distances_sum":786.3236368960575}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3876953125,"state":{"ssize":5,"bsize":2},"perf":{"precision":null,"recall":0.3876953125,"f1":null,"seconds":4.174187779426575e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":5.671875,"distances_sum":777.8503718994624}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6689453125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6689453125,"f1":0.7909501956376964,"seconds":4.891306161880493e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.625,"distances_sum":1467.3445764240423}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.40234375, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.40234375,"f1":null,"seconds":4.3585896492004395e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":5.671875,"distances_sum":812.0577178718363}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.646484375, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.646484375,"f1":0.7743806540681548,"seconds":4.244968295097351e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.515625,"distances_sum":1410.092362223174}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.556640625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.556640625,"f1":null,"seconds":3.56137752532959e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":6.5,"distances_sum":1157.494714760524}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6689453125,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6689453125,"f1":0.7909501956376964,"seconds":4.891306161880493e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.625,"distances_sum":1467.3445764240423}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.736328125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.736328125,"f1":0.8380827505827514,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.8203125,"distances_sum":1637.5847311884158}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8799601440226448,"seconds":5.986541509628296e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.2890625,"distances_sum":1832.4394677651148}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9469608516483521,"seconds":5.7220458984375e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.78125,"distances_sum":2181.027663543867}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.716796875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.716796875,"f1":0.8225383991009,"seconds":4.2691826820373535e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.78125,"distances_sum":1546.3677097512955}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9447687728937733,"seconds":6.467103958129883e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.640625,"distances_sum":2221.474990054357}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9278247793872799,"seconds":8.13603401184082e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.7578125,"distances_sum":2073.3760286040556}, best_list's length: 14, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.9005380036630044,"seconds":3.98978590965271e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.3671875,"distances_sum":1898.6245106217298}, best_list's length: 15, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9469608516483521,"seconds":5.7220458984375e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.78125,"distances_sum":2181.027663543867}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.90625,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9469608516483521,"seconds":5.7220458984375e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.78125,"distances_sum":2181.027663543867}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.8057026307026316,"seconds":3.6507844924926758e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":7.5234375,"distances_sum":1660.8712253420726}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1787109375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1787109375,"f1":null,"seconds":2.1085143089294434e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":4.6796875,"distances_sum":450.00233030948937}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6884765625,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6884765625,"f1":0.8057026307026316,"seconds":3.6507844924926758e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":7.5234375,"distances_sum":1660.8712253420726}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.796875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.796875,"f1":0.8809581043956053,"seconds":3.891065716743469e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":8.3671875,"distances_sum":1922.8271362328067}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.796875,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.796875,"f1":0.8809581043956053,"seconds":3.891065716743469e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":8.3671875,"distances_sum":1922.8271362328067}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9183035714285721,"seconds":4.230067133903503e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":8.734375,"distances_sum":2088.84835520887}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.9132763070263078,"seconds":3.883615136146545e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":8.6796875,"distances_sum":2083.6186585858363}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9501945970695976,"seconds":4.33996319770813e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":8.8203125,"distances_sum":2330.2298060866565}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9501945970695976,"seconds":4.33996319770813e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":8.8203125,"distances_sum":2330.2298060866565}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.912109375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9501945970695976,"seconds":4.33996319770813e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":8.8203125,"distances_sum":2330.2298060866565}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.860373307248308,"seconds":3.857538104057312e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.3359375,"distances_sum":1822.8445250041163}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7138671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7138671875,"f1":0.8227510336885346,"seconds":4.090368747711182e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.1953125,"distances_sum":1638.0205863653387}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.794921875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.794921875,"f1":0.8780433108558117,"seconds":3.982335329055786e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.4375,"distances_sum":1881.543799735491}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.794921875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.794921875,"f1":0.8780433108558117,"seconds":3.982335329055786e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.4375,"distances_sum":1881.543799735491}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9611664377289382,"seconds":5.0477683544158936e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.84375,"distances_sum":2361.215023739571}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9614099442224445,"seconds":5.302950739860535e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.875,"distances_sum":2395.625584216019}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9614099442224445,"seconds":5.302950739860535e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.875,"distances_sum":2395.625584216019}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9817708333333338,"seconds":4.479661583900452e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.9453125,"distances_sum":2521.7269893536745}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.970703125, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.970703125,"f1":0.984060210622711,"seconds":5.444511771202087e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.9765625,"distances_sum":2534.562248124591}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9657623626373631,"seconds":6.865710020065308e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.90625,"distances_sum":2412.983725726554}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9697265625, conf: {"ssize":7,"bsize":13}, perf: {"precision":1.0,"recall":0.9697265625,"f1":0.9837797619047621,"seconds":5.131587386131287e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.984375,"distances_sum":2533.033834913674}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.970703125,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.984060210622711,"seconds":5.444511771202087e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.9765625,"distances_sum":2534.562248124591}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.970703125,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.984060210622711,"seconds":5.444511771202087e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":8.9765625,"distances_sum":2534.562248124591}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.291015625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.291015625,"f1":null,"seconds":3.0007213354110718e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":6.109375,"distances_sum":581.4536793061267}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.291015625,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.291015625,"f1":null,"seconds":3.0007213354110718e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":6.109375,"distances_sum":581.4536793061267}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.7890323218448226,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.2734375,"distances_sum":1253.422250698153}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.857458687146188,"seconds":6.115064024925232e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.59375,"distances_sum":1474.3931259500912}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8711913086913096,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.703125,"distances_sum":1551.1236933048601}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7822265625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7822265625,"f1":0.8711913086913096,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.703125,"distances_sum":1551.1236933048601}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9578010531135532,"seconds":7.081776857376099e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.7734375,"distances_sum":2089.6014321432613}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9228537087912098,"seconds":6.789341568946838e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.3828125,"distances_sum":1861.542853186787}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9669127747252753,"seconds":7.249414920806885e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.84375,"distances_sum":2123.67529590831}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9538347069597076,"seconds":6.953254342079163e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.7421875,"distances_sum":2051.5828766403256}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9462168040293046,"seconds":6.990507245063782e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.6796875,"distances_sum":2007.404629028083}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9669127747252753,"seconds":7.249414920806885e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.84375,"distances_sum":2123.67529590831}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9669127747252753,"seconds":7.249414920806885e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.84375,"distances_sum":2123.67529590831}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.552734375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.552734375,"f1":0.6997929154179161,"seconds":2.7976930141448975e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":6.6796875,"distances_sum":1070.6350066838243}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.552734375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.552734375,"f1":0.6997929154179161,"seconds":2.7976930141448975e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":6.6796875,"distances_sum":1070.6350066838243}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.9192146395271402,"seconds":4.060566425323486e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":8.4375,"distances_sum":1975.1438927336872}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.86328125,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.86328125,"f1":0.9192146395271402,"seconds":4.060566425323486e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":8.4375,"distances_sum":1975.1438927336872}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9735119047619052,"seconds":4.250556230545044e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":8.921875,"distances_sum":2281.3497462504433}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9735119047619052,"seconds":4.250556230545044e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":8.921875,"distances_sum":2281.3497462504433}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9735119047619052,"seconds":4.250556230545044e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":8.921875,"distances_sum":2281.3497462504433}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5458984375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5458984375,"f1":0.6921946109446113,"seconds":2.7921050786972046e-6,"exhaustive_search_seconds":9.834766387939453e-7,"evaluations":6.78125,"distances_sum":1030.8165388174534}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4345703125, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.4345703125,"f1":null,"seconds":2.6691704988479614e-6,"exhaustive_search_seconds":9.834766387939453e-7,"evaluations":5.75,"distances_sum":843.7649743077365}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5458984375,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.5458984375,"f1":0.6921946109446113,"seconds":2.7921050786972046e-6,"exhaustive_search_seconds":9.834766387939453e-7,"evaluations":6.78125,"distances_sum":1030.8165388174534}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.946119505494506,"seconds":4.023313522338867e-6,"exhaustive_search_seconds":9.834766387939453e-7,"evaluations":8.609375,"distances_sum":2132.944727351835}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8659798534798544,"seconds":3.4924596548080444e-6,"exhaustive_search_seconds":9.834766387939453e-7,"evaluations":7.5625,"distances_sum":1625.2217175569456}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9417124542124549,"seconds":3.999099135398865e-6,"exhaustive_search_seconds":9.834766387939453e-7,"evaluations":8.515625,"distances_sum":2115.531548650202}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9051344488844495,"seconds":3.846362233161926e-6,"exhaustive_search_seconds":9.834766387939453e-7,"evaluations":8.25,"distances_sum":1888.6875033759836}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8046875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8046875,"f1":0.8836143023643034,"seconds":3.773719072341919e-6,"exhaustive_search_seconds":9.834766387939453e-7,"evaluations":7.9609375,"distances_sum":1818.0088812703934}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.900686813186814,"seconds":3.812834620475769e-6,"exhaustive_search_seconds":9.834766387939453e-7,"evaluations":8.171875,"distances_sum":1834.6191173046209}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5595703125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5595703125,"f1":0.7033945221445226,"seconds":2.7976930141448975e-6,"exhaustive_search_seconds":9.834766387939453e-7,"evaluations":6.75,"distances_sum":1062.2150967158882}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9033203125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.946119505494506,"seconds":4.023313522338867e-6,"exhaustive_search_seconds":9.834766387939453e-7,"evaluations":8.609375,"distances_sum":2132.944727351835}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9640453296703303,"seconds":4.24310564994812e-6,"exhaustive_search_seconds":9.834766387939453e-7,"evaluations":8.859375,"distances_sum":2253.9265306288153}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9541552197802202,"seconds":4.092231392860413e-6,"exhaustive_search_seconds":9.834766387939453e-7,"evaluations":8.7734375,"distances_sum":2220.4143375415447}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9696428571428576,"seconds":4.4442713260650635e-6,"exhaustive_search_seconds":9.834766387939453e-7,"evaluations":8.875,"distances_sum":2304.5589409455724}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.969866071428572,"seconds":4.0959566831588745e-6,"exhaustive_search_seconds":9.834766387939453e-7,"evaluations":8.890625,"distances_sum":2306.8009415747124}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":11,"bsize":8}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9600160256410258,"seconds":4.582107067108154e-6,"exhaustive_search_seconds":9.834766387939453e-7,"evaluations":8.78125,"distances_sum":2269.167479117209}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9588427197802201,"seconds":4.757195711135864e-6,"exhaustive_search_seconds":9.834766387939453e-7,"evaluations":8.78125,"distances_sum":2250.2557464026586}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9696428571428576,"seconds":4.4442713260650635e-6,"exhaustive_search_seconds":9.834766387939453e-7,"evaluations":8.875,"distances_sum":2304.5589409455724}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9696428571428576,"seconds":4.4442713260650635e-6,"exhaustive_search_seconds":9.834766387939453e-7,"evaluations":8.875,"distances_sum":2304.5589409455724}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2587890625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2587890625,"f1":null,"seconds":2.1830201148986816e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":4.828125,"distances_sum":658.2403862065821}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2587890625,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.2587890625,"f1":null,"seconds":2.1830201148986816e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":4.828125,"distances_sum":658.2403862065821}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3623046875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3623046875,"f1":null,"seconds":3.5241246223449707e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":5.3125,"distances_sum":752.9976140395471}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5361328125, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.5361328125,"f1":null,"seconds":6.076134741306305e-5,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.609375,"distances_sum":1122.743757352372}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5361328125,"state":{"ssize":3,"bsize":3},"perf":{"precision":null,"recall":0.5361328125,"f1":null,"seconds":6.076134741306305e-5,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.609375,"distances_sum":1122.743757352372}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6552734375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6552734375,"f1":0.7752251221001228,"seconds":3.598630428314209e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.515625,"distances_sum":1377.8698716746444}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8569924866799875,"seconds":4.889443516731262e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.0,"distances_sum":1696.8760914694847}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6923828125, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6923828125,"f1":0.8036414973914981,"seconds":3.6600977182388306e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.671875,"distances_sum":1521.3033317830575}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.8569924866799875,"seconds":4.889443516731262e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.0,"distances_sum":1696.8760914694847}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.8569924866799875,"seconds":4.889443516731262e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.0,"distances_sum":1696.8760914694847}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.26171875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.26171875,"f1":null,"seconds":2.253800630569458e-6,"exhaustive_search_seconds":1.039355993270874e-6,"evaluations":5.0,"distances_sum":637.3623757376945}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.26171875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.26171875,"f1":null,"seconds":2.253800630569458e-6,"exhaustive_search_seconds":1.039355993270874e-6,"evaluations":5.0,"distances_sum":637.3623757376945}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8466751998002007,"seconds":4.002824425697327e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.1953125,"distances_sum":1674.723899059001}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.55859375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.55859375,"f1":null,"seconds":3.602355718612671e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.203125,"distances_sum":1161.7213775349055}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7490234375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7490234375,"f1":0.8466751998002007,"seconds":4.002824425697327e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.1953125,"distances_sum":1674.723899059001}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9278820138195146,"seconds":4.343688488006592e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.703125,"distances_sum":2108.0827341749446}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.875,"f1":0.9278820138195146,"seconds":4.343688488006592e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.703125,"distances_sum":2108.0827341749446}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9668727106227109,"seconds":4.565343260765076e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.921875,"distances_sum":2339.1243075847333}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9668727106227109,"seconds":4.565343260765076e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.921875,"distances_sum":2339.1243075847333}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9668727106227109,"seconds":4.565343260765076e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.921875,"distances_sum":2339.1243075847333}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4052734375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4052734375,"f1":null,"seconds":2.8833746910095215e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":5.8515625,"distances_sum":926.3671564412729}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4013671875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4013671875,"f1":null,"seconds":2.823770046234131e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":5.75,"distances_sum":889.3474755387022}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4052734375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.4052734375,"f1":null,"seconds":2.8833746910095215e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":5.8515625,"distances_sum":926.3671564412729}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.818359375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.818359375,"f1":0.8926370504495512,"seconds":4.278495907783508e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.4765625,"distances_sum":1988.4742683057896}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8962974525474533,"seconds":4.027038812637329e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.515625,"distances_sum":2013.0454502150094}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.826171875,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.826171875,"f1":0.8962974525474533,"seconds":4.027038812637329e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.515625,"distances_sum":2013.0454502150094}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9487809065934073,"seconds":3.475695848464966e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.796875,"distances_sum":2357.34981283967}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9546016483516486,"seconds":4.025176167488098e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.7890625,"distances_sum":2400.724273475965}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.97012934981685,"seconds":3.9227306842803955e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.890625,"distances_sum":2472.435116782841}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.97012934981685,"seconds":3.9227306842803955e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.890625,"distances_sum":2472.435116782841}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.97012934981685,"seconds":3.9227306842803955e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.890625,"distances_sum":2472.435116782841}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.228515625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.228515625,"f1":null,"seconds":3.6675482988357544e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":5.703125,"distances_sum":447.2994124936638}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.864466783216784,"seconds":6.5211206674575806e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.46875,"distances_sum":1862.0791865917204}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5908203125, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5908203125,"f1":0.7229697385947393,"seconds":5.256384611129761e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":7.2421875,"distances_sum":1366.689873211669}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7724609375,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7724609375,"f1":0.864466783216784,"seconds":6.5211206674575806e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.46875,"distances_sum":1862.0791865917204}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9315621878121884,"seconds":4.438683390617371e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.8828125,"distances_sum":2189.472313205998}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9093697968697976,"seconds":3.907829523086548e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.6171875,"distances_sum":2056.8417013041185}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.869336913086914,"seconds":3.948807716369629e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.578125,"distances_sum":1847.900430793186}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9318025724275731,"seconds":4.207715392112732e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.8671875,"distances_sum":2209.419220916362}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.922447344322345,"seconds":4.112720489501953e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.7109375,"distances_sum":2158.759924249831}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.937339743589744,"seconds":4.0940940380096436e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.9453125,"distances_sum":2247.4410154745815}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8896484375,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.8896484375,"f1":0.937339743589744,"seconds":4.0940940380096436e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.9453125,"distances_sum":2247.4410154745815}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":9,"bsize":11}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9683436355311357,"seconds":4.3585896492004395e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.9140625,"distances_sum":2475.2491641954125}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":10,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.958971757409258,"seconds":4.26173210144043e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.921875,"distances_sum":2404.4383389937448}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":10,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9724358974358978,"seconds":4.393979907035828e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.9453125,"distances_sum":2506.0224098478297}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":12,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9536343864468871,"seconds":4.218891263008118e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.9765625,"distances_sum":2346.4175604288876}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9464915293040299,"seconds":4.118308424949646e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.8359375,"distances_sum":2310.4265945784614}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9533711080586086,"seconds":4.075467586517334e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.8984375,"distances_sum":2341.6865339411947}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9680059523809529,"seconds":4.16487455368042e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.9375,"distances_sum":2476.2240083550478}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":10,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9724358974358978,"seconds":4.393979907035828e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.9453125,"distances_sum":2506.0224098478297}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":10,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9724358974358978,"seconds":4.393979907035828e-6,"exhaustive_search_seconds":9.071081876754761e-7,"evaluations":8.9453125,"distances_sum":2506.0224098478297}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4189453125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4189453125,"f1":null,"seconds":2.346932888031006e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":6.7578125,"distances_sum":880.3323946284853}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.26171875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.26171875,"f1":null,"seconds":2.2873282432556152e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":6.953125,"distances_sum":532.9533216064896}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4189453125,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.4189453125,"f1":null,"seconds":2.346932888031006e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":6.7578125,"distances_sum":880.3323946284853}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8599853271728279,"seconds":3.332272171974182e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.6875,"distances_sum":1717.4028973147592}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.7874550796425805,"seconds":3.0025839805603027e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.9609375,"distances_sum":1442.0182065746537}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6591796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6591796875,"f1":0.7843630328005335,"seconds":3.376975655555725e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.984375,"distances_sum":1445.2341947401926}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8553233225108234,"seconds":3.995373845100403e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.578125,"distances_sum":1680.3353779923389}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.767578125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.767578125,"f1":0.8599853271728279,"seconds":3.332272171974182e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.6875,"distances_sum":1717.4028973147592}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9639194139194143,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.9140625,"distances_sum":2336.7373515304303}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.91921411921412,"seconds":6.085261702537537e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.75,"distances_sum":2039.6671493027302}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8583984375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8583984375,"f1":0.9165183774558785,"seconds":6.11133873462677e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.7578125,"distances_sum":2062.38232345747}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9459935897435902,"seconds":7.0016831159591675e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.7890625,"distances_sum":2256.0737680163907}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9579842032967036,"seconds":7.051974534988403e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.8671875,"distances_sum":2310.5251636478492}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9538175366300371,"seconds":7.120892405509949e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.875,"distances_sum":2280.7693778367325}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.943406593406594,"seconds":7.167458534240723e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.859375,"distances_sum":2203.0698152160667}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9639194139194143,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.9140625,"distances_sum":2336.7373515304303}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9639194139194143,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.9140625,"distances_sum":2336.7373515304303}}, n: 9
mean(cfft.distances) = 0.330002708948436
mean(cdnet.distances) = 0.5992219445495179
mean(crand.distances) = 0.3484356202549097
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.9222222222222222
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.86
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.888888888888889
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.9466666666666667
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8733333333333334
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8866666666666667
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9111111111111111
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8888888888888888
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9222222222222222
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8911111111111111
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9311111111111111
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9222222222222222
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9333333333333335
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9288888888888889
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9111111111111111
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8777777777777778
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8822222222222221
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8688888888888888
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9311111111111111
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8755555555555555
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.88
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8422222222222223
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.88
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.888888888888889
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.5443487278620402] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 6, 7]]
** centroid: 1, normalized-entropy: 0.9957274520849256, [(2, 6), (3, 7)]
*** center 2: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 6: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 12, 2]]
** centroid: 7, normalized-entropy: 0.5916727785823274, [(2, 12), (3, 2)]
*** center 8: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 27, 1]]
** centroid: 9, normalized-entropy: 0.2222848306856879, [(2, 27), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 10]]
** centroid: 11, normalized-entropy: 0.43949698692151346, [(2, 1), (3, 10)]
*** center 12: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
finished with 14 centroids; started with 12
acc = 0.94
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.4392444361812315] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4392444361812315, 0.27680567805669287] ***
*** starting iteration: 2; err: [Inf, 0.4392444361812315, 0.27680567805669287] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4392444361812315, 0.27680567805669287, 0.24886522652628879] ***
*** starting iteration: 3; err: [Inf, 0.4392444361812315, 0.27680567805669287, 0.24886522652628879] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4392444361812315, 0.27680567805669287, 0.24886522652628879, 0.23833837529068236] ***
*** starting iteration: 4; err: [Inf, 0.4392444361812315, 0.27680567805669287, 0.24886522652628879, 0.23833837529068236] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4392444361812315, 0.27680567805669287, 0.24886522652628879, 0.23833837529068236, 0.23512507121808626] ***
*** starting iteration: 5; err: [Inf, 0.4392444361812315, 0.27680567805669287, 0.24886522652628879, 0.23833837529068236, 0.23512507121808626] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4392444361812315, 0.27680567805669287, 0.24886522652628879, 0.23833837529068236, 0.23512507121808626, 0.2335605439688037] ***
*** starting iteration: 6; err: [Inf, 0.4392444361812315, 0.27680567805669287, 0.24886522652628879, 0.23833837529068236, 0.23512507121808626, 0.2335605439688037] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4392444361812315, 0.27680567805669287, 0.24886522652628879, 0.23833837529068236, 0.23512507121808626, 0.2335605439688037, 0.23287600518676926] ***
*** finished computation of 3 references, err: [Inf, 0.4392444361812315, 0.27680567805669287, 0.24886522652628879, 0.23833837529068236, 0.23512507121808626, 0.2335605439688037, 0.23287600518676926] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [248, 38, 0]]
** centroid: 1, normalized-entropy: 0.5652492022091542, [(1, 248), (2, 38)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [164, 48, 0]]
** centroid: 2, normalized-entropy: 0.7717094696953635, [(1, 164), (2, 48)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 141, 27]]
** centroid: 3, normalized-entropy: 0.6360156177392153, [(2, 141), (3, 27)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2738889882730591] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2738889882730591, 0.24542588865415177] ***
*** starting iteration: 2; err: [Inf, 0.2738889882730591, 0.24542588865415177] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2738889882730591, 0.24542588865415177, 0.23936466809300735] ***
*** starting iteration: 3; err: [Inf, 0.2738889882730591, 0.24542588865415177, 0.23936466809300735] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2738889882730591, 0.24542588865415177, 0.23936466809300735, 0.23576347252027294] ***
*** starting iteration: 4; err: [Inf, 0.2738889882730591, 0.24542588865415177, 0.23936466809300735, 0.23576347252027294] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2738889882730591, 0.24542588865415177, 0.23936466809300735, 0.23576347252027294, 0.2339988696700272] ***
*** starting iteration: 5; err: [Inf, 0.2738889882730591, 0.24542588865415177, 0.23936466809300735, 0.23576347252027294, 0.2339988696700272] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2738889882730591, 0.24542588865415177, 0.23936466809300735, 0.23576347252027294, 0.2339988696700272, 0.2329744547465886] ***
*** starting iteration: 6; err: [Inf, 0.2738889882730591, 0.24542588865415177, 0.23936466809300735, 0.23576347252027294, 0.2339988696700272, 0.2329744547465886] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2738889882730591, 0.24542588865415177, 0.23936466809300735, 0.23576347252027294, 0.2339988696700272, 0.2329744547465886, 0.23208545417995421] ***
*** finished computation of 3 references, err: [Inf, 0.2738889882730591, 0.24542588865415177, 0.23936466809300735, 0.23576347252027294, 0.2339988696700272, 0.2329744547465886, 0.23208545417995421] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [81, 149, 18]]
** centroid: 1, normalized-entropy: 0.7845867805133934, [(1, 81), (2, 149), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [106, 107, 0]]
** centroid: 2, normalized-entropy: 0.9999841003731537, [(1, 106), (2, 107)]
*** center 3: selecting labels [1] (freq >= 2) [from [206, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3533283061930153] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3533283061930153, 0.23799113381788067] ***
*** starting iteration: 2; err: [Inf, 0.3533283061930153, 0.23799113381788067] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3533283061930153, 0.23799113381788067, 0.2361650091597344] ***
*** starting iteration: 3; err: [Inf, 0.3533283061930153, 0.23799113381788067, 0.2361650091597344] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3533283061930153, 0.23799113381788067, 0.2361650091597344, 0.2347095588353397] ***
*** starting iteration: 4; err: [Inf, 0.3533283061930153, 0.23799113381788067, 0.2361650091597344, 0.2347095588353397] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3533283061930153, 0.23799113381788067, 0.2361650091597344, 0.2347095588353397, 0.23340365458056442] ***
*** starting iteration: 5; err: [Inf, 0.3533283061930153, 0.23799113381788067, 0.2361650091597344, 0.2347095588353397, 0.23340365458056442] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3533283061930153, 0.23799113381788067, 0.2361650091597344, 0.2347095588353397, 0.23340365458056442, 0.2324124053818756] ***
*** finished computation of 3 references, err: [Inf, 0.3533283061930153, 0.23799113381788067, 0.2361650091597344, 0.2347095588353397, 0.23340365458056442, 0.2324124053818756] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [175, 53, 0]]
** centroid: 1, normalized-entropy: 0.7822683972239212, [(1, 175), (2, 53)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 177, 21]]
** centroid: 2, normalized-entropy: 0.48791799258948565, [(2, 177), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [228, 13, 0]]
** centroid: 3, normalized-entropy: 0.3029115786972012, [(1, 228), (2, 13)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2620515151773705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2620515151773705, 0.1995703908880507] ***
*** finished computation of 7 references, err: [Inf, 0.2620515151773705, 0.1995703908880507] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [70, 28, 0]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(1, 70), (2, 28)]
*** center 2: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [93, 34, 0]]
** centroid: 3, normalized-entropy: 0.8381688912165873, [(1, 93), (2, 34)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [31, 69, 0]]
** centroid: 4, normalized-entropy: 0.8931734583778567, [(1, 31), (2, 69)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 96, 27]]
** centroid: 5, normalized-entropy: 0.7592757847892834, [(2, 96), (3, 27)]
*** center 6: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.229699339758817] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.229699339758817, 0.19293991564821894] ***
*** finished computation of 7 references, err: [Inf, 0.229699339758817, 0.19293991564821894] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [75, 28, 0]]
** centroid: 1, normalized-entropy: 0.844099171796772, [(1, 75), (2, 28)]
*** center 2: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 91, 1]]
** centroid: 3, normalized-entropy: 0.08650421412134586, [(2, 91), (3, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [103, 31, 0]]
** centroid: 4, normalized-entropy: 0.7803456089513201, [(1, 103), (2, 31)]
*** center 5: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 58, 17]]
** centroid: 6, normalized-entropy: 0.7721551435804817, [(2, 58), (3, 17)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [74, 48, 0]]
** centroid: 7, normalized-entropy: 0.9669852958320848, [(1, 74), (2, 48)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2570307891972285] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2570307891972285, 0.2216258930793588] ***
*** finished computation of 7 references, err: [Inf, 0.2570307891972285, 0.2216258930793588] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [70, 42, 0]]
** centroid: 1, normalized-entropy: 0.954434002924965, [(1, 70), (2, 42)]
*** center 2: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [21, 47, 0]]
** centroid: 3, normalized-entropy: 0.8918107543797084, [(1, 21), (2, 47)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [75, 18, 0]]
** centroid: 4, normalized-entropy: 0.708835673332196, [(1, 75), (2, 18)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 120, 21]]
** centroid: 5, normalized-entropy: 0.607171654871303, [(2, 120), (3, 21)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [168, 2, 0]]
** centroid: 6, normalized-entropy: 0.0922772477445739, [(1, 168), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [8, 14, 0]]
** centroid: 7, normalized-entropy: 0.9456603046006401, [(1, 8), (2, 14)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.39110073654467725] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39110073654467725, 0.2665592104451054] ***
*** finished computation of 3 references, err: [Inf, 0.39110073654467725, 0.2665592104451054] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [180, 119, 13]]
** centroid: 1, normalized-entropy: 0.7440176527043044, [(1, 180), (2, 119), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [155, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [77, 108, 14]]
** centroid: 3, normalized-entropy: 0.8063057674913828, [(1, 77), (2, 108), (3, 14)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2399085230309924] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2399085230309924, 0.22678314639057132] ***
*** finished computation of 3 references, err: [Inf, 0.2399085230309924, 0.22678314639057132] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [83, 143, 18]]
** centroid: 1, normalized-entropy: 0.793966621071399, [(1, 83), (2, 143), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [192, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [118, 113, 0]]
** centroid: 3, normalized-entropy: 0.9996620172705446, [(1, 118), (2, 113)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2723030205592625] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2723030205592625, 0.23150007454420105] ***
*** finished computation of 3 references, err: [Inf, 0.2723030205592625, 0.23150007454420105] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [277, 18, 0]]
** centroid: 1, normalized-entropy: 0.33146866959975696, [(1, 277), (2, 18)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 170, 21]]
** centroid: 2, normalized-entropy: 0.3433233011202995, [(1, 1), (2, 170), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [125, 55, 0]]
** centroid: 3, normalized-entropy: 0.887976319515135, [(1, 125), (2, 55)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24854308429702715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24854308429702715, 0.1718729110378716] ***
*** starting iteration: 2; err: [Inf, 0.24854308429702715, 0.1718729110378716] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24854308429702715, 0.1718729110378716, 0.15625415514181326] ***
*** starting iteration: 3; err: [Inf, 0.24854308429702715, 0.1718729110378716, 0.15625415514181326] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24854308429702715, 0.1718729110378716, 0.15625415514181326, 0.15143936563929258] ***
*** finished computation of 7 references, err: [Inf, 0.24854308429702715, 0.1718729110378716, 0.15625415514181326, 0.15143936563929258] ***
*** center 1: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [66, 4, 0]]
** centroid: 2, normalized-entropy: 0.3159971329784246, [(1, 66), (2, 4)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 52, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [11, 44, 0]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(1, 11), (2, 44)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [119, 46, 0]]
** centroid: 5, normalized-entropy: 0.8537939487169197, [(1, 119), (2, 46)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 81, 27]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(2, 81), (3, 27)]
*** center 7: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2319877633554065] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2319877633554065, 0.19006960828840241] ***
*** starting iteration: 2; err: [Inf, 0.2319877633554065, 0.19006960828840241] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2319877633554065, 0.19006960828840241, 0.17507578709583055] ***
*** starting iteration: 3; err: [Inf, 0.2319877633554065, 0.19006960828840241, 0.17507578709583055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2319877633554065, 0.19006960828840241, 0.17507578709583055, 0.16408862201482996] ***
*** finished computation of 7 references, err: [Inf, 0.2319877633554065, 0.19006960828840241, 0.17507578709583055, 0.16408862201482996] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 78, 18]]
** centroid: 1, normalized-entropy: 0.6962122601251459, [(2, 78), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [70, 88, 0]]
** centroid: 3, normalized-entropy: 0.9906174973781801, [(1, 70), (2, 88)]
*** center 4: selecting labels [1] (freq >= 2) [from [137, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [28, 42, 0]]
** centroid: 6, normalized-entropy: 0.9709505944546688, [(1, 28), (2, 42)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [35, 48, 0]]
** centroid: 7, normalized-entropy: 0.9822309298084991, [(1, 35), (2, 48)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17892658487492907] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17892658487492907, 0.15341072107317566] ***
*** starting iteration: 2; err: [Inf, 0.17892658487492907, 0.15341072107317566] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17892658487492907, 0.15341072107317566, 0.14975785319113927] ***
*** starting iteration: 3; err: [Inf, 0.17892658487492907, 0.15341072107317566, 0.14975785319113927] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17892658487492907, 0.15341072107317566, 0.14975785319113927, 0.14870717017764765] ***
*** finished computation of 7 references, err: [Inf, 0.17892658487492907, 0.15341072107317566, 0.14975785319113927, 0.14870717017764765] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 94, 0]]
** centroid: 1, normalized-entropy: 0.2885385136944103, [(1, 5), (2, 94)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 79, 21]]
** centroid: 2, normalized-entropy: 0.7414827399312738, [(2, 79), (3, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [101, 25, 0]]
** centroid: 5, normalized-entropy: 0.7187421099896039, [(1, 101), (2, 25)]
*** center 6: selecting labels [1] (freq >= 2) [from [85, 1, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [61, 44, 0]]
** centroid: 7, normalized-entropy: 0.9810077194625308, [(1, 61), (2, 44)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26158498150545423] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26158498150545423, 0.20242076906915363] ***
*** finished computation of 7 references, err: [Inf, 0.26158498150545423, 0.20242076906915363] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [137, 23, 0]]
** centroid: 1, normalized-entropy: 0.5939760926692156, [(1, 137), (2, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [151, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 45, 27]]
** centroid: 3, normalized-entropy: 0.954434002924965, [(2, 45), (3, 27)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [87, 5, 0]]
** centroid: 4, normalized-entropy: 0.30458668852140236, [(1, 87), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [37, 40, 0]]
** centroid: 5, normalized-entropy: 0.9989047442823606, [(1, 37), (2, 40)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 63, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 51, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2879561478665833] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2879561478665833, 0.20321978373254748] ***
*** finished computation of 7 references, err: [Inf, 0.2879561478665833, 0.20321978373254748] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 30, 18]]
** centroid: 1, normalized-entropy: 0.954434002924965, [(2, 30), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [45, 71, 0]]
** centroid: 2, normalized-entropy: 0.9634513846131947, [(1, 45), (2, 71)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 79, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [144, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [38, 52, 0]]
** centroid: 5, normalized-entropy: 0.9824740868386409, [(1, 38), (2, 52)]
*** center 6: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [86, 24, 0]]
** centroid: 7, normalized-entropy: 0.7568336324184036, [(1, 86), (2, 24)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2692167963832617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2692167963832617, 0.21854133099405518] ***
*** finished computation of 7 references, err: [Inf, 0.2692167963832617, 0.21854133099405518] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 100, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 51, 21]]
** centroid: 2, normalized-entropy: 0.8708644692353648, [(2, 51), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [169, 4, 0]]
** centroid: 3, normalized-entropy: 0.15862461647089127, [(1, 169), (2, 4)]
*** center 4: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [42, 10, 0]]
** centroid: 5, normalized-entropy: 0.7062740891876008, [(1, 42), (2, 10)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 57, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [129, 21, 0]]
** centroid: 7, normalized-entropy: 0.5842388116428561, [(1, 129), (2, 21)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2517746255660357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2517746255660357, 0.2114395262874864] ***
*** starting iteration: 2; err: [Inf, 0.2517746255660357, 0.2114395262874864] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2517746255660357, 0.2114395262874864, 0.2063868705927207] ***
*** starting iteration: 3; err: [Inf, 0.2517746255660357, 0.2114395262874864, 0.2063868705927207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2517746255660357, 0.2114395262874864, 0.2063868705927207, 0.203975879685819] ***
*** finished computation of 7 references, err: [Inf, 0.2517746255660357, 0.2114395262874864, 0.2063868705927207, 0.203975879685819] ***
*** center 1: selecting labels [1] (freq >= 2) [from [121, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [112, 12, 0]]
** centroid: 2, normalized-entropy: 0.45868581620054033, [(1, 112), (2, 12)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [27, 55, 0]]
** centroid: 3, normalized-entropy: 0.9141770436147919, [(1, 27), (2, 55)]
*** center 4: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 9, 0]]
** centroid: 5, normalized-entropy: 0.5975977764379984, [(1, 53), (2, 9)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [48, 64, 0]]
** centroid: 6, normalized-entropy: 0.9852281360342514, [(1, 48), (2, 64)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 87, 27]]
** centroid: 7, normalized-entropy: 0.7897492536625221, [(2, 87), (3, 27)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24475839049129494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24475839049129494, 0.1997202222530117] ***
*** starting iteration: 2; err: [Inf, 0.24475839049129494, 0.1997202222530117] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24475839049129494, 0.1997202222530117, 0.195057506966258] ***
*** starting iteration: 3; err: [Inf, 0.24475839049129494, 0.1997202222530117, 0.195057506966258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24475839049129494, 0.1997202222530117, 0.195057506966258, 0.1921886346446744] ***
*** finished computation of 7 references, err: [Inf, 0.24475839049129494, 0.1997202222530117, 0.195057506966258, 0.1921886346446744] ***
*** center 1: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [79, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [61, 55, 0]]
** centroid: 3, normalized-entropy: 0.9980692551690173, [(1, 61), (2, 55)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 100, 18]]
** centroid: 4, normalized-entropy: 0.6161661934005354, [(2, 100), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [48, 22, 0]]
** centroid: 5, normalized-entropy: 0.8980587934501658, [(1, 48), (2, 22)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [107, 5, 0]]
** centroid: 6, normalized-entropy: 0.2631887790276081, [(1, 107), (2, 5)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 73, 0]]
** centroid: 7, normalized-entropy: 0.46506984488164627, [(1, 8), (2, 73)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29377443967261413] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29377443967261413, 0.23907386158303967] ***
*** starting iteration: 2; err: [Inf, 0.29377443967261413, 0.23907386158303967] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29377443967261413, 0.23907386158303967, 0.2146192995085754] ***
*** starting iteration: 3; err: [Inf, 0.29377443967261413, 0.23907386158303967, 0.2146192995085754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29377443967261413, 0.23907386158303967, 0.2146192995085754, 0.20610134862502966] ***
*** finished computation of 7 references, err: [Inf, 0.29377443967261413, 0.23907386158303967, 0.2146192995085754, 0.20610134862502966] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 61, 0]]
** centroid: 1, normalized-entropy: 0.43497348007474274, [(1, 6), (2, 61)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 70, 4]]
** centroid: 2, normalized-entropy: 0.30337483608641397, [(2, 70), (3, 4)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [44, 11, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 44), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [135, 32, 0]]
** centroid: 4, normalized-entropy: 0.7048413846784704, [(1, 135), (2, 32)]
*** center 5: selecting labels [1] (freq >= 2) [from [144, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 68, 17]]
** centroid: 6, normalized-entropy: 0.7219280948873623, [(2, 68), (3, 17)]
*** center 7: selecting labels [1] (freq >= 2) [from [74, 1, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19160152584672333] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19160152584672333, 0.16721291491389834] ***
*** starting iteration: 2; err: [Inf, 0.19160152584672333, 0.16721291491389834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19160152584672333, 0.16721291491389834, 0.15148100380257173] ***
*** starting iteration: 3; err: [Inf, 0.19160152584672333, 0.16721291491389834, 0.15148100380257173] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19160152584672333, 0.16721291491389834, 0.15148100380257173, 0.14753282264674883] ***
*** finished computation of 7 references, err: [Inf, 0.19160152584672333, 0.16721291491389834, 0.15148100380257173, 0.14753282264674883] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [105, 2, 0]]
** centroid: 1, normalized-entropy: 0.13402979616803584, [(1, 105), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [65, 18, 0]]
** centroid: 2, normalized-entropy: 0.7544062039636575, [(1, 65), (2, 18)]
*** center 3: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [116, 6, 0]]
** centroid: 4, normalized-entropy: 0.28290479297989196, [(1, 116), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [40, 61, 0]]
** centroid: 5, normalized-entropy: 0.9685867165455515, [(1, 40), (2, 61)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 55, 26]]
** centroid: 6, normalized-entropy: 0.9054522631867892, [(2, 55), (3, 26)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 85, 1]]
** centroid: 7, normalized-entropy: 0.09140162014739266, [(2, 85), (3, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19928474229972704] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19928474229972704, 0.16895233910821233] ***
*** starting iteration: 2; err: [Inf, 0.19928474229972704, 0.16895233910821233] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19928474229972704, 0.16895233910821233, 0.16151045893585642] ***
*** starting iteration: 3; err: [Inf, 0.19928474229972704, 0.16895233910821233, 0.16151045893585642] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19928474229972704, 0.16895233910821233, 0.16151045893585642, 0.15952479385392465] ***
*** finished computation of 7 references, err: [Inf, 0.19928474229972704, 0.16895233910821233, 0.16151045893585642, 0.15952479385392465] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [88, 60, 0]]
** centroid: 1, normalized-entropy: 0.9740248644357521, [(1, 88), (2, 60)]
*** center 2: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 144, 18]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(2, 144), (3, 18)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [80, 34, 0]]
** centroid: 4, normalized-entropy: 0.8791357668533337, [(1, 80), (2, 34)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [66, 18, 0]]
** centroid: 5, normalized-entropy: 0.7495952572594798, [(1, 66), (2, 18)]
*** center 6: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20293893500732474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20293893500732474, 0.16178707995855512] ***
*** starting iteration: 2; err: [Inf, 0.20293893500732474, 0.16178707995855512] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20293893500732474, 0.16178707995855512, 0.15557253570330778] ***
*** starting iteration: 3; err: [Inf, 0.20293893500732474, 0.16178707995855512, 0.15557253570330778] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20293893500732474, 0.16178707995855512, 0.15557253570330778, 0.1511720473685398] ***
*** finished computation of 7 references, err: [Inf, 0.20293893500732474, 0.16178707995855512, 0.15557253570330778, 0.1511720473685398] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 93, 21]]
** centroid: 1, normalized-entropy: 0.6892019851173655, [(2, 93), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [90, 40, 0]]
** centroid: 2, normalized-entropy: 0.8904916402194913, [(1, 90), (2, 40)]
*** center 3: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [61, 36, 0]]
** centroid: 4, normalized-entropy: 0.9515388458648668, [(1, 61), (2, 36)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [9, 61, 0]]
** centroid: 5, normalized-entropy: 0.5535072654547254, [(1, 9), (2, 61)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [51, 13, 0]]
** centroid: 6, normalized-entropy: 0.7281342378690551, [(1, 51), (2, 13)]
*** center 7: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.49926234049968665] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49926234049968665, 0.3287517534031927] ***
*** starting iteration: 2; err: [Inf, 0.49926234049968665, 0.3287517534031927] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49926234049968665, 0.3287517534031927, 0.3098267622029146] ***
*** starting iteration: 3; err: [Inf, 0.49926234049968665, 0.3287517534031927, 0.3098267622029146] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49926234049968665, 0.3287517534031927, 0.3098267622029146, 0.30489300466324387] ***
*** finished computation of 3 references, err: [Inf, 0.49926234049968665, 0.3287517534031927, 0.3098267622029146, 0.30489300466324387] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [59, 150, 27]]
** centroid: 1, normalized-entropy: 0.8034276955638618, [(1, 59), (2, 150), (3, 27)]
*** center 2: selecting labels [1] (freq >= 1) [from [204, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [149, 77, 0]]
** centroid: 3, normalized-entropy: 0.9254945678029334, [(1, 149), (2, 77)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3665978283924365] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3665978283924365, 0.30436915062602493] ***
*** starting iteration: 2; err: [Inf, 0.3665978283924365, 0.30436915062602493] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3665978283924365, 0.30436915062602493, 0.303771101440983] ***
*** finished computation of 3 references, err: [Inf, 0.3665978283924365, 0.30436915062602493, 0.303771101440983] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [246, 16, 0]]
** centroid: 1, normalized-entropy: 0.3316727407990799, [(1, 246), (2, 16)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 188, 18]]
** centroid: 2, normalized-entropy: 0.29635546556962034, [(1, 1), (2, 188), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [146, 52, 0]]
** centroid: 3, normalized-entropy: 0.8306836355350677, [(1, 146), (2, 52)]
finished with 5 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3344586052313291] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3344586052313291, 0.2910861969329249] ***
*** starting iteration: 2; err: [Inf, 0.3344586052313291, 0.2910861969329249] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3344586052313291, 0.2910861969329249, 0.28889539247627244] ***
*** starting iteration: 3; err: [Inf, 0.3344586052313291, 0.2910861969329249, 0.28889539247627244] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3344586052313291, 0.2910861969329249, 0.28889539247627244, 0.28859177419309806] ***
*** finished computation of 3 references, err: [Inf, 0.3344586052313291, 0.2910861969329249, 0.28889539247627244, 0.28859177419309806] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [63, 164, 21]]
** centroid: 1, normalized-entropy: 0.7560849868090073, [(1, 63), (2, 164), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [212, 1, 0]]
** centroid: 2, normalized-entropy: 0.04307048235072928, [(1, 212), (2, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [128, 78, 0]]
** centroid: 3, normalized-entropy: 0.9570763860606195, [(1, 128), (2, 78)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.22532917750095977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22532917750095977, 0.2138663455564249] ***
*** starting iteration: 2; err: [Inf, 0.22532917750095977, 0.2138663455564249] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22532917750095977, 0.2138663455564249, 0.20438121858419286] ***
*** starting iteration: 3; err: [Inf, 0.22532917750095977, 0.2138663455564249, 0.20438121858419286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22532917750095977, 0.2138663455564249, 0.20438121858419286, 0.19810472844817392] ***
*** starting iteration: 4; err: [Inf, 0.22532917750095977, 0.2138663455564249, 0.20438121858419286, 0.19810472844817392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22532917750095977, 0.2138663455564249, 0.20438121858419286, 0.19810472844817392, 0.1939233260522191] ***
*** starting iteration: 5; err: [Inf, 0.22532917750095977, 0.2138663455564249, 0.20438121858419286, 0.19810472844817392, 0.1939233260522191] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22532917750095977, 0.2138663455564249, 0.20438121858419286, 0.19810472844817392, 0.1939233260522191, 0.19180128557674653] ***
*** starting iteration: 6; err: [Inf, 0.22532917750095977, 0.2138663455564249, 0.20438121858419286, 0.19810472844817392, 0.1939233260522191, 0.19180128557674653] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22532917750095977, 0.2138663455564249, 0.20438121858419286, 0.19810472844817392, 0.1939233260522191, 0.19180128557674653, 0.18981882646769374] ***
*** starting iteration: 7; err: [Inf, 0.22532917750095977, 0.2138663455564249, 0.20438121858419286, 0.19810472844817392, 0.1939233260522191, 0.19180128557674653, 0.18981882646769374] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22532917750095977, 0.2138663455564249, 0.20438121858419286, 0.19810472844817392, 0.1939233260522191, 0.19180128557674653, 0.18981882646769374, 0.18876046148777656] ***
*** starting iteration: 8; err: [Inf, 0.22532917750095977, 0.2138663455564249, 0.20438121858419286, 0.19810472844817392, 0.1939233260522191, 0.19180128557674653, 0.18981882646769374, 0.18876046148777656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22532917750095977, 0.2138663455564249, 0.20438121858419286, 0.19810472844817392, 0.1939233260522191, 0.19180128557674653, 0.18981882646769374, 0.18876046148777656, 0.18812417088065286] ***
*** finished computation of 7 references, err: [Inf, 0.22532917750095977, 0.2138663455564249, 0.20438121858419286, 0.19810472844817392, 0.1939233260522191, 0.19180128557674653, 0.18981882646769374, 0.18876046148777656, 0.18812417088065286] ***
*** center 1: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [33, 51, 0]]
** centroid: 2, normalized-entropy: 0.9666186325481027, [(1, 33), (2, 51)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [77, 27, 0]]
** centroid: 3, normalized-entropy: 0.826165427834159, [(1, 77), (2, 27)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [48, 50, 0]]
** centroid: 4, normalized-entropy: 0.9996995428565171, [(1, 48), (2, 50)]
*** center 5: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 99, 27]]
** centroid: 7, normalized-entropy: 0.7495952572594798, [(2, 99), (3, 27)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29894965694731346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29894965694731346, 0.22754439147052424] ***
*** starting iteration: 2; err: [Inf, 0.29894965694731346, 0.22754439147052424] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29894965694731346, 0.22754439147052424, 0.20604895469990894] ***
*** starting iteration: 3; err: [Inf, 0.29894965694731346, 0.22754439147052424, 0.20604895469990894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29894965694731346, 0.22754439147052424, 0.20604895469990894, 0.1985934888539107] ***
*** starting iteration: 4; err: [Inf, 0.29894965694731346, 0.22754439147052424, 0.20604895469990894, 0.1985934888539107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29894965694731346, 0.22754439147052424, 0.20604895469990894, 0.1985934888539107, 0.1963995546373054] ***
*** starting iteration: 5; err: [Inf, 0.29894965694731346, 0.22754439147052424, 0.20604895469990894, 0.1985934888539107, 0.1963995546373054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29894965694731346, 0.22754439147052424, 0.20604895469990894, 0.1985934888539107, 0.1963995546373054, 0.194335270357476] ***
*** starting iteration: 6; err: [Inf, 0.29894965694731346, 0.22754439147052424, 0.20604895469990894, 0.1985934888539107, 0.1963995546373054, 0.194335270357476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29894965694731346, 0.22754439147052424, 0.20604895469990894, 0.1985934888539107, 0.1963995546373054, 0.194335270357476, 0.19388825173533034] ***
*** finished computation of 7 references, err: [Inf, 0.29894965694731346, 0.22754439147052424, 0.20604895469990894, 0.1985934888539107, 0.1963995546373054, 0.194335270357476, 0.19388825173533034] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [23, 91, 0]]
** centroid: 1, normalized-entropy: 0.7254230207665605, [(1, 23), (2, 91)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [88, 8, 0]]
** centroid: 2, normalized-entropy: 0.4138168503036336, [(1, 88), (2, 8)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [69, 36, 0]]
** centroid: 3, normalized-entropy: 0.927526588431676, [(1, 69), (2, 36)]
*** center 4: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 119, 18]]
** centroid: 6, normalized-entropy: 0.5612294270509873, [(2, 119), (3, 18)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [80, 2, 0]]
** centroid: 7, normalized-entropy: 0.16542703399626665, [(1, 80), (2, 2)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2719103608369783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2719103608369783, 0.2212679923401735] ***
*** starting iteration: 2; err: [Inf, 0.2719103608369783, 0.2212679923401735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2719103608369783, 0.2212679923401735, 0.2030554173557532] ***
*** starting iteration: 3; err: [Inf, 0.2719103608369783, 0.2212679923401735, 0.2030554173557532] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2719103608369783, 0.2212679923401735, 0.2030554173557532, 0.19397095752100849] ***
*** starting iteration: 4; err: [Inf, 0.2719103608369783, 0.2212679923401735, 0.2030554173557532, 0.19397095752100849] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2719103608369783, 0.2212679923401735, 0.2030554173557532, 0.19397095752100849, 0.18970369303814028] ***
*** starting iteration: 5; err: [Inf, 0.2719103608369783, 0.2212679923401735, 0.2030554173557532, 0.19397095752100849, 0.18970369303814028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2719103608369783, 0.2212679923401735, 0.2030554173557532, 0.19397095752100849, 0.18970369303814028, 0.18758876557075146] ***
*** starting iteration: 6; err: [Inf, 0.2719103608369783, 0.2212679923401735, 0.2030554173557532, 0.19397095752100849, 0.18970369303814028, 0.18758876557075146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2719103608369783, 0.2212679923401735, 0.2030554173557532, 0.19397095752100849, 0.18970369303814028, 0.18758876557075146, 0.18639459588594254] ***
*** starting iteration: 7; err: [Inf, 0.2719103608369783, 0.2212679923401735, 0.2030554173557532, 0.19397095752100849, 0.18970369303814028, 0.18758876557075146, 0.18639459588594254] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2719103608369783, 0.2212679923401735, 0.2030554173557532, 0.19397095752100849, 0.18970369303814028, 0.18758876557075146, 0.18639459588594254, 0.1855365882656988] ***
*** finished computation of 7 references, err: [Inf, 0.2719103608369783, 0.2212679923401735, 0.2030554173557532, 0.19397095752100849, 0.18970369303814028, 0.18758876557075146, 0.18639459588594254, 0.1855365882656988] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [74, 36, 0]]
** centroid: 1, normalized-entropy: 0.9121156307204275, [(1, 74), (2, 36)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 92, 1]]
** centroid: 2, normalized-entropy: 0.0857426825355026, [(2, 92), (3, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [76, 25, 0]]
** centroid: 3, normalized-entropy: 0.8073313266519867, [(1, 76), (2, 25)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 78, 20]]
** centroid: 4, normalized-entropy: 0.7300166301457938, [(2, 78), (3, 20)]
*** center 5: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [77, 3, 0]]
** centroid: 6, normalized-entropy: 0.2307099556914763, [(1, 77), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [96, 9, 0]]
** centroid: 7, normalized-entropy: 0.4220005168831531, [(1, 96), (2, 9)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 11)
[0.9430088771406137, 0.9280028531525538, 0.92401683120246, 0.9200008391625158, 0.9049978121834409, 0.8980027932123741, 0.8830027632422842, 0.8620416824009638, 0.861969754185323, 0.7790035544526562, 0.7760964557371742]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9430088771406137
finished with 12
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.194486331731618] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.194486331731618, 0.16299231750289309] ***
*** starting iteration: 2; err: [Inf, 0.194486331731618, 0.16299231750289309] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.194486331731618, 0.16299231750289309, 0.15379175432823464] ***
*** starting iteration: 3; err: [Inf, 0.194486331731618, 0.16299231750289309, 0.15379175432823464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.194486331731618, 0.16299231750289309, 0.15379175432823464, 0.15029286960833468] ***
*** starting iteration: 4; err: [Inf, 0.194486331731618, 0.16299231750289309, 0.15379175432823464, 0.15029286960833468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.194486331731618, 0.16299231750289309, 0.15379175432823464, 0.15029286960833468, 0.14842052273690007] ***
*** starting iteration: 5; err: [Inf, 0.194486331731618, 0.16299231750289309, 0.15379175432823464, 0.15029286960833468, 0.14842052273690007] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.194486331731618, 0.16299231750289309, 0.15379175432823464, 0.15029286960833468, 0.14842052273690007, 0.14738617464480502] ***
*** starting iteration: 6; err: [Inf, 0.194486331731618, 0.16299231750289309, 0.15379175432823464, 0.15029286960833468, 0.14842052273690007, 0.14738617464480502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.194486331731618, 0.16299231750289309, 0.15379175432823464, 0.15029286960833468, 0.14842052273690007, 0.14738617464480502, 0.14670870511851333] ***
*** finished computation of 7 references, err: [Inf, 0.194486331731618, 0.16299231750289309, 0.15379175432823464, 0.15029286960833468, 0.14842052273690007, 0.14738617464480502, 0.14670870511851333] ***
*** center 1: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 106, 27]]
** centroid: 2, normalized-entropy: 0.7279025051093644, [(2, 106), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 31, 0]]
** centroid: 3, normalized-entropy: 0.9218764863469129, [(1, 61), (2, 31)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [77, 45, 0]]
** centroid: 4, normalized-entropy: 0.9497869033961424, [(1, 77), (2, 45)]
*** center 5: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [55, 45, 0]]
** centroid: 7, normalized-entropy: 0.9927744539878083, [(1, 55), (2, 45)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.26249136293873837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26249136293873837, 0.16853074622905997] ***
*** starting iteration: 2; err: [Inf, 0.26249136293873837, 0.16853074622905997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26249136293873837, 0.16853074622905997, 0.1533839925942102] ***
*** starting iteration: 3; err: [Inf, 0.26249136293873837, 0.16853074622905997, 0.1533839925942102] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26249136293873837, 0.16853074622905997, 0.1533839925942102, 0.14953010645799752] ***
*** starting iteration: 4; err: [Inf, 0.26249136293873837, 0.16853074622905997, 0.1533839925942102, 0.14953010645799752] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26249136293873837, 0.16853074622905997, 0.1533839925942102, 0.14953010645799752, 0.14669439713701024] ***
*** starting iteration: 5; err: [Inf, 0.26249136293873837, 0.16853074622905997, 0.1533839925942102, 0.14953010645799752, 0.14669439713701024] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26249136293873837, 0.16853074622905997, 0.1533839925942102, 0.14953010645799752, 0.14669439713701024, 0.14522483211423995] ***
*** starting iteration: 6; err: [Inf, 0.26249136293873837, 0.16853074622905997, 0.1533839925942102, 0.14953010645799752, 0.14669439713701024, 0.14522483211423995] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26249136293873837, 0.16853074622905997, 0.1533839925942102, 0.14953010645799752, 0.14669439713701024, 0.14522483211423995, 0.14480240610281545] ***
*** finished computation of 7 references, err: [Inf, 0.26249136293873837, 0.16853074622905997, 0.1533839925942102, 0.14953010645799752, 0.14669439713701024, 0.14522483211423995, 0.14480240610281545] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [80, 10, 0]]
** centroid: 1, normalized-entropy: 0.5032583347756457, [(1, 80), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [51, 33, 0]]
** centroid: 2, normalized-entropy: 0.9666186325481027, [(1, 51), (2, 33)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 79, 18]]
** centroid: 3, normalized-entropy: 0.6921053253628727, [(2, 79), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 94, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [92, 40, 0]]
** centroid: 7, normalized-entropy: 0.8849636363831529, [(1, 92), (2, 40)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18292939357775106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18292939357775106, 0.1536675118338568] ***
*** starting iteration: 2; err: [Inf, 0.18292939357775106, 0.1536675118338568] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18292939357775106, 0.1536675118338568, 0.14792329478294014] ***
*** starting iteration: 3; err: [Inf, 0.18292939357775106, 0.1536675118338568, 0.14792329478294014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18292939357775106, 0.1536675118338568, 0.14792329478294014, 0.14642999384474048] ***
*** starting iteration: 4; err: [Inf, 0.18292939357775106, 0.1536675118338568, 0.14792329478294014, 0.14642999384474048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18292939357775106, 0.1536675118338568, 0.14792329478294014, 0.14642999384474048, 0.14552721215683947] ***
*** finished computation of 7 references, err: [Inf, 0.18292939357775106, 0.1536675118338568, 0.14792329478294014, 0.14642999384474048, 0.14552721215683947] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 77, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 39, 0]]
** centroid: 2, normalized-entropy: 0.9889525767600615, [(1, 50), (2, 39)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [87, 9, 0]]
** centroid: 3, normalized-entropy: 0.44886448872302936, [(1, 87), (2, 9)]
*** center 4: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 78, 21]]
** centroid: 5, normalized-entropy: 0.7455178428108284, [(2, 78), (3, 21)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [84, 40, 0]]
** centroid: 6, normalized-entropy: 0.9071657675730821, [(1, 84), (2, 40)]
*** center 7: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 12)
[0.9430088771406137, 0.9280028531525538, 0.9259858661056265, 0.92401683120246, 0.9200008391625158, 0.9049978121834409, 0.8980027932123741, 0.8830027632422842, 0.8620416824009638, 0.861969754185323, 0.7790035544526562, 0.7760964557371742]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9430088771406137
finished with 12
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9430088771406137, 0.9280028531525538, 0.9259858661056265, 0.92401683120246, 0.9200008391625158, 0.9049978121834409, 0.8980027932123741, 0.8830027632422842, 0.8620416824009638, 0.861969754185323, 0.7790035544526562, 0.7760964557371742]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9430088771406137
finished with 12
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9430088771406137, 0.9280028531525538, 0.9259858661056265, 0.92401683120246, 0.9200008391625158, 0.9049978121834409, 0.8980027932123741, 0.8830027632422842, 0.8620416824009638, 0.861969754185323, 0.7790035544526562, 0.7760964557371742]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9430088771406137
finished with 12
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9430088771406137, 0.9280028531525538, 0.9259858661056265, 0.92401683120246, 0.9200008391625158, 0.9049978121834409, 0.8980027932123741, 0.8830027632422842, 0.8620416824009638, 0.861969754185323, 0.7790035544526562, 0.7760964557371742]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9430088771406137
finished with 12
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9430088771406137, 0.9280028531525538, 0.9259858661056265, 0.92401683120246, 0.9200008391625158, 0.9049978121834409, 0.8980027932123741, 0.8830027632422842, 0.8620416824009638, 0.861969754185323, 0.7790035544526562, 0.7760964557371742]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9430088771406137
finished with 12
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9430088771406137, 0.9280028531525538, 0.9259858661056265, 0.92401683120246, 0.9200008391625158, 0.9049978121834409, 0.8980027932123741, 0.8830027632422842, 0.8620416824009638, 0.861969754185323, 0.7790035544526562, 0.7760964557371742]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9430088771406137
finished with 13
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.26406922621383994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26406922621383994, 0.21417858998512138] ***
*** starting iteration: 2; err: [Inf, 0.26406922621383994, 0.21417858998512138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26406922621383994, 0.21417858998512138, 0.19958018183128037] ***
*** starting iteration: 3; err: [Inf, 0.26406922621383994, 0.21417858998512138, 0.19958018183128037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26406922621383994, 0.21417858998512138, 0.19958018183128037, 0.19303201125548766] ***
*** finished computation of 7 references, err: [Inf, 0.26406922621383994, 0.21417858998512138, 0.19958018183128037, 0.19303201125548766] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [80, 22, 0]]
** centroid: 1, normalized-entropy: 0.7522121733341471, [(1, 80), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [107, 18, 0]]
** centroid: 2, normalized-entropy: 0.5946193440950124, [(1, 107), (2, 18)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 92, 26]]
** centroid: 3, normalized-entropy: 0.7607859931846075, [(2, 92), (3, 26)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [98, 12, 0]]
** centroid: 4, normalized-entropy: 0.4971677614160751, [(1, 98), (2, 12)]
*** center 5: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 83, 1]]
** centroid: 6, normalized-entropy: 0.09317131799548928, [(2, 83), (3, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2678707374701056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2678707374701056, 0.2187003914414831] ***
*** starting iteration: 2; err: [Inf, 0.2678707374701056, 0.2187003914414831] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2678707374701056, 0.2187003914414831, 0.21277651557143124] ***
*** starting iteration: 3; err: [Inf, 0.2678707374701056, 0.2187003914414831, 0.21277651557143124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2678707374701056, 0.2187003914414831, 0.21277651557143124, 0.20241015720512087] ***
*** finished computation of 7 references, err: [Inf, 0.2678707374701056, 0.2187003914414831, 0.21277651557143124, 0.20241015720512087] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [79, 17, 0]]
** centroid: 1, normalized-entropy: 0.673654715229001, [(1, 79), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 57, 0]]
** centroid: 2, normalized-entropy: 0.9969105350354788, [(1, 50), (2, 57)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 115, 18]]
** centroid: 3, normalized-entropy: 0.5718989326097251, [(2, 115), (3, 18)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [98, 1, 0]]
** centroid: 4, normalized-entropy: 0.08146202691505994, [(1, 98), (2, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [34, 66, 0]]
** centroid: 5, normalized-entropy: 0.9248187049730301, [(1, 34), (2, 66)]
*** center 6: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25529364080376354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25529364080376354, 0.20641924237840806] ***
*** starting iteration: 2; err: [Inf, 0.25529364080376354, 0.20641924237840806] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25529364080376354, 0.20641924237840806, 0.1924899169942015] ***
*** starting iteration: 3; err: [Inf, 0.25529364080376354, 0.20641924237840806, 0.1924899169942015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25529364080376354, 0.20641924237840806, 0.1924899169942015, 0.1893529791909939] ***
*** finished computation of 7 references, err: [Inf, 0.25529364080376354, 0.20641924237840806, 0.1924899169942015, 0.1893529791909939] ***
*** center 1: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 101, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [113, 9, 0]]
** centroid: 3, normalized-entropy: 0.3798394050555335, [(1, 113), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [8, 65, 0]]
** centroid: 4, normalized-entropy: 0.4986751363204345, [(1, 8), (2, 65)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 61, 21]]
** centroid: 5, normalized-entropy: 0.8208002549877175, [(2, 61), (3, 21)]
*** center 6: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [99, 7, 0]]
** centroid: 7, normalized-entropy: 0.3509601730322126, [(1, 99), (2, 7)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9430088771406137, 0.9280028531525538, 0.9259858661056265, 0.92401683120246, 0.9200008391625158, 0.9049978121834409, 0.8980027932123741, 0.897001792211373, 0.8830027632422842, 0.8620416824009638, 0.861969754185323, 0.7790035544526562, 0.7760964557371742]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9430088771406137
finished with 14
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.35372255547475573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35372255547475573, 0.2274295518114637] ***
*** starting iteration: 2; err: [Inf, 0.35372255547475573, 0.2274295518114637] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35372255547475573, 0.2274295518114637, 0.20047554854225288] ***
*** starting iteration: 3; err: [Inf, 0.35372255547475573, 0.2274295518114637, 0.20047554854225288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35372255547475573, 0.2274295518114637, 0.20047554854225288, 0.19445533952997388] ***
*** finished computation of 7 references, err: [Inf, 0.35372255547475573, 0.2274295518114637, 0.20047554854225288, 0.19445533952997388] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 65, 1]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [16, 38, 0]]
** centroid: 2, normalized-entropy: 0.876716288999464, [(1, 16), (2, 38)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 33, 0]]
** centroid: 3, normalized-entropy: 0.9415951533268216, [(1, 59), (2, 33)]
*** center 4: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 52, 26]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 52), (3, 26)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [114, 39, 0]]
** centroid: 7, normalized-entropy: 0.8189555018403103, [(1, 114), (2, 39)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23188973321876805] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23188973321876805, 0.20316583112041386] ***
*** starting iteration: 2; err: [Inf, 0.23188973321876805, 0.20316583112041386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23188973321876805, 0.20316583112041386, 0.19613833980274567] ***
*** starting iteration: 3; err: [Inf, 0.23188973321876805, 0.20316583112041386, 0.19613833980274567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23188973321876805, 0.20316583112041386, 0.19613833980274567, 0.1933009482828015] ***
*** finished computation of 7 references, err: [Inf, 0.23188973321876805, 0.20316583112041386, 0.19613833980274567, 0.1933009482828015] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [8, 86, 0]]
** centroid: 1, normalized-entropy: 0.4199210973757179, [(1, 8), (2, 86)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [81, 20, 0]]
** centroid: 2, normalized-entropy: 0.7179499765002912, [(1, 81), (2, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 5, 0]]
** centroid: 4, normalized-entropy: 0.378958787501346, [(1, 63), (2, 5)]
*** center 5: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [78, 32, 0]]
** centroid: 6, normalized-entropy: 0.8698926856041562, [(1, 78), (2, 32)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 113, 18]]
** centroid: 7, normalized-entropy: 0.577401071927696, [(2, 113), (3, 18)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.25513896835909256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25513896835909256, 0.21392769430033762] ***
*** starting iteration: 2; err: [Inf, 0.25513896835909256, 0.21392769430033762] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25513896835909256, 0.21392769430033762, 0.20299744386382323] ***
*** starting iteration: 3; err: [Inf, 0.25513896835909256, 0.21392769430033762, 0.20299744386382323] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25513896835909256, 0.21392769430033762, 0.20299744386382323, 0.19675568439208832] ***
*** finished computation of 7 references, err: [Inf, 0.25513896835909256, 0.21392769430033762, 0.20299744386382323, 0.19675568439208832] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [69, 8, 0]]
** centroid: 1, normalized-entropy: 0.481225663841737, [(1, 69), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 56, 0]]
** centroid: 2, normalized-entropy: 0.9930554830121975, [(1, 46), (2, 56)]
*** center 3: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 127, 21]]
** centroid: 4, normalized-entropy: 0.5891721419909833, [(2, 127), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [98, 42, 0]]
** centroid: 5, normalized-entropy: 0.8812908992306927, [(1, 98), (2, 42)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [91, 10, 0]]
** centroid: 6, normalized-entropy: 0.46584917377204255, [(1, 91), (2, 10)]
*** center 7: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.1989821845209226] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1989821845209226, 0.16078417077334597] ***
*** starting iteration: 2; err: [Inf, 0.1989821845209226, 0.16078417077334597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1989821845209226, 0.16078417077334597, 0.1536978929154575] ***
*** starting iteration: 3; err: [Inf, 0.1989821845209226, 0.16078417077334597, 0.1536978929154575] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1989821845209226, 0.16078417077334597, 0.1536978929154575, 0.1505768992099911] ***
*** finished computation of 7 references, err: [Inf, 0.1989821845209226, 0.16078417077334597, 0.1536978929154575, 0.1505768992099911] ***
*** center 1: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [126, 31, 0]]
** centroid: 2, normalized-entropy: 0.7168031948598907, [(1, 126), (2, 31)]
*** center 3: selecting labels [1] (freq >= 2) [from [154, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [9, 118, 0]]
** centroid: 4, normalized-entropy: 0.3691476408061968, [(1, 9), (2, 118)]
*** center 5: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 146, 33]]
** centroid: 6, normalized-entropy: 0.6895175005306727, [(2, 146), (3, 33)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [129, 68, 0]]
** centroid: 7, normalized-entropy: 0.9296874075039759, [(1, 129), (2, 68)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21638149925507605] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21638149925507605, 0.16120387633144856] ***
*** starting iteration: 2; err: [Inf, 0.21638149925507605, 0.16120387633144856] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21638149925507605, 0.16120387633144856, 0.15369418783113362] ***
*** starting iteration: 3; err: [Inf, 0.21638149925507605, 0.16120387633144856, 0.15369418783113362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21638149925507605, 0.16120387633144856, 0.15369418783113362, 0.15009682900644838] ***
*** finished computation of 7 references, err: [Inf, 0.21638149925507605, 0.16120387633144856, 0.15369418783113362, 0.15009682900644838] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [44, 16, 0]]
** centroid: 1, normalized-entropy: 0.8366407419411671, [(1, 44), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [73, 6, 0]]
** centroid: 2, normalized-entropy: 0.3877431810559867, [(1, 73), (2, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 34, 0]]
** centroid: 4, normalized-entropy: 0.9440870182837795, [(1, 60), (2, 34)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 84, 13]]
** centroid: 5, normalized-entropy: 0.5683625344629001, [(2, 84), (3, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [10, 39, 0]]
** centroid: 7, normalized-entropy: 0.7300166301457938, [(1, 10), (2, 39)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22357221747748554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22357221747748554, 0.16471870671212674] ***
*** starting iteration: 2; err: [Inf, 0.22357221747748554, 0.16471870671212674] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22357221747748554, 0.16471870671212674, 0.15415229159686714] ***
*** starting iteration: 3; err: [Inf, 0.22357221747748554, 0.16471870671212674, 0.15415229159686714] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22357221747748554, 0.16471870671212674, 0.15415229159686714, 0.1515062312018126] ***
*** finished computation of 7 references, err: [Inf, 0.22357221747748554, 0.16471870671212674, 0.15415229159686714, 0.1515062312018126] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [67, 3, 0]]
** centroid: 1, normalized-entropy: 0.25524211319019174, [(1, 67), (2, 3)]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [33, 17, 0]]
** centroid: 3, normalized-entropy: 0.9248187049730301, [(1, 33), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [27, 37, 0]]
** centroid: 4, normalized-entropy: 0.9823166080205502, [(1, 27), (2, 37)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 8, 0]]
** centroid: 5, normalized-entropy: 0.46899559358928133, [(1, 72), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [53, 8, 0]]
** centroid: 6, normalized-entropy: 0.5605769426145328, [(1, 53), (2, 8)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 92, 11]]
** centroid: 7, normalized-entropy: 0.4901757916273403, [(2, 92), (3, 11)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19213513262569903] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19213513262569903, 0.15123758669476955] ***
*** starting iteration: 2; err: [Inf, 0.19213513262569903, 0.15123758669476955] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19213513262569903, 0.15123758669476955, 0.14483061601687222] ***
*** starting iteration: 3; err: [Inf, 0.19213513262569903, 0.15123758669476955, 0.14483061601687222] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19213513262569903, 0.15123758669476955, 0.14483061601687222, 0.14253014285024254] ***
*** finished computation of 7 references, err: [Inf, 0.19213513262569903, 0.15123758669476955, 0.14483061601687222, 0.14253014285024254] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [76, 8, 0]]
** centroid: 1, normalized-entropy: 0.45371633918694493, [(1, 76), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 26, 0]]
** centroid: 2, normalized-entropy: 0.8798813089176428, [(1, 61), (2, 26)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 74, 10]]
** centroid: 3, normalized-entropy: 0.5266170655714281, [(2, 74), (3, 10)]
*** center 4: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 66, 0]]
** centroid: 5, normalized-entropy: 0.3674984948272913, [(1, 5), (2, 66)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [41, 12, 0]]
** centroid: 7, normalized-entropy: 0.7717094696953635, [(1, 41), (2, 12)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23897479812800884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23897479812800884, 0.17284152424894272] ***
*** starting iteration: 2; err: [Inf, 0.23897479812800884, 0.17284152424894272] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23897479812800884, 0.17284152424894272, 0.1620975884022191] ***
*** starting iteration: 3; err: [Inf, 0.23897479812800884, 0.17284152424894272, 0.1620975884022191] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23897479812800884, 0.17284152424894272, 0.1620975884022191, 0.15880648120120167] ***
*** finished computation of 7 references, err: [Inf, 0.23897479812800884, 0.17284152424894272, 0.1620975884022191, 0.15880648120120167] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [82, 30, 0]]
** centroid: 1, normalized-entropy: 0.8383729377099398, [(1, 82), (2, 30)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 94, 18]]
** centroid: 2, normalized-entropy: 0.6360156177392153, [(2, 94), (3, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [16, 29, 0]]
** centroid: 4, normalized-entropy: 0.9389320105807949, [(1, 16), (2, 29)]
*** center 5: selecting labels [2] (freq >= 2) [from [1, 26, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20197671453468502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20197671453468502, 0.15820659612677992] ***
*** starting iteration: 2; err: [Inf, 0.20197671453468502, 0.15820659612677992] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20197671453468502, 0.15820659612677992, 0.15343708840571343] ***
*** starting iteration: 3; err: [Inf, 0.20197671453468502, 0.15820659612677992, 0.15343708840571343] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20197671453468502, 0.15820659612677992, 0.15343708840571343, 0.1502358554676175] ***
*** finished computation of 7 references, err: [Inf, 0.20197671453468502, 0.15820659612677992, 0.15343708840571343, 0.1502358554676175] ***
*** center 1: selecting labels [1] (freq >= 2) [from [27, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 32, 0]]
** centroid: 2, normalized-entropy: 0.928675181093665, [(1, 61), (2, 32)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 95, 17]]
** centroid: 3, normalized-entropy: 0.6142910730156771, [(2, 95), (3, 17)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [44, 32, 0]]
** centroid: 4, normalized-entropy: 0.9819407868640977, [(1, 44), (2, 32)]
*** center 5: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [52, 31, 0]]
** centroid: 6, normalized-entropy: 0.9533171305598173, [(1, 52), (2, 31)]
*** center 7: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1825005638860166] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1825005638860166, 0.14931747342832385] ***
*** starting iteration: 2; err: [Inf, 0.1825005638860166, 0.14931747342832385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1825005638860166, 0.14931747342832385, 0.1438725760728121] ***
*** starting iteration: 3; err: [Inf, 0.1825005638860166, 0.14931747342832385, 0.1438725760728121] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1825005638860166, 0.14931747342832385, 0.1438725760728121, 0.14263735823519527] ***
*** finished computation of 7 references, err: [Inf, 0.1825005638860166, 0.14931747342832385, 0.1438725760728121, 0.14263735823519527] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 63, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 33, 9]]
** centroid: 2, normalized-entropy: 0.7495952572594798, [(2, 33), (3, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [77, 12, 0]]
** centroid: 3, normalized-entropy: 0.5705411428522262, [(1, 77), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [73, 7, 0]]
** centroid: 4, normalized-entropy: 0.4280696292293062, [(1, 73), (2, 7)]
*** center 5: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [91, 3, 0]]
** centroid: 6, normalized-entropy: 0.2039058755048202, [(1, 91), (2, 3)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 56, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24109138969518246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24109138969518246, 0.1633812749274075] ***
*** starting iteration: 2; err: [Inf, 0.24109138969518246, 0.1633812749274075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24109138969518246, 0.1633812749274075, 0.14679472703114152] ***
*** starting iteration: 3; err: [Inf, 0.24109138969518246, 0.1633812749274075, 0.14679472703114152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24109138969518246, 0.1633812749274075, 0.14679472703114152, 0.14440797287225723] ***
*** finished computation of 7 references, err: [Inf, 0.24109138969518246, 0.1633812749274075, 0.14679472703114152, 0.14440797287225723] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [4, 61, 0]]
** centroid: 1, normalized-entropy: 0.33352200393097675, [(1, 4), (2, 61)]
*** center 2: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [7, 56, 0]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(1, 7), (2, 56)]
*** center 4: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 54, 13]]
** centroid: 5, normalized-entropy: 0.709825885194168, [(2, 54), (3, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [46, 24, 0]]
** centroid: 7, normalized-entropy: 0.927526588431676, [(1, 46), (2, 24)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21089163147471846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21089163147471846, 0.1595627068541944] ***
*** starting iteration: 2; err: [Inf, 0.21089163147471846, 0.1595627068541944] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21089163147471846, 0.1595627068541944, 0.15473682795464994] ***
*** starting iteration: 3; err: [Inf, 0.21089163147471846, 0.1595627068541944, 0.15473682795464994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21089163147471846, 0.1595627068541944, 0.15473682795464994, 0.15349160445109009] ***
*** finished computation of 7 references, err: [Inf, 0.21089163147471846, 0.1595627068541944, 0.15473682795464994, 0.15349160445109009] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [18, 32, 0]]
** centroid: 1, normalized-entropy: 0.9426831892554921, [(1, 18), (2, 32)]
*** center 2: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [65, 36, 0]]
** centroid: 4, normalized-entropy: 0.9396846718728562, [(1, 65), (2, 36)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [93, 9, 0]]
** centroid: 5, normalized-entropy: 0.43055186701043935, [(1, 93), (2, 9)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 51, 19]]
** centroid: 6, normalized-entropy: 0.8435070855739035, [(2, 51), (3, 19)]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18669457472488285] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18669457472488285, 0.1590842395843938] ***
*** starting iteration: 2; err: [Inf, 0.18669457472488285, 0.1590842395843938] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18669457472488285, 0.1590842395843938, 0.1546983199424576] ***
*** starting iteration: 3; err: [Inf, 0.18669457472488285, 0.1590842395843938, 0.1546983199424576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18669457472488285, 0.1590842395843938, 0.1546983199424576, 0.15324956113938243] ***
*** finished computation of 7 references, err: [Inf, 0.18669457472488285, 0.1590842395843938, 0.1546983199424576, 0.15324956113938243] ***
*** center 1: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [84, 43, 0]]
** centroid: 2, normalized-entropy: 0.9234559626335354, [(1, 84), (2, 43)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 52, 13]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 52), (3, 13)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 40, 6]]
** centroid: 4, normalized-entropy: 0.5586293734521991, [(2, 40), (3, 6)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [23, 33, 0]]
** centroid: 5, normalized-entropy: 0.9768740126265281, [(1, 23), (2, 33)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 12, 0]]
** centroid: 6, normalized-entropy: 0.7793498372920851, [(1, 40), (2, 12)]
*** center 7: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19973782544024288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19973782544024288, 0.1572226414233446] ***
*** starting iteration: 2; err: [Inf, 0.19973782544024288, 0.1572226414233446] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19973782544024288, 0.1572226414233446, 0.148397564150393] ***
*** starting iteration: 3; err: [Inf, 0.19973782544024288, 0.1572226414233446, 0.148397564150393] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19973782544024288, 0.1572226414233446, 0.148397564150393, 0.14686134048365057] ***
*** finished computation of 7 references, err: [Inf, 0.19973782544024288, 0.1572226414233446, 0.148397564150393, 0.14686134048365057] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [52, 20, 0]]
** centroid: 1, normalized-entropy: 0.8524051786494784, [(1, 52), (2, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [71, 1, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 69, 0]]
** centroid: 5, normalized-entropy: 0.35678001438394347, [(1, 5), (2, 69)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 42, 0]]
** centroid: 6, normalized-entropy: 0.9995708393473225, [(1, 40), (2, 42)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 55, 15]]
** centroid: 7, normalized-entropy: 0.7495952572594798, [(2, 55), (3, 15)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18411315009370446] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18411315009370446, 0.16138814123906195] ***
*** starting iteration: 2; err: [Inf, 0.18411315009370446, 0.16138814123906195] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18411315009370446, 0.16138814123906195, 0.15740491346642374] ***
*** starting iteration: 3; err: [Inf, 0.18411315009370446, 0.16138814123906195, 0.15740491346642374] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18411315009370446, 0.16138814123906195, 0.15740491346642374, 0.15599078173283487] ***
*** finished computation of 7 references, err: [Inf, 0.18411315009370446, 0.16138814123906195, 0.15740491346642374, 0.15599078173283487] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [55, 45, 0]]
** centroid: 1, normalized-entropy: 0.9927744539878083, [(1, 55), (2, 45)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [75, 27, 0]]
** centroid: 2, normalized-entropy: 0.8337649072106652, [(1, 75), (2, 27)]
*** center 3: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [41, 34, 0]]
** centroid: 4, normalized-entropy: 0.9937071066045081, [(1, 41), (2, 34)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 76, 17]]
** centroid: 5, normalized-entropy: 0.6861549474202007, [(2, 76), (3, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1921995092369616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1921995092369616, 0.15707068825233728] ***
*** starting iteration: 2; err: [Inf, 0.1921995092369616, 0.15707068825233728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1921995092369616, 0.15707068825233728, 0.15158633772470056] ***
*** starting iteration: 3; err: [Inf, 0.1921995092369616, 0.15707068825233728, 0.15158633772470056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1921995092369616, 0.15707068825233728, 0.15158633772470056, 0.14878417700342833] ***
*** finished computation of 7 references, err: [Inf, 0.1921995092369616, 0.15707068825233728, 0.15158633772470056, 0.14878417700342833] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 63, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [82, 15, 0]]
** centroid: 2, normalized-entropy: 0.6213290966942344, [(1, 82), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 51, 18]]
** centroid: 3, normalized-entropy: 0.828055725379504, [(2, 51), (3, 18)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [53, 17, 0]]
** centroid: 4, normalized-entropy: 0.7997594113291759, [(1, 53), (2, 17)]
*** center 5: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [52, 25, 0]]
** centroid: 6, normalized-entropy: 0.9093934226727598, [(1, 52), (2, 25)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2187604225082323] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2187604225082323, 0.18652405989728868] ***
*** starting iteration: 2; err: [Inf, 0.2187604225082323, 0.18652405989728868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2187604225082323, 0.18652405989728868, 0.1761586233638227] ***
*** starting iteration: 3; err: [Inf, 0.2187604225082323, 0.18652405989728868, 0.1761586233638227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2187604225082323, 0.18652405989728868, 0.1761586233638227, 0.16587351582432167] ***
*** finished computation of 7 references, err: [Inf, 0.2187604225082323, 0.18652405989728868, 0.1761586233638227, 0.16587351582432167] ***
*** center 1: selecting labels [1] (freq >= 2) [from [27, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [75, 7, 0]]
** centroid: 3, normalized-entropy: 0.42080948947668984, [(1, 75), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [39, 62, 0]]
** centroid: 4, normalized-entropy: 0.9622623958249239, [(1, 39), (2, 62)]
*** center 5: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [14, 31, 0]]
** centroid: 6, normalized-entropy: 0.8944518845341284, [(1, 14), (2, 31)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 80, 18]]
** centroid: 7, normalized-entropy: 0.6880476235340797, [(2, 80), (3, 18)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19030803786404432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19030803786404432, 0.1561283127469942] ***
*** starting iteration: 2; err: [Inf, 0.19030803786404432, 0.1561283127469942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19030803786404432, 0.1561283127469942, 0.15176275568269193] ***
*** starting iteration: 3; err: [Inf, 0.19030803786404432, 0.1561283127469942, 0.15176275568269193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19030803786404432, 0.1561283127469942, 0.15176275568269193, 0.14973037594440394] ***
*** finished computation of 7 references, err: [Inf, 0.19030803786404432, 0.1561283127469942, 0.15176275568269193, 0.14973037594440394] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [58, 28, 0]]
** centroid: 1, normalized-entropy: 0.9103480624345157, [(1, 58), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [39, 24, 0]]
** centroid: 2, normalized-entropy: 0.9587118829771317, [(1, 39), (2, 24)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 91, 14]]
** centroid: 3, normalized-entropy: 0.5665095065529052, [(2, 91), (3, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [68, 10, 0]]
** centroid: 4, normalized-entropy: 0.552495114325111, [(1, 68), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [38, 23, 0]]
** centroid: 5, normalized-entropy: 0.9559312637896479, [(1, 38), (2, 23)]
*** center 6: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20109706291928886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20109706291928886, 0.1618313704933971] ***
*** starting iteration: 2; err: [Inf, 0.20109706291928886, 0.1618313704933971] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20109706291928886, 0.1618313704933971, 0.15083549246564507] ***
*** starting iteration: 3; err: [Inf, 0.20109706291928886, 0.1618313704933971, 0.15083549246564507] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20109706291928886, 0.1618313704933971, 0.15083549246564507, 0.1473768276385963] ***
*** finished computation of 7 references, err: [Inf, 0.20109706291928886, 0.1618313704933971, 0.15083549246564507, 0.1473768276385963] ***
*** center 1: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [75, 32, 0]]
** centroid: 2, normalized-entropy: 0.880145474371324, [(1, 75), (2, 32)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 63, 2]]
** centroid: 3, normalized-entropy: 0.19823496409776642, [(2, 63), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 38, 14]]
** centroid: 4, normalized-entropy: 0.8403586716091169, [(2, 38), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 17, 0]]
** centroid: 5, normalized-entropy: 0.7997594113291759, [(1, 53), (2, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [52, 33, 0]]
** centroid: 7, normalized-entropy: 0.9636512739945752, [(1, 52), (2, 33)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2083391299881041] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2083391299881041, 0.15981661952473222] ***
*** starting iteration: 2; err: [Inf, 0.2083391299881041, 0.15981661952473222] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2083391299881041, 0.15981661952473222, 0.15295248670876027] ***
*** starting iteration: 3; err: [Inf, 0.2083391299881041, 0.15981661952473222, 0.15295248670876027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2083391299881041, 0.15981661952473222, 0.15295248670876027, 0.1496631102580577] ***
*** finished computation of 7 references, err: [Inf, 0.2083391299881041, 0.15981661952473222, 0.15295248670876027, 0.1496631102580577] ***
*** center 1: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [24, 28, 0]]
** centroid: 2, normalized-entropy: 0.9957274520849256, [(1, 24), (2, 28)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 53, 3]]
** centroid: 3, normalized-entropy: 0.3013786435930858, [(2, 53), (3, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [65, 18, 0]]
** centroid: 4, normalized-entropy: 0.7544062039636575, [(1, 65), (2, 18)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 60, 12]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(2, 60), (3, 12)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [82, 14, 0]]
** centroid: 6, normalized-entropy: 0.5993142373098089, [(1, 82), (2, 14)]
*** center 7: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21468899191170931] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21468899191170931, 0.16221051924675703] ***
*** starting iteration: 2; err: [Inf, 0.21468899191170931, 0.16221051924675703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21468899191170931, 0.16221051924675703, 0.15385328643396498] ***
*** starting iteration: 3; err: [Inf, 0.21468899191170931, 0.16221051924675703, 0.15385328643396498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21468899191170931, 0.16221051924675703, 0.15385328643396498, 0.15144428941421212] ***
*** finished computation of 7 references, err: [Inf, 0.21468899191170931, 0.16221051924675703, 0.15385328643396498, 0.15144428941421212] ***
*** center 1: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [33, 30, 0]]
** centroid: 3, normalized-entropy: 0.998363672593813, [(1, 33), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [16, 64, 0]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(1, 16), (2, 64)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 81, 16]]
** centroid: 5, normalized-entropy: 0.6460174789535751, [(2, 81), (3, 16)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [54, 10, 0]]
** centroid: 6, normalized-entropy: 0.625262405223423, [(1, 54), (2, 10)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [70, 3, 0]]
** centroid: 7, normalized-entropy: 0.24729443986205674, [(1, 70), (2, 3)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22005658460827543] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22005658460827543, 0.16857435905747115] ***
*** starting iteration: 2; err: [Inf, 0.22005658460827543, 0.16857435905747115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22005658460827543, 0.16857435905747115, 0.15721785342507064] ***
*** starting iteration: 3; err: [Inf, 0.22005658460827543, 0.16857435905747115, 0.15721785342507064] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22005658460827543, 0.16857435905747115, 0.15721785342507064, 0.1518121598828584] ***
*** finished computation of 7 references, err: [Inf, 0.22005658460827543, 0.16857435905747115, 0.15721785342507064, 0.1518121598828584] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [77, 14, 0]]
** centroid: 1, normalized-entropy: 0.6193821946787638, [(1, 77), (2, 14)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 74, 10]]
** centroid: 2, normalized-entropy: 0.5266170655714281, [(2, 74), (3, 10)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [11, 28, 0]]
** centroid: 3, normalized-entropy: 0.8582307926411409, [(1, 11), (2, 28)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 45, 9]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 45), (3, 9)]
*** center 5: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [65, 20, 0]]
** centroid: 6, normalized-entropy: 0.787126586201269, [(1, 65), (2, 20)]
*** center 7: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19725084319431335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19725084319431335, 0.15818575702793897] ***
*** starting iteration: 2; err: [Inf, 0.19725084319431335, 0.15818575702793897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19725084319431335, 0.15818575702793897, 0.15513815850764512] ***
*** starting iteration: 3; err: [Inf, 0.19725084319431335, 0.15818575702793897, 0.15513815850764512] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19725084319431335, 0.15818575702793897, 0.15513815850764512, 0.15384239203575997] ***
*** finished computation of 7 references, err: [Inf, 0.19725084319431335, 0.15818575702793897, 0.15513815850764512, 0.15384239203575997] ***
*** center 1: selecting labels [1] (freq >= 2) [from [125, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [3, 43, 0]]
** centroid: 2, normalized-entropy: 0.3478169135710632, [(1, 3), (2, 43)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [8, 51, 0]]
** centroid: 3, normalized-entropy: 0.572580465623769, [(1, 8), (2, 51)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [3, 48, 0]]
** centroid: 4, normalized-entropy: 0.32275695889739825, [(1, 3), (2, 48)]
*** center 5: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [83, 8, 0]]
** centroid: 6, normalized-entropy: 0.4294619720471057, [(1, 83), (2, 8)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 31, 13]]
** centroid: 7, normalized-entropy: 0.8756633923230399, [(2, 31), (3, 13)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18700063371821307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18700063371821307, 0.15158603454381228] ***
*** starting iteration: 2; err: [Inf, 0.18700063371821307, 0.15158603454381228] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18700063371821307, 0.15158603454381228, 0.14888395922631026] ***
*** starting iteration: 3; err: [Inf, 0.18700063371821307, 0.15158603454381228, 0.14888395922631026] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18700063371821307, 0.15158603454381228, 0.14888395922631026, 0.1484124654866755] ***
*** finished computation of 7 references, err: [Inf, 0.18700063371821307, 0.15158603454381228, 0.14888395922631026, 0.1484124654866755] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 68, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [78, 14, 0]]
** centroid: 2, normalized-entropy: 0.6152538910563409, [(1, 78), (2, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [62, 5, 0]]
** centroid: 3, normalized-entropy: 0.3829576722723533, [(1, 62), (2, 5)]
*** center 4: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [90, 2, 0]]
** centroid: 5, normalized-entropy: 0.1510969705171136, [(1, 90), (2, 2)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 53, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 35, 14]]
** centroid: 7, normalized-entropy: 0.8631205685666311, [(2, 35), (3, 14)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20587799651362002] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20587799651362002, 0.1731129628503695] ***
*** starting iteration: 2; err: [Inf, 0.20587799651362002, 0.1731129628503695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20587799651362002, 0.1731129628503695, 0.16194880452286453] ***
*** starting iteration: 3; err: [Inf, 0.20587799651362002, 0.1731129628503695, 0.16194880452286453] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20587799651362002, 0.1731129628503695, 0.16194880452286453, 0.15771429750323296] ***
*** finished computation of 7 references, err: [Inf, 0.20587799651362002, 0.1731129628503695, 0.16194880452286453, 0.15771429750323296] ***
*** center 1: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [103, 2, 0]]
** centroid: 2, normalized-entropy: 0.1360592862387751, [(1, 103), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 37, 14]]
** centroid: 3, normalized-entropy: 0.8478617451660525, [(2, 37), (3, 14)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 36, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [4, 48, 0]]
** centroid: 5, normalized-entropy: 0.3912435636292556, [(1, 4), (2, 48)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [13, 51, 0]]
** centroid: 6, normalized-entropy: 0.7281342378690551, [(1, 13), (2, 51)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [68, 13, 0]]
** centroid: 7, normalized-entropy: 0.635489638182683, [(1, 68), (2, 13)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2135427807793021] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2135427807793021, 0.1733742620293051] ***
*** starting iteration: 2; err: [Inf, 0.2135427807793021, 0.1733742620293051] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2135427807793021, 0.1733742620293051, 0.16220511238835753] ***
*** starting iteration: 3; err: [Inf, 0.2135427807793021, 0.1733742620293051, 0.16220511238835753] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2135427807793021, 0.1733742620293051, 0.16220511238835753, 0.15632797143980862] ***
*** finished computation of 7 references, err: [Inf, 0.2135427807793021, 0.1733742620293051, 0.16220511238835753, 0.15632797143980862] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [38, 27, 0]]
** centroid: 1, normalized-entropy: 0.9792415350396869, [(1, 38), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [13, 40, 0]]
** centroid: 2, normalized-entropy: 0.8037159237834126, [(1, 13), (2, 40)]
*** center 3: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 51, 1]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 51, 16]]
** centroid: 5, normalized-entropy: 0.7930490047779772, [(2, 51), (3, 16)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [83, 11, 0]]
** centroid: 6, normalized-entropy: 0.5207375686265202, [(1, 83), (2, 11)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [55, 5, 0]]
** centroid: 7, normalized-entropy: 0.4138168503036336, [(1, 55), (2, 5)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18703555494267493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18703555494267493, 0.1506413978259079] ***
*** starting iteration: 2; err: [Inf, 0.18703555494267493, 0.1506413978259079] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18703555494267493, 0.1506413978259079, 0.1463797099944204] ***
*** starting iteration: 3; err: [Inf, 0.18703555494267493, 0.1506413978259079, 0.1463797099944204] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18703555494267493, 0.1506413978259079, 0.1463797099944204, 0.1444231781065464] ***
*** finished computation of 7 references, err: [Inf, 0.18703555494267493, 0.1506413978259079, 0.1463797099944204, 0.1444231781065464] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [77, 9, 0]]
** centroid: 1, normalized-entropy: 0.48356837509176975, [(1, 77), (2, 9)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 35, 16]]
** centroid: 2, normalized-entropy: 0.8974271930876951, [(2, 35), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [70, 8, 0]]
** centroid: 3, normalized-entropy: 0.4770713062193298, [(1, 70), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 16, 0]]
** centroid: 4, normalized-entropy: 0.7269625813353975, [(1, 63), (2, 16)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 70, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 59, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17711382828652858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17711382828652858, 0.15917393594235182] ***
*** starting iteration: 2; err: [Inf, 0.17711382828652858, 0.15917393594235182] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17711382828652858, 0.15917393594235182, 0.1537416079742834] ***
*** starting iteration: 3; err: [Inf, 0.17711382828652858, 0.15917393594235182, 0.1537416079742834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17711382828652858, 0.15917393594235182, 0.1537416079742834, 0.14878383462689818] ***
*** finished computation of 7 references, err: [Inf, 0.17711382828652858, 0.15917393594235182, 0.1537416079742834, 0.14878383462689818] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [66, 17, 0]]
** centroid: 1, normalized-entropy: 0.7314625617214586, [(1, 66), (2, 17)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 71, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 64, 24]]
** centroid: 4, normalized-entropy: 0.8453509366224364, [(2, 64), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [76, 7, 0]]
** centroid: 5, normalized-entropy: 0.4172806906708316, [(1, 76), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [31, 27, 0]]
** centroid: 6, normalized-entropy: 0.9965663713274552, [(1, 31), (2, 27)]
*** center 7: selecting labels [1] (freq >= 2) [from [37, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20923606865108013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20923606865108013, 0.14770259240083397] ***
*** starting iteration: 2; err: [Inf, 0.20923606865108013, 0.14770259240083397] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20923606865108013, 0.14770259240083397, 0.14315769715979695] ***
*** starting iteration: 3; err: [Inf, 0.20923606865108013, 0.14770259240083397, 0.14315769715979695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20923606865108013, 0.14770259240083397, 0.14315769715979695, 0.14207390279136597] ***
*** finished computation of 7 references, err: [Inf, 0.20923606865108013, 0.14770259240083397, 0.14315769715979695, 0.14207390279136597] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [65, 12, 0]]
** centroid: 1, normalized-entropy: 0.6242741010130388, [(1, 65), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 7, 0]]
** centroid: 2, normalized-entropy: 0.48791799258948565, [(1, 59), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 65, 11]]
** centroid: 3, normalized-entropy: 0.5965109917085881, [(2, 65), (3, 11)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 4, 0]]
** centroid: 4, normalized-entropy: 0.3372900666170139, [(1, 60), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [52, 21, 0]]
** centroid: 5, normalized-entropy: 0.8656939941993219, [(1, 52), (2, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 76, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23200959168653934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23200959168653934, 0.18471616085525602] ***
*** starting iteration: 2; err: [Inf, 0.23200959168653934, 0.18471616085525602] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23200959168653934, 0.18471616085525602, 0.16599046855978666] ***
*** starting iteration: 3; err: [Inf, 0.23200959168653934, 0.18471616085525602, 0.16599046855978666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23200959168653934, 0.18471616085525602, 0.16599046855978666, 0.1568690584297292] ***
*** finished computation of 7 references, err: [Inf, 0.23200959168653934, 0.18471616085525602, 0.16599046855978666, 0.1568690584297292] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 39, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [20, 29, 0]]
** centroid: 2, normalized-entropy: 0.9755259511264975, [(1, 20), (2, 29)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [26, 43, 0]]
** centroid: 3, normalized-entropy: 0.9557589912150007, [(1, 26), (2, 43)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 34, 19]]
** centroid: 4, normalized-entropy: 0.9414231081869789, [(2, 34), (3, 19)]
*** center 5: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [67, 36, 0]]
** centroid: 7, normalized-entropy: 0.9336337717211408, [(1, 67), (2, 36)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21188459202647209] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21188459202647209, 0.1734951274227351] ***
*** starting iteration: 2; err: [Inf, 0.21188459202647209, 0.1734951274227351] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21188459202647209, 0.1734951274227351, 0.1642917658863589] ***
*** starting iteration: 3; err: [Inf, 0.21188459202647209, 0.1734951274227351, 0.1642917658863589] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21188459202647209, 0.1734951274227351, 0.1642917658863589, 0.15922034561354667] ***
*** finished computation of 7 references, err: [Inf, 0.21188459202647209, 0.1734951274227351, 0.1642917658863589, 0.15922034561354667] ***
*** center 1: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [98, 21, 0]]
** centroid: 2, normalized-entropy: 0.6722948170756378, [(1, 98), (2, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [7, 60, 0]]
** centroid: 3, normalized-entropy: 0.4830306801456181, [(1, 7), (2, 60)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [89, 7, 0]]
** centroid: 4, normalized-entropy: 0.3767150026960246, [(1, 89), (2, 7)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 25, 5]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(2, 25), (3, 5)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 11, 11]]
** centroid: 6, normalized-entropy: 1.0, [(2, 11), (3, 11)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 52, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2158026804346591] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2158026804346591, 0.15844050165754742] ***
*** starting iteration: 2; err: [Inf, 0.2158026804346591, 0.15844050165754742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2158026804346591, 0.15844050165754742, 0.15132438405882567] ***
*** starting iteration: 3; err: [Inf, 0.2158026804346591, 0.15844050165754742, 0.15132438405882567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2158026804346591, 0.15844050165754742, 0.15132438405882567, 0.14882980410009622] ***
*** finished computation of 7 references, err: [Inf, 0.2158026804346591, 0.15844050165754742, 0.15132438405882567, 0.14882980410009622] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [57, 42, 0]]
** centroid: 1, normalized-entropy: 0.9833761901392238, [(1, 57), (2, 42)]
*** center 2: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 35, 24]]
** centroid: 3, normalized-entropy: 0.9747785474909672, [(2, 35), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [34, 25, 0]]
** centroid: 4, normalized-entropy: 0.9831491282282879, [(1, 34), (2, 25)]
*** center 5: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 55, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [62, 15, 0]]
** centroid: 7, normalized-entropy: 0.7114160189012126, [(1, 62), (2, 15)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18371137731894852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18371137731894852, 0.15263373323623092] ***
*** starting iteration: 2; err: [Inf, 0.18371137731894852, 0.15263373323623092] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18371137731894852, 0.15263373323623092, 0.1478302343385294] ***
*** starting iteration: 3; err: [Inf, 0.18371137731894852, 0.15263373323623092, 0.1478302343385294] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18371137731894852, 0.15263373323623092, 0.1478302343385294, 0.14620145448483526] ***
*** finished computation of 7 references, err: [Inf, 0.18371137731894852, 0.15263373323623092, 0.1478302343385294, 0.14620145448483526] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 16, 0]]
** centroid: 1, normalized-entropy: 0.7269625813353975, [(1, 63), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [49, 17, 0]]
** centroid: 2, normalized-entropy: 0.8230660790114689, [(1, 49), (2, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [52, 26, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 52), (2, 26)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 54, 17]]
** centroid: 6, normalized-entropy: 0.7941021417852022, [(2, 54), (3, 17)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [59, 4, 0]]
** centroid: 7, normalized-entropy: 0.3411538931451763, [(1, 59), (2, 4)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25955635905731467] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25955635905731467, 0.1821488490337506] ***
*** starting iteration: 2; err: [Inf, 0.25955635905731467, 0.1821488490337506] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25955635905731467, 0.1821488490337506, 0.15768737778253852] ***
*** starting iteration: 3; err: [Inf, 0.25955635905731467, 0.1821488490337506, 0.15768737778253852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25955635905731467, 0.1821488490337506, 0.15768737778253852, 0.14850050269439816] ***
*** finished computation of 7 references, err: [Inf, 0.25955635905731467, 0.1821488490337506, 0.15768737778253852, 0.14850050269439816] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 80, 16]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 80), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [24, 34, 0]]
** centroid: 3, normalized-entropy: 0.9784493292686188, [(1, 24), (2, 34)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [30, 61, 0]]
** centroid: 4, normalized-entropy: 0.9145891955877994, [(1, 30), (2, 61)]
*** center 5: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [71, 5, 0]]
** centroid: 6, normalized-entropy: 0.35001059292688486, [(1, 71), (2, 5)]
*** center 7: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 363,3 => 33,1 => 604), Dict(2 => 404,3 => 31,1 => 565))
[ Info: ===== scores for single classifier: {"micro_f1":0.944,"precision":0.944,"recall":0.944,"macro_recall":0.9631998598089897,"macro_f1":0.8969556182858937,"accuracy":0.944,"class_f1":{"2":0.9326923076923077,"3":0.7948717948717948,"1":0.9633027522935781},"class_precision":{"2":0.9065420560747663,"3":0.6595744680851063,"1":1.0},"class_recall":{"2":0.9603960396039604,"3":1.0,"1":0.9292035398230089}}
[ Info: ===== scores for 1: {"micro_f1":0.9810000000000001,"precision":0.981,"recall":0.981,"macro_recall":0.9758064987200976,"macro_f1":0.9715367782338863,"accuracy":0.981,"class_f1":{"2":0.9763387297633872,"3":0.9523809523809523,"1":0.9858906525573192},"class_precision":{"2":0.9824561403508771,"3":0.9375,"1":0.9824253075571178},"class_recall":{"2":0.9702970297029703,"3":0.967741935483871,"1":0.9893805309734514}}
[ Info: ===== scores for 5: {"micro_f1":0.983,"precision":0.983,"recall":0.983,"macro_recall":0.988089605420719,"macro_f1":0.9829763299768297,"accuracy":0.983,"class_f1":{"2":0.9789864029666254,"3":0.9841269841269841,"1":0.9858156028368794},"class_precision":{"2":0.9777777777777777,"3":0.96875,"1":0.9875666074600356},"class_recall":{"2":0.9801980198019802,"3":1.0,"1":0.984070796460177}}
[ Info: ===== scores for 7: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9857297234148193,"macro_f1":0.9801677105061172,"accuracy":0.979,"class_f1":{"2":0.974169741697417,"3":0.9841269841269841,"1":0.9822064056939502},"class_precision":{"2":0.9682151589242054,"3":0.96875,"1":0.9874776386404294},"class_recall":{"2":0.9801980198019802,"3":1.0,"1":0.9769911504424779}}
[ Info: ===== scores for 9: {"micro_f1":0.9810000000000001,"precision":0.981,"recall":0.981,"macro_recall":0.9774522827675288,"macro_f1":0.9764403634360864,"accuracy":0.981,"class_f1":{"2":0.9767441860465117,"3":0.967741935483871,"1":0.9848349687778769},"class_precision":{"2":0.9661016949152542,"3":0.967741935483871,"1":0.9928057553956835},"class_recall":{"2":0.9876237623762376,"3":0.967741935483871,"1":0.9769911504424779}}
[ Info: ===== scores for 11: {"micro_f1":0.98,"precision":0.98,"recall":0.98,"macro_recall":0.9770974242728299,"macro_f1":0.9757505042301852,"accuracy":0.98,"class_f1":{"2":0.975609756097561,"3":0.967741935483871,"1":0.9838998211091236},"class_precision":{"2":0.9615384615384616,"3":0.967741935483871,"1":0.9945750452079566},"class_recall":{"2":0.9900990099009901,"3":0.967741935483871,"1":0.9734513274336283}}
(score = 0.984, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.984, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.981, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.981, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.98, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.98, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.98, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.98, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.98, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.98, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.983, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.983, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.983, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.983, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.984,"k":1,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.984,"precision":0.984,"recall":0.984,"macro_recall":0.9676488045607301,"macro_f1":0.9731453167524308,"accuracy":0.984,"class_f1":{"2":0.9800498753117207,"3":0.9508196721311476,"1":0.9885664028144239},"class_precision":{"2":0.9874371859296482,"3":0.9666666666666667,"1":0.9825174825174825},"class_recall":{"2":0.9727722772277227,"3":0.9354838709677419,"1":0.9946902654867257}}
Test Summary: | Pass  Total
AKNC          |    8      8
[1087, 2, 1, 1, 1, 4, 4, 2, 2, 3, 4, 1, 1, 6, 3, 2, 3, 8, 9, 4, 3, 6, 1, 14, 1, 3, 2, 9, 4, 13, 6, 8, 20, 4, 20, 2, 21, 9, 20, 19, 3, 10, 3, 9, 6, 9, 9, 7, 5, 4, 6, 15, 7, 18, 14, 42, 33, 2, 14, 2, 6, 2, 31, 21, 9, 5, 13, 3, 48, 2, 5, 8, 30, 3, 87, 132, 14, 2, 34, 2, 36, 4, 9, 24, 14, 2, 59, 2, 10, 16, 5, 2, 10, 26, 8, 5, 16, 38, 10, 96, 46, 21, 60, 2, 26, 14, 7, 29, 33, 21, 3, 9, 7, 15, 18, 19, 21, 65, 6, 8, 7, 28, 59, 49, 23, 2, 30, 5, 32, 5, 69, 25, 22, 45, 65, 73, 17, 95, 23, 4, 13, 8, 10, 12, 5, 15, 2, 6, 15, 31, 265, 3, 10, 7, 27, 86, 38, 15, 8, 3, 285, 30, 53, 64, 4, 10, 2, 18, 10, 31, 26, 1, 78, 34, 14, 80, 15, 12, 15, 12, 16, 1, 11, 70, 24, 10, 236, 69, 15, 22, 43, 122, 29, 14, 26, 5, 3, 57, 14, 5, 103, 13, 33, 20, 249, 3, 3, 99, 241, 22, 11, 34, 3, 5, 275, 40, 16, 164, 119, 66, 10, 96, 25, 6, 9, 35, 5, 33, 24, 151, 1, 10, 39, 34, 5, 54, 9, 19, 25, 9, 15, 7, 3, 7, 4, 25, 20, 69, 19, 20, 33, 19, 42, 8, 32, 11, 40, 34, 1, 26, 200, 32, 6, 1, 33, 8, 48, 19, 7, 192, 43, 11, 14, 19, 25, 5, 18, 14, 14, 8, 259, 20, 13, 17, 69, 99, 3, 8, 22, 56, 168, 14, 31, 11, 43, 15, 7, 126, 27, 49]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6809999999999996, speedup = 0.20864237298211222, eval_ratio = 0.078292)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.38865637400793657,"recall":0.38628472222222227,"f1":null,"seconds":0.0002094171941280365,"exhaustive_search_seconds":0.0003174692392349243,"evaluations":549.125,"distances_sum":1685.3129357901153}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5806051587301588,"recall":0.5798611111111113,"f1":0.5801866319444445,"seconds":0.0002918131649494171,"exhaustive_search_seconds":0.0003174692392349243,"evaluations":726.703125,"distances_sum":1582.8707619377576}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6770833333333329,"recall":0.6770833333333329,"f1":0.6770833333333329,"seconds":0.00044180452823638916,"exhaustive_search_seconds":0.0003174692392349243,"evaluations":883.140625,"distances_sum":1547.945674171006}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7534722222222215,"recall":0.7534722222222215,"f1":0.7534722222222215,"seconds":0.0007130727171897888,"exhaustive_search_seconds":0.0003174692392349243,"evaluations":1011.5546875,"distances_sum":1520.3188920188752}
KCenters.DeloneInvIndex> reached performance {"precision":0.802083333333333,"recall":0.802083333333333,"f1":0.802083333333333,"seconds":0.0006220918148756027,"exhaustive_search_seconds":0.0003174692392349243,"evaluations":1125.546875,"distances_sum":1509.3353945175647}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7879999999999999, speedup = 0.6776342965929705, eval_ratio = 0.10004500000000001)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
