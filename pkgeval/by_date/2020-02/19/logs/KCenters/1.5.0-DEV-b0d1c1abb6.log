Julia Version 1.5.0-DEV.288
Commit b0d1c1abb6 (2020-02-18 18:55 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed PooledArrays ──────────────── v0.5.3
  Installed Parsers ───────────────────── v0.3.11
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed KCenters ──────────────────── v0.2.1
  Installed MLDataUtils ───────────────── v0.5.0
  Installed JSON ──────────────────────── v0.21.0
  Installed StatsBase ─────────────────── v0.32.1
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Reexport ──────────────────── v0.2.0
  Installed Missings ──────────────────── v0.4.3
  Installed TableTraits ───────────────── v1.0.0
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed CategoricalArrays ─────────── v0.7.7
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataFrames ────────────────── v0.20.2
  Installed DataValueInterfaces ───────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed Compat ────────────────────── v3.5.0
  Installed DataAPI ───────────────────── v1.1.0
  Installed Tables ────────────────────── v1.0.1
  Installed InvertedIndices ───────────── v1.0.0
  Installed DataStructures ────────────── v0.17.9
  Installed MappedArrays ──────────────── v0.2.2
  Installed MLDataPattern ─────────────── v0.5.0
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.1
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.5.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.1
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.1
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_2Eg3mN/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.5.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.1
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.1
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9316620069742203
[ Info: 0.8307796732584636
[ Info: 0.5552099955578645
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3256980268408855
mean(cdnet.distances) = 0.3712476652860641
mean(crand.distances) = 0.33604809356232485
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5400390625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5400390625,"f1":null,"seconds":4.731118679046631e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":6.53125,"distances_sum":1620.4824857828567}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.361328125, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.361328125,"f1":null,"seconds":3.460794687271118e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":5.2421875,"distances_sum":1066.9716085538068}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5400390625,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5400390625,"f1":null,"seconds":4.731118679046631e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":6.53125,"distances_sum":1620.4824857828567}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.8845123626373633,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.3828125,"distances_sum":2522.8113767531195}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.802734375,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.802734375,"f1":0.8845123626373633,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.3828125,"distances_sum":2522.8113767531195}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9547332875457881,"seconds":5.904585123062134e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8515625,"distances_sum":3074.7621546359255}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9129724442224453,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.6171875,"distances_sum":2776.433941604614}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9547332875457881,"seconds":5.904585123062134e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8515625,"distances_sum":3074.7621546359255}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.919921875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9547332875457881,"seconds":5.904585123062134e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8515625,"distances_sum":3074.7621546359255}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1953125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1953125,"f1":null,"seconds":3.1888484954833984e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":6.2265625,"distances_sum":469.6309739125803}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8483677780552789,"seconds":5.120411515235901e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.75,"distances_sum":2072.550191436173}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7548828125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.8483677780552789,"seconds":5.120411515235901e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.75,"distances_sum":2072.550191436173}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.942101648351649,"seconds":5.668029189109802e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.6640625,"distances_sum":2698.6936180623916}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9487809065934071,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.703125,"distances_sum":2802.9759647415444}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8725363178488186,"seconds":5.152076482772827e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.9765625,"distances_sum":2205.1098125904873}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.9487809065934071,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.703125,"distances_sum":2802.9759647415444}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9668555402930408,"seconds":6.2212347984313965e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8046875,"distances_sum":2888.127385745167}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9701293498168502,"seconds":6.126239895820618e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9140625,"distances_sum":2880.5727686339214}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9635073260073262,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8046875,"distances_sum":2853.5418670595277}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9620535714285716,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.828125,"distances_sum":2844.0420122475152}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9701293498168502,"seconds":6.126239895820618e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9140625,"distances_sum":2880.5727686339214}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9701293498168502,"seconds":6.126239895820618e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9140625,"distances_sum":2880.5727686339214}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8624833499833509,"seconds":4.8782676458358765e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.2109375,"distances_sum":2185.266916746459}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7942781177156186,"seconds":4.466623067855835e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.703125,"distances_sum":1807.0049950488058}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.208984375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.208984375,"f1":null,"seconds":3.080815076828003e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.3359375,"distances_sum":586.3559078647216}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7734375,"f1":0.8624833499833509,"seconds":4.8782676458358765e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.2109375,"distances_sum":2185.266916746459}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9522779304029311,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.78125,"distances_sum":2826.651193719954}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9163060897435905,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.71875,"distances_sum":2508.431157932992}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.806640625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.806640625,"f1":0.88422410922411,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.4765625,"distances_sum":2325.856771943847}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9141915376290382,"seconds":5.200505256652832e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.640625,"distances_sum":2499.184876068296}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9522779304029311,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.78125,"distances_sum":2826.651193719954}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9750000000000003,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9609375,"distances_sum":2944.7644980069585}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9732715201465204,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9296875,"distances_sum":2934.680593947759}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9760817307692311,"seconds":5.6158751249313354e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.984375,"distances_sum":2952.201645978982}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96875, conf: {"ssize":3,"bsize":13}, perf: {"precision":1.0,"recall":0.96875,"f1":0.9827209249084252,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9609375,"distances_sum":3023.9973861345816}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9748340201465204,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9296875,"distances_sum":2938.1926631666943}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9583593489843494,"seconds":5.718320608139038e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8671875,"distances_sum":2843.048704871439}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96875,"state":{"ssize":3,"bsize":13},"perf":{"precision":1.0,"recall":0.96875,"f1":0.9827209249084252,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9609375,"distances_sum":3023.9973861345816}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96875,"state":{"ssize":3,"bsize":13},"perf":{"precision":1.0,"recall":0.96875,"f1":0.9827209249084252,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9609375,"distances_sum":3023.9973861345816}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1787109375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1787109375,"f1":null,"seconds":3.25031578540802e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":5.875,"distances_sum":500.5824194978362}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.787505203130204,"seconds":4.757195711135864e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.671875,"distances_sum":1801.116531252358}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6650390625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6650390625,"f1":0.787505203130204,"seconds":4.757195711135864e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.671875,"distances_sum":1801.116531252358}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8616938616938624,"seconds":5.336478352546692e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.0859375,"distances_sum":2121.0653964654784}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.689453125, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.689453125,"f1":0.8039205586080596,"seconds":4.760921001434326e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.7890625,"distances_sum":1899.8476867683164}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.8616938616938624,"seconds":5.336478352546692e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.0859375,"distances_sum":2121.0653964654784}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9452068764568772,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.78125,"distances_sum":2658.4326824772365}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9265541749916757,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.5546875,"distances_sum":2516.742595885942}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.796875, conf: {"ssize":10,"bsize":5}, perf: {"precision":1.0,"recall":0.796875,"f1":0.8764891358641367,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.296875,"distances_sum":2184.105034818149}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9265625000000007,"seconds":5.446374416351318e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.4921875,"distances_sum":2525.734881127319}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9033203125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.9452068764568772,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.78125,"distances_sum":2658.4326824772365}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9033203125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.9452068764568772,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.78125,"distances_sum":2658.4326824772365}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3876953125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3876953125,"f1":null,"seconds":3.77558171749115e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.34375,"distances_sum":905.1900995555088}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5732421875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5732421875,"f1":0.7138569763569769,"seconds":4.209578037261963e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.046875,"distances_sum":1432.5454121967116}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5732421875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5732421875,"f1":0.7138569763569769,"seconds":4.209578037261963e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.046875,"distances_sum":1432.5454121967116}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5966796875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5966796875,"f1":0.7337898212898218,"seconds":4.22261655330658e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.265625,"distances_sum":1530.6102296277736}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5966796875,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.5966796875,"f1":0.7337898212898218,"seconds":4.22261655330658e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.265625,"distances_sum":1530.6102296277736}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9316506410256419,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.6953125,"distances_sum":2647.2837144358023}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6748046875, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6748046875,"f1":0.7939163267288274,"seconds":4.686415195465088e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.6328125,"distances_sum":1807.9365040017497}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8798828125,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9316506410256419,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.6953125,"distances_sum":2647.2837144358023}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8798828125,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9316506410256419,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.6953125,"distances_sum":2647.2837144358023}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.39453125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.39453125,"f1":null,"seconds":3.5669654607772827e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.1796875,"distances_sum":983.8729026506497}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.53515625, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.53515625,"f1":null,"seconds":4.189088940620422e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.9140625,"distances_sum":1348.5779059598217}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.53515625,"state":{"ssize":3,"bsize":3},"perf":{"precision":null,"recall":0.53515625,"f1":null,"seconds":4.189088940620422e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.9140625,"distances_sum":1348.5779059598217}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9101164460539469,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.40625,"distances_sum":2419.417693723309}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9242235195360203,"seconds":5.781650543212891e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.578125,"distances_sum":2555.5457685031133}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8574529637029644,"seconds":5.183741450309753e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.78125,"distances_sum":2154.9995625563233}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8720703125,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8720703125,"f1":0.9242235195360203,"seconds":5.781650543212891e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.578125,"distances_sum":2555.5457685031133}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9662259615384619,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8359375,"distances_sum":2860.789084461098}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9454555860805864,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.671875,"distances_sum":2689.768824692998}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9627117673992678,"seconds":5.7853758335113525e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8203125,"distances_sum":2824.821786561026}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9565361721611725,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7265625,"distances_sum":2808.4079404719605}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9342750999001004,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.640625,"distances_sum":2645.3229159685866}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9662259615384619,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8359375,"distances_sum":2860.789084461098}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9662259615384619,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8359375,"distances_sum":2860.789084461098}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8631087662337671,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.1171875,"distances_sum":2130.7777091630323}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8566319097569105,"seconds":5.2209943532943726e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.09375,"distances_sum":2132.237916450932}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.8631087662337671,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.1171875,"distances_sum":2130.7777091630323}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9298852189477195,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.625,"distances_sum":2560.1965767595652}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9122913544788551,"seconds":5.7425349950790405e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.59375,"distances_sum":2440.099942872137}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8706194846819855,"seconds":5.25452196598053e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.234375,"distances_sum":2151.275268747038}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.940035485347986,"seconds":6.15045428276062e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.6640625,"distances_sum":2716.5134962644715}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.903125520313021,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.421875,"distances_sum":2434.526908676495}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.89453125,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.940035485347986,"seconds":6.15045428276062e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.6640625,"distances_sum":2716.5134962644715}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9606055402930407,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.7890625,"distances_sum":2835.4530935754774}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9654418498168502,"seconds":5.973502993583679e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.8671875,"distances_sum":2853.3329982840987}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.954618818681319,"seconds":5.68293035030365e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.7734375,"distances_sum":2749.3319977549163}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9405453921078925,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.6953125,"distances_sum":2685.1843508573725}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9633012820512825,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.78125,"distances_sum":2845.011074249274}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9654418498168502,"seconds":5.973502993583679e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.8671875,"distances_sum":2853.3329982840987}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9654418498168502,"seconds":5.973502993583679e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.8671875,"distances_sum":2853.3329982840987}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.689453125, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9653552827380949,"recall":0.689453125,"f1":0.7962241534507163,"seconds":4.976987838745117e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.3125,"distances_sum":1371.5282279622954}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.689453125,"state":{"ssize":1,"bsize":5},"perf":{"precision":0.9653552827380949,"recall":0.689453125,"f1":0.7962241534507163,"seconds":4.976987838745117e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.3125,"distances_sum":1371.5282279622954}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7099609375, conf: {"ssize":4,"bsize":5}, perf: {"precision":0.9601376488095236,"recall":0.7099609375,"f1":0.8078391660422909,"seconds":4.7907233238220215e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.4765625,"distances_sum":1460.2881352303905}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7099609375,"state":{"ssize":4,"bsize":5},"perf":{"precision":0.9601376488095236,"recall":0.7099609375,"f1":0.8078391660422909,"seconds":4.7907233238220215e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.4765625,"distances_sum":1460.2881352303905}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":3,"bsize":8}, perf: {"precision":0.9778645833333335,"recall":0.90234375,"f1":0.93497309981685,"seconds":5.550682544708252e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.8203125,"distances_sum":2008.0088249320017}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":0.972563244047619,"recall":0.83203125,"f1":0.8919363188894441,"seconds":5.0924718379974365e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.8828125,"distances_sum":1732.3622888643747}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":5,"bsize":6}, perf: {"precision":0.9738281249999998,"recall":0.798828125,"f1":0.8696722548285052,"seconds":5.07943332195282e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.6171875,"distances_sum":1686.1588065497656}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":3,"bsize":8},"perf":{"precision":0.9778645833333335,"recall":0.90234375,"f1":0.93497309981685,"seconds":5.550682544708252e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.8203125,"distances_sum":2008.0088249320017}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.90234375,"state":{"ssize":3,"bsize":8},"perf":{"precision":0.9778645833333335,"recall":0.90234375,"f1":0.93497309981685,"seconds":5.550682544708252e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.8203125,"distances_sum":2008.0088249320017}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.734375, conf: {"ssize":2,"bsize":5}, perf: {"precision":0.9845610119047619,"recall":0.734375,"f1":0.832131410256411,"seconds":5.150213837623596e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.4765625,"distances_sum":1537.8895898758246}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.658203125, conf: {"ssize":5,"bsize":4}, perf: {"precision":0.9876302083333333,"recall":0.658203125,"f1":0.7789993860306368,"seconds":4.392117261886597e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.265625,"distances_sum":1376.0202196032485}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6416015625, conf: {"ssize":2,"bsize":4}, perf: {"precision":0.982421875,"recall":0.6416015625,"f1":0.7652655504218011,"seconds":4.461035132408142e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.3046875,"distances_sum":1292.384875162711}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.734375,"state":{"ssize":2,"bsize":5},"perf":{"precision":0.9845610119047619,"recall":0.734375,"f1":0.832131410256411,"seconds":5.150213837623596e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.4765625,"distances_sum":1537.8895898758246}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":6,"bsize":7}, perf: {"precision":0.9827194940476192,"recall":0.8564453125,"f1":0.9102893200549454,"seconds":5.448237061500549e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.71875,"distances_sum":1883.5569584765037}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":8,"bsize":8}, perf: {"precision":0.9875837053571429,"recall":0.9111328125,"f1":0.9447322859432237,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8359375,"distances_sum":2041.901831139857}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":8,"bsize":8},"perf":{"precision":0.9875837053571429,"recall":0.9111328125,"f1":0.9447322859432237,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8359375,"distances_sum":2041.901831139857}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":11,"bsize":10}, perf: {"precision":0.9811197916666667,"recall":0.91796875,"f1":0.9461695856227107,"seconds":5.666166543960571e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.90625,"distances_sum":2070.2996458544512}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":2,"bsize":9}, perf: {"precision":0.9873511904761905,"recall":0.9296875,"f1":0.9552827380952382,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8984375,"distances_sum":2100.4423431072123}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":2,"bsize":9},"perf":{"precision":0.9873511904761905,"recall":0.9296875,"f1":0.9552827380952382,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8984375,"distances_sum":2100.4423431072123}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9296875,"state":{"ssize":2,"bsize":9},"perf":{"precision":0.9873511904761905,"recall":0.9296875,"f1":0.9552827380952382,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8984375,"distances_sum":2100.4423431072123}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2333984375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2333984375,"f1":null,"seconds":3.119930624961853e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":6.4453125,"distances_sum":447.84461392167987}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2158203125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2158203125,"f1":null,"seconds":3.0603259801864624e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":6.4921875,"distances_sum":396.6115538352555}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.8761452089577099,"seconds":5.276873707771301e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.796875,"distances_sum":1717.5166326695269}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7919921875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7919921875,"f1":0.8761452089577099,"seconds":5.276873707771301e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.796875,"distances_sum":1717.5166326695269}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9593978937728943,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9765625,"distances_sum":2169.3933316940306}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9593978937728943,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9765625,"distances_sum":2169.3933316940306}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9727163461538466,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9765625,"distances_sum":2257.0267326751964}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9727163461538466,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9765625,"distances_sum":2257.0267326751964}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9727163461538466,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9765625,"distances_sum":2257.0267326751964}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.16796875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.16796875,"f1":null,"seconds":2.942979335784912e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":5.8671875,"distances_sum":395.4846643184972}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5556640625, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.5556640625,"f1":null,"seconds":4.187226295471191e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.78125,"distances_sum":1245.5312646047348}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6904296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6904296875,"f1":0.8081402972027981,"seconds":4.509463906288147e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.3671875,"distances_sum":1610.1087078208782}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6904296875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6904296875,"f1":0.8081402972027981,"seconds":4.509463906288147e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.3671875,"distances_sum":1610.1087078208782}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9508044039294041,"seconds":5.5301934480667114e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8828125,"distances_sum":2329.3636538736882}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8501108266733274,"seconds":5.057081580162048e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6640625,"distances_sum":1730.7173892255978}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7109375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.7109375,"f1":0.8206585081585089,"seconds":4.796311259269714e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.359375,"distances_sum":1667.0552626926822}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.9200263278388288,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.921875,"distances_sum":2110.956643930205}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9508044039294041,"seconds":5.5301934480667114e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8828125,"distances_sum":2329.3636538736882}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9798363095238097,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.96875,"distances_sum":2521.7600685096545}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9648523351648356,"seconds":5.649402737617493e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9453125,"distances_sum":2395.90878429755}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9520547161172166,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.90625,"distances_sum":2320.929166915658}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9798363095238097,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.96875,"distances_sum":2521.7600685096545}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9798363095238097,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.96875,"distances_sum":2521.7600685096545}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7958984375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7958984375,"f1":0.878077131202132,"seconds":5.058944225311279e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.46875,"distances_sum":1783.7130431356406}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5908203125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5908203125,"f1":0.7300694097569104,"seconds":4.280358552932739e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.7421875,"distances_sum":1207.6255888803357}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4521484375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4521484375,"f1":null,"seconds":3.598630428314209e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":6.9296875,"distances_sum":858.4885080406353}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7958984375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7958984375,"f1":0.878077131202132,"seconds":5.058944225311279e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.46875,"distances_sum":1783.7130431356406}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.943498168498169,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.75,"distances_sum":2113.863659183742}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9529819139194143,"seconds":6.031244993209839e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8125,"distances_sum":2240.140513935745}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9166958041958051,"seconds":5.3532421588897705e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.5234375,"distances_sum":1965.8622812590734}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9529819139194143,"seconds":6.031244993209839e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8125,"distances_sum":2240.140513935745}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9607200091575098,"seconds":5.591660737991333e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.90625,"distances_sum":2256.1665420879976}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9607715201465207,"seconds":5.619600415229797e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8828125,"distances_sum":2263.055290753141}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9726419413919418,"seconds":5.850568413734436e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.890625,"distances_sum":2352.4694370525785}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9648294413919419,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.890625,"distances_sum":2298.6125589744815}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9726419413919418,"seconds":5.850568413734436e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.890625,"distances_sum":2352.4694370525785}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9726419413919418,"seconds":5.850568413734436e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.890625,"distances_sum":2352.4694370525785}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3837890625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3837890625,"f1":null,"seconds":3.242865204811096e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":5.84375,"distances_sum":798.6202241384908}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8505619380619388,"seconds":4.950910806655884e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":7.859375,"distances_sum":1725.1143122188294}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.75390625,"f1":0.8505619380619388,"seconds":4.950910806655884e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":7.859375,"distances_sum":1725.1143122188294}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8939732142857152,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.3984375,"distances_sum":1943.5873806871243}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9071808399933406,"seconds":5.2675604820251465e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.5,"distances_sum":2068.4024161707885}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.916684357309358,"seconds":5.258247256278992e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.65625,"distances_sum":2087.052402156431}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8603515625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8603515625,"f1":0.916684357309358,"seconds":5.258247256278992e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.65625,"distances_sum":2087.052402156431}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9710393772893776,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.8828125,"distances_sum":2427.5857955294155}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9767857142857147,"seconds":5.749985575675964e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.9296875,"distances_sum":2449.791252485805}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9408195970695974,"seconds":5.472451448440552e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.8125,"distances_sum":2220.447917936728}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9550480769230772,"seconds":5.433335900306702e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.828125,"distances_sum":2301.3169604158484}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9302255036630044,"seconds":5.377456545829773e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.703125,"distances_sum":2195.9898790562406}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9675251831501837,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.875,"distances_sum":2413.5771813923193}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9767857142857147,"seconds":5.749985575675964e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.9296875,"distances_sum":2449.791252485805}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9767857142857147,"seconds":5.749985575675964e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.9296875,"distances_sum":2449.791252485805}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4072265625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4072265625,"f1":null,"seconds":3.3080577850341797e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":5.71875,"distances_sum":787.5380282958108}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41796875, conf: {"ssize":3,"bsize":2}, perf: {"precision":1.0,"recall":0.41796875,"f1":0.570620351870352,"seconds":3.25031578540802e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":5.765625,"distances_sum":778.2148850979884}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.427734375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.427734375,"f1":null,"seconds":3.2782554626464844e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":5.796875,"distances_sum":814.5259158236527}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.427734375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.427734375,"f1":null,"seconds":3.2782554626464844e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":5.796875,"distances_sum":814.5259158236527}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.854107871295372,"seconds":4.770234227180481e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.6484375,"distances_sum":1684.617583797765}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5625,"f1":0.7029399420024427,"seconds":3.8929283618927e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":6.671875,"distances_sum":1154.196750910294}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8543482559107567,"seconds":4.624947905540466e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.734375,"distances_sum":1662.1474842521852}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.685546875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.685546875,"f1":0.8054268648018656,"seconds":4.386529326438904e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.6953125,"distances_sum":1447.9749469016035}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.8832677738927747,"seconds":4.947185516357422e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.234375,"distances_sum":1799.58992644307}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.802734375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.802734375,"f1":0.8832677738927747,"seconds":4.947185516357422e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.234375,"distances_sum":1799.58992644307}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9241732226107235,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.765625,"distances_sum":2052.2088136423463}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9597870879120884,"seconds":5.401670932769775e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.90625,"distances_sum":2269.532622929602}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9322115384615389,"seconds":5.384907126426697e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.765625,"distances_sum":2102.5891581663623}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8957734973359982,"seconds":5.11854887008667e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.2578125,"distances_sum":1871.8948659226708}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9163492757242765,"seconds":5.282461643218994e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.703125,"distances_sum":2025.1197145824476}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9597870879120884,"seconds":5.401670932769775e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.90625,"distances_sum":2269.532622929602}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.927734375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9597870879120884,"seconds":5.401670932769775e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.90625,"distances_sum":2269.532622929602}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8655261405261416,"seconds":4.772096872329712e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.0859375,"distances_sum":1825.9548518758863}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7783203125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7783203125,"f1":0.8655261405261416,"seconds":4.772096872329712e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.0859375,"distances_sum":1825.9548518758863}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9568509615384618,"seconds":5.539506673812866e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.84375,"distances_sum":2384.967353438362}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.915296162171163,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.703125,"distances_sum":2107.8176794981314}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9568509615384618,"seconds":5.539506673812866e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.84375,"distances_sum":2384.967353438362}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":9,"bsize":13}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9752804487179492,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8984375,"distances_sum":2483.488608712113}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.973717948717949,"seconds":5.6140124797821045e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.828125,"distances_sum":2494.9506175705947}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":9,"bsize":13},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9752804487179492,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8984375,"distances_sum":2483.488608712113}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":9,"bsize":13},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9752804487179492,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8984375,"distances_sum":2483.488608712113}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5478515625, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5478515625,"f1":0.6889351967476972,"seconds":3.822147846221924e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":6.359375,"distances_sum":1191.8195696468551}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5478515625,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.5478515625,"f1":0.6889351967476972,"seconds":3.822147846221924e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":6.359375,"distances_sum":1191.8195696468551}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5634765625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5634765625,"f1":0.7085620976245983,"seconds":3.945082426071167e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":6.515625,"distances_sum":1215.688977157864}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.935834478021979,"seconds":5.476176738739014e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.828125,"distances_sum":2307.5404422806732}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.9210367757242766,"seconds":5.949288606643677e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.71875,"distances_sum":2245.995840678296}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8857421875,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.8857421875,"f1":0.935834478021979,"seconds":5.476176738739014e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.828125,"distances_sum":2307.5404422806732}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":10,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9490956959706963,"seconds":5.533918738365173e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8359375,"distances_sum":2455.1963840344097}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9591918498168504,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8984375,"distances_sum":2465.275081331149}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9565934065934071,"seconds":5.76116144657135e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8671875,"distances_sum":2448.3586145626477}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9368360805860813,"seconds":5.479902029037476e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8515625,"distances_sum":2300.9034909034144}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":11,"bsize":8}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9625400641025644,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.84375,"distances_sum":2518.884451524844}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.95196053946054,"seconds":5.921348929405212e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8203125,"distances_sum":2439.4861573054195}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":11,"bsize":8},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9625400641025644,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.84375,"distances_sum":2518.884451524844}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":11,"bsize":8},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9625400641025644,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.84375,"distances_sum":2518.884451524844}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3955078125, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3955078125,"f1":null,"seconds":3.216788172721863e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":5.5390625,"distances_sum":853.2227668356493}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.287109375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.287109375,"f1":null,"seconds":3.216788172721863e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":6.4765625,"distances_sum":723.7699051111837}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5947265625, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5947265625,"f1":0.7292570276945284,"seconds":3.844499588012695e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":6.6640625,"distances_sum":1372.3196071125453}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5947265625,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.5947265625,"f1":0.7292570276945284,"seconds":3.844499588012695e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":6.6640625,"distances_sum":1372.3196071125453}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9178888819513825,"seconds":5.3551048040390015e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.6953125,"distances_sum":2303.6865562064054}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8492927211677219,"seconds":4.6584755182266235e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":7.59375,"distances_sum":1864.0881982033918}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.814453125,"f1":0.8906338453213463,"seconds":4.932284355163574e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.125,"distances_sum":2077.534160132229}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.859375,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.859375,"f1":0.9178888819513825,"seconds":5.3551048040390015e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.6953125,"distances_sum":2303.6865562064054}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.9194883241758248,"seconds":5.3122639656066895e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.671875,"distances_sum":2330.598569507326}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":11,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9559180402930405,"seconds":5.597248673439026e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.828125,"distances_sum":2556.1415047944643}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9394059065934073,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.7421875,"distances_sum":2443.2082929047187}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9288747710622719,"seconds":5.576759576797485e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.796875,"distances_sum":2331.0296869593326}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9559924450549456,"seconds":5.498528480529785e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.859375,"distances_sum":2536.907516481087}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9450434981684988,"seconds":5.373731255531311e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.7890625,"distances_sum":2464.2656346877598}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9559924450549456,"seconds":5.498528480529785e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.859375,"distances_sum":2536.907516481087}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9228515625,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9559924450549456,"seconds":5.498528480529785e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.859375,"distances_sum":2536.907516481087}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.560546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.560546875,"f1":null,"seconds":3.648921847343445e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":6.4375,"distances_sum":1196.4784929648506}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7939453125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7939453125,"f1":0.8785547785547794,"seconds":4.852190613746643e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":7.984375,"distances_sum":1892.9845935703347}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2392578125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2392578125,"f1":null,"seconds":3.028661012649536e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":5.7109375,"distances_sum":517.8432643756497}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7939453125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7939453125,"f1":0.8785547785547794,"seconds":4.852190613746643e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":7.984375,"distances_sum":1892.9845935703347}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9039439726939735,"seconds":5.114823579788208e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.4296875,"distances_sum":2026.8627153098096}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.9015625000000007,"seconds":5.032867193222046e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.421875,"distances_sum":2021.265580664412}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8359375,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.8359375,"f1":0.9039439726939735,"seconds":5.114823579788208e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.4296875,"distances_sum":2026.8627153098096}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9549336080586085,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.84375,"distances_sum":2386.080449334461}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9249771062271072,"seconds":5.29363751411438e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.7734375,"distances_sum":2170.2141551939467}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9652014652014653,"seconds":5.5301934480667114e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.875,"distances_sum":2451.4157147574765}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.951107746420247,"seconds":5.422160029411316e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.7578125,"distances_sum":2401.013164494899}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9652014652014653,"seconds":5.5301934480667114e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.875,"distances_sum":2451.4157147574765}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9652014652014653,"seconds":5.5301934480667114e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.875,"distances_sum":2451.4157147574765}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5517578125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5517578125,"f1":0.6949971903096909,"seconds":3.980472683906555e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":6.953125,"distances_sum":1260.2260338740614}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5517578125,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.5517578125,"f1":0.6949971903096909,"seconds":3.980472683906555e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":6.953125,"distances_sum":1260.2260338740614}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.556640625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.556640625,"f1":0.7000086718836726,"seconds":3.935769200325012e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.03125,"distances_sum":1279.7581684862996}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7900390625,"f1":0.8763283591408599,"seconds":4.8317015171051025e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.078125,"distances_sum":1919.9169006113816}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6923828125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6923828125,"f1":0.8078307109557118,"seconds":4.490837454795837e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.9375,"distances_sum":1622.451733011922}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.650390625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.650390625,"f1":0.7752350080475089,"seconds":4.3567270040512085e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.6484375,"distances_sum":1489.4656178286705}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7900390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7900390625,"f1":0.8763283591408599,"seconds":4.8317015171051025e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.078125,"distances_sum":1919.9169006113816}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.951273726273727,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.71875,"distances_sum":2470.4617497600216}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.897582105394606,"seconds":5.083158612251282e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.2890625,"distances_sum":2062.683500940669}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9222132034632039,"seconds":5.29363751411438e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.5390625,"distances_sum":2290.057089178355}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8967121420246429,"seconds":5.088746547698975e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.3828125,"distances_sum":2074.0777638475784}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.8995853105228112,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.359375,"distances_sum":2104.5460664244133}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.951273726273727,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.71875,"distances_sum":2470.4617497600216}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9150390625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.951273726273727,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.71875,"distances_sum":2470.4617497600216}}, n: 9
mean(cfft.distances) = 0.3310539250715746
mean(cdnet.distances) = 0.3498451514758484
mean(crand.distances) = 0.34516056943881623
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.851111111111111
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9444444444444445
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8733333333333334
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.9
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8644444444444445
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8911111111111111
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.8888888888888888
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8933333333333332
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9199999999999999
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8822222222222221
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9022222222222221
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8911111111111111
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8844444444444445
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9333333333333332
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9266666666666667
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8955555555555555
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8777777777777778
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8822222222222224
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.888888888888889
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8755555555555555
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8777777777777778
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9066666666666666
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9022222222222224
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8555555555555555
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9066666666666666
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8888888888888888
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8822222222222221
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 9, 14]]
** centroid: 1, normalized-entropy: 0.9656361333706099, [(2, 9), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 8, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 2, 1, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 9, 14]]
** centroid: 1, normalized-entropy: 0.9656361333706099, [(2, 9), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 8, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 2, 1, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 9, 14]]
** centroid: 1, normalized-entropy: 0.9656361333706099, [(2, 9), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 8, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 2, 1, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 9, 14]]
** centroid: 1, normalized-entropy: 0.9656361333706099, [(2, 9), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 8, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 2, 1, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 9, 14]]
** centroid: 1, normalized-entropy: 0.9656361333706099, [(2, 9), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 8, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 2, 1, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 9, 14]]
** centroid: 1, normalized-entropy: 0.9656361333706099, [(2, 9), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 8, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 2, 1, 3, 1, 3]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 9, 14]]
** centroid: 1, normalized-entropy: 0.9656361333706099, [(2, 9), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 8, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 2, 1, 3, 1, 3]
acc = 0.98
*** finished computation of 12 references, err: [Inf, 0.5045246151089668] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 3, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 16, 5]]
** centroid: 5, normalized-entropy: 0.7918583525674836, [(2, 16), (3, 5)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 1, 7]]
** centroid: 6, normalized-entropy: 0.5435644431995963, [(2, 1), (3, 7)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 1, 7]]
** centroid: 7, normalized-entropy: 0.5435644431995963, [(2, 1), (3, 7)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 10: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 7, 2]]
** centroid: 11, normalized-entropy: 0.7642045065086204, [(2, 7), (3, 2)]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
finished with 16 centroids; started with 12
acc = 0.94
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.28232354076031047] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28232354076031047, 0.21637024327080595] ***
*** starting iteration: 2; err: [Inf, 0.28232354076031047, 0.21637024327080595] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28232354076031047, 0.21637024327080595, 0.20318925856576264] ***
*** starting iteration: 3; err: [Inf, 0.28232354076031047, 0.21637024327080595, 0.20318925856576264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28232354076031047, 0.21637024327080595, 0.20318925856576264, 0.19294132852462587] ***
*** finished computation of 7 references, err: [Inf, 0.28232354076031047, 0.21637024327080595, 0.20318925856576264, 0.19294132852462587] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [50, 12, 0]]
** centroid: 1, normalized-entropy: 0.708835673332196, [(1, 50), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [115, 16, 0]]
** centroid: 2, normalized-entropy: 0.5354737201740676, [(1, 115), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 104, 2]]
** centroid: 3, normalized-entropy: 0.13503620280212753, [(2, 104), (3, 2)]
*** center 4: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [60, 30, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 60), (2, 30)]
*** center 6: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 81, 19]]
** centroid: 7, normalized-entropy: 0.7014714598838974, [(2, 81), (3, 19)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.32834359579901395] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32834359579901395, 0.23528889970722477] ***
*** starting iteration: 2; err: [Inf, 0.32834359579901395, 0.23528889970722477] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32834359579901395, 0.23528889970722477, 0.23118175152415135] ***
*** starting iteration: 3; err: [Inf, 0.32834359579901395, 0.23528889970722477, 0.23118175152415135] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32834359579901395, 0.23528889970722477, 0.23118175152415135, 0.22992685975719457] ***
*** finished computation of 3 references, err: [Inf, 0.32834359579901395, 0.23528889970722477, 0.23118175152415135, 0.22992685975719457] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [240, 26, 0]]
** centroid: 1, normalized-entropy: 0.46180433167520146, [(1, 240), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [162, 40, 0]]
** centroid: 2, normalized-entropy: 0.7179499765002912, [(1, 162), (2, 40)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 177, 21]]
** centroid: 3, normalized-entropy: 0.48791799258948565, [(2, 177), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30737312670344713] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30737312670344713, 0.24055514243365764] ***
*** starting iteration: 2; err: [Inf, 0.30737312670344713, 0.24055514243365764] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30737312670344713, 0.24055514243365764, 0.2300779365765481] ***
*** starting iteration: 3; err: [Inf, 0.30737312670344713, 0.24055514243365764, 0.2300779365765481] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30737312670344713, 0.24055514243365764, 0.2300779365765481, 0.2278805926939224] ***
*** finished computation of 3 references, err: [Inf, 0.30737312670344713, 0.24055514243365764, 0.2300779365765481, 0.2278805926939224] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [241, 14, 0]]
** centroid: 1, normalized-entropy: 0.3068659900344375, [(1, 241), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [141, 53, 0]]
** centroid: 2, normalized-entropy: 0.8460132299186768, [(1, 141), (2, 53)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 201, 17]]
** centroid: 3, normalized-entropy: 0.39502717694105294, [(2, 201), (3, 17)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3331910176775132] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3331910176775132, 0.243417389182628] ***
*** starting iteration: 2; err: [Inf, 0.3331910176775132, 0.243417389182628] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3331910176775132, 0.243417389182628, 0.23909529695228704] ***
*** starting iteration: 3; err: [Inf, 0.3331910176775132, 0.243417389182628, 0.23909529695228704] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3331910176775132, 0.243417389182628, 0.23909529695228704, 0.23767646926425878] ***
*** finished computation of 3 references, err: [Inf, 0.3331910176775132, 0.243417389182628, 0.23909529695228704, 0.23767646926425878] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [86, 165, 17]]
** centroid: 1, normalized-entropy: 0.7630556265550601, [(1, 86), (2, 165), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [108, 96, 1]]
** centroid: 2, normalized-entropy: 0.9975025463691153, [(1, 108), (2, 96)]
*** center 3: selecting labels [1] (freq >= 2) [from [194, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4916221935878153] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4916221935878153, 0.2934735528006031] ***
*** finished computation of 3 references, err: [Inf, 0.4916221935878153, 0.2934735528006031] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [226, 54, 0]]
** centroid: 1, normalized-entropy: 0.7074102647211816, [(1, 226), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [176, 29, 0]]
** centroid: 2, normalized-entropy: 0.5880585690719635, [(1, 176), (2, 29)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 160, 21]]
** centroid: 3, normalized-entropy: 0.517817372937725, [(2, 160), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37471555954898184] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37471555954898184, 0.2949187239238258] ***
*** finished computation of 3 references, err: [Inf, 0.37471555954898184, 0.2949187239238258] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [97, 183, 17]]
** centroid: 1, normalized-entropy: 0.753294637513139, [(1, 97), (2, 183), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [182, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [103, 85, 0]]
** centroid: 3, normalized-entropy: 0.9933772353394664, [(1, 103), (2, 85)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37190456575584196] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37190456575584196, 0.29857551370575647] ***
*** finished computation of 3 references, err: [Inf, 0.37190456575584196, 0.29857551370575647] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [255, 27, 0]]
** centroid: 1, normalized-entropy: 0.45535954758523894, [(1, 255), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [133, 51, 0]]
** centroid: 2, normalized-entropy: 0.8515714323493798, [(1, 133), (2, 51)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 183, 18]]
** centroid: 3, normalized-entropy: 0.43497348007474274, [(2, 183), (3, 18)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3690732474083657] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3690732474083657, 0.23342364967042753] ***
*** starting iteration: 2; err: [Inf, 0.3690732474083657, 0.23342364967042753] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3690732474083657, 0.23342364967042753, 0.2309983319787493] ***
*** starting iteration: 3; err: [Inf, 0.3690732474083657, 0.23342364967042753, 0.2309983319787493] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3690732474083657, 0.23342364967042753, 0.2309983319787493, 0.23013713830147167] ***
*** finished computation of 3 references, err: [Inf, 0.3690732474083657, 0.23342364967042753, 0.2309983319787493, 0.23013713830147167] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [244, 10, 0]]
** centroid: 1, normalized-entropy: 0.2393965319917804, [(1, 244), (2, 10)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 190, 21]]
** centroid: 2, normalized-entropy: 0.32084535318632673, [(1, 1), (2, 190), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [157, 43, 0]]
** centroid: 3, normalized-entropy: 0.7509319796338464, [(1, 157), (2, 43)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33180783237184003] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33180783237184003, 0.23644978217668888] ***
*** starting iteration: 2; err: [Inf, 0.33180783237184003, 0.23644978217668888] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33180783237184003, 0.23644978217668888, 0.23261053615558272] ***
*** starting iteration: 3; err: [Inf, 0.33180783237184003, 0.23644978217668888, 0.23261053615558272] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33180783237184003, 0.23644978217668888, 0.23261053615558272, 0.23181151693639368] ***
*** finished computation of 3 references, err: [Inf, 0.33180783237184003, 0.23644978217668888, 0.23261053615558272, 0.23181151693639368] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [238, 11, 0]]
** centroid: 1, normalized-entropy: 0.26112492213916205, [(1, 238), (2, 11)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 206, 17]]
** centroid: 2, normalized-entropy: 0.3887654743552879, [(2, 206), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [144, 51, 0]]
** centroid: 3, normalized-entropy: 0.829059069399666, [(1, 144), (2, 51)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.32929666964351195] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32929666964351195, 0.24149206477724228] ***
*** starting iteration: 2; err: [Inf, 0.32929666964351195, 0.24149206477724228] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32929666964351195, 0.24149206477724228, 0.23606126931477814] ***
*** starting iteration: 3; err: [Inf, 0.32929666964351195, 0.24149206477724228, 0.23606126931477814] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32929666964351195, 0.24149206477724228, 0.23606126931477814, 0.23459254618248213] ***
*** finished computation of 3 references, err: [Inf, 0.32929666964351195, 0.24149206477724228, 0.23606126931477814, 0.23459254618248213] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [58, 184, 18]]
** centroid: 1, normalized-entropy: 0.6956211257100056, [(1, 58), (2, 184), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [212, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [118, 77, 0]]
** centroid: 3, normalized-entropy: 0.9678716293485611, [(1, 118), (2, 77)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3895210026373231] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3895210026373231, 0.30179925004297214] ***
*** starting iteration: 2; err: [Inf, 0.3895210026373231, 0.30179925004297214] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3895210026373231, 0.30179925004297214, 0.2926956769099946] ***
*** starting iteration: 3; err: [Inf, 0.3895210026373231, 0.30179925004297214, 0.2926956769099946] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3895210026373231, 0.30179925004297214, 0.2926956769099946, 0.2914869480992894] ***
*** starting iteration: 4; err: [Inf, 0.3895210026373231, 0.30179925004297214, 0.2926956769099946, 0.2914869480992894] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3895210026373231, 0.30179925004297214, 0.2926956769099946, 0.2914869480992894, 0.290709085368157] ***
*** finished computation of 3 references, err: [Inf, 0.3895210026373231, 0.30179925004297214, 0.2926956769099946, 0.2914869480992894, 0.290709085368157] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [247, 16, 0]]
** centroid: 1, normalized-entropy: 0.3307566082983275, [(1, 247), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [155, 52, 0]]
** centroid: 2, normalized-entropy: 0.813186724838245, [(1, 155), (2, 52)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 175, 21]]
** centroid: 3, normalized-entropy: 0.4912373418243334, [(2, 175), (3, 21)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.42341613224770375] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42341613224770375, 0.294554296961945] ***
*** starting iteration: 2; err: [Inf, 0.42341613224770375, 0.294554296961945] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42341613224770375, 0.294554296961945, 0.29194993286001225] ***
*** starting iteration: 3; err: [Inf, 0.42341613224770375, 0.294554296961945, 0.29194993286001225] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42341613224770375, 0.294554296961945, 0.29194993286001225, 0.2912732301352509] ***
*** finished computation of 3 references, err: [Inf, 0.42341613224770375, 0.294554296961945, 0.29194993286001225, 0.2912732301352509] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [81, 152, 17]]
** centroid: 1, normalized-entropy: 0.7741416480140497, [(1, 81), (2, 152), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [98, 116, 0]]
** centroid: 2, normalized-entropy: 0.9948905370642835, [(1, 98), (2, 116)]
*** center 3: selecting labels [1] (freq >= 2) [from [203, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5177503441651722] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5177503441651722, 0.298400874244052] ***
*** starting iteration: 2; err: [Inf, 0.5177503441651722, 0.298400874244052] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5177503441651722, 0.298400874244052, 0.2957924129287789] ***
*** starting iteration: 3; err: [Inf, 0.5177503441651722, 0.298400874244052, 0.2957924129287789] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5177503441651722, 0.298400874244052, 0.2957924129287789, 0.2949588647226746] ***
*** finished computation of 3 references, err: [Inf, 0.5177503441651722, 0.298400874244052, 0.2957924129287789, 0.2949588647226746] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [3, 206, 18]]
** centroid: 1, normalized-entropy: 0.3151698698400271, [(1, 3), (2, 206), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [222, 5, 0]]
** centroid: 2, normalized-entropy: 0.15267199916686064, [(1, 222), (2, 5)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [163, 50, 0]]
** centroid: 3, normalized-entropy: 0.7861861524868624, [(1, 163), (2, 50)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2591371726191629] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2591371726191629, 0.2206584529443665] ***
*** starting iteration: 2; err: [Inf, 0.2591371726191629, 0.2206584529443665] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2591371726191629, 0.2206584529443665, 0.2090081384299376] ***
*** starting iteration: 3; err: [Inf, 0.2591371726191629, 0.2206584529443665, 0.2090081384299376] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2591371726191629, 0.2206584529443665, 0.2090081384299376, 0.19759526641304972] ***
*** finished computation of 7 references, err: [Inf, 0.2591371726191629, 0.2206584529443665, 0.2090081384299376, 0.19759526641304972] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 43, 16]]
** centroid: 1, normalized-entropy: 0.8431619569518377, [(2, 43), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [6, 105, 0]]
** centroid: 2, normalized-entropy: 0.30337483608641397, [(1, 6), (2, 105)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 85, 1]]
*** center 4: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [69, 25, 0]]
** centroid: 5, normalized-entropy: 0.8356038276131503, [(1, 69), (2, 25)]
*** center 6: selecting labels [1] (freq >= 2) [from [132, 1, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [81, 9, 0]]
** centroid: 7, normalized-entropy: 0.46899559358928133, [(1, 81), (2, 9)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2801767011247073] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2801767011247073, 0.2118472088522081] ***
*** starting iteration: 2; err: [Inf, 0.2801767011247073, 0.2118472088522081] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2801767011247073, 0.2118472088522081, 0.19834915291087918] ***
*** starting iteration: 3; err: [Inf, 0.2801767011247073, 0.2118472088522081, 0.19834915291087918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2801767011247073, 0.2118472088522081, 0.19834915291087918, 0.1928873610650671] ***
*** finished computation of 7 references, err: [Inf, 0.2801767011247073, 0.2118472088522081, 0.19834915291087918, 0.1928873610650671] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [88, 22, 0]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(1, 88), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [4, 107, 0]]
** centroid: 2, normalized-entropy: 0.22381255513458592, [(1, 4), (2, 107)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 82, 18]]
** centroid: 3, normalized-entropy: 0.6800770457282798, [(2, 82), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 45, 0]]
** centroid: 5, normalized-entropy: 0.961236604722876, [(1, 72), (2, 45)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [91, 5, 0]]
** centroid: 7, normalized-entropy: 0.29518174309075856, [(1, 91), (2, 5)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24476133845956274] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24476133845956274, 0.2101052921613561] ***
*** starting iteration: 2; err: [Inf, 0.24476133845956274, 0.2101052921613561] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24476133845956274, 0.2101052921613561, 0.20178463698613705] ***
*** starting iteration: 3; err: [Inf, 0.24476133845956274, 0.2101052921613561, 0.20178463698613705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24476133845956274, 0.2101052921613561, 0.20178463698613705, 0.19610788089198036] ***
*** finished computation of 7 references, err: [Inf, 0.24476133845956274, 0.2101052921613561, 0.20178463698613705, 0.19610788089198036] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [34, 47, 0]]
** centroid: 1, normalized-entropy: 0.9813387358307915, [(1, 34), (2, 47)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 83, 21]]
** centroid: 2, normalized-entropy: 0.7257576154473545, [(2, 83), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [55, 57, 0]]
** centroid: 3, normalized-entropy: 0.9997699662429026, [(1, 55), (2, 57)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 12, 0]]
** centroid: 4, normalized-entropy: 0.6722948170756378, [(1, 56), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [19, 44, 0]]
** centroid: 5, normalized-entropy: 0.8832225588099292, [(1, 19), (2, 44)]
*** center 6: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [132, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2840645349608257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2840645349608257, 0.20008469743143092] ***
*** starting iteration: 2; err: [Inf, 0.2840645349608257, 0.20008469743143092] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2840645349608257, 0.20008469743143092, 0.1940122915954068] ***
*** starting iteration: 3; err: [Inf, 0.2840645349608257, 0.20008469743143092, 0.1940122915954068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2840645349608257, 0.20008469743143092, 0.1940122915954068, 0.1911997509536625] ***
*** finished computation of 7 references, err: [Inf, 0.2840645349608257, 0.20008469743143092, 0.1940122915954068, 0.1911997509536625] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [24, 58, 0]]
** centroid: 1, normalized-entropy: 0.8721617883411698, [(1, 24), (2, 58)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 77, 17]]
** centroid: 2, normalized-entropy: 0.6819353204567525, [(2, 77), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [29, 53, 0]]
** centroid: 3, normalized-entropy: 0.9372930661967526, [(1, 29), (2, 53)]
*** center 4: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 79, 0]]
** centroid: 6, normalized-entropy: 0.22641094842107634, [(1, 3), (2, 79)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [108, 1, 0]]
** centroid: 7, normalized-entropy: 0.07526826758743464, [(1, 108), (2, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23503747739238495] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23503747739238495, 0.20914912663645918] ***
*** starting iteration: 2; err: [Inf, 0.23503747739238495, 0.20914912663645918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23503747739238495, 0.20914912663645918, 0.19574666271513996] ***
*** starting iteration: 3; err: [Inf, 0.23503747739238495, 0.20914912663645918, 0.19574666271513996] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23503747739238495, 0.20914912663645918, 0.19574666271513996, 0.19118978065540498] ***
*** finished computation of 7 references, err: [Inf, 0.23503747739238495, 0.20914912663645918, 0.19574666271513996, 0.19118978065540498] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [55, 30, 0]]
** centroid: 1, normalized-entropy: 0.9366673818775627, [(1, 55), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [69, 36, 0]]
** centroid: 2, normalized-entropy: 0.927526588431676, [(1, 69), (2, 36)]
*** center 3: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 131, 18]]
** centroid: 5, normalized-entropy: 0.5316714518221105, [(2, 131), (3, 18)]
*** center 6: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [41, 64, 0]]
** centroid: 7, normalized-entropy: 0.9651061634819187, [(1, 41), (2, 64)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.377262985219133] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.377262985219133, 0.29886843783182426] ***
*** starting iteration: 2; err: [Inf, 0.377262985219133, 0.29886843783182426] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.377262985219133, 0.29886843783182426, 0.2905537876630532] ***
*** starting iteration: 3; err: [Inf, 0.377262985219133, 0.29886843783182426, 0.2905537876630532] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.377262985219133, 0.29886843783182426, 0.2905537876630532, 0.2892658825958142] ***
*** starting iteration: 4; err: [Inf, 0.377262985219133, 0.29886843783182426, 0.2905537876630532, 0.2892658825958142] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.377262985219133, 0.29886843783182426, 0.2905537876630532, 0.2892658825958142, 0.28920350142673507] ***
*** finished computation of 3 references, err: [Inf, 0.377262985219133, 0.29886843783182426, 0.2905537876630532, 0.2892658825958142, 0.28920350142673507] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [225, 7, 0]]
** centroid: 1, normalized-entropy: 0.1952557689282766, [(1, 225), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [176, 25, 0]]
** centroid: 2, normalized-entropy: 0.5418160214051354, [(1, 176), (2, 25)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [1, 211, 21]]
** centroid: 3, normalized-entropy: 0.4381939490259772, [(2, 211), (3, 21)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.43253086971026894] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43253086971026894, 0.3133706315909268] ***
*** starting iteration: 2; err: [Inf, 0.43253086971026894, 0.3133706315909268] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43253086971026894, 0.3133706315909268, 0.2961895712228936] ***
*** starting iteration: 3; err: [Inf, 0.43253086971026894, 0.3133706315909268, 0.2961895712228936] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43253086971026894, 0.3133706315909268, 0.2961895712228936, 0.29302317067852307] ***
*** starting iteration: 4; err: [Inf, 0.43253086971026894, 0.3133706315909268, 0.2961895712228936, 0.29302317067852307] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43253086971026894, 0.3133706315909268, 0.2961895712228936, 0.29302317067852307, 0.29181527990479206] ***
*** starting iteration: 5; err: [Inf, 0.43253086971026894, 0.3133706315909268, 0.2961895712228936, 0.29302317067852307, 0.29181527990479206] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43253086971026894, 0.3133706315909268, 0.2961895712228936, 0.29302317067852307, 0.29181527990479206, 0.29117401620873] ***
*** finished computation of 3 references, err: [Inf, 0.43253086971026894, 0.3133706315909268, 0.2961895712228936, 0.29302317067852307, 0.29181527990479206, 0.29117401620873] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [158, 33, 0]]
** centroid: 1, normalized-entropy: 0.6640133089215537, [(1, 158), (2, 33)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 216, 17]]
** centroid: 2, normalized-entropy: 0.3768789825574349, [(2, 216), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [224, 19, 0]]
** centroid: 3, normalized-entropy: 0.3957667204933059, [(1, 224), (2, 19)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.33976885550997515] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33976885550997515, 0.3108278877887947] ***
*** starting iteration: 2; err: [Inf, 0.33976885550997515, 0.3108278877887947] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33976885550997515, 0.3108278877887947, 0.30222154151357855] ***
*** starting iteration: 3; err: [Inf, 0.33976885550997515, 0.3108278877887947, 0.30222154151357855] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33976885550997515, 0.3108278877887947, 0.30222154151357855, 0.3004548927710421] ***
*** starting iteration: 4; err: [Inf, 0.33976885550997515, 0.3108278877887947, 0.30222154151357855, 0.3004548927710421] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33976885550997515, 0.3108278877887947, 0.30222154151357855, 0.3004548927710421, 0.29976648758996327] ***
*** finished computation of 3 references, err: [Inf, 0.33976885550997515, 0.3108278877887947, 0.30222154151357855, 0.3004548927710421, 0.29976648758996327] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [79, 149, 18]]
** centroid: 1, normalized-entropy: 0.7826225261896377, [(1, 79), (2, 149), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [202, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [107, 112, 0]]
** centroid: 3, normalized-entropy: 0.9996239599875918, [(1, 107), (2, 112)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 9)
[0.9399938861016706, 0.918007828187469, 0.9149898401395408, 0.911009812207417, 0.9000317682952413, 0.8850467233700767, 0.8750097402792013, 0.8640556724389059, 0.8080445715176254]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 1) => 0.9399938861016706
finished with 11
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.21103125282594035] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21103125282594035, 0.19323803294889136] ***
*** finished computation of 7 references, err: [Inf, 0.21103125282594035, 0.19323803294889136] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [7, 70, 0]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(1, 7), (2, 70)]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 87, 21]]
** centroid: 3, normalized-entropy: 0.710676853856123, [(2, 87), (3, 21)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [122, 4, 0]]
** centroid: 4, normalized-entropy: 0.20307392998664567, [(1, 122), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [61, 17, 0]]
** centroid: 5, normalized-entropy: 0.7564041945982506, [(1, 61), (2, 17)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [27, 65, 0]]
** centroid: 6, normalized-entropy: 0.8731720603476306, [(1, 27), (2, 65)]
*** center 7: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.37791390988886403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37791390988886403, 0.21691385896616744] ***
*** finished computation of 7 references, err: [Inf, 0.37791390988886403, 0.21691385896616744] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [67, 16, 0]]
** centroid: 1, normalized-entropy: 0.7072324944713736, [(1, 67), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [132, 18, 0]]
** centroid: 2, normalized-entropy: 0.5293608652873645, [(1, 132), (2, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [65, 62, 0]]
** centroid: 3, normalized-entropy: 0.9995974498364509, [(1, 65), (2, 62)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 78, 1]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 42, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 52, 16]]
** centroid: 6, normalized-entropy: 0.787126586201269, [(2, 52), (3, 16)]
*** center 7: selecting labels [1] (freq >= 2) [from [118, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24472232660309395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24472232660309395, 0.19689092095215235] ***
*** finished computation of 7 references, err: [Inf, 0.24472232660309395, 0.19689092095215235] ***
*** center 1: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [92, 2, 0]]
** centroid: 2, normalized-entropy: 0.14854949043034832, [(1, 92), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 76, 18]]
** centroid: 3, normalized-entropy: 0.7045767128725937, [(2, 76), (3, 18)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 110, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [62, 10, 0]]
** centroid: 6, normalized-entropy: 0.581321498763703, [(1, 62), (2, 10)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [28, 63, 0]]
** centroid: 7, normalized-entropy: 0.8904916402194913, [(1, 28), (2, 63)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.16746326469656853] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16746326469656853, 0.15171173720147918] ***
*** finished computation of 7 references, err: [Inf, 0.16746326469656853, 0.15171173720147918] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [48, 41, 0]]
** centroid: 1, normalized-entropy: 0.995533068899466, [(1, 48), (2, 41)]
*** center 2: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [93, 22, 0]]
** centroid: 3, normalized-entropy: 0.7041920940481365, [(1, 93), (2, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 114, 21]]
** centroid: 5, normalized-entropy: 0.6235702082127973, [(2, 114), (3, 21)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [38, 66, 0]]
** centroid: 6, normalized-entropy: 0.9470622432515328, [(1, 38), (2, 66)]
*** center 7: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22550843280741478] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22550843280741478, 0.1692009959293102] ***
*** finished computation of 7 references, err: [Inf, 0.22550843280741478, 0.1692009959293102] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [92, 21, 0]]
** centroid: 1, normalized-entropy: 0.6926889992682925, [(1, 92), (2, 21)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 95, 4]]
** centroid: 2, normalized-entropy: 0.24414164238829597, [(2, 95), (3, 4)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 87, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [102, 23, 0]]
** centroid: 4, normalized-entropy: 0.6887498056988564, [(1, 102), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [97, 20, 0]]
** centroid: 5, normalized-entropy: 0.6598509794988008, [(1, 97), (2, 20)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 22, 13]]
** centroid: 6, normalized-entropy: 0.9517626756348312, [(2, 22), (3, 13)]
*** center 7: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20987934698636967] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20987934698636967, 0.16800224246974543] ***
*** finished computation of 7 references, err: [Inf, 0.20987934698636967, 0.16800224246974543] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 92, 0]]
** centroid: 1, normalized-entropy: 0.29292995113885967, [(1, 5), (2, 92)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [85, 65, 0]]
** centroid: 2, normalized-entropy: 0.9871377743721862, [(1, 85), (2, 65)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [68, 11, 0]]
** centroid: 3, normalized-entropy: 0.5822463050121238, [(1, 68), (2, 11)]
*** center 4: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 85, 18]]
** centroid: 5, normalized-entropy: 0.6684725699243225, [(2, 85), (3, 18)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [68, 8, 0]]
** centroid: 6, normalized-entropy: 0.48546076074591343, [(1, 68), (2, 8)]
*** center 7: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 11)
[0.9399938861016706, 0.9379978781176385, 0.918007828187469, 0.9149898401395408, 0.9139738540936145, 0.911009812207417, 0.9000317682952413, 0.8850467233700767, 0.8750097402792013, 0.8640556724389059, 0.8080445715176254]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 1) => 0.9399938861016706
finished with 12
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.2621369181667922] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2621369181667922, 0.16340684085418736] ***
*** starting iteration: 2; err: [Inf, 0.2621369181667922, 0.16340684085418736] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2621369181667922, 0.16340684085418736, 0.1493396252168583] ***
*** starting iteration: 3; err: [Inf, 0.2621369181667922, 0.16340684085418736, 0.1493396252168583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2621369181667922, 0.16340684085418736, 0.1493396252168583, 0.14670356680840455] ***
*** finished computation of 7 references, err: [Inf, 0.2621369181667922, 0.16340684085418736, 0.1493396252168583, 0.14670356680840455] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [50, 56, 0]]
** centroid: 1, normalized-entropy: 0.9976875760352552, [(1, 50), (2, 56)]
*** center 2: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 58, 0]]
** centroid: 3, normalized-entropy: 0.9884783227925916, [(1, 45), (2, 58)]
*** center 4: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 109, 21]]
** centroid: 6, normalized-entropy: 0.6379773724204627, [(2, 109), (3, 21)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [61, 20, 0]]
** centroid: 7, normalized-entropy: 0.8063495153650776, [(1, 61), (2, 20)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20597123319347357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20597123319347357, 0.15612494337513508] ***
*** starting iteration: 2; err: [Inf, 0.20597123319347357, 0.15612494337513508] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20597123319347357, 0.15612494337513508, 0.1516988608871644] ***
*** starting iteration: 3; err: [Inf, 0.20597123319347357, 0.15612494337513508, 0.1516988608871644] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20597123319347357, 0.15612494337513508, 0.1516988608871644, 0.14983524469033196] ***
*** finished computation of 7 references, err: [Inf, 0.20597123319347357, 0.15612494337513508, 0.1516988608871644, 0.14983524469033196] ***
*** center 1: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [4, 72, 0]]
** centroid: 2, normalized-entropy: 0.2974722489192896, [(1, 4), (2, 72)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 117, 17]]
** centroid: 3, normalized-entropy: 0.5487791867822941, [(2, 117), (3, 17)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [71, 15, 0]]
** centroid: 4, normalized-entropy: 0.6677135405281421, [(1, 71), (2, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 42, 0]]
** centroid: 5, normalized-entropy: 0.9919924034538556, [(1, 34), (2, 42)]
*** center 6: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [67, 22, 0]]
** centroid: 7, normalized-entropy: 0.8067955503968327, [(1, 67), (2, 22)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24327790326713913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24327790326713913, 0.17713756103021813] ***
*** starting iteration: 2; err: [Inf, 0.24327790326713913, 0.17713756103021813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24327790326713913, 0.17713756103021813, 0.16373559575167665] ***
*** starting iteration: 3; err: [Inf, 0.24327790326713913, 0.17713756103021813, 0.16373559575167665] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24327790326713913, 0.17713756103021813, 0.16373559575167665, 0.15820085810255846] ***
*** finished computation of 7 references, err: [Inf, 0.24327790326713913, 0.17713756103021813, 0.16373559575167665, 0.15820085810255846] ***
*** center 1: selecting labels [1] (freq >= 2) [from [132, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 99, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 39, 18]]
** centroid: 5, normalized-entropy: 0.8997437586982626, [(2, 39), (3, 18)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [57, 77, 0]]
** centroid: 6, normalized-entropy: 0.9838705752271929, [(1, 57), (2, 77)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [24, 46, 0]]
** centroid: 7, normalized-entropy: 0.927526588431676, [(1, 24), (2, 46)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 12)
[0.9399938861016706, 0.9379978781176385, 0.918007828187469, 0.9149898401395408, 0.9139738540936145, 0.913008817200434, 0.911009812207417, 0.9000317682952413, 0.8850467233700767, 0.8750097402792013, 0.8640556724389059, 0.8080445715176254]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 1) => 0.9399938861016706
finished with 12
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9399938861016706, 0.9379978781176385, 0.918007828187469, 0.9149898401395408, 0.9139738540936145, 0.913008817200434, 0.911009812207417, 0.9000317682952413, 0.8850467233700767, 0.8750097402792013, 0.8640556724389059, 0.8080445715176254]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 1) => 0.9399938861016706
finished with 13
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.3039532317584185] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3039532317584185, 0.2535504648103952] ***
*** starting iteration: 2; err: [Inf, 0.3039532317584185, 0.2535504648103952] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3039532317584185, 0.2535504648103952, 0.23441425955074058] ***
*** starting iteration: 3; err: [Inf, 0.3039532317584185, 0.2535504648103952, 0.23441425955074058] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3039532317584185, 0.2535504648103952, 0.23441425955074058, 0.2309770253291158] ***
*** starting iteration: 4; err: [Inf, 0.3039532317584185, 0.2535504648103952, 0.23441425955074058, 0.2309770253291158] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3039532317584185, 0.2535504648103952, 0.23441425955074058, 0.2309770253291158, 0.2305748476926517] ***
*** finished computation of 3 references, err: [Inf, 0.3039532317584185, 0.2535504648103952, 0.23441425955074058, 0.2309770253291158, 0.2305748476926517] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [147, 54, 0]]
** centroid: 1, normalized-entropy: 0.8395304981054318, [(1, 147), (2, 54)]
*** center 2: selecting labels [1] (freq >= 2) [from [206, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [49, 189, 21]]
** centroid: 3, normalized-entropy: 0.6814286891877335, [(1, 49), (2, 189), (3, 21)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3073823425103387] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3073823425103387, 0.242657940066629] ***
*** starting iteration: 2; err: [Inf, 0.3073823425103387, 0.242657940066629] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3073823425103387, 0.242657940066629, 0.23369890516079303] ***
*** starting iteration: 3; err: [Inf, 0.3073823425103387, 0.242657940066629, 0.23369890516079303] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3073823425103387, 0.242657940066629, 0.23369890516079303, 0.2313859095808113] ***
*** starting iteration: 4; err: [Inf, 0.3073823425103387, 0.242657940066629, 0.23369890516079303, 0.2313859095808113] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3073823425103387, 0.242657940066629, 0.23369890516079303, 0.2313859095808113, 0.23009987175743887] ***
*** starting iteration: 5; err: [Inf, 0.3073823425103387, 0.242657940066629, 0.23369890516079303, 0.2313859095808113, 0.23009987175743887] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3073823425103387, 0.242657940066629, 0.23369890516079303, 0.2313859095808113, 0.23009987175743887, 0.22969076968310612] ***
*** finished computation of 3 references, err: [Inf, 0.3073823425103387, 0.242657940066629, 0.23369890516079303, 0.2313859095808113, 0.23009987175743887, 0.22969076968310612] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [30, 180, 17]]
** centroid: 1, normalized-entropy: 0.5875689342279661, [(1, 30), (2, 180), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [120, 87, 0]]
** centroid: 2, normalized-entropy: 0.9815886212101388, [(1, 120), (2, 87)]
*** center 3: selecting labels [1] (freq >= 2) [from [232, 1, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3254301882990548] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3254301882990548, 0.23195606716168482] ***
*** starting iteration: 2; err: [Inf, 0.3254301882990548, 0.23195606716168482] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3254301882990548, 0.23195606716168482, 0.23158669784229466] ***
*** finished computation of 3 references, err: [Inf, 0.3254301882990548, 0.23195606716168482, 0.23158669784229466] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [211, 28, 0]]
** centroid: 1, normalized-entropy: 0.521126780219958, [(1, 211), (2, 28)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 188, 18]]
** centroid: 2, normalized-entropy: 0.4276590022251725, [(2, 188), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [177, 45, 0]]
** centroid: 3, normalized-entropy: 0.7273006785144036, [(1, 177), (2, 45)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 13)
[0.9399938861016706, 0.9379978781176385, 0.918007828187469, 0.9149898401395408, 0.9139738540936145, 0.913008817200434, 0.911009812207417, 0.9000317682952413, 0.8850467233700767, 0.8810037582492672, 0.8750097402792013, 0.8640556724389059, 0.8080445715176254]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 1) => 0.9399938861016706
finished with 15
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.25632313708564985] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25632313708564985, 0.23697725566266267] ***
*** finished computation of 3 references, err: [Inf, 0.25632313708564985, 0.23697725566266267] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [269, 5, 0]]
** centroid: 1, normalized-entropy: 0.13148822893801312, [(1, 269), (2, 5)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [29, 145, 21]]
** centroid: 2, normalized-entropy: 0.676947111453568, [(1, 29), (2, 145), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [104, 93, 0]]
** centroid: 3, normalized-entropy: 0.9977497883918053, [(1, 104), (2, 93)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3617693258385206] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3617693258385206, 0.23733358966211776] ***
*** finished computation of 3 references, err: [Inf, 0.3617693258385206, 0.23733358966211776] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [239, 10, 0]]
** centroid: 1, normalized-entropy: 0.24302824509509888, [(1, 239), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [143, 82, 0]]
** centroid: 2, normalized-entropy: 0.946310677714848, [(1, 143), (2, 82)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 176, 17]]
** centroid: 3, normalized-entropy: 0.43003821249388313, [(2, 176), (3, 17)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.41408064299314723] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41408064299314723, 0.24032800885286] ***
*** finished computation of 3 references, err: [Inf, 0.41408064299314723, 0.24032800885286] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [5, 229, 18]]
** centroid: 1, normalized-entropy: 0.32154529390609593, [(1, 5), (2, 229), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [118, 27, 0]]
** centroid: 2, normalized-entropy: 0.6934687977176178, [(1, 118), (2, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [265, 5, 0]]
** centroid: 3, normalized-entropy: 0.13303964861069897, [(1, 265), (2, 5)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.45281658015653] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45281658015653, 0.3069512770558755] ***
*** finished computation of 3 references, err: [Inf, 0.45281658015653, 0.3069512770558755] ***
*** center 1: selecting labels [1] (freq >= 1) [from [211, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [107, 137, 21]]
** centroid: 2, normalized-entropy: 0.8266461554757992, [(1, 107), (2, 137), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [84, 106, 0]]
** centroid: 3, normalized-entropy: 0.9903070204513952, [(1, 84), (2, 106)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.346769241660811] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.346769241660811, 0.30834114993608247] ***
*** finished computation of 3 references, err: [Inf, 0.346769241660811, 0.30834114993608247] ***
*** center 1: selecting labels [1] (freq >= 1) [from [248, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [26, 173, 17]]
** centroid: 2, normalized-entropy: 0.5759182759713647, [(1, 26), (2, 173), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [108, 95, 0]]
** centroid: 3, normalized-entropy: 0.9970396953866802, [(1, 108), (2, 95)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.35953497049305166] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35953497049305166, 0.3083808811540636] ***
*** finished computation of 3 references, err: [Inf, 0.35953497049305166, 0.3083808811540636] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [74, 200, 18]]
** centroid: 1, normalized-entropy: 0.708930246731846, [(1, 74), (2, 200), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [166, 61, 0]]
** centroid: 2, normalized-entropy: 0.8396254776216393, [(1, 166), (2, 61)]
*** center 3: selecting labels [1] (freq >= 1) [from [148, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 15)
[0.9399938861016706, 0.9379978781176385, 0.918007828187469, 0.9179868491245736, 0.9149898401395408, 0.9139738540936145, 0.913008817200434, 0.911009812207417, 0.9000317682952413, 0.8999778221335109, 0.8850467233700767, 0.8810037582492672, 0.8750097402792013, 0.8640556724389059, 0.8080445715176254]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 1) => 0.9399938861016706
finished with 15
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9399938861016706, 0.9379978781176385, 0.918007828187469, 0.9179868491245736, 0.9149898401395408, 0.9139738540936145, 0.913008817200434, 0.911009812207417, 0.9000317682952413, 0.8999778221335109, 0.8850467233700767, 0.8810037582492672, 0.8750097402792013, 0.8640556724389059, 0.8080445715176254]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 1) => 0.9399938861016706
finished with 15
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9399938861016706, 0.9379978781176385, 0.918007828187469, 0.9179868491245736, 0.9149898401395408, 0.9139738540936145, 0.913008817200434, 0.911009812207417, 0.9000317682952413, 0.8999778221335109, 0.8850467233700767, 0.8810037582492672, 0.8750097402792013, 0.8640556724389059, 0.8080445715176254]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 1) => 0.9399938861016706
finished with 17
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.37514831988258407] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37514831988258407, 0.2522386270169695] ***
*** starting iteration: 2; err: [Inf, 0.37514831988258407, 0.2522386270169695] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37514831988258407, 0.2522386270169695, 0.2360800377739308] ***
*** starting iteration: 3; err: [Inf, 0.37514831988258407, 0.2522386270169695, 0.2360800377739308] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37514831988258407, 0.2522386270169695, 0.2360800377739308, 0.23245961180197316] ***
*** finished computation of 3 references, err: [Inf, 0.37514831988258407, 0.2522386270169695, 0.2360800377739308, 0.23245961180197316] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [125, 50, 0]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(1, 125), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [258, 3, 0]]
** centroid: 2, normalized-entropy: 0.09054385326964301, [(1, 258), (2, 3)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [19, 190, 21]]
** centroid: 3, normalized-entropy: 0.5300930721858931, [(1, 19), (2, 190), (3, 21)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36312257232370676] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36312257232370676, 0.2309415825884203] ***
*** starting iteration: 2; err: [Inf, 0.36312257232370676, 0.2309415825884203] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36312257232370676, 0.2309415825884203, 0.2283862454822284] ***
*** starting iteration: 3; err: [Inf, 0.36312257232370676, 0.2309415825884203, 0.2283862454822284] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36312257232370676, 0.2309415825884203, 0.2283862454822284, 0.22801514458877484] ***
*** finished computation of 3 references, err: [Inf, 0.36312257232370676, 0.2309415825884203, 0.2283862454822284, 0.22801514458877484] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [220, 12, 0]]
** centroid: 1, normalized-entropy: 0.29367630985136944, [(1, 220), (2, 12)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 203, 17]]
** centroid: 2, normalized-entropy: 0.3924958067526299, [(2, 203), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [162, 53, 0]]
** centroid: 3, normalized-entropy: 0.8057022237329079, [(1, 162), (2, 53)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.25003839431629366] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25003839431629366, 0.23761031846480926] ***
*** starting iteration: 2; err: [Inf, 0.25003839431629366, 0.23761031846480926] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25003839431629366, 0.23761031846480926, 0.23595749863983317] ***
*** starting iteration: 3; err: [Inf, 0.25003839431629366, 0.23761031846480926, 0.23595749863983317] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25003839431629366, 0.23761031846480926, 0.23595749863983317, 0.23549980560605271] ***
*** finished computation of 3 references, err: [Inf, 0.25003839431629366, 0.23761031846480926, 0.23595749863983317, 0.23549980560605271] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [65, 174, 18]]
** centroid: 1, normalized-entropy: 0.7263321825090019, [(1, 65), (2, 174), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [208, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [115, 87, 0]]
** centroid: 3, normalized-entropy: 0.9860954431604952, [(1, 115), (2, 87)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.41031804941779887] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41031804941779887, 0.30022486646075147] ***
*** starting iteration: 2; err: [Inf, 0.41031804941779887, 0.30022486646075147] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41031804941779887, 0.30022486646075147, 0.2945471868931397] ***
*** starting iteration: 3; err: [Inf, 0.41031804941779887, 0.30022486646075147, 0.2945471868931397] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41031804941779887, 0.30022486646075147, 0.2945471868931397, 0.29395033240139307] ***
*** finished computation of 3 references, err: [Inf, 0.41031804941779887, 0.30022486646075147, 0.2945471868931397, 0.29395033240139307] ***
*** center 1: selecting labels [1] (freq >= 1) [from [205, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [73, 165, 21]]
** centroid: 2, normalized-entropy: 0.7717667274614883, [(1, 73), (2, 165), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [124, 78, 0]]
** centroid: 3, normalized-entropy: 0.9622623958249239, [(1, 124), (2, 78)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39980603109017526] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39980603109017526, 0.3227815516425696] ***
*** starting iteration: 2; err: [Inf, 0.39980603109017526, 0.3227815516425696] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39980603109017526, 0.3227815516425696, 0.29912941822170586] ***
*** starting iteration: 3; err: [Inf, 0.39980603109017526, 0.3227815516425696, 0.29912941822170586] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39980603109017526, 0.3227815516425696, 0.29912941822170586, 0.29361450051640287] ***
*** finished computation of 3 references, err: [Inf, 0.39980603109017526, 0.3227815516425696, 0.29912941822170586, 0.29361450051640287] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [244, 19, 0]]
** centroid: 1, normalized-entropy: 0.37424015613347195, [(1, 244), (2, 19)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 193, 17]]
** centroid: 2, normalized-entropy: 0.40552610578995474, [(2, 193), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [138, 56, 0]]
** centroid: 3, normalized-entropy: 0.8669837150190186, [(1, 138), (2, 56)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5352646320628217] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5352646320628217, 0.34345734301490943] ***
*** starting iteration: 2; err: [Inf, 0.5352646320628217, 0.34345734301490943] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5352646320628217, 0.34345734301490943, 0.3342637627733232] ***
*** starting iteration: 3; err: [Inf, 0.5352646320628217, 0.34345734301490943, 0.3342637627733232] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5352646320628217, 0.34345734301490943, 0.3342637627733232, 0.3288456004300061] ***
*** finished computation of 3 references, err: [Inf, 0.5352646320628217, 0.34345734301490943, 0.3342637627733232, 0.3288456004300061] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [130, 147, 18]]
** centroid: 1, normalized-entropy: 0.799955165431734, [(1, 130), (2, 147), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [87, 114, 0]]
** centroid: 2, normalized-entropy: 0.9869444983748495, [(1, 87), (2, 114)]
*** center 3: selecting labels [1] (freq >= 1) [from [171, 0, 0]]
finished with 6 centroids; started with 3
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.21851560190552846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21851560190552846, 0.19724856287054718] ***
*** starting iteration: 2; err: [Inf, 0.21851560190552846, 0.19724856287054718] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21851560190552846, 0.19724856287054718, 0.19371250449982472] ***
*** starting iteration: 3; err: [Inf, 0.21851560190552846, 0.19724856287054718, 0.19371250449982472] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21851560190552846, 0.19724856287054718, 0.19371250449982472, 0.19247893187403678] ***
*** finished computation of 7 references, err: [Inf, 0.21851560190552846, 0.19724856287054718, 0.19371250449982472, 0.19247893187403678] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 89, 28]]
** centroid: 1, normalized-entropy: 0.7939013591250944, [(2, 89), (3, 28)]
*** center 2: selecting labels [1] (freq >= 1) [from [150, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [93, 56, 0]]
** centroid: 3, normalized-entropy: 0.9550500971851632, [(1, 93), (2, 56)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 136, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [166, 2, 0]]
** centroid: 5, normalized-entropy: 0.09317131799548928, [(1, 166), (2, 2)]
*** center 6: selecting labels [1] (freq >= 1) [from [130, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [47, 103, 0]]
** centroid: 7, normalized-entropy: 0.8969838216377446, [(1, 47), (2, 103)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2605479732044041] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2605479732044041, 0.21282661056518554] ***
*** starting iteration: 2; err: [Inf, 0.2605479732044041, 0.21282661056518554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2605479732044041, 0.21282661056518554, 0.20183646729309113] ***
*** starting iteration: 3; err: [Inf, 0.2605479732044041, 0.21282661056518554, 0.20183646729309113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2605479732044041, 0.21282661056518554, 0.20183646729309113, 0.19890855691581966] ***
*** finished computation of 7 references, err: [Inf, 0.2605479732044041, 0.21282661056518554, 0.20183646729309113, 0.19890855691581966] ***
*** center 1: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 56, 2]]
** centroid: 2, normalized-entropy: 0.21639693245126485, [(2, 56), (3, 2)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [10, 58, 0]]
** centroid: 3, normalized-entropy: 0.6024308020404452, [(1, 10), (2, 58)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [41, 28, 0]]
** centroid: 4, normalized-entropy: 0.9742408334889756, [(1, 41), (2, 28)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [60, 20, 0]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(1, 60), (2, 20)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 36, 8]]
** centroid: 6, normalized-entropy: 0.6840384356390419, [(2, 36), (3, 8)]
*** center 7: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23486292423680424] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23486292423680424, 0.19933923375979065] ***
*** starting iteration: 2; err: [Inf, 0.23486292423680424, 0.19933923375979065] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23486292423680424, 0.19933923375979065, 0.19421901496313512] ***
*** starting iteration: 3; err: [Inf, 0.23486292423680424, 0.19933923375979065, 0.19421901496313512] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23486292423680424, 0.19933923375979065, 0.19421901496313512, 0.1922131917104125] ***
*** finished computation of 7 references, err: [Inf, 0.23486292423680424, 0.19933923375979065, 0.19421901496313512, 0.1922131917104125] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [2, 75, 11]]
** centroid: 1, normalized-entropy: 0.4388893114049023, [(1, 2), (2, 75), (3, 11)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 59, 4]]
** centroid: 2, normalized-entropy: 0.3411538931451763, [(2, 59), (3, 4)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [52, 9, 0]]
** centroid: 3, normalized-entropy: 0.603652249754401, [(1, 52), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [42, 11, 0]]
** centroid: 4, normalized-entropy: 0.7367680100024784, [(1, 42), (2, 11)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [27, 26, 0]]
** centroid: 5, normalized-entropy: 0.9997431860710851, [(1, 27), (2, 26)]
*** center 6: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
finished with 13 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24916435667406767] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24916435667406767, 0.21021880451589822] ***
*** starting iteration: 2; err: [Inf, 0.24916435667406767, 0.21021880451589822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24916435667406767, 0.21021880451589822, 0.20367008749581875] ***
*** starting iteration: 3; err: [Inf, 0.24916435667406767, 0.21021880451589822, 0.20367008749581875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24916435667406767, 0.21021880451589822, 0.20367008749581875, 0.19768224669061601] ***
*** finished computation of 7 references, err: [Inf, 0.24916435667406767, 0.21021880451589822, 0.20367008749581875, 0.19768224669061601] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [19, 49, 2]]
** centroid: 1, normalized-entropy: 0.6419115912987577, [(1, 19), (2, 49), (3, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 70, 11]]
** centroid: 4, normalized-entropy: 0.5731393980555147, [(2, 70), (3, 11)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [73, 5, 0]]
** centroid: 5, normalized-entropy: 0.34351974100740135, [(1, 73), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [48, 24, 0]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(1, 48), (2, 24)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [22, 45, 0]]
** centroid: 7, normalized-entropy: 0.9132401614300725, [(1, 22), (2, 45)]
finished with 13 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2807946790587157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2807946790587157, 0.21038043237756937] ***
*** starting iteration: 2; err: [Inf, 0.2807946790587157, 0.21038043237756937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2807946790587157, 0.21038043237756937, 0.20349253834411501] ***
*** starting iteration: 3; err: [Inf, 0.2807946790587157, 0.21038043237756937, 0.20349253834411501] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2807946790587157, 0.21038043237756937, 0.20349253834411501, 0.20010640694014728] ***
*** finished computation of 7 references, err: [Inf, 0.2807946790587157, 0.21038043237756937, 0.20349253834411501, 0.20010640694014728] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [84, 4, 0]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(1, 84), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 23, 12]]
** centroid: 2, normalized-entropy: 0.927526588431676, [(2, 23), (3, 12)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 52, 1]]
** centroid: 3, normalized-entropy: 0.13503620280212753, [(2, 52), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 55, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [85, 17, 0]]
** centroid: 6, normalized-entropy: 0.6500224216483541, [(1, 85), (2, 17)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [31, 37, 0]]
** centroid: 7, normalized-entropy: 0.9943766625699823, [(1, 31), (2, 37)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25171918552089484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25171918552089484, 0.20411386462301015] ***
*** starting iteration: 2; err: [Inf, 0.25171918552089484, 0.20411386462301015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25171918552089484, 0.20411386462301015, 0.19689751663804053] ***
*** starting iteration: 3; err: [Inf, 0.25171918552089484, 0.20411386462301015, 0.19689751663804053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25171918552089484, 0.20411386462301015, 0.19689751663804053, 0.1946137638911605] ***
*** finished computation of 7 references, err: [Inf, 0.25171918552089484, 0.20411386462301015, 0.19689751663804053, 0.1946137638911605] ***
*** center 1: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [27, 24, 0]]
** centroid: 2, normalized-entropy: 0.9975025463691153, [(1, 27), (2, 24)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 58, 16]]
** centroid: 3, normalized-entropy: 0.7531979910695015, [(2, 58), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 73, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [19, 46, 0]]
** centroid: 6, normalized-entropy: 0.871683617119982, [(1, 19), (2, 46)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [74, 6, 0]]
** centroid: 7, normalized-entropy: 0.3843115441264972, [(1, 74), (2, 6)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2588518513776362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2588518513776362, 0.21030385581869632] ***
*** starting iteration: 2; err: [Inf, 0.2588518513776362, 0.21030385581869632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2588518513776362, 0.21030385581869632, 0.2011746122185141] ***
*** starting iteration: 3; err: [Inf, 0.2588518513776362, 0.21030385581869632, 0.2011746122185141] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2588518513776362, 0.21030385581869632, 0.2011746122185141, 0.19664272721111775] ***
*** finished computation of 7 references, err: [Inf, 0.2588518513776362, 0.21030385581869632, 0.2011746122185141, 0.19664272721111775] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 87, 13]]
** centroid: 1, normalized-entropy: 0.557438185027989, [(2, 87), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [43, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [58, 50, 0]]
** centroid: 3, normalized-entropy: 0.9960383613659186, [(1, 58), (2, 50)]
*** center 4: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [1, 33, 0]]
** centroid: 5, normalized-entropy: 0.1914332548141934, [(1, 1), (2, 33)]
*** center 6: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [43, 12, 0]]
** centroid: 7, normalized-entropy: 0.7568336324184036, [(1, 43), (2, 12)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25936085372511297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25936085372511297, 0.2175096729202196] ***
*** starting iteration: 2; err: [Inf, 0.25936085372511297, 0.2175096729202196] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25936085372511297, 0.2175096729202196, 0.20556455875840038] ***
*** starting iteration: 3; err: [Inf, 0.25936085372511297, 0.2175096729202196, 0.20556455875840038] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25936085372511297, 0.2175096729202196, 0.20556455875840038, 0.1958571362225339] ***
*** finished computation of 7 references, err: [Inf, 0.25936085372511297, 0.2175096729202196, 0.20556455875840038, 0.1958571362225339] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [71, 19, 0]]
** centroid: 1, normalized-entropy: 0.7436012269934466, [(1, 71), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [53, 1, 0]]
** centroid: 2, normalized-entropy: 0.13303964861069897, [(1, 53), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [61, 7, 0]]
** centroid: 4, normalized-entropy: 0.4782501641071144, [(1, 61), (2, 7)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [5, 97, 0]]
** centroid: 5, normalized-entropy: 0.28221763445592507, [(1, 5), (2, 97)]
*** center 6: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 78, 10]]
** centroid: 7, normalized-entropy: 0.5107878229540133, [(2, 78), (3, 10)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3027387096807361] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3027387096807361, 0.20953600072948028] ***
*** starting iteration: 2; err: [Inf, 0.3027387096807361, 0.20953600072948028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3027387096807361, 0.20953600072948028, 0.1954813715405762] ***
*** starting iteration: 3; err: [Inf, 0.3027387096807361, 0.20953600072948028, 0.1954813715405762] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3027387096807361, 0.20953600072948028, 0.1954813715405762, 0.1921902190372348] ***
*** finished computation of 7 references, err: [Inf, 0.3027387096807361, 0.20953600072948028, 0.1954813715405762, 0.1921902190372348] ***
*** center 1: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [53, 19, 0]]
** centroid: 2, normalized-entropy: 0.8325582396745668, [(1, 53), (2, 19)]
*** center 3: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 38, 0]]
** centroid: 4, normalized-entropy: 0.9470622432515328, [(1, 66), (2, 38)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 72, 9]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(2, 72), (3, 9)]
*** center 6: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [9, 64, 0]]
** centroid: 7, normalized-entropy: 0.5387379148665815, [(1, 9), (2, 64)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23149381114169956] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23149381114169956, 0.20468355209566652] ***
*** starting iteration: 2; err: [Inf, 0.23149381114169956, 0.20468355209566652] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23149381114169956, 0.20468355209566652, 0.18682005982846023] ***
*** starting iteration: 3; err: [Inf, 0.23149381114169956, 0.20468355209566652, 0.18682005982846023] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23149381114169956, 0.20468355209566652, 0.18682005982846023, 0.1839240958467126] ***
*** finished computation of 7 references, err: [Inf, 0.23149381114169956, 0.20468355209566652, 0.18682005982846023, 0.1839240958467126] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [13, 36, 0]]
** centroid: 1, normalized-entropy: 0.834648285181383, [(1, 13), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [53, 25, 0]]
** centroid: 2, normalized-entropy: 0.9049382594235603, [(1, 53), (2, 25)]
*** center 3: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [1, 72, 0]]
** centroid: 5, normalized-entropy: 0.1044190780054077, [(1, 1), (2, 72)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [81, 1, 0]]
** centroid: 6, normalized-entropy: 0.09501724567107643, [(1, 81), (2, 1)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 55, 13]]
** centroid: 7, normalized-entropy: 0.7039260680195971, [(2, 55), (3, 13)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2813886906784028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2813886906784028, 0.20025340860337018] ***
*** starting iteration: 2; err: [Inf, 0.2813886906784028, 0.20025340860337018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2813886906784028, 0.20025340860337018, 0.18920449254848062] ***
*** starting iteration: 3; err: [Inf, 0.2813886906784028, 0.20025340860337018, 0.18920449254848062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2813886906784028, 0.20025340860337018, 0.18920449254848062, 0.18487369876354934] ***
*** finished computation of 7 references, err: [Inf, 0.2813886906784028, 0.20025340860337018, 0.18920449254848062, 0.18487369876354934] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [3, 68, 0]]
** centroid: 1, normalized-entropy: 0.25253077151613923, [(1, 3), (2, 68)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [96, 2, 0]]
** centroid: 2, normalized-entropy: 0.14372616993938164, [(1, 96), (2, 2)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [9, 44, 0]]
** centroid: 3, normalized-entropy: 0.6572729784684466, [(1, 9), (2, 44)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 66, 14]]
** centroid: 4, normalized-entropy: 0.6690158350565576, [(2, 66), (3, 14)]
*** center 5: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [52, 19, 0]]
** centroid: 6, normalized-entropy: 0.8380078505079931, [(1, 52), (2, 19)]
*** center 7: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2371064261086285] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2371064261086285, 0.18736737476661802] ***
*** starting iteration: 2; err: [Inf, 0.2371064261086285, 0.18736737476661802] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2371064261086285, 0.18736737476661802, 0.18346563170198352] ***
*** starting iteration: 3; err: [Inf, 0.2371064261086285, 0.18736737476661802, 0.18346563170198352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2371064261086285, 0.18736737476661802, 0.18346563170198352, 0.18281992059503682] ***
*** finished computation of 7 references, err: [Inf, 0.2371064261086285, 0.18736737476661802, 0.18346563170198352, 0.18281992059503682] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [41, 28, 0]]
** centroid: 1, normalized-entropy: 0.9742408334889756, [(1, 41), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [55, 6, 0]]
** centroid: 2, normalized-entropy: 0.4637773498877517, [(1, 55), (2, 6)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 75, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [71, 11, 0]]
** centroid: 4, normalized-entropy: 0.5687008669370753, [(1, 71), (2, 11)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 86, 16]]
** centroid: 5, normalized-entropy: 0.6267511370265896, [(2, 86), (3, 16)]
*** center 6: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.34081544920336454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34081544920336454, 0.22315350968856365] ***
*** starting iteration: 2; err: [Inf, 0.34081544920336454, 0.22315350968856365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34081544920336454, 0.22315350968856365, 0.20851426316983998] ***
*** starting iteration: 3; err: [Inf, 0.34081544920336454, 0.22315350968856365, 0.20851426316983998] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34081544920336454, 0.22315350968856365, 0.20851426316983998, 0.20043040470965207] ***
*** finished computation of 7 references, err: [Inf, 0.34081544920336454, 0.22315350968856365, 0.20851426316983998, 0.20043040470965207] ***
*** center 1: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [34, 17, 0]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(1, 34), (2, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [27, 18, 0]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(1, 27), (2, 18)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 49, 16]]
** centroid: 4, normalized-entropy: 0.8051250074646822, [(2, 49), (3, 16)]
*** center 5: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 94, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [88, 11, 0]]
** centroid: 7, normalized-entropy: 0.5032583347756457, [(1, 88), (2, 11)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.238227748086676] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.238227748086676, 0.19434835725463928] ***
*** starting iteration: 2; err: [Inf, 0.238227748086676, 0.19434835725463928] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.238227748086676, 0.19434835725463928, 0.18655531433224679] ***
*** starting iteration: 3; err: [Inf, 0.238227748086676, 0.19434835725463928, 0.18655531433224679] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.238227748086676, 0.19434835725463928, 0.18655531433224679, 0.185494015770033] ***
*** finished computation of 7 references, err: [Inf, 0.238227748086676, 0.19434835725463928, 0.18655531433224679, 0.185494015770033] ***
*** center 1: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [2, 47, 0]]
** centroid: 2, normalized-entropy: 0.2460225782203316, [(1, 2), (2, 47)]
*** center 3: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 66, 17]]
** centroid: 5, normalized-entropy: 0.7314625617214586, [(2, 66), (3, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [44, 31, 0]]
** centroid: 6, normalized-entropy: 0.9782176659354249, [(1, 44), (2, 31)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [31, 34, 0]]
** centroid: 7, normalized-entropy: 0.9984628557283827, [(1, 31), (2, 34)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22673616904765367] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22673616904765367, 0.19286288302205504] ***
*** starting iteration: 2; err: [Inf, 0.22673616904765367, 0.19286288302205504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22673616904765367, 0.19286288302205504, 0.19151890403591096] ***
*** starting iteration: 3; err: [Inf, 0.22673616904765367, 0.19286288302205504, 0.19151890403591096] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22673616904765367, 0.19286288302205504, 0.19151890403591096, 0.19122247555106878] ***
*** finished computation of 7 references, err: [Inf, 0.22673616904765367, 0.19286288302205504, 0.19151890403591096, 0.19122247555106878] ***
*** center 1: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 9, 0]]
** centroid: 2, normalized-entropy: 0.6161661934005354, [(1, 50), (2, 9)]
*** center 3: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [55, 21, 0]]
** centroid: 5, normalized-entropy: 0.8503821170987139, [(1, 55), (2, 21)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 83, 11]]
** centroid: 6, normalized-entropy: 0.5207375686265202, [(2, 83), (3, 11)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [18, 67, 0]]
** centroid: 7, normalized-entropy: 0.7448423974714387, [(1, 18), (2, 67)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21155198436323552] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21155198436323552, 0.18544854319654405] ***
*** starting iteration: 2; err: [Inf, 0.21155198436323552, 0.18544854319654405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21155198436323552, 0.18544854319654405, 0.18475747869350015] ***
*** finished computation of 7 references, err: [Inf, 0.21155198436323552, 0.18544854319654405, 0.18475747869350015] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 60, 10]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(2, 60), (3, 10)]
*** center 2: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [1, 68, 0]]
** centroid: 3, normalized-entropy: 0.10928571467638523, [(1, 1), (2, 68)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [24, 52, 0]]
** centroid: 4, normalized-entropy: 0.8997437586982626, [(1, 24), (2, 52)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [66, 3, 0]]
** centroid: 5, normalized-entropy: 0.2580186686648155, [(1, 66), (2, 3)]
*** center 6: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29919551899656655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29919551899656655, 0.21469776903046295] ***
*** starting iteration: 2; err: [Inf, 0.29919551899656655, 0.21469776903046295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29919551899656655, 0.21469776903046295, 0.20333089720085262] ***
*** starting iteration: 3; err: [Inf, 0.29919551899656655, 0.21469776903046295, 0.20333089720085262] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29919551899656655, 0.21469776903046295, 0.20333089720085262, 0.19788491164892913] ***
*** finished computation of 7 references, err: [Inf, 0.29919551899656655, 0.21469776903046295, 0.20333089720085262, 0.19788491164892913] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [15, 65, 0]]
** centroid: 1, normalized-entropy: 0.6962122601251459, [(1, 15), (2, 65)]
*** center 2: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [60, 47, 0]]
** centroid: 4, normalized-entropy: 0.9893257549491837, [(1, 60), (2, 47)]
*** center 5: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 75, 12]]
** centroid: 6, normalized-entropy: 0.5787946246321198, [(2, 75), (3, 12)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [20, 17, 0]]
** centroid: 7, normalized-entropy: 0.9952525494396791, [(1, 20), (2, 17)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24455716352537274] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24455716352537274, 0.19316022809967398] ***
*** starting iteration: 2; err: [Inf, 0.24455716352537274, 0.19316022809967398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24455716352537274, 0.19316022809967398, 0.1900794303417206] ***
*** starting iteration: 3; err: [Inf, 0.24455716352537274, 0.19316022809967398, 0.1900794303417206] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24455716352537274, 0.19316022809967398, 0.1900794303417206, 0.18877625992894173] ***
*** finished computation of 7 references, err: [Inf, 0.24455716352537274, 0.19316022809967398, 0.1900794303417206, 0.18877625992894173] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [61, 17, 0]]
** centroid: 1, normalized-entropy: 0.7564041945982506, [(1, 61), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 14, 0]]
** centroid: 2, normalized-entropy: 0.710676853856123, [(1, 58), (2, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [7, 51, 0]]
** centroid: 4, normalized-entropy: 0.5313400141801669, [(1, 7), (2, 51)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [43, 5, 0]]
** centroid: 5, normalized-entropy: 0.4820661480830933, [(1, 43), (2, 5)]
*** center 6: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 94, 14]]
** centroid: 7, normalized-entropy: 0.5564215672884282, [(2, 94), (3, 14)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2220005825608969] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2220005825608969, 0.191635483533144] ***
*** starting iteration: 2; err: [Inf, 0.2220005825608969, 0.191635483533144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2220005825608969, 0.191635483533144, 0.18796334087941796] ***
*** starting iteration: 3; err: [Inf, 0.2220005825608969, 0.191635483533144, 0.18796334087941796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2220005825608969, 0.191635483533144, 0.18796334087941796, 0.1843121694466099] ***
*** finished computation of 7 references, err: [Inf, 0.2220005825608969, 0.191635483533144, 0.18796334087941796, 0.1843121694466099] ***
*** center 1: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 86, 11]]
** centroid: 2, normalized-entropy: 0.5100930822965021, [(2, 86), (3, 11)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [50, 23, 0]]
** centroid: 3, normalized-entropy: 0.8989377852081333, [(1, 50), (2, 23)]
*** center 4: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [45, 59, 0]]
** centroid: 6, normalized-entropy: 0.9868884753797076, [(1, 45), (2, 59)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [62, 13, 0]]
** centroid: 7, normalized-entropy: 0.6652735227649414, [(1, 62), (2, 13)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2922775045968592] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2922775045968592, 0.20776089848577975] ***
*** starting iteration: 2; err: [Inf, 0.2922775045968592, 0.20776089848577975] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2922775045968592, 0.20776089848577975, 0.19204210048913956] ***
*** starting iteration: 3; err: [Inf, 0.2922775045968592, 0.20776089848577975, 0.19204210048913956] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2922775045968592, 0.20776089848577975, 0.19204210048913956, 0.1897055727224797] ***
*** finished computation of 7 references, err: [Inf, 0.2922775045968592, 0.20776089848577975, 0.19204210048913956, 0.1897055727224797] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 71, 3]]
** centroid: 1, normalized-entropy: 0.2447650820208971, [(2, 71), (3, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [33, 47, 0]]
** centroid: 2, normalized-entropy: 0.9777945702913884, [(1, 33), (2, 47)]
*** center 3: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [67, 2, 0]]
** centroid: 4, normalized-entropy: 0.18927843126120178, [(1, 67), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [69, 4, 0]]
** centroid: 5, normalized-entropy: 0.306424729870515, [(1, 69), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [52, 14, 0]]
** centroid: 6, normalized-entropy: 0.7455178428108284, [(1, 52), (2, 14)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 62, 11]]
** centroid: 7, normalized-entropy: 0.6115516951951333, [(2, 62), (3, 11)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24817347234208137] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24817347234208137, 0.20353886834718288] ***
*** starting iteration: 2; err: [Inf, 0.24817347234208137, 0.20353886834718288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24817347234208137, 0.20353886834718288, 0.19070762079395354] ***
*** starting iteration: 3; err: [Inf, 0.24817347234208137, 0.20353886834718288, 0.19070762079395354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24817347234208137, 0.20353886834718288, 0.19070762079395354, 0.18816416533477603] ***
*** finished computation of 7 references, err: [Inf, 0.24817347234208137, 0.20353886834718288, 0.19070762079395354, 0.18816416533477603] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 47, 12]]
** centroid: 1, normalized-entropy: 0.7286561673702678, [(2, 47), (3, 12)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [41, 29, 0]]
** centroid: 2, normalized-entropy: 0.9786961448300948, [(1, 41), (2, 29)]
*** center 3: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 74, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [44, 34, 0]]
** centroid: 5, normalized-entropy: 0.98811083652183, [(1, 44), (2, 34)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [70, 1, 0]]
** centroid: 6, normalized-entropy: 0.10679203237584184, [(1, 70), (2, 1)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [80, 8, 0]]
** centroid: 7, normalized-entropy: 0.43949698692151346, [(1, 80), (2, 8)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21841429859120398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21841429859120398, 0.19098424061760305] ***
*** starting iteration: 2; err: [Inf, 0.21841429859120398, 0.19098424061760305] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21841429859120398, 0.19098424061760305, 0.1887426352314651] ***
*** starting iteration: 3; err: [Inf, 0.21841429859120398, 0.19098424061760305, 0.1887426352314651] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21841429859120398, 0.19098424061760305, 0.1887426352314651, 0.18731683724187315] ***
*** finished computation of 7 references, err: [Inf, 0.21841429859120398, 0.19098424061760305, 0.1887426352314651, 0.18731683724187315] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [82, 2, 0]]
** centroid: 1, normalized-entropy: 0.1623261801753929, [(1, 82), (2, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 82, 1]]
** centroid: 3, normalized-entropy: 0.09408443883267342, [(2, 82), (3, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 3, 0]]
** centroid: 4, normalized-entropy: 0.2580186686648155, [(1, 66), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [60, 13, 0]]
** centroid: 5, normalized-entropy: 0.6758635715876156, [(1, 60), (2, 13)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 60, 14]]
** centroid: 6, normalized-entropy: 0.699772221773307, [(2, 60), (3, 14)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [24, 34, 0]]
** centroid: 7, normalized-entropy: 0.9784493292686188, [(1, 24), (2, 34)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27049808950722215] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27049808950722215, 0.20535031589865685] ***
*** starting iteration: 2; err: [Inf, 0.27049808950722215, 0.20535031589865685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27049808950722215, 0.20535031589865685, 0.19169610028807074] ***
*** starting iteration: 3; err: [Inf, 0.27049808950722215, 0.20535031589865685, 0.19169610028807074] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27049808950722215, 0.20535031589865685, 0.19169610028807074, 0.18882741526467725] ***
*** finished computation of 7 references, err: [Inf, 0.27049808950722215, 0.20535031589865685, 0.19169610028807074, 0.18882741526467725] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [11, 56, 0]]
** centroid: 1, normalized-entropy: 0.6442142137378306, [(1, 11), (2, 56)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 90, 14]]
** centroid: 2, normalized-entropy: 0.5699613760403499, [(2, 90), (3, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [83, 17, 0]]
** centroid: 5, normalized-entropy: 0.6577047787442196, [(1, 83), (2, 17)]
*** center 6: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [41, 23, 0]]
** centroid: 7, normalized-entropy: 0.9421631690835511, [(1, 41), (2, 23)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23622277232445776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23622277232445776, 0.20191517754178495] ***
*** starting iteration: 2; err: [Inf, 0.23622277232445776, 0.20191517754178495] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23622277232445776, 0.20191517754178495, 0.1955365151297301] ***
*** starting iteration: 3; err: [Inf, 0.23622277232445776, 0.20191517754178495, 0.1955365151297301] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23622277232445776, 0.20191517754178495, 0.1955365151297301, 0.19276428754813968] ***
*** finished computation of 7 references, err: [Inf, 0.23622277232445776, 0.20191517754178495, 0.1955365151297301, 0.19276428754813968] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [13, 51, 0]]
** centroid: 1, normalized-entropy: 0.7281342378690551, [(1, 13), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [1, 59, 0]]
** centroid: 2, normalized-entropy: 0.12229159706937456, [(1, 1), (2, 59)]
*** center 3: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [42, 6, 0]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(1, 42), (2, 6)]
*** center 5: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [62, 36, 0]]
** centroid: 6, normalized-entropy: 0.9486131982385807, [(1, 62), (2, 36)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 51, 14]]
** centroid: 7, normalized-entropy: 0.7516499461153354, [(2, 51), (3, 14)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26475066716596485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26475066716596485, 0.20767182939313353] ***
*** starting iteration: 2; err: [Inf, 0.26475066716596485, 0.20767182939313353] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26475066716596485, 0.20767182939313353, 0.19947641536593438] ***
*** starting iteration: 3; err: [Inf, 0.26475066716596485, 0.20767182939313353, 0.19947641536593438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26475066716596485, 0.20767182939313353, 0.19947641536593438, 0.19556677531450986] ***
*** finished computation of 7 references, err: [Inf, 0.26475066716596485, 0.20767182939313353, 0.19947641536593438, 0.19556677531450986] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [56, 7, 0]]
** centroid: 1, normalized-entropy: 0.5032583347756457, [(1, 56), (2, 7)]
*** center 2: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [6, 61, 0]]
** centroid: 3, normalized-entropy: 0.43497348007474274, [(1, 6), (2, 61)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 32, 11]]
** centroid: 4, normalized-entropy: 0.8203636429576731, [(2, 32), (3, 11)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [12, 57, 0]]
** centroid: 5, normalized-entropy: 0.6665783579949205, [(1, 12), (2, 57)]
*** center 6: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [31, 30, 0]]
** centroid: 7, normalized-entropy: 0.999806132804711, [(1, 31), (2, 30)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.251245480645448] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.251245480645448, 0.191588817485841] ***
*** starting iteration: 2; err: [Inf, 0.251245480645448, 0.191588817485841] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.251245480645448, 0.191588817485841, 0.18828847750648856] ***
*** starting iteration: 3; err: [Inf, 0.251245480645448, 0.191588817485841, 0.18828847750648856] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.251245480645448, 0.191588817485841, 0.18828847750648856, 0.18776028085127472] ***
*** finished computation of 7 references, err: [Inf, 0.251245480645448, 0.191588817485841, 0.18828847750648856, 0.18776028085127472] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [16, 82, 0]]
** centroid: 1, normalized-entropy: 0.6420642892306891, [(1, 16), (2, 82)]
*** center 2: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 70, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 47, 16]]
** centroid: 5, normalized-entropy: 0.8175072881213616, [(2, 47), (3, 16)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [74, 2, 0]]
** centroid: 6, normalized-entropy: 0.17556502585750275, [(1, 74), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [54, 8, 0]]
** centroid: 7, normalized-entropy: 0.5547781633412736, [(1, 54), (2, 8)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2410148262679577] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2410148262679577, 0.19945781075954438] ***
*** starting iteration: 2; err: [Inf, 0.2410148262679577, 0.19945781075954438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2410148262679577, 0.19945781075954438, 0.18931420970894397] ***
*** starting iteration: 3; err: [Inf, 0.2410148262679577, 0.19945781075954438, 0.18931420970894397] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2410148262679577, 0.19945781075954438, 0.18931420970894397, 0.18451574648264796] ***
*** finished computation of 7 references, err: [Inf, 0.2410148262679577, 0.19945781075954438, 0.18931420970894397, 0.18451574648264796] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [6, 39, 0]]
** centroid: 1, normalized-entropy: 0.5665095065529052, [(1, 6), (2, 39)]
*** center 2: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [18, 55, 0]]
** centroid: 4, normalized-entropy: 0.8058049113482652, [(1, 18), (2, 55)]
*** center 5: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [38, 29, 0]]
** centroid: 6, normalized-entropy: 0.9869444983748495, [(1, 38), (2, 29)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 75, 16]]
** centroid: 7, normalized-entropy: 0.6708561590207726, [(2, 75), (3, 16)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2516778361722827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2516778361722827, 0.19945335238054396] ***
*** starting iteration: 2; err: [Inf, 0.2516778361722827, 0.19945335238054396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2516778361722827, 0.19945335238054396, 0.19032305717840792] ***
*** starting iteration: 3; err: [Inf, 0.2516778361722827, 0.19945335238054396, 0.19032305717840792] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2516778361722827, 0.19945335238054396, 0.19032305717840792, 0.1848881747913547] ***
*** finished computation of 7 references, err: [Inf, 0.2516778361722827, 0.19945335238054396, 0.19032305717840792, 0.1848881747913547] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [4, 70, 0]]
** centroid: 1, normalized-entropy: 0.30337483608641397, [(1, 4), (2, 70)]
*** center 2: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 61, 12]]
** centroid: 3, normalized-entropy: 0.644694043811662, [(2, 61), (3, 12)]
*** center 4: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [15, 56, 0]]
** centroid: 6, normalized-entropy: 0.743898745288434, [(1, 15), (2, 56)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [54, 8, 0]]
** centroid: 7, normalized-entropy: 0.5547781633412736, [(1, 54), (2, 8)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3016280724238604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3016280724238604, 0.21319170001894236] ***
*** starting iteration: 2; err: [Inf, 0.3016280724238604, 0.21319170001894236] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3016280724238604, 0.21319170001894236, 0.20096442149579524] ***
*** starting iteration: 3; err: [Inf, 0.3016280724238604, 0.21319170001894236, 0.20096442149579524] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3016280724238604, 0.21319170001894236, 0.20096442149579524, 0.1958640645095147] ***
*** finished computation of 7 references, err: [Inf, 0.3016280724238604, 0.21319170001894236, 0.20096442149579524, 0.1958640645095147] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [54, 15, 0]]
** centroid: 1, normalized-entropy: 0.7553754125614286, [(1, 54), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [37, 44, 0]]
** centroid: 2, normalized-entropy: 0.994605981300523, [(1, 37), (2, 44)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 111, 15]]
** centroid: 3, normalized-entropy: 0.5266170655714281, [(2, 111), (3, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [63, 26, 0]]
** centroid: 4, normalized-entropy: 0.8714630056611941, [(1, 63), (2, 26)]
*** center 5: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [28, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25137146844528613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25137146844528613, 0.20502266521565615] ***
*** starting iteration: 2; err: [Inf, 0.25137146844528613, 0.20502266521565615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25137146844528613, 0.20502266521565615, 0.188385500933975] ***
*** starting iteration: 3; err: [Inf, 0.25137146844528613, 0.20502266521565615, 0.188385500933975] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25137146844528613, 0.20502266521565615, 0.188385500933975, 0.18268271461687982] ***
*** finished computation of 7 references, err: [Inf, 0.25137146844528613, 0.20502266521565615, 0.188385500933975, 0.18268271461687982] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [35, 26, 0]]
** centroid: 1, normalized-entropy: 0.9842399889605549, [(1, 35), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [51, 6, 0]]
** centroid: 2, normalized-entropy: 0.48546076074591343, [(1, 51), (2, 6)]
*** center 3: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [99, 3, 0]]
** centroid: 4, normalized-entropy: 0.1914332548141934, [(1, 99), (2, 3)]
*** center 5: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 64, 2]]
** centroid: 6, normalized-entropy: 0.19590927087360496, [(2, 64), (3, 2)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 78, 7]]
** centroid: 7, normalized-entropy: 0.4104161417181887, [(2, 78), (3, 7)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2343437503129244] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2343437503129244, 0.20283815349079667] ***
*** starting iteration: 2; err: [Inf, 0.2343437503129244, 0.20283815349079667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2343437503129244, 0.20283815349079667, 0.1989389616250992] ***
*** starting iteration: 3; err: [Inf, 0.2343437503129244, 0.20283815349079667, 0.1989389616250992] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2343437503129244, 0.20283815349079667, 0.1989389616250992, 0.19639004933461546] ***
*** finished computation of 7 references, err: [Inf, 0.2343437503129244, 0.20283815349079667, 0.1989389616250992, 0.19639004933461546] ***
*** center 1: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [81, 13, 0]]
** centroid: 2, normalized-entropy: 0.57976367540648, [(1, 81), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 38, 0]]
** centroid: 3, normalized-entropy: 0.9902246902198684, [(1, 48), (2, 38)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [60, 34, 0]]
** centroid: 4, normalized-entropy: 0.9440870182837795, [(1, 60), (2, 34)]
*** center 5: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 103, 15]]
** centroid: 6, normalized-entropy: 0.5494827677177795, [(2, 103), (3, 15)]
*** center 7: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 386,3 => 28,1 => 586), Dict(2 => 362,3 => 43,1 => 595))
[ Info: ===== scores for single classifier: {"micro_f1":0.926,"precision":0.926,"recall":0.926,"macro_recall":0.9426776235356021,"macro_f1":0.8871624314987324,"accuracy":0.926,"class_f1":{"2":0.895774647887324,"3":0.8113207547169812,"1":0.9543918918918919},"class_precision":{"2":0.9137931034482759,"3":0.6825396825396826,"1":0.9592529711375212},"class_recall":{"2":0.8784530386740331,"3":1.0,"1":0.9495798319327731}}
[ Info: ===== scores for 1: {"micro_f1":0.968,"precision":0.968,"recall":0.968,"macro_recall":0.9669482183211201,"macro_f1":0.9271960554357558,"accuracy":0.968,"class_f1":{"2":0.9550561797752809,"3":0.8399999999999999,"1":0.9865319865319866},"class_precision":{"2":0.9714285714285714,"3":0.7368421052631579,"1":0.9881956155143339},"class_recall":{"2":0.9392265193370166,"3":0.9767441860465116,"1":0.984873949579832}}
[ Info: ===== scores for 5: {"micro_f1":0.969,"precision":0.969,"recall":0.969,"macro_recall":0.9772242598696937,"macro_f1":0.9368740418494114,"accuracy":0.969,"class_f1":{"2":0.9572413793103448,"3":0.8686868686868687,"1":0.9846938775510204},"class_precision":{"2":0.9559228650137741,"3":0.7678571428571429,"1":0.9965576592082617},"class_recall":{"2":0.9585635359116023,"3":1.0,"1":0.973109243697479}}
[ Info: ===== scores for 7: {"micro_f1":0.966,"precision":0.966,"recall":0.966,"macro_recall":0.9751830013773466,"macro_f1":0.9346608574461573,"accuracy":0.966,"class_f1":{"2":0.9531680440771351,"3":0.8686868686868687,"1":0.9821276595744681},"class_precision":{"2":0.9505494505494505,"3":0.7678571428571429,"1":0.9948275862068966},"class_recall":{"2":0.9558011049723757,"3":1.0,"1":0.9697478991596639}}
[ Info: ===== scores for 9: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.9727424671526069,"macro_f1":0.9310735306619176,"accuracy":0.961,"class_f1":{"2":0.946793997271487,"3":0.8686868686868687,"1":0.9777397260273972},"class_precision":{"2":0.9353099730458221,"3":0.7678571428571429,"1":0.9965095986038395},"class_recall":{"2":0.9585635359116023,"3":1.0,"1":0.9596638655462185}}
[ Info: ===== scores for 11: {"micro_f1":0.963,"precision":0.963,"recall":0.963,"macro_recall":0.9742235015553183,"macro_f1":0.932553811237771,"accuracy":0.963,"class_f1":{"2":0.9495225102319236,"3":0.8686868686868687,"1":0.9794520547945207},"class_precision":{"2":0.9380053908355795,"3":0.7678571428571429,"1":0.9982547993019197},"class_recall":{"2":0.9613259668508287,"3":1.0,"1":0.9613445378151261}}
(score = 0.968, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.968, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.968, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.959, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.959, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.969,"k":5,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.969,"precision":0.969,"recall":0.969,"macro_recall":0.9772242598696937,"macro_f1":0.9368740418494114,"accuracy":0.969,"class_f1":{"2":0.9572413793103448,"3":0.8686868686868687,"1":0.9846938775510204},"class_precision":{"2":0.9559228650137741,"3":0.7678571428571429,"1":0.9965576592082617},"class_recall":{"2":0.9585635359116023,"3":1.0,"1":0.973109243697479}}
Test Summary: | Pass  Total
AKNC          |    8      8
[91, 1, 2, 1, 6, 4, 3, 1, 17, 4, 3, 5, 15, 12, 8, 45, 5, 3, 5, 5, 9, 13, 4, 5, 9, 7, 2, 6, 1, 2, 4, 2, 1, 2, 2, 42, 17, 4, 12, 5, 38, 5, 39, 7, 16, 6, 5, 5, 11, 9, 28, 74, 31, 2, 13, 7, 12, 15, 6, 4, 48, 13, 30, 38, 34, 11, 20, 2, 4, 3, 64, 36, 11, 5, 4, 1, 6, 44, 29, 63, 7, 7, 1, 13, 4, 59, 19, 9, 6, 59, 146, 17, 33, 11, 7, 13, 27, 17, 1, 11, 1, 33, 11, 9, 109, 34, 26, 17, 45, 21, 86, 6, 21, 40, 21, 46, 27, 112, 6, 48, 22, 4, 18, 3, 7, 5, 6, 432, 4, 22, 4, 1, 1, 9, 13, 12, 4, 29, 64, 11, 28, 5, 26, 17, 134, 23, 52, 5, 15, 7, 206, 41, 3, 15, 34, 29, 3, 16, 24, 5, 46, 4, 6, 7, 19, 16, 24, 26, 13, 92, 35, 68, 174, 42, 12, 14, 17, 23, 25, 59, 2, 8, 10, 20, 1, 4, 53, 15, 7, 144, 19, 13, 4, 38, 11, 62, 21, 22, 45, 1, 38, 24, 16, 16, 7, 6, 13, 22, 4, 23, 114, 11, 4, 144, 16, 4, 80, 128, 396, 7, 1, 14, 12, 108, 21, 10, 15, 32, 95, 6, 19, 78, 16, 29, 16, 40, 7, 42, 9, 29, 21, 40, 2, 30, 62, 20, 22, 23, 70, 24, 16, 18, 64, 4, 1468, 13, 6, 4, 34, 33, 13, 4, 9, 81, 10, 15, 13, 9, 67, 5, 8, 17, 38, 24, 53, 21, 8, 20, 87, 22, 125, 58, 334, 18, 25, 30, 11, 31, 8, 27, 18, 34, 18, 36, 34, 14, 28, 6, 5, 19]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6629999999999999, speedup = 0.27283672340584797, eval_ratio = 0.09993300000000001)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.421875,"recall":0.4079861111111111,"f1":null,"seconds":0.0001954939216375351,"exhaustive_search_seconds":0.00040260888636112213,"evaluations":558.8984375,"distances_sum":1739.9886754001143}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.583333333333333,"recall":0.583333333333333,"f1":null,"seconds":0.00024653971195220947,"exhaustive_search_seconds":0.00040260888636112213,"evaluations":779.140625,"distances_sum":1667.1294174825907}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6918402777777772,"recall":0.6918402777777772,"f1":0.6918402777777772,"seconds":0.0005013011395931244,"exhaustive_search_seconds":0.00040260888636112213,"evaluations":986.75,"distances_sum":1605.988201996853}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7699652777777771,"recall":0.7699652777777771,"f1":0.7699652777777771,"seconds":0.0005992259830236435,"exhaustive_search_seconds":0.00040260888636112213,"evaluations":1154.171875,"distances_sum":1578.8676052296742}
KCenters.DeloneInvIndex> reached performance {"precision":0.8255208333333325,"recall":0.8255208333333325,"f1":0.8255208333333325,"seconds":0.0008893739432096481,"exhaustive_search_seconds":0.00040260888636112213,"evaluations":1287.265625,"distances_sum":1560.4528881936048}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7840000000000004, speedup = 0.414644705822868, eval_ratio = 0.13702)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
