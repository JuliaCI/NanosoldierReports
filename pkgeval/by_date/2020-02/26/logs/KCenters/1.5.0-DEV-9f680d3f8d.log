Julia Version 1.5.0-DEV.347
Commit 9f680d3f8d (2020-02-26 17:01 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed MappedArrays ──────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.1.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed Compat ────────────────────── v3.6.0
  Installed TableTraits ───────────────── v1.0.0
  Installed KCenters ──────────────────── v0.2.1
  Installed Tables ────────────────────── v1.0.2
  Installed JSON ──────────────────────── v0.21.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Missings ──────────────────── v0.4.3
  Installed Parsers ───────────────────── v0.3.11
  Installed Reexport ──────────────────── v0.2.0
  Installed MLDataPattern ─────────────── v0.5.0
  Installed DataStructures ────────────── v0.17.10
  Installed StatsBase ─────────────────── v0.32.1
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed CategoricalArrays ─────────── v0.7.7
  Installed SimilaritySearch ──────────── v0.3.19
  Installed MLDataUtils ───────────────── v0.5.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed DataFrames ────────────────── v0.20.2
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.1
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.6.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.10
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.1
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.2
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_fh9Zcl/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.6.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.10
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.1
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.2
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9370718047022819
[ Info: 0.8302954188982645
[ Info: 0.5556568817794323
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33463870132962864
mean(cdnet.distances) = 0.3499426440646251
mean(crand.distances) = 0.33909906471769014
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5458984375, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.5458984375,"f1":null,"seconds":4.159286618232727e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.1484375,"distances_sum":1582.4243513136696}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6689453125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6689453125,"f1":0.7914710289710298,"seconds":4.51505184173584e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.8359375,"distances_sum":2000.8320083327776}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6689453125,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6689453125,"f1":0.7914710289710298,"seconds":4.51505184173584e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.8359375,"distances_sum":2000.8320083327776}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8056640625, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.8056640625,"f1":0.8856601731601741,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.2421875,"distances_sum":2554.2692309539757}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9516998626373632,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.8046875,"distances_sum":3108.855396235987}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9082703754578763,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.34375,"distances_sum":2722.3242804212587}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9120306776556784,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.4296875,"distances_sum":2720.222149636887}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8610821470196477,"seconds":5.478039383888245e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.1953125,"distances_sum":2488.5688654058786}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9516998626373632,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.8046875,"distances_sum":3108.855396235987}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9607002372627377,"seconds":6.332993507385254e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.8515625,"distances_sum":3189.9630278189866}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":9,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9743704212454218,"seconds":6.537884473800659e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.9296875,"distances_sum":3269.699633237319}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":9,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9743704212454218,"seconds":6.537884473800659e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.9296875,"distances_sum":3269.699633237319}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":9,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9743704212454218,"seconds":6.537884473800659e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.9296875,"distances_sum":3269.699633237319}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.8722501456876465,"seconds":5.25452196598053e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.9140625,"distances_sum":2317.095034078387}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7861328125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7861328125,"f1":0.8722501456876465,"seconds":5.25452196598053e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.9140625,"distances_sum":2317.095034078387}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8999599358974367,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.2578125,"distances_sum":2434.9834015464708}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.8997996794871801,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.3125,"distances_sum":2492.327355451206}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.830078125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.830078125,"f1":0.8997996794871801,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.3125,"distances_sum":2492.327355451206}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9645146520146524,"seconds":5.953013896942139e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8984375,"distances_sum":2977.7984596588235}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9335622710622719,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7734375,"distances_sum":2745.1735283463436}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9316334706959712,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7421875,"distances_sum":2720.656201418678}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9289148351648355,"seconds":5.690380930900574e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.6796875,"distances_sum":2730.5560804613606}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9645146520146524,"seconds":5.953013896942139e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8984375,"distances_sum":2977.7984596588235}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9645146520146524,"seconds":5.953013896942139e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8984375,"distances_sum":2977.7984596588235}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.572265625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.572265625,"f1":null,"seconds":4.477798938751221e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":7.3359375,"distances_sum":1489.9859375922413}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.376953125, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.376953125,"f1":null,"seconds":3.6656856536865234e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":6.359375,"distances_sum":963.6684832347664}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.572265625,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.572265625,"f1":null,"seconds":4.477798938751221e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":7.3359375,"distances_sum":1489.9859375922413}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9134271978021985,"seconds":5.679205060005188e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.5234375,"distances_sum":2448.827902566674}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7216796875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.7216796875,"f1":0.8269546425796435,"seconds":4.928559064865112e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.1796875,"distances_sum":1996.1147578201253}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8583984375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8583984375,"f1":0.9175225815850824,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.59375,"distances_sum":2507.6617678076495}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9115270146520155,"seconds":5.478039383888245e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.578125,"distances_sum":2475.067881164453}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8730493464868473,"seconds":5.193054676055908e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.390625,"distances_sum":2218.1793023376445}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8583984375,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.8583984375,"f1":0.9175225815850824,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.59375,"distances_sum":2507.6617678076495}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":10,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9668555402930408,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.875,"distances_sum":2896.052900863403}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9425423534798537,"seconds":6.0480087995529175e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.6328125,"distances_sum":2771.445776458511}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.952203525641026,"seconds":6.05359673500061e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.796875,"distances_sum":2771.142791629859}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9357803654678664,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.65625,"distances_sum":2707.3843883258787}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":10,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9668555402930408,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.875,"distances_sum":2896.052900863403}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":10,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9668555402930408,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.875,"distances_sum":2896.052900863403}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3291015625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3291015625,"f1":null,"seconds":3.4421682357788086e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":5.1875,"distances_sum":949.0843228350051}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3291015625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3291015625,"f1":null,"seconds":3.4421682357788086e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":5.1875,"distances_sum":949.0843228350051}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4638671875, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.4638671875,"f1":0.615366577866578,"seconds":4.189088940620422e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.34375,"distances_sum":1326.0479446750976}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9098214285714293,"seconds":5.630776286125183e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.484375,"distances_sum":2558.535981499827}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.845703125,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.845703125,"f1":0.9098214285714293,"seconds":5.630776286125183e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.484375,"distances_sum":2558.535981499827}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.9163518772893777,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.4921875,"distances_sum":2625.2185180795527}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9140255577755585,"seconds":5.600973963737488e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.515625,"distances_sum":2626.9353184046868}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.85546875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.85546875,"f1":0.9140255577755585,"seconds":5.600973963737488e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.515625,"distances_sum":2626.9353184046868}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.85546875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.85546875,"f1":0.9140255577755585,"seconds":5.600973963737488e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.515625,"distances_sum":2626.9353184046868}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8574264277389286,"seconds":5.31412661075592e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.09375,"distances_sum":2146.2259806467464}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4111328125, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4111328125,"f1":null,"seconds":3.7364661693573e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":5.8515625,"distances_sum":1026.564370986337}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7998046875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7998046875,"f1":0.882214660339661,"seconds":5.282461643218994e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.1484375,"distances_sum":2244.7226858324334}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7998046875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7998046875,"f1":0.882214660339661,"seconds":5.282461643218994e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.1484375,"distances_sum":2244.7226858324334}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9143429487179494,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.390625,"distances_sum":2504.0479742876673}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9320054945054951,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.6640625,"distances_sum":2641.890614397441}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9123142482517492,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.3828125,"distances_sum":2513.9960094972025}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9019615800865808,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.3203125,"distances_sum":2443.8810974672533}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.952913232600733,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.8125,"distances_sum":2827.5618725422764}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8056640625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.8056640625,"f1":0.8811634546009552,"seconds":5.33275306224823e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.1875,"distances_sum":2332.114300244179}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.952913232600733,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.8125,"distances_sum":2827.5618725422764}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9581330128205131,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.8203125,"distances_sum":2832.349187254212}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9644173534798537,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.8828125,"distances_sum":2876.3171481532713}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9611263736263739,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.875,"distances_sum":2855.1450648791997}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9714686355311359,"seconds":6.018206477165222e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.875,"distances_sum":2941.067138554525}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9573374542124548,"seconds":5.768612027168274e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.8125,"distances_sum":2849.666557272271}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9714686355311359,"seconds":6.018206477165222e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.875,"distances_sum":2941.067138554525}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9714686355311359,"seconds":6.018206477165222e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.875,"distances_sum":2941.067138554525}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.66015625,"f1":0.7821189227439235,"seconds":4.597008228302002e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.734375,"distances_sum":1836.2989819800039}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5673828125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5673828125,"f1":0.7078823953823961,"seconds":4.1425228118896484e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.125,"distances_sum":1519.6693905462462}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5712890625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5712890625,"f1":null,"seconds":4.200264811515808e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.28125,"distances_sum":1499.044875365604}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.66015625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.66015625,"f1":0.7821189227439235,"seconds":4.597008228302002e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.734375,"distances_sum":1836.2989819800039}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.8992876914751924,"seconds":5.37186861038208e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.4453125,"distances_sum":2458.446508999309}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9331194846819854,"seconds":6.241723895072937e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.7421875,"distances_sum":2717.430997119569}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8566109237984245,"seconds":5.323439836502075e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.3359375,"distances_sum":2188.7324896329606}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.794921875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.794921875,"f1":0.8777566183816192,"seconds":5.405396223068237e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.359375,"distances_sum":2288.9792240166726}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8666963245088254,"seconds":5.211681127548218e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.25,"distances_sum":2251.274616307713}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8623126873126883,"seconds":5.3532421588897705e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.34375,"distances_sum":2234.1690319300483}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.884765625,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.884765625,"f1":0.9331194846819854,"seconds":6.241723895072937e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.7421875,"distances_sum":2717.430997119569}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9520890567765573,"seconds":5.904585123062134e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.7890625,"distances_sum":2900.5655894469255}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9646978021978028,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8671875,"distances_sum":2979.023710954598}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9582074175824182,"seconds":5.811452865600586e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.828125,"distances_sum":2941.0255134824915}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9500057234432241,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.7578125,"distances_sum":2928.8478835428427}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9597527472527476,"seconds":5.966052412986755e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8203125,"distances_sum":2960.7416358383384}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9646978021978028,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8671875,"distances_sum":2979.023710954598}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9646978021978028,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8671875,"distances_sum":2979.023710954598}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5087890625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5087890625,"f1":null,"seconds":4.569068551063538e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":7.78125,"distances_sum":1055.6052644460806}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8523622211122218,"seconds":5.403533577919006e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.5,"distances_sum":1677.2082634950432}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7646484375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7646484375,"f1":0.8523622211122218,"seconds":5.403533577919006e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.5,"distances_sum":1677.2082634950432}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9223932317682326,"seconds":5.727633833885193e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.7890625,"distances_sum":1982.2432504453473}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9354853479853487,"seconds":5.591660737991333e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.7421875,"distances_sum":2101.47069747329}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9385359432234439,"seconds":5.8766454458236694e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.828125,"distances_sum":2084.1365254598213}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.89453125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.9385359432234439,"seconds":5.8766454458236694e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.828125,"distances_sum":2084.1365254598213}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9661515567765571,"seconds":6.144866347312927e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.9140625,"distances_sum":2246.270337328332}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9665178571428575,"seconds":6.036832928657532e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.921875,"distances_sum":2238.2296210028053}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9513309607059611,"seconds":5.973502993583679e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.828125,"distances_sum":2153.674956889742}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":11,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9750744047619052,"seconds":6.8284571170806885e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.953125,"distances_sum":2299.4845094762877}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9454587079587085,"seconds":5.951151251792908e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.828125,"distances_sum":2142.0962414593882}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":11,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9750744047619052,"seconds":6.8284571170806885e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.953125,"distances_sum":2299.4845094762877}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":11,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9750744047619052,"seconds":6.8284571170806885e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.953125,"distances_sum":2299.4845094762877}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3837890625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3837890625,"f1":null,"seconds":3.807246685028076e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.1953125,"distances_sum":714.5555272774753}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.36328125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.36328125,"f1":null,"seconds":3.8035213947296143e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":5.8203125,"distances_sum":710.3059428740463}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3837890625,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.3837890625,"f1":null,"seconds":3.807246685028076e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.1953125,"distances_sum":714.5555272774753}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5966796875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5966796875,"f1":null,"seconds":4.353001713752747e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.53125,"distances_sum":1170.9034421374513}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.875475566100567,"seconds":5.68293035030365e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.4609375,"distances_sum":1612.5421462887516}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9086455211455219,"seconds":5.321577191352844e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.546875,"distances_sum":1757.5143520203635}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.712890625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.712890625,"f1":0.8204462204462212,"seconds":4.911795258522034e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.015625,"distances_sum":1401.895231725584}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.388671875, conf: {"ssize":2,"bsize":2}, perf: {"precision":1.0,"recall":0.388671875,"f1":0.5345161782661779,"seconds":3.6731362342834473e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.203125,"distances_sum":736.3920180852045}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.841796875,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.841796875,"f1":0.9086455211455219,"seconds":5.321577191352844e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.546875,"distances_sum":1757.5143520203635}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9649381868131871,"seconds":6.152316927909851e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8515625,"distances_sum":2103.7170435264597}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9750400641025646,"seconds":6.109476089477539e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.875,"distances_sum":2170.7089173759828}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9498740842490846,"seconds":5.781650543212891e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.7421875,"distances_sum":2043.6954630346993}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9750400641025646,"seconds":6.109476089477539e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.875,"distances_sum":2170.7089173759828}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9750400641025646,"seconds":6.109476089477539e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.875,"distances_sum":2170.7089173759828}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.478515625, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.478515625,"f1":0.6331141081141084,"seconds":4.805624485015869e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":6.3359375,"distances_sum":1013.5115394562845}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6201171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6201171875,"f1":0.7533143939393948,"seconds":4.69014048576355e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.421875,"distances_sum":1292.454882086986}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.48046875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.48046875,"f1":null,"seconds":4.176050424575806e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":6.484375,"distances_sum":988.1299559352789}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6201171875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6201171875,"f1":0.7533143939393948,"seconds":4.69014048576355e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.421875,"distances_sum":1292.454882086986}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8670022685647693,"seconds":6.280839443206787e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.2265625,"distances_sum":1679.0459106434216}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9027191558441565,"seconds":5.776062607765198e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.5,"distances_sum":1829.092191220716}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.8408159548784556,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.1796875,"distances_sum":1579.0364836603499}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.8956964910089917,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.421875,"distances_sum":1800.7854278311831}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6279296875, conf: {"ssize":7,"bsize":4}, perf: {"precision":null,"recall":0.6279296875,"f1":null,"seconds":4.7013163566589355e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.4296875,"distances_sum":1321.2599488534784}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8388671875,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.8388671875,"f1":0.9027191558441565,"seconds":5.776062607765198e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.5,"distances_sum":1829.092191220716}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9532826548451555,"seconds":5.869194865226746e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.7421875,"distances_sum":2139.285271496191}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.925758616383617,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.5390625,"distances_sum":1997.124017247997}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9449893856143862,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.65625,"distances_sum":2104.439501742746}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9651645229770234,"seconds":5.906447768211365e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.90625,"distances_sum":2192.381221951687}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9047686688311697,"seconds":5.511566996574402e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.328125,"distances_sum":1883.1114442505589}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9446657509157514,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.6328125,"distances_sum":2100.2430956816984}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9367705211455217,"seconds":5.76116144657135e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.5703125,"distances_sum":2010.3479972680643}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9651645229770234,"seconds":5.906447768211365e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.90625,"distances_sum":2192.381221951687}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9651645229770234,"seconds":5.906447768211365e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.90625,"distances_sum":2192.381221951687}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.330078125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.330078125,"f1":null,"seconds":3.7457793951034546e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":5.4921875,"distances_sum":762.8286474000665}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6484375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6484375,"f1":0.7732215700965709,"seconds":4.7031790018081665e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.734375,"distances_sum":1382.620326308001}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.181640625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.181640625,"f1":null,"seconds":3.1832605600357056e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":5.0234375,"distances_sum":441.7334491840843}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6484375,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6484375,"f1":0.7732215700965709,"seconds":4.7031790018081665e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.734375,"distances_sum":1382.620326308001}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9437385531135537,"seconds":5.666166543960571e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.65625,"distances_sum":2164.8413850244056}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9476419413919419,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.703125,"distances_sum":2165.1446385966506}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9391140109890116,"seconds":5.478039383888245e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.71875,"distances_sum":2105.91489251043}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8509480103230112,"seconds":5.103647708892822e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.234375,"distances_sum":1623.6992473416196}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8526005244755251,"seconds":5.02169132232666e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.3203125,"distances_sum":1628.8039246337958}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9091796875,"state":{"ssize":8,"bsize":8},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9476419413919419,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.703125,"distances_sum":2165.1446385966506}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9563244047619053,"seconds":5.671754479408264e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8359375,"distances_sum":2177.2955106702843}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9738839285714291,"seconds":5.977228283882141e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.921875,"distances_sum":2281.2456550313473}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9706101190476195,"seconds":5.804002285003662e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.875,"distances_sum":2284.0993703581653}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9598443223443227,"seconds":6.023794412612915e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8359375,"distances_sum":2219.673944416998}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9738839285714291,"seconds":5.977228283882141e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.921875,"distances_sum":2281.2456550313473}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9738839285714291,"seconds":5.977228283882141e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.921875,"distances_sum":2281.2456550313473}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6611328125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6611328125,"f1":0.7832972582972593,"seconds":4.67151403427124e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.484375,"distances_sum":1399.7511615499461}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.201171875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.201171875,"f1":null,"seconds":3.1068921089172363e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":5.28125,"distances_sum":453.4342550064445}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6611328125,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6611328125,"f1":0.7832972582972593,"seconds":4.67151403427124e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.484375,"distances_sum":1399.7511615499461}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8496206918081928,"seconds":5.239620804786682e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.0234375,"distances_sum":1680.9740048389317}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8978058399933408,"seconds":5.474314093589783e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.2421875,"distances_sum":1942.1956163681857}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9296245421245428,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.6171875,"distances_sum":2113.10355150055}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8779296875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8779296875,"f1":0.9296245421245428,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.6171875,"distances_sum":2113.10355150055}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9673191391941397,"seconds":6.062909960746765e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.84375,"distances_sum":2328.3456284758095}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.942811355311356,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.6640625,"distances_sum":2226.0665213043317}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9673191391941397,"seconds":6.062909960746765e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.84375,"distances_sum":2328.3456284758095}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9673191391941397,"seconds":6.062909960746765e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.84375,"distances_sum":2328.3456284758095}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.384765625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.384765625,"f1":null,"seconds":3.5446137189865112e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":6.3359375,"distances_sum":761.9149633056702}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8688160797535807,"seconds":5.127862095832825e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.4453125,"distances_sum":1737.5043866702667}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7802734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7802734375,"f1":0.8688160797535807,"seconds":5.127862095832825e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.4453125,"distances_sum":1737.5043866702667}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9377721237096243,"seconds":5.8300793170928955e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.7421875,"distances_sum":2169.977851758946}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8935546875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9377721237096243,"seconds":5.8300793170928955e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.7421875,"distances_sum":2169.977851758946}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8935546875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9377721237096243,"seconds":5.8300793170928955e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.7421875,"distances_sum":2169.977851758946}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8935546875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9377721237096243,"seconds":5.8300793170928955e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.7421875,"distances_sum":2169.977851758946}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.171875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.171875,"f1":null,"seconds":2.998858690261841e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":5.1015625,"distances_sum":425.8635170653194}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.171875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.171875,"f1":null,"seconds":2.777203917503357e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":5.2265625,"distances_sum":402.4897245536696}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.171875,"state":{"ssize":4,"bsize":1},"perf":{"precision":null,"recall":0.171875,"f1":null,"seconds":2.998858690261841e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":5.1015625,"distances_sum":425.8635170653194}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.509765625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.509765625,"f1":0.6641240703740708,"seconds":3.997236490249634e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.8671875,"distances_sum":1093.9440774722602}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7857647560772569,"seconds":4.557892680168152e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.8203125,"distances_sum":1416.253792671932}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.784263306138307,"seconds":4.8782676458358765e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.8828125,"distances_sum":1458.6185926352534}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5146484375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5146484375,"f1":0.6619365009990017,"seconds":4.1369348764419556e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.8984375,"distances_sum":1132.5734891127845}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6630859375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6630859375,"f1":0.7857647560772569,"seconds":4.557892680168152e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.8203125,"distances_sum":1416.253792671932}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9490728021978027,"seconds":5.6978315114974976e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8203125,"distances_sum":2211.730427683125}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8622573606948614,"seconds":5.245208740234375e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.3046875,"distances_sum":1734.2379868284784}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":10,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8930408133533143,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.6484375,"distances_sum":1848.5918890952926}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9336054570429576,"seconds":5.908310413360596e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.84375,"distances_sum":2070.2312627741303}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7975658022533032,"seconds":4.801899194717407e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.046875,"distances_sum":1482.9602177751706}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8641696844821853,"seconds":5.098059773445129e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.3671875,"distances_sum":1721.700092860798}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9490728021978027,"seconds":5.6978315114974976e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8203125,"distances_sum":2211.730427683125}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9490728021978027,"seconds":5.6978315114974976e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8203125,"distances_sum":2211.730427683125}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.201171875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.201171875,"f1":null,"seconds":3.3527612686157227e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":5.9375,"distances_sum":360.0458872472865}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.201171875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.201171875,"f1":null,"seconds":3.3527612686157227e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":5.9375,"distances_sum":360.0458872472865}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.220703125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.220703125,"f1":null,"seconds":3.637745976448059e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.75,"distances_sum":420.2518154463907}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.220703125,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.220703125,"f1":null,"seconds":3.637745976448059e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.75,"distances_sum":420.2518154463907}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6669921875,"f1":0.7895458707958717,"seconds":4.887580871582031e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.25,"distances_sum":1404.6560234558176}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5615234375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5615234375,"f1":0.700196331446332,"seconds":4.384666681289673e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.9765625,"distances_sum":1129.0751910219697}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6669921875,"state":{"ssize":7,"bsize":4},"perf":{"precision":1.0,"recall":0.6669921875,"f1":0.7895458707958717,"seconds":4.887580871582031e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.25,"distances_sum":1404.6560234558176}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8067765567765576,"seconds":4.995614290237427e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.359375,"distances_sum":1498.718072590501}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.7999328796203805,"seconds":4.69014048576355e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.3671875,"distances_sum":1441.923679002391}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9378808691308699,"seconds":5.820766091346741e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.890625,"distances_sum":2104.554143051886}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9324118589743595,"seconds":5.869194865226746e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.953125,"distances_sum":2065.388644803657}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6953125, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6953125,"f1":0.8069040334665343,"seconds":4.941597580909729e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.4375,"distances_sum":1502.941077806514}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8916015625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8916015625,"f1":0.9378808691308699,"seconds":5.820766091346741e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.890625,"distances_sum":2104.554143051886}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8916015625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8916015625,"f1":0.9378808691308699,"seconds":5.820766091346741e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.890625,"distances_sum":2104.554143051886}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8500234140859149,"seconds":4.023313522338867e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.953125,"distances_sum":1710.671350694317}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7529296875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7529296875,"f1":0.8500234140859149,"seconds":4.023313522338867e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.953125,"distances_sum":1710.671350694317}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.945615842490843,"seconds":7.3481351137161255e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.7734375,"distances_sum":2262.0068175564284}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9033203125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.945615842490843,"seconds":7.3481351137161255e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.7734375,"distances_sum":2262.0068175564284}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9688072344322347,"seconds":5.8300793170928955e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.796875,"distances_sum":2411.931723809289}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9688072344322347,"seconds":5.8300793170928955e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.796875,"distances_sum":2411.931723809289}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9688072344322347,"seconds":5.8300793170928955e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.796875,"distances_sum":2411.931723809289}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7314453125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7314453125,"f1":0.8391774891774899,"seconds":3.9674341678619385e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.515625,"distances_sum":1741.651836973795}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7314453125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7314453125,"f1":0.8391774891774899,"seconds":3.9674341678619385e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.515625,"distances_sum":1741.651836973795}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7421875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7421875,"f1":0.8418610902985909,"seconds":3.7048012018203735e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.4765625,"distances_sum":1804.6921472215731}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7421875,"state":{"ssize":6,"bsize":5},"perf":{"precision":1.0,"recall":0.7421875,"f1":0.8418610902985909,"seconds":3.7048012018203735e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.4765625,"distances_sum":1804.6921472215731}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8458026348651357,"seconds":3.6228448152542114e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.4140625,"distances_sum":1808.1035020318955}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8976362179487187,"seconds":3.997236490249634e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.515625,"distances_sum":2098.945484128028}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.850655594405595,"seconds":3.647059202194214e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.53125,"distances_sum":1792.1643586140935}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9521520146520152,"seconds":4.133209586143494e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.828125,"distances_sum":2431.4890022769127}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.8456215659340669,"seconds":3.842636942863464e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.515625,"distances_sum":1804.318894495304}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9521520146520152,"seconds":4.133209586143494e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.828125,"distances_sum":2431.4890022769127}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9169921875,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9521520146520152,"seconds":4.133209586143494e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.828125,"distances_sum":2431.4890022769127}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.30859375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.30859375,"f1":null,"seconds":2.346932888031006e-6,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":4.8359375,"distances_sum":688.1522324134966}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1552734375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1552734375,"f1":null,"seconds":1.8961727619171143e-6,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":4.4453125,"distances_sum":337.9894852518033}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.30859375,"state":{"ssize":2,"bsize":2},"perf":{"precision":null,"recall":0.30859375,"f1":null,"seconds":2.346932888031006e-6,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":4.8359375,"distances_sum":688.1522324134966}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.640625, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.640625,"f1":0.767811702186703,"seconds":3.2410025596618652e-6,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":7.2421875,"distances_sum":1365.7048541229212}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.882577145077146,"seconds":3.876164555549622e-6,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":8.1015625,"distances_sum":1915.7928262537187}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.70703125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.70703125,"f1":0.8200788794538802,"seconds":3.518536686897278e-6,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":7.5234375,"distances_sum":1526.7692924533278}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.802734375,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.802734375,"f1":0.882577145077146,"seconds":3.876164555549622e-6,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":8.1015625,"distances_sum":1915.7928262537187}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":10,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9247138278388283,"seconds":4.000961780548096e-6,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":8.625,"distances_sum":2173.644592507938}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9381753663003669,"seconds":4.002824425697327e-6,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":8.6640625,"distances_sum":2268.7761568215547}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8960398976023984,"seconds":3.943219780921936e-6,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":8.3203125,"distances_sum":1961.9843313632189}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8896484375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.8896484375,"f1":0.9381753663003669,"seconds":4.002824425697327e-6,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":8.6640625,"distances_sum":2268.7761568215547}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8896484375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.8896484375,"f1":0.9381753663003669,"seconds":4.002824425697327e-6,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":8.6640625,"distances_sum":2268.7761568215547}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8562739343989353,"seconds":5.971640348434448e-6,"exhaustive_search_seconds":1.7434358596801758e-6,"evaluations":8.21875,"distances_sum":1747.9031842668142}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7775490134865143,"seconds":5.284324288368225e-6,"exhaustive_search_seconds":1.7434358596801758e-6,"evaluations":7.6640625,"distances_sum":1497.8420359660354}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76171875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.76171875,"f1":0.8562739343989353,"seconds":5.971640348434448e-6,"exhaustive_search_seconds":1.7434358596801758e-6,"evaluations":8.21875,"distances_sum":1747.9031842668142}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.956725045787546,"seconds":6.433576345443726e-6,"exhaustive_search_seconds":1.7434358596801758e-6,"evaluations":8.8125,"distances_sum":2408.118815261156}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8969379578754587,"seconds":6.118789315223694e-6,"exhaustive_search_seconds":1.7434358596801758e-6,"evaluations":8.4375,"distances_sum":1945.2339495551041}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.956725045787546,"seconds":6.433576345443726e-6,"exhaustive_search_seconds":1.7434358596801758e-6,"evaluations":8.8125,"distances_sum":2408.118815261156}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9682291666666669,"seconds":6.44288957118988e-6,"exhaustive_search_seconds":1.7434358596801758e-6,"evaluations":8.8671875,"distances_sum":2480.824516578878}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9707245879120883,"seconds":6.629154086112976e-6,"exhaustive_search_seconds":1.7434358596801758e-6,"evaluations":8.890625,"distances_sum":2500.3952066880015}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9668154761904765,"seconds":6.92903995513916e-6,"exhaustive_search_seconds":1.7434358596801758e-6,"evaluations":8.84375,"distances_sum":2463.79787877515}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9676167582417587,"seconds":7.105991244316101e-6,"exhaustive_search_seconds":1.7434358596801758e-6,"evaluations":8.875,"distances_sum":2473.2822051324774}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9707245879120883,"seconds":6.629154086112976e-6,"exhaustive_search_seconds":1.7434358596801758e-6,"evaluations":8.890625,"distances_sum":2500.3952066880015}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9707245879120883,"seconds":6.629154086112976e-6,"exhaustive_search_seconds":1.7434358596801758e-6,"evaluations":8.890625,"distances_sum":2500.3952066880015}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6396484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6396484375,"f1":0.7664627039627047,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":7.3359375,"distances_sum":1563.2951323609184}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6328125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6328125,"f1":0.7608958749583757,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":7.390625,"distances_sum":1506.0244750834333}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3603515625, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3603515625,"f1":null,"seconds":4.36045229434967e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":5.328125,"distances_sum":752.9765141106266}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6396484375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6396484375,"f1":0.7664627039627047,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":7.3359375,"distances_sum":1563.2951323609184}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.847580024142525,"seconds":6.401911377906799e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.1328125,"distances_sum":1796.7626358047273}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.941898726273727,"seconds":7.4766576290130615e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.703125,"distances_sum":2384.27984808573}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9344722985347993,"seconds":6.7148357629776e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.6328125,"distances_sum":2266.0692986116187}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7255859375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7255859375,"f1":0.8294443403818413,"seconds":6.590038537979126e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":7.96875,"distances_sum":1706.1658207642167}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.941898726273727,"seconds":7.4766576290130615e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.703125,"distances_sum":2384.27984808573}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9610920329670336,"seconds":7.871538400650024e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.8203125,"distances_sum":2488.8678117259083}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9672275641025645,"seconds":5.83939254283905e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.84375,"distances_sum":2527.0820509791047}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9644574175824181,"seconds":5.865469574928284e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.765625,"distances_sum":2540.9040897926116}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9646806318681324,"seconds":5.679205060005188e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.875,"distances_sum":2492.485596513675}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":10,"bsize":11}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9638221153846159,"seconds":5.979090929031372e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.8359375,"distances_sum":2488.2953185286206}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9528159340659345,"seconds":8.819624781608582e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.7265625,"distances_sum":2447.356058637884}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9672275641025645,"seconds":5.83939254283905e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.84375,"distances_sum":2527.0820509791047}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9672275641025645,"seconds":5.83939254283905e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.84375,"distances_sum":2527.0820509791047}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41015625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.41015625,"f1":null,"seconds":5.7425349950790405e-6,"exhaustive_search_seconds":2.7511268854141235e-6,"evaluations":6.328125,"distances_sum":896.6453268361413}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4208984375, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4208984375,"f1":null,"seconds":3.0454248189926147e-6,"exhaustive_search_seconds":2.7511268854141235e-6,"evaluations":6.328125,"distances_sum":858.5468781922901}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4228515625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4228515625,"f1":null,"seconds":3.933906555175781e-6,"exhaustive_search_seconds":2.7511268854141235e-6,"evaluations":6.40625,"distances_sum":927.4517503432326}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4228515625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.4228515625,"f1":null,"seconds":3.933906555175781e-6,"exhaustive_search_seconds":2.7511268854141235e-6,"evaluations":6.40625,"distances_sum":927.4517503432326}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8508049242424249,"seconds":5.425885319709778e-6,"exhaustive_search_seconds":2.7511268854141235e-6,"evaluations":8.5859375,"distances_sum":1801.1269402021665}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8650797119547128,"seconds":5.3551048040390015e-6,"exhaustive_search_seconds":2.7511268854141235e-6,"evaluations":8.5546875,"distances_sum":1899.5221979959406}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8510510323010331,"seconds":4.751607775688171e-6,"exhaustive_search_seconds":2.7511268854141235e-6,"evaluations":8.578125,"distances_sum":1799.7375911934464}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6513671875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6513671875,"f1":0.7728672369297377,"seconds":4.669651389122009e-6,"exhaustive_search_seconds":2.7511268854141235e-6,"evaluations":7.5625,"distances_sum":1569.2774609387811}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6396484375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6396484375,"f1":0.7653553044178052,"seconds":4.449859261512756e-6,"exhaustive_search_seconds":2.7511268854141235e-6,"evaluations":7.5234375,"distances_sum":1538.3933367288228}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.77734375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.77734375,"f1":0.8650797119547128,"seconds":5.3551048040390015e-6,"exhaustive_search_seconds":2.7511268854141235e-6,"evaluations":8.5546875,"distances_sum":1899.5221979959406}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9073889652014661,"seconds":5.321577191352844e-6,"exhaustive_search_seconds":2.7511268854141235e-6,"evaluations":8.65625,"distances_sum":2123.802816849219}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9483891108891114,"seconds":5.515292286872864e-6,"exhaustive_search_seconds":2.7511268854141235e-6,"evaluations":8.84375,"distances_sum":2450.2126089728336}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9017862345987354,"seconds":5.288049578666687e-6,"exhaustive_search_seconds":2.7511268854141235e-6,"evaluations":8.71875,"distances_sum":2097.008002501497}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9593463827838833,"seconds":5.280598998069763e-6,"exhaustive_search_seconds":2.7511268854141235e-6,"evaluations":8.9140625,"distances_sum":2488.1818799936577}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9559581043956049,"seconds":5.3960829973220825e-6,"exhaustive_search_seconds":2.7511268854141235e-6,"evaluations":8.84375,"distances_sum":2487.9030195648124}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9593463827838833,"seconds":5.280598998069763e-6,"exhaustive_search_seconds":2.7511268854141235e-6,"evaluations":8.9140625,"distances_sum":2488.1818799936577}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9593463827838833,"seconds":5.280598998069763e-6,"exhaustive_search_seconds":2.7511268854141235e-6,"evaluations":8.9140625,"distances_sum":2488.1818799936577}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.515625,"f1":null,"seconds":4.105269908905029e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.15625,"distances_sum":1119.9482600472297}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.515625,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.515625,"f1":null,"seconds":4.105269908905029e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.15625,"distances_sum":1119.9482600472297}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66015625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.66015625,"f1":0.7795388639138647,"seconds":4.6510249376297e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.0625,"distances_sum":1479.3902915608226}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.865128101065602,"seconds":5.8747828006744385e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.4375,"distances_sum":1867.4773955491044}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7783203125,"state":{"ssize":7,"bsize":5},"perf":{"precision":1.0,"recall":0.7783203125,"f1":0.865128101065602,"seconds":5.8747828006744385e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.4375,"distances_sum":1867.4773955491044}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9159798534798543,"seconds":5.3513795137405396e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.703125,"distances_sum":2076.539219120332}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9533768315018317,"seconds":6.28642737865448e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.7578125,"distances_sum":2383.54400826482}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9234489468864474,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.6953125,"distances_sum":2151.785866530868}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8583984375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8583984375,"f1":0.9175569222444231,"seconds":5.343928933143616e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.6171875,"distances_sum":2147.462216740253}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9116248334998344,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.7578125,"distances_sum":2083.260119784771}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9533768315018317,"seconds":6.28642737865448e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.7578125,"distances_sum":2383.54400826482}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91796875,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9533768315018317,"seconds":6.28642737865448e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.7578125,"distances_sum":2383.54400826482}}, n: 9
mean(cfft.distances) = 0.3343675689847115
mean(cdnet.distances) = 0.34685008978592496
mean(crand.distances) = 0.3564752515601
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8377777777777777
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.84
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8622222222222223
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.888888888888889
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9444444444444445
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8822222222222221
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9222222222222222
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8355555555555556
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9266666666666666
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9111111111111111
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9111111111111111
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.931111111111111
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9377777777777778
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9155555555555556
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8755555555555555
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8822222222222221
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9066666666666667
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8777777777777779
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8822222222222224
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8888888888888888
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9155555555555556
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9111111111111111
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9133333333333334
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 2, 3, 2, 1, 2, 3, 1, 3, 3, 2, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 2, 3, 2, 1, 2, 3, 1, 3, 3, 2, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 2, 3, 2, 1, 2, 3, 1, 3, 3, 2, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 2, 3, 2, 1, 2, 3, 1, 3, 3, 2, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 2, 3, 2, 1, 2, 3, 1, 3, 3, 2, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 2, 3, 2, 1, 2, 3, 1, 3, 3, 2, 1]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 2, 3, 2, 1, 2, 3, 1, 3, 3, 2, 1]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.5333987021446228] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 32, 8]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(2, 32), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 1, 1]]
** centroid: 8, normalized-entropy: 1.0, [(2, 1), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 11: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
finished with 14 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.3130030423625129] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3130030423625129, 0.23770143310001046] ***
*** finished computation of 3 references, err: [Inf, 0.3130030423625129, 0.23770143310001046] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [232, 15, 0]]
** centroid: 1, normalized-entropy: 0.33033099756150147, [(1, 232), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [158, 34, 0]]
** centroid: 2, normalized-entropy: 0.673654715229001, [(1, 158), (2, 34)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [1, 207, 19]]
** centroid: 3, normalized-entropy: 0.4163629316285132, [(2, 207), (3, 19)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28203518221202284] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28203518221202284, 0.24556738493972455] ***
*** finished computation of 3 references, err: [Inf, 0.28203518221202284, 0.24556738493972455] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [82, 59, 0]]
** centroid: 1, normalized-entropy: 0.9807201162921871, [(1, 82), (2, 59)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [63, 214, 24]]
** centroid: 2, normalized-entropy: 0.7022769091780141, [(1, 63), (2, 214), (3, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [225, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31423737418682857] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31423737418682857, 0.28024391497651496] ***
*** finished computation of 3 references, err: [Inf, 0.31423737418682857, 0.28024391497651496] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [101, 117, 9]]
** centroid: 1, normalized-entropy: 0.7554067731051333, [(1, 101), (2, 117), (3, 9)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [213, 47, 0]]
** centroid: 2, normalized-entropy: 0.6817569471170989, [(1, 213), (2, 47)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [93, 75, 12]]
** centroid: 3, normalized-entropy: 0.8069270338702507, [(1, 93), (2, 75), (3, 12)]
finished with 8 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3211109152444087] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3211109152444087, 0.2940898848608047] ***
*** starting iteration: 2; err: [Inf, 0.3211109152444087, 0.2940898848608047] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3211109152444087, 0.2940898848608047, 0.2933215398688216] ***
*** finished computation of 3 references, err: [Inf, 0.3211109152444087, 0.2940898848608047, 0.2933215398688216] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [70, 139, 19]]
** centroid: 1, normalized-entropy: 0.7931054875779825, [(1, 70), (2, 139), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [119, 117, 0]]
** centroid: 2, normalized-entropy: 0.9999481933241142, [(1, 119), (2, 117)]
*** center 3: selecting labels [1] (freq >= 1) [from [202, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5238071034049456] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5238071034049456, 0.3399707636631176] ***
*** starting iteration: 2; err: [Inf, 0.5238071034049456, 0.3399707636631176] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5238071034049456, 0.3399707636631176, 0.3032203497690801] ***
*** starting iteration: 3; err: [Inf, 0.5238071034049456, 0.3399707636631176, 0.3032203497690801] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5238071034049456, 0.3399707636631176, 0.3032203497690801, 0.29635453321223987] ***
*** starting iteration: 4; err: [Inf, 0.5238071034049456, 0.3399707636631176, 0.3032203497690801, 0.29635453321223987] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5238071034049456, 0.3399707636631176, 0.3032203497690801, 0.29635453321223987, 0.29497663519028267] ***
*** starting iteration: 5; err: [Inf, 0.5238071034049456, 0.3399707636631176, 0.3032203497690801, 0.29635453321223987, 0.29497663519028267] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5238071034049456, 0.3399707636631176, 0.3032203497690801, 0.29635453321223987, 0.29497663519028267, 0.29460089771367465] ***
*** finished computation of 3 references, err: [Inf, 0.5238071034049456, 0.3399707636631176, 0.3032203497690801, 0.29635453321223987, 0.29497663519028267, 0.29460089771367465] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [82, 79, 0]]
** centroid: 1, normalized-entropy: 0.9997495272781326, [(1, 82), (2, 79)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [75, 194, 24]]
** centroid: 2, normalized-entropy: 0.7525509709234331, [(1, 75), (2, 194), (3, 24)]
*** center 3: selecting labels [1] (freq >= 1) [from [213, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3271406274725232] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3271406274725232, 0.30002573485356354] ***
*** starting iteration: 2; err: [Inf, 0.3271406274725232, 0.30002573485356354] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3271406274725232, 0.30002573485356354, 0.2978671954238209] ***
*** starting iteration: 3; err: [Inf, 0.3271406274725232, 0.30002573485356354, 0.2978671954238209] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3271406274725232, 0.30002573485356354, 0.2978671954238209, 0.2974491390264195] ***
*** finished computation of 3 references, err: [Inf, 0.3271406274725232, 0.30002573485356354, 0.2978671954238209, 0.2974491390264195] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [253, 6, 0]]
** centroid: 1, normalized-entropy: 0.15886562590281886, [(1, 253), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [146, 56, 0]]
** centroid: 2, normalized-entropy: 0.8516458330898723, [(1, 146), (2, 56)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [8, 177, 21]]
** centroid: 3, normalized-entropy: 0.44536982258557034, [(1, 8), (2, 177), (3, 21)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.33291650022863895] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33291650022863895, 0.24895028192997426] ***
*** finished computation of 3 references, err: [Inf, 0.33291650022863895, 0.24895028192997426] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [137, 138, 10]]
** centroid: 1, normalized-entropy: 0.7471472570983362, [(1, 137), (2, 138), (3, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [193, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [61, 118, 9]]
** centroid: 3, normalized-entropy: 0.7309607183715163, [(1, 61), (2, 118), (3, 9)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2800301794113516] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2800301794113516, 0.23772027658967432] ***
*** finished computation of 3 references, err: [Inf, 0.2800301794113516, 0.23772027658967432] ***
*** center 1: selecting labels [1] (freq >= 2) [from [220, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [85, 135, 8]]
** centroid: 2, normalized-entropy: 0.724270243088952, [(1, 85), (2, 135), (3, 8)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [65, 138, 16]]
** centroid: 3, normalized-entropy: 0.7670494863177444, [(1, 65), (2, 138), (3, 16)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34657761078143584] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34657761078143584, 0.24773992673316594] ***
*** finished computation of 3 references, err: [Inf, 0.34657761078143584, 0.24773992673316594] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [114, 152, 21]]
** centroid: 1, normalized-entropy: 0.814394405677348, [(1, 114), (2, 152), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [140, 87, 0]]
** centroid: 2, normalized-entropy: 0.9603118947308504, [(1, 140), (2, 87)]
*** center 3: selecting labels [1] (freq >= 2) [from [153, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.362435681240594] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.362435681240594, 0.29904732380241333] ***
*** starting iteration: 2; err: [Inf, 0.362435681240594, 0.29904732380241333] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.362435681240594, 0.29904732380241333, 0.29477225067849094] ***
*** starting iteration: 3; err: [Inf, 0.362435681240594, 0.29904732380241333, 0.29477225067849094] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.362435681240594, 0.29904732380241333, 0.29477225067849094, 0.2942086238590245] ***
*** finished computation of 3 references, err: [Inf, 0.362435681240594, 0.29904732380241333, 0.29477225067849094, 0.2942086238590245] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [77, 133, 19]]
** centroid: 1, normalized-entropy: 0.8088351849411987, [(1, 77), (2, 133), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [217, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [97, 123, 0]]
** centroid: 3, normalized-entropy: 0.9899013960297601, [(1, 97), (2, 123)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5514952229151594] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5514952229151594, 0.33280861226358693] ***
*** starting iteration: 2; err: [Inf, 0.5514952229151594, 0.33280861226358693] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5514952229151594, 0.33280861226358693, 0.3287874941129064] ***
*** starting iteration: 3; err: [Inf, 0.5514952229151594, 0.33280861226358693, 0.3287874941129064] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5514952229151594, 0.33280861226358693, 0.3287874941129064, 0.327504754778573] ***
*** finished computation of 3 references, err: [Inf, 0.5514952229151594, 0.33280861226358693, 0.3287874941129064, 0.327504754778573] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [198, 5, 0]]
** centroid: 1, normalized-entropy: 0.16670413762754321, [(1, 198), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [114, 108, 0]]
** centroid: 2, normalized-entropy: 0.9994730201859837, [(1, 114), (2, 108)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [58, 160, 24]]
** centroid: 3, normalized-entropy: 0.7692504401211295, [(1, 58), (2, 160), (3, 24)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3599241423815757] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3599241423815757, 0.3206124141406704] ***
*** starting iteration: 2; err: [Inf, 0.3599241423815757, 0.3206124141406704] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3599241423815757, 0.3206124141406704, 0.29848118039403765] ***
*** starting iteration: 3; err: [Inf, 0.3599241423815757, 0.3206124141406704, 0.29848118039403765] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3599241423815757, 0.3206124141406704, 0.29848118039403765, 0.2980769524599301] ***
*** finished computation of 3 references, err: [Inf, 0.3599241423815757, 0.3206124141406704, 0.29848118039403765, 0.2980769524599301] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [37, 170, 21]]
** centroid: 1, normalized-entropy: 0.66777279602395, [(1, 37), (2, 170), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [140, 69, 0]]
** centroid: 2, normalized-entropy: 0.9150729603584477, [(1, 140), (2, 69)]
*** center 3: selecting labels [1] (freq >= 1) [from [230, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.46156515638615275] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46156515638615275, 0.31215942546014896] ***
*** starting iteration: 2; err: [Inf, 0.46156515638615275, 0.31215942546014896] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46156515638615275, 0.31215942546014896, 0.29647986643860963] ***
*** starting iteration: 3; err: [Inf, 0.46156515638615275, 0.31215942546014896, 0.29647986643860963] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46156515638615275, 0.31215942546014896, 0.29647986643860963, 0.29239619916511905] ***
*** finished computation of 3 references, err: [Inf, 0.46156515638615275, 0.31215942546014896, 0.29647986643860963, 0.29239619916511905] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [113, 66, 0]]
** centroid: 1, normalized-entropy: 0.9496803882666356, [(1, 113), (2, 66)]
*** center 2: selecting labels [1] (freq >= 2) [from [206, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [72, 190, 19]]
** centroid: 3, normalized-entropy: 0.7242355243777878, [(1, 72), (2, 190), (3, 19)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.322295524124084] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.322295524124084, 0.298335923649918] ***
*** starting iteration: 2; err: [Inf, 0.322295524124084, 0.298335923649918] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.322295524124084, 0.298335923649918, 0.2967901548351171] ***
*** starting iteration: 3; err: [Inf, 0.322295524124084, 0.298335923649918, 0.2967901548351171] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.322295524124084, 0.298335923649918, 0.2967901548351171, 0.2958540815072528] ***
*** finished computation of 3 references, err: [Inf, 0.322295524124084, 0.298335923649918, 0.2967901548351171, 0.2958540815072528] ***
*** center 1: selecting labels [1] (freq >= 2) [from [213, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [76, 171, 24]]
** centroid: 2, normalized-entropy: 0.784420339764609, [(1, 76), (2, 171), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [81, 102, 0]]
** centroid: 3, normalized-entropy: 0.9904799742690307, [(1, 81), (2, 102)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3634730173970225] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3634730173970225, 0.30036323260085873] ***
*** starting iteration: 2; err: [Inf, 0.3634730173970225, 0.30036323260085873] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3634730173970225, 0.30036323260085873, 0.2987063974302647] ***
*** starting iteration: 3; err: [Inf, 0.3634730173970225, 0.30036323260085873, 0.2987063974302647] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3634730173970225, 0.30036323260085873, 0.2987063974302647, 0.2980529100311616] ***
*** finished computation of 3 references, err: [Inf, 0.3634730173970225, 0.30036323260085873, 0.2987063974302647, 0.2980529100311616] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 194, 21]]
** centroid: 1, normalized-entropy: 0.4615800251119872, [(2, 194), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [168, 31, 0]]
** centroid: 2, normalized-entropy: 0.6241150092430214, [(1, 168), (2, 31)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [239, 14, 0]]
** centroid: 3, normalized-entropy: 0.30864521099389375, [(1, 239), (2, 14)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37811246558369416] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37811246558369416, 0.29732019719094394] ***
*** finished computation of 3 references, err: [Inf, 0.37811246558369416, 0.29732019719094394] ***
*** center 1: selecting labels [1] (freq >= 2) [from [178, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [84, 119, 19]]
** centroid: 2, normalized-entropy: 0.830473287817658, [(1, 84), (2, 119), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [129, 137, 0]]
** centroid: 3, normalized-entropy: 0.9993474305568592, [(1, 129), (2, 137)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4554451619773388] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4554451619773388, 0.31478205652533287] ***
*** finished computation of 3 references, err: [Inf, 0.4554451619773388, 0.31478205652533287] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [10, 121, 24]]
** centroid: 1, normalized-entropy: 0.5998247137690053, [(1, 10), (2, 121), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [242, 19, 0]]
** centroid: 2, normalized-entropy: 0.37627562807992293, [(1, 242), (2, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [118, 133, 0]]
** centroid: 3, normalized-entropy: 0.9974222641246547, [(1, 118), (2, 133)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4325352054147952] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4325352054147952, 0.349313807545294] ***
*** finished computation of 3 references, err: [Inf, 0.4325352054147952, 0.349313807545294] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [110, 172, 21]]
** centroid: 1, normalized-entropy: 0.7957959560548828, [(1, 110), (2, 172), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [156, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [141, 67, 0]]
** centroid: 3, normalized-entropy: 0.906667042905993, [(1, 141), (2, 67)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4070054377057218] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4070054377057218, 0.26332714803818913] ***
*** starting iteration: 2; err: [Inf, 0.4070054377057218, 0.26332714803818913] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4070054377057218, 0.26332714803818913, 0.2381074059553243] ***
*** starting iteration: 3; err: [Inf, 0.4070054377057218, 0.26332714803818913, 0.2381074059553243] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4070054377057218, 0.26332714803818913, 0.2381074059553243, 0.23475283353768467] ***
*** starting iteration: 4; err: [Inf, 0.4070054377057218, 0.26332714803818913, 0.2381074059553243, 0.23475283353768467] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4070054377057218, 0.26332714803818913, 0.2381074059553243, 0.23475283353768467, 0.23423212233164512] ***
*** finished computation of 3 references, err: [Inf, 0.4070054377057218, 0.26332714803818913, 0.2381074059553243, 0.23475283353768467, 0.23423212233164512] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [244, 20, 0]]
** centroid: 1, normalized-entropy: 0.38705142139219795, [(1, 244), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [147, 59, 0]]
** centroid: 2, normalized-entropy: 0.8640356019245087, [(1, 147), (2, 59)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 177, 19]]
** centroid: 3, normalized-entropy: 0.4592159404411334, [(2, 177), (3, 19)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3165852284921833] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3165852284921833, 0.2418038188012085] ***
*** starting iteration: 2; err: [Inf, 0.3165852284921833, 0.2418038188012085] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3165852284921833, 0.2418038188012085, 0.2373136612146847] ***
*** starting iteration: 3; err: [Inf, 0.3165852284921833, 0.2418038188012085, 0.2373136612146847] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3165852284921833, 0.2418038188012085, 0.2373136612146847, 0.2364795635324502] ***
*** finished computation of 3 references, err: [Inf, 0.3165852284921833, 0.2418038188012085, 0.2373136612146847, 0.2364795635324502] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [97, 142, 10]]
** centroid: 1, normalized-entropy: 0.7433456332095103, [(1, 97), (2, 142), (3, 10)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [78, 131, 14]]
** centroid: 2, normalized-entropy: 0.7770845531831976, [(1, 78), (2, 131), (3, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [195, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3801825437024571] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3801825437024571, 0.24462669475124157] ***
*** starting iteration: 2; err: [Inf, 0.3801825437024571, 0.24462669475124157] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3801825437024571, 0.24462669475124157, 0.23918366676749386] ***
*** starting iteration: 3; err: [Inf, 0.3801825437024571, 0.24462669475124157, 0.23918366676749386] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3801825437024571, 0.24462669475124157, 0.23918366676749386, 0.23774672688209805] ***
*** starting iteration: 4; err: [Inf, 0.3801825437024571, 0.24462669475124157, 0.23918366676749386, 0.23774672688209805] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3801825437024571, 0.24462669475124157, 0.23918366676749386, 0.23774672688209805, 0.23728564835671542] ***
*** finished computation of 3 references, err: [Inf, 0.3801825437024571, 0.24462669475124157, 0.23918366676749386, 0.23774672688209805, 0.23728564835671542] ***
*** center 1: selecting labels [1] (freq >= 1) [from [219, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [98, 108, 2]]
** centroid: 2, normalized-entropy: 0.673159721430645, [(1, 98), (2, 108), (3, 2)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [90, 131, 19]]
** centroid: 3, normalized-entropy: 0.8183630216748013, [(1, 90), (2, 131), (3, 19)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.381604872188075] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.381604872188075, 0.23412905875789197] ***
*** starting iteration: 2; err: [Inf, 0.381604872188075, 0.23412905875789197] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.381604872188075, 0.23412905875789197, 0.23285572602086374] ***
*** starting iteration: 3; err: [Inf, 0.381604872188075, 0.23412905875789197, 0.23285572602086374] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.381604872188075, 0.23412905875789197, 0.23285572602086374, 0.23250233200896117] ***
*** finished computation of 3 references, err: [Inf, 0.381604872188075, 0.23412905875789197, 0.23285572602086374, 0.23250233200896117] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [247, 2, 0]]
** centroid: 1, normalized-entropy: 0.06744487905034859, [(1, 247), (2, 2)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [22, 197, 19]]
** centroid: 2, normalized-entropy: 0.5264931201910472, [(1, 22), (2, 197), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [122, 57, 0]]
** centroid: 3, normalized-entropy: 0.9026722801130698, [(1, 122), (2, 57)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3912901705971499] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3912901705971499, 0.23774834256758842] ***
*** starting iteration: 2; err: [Inf, 0.3912901705971499, 0.23774834256758842] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3912901705971499, 0.23774834256758842, 0.23690071080656333] ***
*** finished computation of 3 references, err: [Inf, 0.3912901705971499, 0.23774834256758842, 0.23690071080656333] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [76, 161, 23]]
** centroid: 1, normalized-entropy: 0.7926749003435387, [(1, 76), (2, 161), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [97, 112, 1]]
** centroid: 2, normalized-entropy: 0.9962811561832605, [(1, 97), (2, 112)]
*** center 3: selecting labels [1] (freq >= 2) [from [197, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4154373906549999] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4154373906549999, 0.23925430151442628] ***
*** starting iteration: 2; err: [Inf, 0.4154373906549999, 0.23925430151442628] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4154373906549999, 0.23925430151442628, 0.23806449653779058] ***
*** starting iteration: 3; err: [Inf, 0.4154373906549999, 0.23925430151442628, 0.23806449653779058] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4154373906549999, 0.23925430151442628, 0.23806449653779058, 0.23768006590986696] ***
*** finished computation of 3 references, err: [Inf, 0.4154373906549999, 0.23925430151442628, 0.23806449653779058, 0.23768006590986696] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [199, 22, 0]]
** centroid: 1, normalized-entropy: 0.46755959514615253, [(1, 199), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [208, 35, 0]]
** centroid: 2, normalized-entropy: 0.5947039975711268, [(1, 208), (2, 35)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 182, 21]]
** centroid: 3, normalized-entropy: 0.47983202361612853, [(2, 182), (3, 21)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2877716015417453] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2877716015417453, 0.23751004314883514] ***
*** starting iteration: 2; err: [Inf, 0.2877716015417453, 0.23751004314883514] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2877716015417453, 0.23751004314883514, 0.23241402588395946] ***
*** starting iteration: 3; err: [Inf, 0.2877716015417453, 0.23751004314883514, 0.23241402588395946] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2877716015417453, 0.23751004314883514, 0.23241402588395946, 0.23120699049492419] ***
*** starting iteration: 4; err: [Inf, 0.2877716015417453, 0.23751004314883514, 0.23241402588395946, 0.23120699049492419] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2877716015417453, 0.23751004314883514, 0.23241402588395946, 0.23120699049492419, 0.23107147027036404] ***
*** finished computation of 3 references, err: [Inf, 0.2877716015417453, 0.23751004314883514, 0.23241402588395946, 0.23120699049492419, 0.23107147027036404] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [74, 176, 19]]
** centroid: 1, normalized-entropy: 0.7462168943364474, [(1, 74), (2, 176), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [100, 80, 0]]
** centroid: 2, normalized-entropy: 0.9910760598382222, [(1, 100), (2, 80)]
*** center 3: selecting labels [1] (freq >= 1) [from [217, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3947732807144054] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3947732807144054, 0.23470495870222394] ***
*** starting iteration: 2; err: [Inf, 0.3947732807144054, 0.23470495870222394] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3947732807144054, 0.23470495870222394, 0.23457980046615654] ***
*** finished computation of 3 references, err: [Inf, 0.3947732807144054, 0.23470495870222394, 0.23457980046615654] ***
*** center 1: selecting labels [1] (freq >= 1) [from [246, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [16, 207, 24]]
** centroid: 2, normalized-entropy: 0.5023319805929561, [(1, 16), (2, 207), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [108, 66, 0]]
** centroid: 3, normalized-entropy: 0.9575534837147484, [(1, 108), (2, 66)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3059563324165375] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3059563324165375, 0.2513051563762184] ***
*** starting iteration: 2; err: [Inf, 0.3059563324165375, 0.2513051563762184] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3059563324165375, 0.2513051563762184, 0.2381593593838869] ***
*** starting iteration: 3; err: [Inf, 0.3059563324165375, 0.2513051563762184, 0.2381593593838869] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3059563324165375, 0.2513051563762184, 0.2381593593838869, 0.2360060604748552] ***
*** starting iteration: 4; err: [Inf, 0.3059563324165375, 0.2513051563762184, 0.2381593593838869, 0.2360060604748552] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3059563324165375, 0.2513051563762184, 0.2381593593838869, 0.2360060604748552, 0.23568103855512088] ***
*** finished computation of 3 references, err: [Inf, 0.3059563324165375, 0.2513051563762184, 0.2381593593838869, 0.2360060604748552, 0.23568103855512088] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [259, 11, 0]]
** centroid: 1, normalized-entropy: 0.24567821069591328, [(1, 259), (2, 11)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [2, 184, 21]]
** centroid: 2, normalized-entropy: 0.34740069508999494, [(1, 2), (2, 184), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [146, 44, 0]]
** centroid: 3, normalized-entropy: 0.7807536250860868, [(1, 146), (2, 44)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3567463108345408] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3567463108345408, 0.29709658852579807] ***
*** starting iteration: 2; err: [Inf, 0.3567463108345408, 0.29709658852579807] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3567463108345408, 0.29709658852579807, 0.29211014487596043] ***
*** starting iteration: 3; err: [Inf, 0.3567463108345408, 0.29709658852579807, 0.29211014487596043] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3567463108345408, 0.29709658852579807, 0.29211014487596043, 0.29130996218616806] ***
*** finished computation of 3 references, err: [Inf, 0.3567463108345408, 0.29709658852579807, 0.29211014487596043, 0.29130996218616806] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [73, 188, 19]]
** centroid: 1, normalized-entropy: 0.7286533929450628, [(1, 73), (2, 188), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [104, 68, 0]]
** centroid: 2, normalized-entropy: 0.9681647320759545, [(1, 104), (2, 68)]
*** center 3: selecting labels [1] (freq >= 1) [from [214, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.491948825290435] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.491948825290435, 0.2975304557437795] ***
*** starting iteration: 2; err: [Inf, 0.491948825290435, 0.2975304557437795] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.491948825290435, 0.2975304557437795, 0.29627813136615583] ***
*** starting iteration: 3; err: [Inf, 0.491948825290435, 0.2975304557437795, 0.29627813136615583] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.491948825290435, 0.2975304557437795, 0.29627813136615583, 0.29640688693689843] ***
*** finished computation of 3 references, err: [Inf, 0.491948825290435, 0.2975304557437795, 0.29627813136615583, 0.29640688693689843] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [256, 5, 0]]
** centroid: 1, normalized-entropy: 0.13668132042261702, [(1, 256), (2, 5)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [6, 203, 24]]
** centroid: 2, normalized-entropy: 0.408190714970027, [(1, 6), (2, 203), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [108, 65, 0]]
** centroid: 3, normalized-entropy: 0.9549648861309205, [(1, 108), (2, 65)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3703954297661044] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3703954297661044, 0.30755307437604884] ***
*** starting iteration: 2; err: [Inf, 0.3703954297661044, 0.30755307437604884] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3703954297661044, 0.30755307437604884, 0.3006424957040189] ***
*** starting iteration: 3; err: [Inf, 0.3703954297661044, 0.30755307437604884, 0.3006424957040189] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3703954297661044, 0.30755307437604884, 0.3006424957040189, 0.2996729056653183] ***
*** finished computation of 3 references, err: [Inf, 0.3703954297661044, 0.30755307437604884, 0.3006424957040189, 0.2996729056653183] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [90, 149, 21]]
** centroid: 1, normalized-entropy: 0.8096626337039012, [(1, 90), (2, 149), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [218, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [99, 90, 0]]
** centroid: 3, normalized-entropy: 0.998363672593813, [(1, 99), (2, 90)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 12)
[0.9020127912343482, 0.898008787230344, 0.8949997902093711, 0.8949907991824159, 0.8809977642312972, 0.8710027392662124, 0.8659437880994766, 0.8650356943770118, 0.8650147153141164, 0.8569737402072731, 0.8430196663729598, 0.7760185335035633]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 1, 1.0, :dnet, 0.3, 2) => 0.9020127912343482
finished with 13
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.2469338617055445] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2469338617055445, 0.2368057601967709] ***
*** starting iteration: 2; err: [Inf, 0.2469338617055445, 0.2368057601967709] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2469338617055445, 0.2368057601967709, 0.23467722302722233] ***
*** starting iteration: 3; err: [Inf, 0.2469338617055445, 0.2368057601967709, 0.23467722302722233] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2469338617055445, 0.2368057601967709, 0.23467722302722233, 0.23395681578956834] ***
*** finished computation of 3 references, err: [Inf, 0.2469338617055445, 0.2368057601967709, 0.23467722302722233, 0.23395681578956834] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [139, 52, 0]]
** centroid: 1, normalized-entropy: 0.8446766057744695, [(1, 139), (2, 52)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [246, 7, 0]]
** centroid: 2, normalized-entropy: 0.18255858351701287, [(1, 246), (2, 7)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [6, 197, 19]]
** centroid: 3, normalized-entropy: 0.37684046174318764, [(1, 6), (2, 197), (3, 19)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3303611114980008] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3303611114980008, 0.283426473356331] ***
*** starting iteration: 2; err: [Inf, 0.3303611114980008, 0.283426473356331] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3303611114980008, 0.283426473356331, 0.2496523706666913] ***
*** starting iteration: 3; err: [Inf, 0.3303611114980008, 0.283426473356331, 0.2496523706666913] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3303611114980008, 0.283426473356331, 0.2496523706666913, 0.237717864493179] ***
*** finished computation of 3 references, err: [Inf, 0.3303611114980008, 0.283426473356331, 0.2496523706666913, 0.237717864493179] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [88, 118, 4]]
** centroid: 1, normalized-entropy: 0.6952536321531271, [(1, 88), (2, 118), (3, 4)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [56, 154, 20]]
** centroid: 2, normalized-entropy: 0.7508808754360814, [(1, 56), (2, 154), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [226, 1, 0]]
** centroid: 3, normalized-entropy: 0.040819652463459234, [(1, 226), (2, 1)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27316002830209535] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27316002830209535, 0.23572600508217645] ***
*** starting iteration: 2; err: [Inf, 0.27316002830209535, 0.23572600508217645] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27316002830209535, 0.23572600508217645, 0.23518040746372232] ***
*** finished computation of 3 references, err: [Inf, 0.27316002830209535, 0.23572600508217645, 0.23518040746372232] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [23, 186, 21]]
** centroid: 1, normalized-entropy: 0.5648153982240386, [(1, 23), (2, 186), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [141, 53, 0]]
** centroid: 2, normalized-entropy: 0.8460132299186768, [(1, 141), (2, 53)]
*** center 3: selecting labels [1] (freq >= 1) [from [243, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.9020127912343482, 0.898008787230344, 0.8949997902093711, 0.8949907991824159, 0.8809977642312972, 0.8710027392662124, 0.8659437880994766, 0.8650356943770118, 0.8650147153141164, 0.8569737402072731, 0.8430196663729598, 0.8049546552540564, 0.7760185335035633]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 1, 1.0, :dnet, 0.3, 2) => 0.9020127912343482
finished with 13
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9020127912343482, 0.898008787230344, 0.8949997902093711, 0.8949907991824159, 0.8809977642312972, 0.8710027392662124, 0.8659437880994766, 0.8650356943770118, 0.8650147153141164, 0.8569737402072731, 0.8430196663729598, 0.8049546552540564, 0.7760185335035633]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 1, 1.0, :dnet, 0.3, 2) => 0.9020127912343482
finished with 13
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9020127912343482, 0.898008787230344, 0.8949997902093711, 0.8949907991824159, 0.8809977642312972, 0.8710027392662124, 0.8659437880994766, 0.8650356943770118, 0.8650147153141164, 0.8569737402072731, 0.8430196663729598, 0.8049546552540564, 0.7760185335035633]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 1, 1.0, :dnet, 0.3, 2) => 0.9020127912343482
finished with 14
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.3077066773660593] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3077066773660593, 0.24148791080883317] ***
*** starting iteration: 2; err: [Inf, 0.3077066773660593, 0.24148791080883317] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3077066773660593, 0.24148791080883317, 0.23568543638158646] ***
*** starting iteration: 3; err: [Inf, 0.3077066773660593, 0.24148791080883317, 0.23568543638158646] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3077066773660593, 0.24148791080883317, 0.23568543638158646, 0.2342963459825999] ***
*** finished computation of 3 references, err: [Inf, 0.3077066773660593, 0.24148791080883317, 0.23568543638158646, 0.2342963459825999] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [243, 5, 0]]
** centroid: 1, normalized-entropy: 0.14234518598912696, [(1, 243), (2, 5)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [22, 157, 19]]
** centroid: 2, normalized-entropy: 0.5944092286842446, [(1, 22), (2, 157), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [126, 94, 0]]
** centroid: 3, normalized-entropy: 0.9846841570760806, [(1, 126), (2, 94)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.25963109880518254] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25963109880518254, 0.23733020548581674] ***
*** starting iteration: 2; err: [Inf, 0.25963109880518254, 0.23733020548581674] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25963109880518254, 0.23733020548581674, 0.23482985462716918] ***
*** starting iteration: 3; err: [Inf, 0.25963109880518254, 0.23733020548581674, 0.23482985462716918] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25963109880518254, 0.23733020548581674, 0.23482985462716918, 0.23432180592636653] ***
*** finished computation of 3 references, err: [Inf, 0.25963109880518254, 0.23733020548581674, 0.23482985462716918, 0.23432180592636653] ***
*** center 1: selecting labels [1] (freq >= 1) [from [231, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [86, 94, 0]]
** centroid: 2, normalized-entropy: 0.9985746465403509, [(1, 86), (2, 94)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [53, 179, 24]]
** centroid: 3, normalized-entropy: 0.7265010499716502, [(1, 53), (2, 179), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4012199133261759] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4012199133261759, 0.2617129493145917] ***
*** starting iteration: 2; err: [Inf, 0.4012199133261759, 0.2617129493145917] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4012199133261759, 0.2617129493145917, 0.2364645171023883] ***
*** starting iteration: 3; err: [Inf, 0.4012199133261759, 0.2617129493145917, 0.2364645171023883] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4012199133261759, 0.2617129493145917, 0.2364645171023883, 0.23505429149293963] ***
*** finished computation of 3 references, err: [Inf, 0.4012199133261759, 0.2617129493145917, 0.2364645171023883, 0.23505429149293963] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [29, 193, 21]]
** centroid: 1, normalized-entropy: 0.5900754044608779, [(1, 29), (2, 193), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [238, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [140, 46, 0]]
** centroid: 3, normalized-entropy: 0.8069896049203007, [(1, 140), (2, 46)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9149898401395408, 0.9020127912343482, 0.898008787230344, 0.8949997902093711, 0.8949907991824159, 0.8809977642312972, 0.8710027392662124, 0.8659437880994766, 0.8650356943770118, 0.8650147153141164, 0.8569737402072731, 0.8430196663729598, 0.8049546552540564, 0.7760185335035633]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :dnet, 0.6, 1) => 0.9149898401395408
finished with 14
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9149898401395408, 0.9020127912343482, 0.898008787230344, 0.8949997902093711, 0.8949907991824159, 0.8809977642312972, 0.8710027392662124, 0.8659437880994766, 0.8650356943770118, 0.8650147153141164, 0.8569737402072731, 0.8430196663729598, 0.8049546552540564, 0.7760185335035633]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :dnet, 0.6, 1) => 0.9149898401395408
finished with 15
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.37535940360854025] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37535940360854025, 0.29474170488940254] ***
*** starting iteration: 2; err: [Inf, 0.37535940360854025, 0.29474170488940254] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37535940360854025, 0.29474170488940254, 0.29200653167016377] ***
*** starting iteration: 3; err: [Inf, 0.37535940360854025, 0.29474170488940254, 0.29200653167016377] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37535940360854025, 0.29474170488940254, 0.29200653167016377, 0.29123568348866236] ***
*** finished computation of 3 references, err: [Inf, 0.37535940360854025, 0.29474170488940254, 0.29200653167016377, 0.29123568348866236] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [72, 188, 19]]
** centroid: 1, normalized-entropy: 0.7268625525567481, [(1, 72), (2, 188), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [105, 68, 0]]
** centroid: 2, normalized-entropy: 0.9667481550357654, [(1, 105), (2, 68)]
*** center 3: selecting labels [1] (freq >= 1) [from [214, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36469250345516063] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36469250345516063, 0.3003552032716997] ***
*** starting iteration: 2; err: [Inf, 0.36469250345516063, 0.3003552032716997] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36469250345516063, 0.3003552032716997, 0.29576210405487663] ***
*** starting iteration: 3; err: [Inf, 0.36469250345516063, 0.3003552032716997, 0.29576210405487663] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36469250345516063, 0.3003552032716997, 0.29576210405487663, 0.29472595978405386] ***
*** starting iteration: 4; err: [Inf, 0.36469250345516063, 0.3003552032716997, 0.29576210405487663, 0.29472595978405386] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36469250345516063, 0.3003552032716997, 0.29576210405487663, 0.29472595978405386, 0.2945341188865511] ***
*** finished computation of 3 references, err: [Inf, 0.36469250345516063, 0.3003552032716997, 0.29576210405487663, 0.29472595978405386, 0.2945341188865511] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [73, 194, 24]]
** centroid: 1, normalized-entropy: 0.7491355065649035, [(1, 73), (2, 194), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [83, 79, 0]]
** centroid: 2, normalized-entropy: 0.9995601762933539, [(1, 83), (2, 79)]
*** center 3: selecting labels [1] (freq >= 1) [from [214, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36679022740488915] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36679022740488915, 0.30232076295351296] ***
*** starting iteration: 2; err: [Inf, 0.36679022740488915, 0.30232076295351296] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36679022740488915, 0.30232076295351296, 0.29793138607688574] ***
*** starting iteration: 3; err: [Inf, 0.36679022740488915, 0.30232076295351296, 0.29793138607688574] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36679022740488915, 0.30232076295351296, 0.29793138607688574, 0.29764522337724736] ***
*** finished computation of 3 references, err: [Inf, 0.36679022740488915, 0.30232076295351296, 0.29793138607688574, 0.29764522337724736] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [253, 17, 0]]
** centroid: 1, normalized-entropy: 0.3390961796474375, [(1, 253), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [154, 38, 0]]
** centroid: 2, normalized-entropy: 0.7177418091697444, [(1, 154), (2, 38)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 184, 21]]
** centroid: 3, normalized-entropy: 0.4766797785647419, [(2, 184), (3, 21)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9149898401395408, 0.9020127912343482, 0.898008787230344, 0.8949997902093711, 0.8949907991824159, 0.8809977642312972, 0.8710027392662124, 0.8659437880994766, 0.8650356943770118, 0.8650147153141164, 0.8569737402072731, 0.8430196663729598, 0.8400166633699567, 0.8049546552540564, 0.7760185335035633]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :dnet, 0.6, 1) => 0.9149898401395408
finished with 15
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9149898401395408, 0.9020127912343482, 0.898008787230344, 0.8949997902093711, 0.8949907991824159, 0.8809977642312972, 0.8710027392662124, 0.8659437880994766, 0.8650356943770118, 0.8650147153141164, 0.8569737402072731, 0.8430196663729598, 0.8400166633699567, 0.8049546552540564, 0.7760185335035633]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :dnet, 0.6, 1) => 0.9149898401395408
finished with 16
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.2628217043960607] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2628217043960607, 0.24024473418210363] ***
*** starting iteration: 2; err: [Inf, 0.2628217043960607, 0.24024473418210363] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2628217043960607, 0.24024473418210363, 0.23537916835403075] ***
*** starting iteration: 3; err: [Inf, 0.2628217043960607, 0.24024473418210363, 0.23537916835403075] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2628217043960607, 0.24024473418210363, 0.23537916835403075, 0.2340763764303491] ***
*** starting iteration: 4; err: [Inf, 0.2628217043960607, 0.24024473418210363, 0.23537916835403075, 0.2340763764303491] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2628217043960607, 0.24024473418210363, 0.23537916835403075, 0.2340763764303491, 0.23341179542682572] ***
*** finished computation of 3 references, err: [Inf, 0.2628217043960607, 0.24024473418210363, 0.23537916835403075, 0.2340763764303491, 0.23341179542682572] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [55, 141, 19]]
** centroid: 1, normalized-entropy: 0.7644500865219437, [(1, 55), (2, 141), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [219, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [117, 115, 0]]
** centroid: 3, normalized-entropy: 0.9999463914643761, [(1, 117), (2, 115)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2597559670327061] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2597559670327061, 0.2419650440021925] ***
*** starting iteration: 2; err: [Inf, 0.2597559670327061, 0.2419650440021925] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2597559670327061, 0.2419650440021925, 0.23831006070540317] ***
*** starting iteration: 3; err: [Inf, 0.2597559670327061, 0.2419650440021925, 0.23831006070540317] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2597559670327061, 0.2419650440021925, 0.23831006070540317, 0.237429557132187] ***
*** finished computation of 3 references, err: [Inf, 0.2597559670327061, 0.2419650440021925, 0.23831006070540317, 0.237429557132187] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [228, 2, 0]]
** centroid: 1, normalized-entropy: 0.07201647168541395, [(1, 228), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [100, 99, 0]]
** centroid: 2, normalized-entropy: 0.9999817845368456, [(1, 100), (2, 99)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [42, 172, 24]]
** centroid: 3, normalized-entropy: 0.7028574900378484, [(1, 42), (2, 172), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32943124605016016] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32943124605016016, 0.23999138859643795] ***
*** starting iteration: 2; err: [Inf, 0.32943124605016016, 0.23999138859643795] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32943124605016016, 0.23999138859643795, 0.23647493637701694] ***
*** starting iteration: 3; err: [Inf, 0.32943124605016016, 0.23999138859643795, 0.23647493637701694] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32943124605016016, 0.23999138859643795, 0.23647493637701694, 0.23552614902362584] ***
*** finished computation of 3 references, err: [Inf, 0.32943124605016016, 0.23999138859643795, 0.23647493637701694, 0.23552614902362584] ***
*** center 1: selecting labels [1] (freq >= 1) [from [217, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [111, 82, 0]]
** centroid: 2, normalized-entropy: 0.9836517235709581, [(1, 111), (2, 82)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [79, 157, 21]]
** centroid: 3, normalized-entropy: 0.790387322279214, [(1, 79), (2, 157), (3, 21)]
finished with 6 centroids; started with 3
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.30147429182659835] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30147429182659835, 0.2471361992866732] ***
*** starting iteration: 2; err: [Inf, 0.30147429182659835, 0.2471361992866732] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30147429182659835, 0.2471361992866732, 0.23754880445357412] ***
*** starting iteration: 3; err: [Inf, 0.30147429182659835, 0.2471361992866732, 0.23754880445357412] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30147429182659835, 0.2471361992866732, 0.23754880445357412, 0.2361858389303088] ***
*** finished computation of 3 references, err: [Inf, 0.30147429182659835, 0.2471361992866732, 0.23754880445357412, 0.2361858389303088] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [109, 222, 30]]
** centroid: 1, normalized-entropy: 0.7894565921348787, [(1, 109), (2, 222), (3, 30)]
*** center 2: selecting labels [1] (freq >= 1) [from [334, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [141, 162, 2]]
** centroid: 3, normalized-entropy: 0.6605741757534817, [(1, 141), (2, 162), (3, 2)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2913891986515373] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2913891986515373, 0.2479559822678566] ***
*** starting iteration: 2; err: [Inf, 0.2913891986515373, 0.2479559822678566] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2913891986515373, 0.2479559822678566, 0.23398675315640866] ***
*** starting iteration: 3; err: [Inf, 0.2913891986515373, 0.2479559822678566, 0.23398675315640866] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2913891986515373, 0.2479559822678566, 0.23398675315640866, 0.23223016580380498] ***
*** finished computation of 3 references, err: [Inf, 0.2913891986515373, 0.2479559822678566, 0.23398675315640866, 0.23223016580380498] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [56, 110, 7]]
** centroid: 1, normalized-entropy: 0.7125412641139512, [(1, 56), (2, 110), (3, 7)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [86, 87, 1]]
** centroid: 2, normalized-entropy: 0.6594931590868705, [(1, 86), (2, 87), (3, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [153, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3187878552246839] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3187878552246839, 0.24587080101575703] ***
*** starting iteration: 2; err: [Inf, 0.3187878552246839, 0.24587080101575703] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3187878552246839, 0.24587080101575703, 0.23308447725418954] ***
*** starting iteration: 3; err: [Inf, 0.3187878552246839, 0.24587080101575703, 0.23308447725418954] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3187878552246839, 0.24587080101575703, 0.23308447725418954, 0.22880652513355015] ***
*** finished computation of 3 references, err: [Inf, 0.3187878552246839, 0.24587080101575703, 0.23308447725418954, 0.22880652513355015] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [57, 115, 21]]
** centroid: 1, normalized-entropy: 0.8283795653232202, [(1, 57), (2, 115), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [159, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [81, 67, 0]]
** centroid: 3, normalized-entropy: 0.9935356224240487, [(1, 81), (2, 67)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2634021294228733] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2634021294228733, 0.2341096082404256] ***
*** starting iteration: 2; err: [Inf, 0.2634021294228733, 0.2341096082404256] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2634021294228733, 0.2341096082404256, 0.23359005019254983] ***
*** finished computation of 3 references, err: [Inf, 0.2634021294228733, 0.2341096082404256, 0.23359005019254983] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 150, 15]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(2, 150), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [196, 9, 0]]
** centroid: 2, normalized-entropy: 0.2599071509222186, [(1, 196), (2, 9)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [90, 40, 0]]
** centroid: 3, normalized-entropy: 0.8904916402194913, [(1, 90), (2, 40)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.279546675122343] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.279546675122343, 0.2438662372129038] ***
*** starting iteration: 2; err: [Inf, 0.279546675122343, 0.2438662372129038] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.279546675122343, 0.2438662372129038, 0.24228666719421743] ***
*** starting iteration: 3; err: [Inf, 0.279546675122343, 0.2438662372129038, 0.24228666719421743] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.279546675122343, 0.2438662372129038, 0.24228666719421743, 0.2416991714499891] ***
*** finished computation of 3 references, err: [Inf, 0.279546675122343, 0.2438662372129038, 0.24228666719421743, 0.2416991714499891] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [20, 122, 15]]
** centroid: 1, normalized-entropy: 0.6215404802613839, [(1, 20), (2, 122), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [181, 6, 0]]
** centroid: 2, normalized-entropy: 0.20474536594973758, [(1, 181), (2, 6)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [91, 65, 0]]
** centroid: 3, normalized-entropy: 0.9798687566511527, [(1, 91), (2, 65)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34674163883924486] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34674163883924486, 0.283400054063648] ***
*** starting iteration: 2; err: [Inf, 0.34674163883924486, 0.283400054063648] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34674163883924486, 0.283400054063648, 0.26142019345611334] ***
*** starting iteration: 3; err: [Inf, 0.34674163883924486, 0.283400054063648, 0.26142019345611334] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34674163883924486, 0.283400054063648, 0.26142019345611334, 0.2436281196232885] ***
*** finished computation of 3 references, err: [Inf, 0.34674163883924486, 0.283400054063648, 0.26142019345611334, 0.2436281196232885] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [84, 45, 0]]
** centroid: 1, normalized-entropy: 0.9330252953592912, [(1, 84), (2, 45)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [211, 8, 0]]
** centroid: 2, normalized-entropy: 0.22614811523032374, [(1, 211), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 136, 16]]
** centroid: 3, normalized-entropy: 0.48546076074591343, [(2, 136), (3, 16)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3687533278530464] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3687533278530464, 0.23937194340676068] ***
*** starting iteration: 2; err: [Inf, 0.3687533278530464, 0.23937194340676068] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3687533278530464, 0.23937194340676068, 0.23536441797763108] ***
*** starting iteration: 3; err: [Inf, 0.3687533278530464, 0.23937194340676068, 0.23536441797763108] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3687533278530464, 0.23937194340676068, 0.23536441797763108, 0.23431640467979015] ***
*** finished computation of 3 references, err: [Inf, 0.3687533278530464, 0.23937194340676068, 0.23536441797763108, 0.23431640467979015] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [78, 78, 0]]
** centroid: 1, normalized-entropy: 1.0, [(1, 78), (2, 78)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [33, 113, 17]]
** centroid: 2, normalized-entropy: 0.7401254710634823, [(1, 33), (2, 113), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [179, 2, 0]]
** centroid: 3, normalized-entropy: 0.08767448304838837, [(1, 179), (2, 2)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.38077953697368505] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38077953697368505, 0.270154241213575] ***
*** starting iteration: 2; err: [Inf, 0.38077953697368505, 0.270154241213575] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38077953697368505, 0.270154241213575, 0.24640645778551698] ***
*** starting iteration: 3; err: [Inf, 0.38077953697368505, 0.270154241213575, 0.24640645778551698] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38077953697368505, 0.270154241213575, 0.24640645778551698, 0.2422805067077279] ***
*** finished computation of 3 references, err: [Inf, 0.38077953697368505, 0.270154241213575, 0.24640645778551698, 0.2422805067077279] ***
*** center 1: selecting labels [1] (freq >= 1) [from [175, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [84, 52, 0]]
** centroid: 2, normalized-entropy: 0.9596868937742168, [(1, 84), (2, 52)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [31, 141, 17]]
** centroid: 3, normalized-entropy: 0.6660485840964808, [(1, 31), (2, 141), (3, 17)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3813586181728169] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3813586181728169, 0.28475113916769623] ***
*** starting iteration: 2; err: [Inf, 0.3813586181728169, 0.28475113916769623] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3813586181728169, 0.28475113916769623, 0.2769266388043761] ***
*** starting iteration: 3; err: [Inf, 0.3813586181728169, 0.28475113916769623, 0.2769266388043761] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3813586181728169, 0.28475113916769623, 0.2769266388043761, 0.2670012437477708] ***
*** finished computation of 3 references, err: [Inf, 0.3813586181728169, 0.28475113916769623, 0.2769266388043761, 0.2670012437477708] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [40, 171, 14]]
** centroid: 1, normalized-entropy: 0.6266335293172656, [(1, 40), (2, 171), (3, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [145, 16, 0]]
** centroid: 2, normalized-entropy: 0.467023598287502, [(1, 145), (2, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2812786435522139] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2812786435522139, 0.24116613165079617] ***
*** starting iteration: 2; err: [Inf, 0.2812786435522139, 0.24116613165079617] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2812786435522139, 0.24116613165079617, 0.24091124461963773] ***
*** finished computation of 3 references, err: [Inf, 0.2812786435522139, 0.24116613165079617, 0.24091124461963773] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 146, 14]]
** centroid: 1, normalized-entropy: 0.4280696292293062, [(2, 146), (3, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [144, 40, 0]]
** centroid: 2, normalized-entropy: 0.7553754125614286, [(1, 144), (2, 40)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [137, 19, 0]]
** centroid: 3, normalized-entropy: 0.5344982565480157, [(1, 137), (2, 19)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.42316473253816367] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42316473253816367, 0.24912751545291395] ***
*** starting iteration: 2; err: [Inf, 0.42316473253816367, 0.24912751545291395] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42316473253816367, 0.24912751545291395, 0.23372666789870708] ***
*** starting iteration: 3; err: [Inf, 0.42316473253816367, 0.24912751545291395, 0.23372666789870708] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42316473253816367, 0.24912751545291395, 0.23372666789870708, 0.23183684293925763] ***
*** finished computation of 3 references, err: [Inf, 0.42316473253816367, 0.24912751545291395, 0.23372666789870708, 0.23183684293925763] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [18, 158, 14]]
** centroid: 1, normalized-entropy: 0.5177395891076262, [(1, 18), (2, 158), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [169, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [105, 36, 0]]
** centroid: 3, normalized-entropy: 0.8196004346196011, [(1, 105), (2, 36)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37074234925955535] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37074234925955535, 0.2541317504234612] ***
*** starting iteration: 2; err: [Inf, 0.37074234925955535, 0.2541317504234612] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37074234925955535, 0.2541317504234612, 0.23726407018117607] ***
*** starting iteration: 3; err: [Inf, 0.37074234925955535, 0.2541317504234612, 0.23726407018117607] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37074234925955535, 0.2541317504234612, 0.23726407018117607, 0.23252289493521675] ***
*** finished computation of 3 references, err: [Inf, 0.37074234925955535, 0.2541317504234612, 0.23726407018117607, 0.23252289493521675] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [44, 154, 15]]
** centroid: 1, normalized-entropy: 0.6800702111736159, [(1, 44), (2, 154), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [163, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [72, 52, 0]]
** centroid: 3, normalized-entropy: 0.9811522341999134, [(1, 72), (2, 52)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.35365521869808436] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35365521869808436, 0.23989869623817503] ***
*** starting iteration: 2; err: [Inf, 0.35365521869808436, 0.23989869623817503] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35365521869808436, 0.23989869623817503, 0.23934133205004035] ***
*** finished computation of 3 references, err: [Inf, 0.35365521869808436, 0.23989869623817503, 0.23934133205004035] ***
*** center 1: selecting labels [1] (freq >= 1) [from [153, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [66, 97, 12]]
** centroid: 2, normalized-entropy: 0.7997335201171406, [(1, 66), (2, 97), (3, 12)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [77, 88, 7]]
** centroid: 3, normalized-entropy: 0.7581923465899723, [(1, 77), (2, 88), (3, 7)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3027743459269404] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3027743459269404, 0.24599348036944865] ***
*** starting iteration: 2; err: [Inf, 0.3027743459269404, 0.24599348036944865] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3027743459269404, 0.24599348036944865, 0.23758814748004078] ***
*** starting iteration: 3; err: [Inf, 0.3027743459269404, 0.24599348036944865, 0.23758814748004078] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3027743459269404, 0.24599348036944865, 0.23758814748004078, 0.23585287492815404] ***
*** finished computation of 3 references, err: [Inf, 0.3027743459269404, 0.24599348036944865, 0.23758814748004078, 0.23585287492815404] ***
*** center 1: selecting labels [1] (freq >= 1) [from [173, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [51, 111, 15]]
** centroid: 2, normalized-entropy: 0.7830977830178091, [(1, 51), (2, 111), (3, 15)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [67, 82, 1]]
** centroid: 3, normalized-entropy: 0.6585878776891642, [(1, 67), (2, 82), (3, 1)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3007710401751101] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3007710401751101, 0.23769113973341882] ***
*** starting iteration: 2; err: [Inf, 0.3007710401751101, 0.23769113973341882] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3007710401751101, 0.23769113973341882, 0.23392235210165382] ***
*** starting iteration: 3; err: [Inf, 0.3007710401751101, 0.23769113973341882, 0.23392235210165382] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3007710401751101, 0.23769113973341882, 0.23392235210165382, 0.23321399538218976] ***
*** finished computation of 3 references, err: [Inf, 0.3007710401751101, 0.23769113973341882, 0.23392235210165382, 0.23321399538218976] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [169, 3, 0]]
** centroid: 1, normalized-entropy: 0.1268257300866759, [(1, 169), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [103, 65, 0]]
** centroid: 2, normalized-entropy: 0.9627730052387541, [(1, 103), (2, 65)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [5, 144, 11]]
** centroid: 3, normalized-entropy: 0.35243699241374793, [(1, 5), (2, 144), (3, 11)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.46418164413049817] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46418164413049817, 0.3238997063534334] ***
*** starting iteration: 2; err: [Inf, 0.46418164413049817, 0.3238997063534334] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46418164413049817, 0.3238997063534334, 0.2867482257336378] ***
*** starting iteration: 3; err: [Inf, 0.46418164413049817, 0.3238997063534334, 0.2867482257336378] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46418164413049817, 0.3238997063534334, 0.2867482257336378, 0.2544242982212454] ***
*** finished computation of 3 references, err: [Inf, 0.46418164413049817, 0.3238997063534334, 0.2867482257336378, 0.2544242982212454] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [109, 99, 3]]
** centroid: 1, normalized-entropy: 0.688815747981758, [(1, 109), (2, 99), (3, 3)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [33, 97, 20]]
** centroid: 2, normalized-entropy: 0.8043415957102923, [(1, 33), (2, 97), (3, 20)]
*** center 3: selecting labels [1] (freq >= 1) [from [139, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3004481168091297] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3004481168091297, 0.24165997238620185] ***
*** starting iteration: 2; err: [Inf, 0.3004481168091297, 0.24165997238620185] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3004481168091297, 0.24165997238620185, 0.24160897763445974] ***
*** finished computation of 3 references, err: [Inf, 0.3004481168091297, 0.24165997238620185, 0.24160897763445974] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 141, 17]]
** centroid: 1, normalized-entropy: 0.49261866596516846, [(2, 141), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [127, 23, 0]]
** centroid: 2, normalized-entropy: 0.6181194891000383, [(1, 127), (2, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [146, 46, 0]]
** centroid: 3, normalized-entropy: 0.7943466904341503, [(1, 146), (2, 46)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2761901770606637] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2761901770606637, 0.24281194321997462] ***
*** starting iteration: 2; err: [Inf, 0.2761901770606637, 0.24281194321997462] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2761901770606637, 0.24281194321997462, 0.24107437834888695] ***
*** starting iteration: 3; err: [Inf, 0.2761901770606637, 0.24281194321997462, 0.24107437834888695] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2761901770606637, 0.24281194321997462, 0.24107437834888695, 0.24084935769904406] ***
*** finished computation of 3 references, err: [Inf, 0.2761901770606637, 0.24281194321997462, 0.24107437834888695, 0.24084935769904406] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [29, 151, 10]]
** centroid: 1, normalized-entropy: 0.5684103270228013, [(1, 29), (2, 151), (3, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [99, 39, 0]]
** centroid: 2, normalized-entropy: 0.8589810370425965, [(1, 99), (2, 39)]
*** center 3: selecting labels [1] (freq >= 1) [from [172, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.43393871308863163] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43393871308863163, 0.2602957612834871] ***
*** starting iteration: 2; err: [Inf, 0.43393871308863163, 0.2602957612834871] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43393871308863163, 0.2602957612834871, 0.24722242208756506] ***
*** starting iteration: 3; err: [Inf, 0.43393871308863163, 0.2602957612834871, 0.24722242208756506] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43393871308863163, 0.2602957612834871, 0.24722242208756506, 0.24452739696204662] ***
*** finished computation of 3 references, err: [Inf, 0.43393871308863163, 0.2602957612834871, 0.24722242208756506, 0.24452739696204662] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [195, 22, 0]]
** centroid: 1, normalized-entropy: 0.4733627218859788, [(1, 195), (2, 22)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [2, 113, 18]]
** centroid: 2, normalized-entropy: 0.4298561941572525, [(1, 2), (2, 113), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [102, 48, 0]]
** centroid: 3, normalized-entropy: 0.9043814577244941, [(1, 102), (2, 48)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2927036315202713] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2927036315202713, 0.26904886236041786] ***
*** starting iteration: 2; err: [Inf, 0.2927036315202713, 0.26904886236041786] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2927036315202713, 0.26904886236041786, 0.26492714272812007] ***
*** starting iteration: 3; err: [Inf, 0.2927036315202713, 0.26904886236041786, 0.26492714272812007] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2927036315202713, 0.26904886236041786, 0.26492714272812007, 0.24724179407767952] ***
*** finished computation of 3 references, err: [Inf, 0.2927036315202713, 0.26904886236041786, 0.26492714272812007, 0.24724179407767952] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [120, 40, 0]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(1, 120), (2, 40)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 142, 19]]
** centroid: 2, normalized-entropy: 0.36251582732996657, [(1, 1), (2, 142), (3, 19)]
*** center 3: selecting labels [1] (freq >= 1) [from [178, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2945163210220635] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2945163210220635, 0.2417343890047632] ***
*** starting iteration: 2; err: [Inf, 0.2945163210220635, 0.2417343890047632] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2945163210220635, 0.2417343890047632, 0.23509860729798673] ***
*** starting iteration: 3; err: [Inf, 0.2945163210220635, 0.2417343890047632, 0.23509860729798673] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2945163210220635, 0.2417343890047632, 0.23509860729798673, 0.23442311579920352] ***
*** finished computation of 3 references, err: [Inf, 0.2945163210220635, 0.2417343890047632, 0.23509860729798673, 0.23442311579920352] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [66, 112, 14]]
** centroid: 1, normalized-entropy: 0.7941041848111309, [(1, 66), (2, 112), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [138, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [96, 74, 0]]
** centroid: 3, normalized-entropy: 0.9878853530449176, [(1, 96), (2, 74)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5492260831221938] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5492260831221938, 0.33663774669729174] ***
*** starting iteration: 2; err: [Inf, 0.5492260831221938, 0.33663774669729174] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5492260831221938, 0.33663774669729174, 0.30146151633001866] ***
*** starting iteration: 3; err: [Inf, 0.5492260831221938, 0.33663774669729174, 0.30146151633001866] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5492260831221938, 0.33663774669729174, 0.30146151633001866, 0.26612463856115937] ***
*** finished computation of 3 references, err: [Inf, 0.5492260831221938, 0.33663774669729174, 0.30146151633001866, 0.26612463856115937] ***
*** center 1: selecting labels [1] (freq >= 1) [from [119, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [39, 74, 8]]
** centroid: 2, normalized-entropy: 0.769380854167665, [(1, 39), (2, 74), (3, 8)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [136, 116, 8]]
** centroid: 3, normalized-entropy: 0.733807435155198, [(1, 136), (2, 116), (3, 8)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3221245592236519] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3221245592236519, 0.28069802905991675] ***
*** starting iteration: 2; err: [Inf, 0.3221245592236519, 0.28069802905991675] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3221245592236519, 0.28069802905991675, 0.2752686023637652] ***
*** starting iteration: 3; err: [Inf, 0.3221245592236519, 0.28069802905991675, 0.2752686023637652] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3221245592236519, 0.28069802905991675, 0.2752686023637652, 0.27067510650493204] ***
*** finished computation of 3 references, err: [Inf, 0.3221245592236519, 0.28069802905991675, 0.2752686023637652, 0.27067510650493204] ***
*** center 1: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [29, 177, 9]]
** centroid: 2, normalized-entropy: 0.5126216399614231, [(1, 29), (2, 177), (3, 9)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [182, 12, 0]]
** centroid: 3, normalized-entropy: 0.3347676126777638, [(1, 182), (2, 12)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30240166909527033] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30240166909527033, 0.2439155599400401] ***
*** starting iteration: 2; err: [Inf, 0.30240166909527033, 0.2439155599400401] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30240166909527033, 0.2439155599400401, 0.23809625643119217] ***
*** starting iteration: 3; err: [Inf, 0.30240166909527033, 0.2439155599400401, 0.23809625643119217] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30240166909527033, 0.2439155599400401, 0.23809625643119217, 0.23642588398605585] ***
*** finished computation of 3 references, err: [Inf, 0.30240166909527033, 0.2439155599400401, 0.23809625643119217, 0.23642588398605585] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 131, 19]]
** centroid: 1, normalized-entropy: 0.54822511745032, [(2, 131), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [106, 43, 0]]
** centroid: 2, normalized-entropy: 0.8668936705568643, [(1, 106), (2, 43)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [177, 24, 0]]
** centroid: 3, normalized-entropy: 0.52764232609436, [(1, 177), (2, 24)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.25905834190174937] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25905834190174937, 0.23742443490214646] ***
*** starting iteration: 2; err: [Inf, 0.25905834190174937, 0.23742443490214646] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25905834190174937, 0.23742443490214646, 0.23588221635762602] ***
*** starting iteration: 3; err: [Inf, 0.25905834190174937, 0.23742443490214646, 0.23588221635762602] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25905834190174937, 0.23742443490214646, 0.23588221635762602, 0.23579771986976267] ***
*** finished computation of 3 references, err: [Inf, 0.25905834190174937, 0.23742443490214646, 0.23588221635762602, 0.23579771986976267] ***
*** center 1: selecting labels [1] (freq >= 1) [from [156, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [51, 125, 15]]
** centroid: 2, normalized-entropy: 0.7553610562601433, [(1, 51), (2, 125), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [87, 66, 0]]
** centroid: 3, normalized-entropy: 0.9863676072907089, [(1, 87), (2, 66)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3293049999885261] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3293049999885261, 0.24153022488672285] ***
*** starting iteration: 2; err: [Inf, 0.3293049999885261, 0.24153022488672285] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3293049999885261, 0.24153022488672285, 0.23908131730090826] ***
*** starting iteration: 3; err: [Inf, 0.3293049999885261, 0.24153022488672285, 0.23908131730090826] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3293049999885261, 0.24153022488672285, 0.23908131730090826, 0.23791690474562346] ***
*** finished computation of 3 references, err: [Inf, 0.3293049999885261, 0.24153022488672285, 0.23908131730090826, 0.23791690474562346] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [151, 15, 0]]
** centroid: 1, normalized-entropy: 0.43767512669502906, [(1, 151), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [154, 20, 0]]
** centroid: 2, normalized-entropy: 0.5146464316834292, [(1, 154), (2, 20)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [1, 149, 10]]
** centroid: 3, normalized-entropy: 0.24698180814902668, [(1, 1), (2, 149), (3, 10)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2729329778961837] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2729329778961837, 0.24267704947851598] ***
*** starting iteration: 2; err: [Inf, 0.2729329778961837, 0.24267704947851598] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2729329778961837, 0.24267704947851598, 0.23443617967516184] ***
*** starting iteration: 3; err: [Inf, 0.2729329778961837, 0.24267704947851598, 0.23443617967516184] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2729329778961837, 0.24267704947851598, 0.23443617967516184, 0.2336033152760938] ***
*** finished computation of 3 references, err: [Inf, 0.2729329778961837, 0.24267704947851598, 0.23443617967516184, 0.2336033152760938] ***
*** center 1: selecting labels [1] (freq >= 1) [from [149, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [109, 69, 0]]
** centroid: 2, normalized-entropy: 0.9632599538968549, [(1, 109), (2, 69)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [46, 115, 12]]
** centroid: 3, normalized-entropy: 0.7361671133917238, [(1, 46), (2, 115), (3, 12)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2769026718772948] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2769026718772948, 0.2524676826931536] ***
*** starting iteration: 2; err: [Inf, 0.2769026718772948, 0.2524676826931536] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2769026718772948, 0.2524676826931536, 0.23583491975814105] ***
*** starting iteration: 3; err: [Inf, 0.2769026718772948, 0.2524676826931536, 0.23583491975814105] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2769026718772948, 0.2524676826931536, 0.23583491975814105, 0.2342429221291095] ***
*** finished computation of 3 references, err: [Inf, 0.2769026718772948, 0.2524676826931536, 0.23583491975814105, 0.2342429221291095] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [176, 4, 0]]
** centroid: 1, normalized-entropy: 0.1537421803287618, [(1, 176), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [79, 74, 0]]
** centroid: 2, normalized-entropy: 0.9992294886891654, [(1, 79), (2, 74)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [23, 124, 20]]
** centroid: 3, normalized-entropy: 0.6810935330639425, [(1, 23), (2, 124), (3, 20)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39602048274315893] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39602048274315893, 0.2506689323969185] ***
*** starting iteration: 2; err: [Inf, 0.39602048274315893, 0.2506689323969185] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39602048274315893, 0.2506689323969185, 0.23891970014758407] ***
*** starting iteration: 3; err: [Inf, 0.39602048274315893, 0.2506689323969185, 0.23891970014758407] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39602048274315893, 0.2506689323969185, 0.23891970014758407, 0.23511955818906427] ***
*** finished computation of 3 references, err: [Inf, 0.39602048274315893, 0.2506689323969185, 0.23891970014758407, 0.23511955818906427] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [115, 58, 0]]
** centroid: 1, normalized-entropy: 0.9202105769083874, [(1, 115), (2, 58)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [14, 140, 17]]
** centroid: 2, normalized-entropy: 0.5444566632513991, [(1, 14), (2, 140), (3, 17)]
*** center 3: selecting labels [1] (freq >= 1) [from [156, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.29857693480327724] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29857693480327724, 0.24535232109948993] ***
*** starting iteration: 2; err: [Inf, 0.29857693480327724, 0.24535232109948993] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29857693480327724, 0.24535232109948993, 0.23740944426134228] ***
*** starting iteration: 3; err: [Inf, 0.29857693480327724, 0.24535232109948993, 0.23740944426134228] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29857693480327724, 0.24535232109948993, 0.23740944426134228, 0.23635313495621085] ***
*** finished computation of 3 references, err: [Inf, 0.29857693480327724, 0.24535232109948993, 0.23740944426134228, 0.23635313495621085] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [95, 44, 0]]
** centroid: 1, normalized-entropy: 0.9005865834322765, [(1, 95), (2, 44)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [41, 141, 14]]
** centroid: 2, normalized-entropy: 0.6851504004983036, [(1, 41), (2, 141), (3, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [165, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4265860014841892] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4265860014841892, 0.24572281377762556] ***
*** starting iteration: 2; err: [Inf, 0.4265860014841892, 0.24572281377762556] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4265860014841892, 0.24572281377762556, 0.23295692386850714] ***
*** starting iteration: 3; err: [Inf, 0.4265860014841892, 0.24572281377762556, 0.23295692386850714] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4265860014841892, 0.24572281377762556, 0.23295692386850714, 0.23066143837943673] ***
*** finished computation of 3 references, err: [Inf, 0.4265860014841892, 0.24572281377762556, 0.23295692386850714, 0.23066143837943673] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [2, 149, 19]]
** centroid: 1, normalized-entropy: 0.37569909769830206, [(1, 2), (2, 149), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [91, 41, 0]]
** centroid: 2, normalized-entropy: 0.8938718129385839, [(1, 91), (2, 41)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [186, 12, 0]]
** centroid: 3, normalized-entropy: 0.32984607020714635, [(1, 186), (2, 12)]
finished with 4 centroids; started with 3
[ Info: ("class distribution: ", Dict(2 => 384,3 => 32,1 => 584), Dict(2 => 354,3 => 28,1 => 618))
[ Info: ===== scores for single classifier: {"micro_f1":0.907,"precision":0.907,"recall":0.907,"macro_recall":0.9156473406103158,"macro_f1":0.7795398458775741,"accuracy":0.907,"class_f1":{"2":0.8526148969889066,"3":0.5185185185185185,"1":0.9674861221252973},"class_precision":{"2":0.9711191335740073,"3":0.35,"1":0.9486780715396579},"class_recall":{"2":0.7598870056497176,"3":1.0,"1":0.9870550161812298}}
[ Info: ===== scores for 1: {"micro_f1":0.938,"precision":0.938,"recall":0.938,"macro_recall":0.946848774066151,"macro_f1":0.8317993829021689,"accuracy":0.938,"class_f1":{"2":0.9077380952380952,"3":0.6086956521739131,"1":0.9789644012944984},"class_precision":{"2":0.9591194968553459,"3":0.4375,"1":0.9789644012944984},"class_recall":{"2":0.8615819209039548,"3":1.0,"1":0.9789644012944984}}
[ Info: ===== scores for 5: {"micro_f1":0.957,"precision":0.957,"recall":0.957,"macro_recall":0.9627283198946849,"macro_f1":0.8614452910064466,"accuracy":0.957,"class_f1":{"2":0.9368575624082232,"3":0.6588235294117647,"1":0.9886547811993518},"class_precision":{"2":0.9755351681957186,"3":0.49122807017543857,"1":0.9902597402597403},"class_recall":{"2":0.9011299435028248,"3":1.0,"1":0.9870550161812298}}
[ Info: ===== scores for 7: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.9652880624577186,"macro_f1":0.869189444638686,"accuracy":0.961,"class_f1":{"2":0.9425625920471281,"3":0.6746987951807228,"1":0.990306946688207},"class_precision":{"2":0.9846153846153847,"3":0.509090909090909,"1":0.9887096774193549},"class_recall":{"2":0.903954802259887,"3":1.0,"1":0.9919093851132686}}
[ Info: ===== scores for 9: {"micro_f1":0.955,"precision":0.955,"recall":0.955,"macro_recall":0.9612473259832154,"macro_f1":0.8671625976014958,"accuracy":0.955,"class_f1":{"2":0.9339207048458149,"3":0.6829268292682926,"1":0.98464025869038},"class_precision":{"2":0.9724770642201835,"3":0.5185185185185185,"1":0.9838449111470113},"class_recall":{"2":0.8983050847457628,"3":1.0,"1":0.9854368932038835}}
[ Info: ===== scores for 11: {"micro_f1":0.957,"precision":0.957,"recall":0.957,"macro_recall":0.9619238293748743,"macro_f1":0.8685708965100415,"accuracy":0.957,"class_f1":{"2":0.9364844903988184,"3":0.6829268292682926,"1":0.9863013698630138},"class_precision":{"2":0.9814241486068112,"3":0.5185185185185185,"1":0.9823434991974318},"class_recall":{"2":0.8954802259887006,"3":1.0,"1":0.9902912621359223}}
(score = 0.943, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.943, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.938, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.938, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.95, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.95, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.95, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.95, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.953, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.953, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.957, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.957, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.96, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.96, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.961,"k":7,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.9652880624577186,"macro_f1":0.869189444638686,"accuracy":0.961,"class_f1":{"2":0.9425625920471281,"3":0.6746987951807228,"1":0.990306946688207},"class_precision":{"2":0.9846153846153847,"3":0.509090909090909,"1":0.9887096774193549},"class_recall":{"2":0.903954802259887,"3":1.0,"1":0.9919093851132686}}
Test Summary: | Pass  Total
AKNC          |    8      8
[166, 5, 3, 1, 3, 6, 2, 1, 2, 2, 5, 5, 1, 4, 2, 1, 19, 11, 1, 1, 3, 3, 6, 6, 2, 3, 13, 4, 18, 4, 9, 22, 18, 4, 2, 1, 11, 4, 16, 7, 1, 17, 2, 33, 10, 1, 6, 33, 34, 9, 4, 16, 16, 5, 38, 15, 15, 6, 3, 13, 7, 26, 13, 21, 110, 69, 11, 11, 19, 13, 6, 24, 42, 86, 17, 8, 4, 24, 12, 3, 56, 24, 7, 5, 21, 10, 5, 17, 3, 18, 7, 5, 2, 24, 21, 29, 4, 28, 21, 3, 29, 62, 24, 3, 5, 38, 224, 4, 16, 7, 4, 7, 8, 20, 10, 702, 5, 8, 23, 17, 2, 13, 51, 5, 8, 2, 142, 9, 12, 10, 2, 22, 9, 20, 6, 218, 3, 2, 20, 25, 18, 69, 8, 4, 29, 16, 7, 11, 55, 13, 112, 13, 33, 15, 10, 19, 8, 26, 29, 11, 350, 11, 4, 9, 25, 19, 13, 368, 38, 9, 19, 6, 2, 35, 7, 36, 69, 8, 10, 35, 10, 6, 21, 11, 24, 65, 25, 10, 98, 6, 17, 18, 119, 2, 18, 35, 102, 61, 30, 126, 22, 15, 25, 27, 42, 74, 64, 4, 8, 5, 23, 54, 5, 26, 4, 33, 63, 5, 50, 2, 53, 5, 182, 2, 33, 7, 7, 245, 63, 57, 12, 26, 20, 1, 12, 15, 27, 2, 4, 26, 21, 116, 4, 16, 1, 21, 9, 41, 9, 641, 15, 8, 38, 62, 27, 8, 213, 39, 7, 6, 24, 99, 16, 27, 44, 16, 8, 29, 56, 17, 5, 5, 14, 46, 114, 115, 2, 12, 99, 8, 141, 39, 26, 19, 34, 20, 9, 13, 56, 3, 129, 9, 27, 175, 61, 5, 51, 2, 47, 36]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6769999999999997, speedup = 0.27562889087126863, eval_ratio = 0.077726)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.368923611111111,"recall":0.36545138888888873,"f1":null,"seconds":0.000154789537191391,"exhaustive_search_seconds":0.0003937035799026489,"evaluations":469.921875,"distances_sum":1717.5507181920852}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5425347222222222,"recall":0.5425347222222222,"f1":null,"seconds":0.00024064257740974426,"exhaustive_search_seconds":0.0003937035799026489,"evaluations":598.6640625,"distances_sum":1598.4621489794947}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.675347222222222,"recall":0.675347222222222,"f1":null,"seconds":0.000356895849108696,"exhaustive_search_seconds":0.0003937035799026489,"evaluations":743.7890625,"distances_sum":1537.6579815042978}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7560763888888884,"recall":0.7560763888888884,"f1":0.7560763888888884,"seconds":0.0004556458443403244,"exhaustive_search_seconds":0.0003937035799026489,"evaluations":896.5546875,"distances_sum":1506.197781900576}
KCenters.DeloneInvIndex> reached performance {"precision":0.815104166666666,"recall":0.815104166666666,"f1":0.815104166666666,"seconds":0.0005301255732774734,"exhaustive_search_seconds":0.0003937035799026489,"evaluations":1018.0390625,"distances_sum":1487.8256204752488}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7959999999999999, speedup = 0.6674437752675937, eval_ratio = 0.098504)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
