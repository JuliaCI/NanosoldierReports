Julia Version 1.5.0-DEV.343
Commit c934b94ffe (2020-02-25 17:15 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed DataValueInterfaces ───────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed OrderedCollections ────────── v1.1.0
  Installed KCenters ──────────────────── v0.2.1
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed JSON ──────────────────────── v0.21.0
  Installed DataFrames ────────────────── v0.20.2
  Installed DataAPI ───────────────────── v1.1.0
  Installed Compat ────────────────────── v3.6.0
  Installed Reexport ──────────────────── v0.2.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed StatsBase ─────────────────── v0.32.1
  Installed TableTraits ───────────────── v1.0.0
  Installed MLDataPattern ─────────────── v0.5.0
  Installed SimilaritySearch ──────────── v0.3.19
  Installed MappedArrays ──────────────── v0.2.2
  Installed MLDataUtils ───────────────── v0.5.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed Tables ────────────────────── v1.0.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed Missings ──────────────────── v0.4.3
  Installed Parsers ───────────────────── v0.3.11
  Installed DataStructures ────────────── v0.17.10
  Installed SortingAlgorithms ─────────── v0.3.1
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.1
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.6.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.10
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.1
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.2
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_LhviLU/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.6.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.10
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.1
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.2
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9323044313987097
[ Info: 0.8326150393486023
[ Info: 0.5533601232866446
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3328977065036694
mean(cdnet.distances) = 0.3793888936191797
mean(crand.distances) = 0.331586905742685
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8498636779886789,"seconds":5.474314093589783e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.5078125,"distances_sum":2271.506472821446}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4345703125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4345703125,"f1":null,"seconds":3.779307007789612e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":6.875,"distances_sum":1201.1759513510874}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7509765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7509765625,"f1":0.8498636779886789,"seconds":5.474314093589783e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.5078125,"distances_sum":2271.506472821446}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9355597527472536,"seconds":5.243346095085144e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.640625,"distances_sum":2885.021503188515}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9518315018315022,"seconds":5.358830094337463e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.828125,"distances_sum":3027.9913040615493}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.9017862345987354,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.53125,"distances_sum":2616.2207724459577}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9518315018315022,"seconds":5.358830094337463e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.828125,"distances_sum":3027.9913040615493}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9633241758241763,"seconds":5.479902029037476e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.8984375,"distances_sum":3133.8965390316434}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9604567307692312,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.8359375,"distances_sum":3123.408614390516}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9633241758241763,"seconds":5.479902029037476e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.8984375,"distances_sum":3133.8965390316434}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9633241758241763,"seconds":5.479902029037476e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.8984375,"distances_sum":3133.8965390316434}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.640625,"f1":0.7680755008880016,"seconds":4.453584551811218e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.7109375,"distances_sum":1756.3922542578996}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.640625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.640625,"f1":0.7680755008880016,"seconds":4.453584551811218e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.7109375,"distances_sum":1756.3922542578996}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8495233932733942,"seconds":5.081295967102051e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.1875,"distances_sum":2233.9055578026628}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.8833879662004671,"seconds":5.198642611503601e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.515625,"distances_sum":2426.1441689837056}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.802734375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.802734375,"f1":0.8833879662004671,"seconds":5.198642611503601e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.515625,"distances_sum":2426.1441689837056}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9357116841491849,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.734375,"distances_sum":2789.9331362013163}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.948094093406594,"seconds":5.513429641723633e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7890625,"distances_sum":2863.6814585067905}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9500832500832506,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7890625,"distances_sum":2910.974496288536}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9435070138195143,"seconds":5.478039383888245e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8125,"distances_sum":2804.9168227247033}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9500832500832506,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7890625,"distances_sum":2910.974496288536}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.912109375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9500832500832506,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7890625,"distances_sum":2910.974496288536}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8640031843156853,"seconds":5.122274160385132e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.6015625,"distances_sum":2243.6233766105724}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7927416333666342,"seconds":4.61190938949585e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":7.796875,"distances_sum":1834.992246107998}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8570792055167064,"seconds":5.11854887008667e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.5,"distances_sum":2215.6809090274583}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.77734375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.77734375,"f1":0.8640031843156853,"seconds":5.122274160385132e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.6015625,"distances_sum":2243.6233766105724}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9094894688644698,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.671875,"distances_sum":2572.078987106676}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9514022435897441,"seconds":5.651265382766724e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8828125,"distances_sum":2874.50534071196}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9542811355311361,"seconds":5.928799510002136e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.796875,"distances_sum":2858.527010911581}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9392055860805865,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.7734375,"distances_sum":2799.9298606397847}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9047733516483524,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.71875,"distances_sum":2475.474348612453}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9542811355311361,"seconds":5.928799510002136e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.796875,"distances_sum":2858.527010911581}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9567422161172164,"seconds":5.578622221946716e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.859375,"distances_sum":2945.334215602585}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9579670329670334,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8203125,"distances_sum":2942.805534793625}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9705013736263743,"seconds":5.947425961494446e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.9453125,"distances_sum":3034.1485900509215}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9744791666666671,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.90625,"distances_sum":3078.3769252170455}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9708733974358978,"seconds":6.059184670448303e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.9375,"distances_sum":3029.5126086551477}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.962485951548452,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8671875,"distances_sum":2984.6782451607173}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.961126373626374,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.84375,"distances_sum":2954.282849613177}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9744791666666671,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.90625,"distances_sum":3078.3769252170455}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9744791666666671,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.90625,"distances_sum":3078.3769252170455}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4189453125, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4189453125,"f1":null,"seconds":3.552064299583435e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.3828125,"distances_sum":1076.5402587122749}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4189453125,"state":{"ssize":5,"bsize":2},"perf":{"precision":null,"recall":0.4189453125,"f1":null,"seconds":3.552064299583435e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.3828125,"distances_sum":1076.5402587122749}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.443359375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.443359375,"f1":null,"seconds":3.7364661693573e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.5546875,"distances_sum":1108.3992543529548}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.552734375, conf: {"ssize":8,"bsize":3}, perf: {"precision":1.0,"recall":0.552734375,"f1":0.6947913197913205,"seconds":4.0102750062942505e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.953125,"distances_sum":1395.0136132332027}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.8995197510822519,"seconds":5.401670932769775e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.375,"distances_sum":2461.626860309042}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6640625,"f1":0.7839816433566441,"seconds":4.725530743598938e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.7421875,"distances_sum":1794.727578955804}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8310546875,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.8310546875,"f1":0.8995197510822519,"seconds":5.401670932769775e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.375,"distances_sum":2461.626860309042}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9657222985347991,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8046875,"distances_sum":2969.776611855703}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9152873168498177,"seconds":5.358830094337463e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.4296875,"distances_sum":2586.727853772712}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9657222985347991,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8046875,"distances_sum":2969.776611855703}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9657222985347991,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8046875,"distances_sum":2969.776611855703}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8545314060939068,"seconds":5.304813385009766e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.53125,"distances_sum":2134.177628908454}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.177734375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.177734375,"f1":null,"seconds":3.475695848464966e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":6.34375,"distances_sum":485.35786594185606}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.193359375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.193359375,"f1":null,"seconds":3.5222619771957397e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":6.4765625,"distances_sum":518.0487855178023}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7607421875,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7607421875,"f1":0.8545314060939068,"seconds":5.304813385009766e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.53125,"distances_sum":2134.177628908454}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8677062520812527,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.5546875,"distances_sum":2213.340421911691}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9332932692307698,"seconds":5.869194865226746e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.609375,"distances_sum":2714.206303290073}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8658778721278728,"seconds":5.29363751411438e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.4921875,"distances_sum":2225.0397783407434}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8960596694971703,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.53125,"distances_sum":2432.092724373849}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.88671875,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.88671875,"f1":0.9332932692307698,"seconds":5.869194865226746e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.609375,"distances_sum":2714.206303290073}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9638278388278395,"seconds":6.1765313148498535e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.875,"distances_sum":2939.6739163851835}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9697265625, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9697265625,"f1":0.983556547619048,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.96875,"distances_sum":3095.2462506229263}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9664835164835168,"seconds":6.085261702537537e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.875,"distances_sum":2969.5339748568167}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9535599816849822,"seconds":6.226822733879089e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.8671875,"distances_sum":2844.5548396488375}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9745364010989014,"seconds":6.128102540969849e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.9453125,"distances_sum":3033.0216755233514}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9623569139194145,"seconds":5.45009970664978e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.8984375,"distances_sum":2941.695029329968}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9477538086913091,"seconds":5.362555384635925e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.78125,"distances_sum":2845.1291895182912}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9595295329670336,"seconds":5.466863512992859e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.8828125,"distances_sum":2898.1400377875616}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9607429029304034,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.84375,"distances_sum":2929.652285742362}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9697265625,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.983556547619048,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.96875,"distances_sum":3095.2462506229263}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9697265625,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.983556547619048,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.96875,"distances_sum":3095.2462506229263}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":0.9870907738095237,"recall":0.669921875,"f1":0.7883808899433906,"seconds":4.194676876068115e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.0,"distances_sum":1357.833644344613}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.669921875,"state":{"ssize":1,"bsize":4},"perf":{"precision":0.9870907738095237,"recall":0.669921875,"f1":0.7883808899433906,"seconds":4.194676876068115e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.0,"distances_sum":1357.833644344613}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7373046875, conf: {"ssize":2,"bsize":5}, perf: {"precision":0.9842261904761904,"recall":0.7373046875,"f1":0.8348193473193477,"seconds":4.520639777183533e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.4921875,"distances_sum":1545.1515905336205}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":2,"bsize":6}, perf: {"precision":0.9866071428571429,"recall":0.7900390625,"f1":0.8707775297619051,"seconds":4.805624485015869e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.1875,"distances_sum":1756.1904799102203}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":2,"bsize":8}, perf: {"precision":0.9870256696428572,"recall":0.91796875,"f1":0.9479102277930409,"seconds":5.405396223068237e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.7890625,"distances_sum":2262.356447447951}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":2,"bsize":8},"perf":{"precision":0.9870256696428572,"recall":0.91796875,"f1":0.9479102277930409,"seconds":5.405396223068237e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.7890625,"distances_sum":2262.356447447951}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":12}, perf: {"precision":0.9900948660714286,"recall":0.94140625,"f1":0.9633663862179492,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.890625,"distances_sum":2325.9927445931426}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":4,"bsize":10}, perf: {"precision":0.9896298363095238,"recall":0.9423828125,"f1":0.9629957932692309,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8671875,"distances_sum":2329.467319054477}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":4,"bsize":10},"perf":{"precision":0.9896298363095238,"recall":0.9423828125,"f1":0.9629957932692309,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8671875,"distances_sum":2329.467319054477}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":4,"bsize":10},"perf":{"precision":0.9896298363095238,"recall":0.9423828125,"f1":0.9629957932692309,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8671875,"distances_sum":2329.467319054477}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5390625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5390625,"f1":null,"seconds":3.861263394355774e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":6.2109375,"distances_sum":1066.9025265542261}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7392578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7392578125,"f1":0.841092241092242,"seconds":4.854053258895874e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.8515625,"distances_sum":1611.3040912096055}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6533203125,"f1":0.7763921842046849,"seconds":4.49642539024353e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":6.90625,"distances_sum":1310.2568353693512}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7392578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7392578125,"f1":0.841092241092242,"seconds":4.854053258895874e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.8515625,"distances_sum":1611.3040912096055}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9502690018315025,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8046875,"distances_sum":2213.646092257206}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8518236971361981,"seconds":4.798173904418945e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.8515625,"distances_sum":1661.6108997633676}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.9024642024642034,"seconds":5.1800161600112915e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.4140625,"distances_sum":1897.597048295715}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.740234375, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.740234375,"f1":0.8412988053613061,"seconds":4.502013325691223e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.7265625,"distances_sum":1613.5066741688725}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.740234375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.740234375,"f1":0.8423673548673556,"seconds":4.697591066360474e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.84375,"distances_sum":1604.6077826367805}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9330700549450553,"seconds":5.19677996635437e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.65625,"distances_sum":2123.122092102653}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.9502690018315025,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8046875,"distances_sum":2213.646092257206}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9659626831501835,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9296875,"distances_sum":2299.026263214694}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9694997710622715,"seconds":5.681067705154419e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8984375,"distances_sum":2339.0355538753965}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9588598901098906,"seconds":5.48921525478363e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8828125,"distances_sum":2244.793343516815}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.953840430402931,"seconds":5.608424544334412e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.7734375,"distances_sum":2257.246803354003}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9572973901098903,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8125,"distances_sum":2274.650756560813}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9504864926739932,"seconds":5.327165126800537e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8046875,"distances_sum":2229.0901822597516}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9694997710622715,"seconds":5.681067705154419e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8984375,"distances_sum":2339.0355538753965}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9453125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9694997710622715,"seconds":5.681067705154419e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8984375,"distances_sum":2339.0355538753965}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2236328125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2236328125,"f1":null,"seconds":2.9671937227249146e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":6.3203125,"distances_sum":498.9136230911074}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8564191017316026,"seconds":4.665926098823547e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.234375,"distances_sum":1628.2408967364745}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.759765625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.759765625,"f1":0.8564191017316026,"seconds":4.665926098823547e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.234375,"distances_sum":1628.2408967364745}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9556089743589748,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.734375,"distances_sum":2262.748553757524}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9477392399267406,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.75,"distances_sum":2202.9413434615167}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8612933941058948,"seconds":4.699453711509705e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.328125,"distances_sum":1682.9223478220513}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":8,"bsize":8},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9556089743589748,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.734375,"distances_sum":2262.748553757524}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9583021145521151,"seconds":5.286186933517456e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.78125,"distances_sum":2263.700067404842}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":12,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9570741758241766,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8125,"distances_sum":2241.3766057526127}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9675652472527474,"seconds":7.670372724533081e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8671875,"distances_sum":2292.433412534599}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9675652472527474,"seconds":7.670372724533081e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8671875,"distances_sum":2292.433412534599}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9675652472527474,"seconds":7.670372724533081e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8671875,"distances_sum":2292.433412534599}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5654296875, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.5654296875,"f1":null,"seconds":4.0084123611450195e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":6.8515625,"distances_sum":1099.2595228575333}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2099609375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2099609375,"f1":null,"seconds":3.1758099794387817e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":6.359375,"distances_sum":426.96165359509484}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2080078125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2080078125,"f1":null,"seconds":3.205612301826477e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":6.15625,"distances_sum":431.8180869272733}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5654296875,"state":{"ssize":3,"bsize":3},"perf":{"precision":null,"recall":0.5654296875,"f1":null,"seconds":4.0084123611450195e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":6.8515625,"distances_sum":1099.2595228575333}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9323265276390281,"seconds":5.133450031280518e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.5078125,"distances_sum":2066.520208830223}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9311584249084255,"seconds":5.304813385009766e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.46875,"distances_sum":2058.465014297858}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8608646561771569,"seconds":4.9658119678497314e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.3125,"distances_sum":1638.9733679902167}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.697265625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.697265625,"f1":0.8105914918414926,"seconds":4.641711711883545e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.8203125,"distances_sum":1394.6736536580634}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65234375, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.65234375,"f1":0.7769371253746261,"seconds":4.470348358154297e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.6953125,"distances_sum":1253.5883800230736}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.88671875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.88671875,"f1":0.9323265276390281,"seconds":5.133450031280518e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.5078125,"distances_sum":2066.520208830223}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9477220695970703,"seconds":5.247071385383606e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.578125,"distances_sum":2092.1849647266768}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9778102106227107,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.8671875,"distances_sum":2336.6166281297424}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9610347985347989,"seconds":8.21240246295929e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.84375,"distances_sum":2211.2713010011594}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9423909423909429,"seconds":5.783513188362122e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.5234375,"distances_sum":2102.7800340571257}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9778102106227107,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.8671875,"distances_sum":2336.6166281297424}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9778102106227107,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.8671875,"distances_sum":2336.6166281297424}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.8009037837162846,"seconds":5.010515451431274e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":7.9609375,"distances_sum":1381.9731583552077}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.228515625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.228515625,"f1":null,"seconds":3.7867575883865356e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":6.9765625,"distances_sum":487.38648020670973}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6865234375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6865234375,"f1":0.8009037837162846,"seconds":5.010515451431274e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":7.9609375,"distances_sum":1381.9731583552077}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.720703125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.720703125,"f1":0.8286024739149748,"seconds":4.9620866775512695e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.3125,"distances_sum":1505.2219200712932}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9252008408258414,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.640625,"distances_sum":2041.1218008921314}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.693359375, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.693359375,"f1":0.8091642732267741,"seconds":6.372109055519104e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.140625,"distances_sum":1380.7424714087792}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8582613566988575,"seconds":4.991888999938965e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.4140625,"distances_sum":1683.1661870863852}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.875,"f1":0.9252008408258414,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.640625,"distances_sum":2041.1218008921314}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9694597069597074,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.9296875,"distances_sum":2264.814393383686}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9395947802197809,"seconds":5.381181836128235e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.734375,"distances_sum":2113.173138728314}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9597870879120887,"seconds":6.3050538301467896e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.90625,"distances_sum":2200.755558200212}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9478537087912094,"seconds":5.718320608139038e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.828125,"distances_sum":2137.929416183846}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9490785256410261,"seconds":5.356967449188232e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8671875,"distances_sum":2124.4631619799034}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.931556464368965,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.703125,"distances_sum":2069.598273890011}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9694597069597074,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.9296875,"distances_sum":2264.814393383686}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9453125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9694597069597074,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.9296875,"distances_sum":2264.814393383686}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.21875,"f1":null,"seconds":2.9653310775756836e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":6.15625,"distances_sum":452.5215941264119}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.21875,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.21875,"f1":null,"seconds":2.9653310775756836e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":6.15625,"distances_sum":452.5215941264119}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5908203125, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.5908203125,"f1":null,"seconds":4.027038812637329e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.0390625,"distances_sum":1161.031247713671}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4189453125, conf: {"ssize":9,"bsize":2}, perf: {"precision":null,"recall":0.4189453125,"f1":null,"seconds":3.5762786865234375e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":6.484375,"distances_sum":852.2046394122895}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.384765625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.384765625,"f1":null,"seconds":3.2819807529449463e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":6.46875,"distances_sum":726.6087521210509}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6982421875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6982421875,"f1":0.8149168539793549,"seconds":4.652887582778931e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.8203125,"distances_sum":1422.1700643572694}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.681640625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.681640625,"f1":0.8002126345876353,"seconds":4.708766937255859e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.7890625,"distances_sum":1382.031265822564}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.8458567474192483,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.265625,"distances_sum":1607.0773259030175}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3994140625, conf: {"ssize":6,"bsize":2}, perf: {"precision":null,"recall":0.3994140625,"f1":null,"seconds":4.000961780548096e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":6.3671875,"distances_sum":783.9866823364404}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7451171875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7451171875,"f1":0.8458567474192483,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.265625,"distances_sum":1607.0773259030175}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9443337912087918,"seconds":5.496665835380554e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.6796875,"distances_sum":2159.894685769893}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9582417582417591,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.875,"distances_sum":2247.237037700993}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9434268856143863,"seconds":5.545094609260559e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.703125,"distances_sum":2176.45102735568}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9462740384615391,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8046875,"distances_sum":2170.089050358737}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.933963432400933,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.6171875,"distances_sum":2136.6043067353958}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9202755577755584,"seconds":5.200505256652832e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.5546875,"distances_sum":2059.0007161151566}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9582417582417591,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.875,"distances_sum":2247.237037700993}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9248046875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9582417582417591,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.875,"distances_sum":2247.237037700993}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8452589077589087,"seconds":5.0906091928482056e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":8.2734375,"distances_sum":1584.078787201894}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5859375, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5859375,"f1":0.7240840756465762,"seconds":4.0978193283081055e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":7.140625,"distances_sum":1139.7437848896689}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.74609375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.74609375,"f1":0.8452589077589087,"seconds":5.0906091928482056e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":8.2734375,"distances_sum":1584.078787201894}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9660943223443229,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":8.8046875,"distances_sum":2270.0391867808466}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9660943223443229,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":8.8046875,"distances_sum":2270.0391867808466}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9798363095238098,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":8.9140625,"distances_sum":2344.8012070623213}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9658203125, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9658203125,"f1":0.9811584249084252,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":8.9375,"distances_sum":2354.634364116927}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9658203125,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9811584249084252,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":8.9375,"distances_sum":2354.634364116927}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9658203125,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9811584249084252,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.4435499906539917e-6,"evaluations":8.9375,"distances_sum":2354.634364116927}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.560546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.560546875,"f1":0.7043727106227113,"seconds":4.114583134651184e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":6.9453125,"distances_sum":1296.7710638164472}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8496082042957052,"seconds":4.863366484642029e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.3359375,"distances_sum":1903.783424408168}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7470703125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7470703125,"f1":0.8496082042957052,"seconds":4.863366484642029e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.3359375,"distances_sum":1903.783424408168}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9372081043956052,"seconds":5.2656978368759155e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.6875,"distances_sum":2569.1309248943485}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.898855311355312,"seconds":5.101785063743591e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.6171875,"distances_sum":2247.5578933247416}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8896484375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8896484375,"f1":0.9372081043956052,"seconds":5.2656978368759155e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.6875,"distances_sum":2569.1309248943485}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9675080128205134,"seconds":6.0051679611206055e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.9140625,"distances_sum":2809.1686783406676}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9630780677655681,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.890625,"distances_sum":2795.5258490025008}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9675080128205134,"seconds":6.0051679611206055e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.9140625,"distances_sum":2809.1686783406676}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9675080128205134,"seconds":6.0051679611206055e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.9140625,"distances_sum":2809.1686783406676}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.724609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.724609375,"f1":0.832787524975026,"seconds":4.7031790018081665e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.7265625,"distances_sum":1926.576478588859}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.724609375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.724609375,"f1":0.832787524975026,"seconds":4.7031790018081665e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.7265625,"distances_sum":1926.576478588859}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.91830547924298,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.671875,"distances_sum":2624.4601608331045}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.86328125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.86328125,"f1":0.91830547924298,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.671875,"distances_sum":2624.4601608331045}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9733459249084253,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.890625,"distances_sum":3011.172689790775}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9733459249084253,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.890625,"distances_sum":3011.172689790775}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9733459249084253,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.890625,"distances_sum":3011.172689790775}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.212890625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.212890625,"f1":null,"seconds":2.602115273475647e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":4.7421875,"distances_sum":621.5456463694595}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.52734375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.52734375,"f1":0.6699793262293268,"seconds":3.7476420402526855e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":6.625,"distances_sum":1356.95950430426}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.52734375,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.52734375,"f1":0.6699793262293268,"seconds":3.7476420402526855e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":6.625,"distances_sum":1356.95950430426}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7138671875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7138671875,"f1":0.8199701340326349,"seconds":4.677101969718933e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.671875,"distances_sum":2031.8775203872415}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7333984375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7333984375,"f1":0.8363334582084592,"seconds":5.012378096580505e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.8203125,"distances_sum":2099.392990264003}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6416015625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6416015625,"f1":0.7637789294039303,"seconds":4.522502422332764e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.2890625,"distances_sum":1715.955895997511}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6396484375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6396484375,"f1":0.765916375291376,"seconds":4.20399010181427e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.34375,"distances_sum":1686.2724938386584}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.7942685786435794,"seconds":4.818663001060486e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.5703125,"distances_sum":1825.9665631800538}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7333984375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7333984375,"f1":0.8363334582084592,"seconds":5.012378096580505e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.8203125,"distances_sum":2099.392990264003}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9232657967032974,"seconds":5.543231964111328e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.6328125,"distances_sum":2682.186186909909}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8918675074925082,"seconds":5.321577191352844e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.46875,"distances_sum":2418.665462644333}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9470467032967038,"seconds":5.327165126800537e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.8125,"distances_sum":2816.609289309637}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9422847985347992,"seconds":5.491077899932861e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.7578125,"distances_sum":2769.5238250578136}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9072265625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9470467032967038,"seconds":5.327165126800537e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.8125,"distances_sum":2816.609289309637}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9072265625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9470467032967038,"seconds":5.327165126800537e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.8125,"distances_sum":2816.609289309637}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.681640625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.681640625,"f1":0.7994673729048738,"seconds":4.231929779052734e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.078125,"distances_sum":1749.4763538190805}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8596585705960713,"seconds":4.939734935760498e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.3984375,"distances_sum":2108.2058631365426}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.8596585705960713,"seconds":4.939734935760498e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.3984375,"distances_sum":2108.2058631365426}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.933344780219781,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9140625,"distances_sum":2672.987383813272}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8890120296370306,"seconds":5.336478352546692e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.609375,"distances_sum":2356.7118593666137}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9527014652014656,"seconds":5.749985575675964e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8515625,"distances_sum":2893.600194057213}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9325778388278395,"seconds":5.433335900306702e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8671875,"distances_sum":2686.96624231353}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9509729853479858,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.828125,"distances_sum":2901.2721712957436}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9527014652014656,"seconds":5.749985575675964e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8515625,"distances_sum":2893.600194057213}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.975446428571429,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9375,"distances_sum":3057.8160739282516}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96875, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.96875,"f1":0.9827953296703297,"seconds":5.6996941566467285e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.984375,"distances_sum":3116.559170810663}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9790006868131871,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":9.0,"distances_sum":3067.8077847597137}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9622424450549455,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.921875,"distances_sum":2947.4181263136797}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9755780677655681,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9296875,"distances_sum":3067.9722821536843}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9749656593406596,"seconds":5.947425961494446e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9453125,"distances_sum":3064.278788676539}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9609775641025643,"seconds":5.68293035030365e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9609375,"distances_sum":2926.9013494602486}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96875,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.96875,"f1":0.9827953296703297,"seconds":5.6996941566467285e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.984375,"distances_sum":3116.559170810663}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96875,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.96875,"f1":0.9827953296703297,"seconds":5.6996941566467285e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.984375,"distances_sum":3116.559170810663}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4609375, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.4609375,"f1":null,"seconds":3.518536686897278e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":6.3671875,"distances_sum":1080.2945839103666}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2822265625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2822265625,"f1":null,"seconds":3.170222043991089e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":6.75,"distances_sum":674.8950614100287}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4609375,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.4609375,"f1":null,"seconds":3.518536686897278e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":6.3671875,"distances_sum":1080.2945839103666}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.591796875, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.591796875,"f1":0.7292970917970925,"seconds":4.032626748085022e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.1640625,"distances_sum":1429.142346573405}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8972386988011996,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.625,"distances_sum":2402.420465624416}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7431640625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7431640625,"f1":0.8450294497169506,"seconds":4.945322871208191e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.2734375,"distances_sum":1997.2740437585715}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8251953125,"state":{"ssize":7,"bsize":6},"perf":{"precision":1.0,"recall":0.8251953125,"f1":0.8972386988011996,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.625,"distances_sum":2402.420465624416}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":11,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9567567848817854,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8828125,"distances_sum":2882.722079300739}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":11,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9576350732600738,"seconds":5.453824996948242e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9140625,"distances_sum":2876.9167657790217}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9082506035631043,"seconds":5.211681127548218e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.6875,"distances_sum":2420.38103194189}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.972750686813187,"seconds":5.619600415229797e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9375,"distances_sum":2995.9908122800216}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.972750686813187,"seconds":5.619600415229797e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9375,"distances_sum":2995.9908122800216}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.972750686813187,"seconds":5.619600415229797e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9375,"distances_sum":2995.9908122800216}}, n: 9
mean(cfft.distances) = 0.33289770680685127
mean(cdnet.distances) = 0.40363056089216504
mean(crand.distances) = 0.33772239898929174
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8711111111111111
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8911111111111111
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.9177777777777778
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.9022222222222221
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9177777777777778
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9044444444444445
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8711111111111111
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9222222222222222
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8733333333333334
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9311111111111111
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9288888888888889
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9044444444444445
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9199999999999999
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9377777777777778
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8444444444444444
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9155555555555556
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8666666666666666
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8377777777777778
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9111111111111111
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9177777777777778
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.88
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8955555555555555
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8955555555555555
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9022222222222221
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8288888888888889
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8911111111111111
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8733333333333334
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.9333333333333333
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.6191535857319832] ***
*** center 1: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 7]]
** centroid: 9, normalized-entropy: 0.8812908992306927, [(2, 3), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 15 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.396363573011106] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.396363573011106, 0.32066003328843695] ***
*** starting iteration: 2; err: [Inf, 0.396363573011106, 0.32066003328843695] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.396363573011106, 0.32066003328843695, 0.3032431088069135] ***
*** starting iteration: 3; err: [Inf, 0.396363573011106, 0.32066003328843695, 0.3032431088069135] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.396363573011106, 0.32066003328843695, 0.3032431088069135, 0.30153631962354743] ***
*** starting iteration: 4; err: [Inf, 0.396363573011106, 0.32066003328843695, 0.3032431088069135, 0.30153631962354743] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.396363573011106, 0.32066003328843695, 0.3032431088069135, 0.30153631962354743, 0.3007453144066506] ***
*** finished computation of 3 references, err: [Inf, 0.396363573011106, 0.32066003328843695, 0.3032431088069135, 0.30153631962354743, 0.3007453144066506] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [242, 14, 0]]
** centroid: 1, normalized-entropy: 0.3059848737138347, [(1, 242), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [161, 31, 0]]
** centroid: 2, normalized-entropy: 0.6377869642709142, [(1, 161), (2, 31)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 199, 19]]
** centroid: 3, normalized-entropy: 0.4269048649438336, [(2, 199), (3, 19)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2271345514683864] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2271345514683864, 0.19027016787613565] ***
*** finished computation of 7 references, err: [Inf, 0.2271345514683864, 0.19027016787613565] ***
*** center 1: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [64, 6, 0]]
** centroid: 2, normalized-entropy: 0.4220005168831531, [(1, 64), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 67, 18]]
** centroid: 3, normalized-entropy: 0.7448423974714387, [(2, 67), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [121, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [50, 49, 0]]
** centroid: 5, normalized-entropy: 0.999926399368686, [(1, 50), (2, 49)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [57, 64, 0]]
** centroid: 6, normalized-entropy: 0.9975844702713692, [(1, 57), (2, 64)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 58, 1]]
** centroid: 7, normalized-entropy: 0.12394986771100755, [(2, 58), (3, 1)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4014588110567792] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4014588110567792, 0.29952403047084364] ***
*** starting iteration: 2; err: [Inf, 0.4014588110567792, 0.29952403047084364] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4014588110567792, 0.29952403047084364, 0.2967597285210193] ***
*** starting iteration: 3; err: [Inf, 0.4014588110567792, 0.29952403047084364, 0.2967597285210193] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4014588110567792, 0.29952403047084364, 0.2967597285210193, 0.29681127158173737] ***
*** finished computation of 3 references, err: [Inf, 0.4014588110567792, 0.29952403047084364, 0.2967597285210193, 0.29681127158173737] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [127, 76, 0]]
** centroid: 1, normalized-entropy: 0.9539790391468632, [(1, 127), (2, 76)]
*** center 2: selecting labels [1] (freq >= 2) [from [218, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [61, 165, 20]]
** centroid: 3, normalized-entropy: 0.7442967081606046, [(1, 61), (2, 165), (3, 20)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.35445502887422714] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35445502887422714, 0.3051987219897882] ***
*** starting iteration: 2; err: [Inf, 0.35445502887422714, 0.3051987219897882] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35445502887422714, 0.3051987219897882, 0.29504327366555827] ***
*** starting iteration: 3; err: [Inf, 0.35445502887422714, 0.3051987219897882, 0.29504327366555827] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35445502887422714, 0.3051987219897882, 0.29504327366555827, 0.293229216357869] ***
*** starting iteration: 4; err: [Inf, 0.35445502887422714, 0.3051987219897882, 0.29504327366555827, 0.293229216357869] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35445502887422714, 0.3051987219897882, 0.29504327366555827, 0.293229216357869, 0.2927045420934816] ***
*** finished computation of 3 references, err: [Inf, 0.35445502887422714, 0.3051987219897882, 0.29504327366555827, 0.293229216357869, 0.2927045420934816] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [1, 190, 21]]
** centroid: 1, normalized-entropy: 0.46749145666342173, [(2, 190), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [154, 47, 0]]
** centroid: 2, normalized-entropy: 0.7846297842343328, [(1, 154), (2, 47)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [240, 14, 0]]
** centroid: 3, normalized-entropy: 0.30775275033574495, [(1, 240), (2, 14)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.40330457998657815] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40330457998657815, 0.31406221273928525] ***
*** starting iteration: 2; err: [Inf, 0.40330457998657815, 0.31406221273928525] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40330457998657815, 0.31406221273928525, 0.3025619404309348] ***
*** starting iteration: 3; err: [Inf, 0.40330457998657815, 0.31406221273928525, 0.3025619404309348] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40330457998657815, 0.31406221273928525, 0.3025619404309348, 0.2986707640741882] ***
*** starting iteration: 4; err: [Inf, 0.40330457998657815, 0.31406221273928525, 0.3025619404309348, 0.2986707640741882] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40330457998657815, 0.31406221273928525, 0.3025619404309348, 0.2986707640741882, 0.2980743193168294] ***
*** finished computation of 3 references, err: [Inf, 0.40330457998657815, 0.31406221273928525, 0.3025619404309348, 0.2986707640741882, 0.2980743193168294] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [145, 66, 0]]
** centroid: 1, normalized-entropy: 0.896374876243567, [(1, 145), (2, 66)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [4, 176, 19]]
** centroid: 2, normalized-entropy: 0.3744923559375946, [(1, 4), (2, 176), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [254, 2, 0]]
** centroid: 3, normalized-entropy: 0.06591441234324168, [(1, 254), (2, 2)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31741431655119295] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31741431655119295, 0.2981558555117187] ***
*** starting iteration: 2; err: [Inf, 0.31741431655119295, 0.2981558555117187] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31741431655119295, 0.2981558555117187, 0.29704668518362465] ***
*** starting iteration: 3; err: [Inf, 0.31741431655119295, 0.2981558555117187, 0.29704668518362465] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31741431655119295, 0.2981558555117187, 0.29704668518362465, 0.2966187628770786] ***
*** finished computation of 3 references, err: [Inf, 0.31741431655119295, 0.2981558555117187, 0.29704668518362465, 0.2966187628770786] ***
*** center 1: selecting labels [1] (freq >= 1) [from [233, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [20, 183, 20]]
** centroid: 2, normalized-entropy: 0.5413843649699155, [(1, 20), (2, 183), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [153, 58, 0]]
** centroid: 3, normalized-entropy: 0.8483824225964037, [(1, 153), (2, 58)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39361399974858297] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39361399974858297, 0.2981073048099808] ***
*** starting iteration: 2; err: [Inf, 0.39361399974858297, 0.2981073048099808] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39361399974858297, 0.2981073048099808, 0.2940108949553104] ***
*** starting iteration: 3; err: [Inf, 0.39361399974858297, 0.2981073048099808, 0.2940108949553104] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39361399974858297, 0.2981073048099808, 0.2940108949553104, 0.29280735577723344] ***
*** starting iteration: 4; err: [Inf, 0.39361399974858297, 0.2981073048099808, 0.2940108949553104, 0.29280735577723344] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39361399974858297, 0.2981073048099808, 0.2940108949553104, 0.29280735577723344, 0.292598278989186] ***
*** finished computation of 3 references, err: [Inf, 0.39361399974858297, 0.2981073048099808, 0.2940108949553104, 0.29280735577723344, 0.292598278989186] ***
*** center 1: selecting labels [1] (freq >= 1) [from [208, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [64, 165, 21]]
** centroid: 2, normalized-entropy: 0.7565207121309577, [(1, 64), (2, 165), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [123, 86, 0]]
** centroid: 3, normalized-entropy: 0.9772727537980745, [(1, 123), (2, 86)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2951959877081954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2951959877081954, 0.18649154619066263] ***
*** starting iteration: 2; err: [Inf, 0.2951959877081954, 0.18649154619066263] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2951959877081954, 0.18649154619066263, 0.17022138238987988] ***
*** starting iteration: 3; err: [Inf, 0.2951959877081954, 0.18649154619066263, 0.17022138238987988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2951959877081954, 0.18649154619066263, 0.17022138238987988, 0.1634107595634739] ***
*** starting iteration: 4; err: [Inf, 0.2951959877081954, 0.18649154619066263, 0.17022138238987988, 0.1634107595634739] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2951959877081954, 0.18649154619066263, 0.17022138238987988, 0.1634107595634739, 0.16093640303373472] ***
*** starting iteration: 5; err: [Inf, 0.2951959877081954, 0.18649154619066263, 0.17022138238987988, 0.1634107595634739, 0.16093640303373472] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2951959877081954, 0.18649154619066263, 0.17022138238987988, 0.1634107595634739, 0.16093640303373472, 0.15874737680941406] ***
*** starting iteration: 6; err: [Inf, 0.2951959877081954, 0.18649154619066263, 0.17022138238987988, 0.1634107595634739, 0.16093640303373472, 0.15874737680941406] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2951959877081954, 0.18649154619066263, 0.17022138238987988, 0.1634107595634739, 0.16093640303373472, 0.15874737680941406, 0.1563808088730629] ***
*** starting iteration: 7; err: [Inf, 0.2951959877081954, 0.18649154619066263, 0.17022138238987988, 0.1634107595634739, 0.16093640303373472, 0.15874737680941406, 0.1563808088730629] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2951959877081954, 0.18649154619066263, 0.17022138238987988, 0.1634107595634739, 0.16093640303373472, 0.15874737680941406, 0.1563808088730629, 0.15354563540138594] ***
*** starting iteration: 8; err: [Inf, 0.2951959877081954, 0.18649154619066263, 0.17022138238987988, 0.1634107595634739, 0.16093640303373472, 0.15874737680941406, 0.1563808088730629, 0.15354563540138594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2951959877081954, 0.18649154619066263, 0.17022138238987988, 0.1634107595634739, 0.16093640303373472, 0.15874737680941406, 0.1563808088730629, 0.15354563540138594, 0.15145629586920412] ***
*** starting iteration: 9; err: [Inf, 0.2951959877081954, 0.18649154619066263, 0.17022138238987988, 0.1634107595634739, 0.16093640303373472, 0.15874737680941406, 0.1563808088730629, 0.15354563540138594, 0.15145629586920412] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2951959877081954, 0.18649154619066263, 0.17022138238987988, 0.1634107595634739, 0.16093640303373472, 0.15874737680941406, 0.1563808088730629, 0.15354563540138594, 0.15145629586920412, 0.15020286328615146] ***
*** starting iteration: 10; err: [Inf, 0.2951959877081954, 0.18649154619066263, 0.17022138238987988, 0.1634107595634739, 0.16093640303373472, 0.15874737680941406, 0.1563808088730629, 0.15354563540138594, 0.15145629586920412, 0.15020286328615146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2951959877081954, 0.18649154619066263, 0.17022138238987988, 0.1634107595634739, 0.16093640303373472, 0.15874737680941406, 0.1563808088730629, 0.15354563540138594, 0.15145629586920412, 0.15020286328615146, 0.14948430870500234] ***
*** finished computation of 7 references, err: [Inf, 0.2951959877081954, 0.18649154619066263, 0.17022138238987988, 0.1634107595634739, 0.16093640303373472, 0.15874737680941406, 0.1563808088730629, 0.15354563540138594, 0.15145629586920412, 0.15020286328615146, 0.14948430870500234] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 88, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [140, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [76, 13, 0]]
** centroid: 3, normalized-entropy: 0.5999108763872215, [(1, 76), (2, 13)]
*** center 4: selecting labels [1] (freq >= 2) [from [87, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [76, 29, 0]]
** centroid: 5, normalized-entropy: 0.8502079949955315, [(1, 76), (2, 29)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 44, 19]]
** centroid: 6, normalized-entropy: 0.8832225588099292, [(2, 44), (3, 19)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [24, 69, 0]]
** centroid: 7, normalized-entropy: 0.8238116333123173, [(1, 24), (2, 69)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26701024101385246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26701024101385246, 0.1749332321987863] ***
*** starting iteration: 2; err: [Inf, 0.26701024101385246, 0.1749332321987863] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26701024101385246, 0.1749332321987863, 0.15820116940131787] ***
*** starting iteration: 3; err: [Inf, 0.26701024101385246, 0.1749332321987863, 0.15820116940131787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26701024101385246, 0.1749332321987863, 0.15820116940131787, 0.15393985166442] ***
*** starting iteration: 4; err: [Inf, 0.26701024101385246, 0.1749332321987863, 0.15820116940131787, 0.15393985166442] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26701024101385246, 0.1749332321987863, 0.15820116940131787, 0.15393985166442, 0.15229395733004075] ***
*** starting iteration: 5; err: [Inf, 0.26701024101385246, 0.1749332321987863, 0.15820116940131787, 0.15393985166442, 0.15229395733004075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26701024101385246, 0.1749332321987863, 0.15820116940131787, 0.15393985166442, 0.15229395733004075, 0.15124405597055937] ***
*** starting iteration: 6; err: [Inf, 0.26701024101385246, 0.1749332321987863, 0.15820116940131787, 0.15393985166442, 0.15229395733004075, 0.15124405597055937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26701024101385246, 0.1749332321987863, 0.15820116940131787, 0.15393985166442, 0.15229395733004075, 0.15124405597055937, 0.15031414630793516] ***
*** finished computation of 7 references, err: [Inf, 0.26701024101385246, 0.1749332321987863, 0.15820116940131787, 0.15393985166442, 0.15229395733004075, 0.15124405597055937, 0.15031414630793516] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [101, 13, 0]]
** centroid: 1, normalized-entropy: 0.5119682940439919, [(1, 101), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [45, 39, 0]]
** centroid: 2, normalized-entropy: 0.9963165195589622, [(1, 45), (2, 39)]
*** center 3: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 23, 0]]
** centroid: 4, normalized-entropy: 0.8514808683852091, [(1, 60), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [4, 74, 0]]
** centroid: 5, normalized-entropy: 0.29181825659888555, [(1, 4), (2, 74)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 92, 20]]
** centroid: 6, normalized-entropy: 0.6769418697808861, [(2, 92), (3, 20)]
*** center 7: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22421269275152406] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22421269275152406, 0.17489876961852166] ***
*** starting iteration: 2; err: [Inf, 0.22421269275152406, 0.17489876961852166] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22421269275152406, 0.17489876961852166, 0.16433281735607844] ***
*** starting iteration: 3; err: [Inf, 0.22421269275152406, 0.17489876961852166, 0.16433281735607844] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22421269275152406, 0.17489876961852166, 0.16433281735607844, 0.15811530030521004] ***
*** starting iteration: 4; err: [Inf, 0.22421269275152406, 0.17489876961852166, 0.16433281735607844, 0.15811530030521004] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22421269275152406, 0.17489876961852166, 0.16433281735607844, 0.15811530030521004, 0.1524207100807654] ***
*** starting iteration: 5; err: [Inf, 0.22421269275152406, 0.17489876961852166, 0.16433281735607844, 0.15811530030521004, 0.1524207100807654] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22421269275152406, 0.17489876961852166, 0.16433281735607844, 0.15811530030521004, 0.1524207100807654, 0.1490619294198769] ***
*** starting iteration: 6; err: [Inf, 0.22421269275152406, 0.17489876961852166, 0.16433281735607844, 0.15811530030521004, 0.1524207100807654, 0.1490619294198769] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22421269275152406, 0.17489876961852166, 0.16433281735607844, 0.15811530030521004, 0.1524207100807654, 0.1490619294198769, 0.14700746413940255] ***
*** starting iteration: 7; err: [Inf, 0.22421269275152406, 0.17489876961852166, 0.16433281735607844, 0.15811530030521004, 0.1524207100807654, 0.1490619294198769, 0.14700746413940255] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22421269275152406, 0.17489876961852166, 0.16433281735607844, 0.15811530030521004, 0.1524207100807654, 0.1490619294198769, 0.14700746413940255, 0.14520675276239953] ***
*** starting iteration: 8; err: [Inf, 0.22421269275152406, 0.17489876961852166, 0.16433281735607844, 0.15811530030521004, 0.1524207100807654, 0.1490619294198769, 0.14700746413940255, 0.14520675276239953] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22421269275152406, 0.17489876961852166, 0.16433281735607844, 0.15811530030521004, 0.1524207100807654, 0.1490619294198769, 0.14700746413940255, 0.14520675276239953, 0.14471186530766547] ***
*** finished computation of 7 references, err: [Inf, 0.22421269275152406, 0.17489876961852166, 0.16433281735607844, 0.15811530030521004, 0.1524207100807654, 0.1490619294198769, 0.14700746413940255, 0.14520675276239953, 0.14471186530766547] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [53, 44, 0]]
** centroid: 1, normalized-entropy: 0.9937811379408324, [(1, 53), (2, 44)]
*** center 2: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 101, 21]]
** centroid: 3, normalized-entropy: 0.6625567995605484, [(2, 101), (3, 21)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [44, 50, 0]]
** centroid: 4, normalized-entropy: 0.9970590569034106, [(1, 44), (2, 50)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 56, 0]]
** centroid: 5, normalized-entropy: 0.9967916319816367, [(1, 49), (2, 56)]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27976450497178257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27976450497178257, 0.18018897129124864] ***
*** starting iteration: 2; err: [Inf, 0.27976450497178257, 0.18018897129124864] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27976450497178257, 0.18018897129124864, 0.15952331957745705] ***
*** starting iteration: 3; err: [Inf, 0.27976450497178257, 0.18018897129124864, 0.15952331957745705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27976450497178257, 0.18018897129124864, 0.15952331957745705, 0.15266192692832592] ***
*** starting iteration: 4; err: [Inf, 0.27976450497178257, 0.18018897129124864, 0.15952331957745705, 0.15266192692832592] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27976450497178257, 0.18018897129124864, 0.15952331957745705, 0.15266192692832592, 0.14926980099747064] ***
*** starting iteration: 5; err: [Inf, 0.27976450497178257, 0.18018897129124864, 0.15952331957745705, 0.15266192692832592, 0.14926980099747064] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27976450497178257, 0.18018897129124864, 0.15952331957745705, 0.15266192692832592, 0.14926980099747064, 0.14724537125696335] ***
*** starting iteration: 6; err: [Inf, 0.27976450497178257, 0.18018897129124864, 0.15952331957745705, 0.15266192692832592, 0.14926980099747064, 0.14724537125696335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27976450497178257, 0.18018897129124864, 0.15952331957745705, 0.15266192692832592, 0.14926980099747064, 0.14724537125696335, 0.14663497152229263] ***
*** finished computation of 7 references, err: [Inf, 0.27976450497178257, 0.18018897129124864, 0.15952331957745705, 0.15266192692832592, 0.14926980099747064, 0.14724537125696335, 0.14663497152229263] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [79, 17, 0]]
** centroid: 1, normalized-entropy: 0.673654715229001, [(1, 79), (2, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [44, 62, 0]]
** centroid: 3, normalized-entropy: 0.9790981671667148, [(1, 44), (2, 62)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [78, 7, 0]]
** centroid: 4, normalized-entropy: 0.4104161417181887, [(1, 78), (2, 7)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 83, 19]]
** centroid: 6, normalized-entropy: 0.6936126404300949, [(2, 83), (3, 19)]
*** center 7: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2820948983111169] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2820948983111169, 0.17598115762268407] ***
*** starting iteration: 2; err: [Inf, 0.2820948983111169, 0.17598115762268407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2820948983111169, 0.17598115762268407, 0.15979908494002323] ***
*** starting iteration: 3; err: [Inf, 0.2820948983111169, 0.17598115762268407, 0.15979908494002323] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2820948983111169, 0.17598115762268407, 0.15979908494002323, 0.1542788468583346] ***
*** starting iteration: 4; err: [Inf, 0.2820948983111169, 0.17598115762268407, 0.15979908494002323, 0.1542788468583346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2820948983111169, 0.17598115762268407, 0.15979908494002323, 0.1542788468583346, 0.15184365301511657] ***
*** starting iteration: 5; err: [Inf, 0.2820948983111169, 0.17598115762268407, 0.15979908494002323, 0.1542788468583346, 0.15184365301511657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2820948983111169, 0.17598115762268407, 0.15979908494002323, 0.1542788468583346, 0.15184365301511657, 0.1506863611497577] ***
*** starting iteration: 6; err: [Inf, 0.2820948983111169, 0.17598115762268407, 0.15979908494002323, 0.1542788468583346, 0.15184365301511657, 0.1506863611497577] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2820948983111169, 0.17598115762268407, 0.15979908494002323, 0.1542788468583346, 0.15184365301511657, 0.1506863611497577, 0.14961490091048124] ***
*** starting iteration: 7; err: [Inf, 0.2820948983111169, 0.17598115762268407, 0.15979908494002323, 0.1542788468583346, 0.15184365301511657, 0.1506863611497577, 0.14961490091048124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2820948983111169, 0.17598115762268407, 0.15979908494002323, 0.1542788468583346, 0.15184365301511657, 0.1506863611497577, 0.14961490091048124, 0.14881110036497128] ***
*** finished computation of 7 references, err: [Inf, 0.2820948983111169, 0.17598115762268407, 0.15979908494002323, 0.1542788468583346, 0.15184365301511657, 0.1506863611497577, 0.14961490091048124, 0.14881110036497128] ***
*** center 1: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [104, 8, 0]]
** centroid: 2, normalized-entropy: 0.3712323266408756, [(1, 104), (2, 8)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 96, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [101, 7, 0]]
** centroid: 4, normalized-entropy: 0.34626857427148255, [(1, 101), (2, 7)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [58, 9, 0]]
** centroid: 5, normalized-entropy: 0.569190343735683, [(1, 58), (2, 9)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [56, 51, 0]]
** centroid: 6, normalized-entropy: 0.9984242941042116, [(1, 56), (2, 51)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 70, 20]]
** centroid: 7, normalized-entropy: 0.7642045065086204, [(2, 70), (3, 20)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2690299808269721] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2690299808269721, 0.18454562105389236] ***
*** starting iteration: 2; err: [Inf, 0.2690299808269721, 0.18454562105389236] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2690299808269721, 0.18454562105389236, 0.164808280344332] ***
*** starting iteration: 3; err: [Inf, 0.2690299808269721, 0.18454562105389236, 0.164808280344332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2690299808269721, 0.18454562105389236, 0.164808280344332, 0.15850289899878892] ***
*** starting iteration: 4; err: [Inf, 0.2690299808269721, 0.18454562105389236, 0.164808280344332, 0.15850289899878892] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2690299808269721, 0.18454562105389236, 0.164808280344332, 0.15850289899878892, 0.15421351370215974] ***
*** starting iteration: 5; err: [Inf, 0.2690299808269721, 0.18454562105389236, 0.164808280344332, 0.15850289899878892, 0.15421351370215974] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2690299808269721, 0.18454562105389236, 0.164808280344332, 0.15850289899878892, 0.15421351370215974, 0.15086375929085702] ***
*** starting iteration: 6; err: [Inf, 0.2690299808269721, 0.18454562105389236, 0.164808280344332, 0.15850289899878892, 0.15421351370215974, 0.15086375929085702] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2690299808269721, 0.18454562105389236, 0.164808280344332, 0.15850289899878892, 0.15421351370215974, 0.15086375929085702, 0.14836049857626166] ***
*** starting iteration: 7; err: [Inf, 0.2690299808269721, 0.18454562105389236, 0.164808280344332, 0.15850289899878892, 0.15421351370215974, 0.15086375929085702, 0.14836049857626166] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2690299808269721, 0.18454562105389236, 0.164808280344332, 0.15850289899878892, 0.15421351370215974, 0.15086375929085702, 0.14836049857626166, 0.1469781172169984] ***
*** starting iteration: 8; err: [Inf, 0.2690299808269721, 0.18454562105389236, 0.164808280344332, 0.15850289899878892, 0.15421351370215974, 0.15086375929085702, 0.14836049857626166, 0.1469781172169984] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2690299808269721, 0.18454562105389236, 0.164808280344332, 0.15850289899878892, 0.15421351370215974, 0.15086375929085702, 0.14836049857626166, 0.1469781172169984, 0.14594354725657854] ***
*** starting iteration: 9; err: [Inf, 0.2690299808269721, 0.18454562105389236, 0.164808280344332, 0.15850289899878892, 0.15421351370215974, 0.15086375929085702, 0.14836049857626166, 0.1469781172169984, 0.14594354725657854] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2690299808269721, 0.18454562105389236, 0.164808280344332, 0.15850289899878892, 0.15421351370215974, 0.15086375929085702, 0.14836049857626166, 0.1469781172169984, 0.14594354725657854, 0.14571643924840477] ***
*** finished computation of 7 references, err: [Inf, 0.2690299808269721, 0.18454562105389236, 0.164808280344332, 0.15850289899878892, 0.15421351370215974, 0.15086375929085702, 0.14836049857626166, 0.1469781172169984, 0.14594354725657854, 0.14571643924840477] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [48, 30, 0]]
** centroid: 1, normalized-entropy: 0.961236604722876, [(1, 48), (2, 30)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 89, 21]]
** centroid: 2, normalized-entropy: 0.7033693386668108, [(2, 89), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 49, 0]]
** centroid: 3, normalized-entropy: 0.998890376741155, [(1, 53), (2, 49)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [20, 80, 0]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(1, 20), (2, 80)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [108, 3, 0]]
** centroid: 5, normalized-entropy: 0.1792560669283214, [(1, 108), (2, 3)]
*** center 6: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3571100601445402] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3571100601445402, 0.23983327695098636] ***
*** starting iteration: 2; err: [Inf, 0.3571100601445402, 0.23983327695098636] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3571100601445402, 0.23983327695098636, 0.2343719146555631] ***
*** starting iteration: 3; err: [Inf, 0.3571100601445402, 0.23983327695098636, 0.2343719146555631] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3571100601445402, 0.23983327695098636, 0.2343719146555631, 0.2335439137527132] ***
*** finished computation of 3 references, err: [Inf, 0.3571100601445402, 0.23983327695098636, 0.2343719146555631, 0.2335439137527132] ***
*** center 1: selecting labels [1] (freq >= 1) [from [224, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [109, 99, 0]]
** centroid: 2, normalized-entropy: 0.998332041272985, [(1, 109), (2, 99)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [70, 145, 19]]
** centroid: 3, normalized-entropy: 0.7841272964315016, [(1, 70), (2, 145), (3, 19)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3012883240451989] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3012883240451989, 0.244577890639703] ***
*** starting iteration: 2; err: [Inf, 0.3012883240451989, 0.244577890639703] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3012883240451989, 0.244577890639703, 0.23554797671774383] ***
*** starting iteration: 3; err: [Inf, 0.3012883240451989, 0.244577890639703, 0.23554797671774383] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3012883240451989, 0.244577890639703, 0.23554797671774383, 0.23378959949291694] ***
*** finished computation of 3 references, err: [Inf, 0.3012883240451989, 0.244577890639703, 0.23554797671774383, 0.23378959949291694] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [235, 9, 0]]
** centroid: 1, normalized-entropy: 0.22782419225241188, [(1, 235), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [171, 49, 0]]
** centroid: 2, normalized-entropy: 0.765116248037688, [(1, 171), (2, 49)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 183, 20]]
** centroid: 3, normalized-entropy: 0.46429339352149623, [(2, 183), (3, 20)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29045561368184825] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29045561368184825, 0.24246866091376526] ***
*** starting iteration: 2; err: [Inf, 0.29045561368184825, 0.24246866091376526] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29045561368184825, 0.24246866091376526, 0.23443813150611775] ***
*** starting iteration: 3; err: [Inf, 0.29045561368184825, 0.24246866091376526, 0.23443813150611775] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29045561368184825, 0.24246866091376526, 0.23443813150611775, 0.2329735315964743] ***
*** finished computation of 3 references, err: [Inf, 0.29045561368184825, 0.24246866091376526, 0.23443813150611775, 0.2329735315964743] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [66, 174, 21]]
** centroid: 1, normalized-entropy: 0.7470658371401335, [(1, 66), (2, 174), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [125, 77, 0]]
** centroid: 2, normalized-entropy: 0.9588768331663083, [(1, 125), (2, 77)]
*** center 3: selecting labels [1] (freq >= 1) [from [204, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29003500029467066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29003500029467066, 0.2189620470952567] ***
*** starting iteration: 2; err: [Inf, 0.29003500029467066, 0.2189620470952567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29003500029467066, 0.2189620470952567, 0.20639746873317896] ***
*** starting iteration: 3; err: [Inf, 0.29003500029467066, 0.2189620470952567, 0.20639746873317896] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29003500029467066, 0.2189620470952567, 0.20639746873317896, 0.2010072713903803] ***
*** finished computation of 7 references, err: [Inf, 0.29003500029467066, 0.2189620470952567, 0.20639746873317896, 0.2010072713903803] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [58, 41, 0]]
** centroid: 1, normalized-entropy: 0.9786239947589973, [(1, 58), (2, 41)]
*** center 2: selecting labels [1] (freq >= 2) [from [157, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 68, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [112, 1, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 48, 19]]
** centroid: 5, normalized-entropy: 0.8602858652332406, [(2, 48), (3, 19)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 69, 0]]
** centroid: 6, normalized-entropy: 0.4434581453896789, [(1, 7), (2, 69)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [69, 17, 0]]
** centroid: 7, normalized-entropy: 0.7172524777375696, [(1, 69), (2, 17)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.38164304211355937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38164304211355937, 0.23483190540506363] ***
*** starting iteration: 2; err: [Inf, 0.38164304211355937, 0.23483190540506363] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38164304211355937, 0.23483190540506363, 0.2096909168528915] ***
*** starting iteration: 3; err: [Inf, 0.38164304211355937, 0.23483190540506363, 0.2096909168528915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38164304211355937, 0.23483190540506363, 0.2096909168528915, 0.2009885408782932] ***
*** finished computation of 7 references, err: [Inf, 0.38164304211355937, 0.23483190540506363, 0.2096909168528915, 0.2009885408782932] ***
*** center 1: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 83, 20]]
** centroid: 2, normalized-entropy: 0.7101234912653349, [(2, 83), (3, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [38, 40, 0]]
** centroid: 4, normalized-entropy: 0.9995256892936492, [(1, 38), (2, 40)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [91, 36, 0]]
** centroid: 5, normalized-entropy: 0.8601286843311847, [(1, 91), (2, 36)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [113, 8, 0]]
** centroid: 6, normalized-entropy: 0.3512580905562789, [(1, 113), (2, 8)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 74, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29979239764024335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29979239764024335, 0.2199762345374055] ***
*** starting iteration: 2; err: [Inf, 0.29979239764024335, 0.2199762345374055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29979239764024335, 0.2199762345374055, 0.20159399107299644] ***
*** starting iteration: 3; err: [Inf, 0.29979239764024335, 0.2199762345374055, 0.20159399107299644] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29979239764024335, 0.2199762345374055, 0.20159399107299644, 0.1930333578531844] ***
*** finished computation of 7 references, err: [Inf, 0.29979239764024335, 0.2199762345374055, 0.20159399107299644, 0.1930333578531844] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [58, 36, 0]]
** centroid: 1, normalized-entropy: 0.9601186626422924, [(1, 58), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [120, 12, 0]]
** centroid: 2, normalized-entropy: 0.43949698692151346, [(1, 120), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [1, 81, 20]]
** centroid: 3, normalized-entropy: 0.7179499765002912, [(2, 81), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 111, 1]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [74, 11, 0]]
** centroid: 6, normalized-entropy: 0.5558227377664954, [(1, 74), (2, 11)]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2340415467273209] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2340415467273209, 0.17749667247231524] ***
*** finished computation of 7 references, err: [Inf, 0.2340415467273209, 0.17749667247231524] ***
*** center 1: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [5, 164, 19]]
** centroid: 2, normalized-entropy: 0.407097060565303, [(1, 5), (2, 164), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [17, 51, 0]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(1, 17), (2, 51)]
*** center 4: selecting labels [1] (freq >= 1) [from [137, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [64, 29, 0]]
** centroid: 5, normalized-entropy: 0.8952722642402938, [(1, 64), (2, 29)]
*** center 6: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1901420697226361] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1901420697226361, 0.15790243326606734] ***
*** finished computation of 7 references, err: [Inf, 0.1901420697226361, 0.15790243326606734] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [50, 43, 0]]
** centroid: 1, normalized-entropy: 0.9959094138937685, [(1, 50), (2, 43)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 87, 20]]
** centroid: 2, normalized-entropy: 0.6949749673676271, [(2, 87), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [10, 41, 0]]
** centroid: 3, normalized-entropy: 0.7140152804378671, [(1, 10), (2, 41)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [138, 2, 0]]
** centroid: 4, normalized-entropy: 0.10802319526362848, [(1, 138), (2, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [19, 68, 0]]
** centroid: 6, normalized-entropy: 0.7572182549240017, [(1, 19), (2, 68)]
*** center 7: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.208272032812517] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.208272032812517, 0.16015433831310746] ***
*** finished computation of 7 references, err: [Inf, 0.208272032812517, 0.16015433831310746] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 83, 21]]
** centroid: 1, normalized-entropy: 0.7257576154473545, [(2, 83), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [42, 33, 0]]
** centroid: 2, normalized-entropy: 0.9895875212220558, [(1, 42), (2, 33)]
*** center 3: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [108, 32, 0]]
** centroid: 4, normalized-entropy: 0.775512658133148, [(1, 108), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [10, 103, 0]]
** centroid: 5, normalized-entropy: 0.43142820800151405, [(1, 10), (2, 103)]
*** center 6: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28886755875818004] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28886755875818004, 0.2358836531401374] ***
*** finished computation of 7 references, err: [Inf, 0.28886755875818004, 0.2358836531401374] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [12, 58, 0]]
** centroid: 1, normalized-entropy: 0.6609623351442084, [(1, 12), (2, 58)]
*** center 2: selecting labels [1] (freq >= 1) [from [214, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [30, 60, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 30), (2, 60)]
*** center 4: selecting labels [1] (freq >= 1) [from [142, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [5, 67, 0]]
** centroid: 5, normalized-entropy: 0.3638469981769295, [(1, 5), (2, 67)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 48, 9]]
** centroid: 6, normalized-entropy: 0.6292492238560344, [(2, 48), (3, 9)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 11, 10]]
** centroid: 7, normalized-entropy: 0.998363672593813, [(2, 11), (3, 10)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.37905253381698745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37905253381698745, 0.2346698904788398] ***
*** finished computation of 7 references, err: [Inf, 0.37905253381698745, 0.2346698904788398] ***
*** center 1: selecting labels [1] (freq >= 1) [from [130, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [138, 29, 0]]
** centroid: 2, normalized-entropy: 0.6659927721501786, [(1, 138), (2, 29)]
*** center 3: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [58, 5, 0]]
** centroid: 4, normalized-entropy: 0.39993804743902767, [(1, 58), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 64, 0]]
** centroid: 5, normalized-entropy: 0.26377743669413856, [(1, 3), (2, 64)]
*** center 6: selecting labels [1, 2, 3] (freq >= 1) [from [34, 109, 20]]
** centroid: 6, normalized-entropy: 0.7768498679809657, [(1, 34), (2, 109), (3, 20)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 34, 0]]
** centroid: 7, normalized-entropy: 0.40597703847557104, [(1, 3), (2, 34)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3223218822337246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3223218822337246, 0.242076574192233] ***
*** finished computation of 7 references, err: [Inf, 0.3223218822337246, 0.242076574192233] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [35, 173, 21]]
** centroid: 1, normalized-entropy: 0.653586503348202, [(1, 35), (2, 173), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [123, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [46, 5, 0]]
** centroid: 6, normalized-entropy: 0.462749058578174, [(1, 46), (2, 5)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [62, 73, 0]]
** centroid: 7, normalized-entropy: 0.9952054930343307, [(1, 62), (2, 73)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3887083404756909] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3887083404756909, 0.3089756674466056] ***
*** finished computation of 3 references, err: [Inf, 0.3887083404756909, 0.3089756674466056] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [286, 31, 0]]
** centroid: 1, normalized-entropy: 0.4619564183393678, [(1, 286), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [117, 48, 0]]
** centroid: 2, normalized-entropy: 0.8698926856041562, [(1, 117), (2, 48)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 165, 19]]
** centroid: 3, normalized-entropy: 0.47924789026360143, [(2, 165), (3, 19)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.40563816605121833] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40563816605121833, 0.30088187747731293] ***
*** finished computation of 3 references, err: [Inf, 0.40563816605121833, 0.30088187747731293] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [264, 21, 0]]
** centroid: 1, normalized-entropy: 0.3795243778626806, [(1, 264), (2, 21)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 176, 20]]
** centroid: 2, normalized-entropy: 0.47543164626872053, [(2, 176), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [142, 44, 0]]
** centroid: 3, normalized-entropy: 0.7892712724536985, [(1, 142), (2, 44)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3718340690547916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3718340690547916, 0.3065042234901367] ***
*** finished computation of 3 references, err: [Inf, 0.3718340690547916, 0.3065042234901367] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [274, 52, 0]]
** centroid: 1, normalized-entropy: 0.6331341171926692, [(1, 274), (2, 52)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 150, 21]]
** centroid: 2, normalized-entropy: 0.5373760853377334, [(2, 150), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [121, 49, 0]]
** centroid: 3, normalized-entropy: 0.8664307357149303, [(1, 121), (2, 49)]
finished with 5 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.38640010636579525] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38640010636579525, 0.2985682808318631] ***
*** finished computation of 3 references, err: [Inf, 0.38640010636579525, 0.2985682808318631] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [93, 168, 19]]
** centroid: 1, normalized-entropy: 0.7783814744875895, [(1, 93), (2, 168), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [198, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [112, 76, 0]]
** centroid: 3, normalized-entropy: 0.9733854352299557, [(1, 112), (2, 76)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4253714352586436] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4253714352586436, 0.30455643897582924] ***
*** finished computation of 3 references, err: [Inf, 0.4253714352586436, 0.30455643897582924] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [265, 48, 0]]
** centroid: 1, normalized-entropy: 0.6181719918558952, [(1, 265), (2, 48)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [141, 49, 0]]
** centroid: 2, normalized-entropy: 0.8235528554368685, [(1, 141), (2, 49)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 144, 20]]
** centroid: 3, normalized-entropy: 0.5349436990971067, [(2, 144), (3, 20)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.38071573368445416] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38071573368445416, 0.3039556495898377] ***
*** finished computation of 3 references, err: [Inf, 0.38071573368445416, 0.3039556495898377] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [256, 46, 0]]
** centroid: 1, normalized-entropy: 0.6156105340978519, [(1, 256), (2, 46)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 162, 21]]
** centroid: 2, normalized-entropy: 0.5140912790181233, [(2, 162), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [139, 43, 0]]
** centroid: 3, normalized-entropy: 0.7887715986560714, [(1, 139), (2, 43)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4071173621117845] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4071173621117845, 0.23363686799611505] ***
*** starting iteration: 2; err: [Inf, 0.4071173621117845, 0.23363686799611505] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4071173621117845, 0.23363686799611505, 0.23261880379886152] ***
*** starting iteration: 3; err: [Inf, 0.4071173621117845, 0.23363686799611505, 0.23261880379886152] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4071173621117845, 0.23363686799611505, 0.23261880379886152, 0.23217680615683398] ***
*** finished computation of 3 references, err: [Inf, 0.4071173621117845, 0.23363686799611505, 0.23261880379886152, 0.23217680615683398] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [76, 178, 19]]
** centroid: 1, normalized-entropy: 0.7466904220615684, [(1, 76), (2, 178), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [214, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [113, 66, 0]]
** centroid: 3, normalized-entropy: 0.9496803882666356, [(1, 113), (2, 66)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.38067120252207837] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38067120252207837, 0.23604861600341964] ***
*** starting iteration: 2; err: [Inf, 0.38067120252207837, 0.23604861600341964] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38067120252207837, 0.23604861600341964, 0.23469517920361735] ***
*** starting iteration: 3; err: [Inf, 0.38067120252207837, 0.23604861600341964, 0.23469517920361735] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38067120252207837, 0.23604861600341964, 0.23469517920361735, 0.23451559968129349] ***
*** finished computation of 3 references, err: [Inf, 0.38067120252207837, 0.23604861600341964, 0.23469517920361735, 0.23451559968129349] ***
*** center 1: selecting labels [1] (freq >= 2) [from [243, 1, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [13, 184, 20]]
** centroid: 2, normalized-entropy: 0.4808351684522733, [(1, 13), (2, 184), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [150, 56, 0]]
** centroid: 3, normalized-entropy: 0.844099171796772, [(1, 150), (2, 56)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31923096308224963] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31923096308224963, 0.23667940049749175] ***
*** starting iteration: 2; err: [Inf, 0.31923096308224963, 0.23667940049749175] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31923096308224963, 0.23667940049749175, 0.23137017111454544] ***
*** starting iteration: 3; err: [Inf, 0.31923096308224963, 0.23667940049749175, 0.23137017111454544] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31923096308224963, 0.23667940049749175, 0.23137017111454544, 0.23062497397222886] ***
*** finished computation of 3 references, err: [Inf, 0.31923096308224963, 0.23667940049749175, 0.23137017111454544, 0.23062497397222886] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [263, 16, 0]]
** centroid: 1, normalized-entropy: 0.31682491690490266, [(1, 263), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [132, 53, 0]]
** centroid: 2, normalized-entropy: 0.8641392559370398, [(1, 132), (2, 53)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 182, 21]]
** centroid: 3, normalized-entropy: 0.47983202361612853, [(2, 182), (3, 21)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.23037427374911584] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23037427374911584, 0.1903358550876312] ***
*** finished computation of 7 references, err: [Inf, 0.23037427374911584, 0.1903358550876312] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 98, 1]]
** centroid: 1, normalized-entropy: 0.08146202691505994, [(2, 98), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [44, 21, 0]]
** centroid: 3, normalized-entropy: 0.9076961653608385, [(1, 44), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [102, 12, 0]]
** centroid: 4, normalized-entropy: 0.48546076074591343, [(1, 102), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [89, 31, 0]]
** centroid: 5, normalized-entropy: 0.8242209207918308, [(1, 89), (2, 31)]
*** center 6: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 79, 19]]
** centroid: 7, normalized-entropy: 0.7095128863456239, [(2, 79), (3, 19)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.245334482303579] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.245334482303579, 0.1958389483501149] ***
*** finished computation of 7 references, err: [Inf, 0.245334482303579, 0.1958389483501149] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [45, 75, 0]]
** centroid: 1, normalized-entropy: 0.954434002924965, [(1, 45), (2, 75)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [52, 6, 0]]
** centroid: 2, normalized-entropy: 0.47983202361612853, [(1, 52), (2, 6)]
*** center 3: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 70, 21]]
** centroid: 4, normalized-entropy: 0.7793498372920851, [(2, 70), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [73, 13, 0]]
** centroid: 5, normalized-entropy: 0.6127425554686624, [(1, 73), (2, 13)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [26, 87, 0]]
** centroid: 6, normalized-entropy: 0.7781655393133492, [(1, 26), (2, 87)]
*** center 7: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20266155813689213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20266155813689213, 0.15074538942790022] ***
*** starting iteration: 2; err: [Inf, 0.20266155813689213, 0.15074538942790022] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20266155813689213, 0.15074538942790022, 0.14691105375469132] ***
*** starting iteration: 3; err: [Inf, 0.20266155813689213, 0.15074538942790022, 0.14691105375469132] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20266155813689213, 0.15074538942790022, 0.14691105375469132, 0.14608810015313617] ***
*** finished computation of 7 references, err: [Inf, 0.20266155813689213, 0.15074538942790022, 0.14691105375469132, 0.14608810015313617] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [95, 11, 0]]
** centroid: 1, normalized-entropy: 0.4808446942193282, [(1, 95), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [66, 20, 0]]
** centroid: 2, normalized-entropy: 0.7824441294066888, [(1, 66), (2, 20)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 77, 19]]
** centroid: 3, normalized-entropy: 0.7177418091697444, [(2, 77), (3, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [69, 48, 0]]
** centroid: 5, normalized-entropy: 0.9766349114440099, [(1, 69), (2, 48)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 88, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18894331107429904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18894331107429904, 0.15649811214190731] ***
*** starting iteration: 2; err: [Inf, 0.18894331107429904, 0.15649811214190731] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18894331107429904, 0.15649811214190731, 0.15247685353605375] ***
*** starting iteration: 3; err: [Inf, 0.18894331107429904, 0.15649811214190731, 0.15247685353605375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18894331107429904, 0.15649811214190731, 0.15247685353605375, 0.15176039481203238] ***
*** finished computation of 7 references, err: [Inf, 0.18894331107429904, 0.15649811214190731, 0.15247685353605375, 0.15176039481203238] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [126, 1, 0]]
** centroid: 1, normalized-entropy: 0.06634397526831168, [(1, 126), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [76, 5, 0]]
** centroid: 2, normalized-entropy: 0.33426813256179383, [(1, 76), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 63, 20]]
** centroid: 3, normalized-entropy: 0.7966394665488286, [(2, 63), (3, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [30, 85, 0]]
** centroid: 5, normalized-entropy: 0.828055725379504, [(1, 30), (2, 85)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [60, 4, 0]]
** centroid: 6, normalized-entropy: 0.3372900666170139, [(1, 60), (2, 4)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 83, 0]]
** centroid: 7, normalized-entropy: 0.09317131799548928, [(1, 1), (2, 83)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18579609359361823] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18579609359361823, 0.1496052646721857] ***
*** starting iteration: 2; err: [Inf, 0.18579609359361823, 0.1496052646721857] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18579609359361823, 0.1496052646721857, 0.14630409507876796] ***
*** starting iteration: 3; err: [Inf, 0.18579609359361823, 0.1496052646721857, 0.14630409507876796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18579609359361823, 0.1496052646721857, 0.14630409507876796, 0.14593917117670535] ***
*** finished computation of 7 references, err: [Inf, 0.18579609359361823, 0.1496052646721857, 0.14630409507876796, 0.14593917117670535] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [104, 1, 0]]
** centroid: 1, normalized-entropy: 0.07761951112637416, [(1, 104), (2, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 75, 21]]
** centroid: 2, normalized-entropy: 0.7578784625383954, [(2, 75), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [55, 31, 0]]
** centroid: 3, normalized-entropy: 0.9430685934712909, [(1, 55), (2, 31)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [47, 60, 0]]
** centroid: 4, normalized-entropy: 0.9893257549491837, [(1, 47), (2, 60)]
*** center 5: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [21, 84, 0]]
** centroid: 6, normalized-entropy: 0.7219280948873623, [(1, 21), (2, 84)]
*** center 7: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9439918960877044, 0.9289888691086295, 0.9279668890447333, 0.9239748730766695, 0.9089568610526695, 0.9019828211444979, 0.8970287652922383, 0.8749887612163061, 0.8659707611803421, 0.8639957322592053, 0.8609987232741725, 0.8569467671264078, 0.8350026673379967, 0.8339477201752651, 0.7969975963987941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.6, 2) => 0.9439918960877044
finished with 15
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9439918960877044, 0.9289888691086295, 0.9279668890447333, 0.9239748730766695, 0.9089568610526695, 0.9019828211444979, 0.8970287652922383, 0.8749887612163061, 0.8659707611803421, 0.8639957322592053, 0.8609987232741725, 0.8569467671264078, 0.8350026673379967, 0.8339477201752651, 0.7969975963987941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.6, 2) => 0.9439918960877044
finished with 15
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9439918960877044, 0.9289888691086295, 0.9279668890447333, 0.9239748730766695, 0.9089568610526695, 0.9019828211444979, 0.8970287652922383, 0.8749887612163061, 0.8659707611803421, 0.8639957322592053, 0.8609987232741725, 0.8569467671264078, 0.8350026673379967, 0.8339477201752651, 0.7969975963987941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.6, 2) => 0.9439918960877044
finished with 16
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.2007060503690607] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2007060503690607, 0.17140577248872366] ***
*** starting iteration: 2; err: [Inf, 0.2007060503690607, 0.17140577248872366] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2007060503690607, 0.17140577248872366, 0.1612683673271792] ***
*** starting iteration: 3; err: [Inf, 0.2007060503690607, 0.17140577248872366, 0.1612683673271792] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2007060503690607, 0.17140577248872366, 0.1612683673271792, 0.1562023025003259] ***
*** finished computation of 7 references, err: [Inf, 0.2007060503690607, 0.17140577248872366, 0.1612683673271792, 0.1562023025003259] ***
*** center 1: selecting labels [1] (freq >= 2) [from [163, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 7, 0]]
** centroid: 2, normalized-entropy: 0.44749925503686355, [(1, 68), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [27, 59, 0]]
** centroid: 3, normalized-entropy: 0.8976844934141643, [(1, 27), (2, 59)]
*** center 4: selecting labels [1] (freq >= 2) [from [114, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 62, 0]]
** centroid: 5, normalized-entropy: 0.9108783787500366, [(1, 30), (2, 62)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 60, 19]]
** centroid: 6, normalized-entropy: 0.7958812735955936, [(2, 60), (3, 19)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 55, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30049252240727287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30049252240727287, 0.1839061159217476] ***
*** starting iteration: 2; err: [Inf, 0.30049252240727287, 0.1839061159217476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30049252240727287, 0.1839061159217476, 0.16418396252189307] ***
*** starting iteration: 3; err: [Inf, 0.30049252240727287, 0.1839061159217476, 0.16418396252189307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30049252240727287, 0.1839061159217476, 0.16418396252189307, 0.15862714903040984] ***
*** finished computation of 7 references, err: [Inf, 0.30049252240727287, 0.1839061159217476, 0.16418396252189307, 0.15862714903040984] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [122, 29, 0]]
** centroid: 1, normalized-entropy: 0.7057464344153325, [(1, 122), (2, 29)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 73, 20]]
** centroid: 2, normalized-entropy: 0.7510324165275097, [(2, 73), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [24, 35, 0]]
** centroid: 3, normalized-entropy: 0.9747785474909672, [(1, 24), (2, 35)]
*** center 4: selecting labels [1] (freq >= 2) [from [156, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [26, 56, 0]]
** centroid: 5, normalized-entropy: 0.9011701959974223, [(1, 26), (2, 56)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 48, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21735545335689382] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21735545335689382, 0.16183605644156573] ***
*** starting iteration: 2; err: [Inf, 0.21735545335689382, 0.16183605644156573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21735545335689382, 0.16183605644156573, 0.15734962295291238] ***
*** starting iteration: 3; err: [Inf, 0.21735545335689382, 0.16183605644156573, 0.15734962295291238] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21735545335689382, 0.16183605644156573, 0.15734962295291238, 0.15238354578223276] ***
*** finished computation of 7 references, err: [Inf, 0.21735545335689382, 0.16183605644156573, 0.15734962295291238, 0.15238354578223276] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 120, 21]]
** centroid: 1, normalized-entropy: 0.607171654871303, [(2, 120), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [95, 3, 0]]
** centroid: 3, normalized-entropy: 0.19745300438456026, [(1, 95), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [15, 57, 0]]
** centroid: 4, normalized-entropy: 0.7382848661434506, [(1, 15), (2, 57)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 53, 0]]
** centroid: 5, normalized-entropy: 0.998890376741155, [(1, 49), (2, 53)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [90, 18, 0]]
** centroid: 6, normalized-entropy: 0.6500224216483541, [(1, 90), (2, 18)]
*** center 7: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9439918960877044, 0.9319768870667073, 0.9289888691086295, 0.9279668890447333, 0.9239748730766695, 0.9089568610526695, 0.9019828211444979, 0.8970287652922383, 0.8749887612163061, 0.8659707611803421, 0.8639957322592053, 0.8609987232741725, 0.8569467671264078, 0.8350026673379967, 0.8339477201752651, 0.7969975963987941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.6, 2) => 0.9439918960877044
finished with 16
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9439918960877044, 0.9319768870667073, 0.9289888691086295, 0.9279668890447333, 0.9239748730766695, 0.9089568610526695, 0.9019828211444979, 0.8970287652922383, 0.8749887612163061, 0.8659707611803421, 0.8639957322592053, 0.8609987232741725, 0.8569467671264078, 0.8350026673379967, 0.8339477201752651, 0.7969975963987941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.6, 2) => 0.9439918960877044
finished with 17
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.38154008798021544] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38154008798021544, 0.2334341994786003] ***
*** finished computation of 3 references, err: [Inf, 0.38154008798021544, 0.2334341994786003] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [94, 144, 19]]
** centroid: 1, normalized-entropy: 0.8055630916962356, [(1, 94), (2, 144), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [104, 100, 0]]
** centroid: 2, normalized-entropy: 0.9997226475394071, [(1, 104), (2, 100)]
*** center 3: selecting labels [1] (freq >= 2) [from [205, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3080576894486482] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3080576894486482, 0.2452921002902191] ***
*** finished computation of 3 references, err: [Inf, 0.3080576894486482, 0.2452921002902191] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [113, 199, 20]]
** centroid: 1, normalized-entropy: 0.7671991914305365, [(1, 113), (2, 199), (3, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [172, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [121, 42, 0]]
** centroid: 3, normalized-entropy: 0.8232080102621581, [(1, 121), (2, 42)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.311981874941171] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.311981874941171, 0.23814324419624333] ***
*** finished computation of 3 references, err: [Inf, 0.311981874941171, 0.23814324419624333] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [104, 179, 21]]
** centroid: 1, normalized-entropy: 0.785927907183634, [(1, 104), (2, 179), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [105, 72, 0]]
** centroid: 2, normalized-entropy: 0.9747785474909672, [(1, 105), (2, 72)]
*** center 3: selecting labels [1] (freq >= 2) [from [186, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 17)
[0.9439918960877044, 0.9319768870667073, 0.9289888691086295, 0.9279668890447333, 0.9239748730766695, 0.9089568610526695, 0.9039968111824398, 0.9019828211444979, 0.8970287652922383, 0.8749887612163061, 0.8659707611803421, 0.8639957322592053, 0.8609987232741725, 0.8569467671264078, 0.8350026673379967, 0.8339477201752651, 0.7969975963987941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.6, 2) => 0.9439918960877044
finished with 18
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.1856152034775765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1856152034775765, 0.1527681687060889] ***
*** finished computation of 7 references, err: [Inf, 0.1856152034775765, 0.1527681687060889] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [56, 59, 0]]
** centroid: 1, normalized-entropy: 0.9995090461828581, [(1, 56), (2, 59)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [56, 14, 0]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(1, 56), (2, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 96, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [114, 22, 0]]
** centroid: 5, normalized-entropy: 0.6385146263620961, [(1, 114), (2, 22)]
*** center 6: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 53, 19]]
** centroid: 7, normalized-entropy: 0.8325582396745668, [(2, 53), (3, 19)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2010377580355825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2010377580355825, 0.1534387229060729] ***
*** finished computation of 7 references, err: [Inf, 0.2010377580355825, 0.1534387229060729] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [116, 7, 0]]
** centroid: 1, normalized-entropy: 0.3150569452644301, [(1, 116), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [84, 4, 0]]
** centroid: 2, normalized-entropy: 0.2667649878030262, [(1, 84), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 61, 20]]
** centroid: 3, normalized-entropy: 0.8063495153650776, [(2, 61), (3, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [117, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [38, 80, 0]]
** centroid: 5, normalized-entropy: 0.9065795484987461, [(1, 38), (2, 80)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 85, 0]]
** centroid: 6, normalized-entropy: 0.15790637433488164, [(1, 2), (2, 85)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [49, 4, 0]]
** centroid: 7, normalized-entropy: 0.3860189005698936, [(1, 49), (2, 4)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18604998453206073] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18604998453206073, 0.1574735150978282] ***
*** finished computation of 7 references, err: [Inf, 0.18604998453206073, 0.1574735150978282] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [90, 46, 0]]
** centroid: 1, normalized-entropy: 0.9231199835423002, [(1, 90), (2, 46)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 11, 0]]
** centroid: 2, normalized-entropy: 0.6807937753703207, [(1, 50), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 71, 21]]
** centroid: 3, normalized-entropy: 0.7749672673267259, [(2, 71), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [48, 14, 0]]
** centroid: 5, normalized-entropy: 0.7706290693639406, [(1, 48), (2, 14)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [14, 109, 0]]
** centroid: 6, normalized-entropy: 0.5113351532295534, [(1, 14), (2, 109)]
*** center 7: selecting labels [1] (freq >= 1) [from [112, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 18)
[0.9439918960877044, 0.9319768870667073, 0.9289888691086295, 0.9279668890447333, 0.9239748730766695, 0.923018827210444, 0.9089568610526695, 0.9039968111824398, 0.9019828211444979, 0.8970287652922383, 0.8749887612163061, 0.8659707611803421, 0.8639957322592053, 0.8609987232741725, 0.8569467671264078, 0.8350026673379967, 0.8339477201752651, 0.7969975963987941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.6, 2) => 0.9439918960877044
finished with 19
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.3069322976638918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3069322976638918, 0.17399408494320898] ***
*** finished computation of 7 references, err: [Inf, 0.3069322976638918, 0.17399408494320898] ***
*** center 1: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [198, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [46, 34, 0]]
** centroid: 3, normalized-entropy: 0.9837082626231858, [(1, 46), (2, 34)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 94, 9]]
** centroid: 4, normalized-entropy: 0.4276590022251725, [(2, 94), (3, 9)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [110, 62, 0]]
** centroid: 5, normalized-entropy: 0.9430685934712909, [(1, 110), (2, 62)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 43, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 11, 10]]
** centroid: 7, normalized-entropy: 0.998363672593813, [(2, 11), (3, 10)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24108604078336077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24108604078336077, 0.179479174685247] ***
*** finished computation of 7 references, err: [Inf, 0.24108604078336077, 0.179479174685247] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 62, 18]]
** centroid: 1, normalized-entropy: 0.7691928290130138, [(2, 62), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [55, 53, 0]]
** centroid: 2, normalized-entropy: 0.9997526101661924, [(1, 55), (2, 53)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 32, 2]]
** centroid: 3, normalized-entropy: 0.32275695889739825, [(2, 32), (3, 2)]
*** center 4: selecting labels [1] (freq >= 1) [from [165, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [125, 24, 0]]
** centroid: 5, normalized-entropy: 0.636872308381164, [(1, 125), (2, 24)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [61, 34, 0]]
** centroid: 6, normalized-entropy: 0.9409217747114994, [(1, 61), (2, 34)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 36, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3076240500669809] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3076240500669809, 0.17909988241250638] ***
*** finished computation of 7 references, err: [Inf, 0.3076240500669809, 0.17909988241250638] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [59, 38, 0]]
** centroid: 1, normalized-entropy: 0.9659212398860464, [(1, 59), (2, 38)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [65, 13, 0]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(1, 65), (2, 13)]
*** center 3: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [52, 94, 0]]
** centroid: 5, normalized-entropy: 0.9394532068181357, [(1, 52), (2, 94)]
*** center 6: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 106, 21]]
** centroid: 7, normalized-entropy: 0.646966308330803, [(2, 106), (3, 21)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 19)
[0.9459639279998561, 0.9439918960877044, 0.9319768870667073, 0.9289888691086295, 0.9279668890447333, 0.9239748730766695, 0.923018827210444, 0.9089568610526695, 0.9039968111824398, 0.9019828211444979, 0.8970287652922383, 0.8749887612163061, 0.8659707611803421, 0.8639957322592053, 0.8609987232741725, 0.8569467671264078, 0.8350026673379967, 0.8339477201752651, 0.7969975963987941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 1) => 0.9459639279998561
finished with 19
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.1940772422491573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1940772422491573, 0.15578266356606035] ***
*** finished computation of 7 references, err: [Inf, 0.1940772422491573, 0.15578266356606035] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [120, 1, 0]]
** centroid: 1, normalized-entropy: 0.06905438212565047, [(1, 120), (2, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 214, 30]]
** centroid: 2, normalized-entropy: 0.537783841832964, [(2, 214), (3, 30)]
*** center 3: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [135, 29, 0]]
** centroid: 4, normalized-entropy: 0.673091306687829, [(1, 135), (2, 29)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [91, 48, 0]]
** centroid: 5, normalized-entropy: 0.9298222792508682, [(1, 91), (2, 48)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [70, 76, 0]]
** centroid: 6, normalized-entropy: 0.998781393072756, [(1, 70), (2, 76)]
*** center 7: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4227028308380395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4227028308380395, 0.19531410965695978] ***
*** finished computation of 7 references, err: [Inf, 0.4227028308380395, 0.19531410965695978] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [11, 104, 0]]
** centroid: 1, normalized-entropy: 0.4550598031906027, [(1, 11), (2, 104)]
*** center 2: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [104, 14, 0]]
** centroid: 6, normalized-entropy: 0.5254506799086205, [(1, 104), (2, 14)]
*** center 7: selecting labels [1, 2, 3] (freq >= 1) [from [3, 72, 15]]
** centroid: 7, normalized-entropy: 0.5375096122648988, [(1, 3), (2, 72), (3, 15)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2879586945530027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2879586945530027, 0.18348098424635828] ***
*** finished computation of 7 references, err: [Inf, 0.2879586945530027, 0.18348098424635828] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [40, 1, 0]]
** centroid: 1, normalized-entropy: 0.16542703399626665, [(1, 40), (2, 1)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [70, 64, 0]]
** centroid: 3, normalized-entropy: 0.9985532860835362, [(1, 70), (2, 64)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [12, 23, 0]]
** centroid: 4, normalized-entropy: 0.927526588431676, [(1, 12), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [100, 3, 0]]
** centroid: 5, normalized-entropy: 0.18999075553626757, [(1, 100), (2, 3)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 72, 19]]
** centroid: 6, normalized-entropy: 0.7391658175693049, [(2, 72), (3, 19)]
*** center 7: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19101385357230902] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19101385357230902, 0.15416295486036688] ***
*** finished computation of 7 references, err: [Inf, 0.19101385357230902, 0.15416295486036688] ***
*** center 1: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [49, 40, 0]]
** centroid: 2, normalized-entropy: 0.9926108898749407, [(1, 49), (2, 40)]
*** center 3: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [80, 23, 0]]
** centroid: 4, normalized-entropy: 0.7661493370832159, [(1, 80), (2, 23)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 33, 8]]
** centroid: 5, normalized-entropy: 0.7120640548905481, [(2, 33), (3, 8)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [38, 36, 0]]
** centroid: 6, normalized-entropy: 0.9994730201859837, [(1, 38), (2, 36)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 64, 10]]
** centroid: 7, normalized-entropy: 0.5713549744279549, [(2, 64), (3, 10)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2700669011417776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2700669011417776, 0.17984030119143427] ***
*** finished computation of 7 references, err: [Inf, 0.2700669011417776, 0.17984030119143427] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [9, 91, 12]]
** centroid: 1, normalized-entropy: 0.5558128569166401, [(1, 9), (2, 91), (3, 12)]
*** center 2: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [37, 29, 0]]
** centroid: 5, normalized-entropy: 0.9893755831922303, [(1, 37), (2, 29)]
*** center 6: selecting labels [1] (freq >= 1) [from [28, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [48, 59, 0]]
** centroid: 7, normalized-entropy: 0.9923628747472766, [(1, 48), (2, 59)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2490340014845133] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2490340014845133, 0.1745489722248167] ***
*** finished computation of 7 references, err: [Inf, 0.2490340014845133, 0.1745489722248167] ***
*** center 1: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [114, 41, 0]]
** centroid: 2, normalized-entropy: 0.8334850904089345, [(1, 114), (2, 41)]
*** center 3: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [6, 14, 0]]
** centroid: 4, normalized-entropy: 0.8812908992306927, [(1, 6), (2, 14)]
*** center 5: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [27, 39, 0]]
** centroid: 6, normalized-entropy: 0.976020648236615, [(1, 27), (2, 39)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 76, 15]]
** centroid: 7, normalized-entropy: 0.6457523329916605, [(2, 76), (3, 15)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1943647821135819] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1943647821135819, 0.15878034226084128] ***
*** finished computation of 7 references, err: [Inf, 0.1943647821135819, 0.15878034226084128] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [43, 9, 0]]
** centroid: 1, normalized-entropy: 0.6646953053493416, [(1, 43), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [24, 34, 0]]
** centroid: 2, normalized-entropy: 0.9784493292686188, [(1, 24), (2, 34)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [65, 19, 0]]
** centroid: 3, normalized-entropy: 0.7713111060849788, [(1, 65), (2, 19)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [15, 60, 0]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(1, 15), (2, 60)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 22, 23]]
** centroid: 5, normalized-entropy: 0.9996437496778561, [(2, 22), (3, 23)]
*** center 6: selecting labels [1] (freq >= 1) [from [141, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 45, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21808625945076346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21808625945076346, 0.16650870964163914] ***
*** finished computation of 7 references, err: [Inf, 0.21808625945076346, 0.16650870964163914] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [19, 37, 0]]
** centroid: 1, normalized-entropy: 0.9241335419915458, [(1, 19), (2, 37)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [115, 38, 0]]
** centroid: 2, normalized-entropy: 0.8086780298203682, [(1, 115), (2, 38)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 100, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 2, 16]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(2, 2), (3, 16)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [74, 3, 0]]
** centroid: 6, normalized-entropy: 0.23750814382859295, [(1, 74), (2, 3)]
*** center 7: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28068665075488386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28068665075488386, 0.1680422103665769] ***
*** finished computation of 7 references, err: [Inf, 0.28068665075488386, 0.1680422103665769] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [116, 27, 0]]
** centroid: 1, normalized-entropy: 0.6989779242384453, [(1, 116), (2, 27)]
*** center 2: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [30, 35, 0]]
** centroid: 3, normalized-entropy: 0.9957274520849256, [(1, 30), (2, 35)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [10, 32, 0]]
** centroid: 4, normalized-entropy: 0.7918583525674836, [(1, 10), (2, 32)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 86, 19]]
** centroid: 5, normalized-entropy: 0.6821560732869936, [(2, 86), (3, 19)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21649588971957565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21649588971957565, 0.17028368925489484] ***
*** finished computation of 7 references, err: [Inf, 0.21649588971957565, 0.17028368925489484] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [4, 50, 0]]
** centroid: 1, normalized-entropy: 0.38094658570539014, [(1, 4), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [73, 41, 0]]
** centroid: 2, normalized-entropy: 0.9423915493613846, [(1, 73), (2, 41)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [98, 4, 0]]
** centroid: 3, normalized-entropy: 0.23868451135100152, [(1, 98), (2, 4)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 17, 17]]
** centroid: 4, normalized-entropy: 1.0, [(2, 17), (3, 17)]
*** center 5: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 42, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [35, 39, 0]]
** centroid: 7, normalized-entropy: 0.9978913098356861, [(1, 35), (2, 39)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19448576891142874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19448576891142874, 0.1593316265558824] ***
*** finished computation of 7 references, err: [Inf, 0.19448576891142874, 0.1593316265558824] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [102, 13, 0]]
** centroid: 1, normalized-entropy: 0.5090283012319687, [(1, 102), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [84, 9, 0]]
** centroid: 2, normalized-entropy: 0.45868581620054033, [(1, 84), (2, 9)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 38, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 53, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 61, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 10, 17]]
** centroid: 7, normalized-entropy: 0.9509560484549724, [(2, 10), (3, 17)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27850393872521817] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27850393872521817, 0.1983276195358485] ***
*** finished computation of 7 references, err: [Inf, 0.27850393872521817, 0.1983276195358485] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [120, 2, 0]]
** centroid: 1, normalized-entropy: 0.12068101401352371, [(1, 120), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [12, 50, 0]]
** centroid: 2, normalized-entropy: 0.708835673332196, [(1, 12), (2, 50)]
*** center 3: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [10, 110, 12]]
** centroid: 4, normalized-entropy: 0.5146456923681414, [(1, 10), (2, 110), (3, 12)]
*** center 5: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [28, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [76, 22, 0]]
** centroid: 7, normalized-entropy: 0.7682814090975241, [(1, 76), (2, 22)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21702783048525454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21702783048525454, 0.16203433636389672] ***
*** finished computation of 7 references, err: [Inf, 0.21702783048525454, 0.16203433636389672] ***
*** center 1: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [88, 29, 0]]
** centroid: 3, normalized-entropy: 0.8078738537818512, [(1, 88), (2, 29)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [30, 33, 0]]
** centroid: 4, normalized-entropy: 0.998363672593813, [(1, 30), (2, 33)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [7, 41, 0]]
** centroid: 5, normalized-entropy: 0.5993142373098089, [(1, 7), (2, 41)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [27, 1, 0]]
** centroid: 6, normalized-entropy: 0.2222848306856879, [(1, 27), (2, 1)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 80, 16]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 80), (3, 16)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20079283261485398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20079283261485398, 0.1746634742114693] ***
*** finished computation of 7 references, err: [Inf, 0.20079283261485398, 0.1746634742114693] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 81, 11]]
** centroid: 1, normalized-entropy: 0.5281098034628294, [(2, 81), (3, 11)]
*** center 2: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [6, 52, 0]]
** centroid: 3, normalized-entropy: 0.47983202361612853, [(1, 6), (2, 52)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [46, 39, 0]]
** centroid: 4, normalized-entropy: 0.9951022712641691, [(1, 46), (2, 39)]
*** center 5: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [67, 4, 0]]
** centroid: 6, normalized-entropy: 0.3127333763966432, [(1, 67), (2, 4)]
*** center 7: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19688222459610552] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19688222459610552, 0.16674285237304867] ***
*** finished computation of 7 references, err: [Inf, 0.19688222459610552, 0.16674285237304867] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [104, 3, 0]]
** centroid: 1, normalized-entropy: 0.18445186314098744, [(1, 104), (2, 3)]
*** center 2: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [13, 62, 0]]
** centroid: 4, normalized-entropy: 0.6652735227649414, [(1, 13), (2, 62)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 20, 11]]
** centroid: 5, normalized-entropy: 0.9383153522334071, [(2, 20), (3, 11)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 10, 11]]
** centroid: 6, normalized-entropy: 0.998363672593813, [(2, 10), (3, 11)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [4, 85, 0]]
** centroid: 7, normalized-entropy: 0.2645173683629748, [(1, 4), (2, 85)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2777241576164961] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2777241576164961, 0.1724309412576258] ***
*** finished computation of 7 references, err: [Inf, 0.2777241576164961, 0.1724309412576258] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [118, 10, 0]]
** centroid: 1, normalized-entropy: 0.3955378064564774, [(1, 118), (2, 10)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 43, 1]]
** centroid: 2, normalized-entropy: 0.1564910629057016, [(2, 43), (3, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [27, 44, 0]]
** centroid: 3, normalized-entropy: 0.9582407282588409, [(1, 27), (2, 44)]
*** center 4: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 54, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 35, 16]]
** centroid: 6, normalized-entropy: 0.8974271930876951, [(2, 35), (3, 16)]
*** center 7: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2595696782283485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2595696782283485, 0.17594558218494058] ***
*** finished computation of 7 references, err: [Inf, 0.2595696782283485, 0.17594558218494058] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [97, 51, 0]]
** centroid: 1, normalized-entropy: 0.9291477025701818, [(1, 97), (2, 51)]
*** center 2: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [38, 13, 0]]
** centroid: 3, normalized-entropy: 0.8189555018403103, [(1, 38), (2, 13)]
*** center 4: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 119, 13]]
** centroid: 7, normalized-entropy: 0.46417419383209385, [(2, 119), (3, 13)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24734364465251565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24734364465251565, 0.18279582574404776] ***
*** finished computation of 7 references, err: [Inf, 0.24734364465251565, 0.18279582574404776] ***
*** center 1: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [30, 65, 1]]
** centroid: 2, normalized-entropy: 0.6144715195127212, [(1, 30), (2, 65), (3, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [29, 11, 0]]
** centroid: 3, normalized-entropy: 0.8485481782946159, [(1, 29), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [39, 22, 0]]
** centroid: 4, normalized-entropy: 0.9432261548473416, [(1, 39), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [49, 40, 0]]
** centroid: 5, normalized-entropy: 0.9926108898749407, [(1, 49), (2, 40)]
*** center 6: selecting labels [1, 2, 3] (freq >= 1) [from [8, 52, 12]]
** centroid: 6, normalized-entropy: 0.7079749057776119, [(1, 8), (2, 52), (3, 12)]
*** center 7: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
finished with 14 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24657197982817888] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24657197982817888, 0.18353517904598265] ***
*** finished computation of 7 references, err: [Inf, 0.24657197982817888, 0.18353517904598265] ***
*** center 1: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [27, 84, 11]]
** centroid: 2, normalized-entropy: 0.7351861442713964, [(1, 27), (2, 84), (3, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [46, 99, 6]]
** centroid: 4, normalized-entropy: 0.698197667434842, [(1, 46), (2, 99), (3, 6)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [64, 1, 0]]
** centroid: 5, normalized-entropy: 0.11467550533614682, [(1, 64), (2, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [26, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2599663353729993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2599663353729993, 0.16528159632906317] ***
*** finished computation of 7 references, err: [Inf, 0.2599663353729993, 0.16528159632906317] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 61, 16]]
** centroid: 1, normalized-entropy: 0.7372413771710565, [(2, 61), (3, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [105, 31, 0]]
** centroid: 3, normalized-entropy: 0.7744050105375746, [(1, 105), (2, 31)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 55, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [25, 9, 0]]
** centroid: 6, normalized-entropy: 0.8337649072106652, [(1, 25), (2, 9)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [48, 19, 0]]
** centroid: 7, normalized-entropy: 0.8602858652332406, [(1, 48), (2, 19)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21008428667671977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21008428667671977, 0.16250259038060905] ***
*** finished computation of 7 references, err: [Inf, 0.21008428667671977, 0.16250259038060905] ***
*** center 1: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [30, 57, 0]]
** centroid: 2, normalized-entropy: 0.9293636260137188, [(1, 30), (2, 57)]
*** center 3: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [9, 109, 16]]
** centroid: 4, normalized-entropy: 0.5489773231586902, [(1, 9), (2, 109), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [64, 1, 0]]
** centroid: 5, normalized-entropy: 0.11467550533614682, [(1, 64), (2, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [25, 19, 0]]
** centroid: 7, normalized-entropy: 0.9865446300055647, [(1, 25), (2, 19)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18600875109434128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18600875109434128, 0.153887735132128] ***
*** finished computation of 7 references, err: [Inf, 0.18600875109434128, 0.153887735132128] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 44, 16]]
** centroid: 1, normalized-entropy: 0.8366407419411671, [(2, 44), (3, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [46, 25, 0]]
** centroid: 4, normalized-entropy: 0.935940714955517, [(1, 46), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [92, 16, 0]]
** centroid: 5, normalized-entropy: 0.6051865766334207, [(1, 92), (2, 16)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [39, 48, 0]]
** centroid: 6, normalized-entropy: 0.9922666387194963, [(1, 39), (2, 48)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 44, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2307900673840195] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2307900673840195, 0.16540691022016107] ***
*** finished computation of 7 references, err: [Inf, 0.2307900673840195, 0.16540691022016107] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [88, 41, 0]]
** centroid: 1, normalized-entropy: 0.9020054365905131, [(1, 88), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [81, 10, 0]]
** centroid: 2, normalized-entropy: 0.49958440742366095, [(1, 81), (2, 10)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [35, 22, 0]]
** centroid: 3, normalized-entropy: 0.9621461334087003, [(1, 35), (2, 22)]
*** center 4: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 32, 5]]
** centroid: 5, normalized-entropy: 0.5713549744279549, [(2, 32), (3, 5)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 16, 7]]
** centroid: 6, normalized-entropy: 0.8865408928220899, [(2, 16), (3, 7)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 60, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21784309262037277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21784309262037277, 0.17799044754076748] ***
*** finished computation of 7 references, err: [Inf, 0.21784309262037277, 0.17799044754076748] ***
*** center 1: selecting labels [1] (freq >= 1) [from [156, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 13, 11]]
** centroid: 2, normalized-entropy: 0.9949848281859699, [(2, 13), (3, 11)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [10, 57, 0]]
** centroid: 3, normalized-entropy: 0.6079696120060726, [(1, 10), (2, 57)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [45, 57, 0]]
** centroid: 4, normalized-entropy: 0.9899927915575186, [(1, 45), (2, 57)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 30, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [87, 7, 0]]
** centroid: 6, normalized-entropy: 0.3823806751537801, [(1, 87), (2, 7)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 27, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24383962300233544] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24383962300233544, 0.18757944258488715] ***
*** finished computation of 7 references, err: [Inf, 0.24383962300233544, 0.18757944258488715] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [67, 17, 0]]
** centroid: 1, normalized-entropy: 0.7266645172796352, [(1, 67), (2, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [188, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [1, 60, 0]]
** centroid: 4, normalized-entropy: 0.12068101401352371, [(1, 1), (2, 60)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 20, 12]]
** centroid: 5, normalized-entropy: 0.954434002924965, [(2, 20), (3, 12)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [17, 42, 0]]
** centroid: 6, normalized-entropy: 0.8663006754980497, [(1, 17), (2, 42)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 55, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26426954453997314] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26426954453997314, 0.18316158069111407] ***
*** finished computation of 7 references, err: [Inf, 0.26426954453997314, 0.18316158069111407] ***
*** center 1: selecting labels [1] (freq >= 1) [from [117, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [94, 76, 0]]
** centroid: 2, normalized-entropy: 0.9918977415529348, [(1, 94), (2, 76)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [16, 11, 0]]
** centroid: 3, normalized-entropy: 0.975119064940866, [(1, 16), (2, 11)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 48, 17]]
** centroid: 4, normalized-entropy: 0.829059069399666, [(2, 48), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [4, 52, 0]]
** centroid: 5, normalized-entropy: 0.3712323266408756, [(1, 4), (2, 52)]
*** center 6: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [32, 1, 0]]
** centroid: 7, normalized-entropy: 0.19590927087360496, [(1, 32), (2, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21591922862082719] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21591922862082719, 0.17606745195481927] ***
*** finished computation of 7 references, err: [Inf, 0.21591922862082719, 0.17606745195481927] ***
*** center 1: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [84, 19, 0]]
** centroid: 3, normalized-entropy: 0.6897501750585195, [(1, 84), (2, 19)]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [2, 134, 16]]
** centroid: 4, normalized-entropy: 0.3687163048505895, [(1, 2), (2, 134), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [19, 34, 0]]
** centroid: 5, normalized-entropy: 0.9414231081869789, [(1, 19), (2, 34)]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1946628727391362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1946628727391362, 0.15948958975542338] ***
*** finished computation of 7 references, err: [Inf, 0.1946628727391362, 0.15948958975542338] ***
*** center 1: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 83, 13]]
** centroid: 2, normalized-entropy: 0.572108447204188, [(2, 83), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [59, 35, 0]]
** centroid: 3, normalized-entropy: 0.9524521973646323, [(1, 59), (2, 35)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 48, 2]]
** centroid: 4, normalized-entropy: 0.24229218908241482, [(2, 48), (3, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [63, 22, 0]]
** centroid: 5, normalized-entropy: 0.8249658680139929, [(1, 63), (2, 22)]
*** center 6: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.237277756662108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.237277756662108, 0.18177002928964794] ***
*** finished computation of 7 references, err: [Inf, 0.237277756662108, 0.18177002928964794] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [145, 13, 0]]
** centroid: 1, normalized-entropy: 0.41015711281001616, [(1, 145), (2, 13)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 43, 12]]
** centroid: 2, normalized-entropy: 0.7568336324184036, [(2, 43), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [18, 30, 0]]
** centroid: 3, normalized-entropy: 0.954434002924965, [(1, 18), (2, 30)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 76, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 1, 10]]
** centroid: 5, normalized-entropy: 0.43949698692151346, [(2, 1), (3, 10)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [70, 19, 0]]
** centroid: 6, normalized-entropy: 0.748088105780153, [(1, 70), (2, 19)]
*** center 7: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23466545833088456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23466545833088456, 0.18015229435823857] ***
*** finished computation of 7 references, err: [Inf, 0.23466545833088456, 0.18015229435823857] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [32, 49, 0]]
** centroid: 1, normalized-entropy: 0.9679884922470298, [(1, 32), (2, 49)]
*** center 2: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [17, 86, 0]]
** centroid: 3, normalized-entropy: 0.646251622274129, [(1, 17), (2, 86)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 44, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 9, 11]]
** centroid: 5, normalized-entropy: 0.9927744539878083, [(2, 9), (3, 11)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [83, 3, 0]]
** centroid: 6, normalized-entropy: 0.21832103023746746, [(1, 83), (2, 3)]
*** center 7: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20350952411070466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20350952411070466, 0.17087449099309743] ***
*** finished computation of 7 references, err: [Inf, 0.20350952411070466, 0.17087449099309743] ***
*** center 1: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [75, 29, 0]]
** centroid: 2, normalized-entropy: 0.8538738465459897, [(1, 75), (2, 29)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 64, 13]]
** centroid: 3, normalized-entropy: 0.6550239908788728, [(2, 64), (3, 13)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [16, 7, 0]]
** centroid: 4, normalized-entropy: 0.8865408928220899, [(1, 16), (2, 7)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [41, 63, 0]]
** centroid: 5, normalized-entropy: 0.9674756088157442, [(1, 41), (2, 63)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [25, 8, 0]]
** centroid: 6, normalized-entropy: 0.7990485210442682, [(1, 25), (2, 8)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [60, 1, 0]]
** centroid: 7, normalized-entropy: 0.12068101401352371, [(1, 60), (2, 1)]
finished with 12 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 368,3 => 30,1 => 602), Dict(2 => 362,3 => 38,1 => 600))
[ Info: ===== scores for single classifier: {"micro_f1":0.924,"precision":0.924,"recall":0.924,"macro_recall":0.6451903007980356,"macro_f1":0.6240386188839797,"accuracy":0.924,"class_f1":{"2":0.9047619047619047,"3":0.0,"1":0.9673539518900344},"class_precision":{"2":0.8279816513761468,"3":0.0,"1":0.99822695035461},"class_recall":{"2":0.9972375690607734,"3":0.0,"1":0.9383333333333334}}
[ Info: ===== scores for 1: {"micro_f1":0.98,"precision":0.98,"recall":0.98,"macro_recall":0.9698993570482376,"macro_f1":0.97684184849164,"accuracy":0.98,"class_f1":{"2":0.9726027397260274,"3":0.972972972972973,"1":0.9849498327759197},"class_precision":{"2":0.9646739130434783,"3":1.0,"1":0.988255033557047},"class_recall":{"2":0.9806629834254144,"3":0.9473684210526315,"1":0.9816666666666667}}
[ Info: ===== scores for 5: {"micro_f1":0.982,"precision":0.982,"recall":0.982,"macro_recall":0.9531167005912572,"macro_f1":0.9538103980882439,"accuracy":0.982,"class_f1":{"2":0.975,"3":0.8947368421052632,"1":0.9916943521594683},"class_precision":{"2":0.9804469273743017,"3":0.8947368421052632,"1":0.9884105960264901},"class_recall":{"2":0.9696132596685083,"3":0.8947368421052632,"1":0.995}}
[ Info: ===== scores for 7: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9507195244095507,"macro_f1":0.9444812774596798,"accuracy":0.979,"class_f1":{"2":0.9707927677329624,"3":0.8717948717948718,"1":0.9908561928512053},"class_precision":{"2":0.9775910364145658,"3":0.85,"1":0.988391376451078},"class_recall":{"2":0.9640883977900553,"3":0.8947368421052632,"1":0.9933333333333333}}
[ Info: ===== scores for 9: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9746381377015282,"macro_f1":0.9540873591600433,"accuracy":0.979,"class_f1":{"2":0.9706293706293706,"3":0.9024390243902439,"1":0.9891936824605153},"class_precision":{"2":0.9830028328611898,"3":0.8409090909090909,"1":0.9867330016583747},"class_recall":{"2":0.9585635359116023,"3":0.9736842105263158,"1":0.9916666666666667}}
[ Info: ===== scores for 11: {"micro_f1":0.977,"precision":0.977,"recall":0.977,"macro_recall":0.9731617718328972,"macro_f1":0.9428068010420952,"accuracy":0.977,"class_f1":{"2":0.9678321678321679,"3":0.8705882352941177,"1":0.99},"class_precision":{"2":0.9801699716713881,"3":0.7872340425531915,"1":0.99},"class_recall":{"2":0.9558011049723757,"3":0.9736842105263158,"1":0.99}}
(score = 0.982, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.98, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.98, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.985, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.985, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.985,"k":3,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.985,"precision":0.985,"recall":0.985,"macro_recall":0.9797977448224612,"macro_f1":0.9655479786779445,"accuracy":0.985,"class_f1":{"2":0.9791376912378303,"3":0.925,"1":0.9925062447960034},"class_precision":{"2":0.9859943977591037,"3":0.8809523809523809,"1":0.9916805324459235},"class_recall":{"2":0.9723756906077348,"3":0.9736842105263158,"1":0.9933333333333333}}
Test Summary: | Pass  Total
AKNC          |    8      8
[742, 1, 4, 3, 1, 3, 2, 5, 1, 1, 4, 5, 5, 8, 1, 10, 3, 9, 4, 4, 2, 5, 4, 11, 4, 5, 19, 2, 15, 3, 10, 1, 3, 16, 7, 1, 4, 5, 15, 3, 2, 5, 10, 6, 37, 22, 4, 21, 18, 6, 4, 4, 6, 8, 22, 21, 35, 8, 5, 10, 10, 7, 3, 1, 5, 4, 10, 84, 30, 29, 10, 101, 7, 4, 5, 6, 99, 3, 13, 5, 6, 22, 8, 349, 15, 30, 17, 14, 29, 12, 14, 21, 3, 4, 16, 24, 2, 83, 12, 65, 2, 4, 16, 23, 24, 6, 74, 3, 70, 23, 15, 35, 16, 15, 4, 44, 34, 6, 15, 14, 14, 23, 17, 1, 7, 22, 36, 18, 14, 33, 32, 2, 10, 23, 97, 8, 12, 8, 110, 117, 4, 49, 15, 3, 81, 11, 28, 4, 3, 33, 20, 20, 16, 13, 12, 23, 8, 12, 10, 7, 6, 5, 11, 9, 8, 19, 17, 28, 27, 31, 164, 5, 5, 30, 14, 14, 6, 19, 78, 3, 53, 10, 102, 6, 52, 65, 3, 52, 1, 6, 5, 29, 6, 33, 39, 10, 36, 82, 53, 3, 23, 31, 4, 48, 97, 38, 13, 202, 36, 11, 24, 32, 27, 6, 22, 52, 11, 29, 218, 26, 69, 10, 12, 8, 194, 7, 34, 13, 63, 57, 32, 51, 66, 25, 21, 15, 13, 66, 58, 28, 34, 12, 3, 11, 20, 8, 15, 29, 34, 10, 26, 239, 8, 7, 18, 68, 16, 56, 48, 8, 33, 24, 32, 14, 448, 37, 33, 22, 27, 11, 224, 1, 12, 29, 84, 6, 165, 7, 42, 89, 16, 29, 29, 25, 28, 4, 13, 11, 9, 5, 30, 20, 13, 13, 1, 25, 23, 47, 10, 896]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.667, speedup = 0.2513652394693287, eval_ratio = 0.08483099999999999)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3864335317460318,"recall":0.3767361111111111,"f1":null,"seconds":0.00019693560898303986,"exhaustive_search_seconds":0.0003483220934867859,"evaluations":494.296875,"distances_sum":1792.2487544525973}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5598958333333328,"recall":0.5598958333333328,"f1":null,"seconds":0.0006977636367082596,"exhaustive_search_seconds":0.0003483220934867859,"evaluations":660.25,"distances_sum":1716.383006074097}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6614583333333329,"recall":0.6614583333333329,"f1":null,"seconds":0.0004199221730232239,"exhaustive_search_seconds":0.0003483220934867859,"evaluations":818.2578125,"distances_sum":1659.7513382790155}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7413194444444436,"recall":0.7413194444444436,"f1":0.7413194444444436,"seconds":0.0005775392055511475,"exhaustive_search_seconds":0.0003483220934867859,"evaluations":967.1640625,"distances_sum":1627.3472621813794}
KCenters.DeloneInvIndex> reached performance {"precision":0.8055555555555549,"recall":0.8055555555555549,"f1":0.8055555555555549,"seconds":0.000714179128408432,"exhaustive_search_seconds":0.0003483220934867859,"evaluations":1087.453125,"distances_sum":1607.5594276553788}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7990000000000004, speedup = 0.44822396519008856, eval_ratio = 0.11693699999999999)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
