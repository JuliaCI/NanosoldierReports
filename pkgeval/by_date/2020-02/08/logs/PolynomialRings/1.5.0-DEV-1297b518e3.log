Julia Version 1.5.0-DEV.247
Commit 1297b518e3 (2020-02-07 18:46 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed ProgressMeter ─────────────── v1.2.0
  Installed Tables ────────────────────── v0.2.11
  Installed TableTraits ───────────────── v1.0.0
  Installed ConstructionBase ──────────── v1.0.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Polynomials ───────────────── v0.6.0
  Installed MacroTools ────────────────── v0.5.4
  Installed PolynomialRings ───────────── v0.5.0
  Installed Setfield ──────────────────── v0.6.0
  Installed InitialValues ─────────────── v0.2.2
  Installed Compat ────────────────────── v3.3.1
  Installed DocStringExtensions ───────── v0.8.1
  Installed DataValueInterfaces ───────── v1.0.0
  Installed DataStructures ────────────── v0.17.9
  Installed Transducers ───────────────── v0.4.17
  Installed Combinatorics ─────────────── v1.0.0
  Installed ArgCheck ──────────────────── v1.0.1
  Installed DataAPI ───────────────────── v1.1.0
  Installed Requires ──────────────────── v1.0.1
  Installed OrderedCollections ────────── v1.1.0
  Installed JSON ──────────────────────── v0.21.0
  Installed BangBang ──────────────────── v0.3.14
  Installed Documenter ────────────────── v0.24.5
  Installed ZygoteRules ───────────────── v0.2.0
  Installed RecipesBase ───────────────── v0.7.0
  Installed IterTools ─────────────────── v1.3.0
  Installed Parsers ───────────────────── v0.3.11
  Installed InPlace ───────────────────── v0.3.0
   Updating `~/.julia/environments/v1.5/Project.toml`
  [c8ed2632] + PolynomialRings v0.5.0
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [dce04be8] + ArgCheck v1.0.1
  [198e06fe] + BangBang v0.3.14
  [861a8166] + Combinatorics v1.0.0
  [34da2185] + Compat v3.3.1
  [187b0558] + ConstructionBase v1.0.0
  [9a962f9c] + DataAPI v1.1.0
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [ffbed154] + DocStringExtensions v0.8.1
  [e30172f5] + Documenter v0.24.5
  [12a7aed9] + InPlace v0.3.0
  [22cec73e] + InitialValues v0.2.2
  [c8e1da08] + IterTools v1.3.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [1914dd2f] + MacroTools v0.5.4
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [c8ed2632] + PolynomialRings v0.5.0
  [f27b6e38] + Polynomials v0.6.0
  [92933f4c] + ProgressMeter v1.2.0
  [3cdcf5f2] + RecipesBase v0.7.0
  [ae029012] + Requires v1.0.1
  [efcf1570] + Setfield v0.6.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [28d57a85] + Transducers v0.4.17
  [700de1a5] + ZygoteRules v0.2.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing PolynomialRings
Status `/tmp/jl_XXFDNr/Manifest.toml`
  [dce04be8] ArgCheck v1.0.1
  [198e06fe] BangBang v0.3.14
  [861a8166] Combinatorics v1.0.0
  [34da2185] Compat v3.3.1
  [187b0558] ConstructionBase v1.0.0
  [9a962f9c] DataAPI v1.1.0
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [ffbed154] DocStringExtensions v0.8.1
  [e30172f5] Documenter v0.24.5
  [12a7aed9] InPlace v0.3.0
  [22cec73e] InitialValues v0.2.2
  [c8e1da08] IterTools v1.3.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [1914dd2f] MacroTools v0.5.4
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [c8ed2632] PolynomialRings v0.5.0
  [f27b6e38] Polynomials v0.6.0
  [92933f4c] ProgressMeter v1.2.0
  [3cdcf5f2] RecipesBase v0.7.0
  [ae029012] Requires v1.0.1
  [efcf1570] Setfield v0.6.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v0.2.11
  [28d57a85] Transducers v0.4.17
  [700de1a5] ZygoteRules v0.2.0
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Arithmetic: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:24
  Test threw exception
  Expression: 1x != 0
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] *(::Int64, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:24
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:22
   [11] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [12] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
Arithmetic: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:25
  Test threw exception
  Expression: 1x == x
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] *(::Int64, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:25
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:22
   [11] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [12] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
Arithmetic: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:26
  Test threw exception
  Expression: 2x == x + x
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] *(::Int64, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:26
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:22
   [11] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [12] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
Arithmetic: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:27
  Test threw exception
  Expression: 2 * x * y == y * x * 2
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] *(::Int64, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [8] *(::Int64, ::ℚ[x,y], ::ℚ[x,y]) at ./operators.jl:529
   [9] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:27
   [10] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [11] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:22
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [13] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
Arithmetic: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:40
  Test threw exception
  Expression: common_denominator(3 * z ^ 5 + 6z + 3 // 2) == 2
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290 [inlined]
   [2] convert(::Type{Rational{Int64}[z]}, ::Rational{Int64}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149
   [3] _promote at ./promotion.jl:259 [inlined]
   [4] promote at ./promotion.jl:282 [inlined]
   [5] +(::Int64[z], ::Rational{Int64}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:259
   [6] +(::Int64[z], ::Int64[z], ::Rational{Int64}) at ./operators.jl:529
   [7] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:40
   [8] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [9] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:22
   [10] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [11] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
Arithmetic: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:41
  Test threw exception
  Expression: common_denominator(3 // 5 * z ^ 5 + 6z + 3 // 2) == 10
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290 [inlined]
   [2] convert(::Type{Rational{Int64}[z]}, ::Rational{Int64}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149
   [3] _promote at ./promotion.jl:259 [inlined]
   [4] promote at ./promotion.jl:282 [inlined]
   [5] *(::Rational{Int64}, ::Int64[z]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [6] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:41
   [7] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:22
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
Arithmetic: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:43
  Test threw exception
  Expression: integral_fraction(3 * z ^ 5 + 6z + 3 // 2) == (6 * z ^ 5 + 12z + 3, 2)
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290 [inlined]
   [2] convert(::Type{Rational{Int64}[z]}, ::Rational{Int64}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149
   [3] _promote at ./promotion.jl:259 [inlined]
   [4] promote at ./promotion.jl:282 [inlined]
   [5] +(::Int64[z], ::Rational{Int64}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:259
   [6] +(::Int64[z], ::Int64[z], ::Rational{Int64}) at ./operators.jl:529
   [7] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:43
   [8] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [9] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:22
   [10] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [11] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
Arithmetic: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:44
  Test threw exception
  Expression: integral_fraction(3 // 5 * z ^ 5 + 6z + 3 // 2) == (6 * z ^ 5 + 60z + 15, 10)
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290 [inlined]
   [2] convert(::Type{Rational{Int64}[z]}, ::Rational{Int64}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149
   [3] _promote at ./promotion.jl:259 [inlined]
   [4] promote at ./promotion.jl:282 [inlined]
   [5] *(::Rational{Int64}, ::Int64[z]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [6] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:44
   [7] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:22
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
Arithmetic: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:45
  Test threw exception
  Expression: map_coefficients((c->begin
                c ^ 2
            end), x + 2 * x ^ 2 + 3 * x ^ 3) == x + 4 * x ^ 2 + 9 * x ^ 3
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] *(::Int64, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:45
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:22
   [11] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [12] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
Arithmetic: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:46
  Test threw exception
  Expression: map_coefficients((c->begin
                c ^ 2 - 4
            end), x + 2 * x ^ 2 + 3 * x ^ 3) == -3x + 5 * x ^ 3
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] *(::Int64, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:46
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:22
   [11] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [12] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
Hashing: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:53
  Test threw exception
  Expression: hash(2x) == hash(2x)
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] *(::Int64, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:53
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:53
   [11] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [12] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
Hashing: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:54
  Test threw exception
  Expression: length(Set([2x, 2x, 2x])) == 1
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] *(::Int64, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:54
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:53
   [11] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [12] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
Hashing: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:55
  Test threw exception
  Expression: length(Set([2x, 2x, 3x])) == 2
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] *(::Int64, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:55
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:53
   [11] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [12] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
Extension of scalars: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:59
  Test threw exception
  Expression: 1 // 2 * z == z // 2
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290 [inlined]
   [2] convert(::Type{Rational{Int64}[z]}, ::Rational{Int64}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149
   [3] _promote at ./promotion.jl:259 [inlined]
   [4] promote at ./promotion.jl:282 [inlined]
   [5] *(::Rational{Int64}, ::Int64[z]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [6] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:59
   [7] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:59
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
Extension of scalars: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:61
  Test threw exception
  Expression: 2 * z // 2 == z
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290 [inlined]
   [2] convert(::Type{Rational{Int64}[z]}, ::Rational{Int64}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{Rational{Int64}[z]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] *(::Int64, ::Rational{Int64}[z]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:61
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:59
   [11] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [12] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
Extension of scalars: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:64
  Test threw exception
  Expression: 2 * (z + 1 // 2) == 2z + 1
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290 [inlined]
   [2] convert(::Type{Rational{Int64}[z]}, ::Rational{Int64}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149
   [3] _promote at ./promotion.jl:259 [inlined]
   [4] promote at ./promotion.jl:282 [inlined]
   [5] +(::Int64[z], ::Rational{Int64}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:259
   [6] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:64
   [7] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:59
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
Extension of scalars: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:65
  Test threw exception
  Expression: basering(z + 1 // 2) == Rational{Int64}
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290 [inlined]
   [2] convert(::Type{Rational{Int64}[z]}, ::Rational{Int64}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149
   [3] _promote at ./promotion.jl:259 [inlined]
   [4] promote at ./promotion.jl:282 [inlined]
   [5] +(::Int64[z], ::Rational{Int64}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:259
   [6] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:65
   [7] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:59
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
conversions between rings: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:71
  Test threw exception
  Expression: x * z == z * x
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] * at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Constants.jl:82 [inlined]
   [3] _ofpolynomialtype(::PolynomialRings.Constants.One, ::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:101
   [4] #3 at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:111 [inlined]
   [5] (::PolynomialRings.Expansions.var"#3#10"{TupleMonomial{2,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y)}}},Rational{BigInt},DataType,DataType})(::Tuple{TupleMonomial{3,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}}},Rational{BigInt}}) at ./none:0
   [6] iterate at ./generator.jl:47 [inlined]
   [7] iterate at ./iterators.jl:1059 [inlined]
   [8] iterate at ./iterators.jl:1053 [inlined]
   [9] _collect(::Type{Tuple{TupleMonomial{3,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}}},Rational{BigInt}}}, ::Base.Iterators.Flatten{Base.Generator{PolynomialRings.Polynomials.Expansion{ℚ[x,y]},PolynomialRings.Expansions.var"#4#9"{PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}},DataType,DataType}}}, ::Base.SizeUnknown) at ./array.jl:567
   [10] collect at ./array.jl:561 [inlined]
   [11] expansion(::ℚ[x,y], ::PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:107
   [12] convert(::Type{ℚ[x,y,z]}, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/NamedPolynomials.jl:224
   [13] _promote at ./promotion.jl:259 [inlined]
   [14] promote at ./promotion.jl:282 [inlined]
   [15] *(::ℚ[x,y], ::Int64[z]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:269
   [16] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:71
   [17] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [18] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:71
   [19] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [20] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
conversions between rings: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:72
  Test threw exception
  Expression: x * y * z == x * z * y
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] * at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Constants.jl:82 [inlined]
   [3] _ofpolynomialtype(::PolynomialRings.Constants.One, ::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:101
   [4] #3 at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:111 [inlined]
   [5] (::PolynomialRings.Expansions.var"#3#10"{TupleMonomial{2,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y)}}},Rational{BigInt},DataType,DataType})(::Tuple{TupleMonomial{3,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}}},Rational{BigInt}}) at ./none:0
   [6] iterate at ./generator.jl:47 [inlined]
   [7] iterate at ./iterators.jl:1059 [inlined]
   [8] iterate at ./iterators.jl:1053 [inlined]
   [9] _collect(::Type{Tuple{TupleMonomial{3,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}}},Rational{BigInt}}}, ::Base.Iterators.Flatten{Base.Generator{PolynomialRings.Polynomials.Expansion{ℚ[x,y]},PolynomialRings.Expansions.var"#4#9"{PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}},DataType,DataType}}}, ::Base.SizeUnknown) at ./array.jl:567
   [10] collect at ./array.jl:561 [inlined]
   [11] expansion(::ℚ[x,y], ::PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:107
   [12] convert(::Type{ℚ[x,y,z]}, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/NamedPolynomials.jl:224
   [13] _promote at ./promotion.jl:259 [inlined]
   [14] promote at ./promotion.jl:282 [inlined]
   [15] * at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:269 [inlined]
   [16] *(::ℚ[x,y], ::ℚ[x,y], ::Int64[z]) at ./operators.jl:529
   [17] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:72
   [18] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [19] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:71
   [20] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [21] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
conversions between rings: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:73
  Test threw exception
  Expression: (x + z) * (x - z) == x ^ 2 - z ^ 2
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] * at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Constants.jl:82 [inlined]
   [3] _ofpolynomialtype(::PolynomialRings.Constants.One, ::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:101
   [4] #3 at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:111 [inlined]
   [5] (::PolynomialRings.Expansions.var"#3#10"{TupleMonomial{2,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y)}}},Rational{BigInt},DataType,DataType})(::Tuple{TupleMonomial{3,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}}},Rational{BigInt}}) at ./none:0
   [6] iterate at ./generator.jl:47 [inlined]
   [7] iterate at ./iterators.jl:1059 [inlined]
   [8] iterate at ./iterators.jl:1053 [inlined]
   [9] _collect(::Type{Tuple{TupleMonomial{3,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}}},Rational{BigInt}}}, ::Base.Iterators.Flatten{Base.Generator{PolynomialRings.Polynomials.Expansion{ℚ[x,y]},PolynomialRings.Expansions.var"#4#9"{PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}},DataType,DataType}}}, ::Base.SizeUnknown) at ./array.jl:567
   [10] collect at ./array.jl:561 [inlined]
   [11] expansion(::ℚ[x,y], ::PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:107
   [12] convert(::Type{ℚ[x,y,z]}, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/NamedPolynomials.jl:224
   [13] _promote at ./promotion.jl:259 [inlined]
   [14] promote at ./promotion.jl:282 [inlined]
   [15] +(::ℚ[x,y], ::Int64[z]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:269
   [16] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:73
   [17] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [18] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:71
   [19] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [20] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
conversions between rings: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:78
  Test threw exception
  Expression: div(x + y + z, [z]) == transpose([1])
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] * at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Constants.jl:82 [inlined]
   [3] _ofpolynomialtype(::PolynomialRings.Constants.One, ::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:101
   [4] #3 at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:111 [inlined]
   [5] (::PolynomialRings.Expansions.var"#3#10"{TupleMonomial{2,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y)}}},Rational{BigInt},DataType,DataType})(::Tuple{TupleMonomial{3,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}}},Rational{BigInt}}) at ./none:0
   [6] iterate at ./generator.jl:47 [inlined]
   [7] iterate at ./iterators.jl:1059 [inlined]
   [8] iterate at ./iterators.jl:1053 [inlined]
   [9] _collect(::Type{Tuple{TupleMonomial{3,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}}},Rational{BigInt}}}, ::Base.Iterators.Flatten{Base.Generator{PolynomialRings.Polynomials.Expansion{ℚ[x,y]},PolynomialRings.Expansions.var"#4#9"{PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}},DataType,DataType}}}, ::Base.SizeUnknown) at ./array.jl:567
   [10] collect at ./array.jl:561 [inlined]
   [11] expansion(::ℚ[x,y], ::PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:107
   [12] convert(::Type{ℚ[x,y,z]}, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/NamedPolynomials.jl:224
   [13] _promote at ./promotion.jl:259 [inlined]
   [14] promote at ./promotion.jl:282 [inlined]
   [15] +(::ℚ[x,y], ::Int64[z]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:269
   [16] +(::ℚ[x,y], ::ℚ[x,y], ::Int64[z]) at ./operators.jl:529
   [17] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:78
   [18] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [19] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:71
   [20] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [21] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
conversions between rings: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:79
  Test threw exception
  Expression: rem(x + y + z, [z]) == x + y
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] * at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Constants.jl:82 [inlined]
   [3] _ofpolynomialtype(::PolynomialRings.Constants.One, ::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:101
   [4] #3 at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:111 [inlined]
   [5] (::PolynomialRings.Expansions.var"#3#10"{TupleMonomial{2,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y)}}},Rational{BigInt},DataType,DataType})(::Tuple{TupleMonomial{3,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}}},Rational{BigInt}}) at ./none:0
   [6] iterate at ./generator.jl:47 [inlined]
   [7] iterate at ./iterators.jl:1059 [inlined]
   [8] iterate at ./iterators.jl:1053 [inlined]
   [9] _collect(::Type{Tuple{TupleMonomial{3,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}}},Rational{BigInt}}}, ::Base.Iterators.Flatten{Base.Generator{PolynomialRings.Polynomials.Expansion{ℚ[x,y]},PolynomialRings.Expansions.var"#4#9"{PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}},DataType,DataType}}}, ::Base.SizeUnknown) at ./array.jl:567
   [10] collect at ./array.jl:561 [inlined]
   [11] expansion(::ℚ[x,y], ::PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:107
   [12] convert(::Type{ℚ[x,y,z]}, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/NamedPolynomials.jl:224
   [13] _promote at ./promotion.jl:259 [inlined]
   [14] promote at ./promotion.jl:282 [inlined]
   [15] +(::ℚ[x,y], ::Int64[z]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:269
   [16] +(::ℚ[x,y], ::ℚ[x,y], ::Int64[z]) at ./operators.jl:529
   [17] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:79
   [18] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [19] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:71
   [20] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [21] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
conversions between rings: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:81
  Test threw exception
  Expression: convert(#= /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:81 =# @ring(ℚ[x]), x) == x
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] unalias at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:40 [inlined]
   [3] convert(::Type{Rational{BigInt}}, ::ℚ[y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:245
   [4] push!(::ℚ[x], ::(Term over ℚ[y] in x)) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/SparsePolynomials.jl:36
   [5] convert(::Type{ℚ[x]}, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/NamedPolynomials.jl:225
   [6] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:81
   [7] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:71
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
conversions between rings: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:84
  Test threw exception
  Expression: eltype([x x; x x] * [z z; z z]) == typeof(x * z)
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] * at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Constants.jl:82 [inlined]
   [3] _ofpolynomialtype(::PolynomialRings.Constants.One, ::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:101
   [4] #3 at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:111 [inlined]
   [5] (::PolynomialRings.Expansions.var"#3#10"{TupleMonomial{2,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y)}}},Rational{BigInt},DataType,DataType})(::Tuple{TupleMonomial{3,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}}},Rational{BigInt}}) at ./none:0
   [6] iterate at ./generator.jl:47 [inlined]
   [7] iterate at ./iterators.jl:1059 [inlined]
   [8] iterate at ./iterators.jl:1053 [inlined]
   [9] _collect(::Type{Tuple{TupleMonomial{3,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}}},Rational{BigInt}}}, ::Base.Iterators.Flatten{Base.Generator{PolynomialRings.Polynomials.Expansion{ℚ[x,y]},PolynomialRings.Expansions.var"#4#9"{PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}},DataType,DataType}}}, ::Base.SizeUnknown) at ./array.jl:567
   [10] collect at ./array.jl:561 [inlined]
   [11] expansion(::ℚ[x,y], ::PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y, :z)}}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:107
   [12] convert(::Type{ℚ[x,y,z]}, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/NamedPolynomials.jl:224
   [13] _promote at ./promotion.jl:259 [inlined]
   [14] promote at ./promotion.jl:282 [inlined]
   [15] * at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:269 [inlined]
   [16] matmul2x2!(::Array{ℚ[x,y,z],2}, ::Char, ::Char, ::Array{ℚ[x,y],2}, ::Array{Int64[z],2}, ::LinearAlgebra.MulAddMul{true,true,Bool,Bool}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/matmul.jl:940
   [17] generic_matmatmul!(::Array{ℚ[x,y,z],2}, ::Char, ::Char, ::Array{ℚ[x,y],2}, ::Array{Int64[z],2}, ::LinearAlgebra.MulAddMul{true,true,Bool,Bool}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/matmul.jl:719
   [18] mul! at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/matmul.jl:235 [inlined]
   [19] mul! at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/matmul.jl:208 [inlined]
   [20] *(::Array{ℚ[x,y],2}, ::Array{Int64[z],2}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/matmul.jl:153
   [21] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:84
   [22] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [23] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:71
   [24] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [25] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
substitution: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:89
  Test threw exception
  Expression: (x ^ 2 + y ^ 2)(x = 1) == 1 + y ^ 2
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[y]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] *(::ℚ[y], ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:259
   [8] BottomRF at ./reduce.jl:78 [inlined]
   [9] MappingRF at ./reduce.jl:90 [inlined]
   [10] _foldl_impl(::Base.MappingRF{PolynomialRings.Expansions.var"#20#22"{TupleMonomial{1,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x,)}}},Tuple{Int64}},Base.BottomRF{typeof(*)}}, ::ℚ[y], ::UnitRange{Int64}) at ./reduce.jl:55
   [11] foldl_impl at ./reduce.jl:45 [inlined]
   [12] mapfoldl_impl at ./reduce.jl:41 [inlined]
   [13] #mapfoldl#193 at ./reduce.jl:157 [inlined]
   [14] #mapreduce#197 at ./reduce.jl:280 [inlined]
   [15] #reduce#199 at ./reduce.jl:445 [inlined]
   [16] #19 at ./none:0 [inlined]
   [17] MappingRF at ./reduce.jl:90 [inlined]
   [18] _foldl_impl(::Base.MappingRF{PolynomialRings.Expansions.var"#19#21"{Tuple{Int64}},Base.BottomRF{typeof(+)}}, ::ℚ[y], ::Array{Tuple{TupleMonomial{1,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x,)}}},ℚ[y]},1}) at ./reduce.jl:55
   [19] foldl_impl(::Base.MappingRF{PolynomialRings.Expansions.var"#19#21"{Tuple{Int64}},Base.BottomRF{typeof(+)}}, ::NamedTuple{(:init,),Tuple{ℚ[y]}}, ::Array{Tuple{TupleMonomial{1,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x,)}}},ℚ[y]},1}) at ./reduce.jl:45
   [20] mapfoldl_impl(::typeof(identity), ::typeof(+), ::NamedTuple{(:init,),Tuple{ℚ[y]}}, ::Base.Generator{Array{Tuple{TupleMonomial{1,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x,)}}},ℚ[y]},1},PolynomialRings.Expansions.var"#19#21"{Tuple{Int64}}}) at ./reduce.jl:41
   [21] mapfoldl(::Function, ::Function, ::Base.Generator{Array{Tuple{TupleMonomial{1,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x,)}}},ℚ[y]},1},PolynomialRings.Expansions.var"#19#21"{Tuple{Int64}}}; kw::Base.Iterators.Pairs{Symbol,ℚ[y],Tuple{Symbol},NamedTuple{(:init,),Tuple{ℚ[y]}}}) at ./reduce.jl:157
   [22] mapreduce(::Function, ::Function, ::Base.Generator{Array{Tuple{TupleMonomial{1,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x,)}}},ℚ[y]},1},PolynomialRings.Expansions.var"#19#21"{Tuple{Int64}}}; kw::Base.Iterators.Pairs{Symbol,ℚ[y],Tuple{Symbol},NamedTuple{(:init,),Tuple{ℚ[y]}}}) at ./reduce.jl:280
   [23] reduce(::Function, ::Base.Generator{Array{Tuple{TupleMonomial{1,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x,)}}},ℚ[y]},1},PolynomialRings.Expansions.var"#19#21"{Tuple{Int64}}}; kw::Base.Iterators.Pairs{Symbol,ℚ[y],Tuple{Symbol},NamedTuple{(:init,),Tuple{ℚ[y]}}}) at ./reduce.jl:445
   [24] _substitute(::ℚ[x,y], ::PolynomialRings.NamingSchemes.Named{(:x,)}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:213
   [25] (::ℚ[x,y])(; kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:x,),Tuple{Int64}}}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:269
   [26] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:89
   [27] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [28] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:88
   [29] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [30] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
substitution: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:90
  Test threw exception
  Expression: ([1 + x; 1 + y])(x = 1) == [2; 1 + y]
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] +(::Int64, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:90
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:88
   [11] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [12] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
substitution: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:91
  Test threw exception
  Expression: ([1 + x; 1 + y])(x = 1, y = 2) == [2; 3]
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] +(::Int64, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:91
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:88
   [11] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [12] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
substitution: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:94
  Test threw exception
  Expression: (one(x))(x = 1) == 1
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[y]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] *(::ℚ[y], ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:259
   [8] BottomRF at ./reduce.jl:78 [inlined]
   [9] MappingRF at ./reduce.jl:90 [inlined]
   [10] _foldl_impl(::Base.MappingRF{PolynomialRings.Expansions.var"#20#22"{TupleMonomial{1,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x,)}}},Tuple{Int64}},Base.BottomRF{typeof(*)}}, ::ℚ[y], ::UnitRange{Int64}) at ./reduce.jl:55
   [11] foldl_impl at ./reduce.jl:45 [inlined]
   [12] mapfoldl_impl at ./reduce.jl:41 [inlined]
   [13] #mapfoldl#193 at ./reduce.jl:157 [inlined]
   [14] #mapreduce#197 at ./reduce.jl:280 [inlined]
   [15] #reduce#199 at ./reduce.jl:445 [inlined]
   [16] #19 at ./none:0 [inlined]
   [17] MappingRF at ./reduce.jl:90 [inlined]
   [18] _foldl_impl(::Base.MappingRF{PolynomialRings.Expansions.var"#19#21"{Tuple{Int64}},Base.BottomRF{typeof(+)}}, ::ℚ[y], ::Array{Tuple{TupleMonomial{1,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x,)}}},ℚ[y]},1}) at ./reduce.jl:55
   [19] foldl_impl(::Base.MappingRF{PolynomialRings.Expansions.var"#19#21"{Tuple{Int64}},Base.BottomRF{typeof(+)}}, ::NamedTuple{(:init,),Tuple{ℚ[y]}}, ::Array{Tuple{TupleMonomial{1,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x,)}}},ℚ[y]},1}) at ./reduce.jl:45
   [20] mapfoldl_impl(::typeof(identity), ::typeof(+), ::NamedTuple{(:init,),Tuple{ℚ[y]}}, ::Base.Generator{Array{Tuple{TupleMonomial{1,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x,)}}},ℚ[y]},1},PolynomialRings.Expansions.var"#19#21"{Tuple{Int64}}}) at ./reduce.jl:41
   [21] mapfoldl(::Function, ::Function, ::Base.Generator{Array{Tuple{TupleMonomial{1,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x,)}}},ℚ[y]},1},PolynomialRings.Expansions.var"#19#21"{Tuple{Int64}}}; kw::Base.Iterators.Pairs{Symbol,ℚ[y],Tuple{Symbol},NamedTuple{(:init,),Tuple{ℚ[y]}}}) at ./reduce.jl:157
   [22] mapreduce(::Function, ::Function, ::Base.Generator{Array{Tuple{TupleMonomial{1,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x,)}}},ℚ[y]},1},PolynomialRings.Expansions.var"#19#21"{Tuple{Int64}}}; kw::Base.Iterators.Pairs{Symbol,ℚ[y],Tuple{Symbol},NamedTuple{(:init,),Tuple{ℚ[y]}}}) at ./reduce.jl:280
   [23] reduce(::Function, ::Base.Generator{Array{Tuple{TupleMonomial{1,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x,)}}},ℚ[y]},1},PolynomialRings.Expansions.var"#19#21"{Tuple{Int64}}}; kw::Base.Iterators.Pairs{Symbol,ℚ[y],Tuple{Symbol},NamedTuple{(:init,),Tuple{ℚ[y]}}}) at ./reduce.jl:445
   [24] _substitute(::ℚ[x,y], ::PolynomialRings.NamingSchemes.Named{(:x,)}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:213
   [25] (::ℚ[x,y])(; kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:x,),Tuple{Int64}}}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:269
   [26] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:94
   [27] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [28] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:88
   [29] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [30] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
substitution: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:96
  Test threw exception
  Expression: (x + y)(x = x + y) == x + 2y
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] * at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Constants.jl:82 [inlined]
   [3] _ofpolynomialtype(::PolynomialRings.Constants.One, ::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:101
   [4] #3 at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:111 [inlined]
   [5] (::PolynomialRings.Expansions.var"#3#10"{TupleMonomial{1,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:y,)}}},Rational{BigInt},DataType,DataType})(::Tuple{TupleMonomial{2,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y)}}},Rational{BigInt}}) at ./none:0
   [6] iterate at ./generator.jl:47 [inlined]
   [7] iterate at ./iterators.jl:1059 [inlined]
   [8] iterate at ./iterators.jl:1053 [inlined]
   [9] _collect(::Type{Tuple{TupleMonomial{2,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y)}}},Rational{BigInt}}}, ::Base.Iterators.Flatten{Base.Generator{PolynomialRings.Polynomials.Expansion{ℚ[y]},PolynomialRings.Expansions.var"#4#9"{PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y)}},DataType,DataType}}}, ::Base.SizeUnknown) at ./array.jl:567
   [10] collect at ./array.jl:561 [inlined]
   [11] expansion(::ℚ[y], ::PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y)}}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:107
   [12] convert(::Type{ℚ[x,y]}, ::ℚ[y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/NamedPolynomials.jl:224
   [13] _promote at ./promotion.jl:259 [inlined]
   [14] promote at ./promotion.jl:282 [inlined]
   [15] *(::ℚ[y], ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:269
   [16] BottomRF at ./reduce.jl:78 [inlined]
   [17] MappingRF at ./reduce.jl:90 [inlined]
   [18] _foldl_impl(::Base.MappingRF{PolynomialRings.Expansions.var"#20#22"{TupleMonomial{1,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x,)}}},Tuple{ℚ[x,y]}},Base.BottomRF{typeof(*)}}, ::ℚ[y], ::UnitRange{Int64}) at ./reduce.jl:55
   [19] foldl_impl at ./reduce.jl:45 [inlined]
   [20] mapfoldl_impl at ./reduce.jl:41 [inlined]
   [21] #mapfoldl#193 at ./reduce.jl:157 [inlined]
   [22] #mapreduce#197 at ./reduce.jl:280 [inlined]
   [23] #reduce#199 at ./reduce.jl:445 [inlined]
   [24] #19 at ./none:0 [inlined]
   [25] MappingRF at ./reduce.jl:90 [inlined]
   [26] _foldl_impl(::Base.MappingRF{PolynomialRings.Expansions.var"#19#21"{Tuple{ℚ[x,y]}},Base.BottomRF{typeof(+)}}, ::ℚ[x,y], ::Array{Tuple{TupleMonomial{1,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x,)}}},ℚ[y]},1}) at ./reduce.jl:55
   [27] foldl_impl(::Base.MappingRF{PolynomialRings.Expansions.var"#19#21"{Tuple{ℚ[x,y]}},Base.BottomRF{typeof(+)}}, ::NamedTuple{(:init,),Tuple{ℚ[x,y]}}, ::Array{Tuple{TupleMonomial{1,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x,)}}},ℚ[y]},1}) at ./reduce.jl:45
   [28] mapfoldl_impl(::typeof(identity), ::typeof(+), ::NamedTuple{(:init,),Tuple{ℚ[x,y]}}, ::Base.Generator{Array{Tuple{TupleMonomial{1,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x,)}}},ℚ[y]},1},PolynomialRings.Expansions.var"#19#21"{Tuple{ℚ[x,y]}}}) at ./reduce.jl:41
   [29] mapfoldl(::Function, ::Function, ::Base.Generator{Array{Tuple{TupleMonomial{1,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x,)}}},ℚ[y]},1},PolynomialRings.Expansions.var"#19#21"{Tuple{ℚ[x,y]}}}; kw::Base.Iterators.Pairs{Symbol,ℚ[x,y],Tuple{Symbol},NamedTuple{(:init,),Tuple{ℚ[x,y]}}}) at ./reduce.jl:157
   [30] mapreduce(::Function, ::Function, ::Base.Generator{Array{Tuple{TupleMonomial{1,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x,)}}},ℚ[y]},1},PolynomialRings.Expansions.var"#19#21"{Tuple{ℚ[x,y]}}}; kw::Base.Iterators.Pairs{Symbol,ℚ[x,y],Tuple{Symbol},NamedTuple{(:init,),Tuple{ℚ[x,y]}}}) at ./reduce.jl:280
   [31] reduce(::Function, ::Base.Generator{Array{Tuple{TupleMonomial{1,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x,)}}},ℚ[y]},1},PolynomialRings.Expansions.var"#19#21"{Tuple{ℚ[x,y]}}}; kw::Base.Iterators.Pairs{Symbol,ℚ[x,y],Tuple{Symbol},NamedTuple{(:init,),Tuple{ℚ[x,y]}}}) at ./reduce.jl:445
   [32] _substitute(::ℚ[x,y], ::PolynomialRings.NamingSchemes.Named{(:x,)}, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:213
   [33] (::ℚ[x,y])(; kwargs::Base.Iterators.Pairs{Symbol,ℚ[x,y],Tuple{Symbol},NamedTuple{(:x,),Tuple{ℚ[x,y]}}}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:269
   [34] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:96
   [35] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [36] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:88
   [37] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [38] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
differentiation: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:121
  Test threw exception
  Expression: dx(x ^ 2) == 2x
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] *(::Int64, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:121
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:121
   [11] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [12] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
sparse monomials: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:130
  Got exception outside of a @test
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert(::Type{ℚ[c[]]}, ::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149
   [3] _broadcast_getindex_evalf at ./broadcast.jl:631 [inlined]
   [4] _broadcast_getindex at ./broadcast.jl:614 [inlined]
   [5] getindex at ./broadcast.jl:564 [inlined]
   [6] macro expansion at ./broadcast.jl:910 [inlined]
   [7] macro expansion at ./simdloop.jl:77 [inlined]
   [8] copyto! at ./broadcast.jl:909 [inlined]
   [9] copyto! at ./broadcast.jl:864 [inlined]
   [10] copy at ./broadcast.jl:840 [inlined]
   [11] materialize at ./broadcast.jl:820 [inlined]
   [12] convert(::Type{ℚ[c[]][x,y]}, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/SparsePolynomials.jl:388
   [13] _promote at ./promotion.jl:259 [inlined]
   [14] promote at ./promotion.jl:282 [inlined]
   [15] *(::ℚ[c[]], ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:269
   [16] (::var"#h5#36"{PolynomialRings.EntryPoints.NumberedVariableGenerator{ℚ[c[]],ℚ[c[]]}})() at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:132
   [17] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:133
   [18] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [19] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:131
   [20] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [21] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
   [22] include(::String) at ./client.jl:439
   [23] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/runtests.jl:4
   [24] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [25] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/runtests.jl:4
   [26] include(::String) at ./client.jl:439
   [27] top-level scope at none:6
   [28] eval(::Module, ::Any) at ./boot.jl:331
   [29] exec_options(::Base.JLOptions) at ./client.jl:264
   [30] _start() at ./client.jl:484
  
constructors: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:157
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:157 =# @polynomial(x ^ 4 + x ^ 3 + x ^ 2 + x + 1) == x ^ 4 + x ^ 3 + x ^ 2 + x + 1
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] +(::ℚ[x,y], ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:259
   [8] afoldl at ./operators.jl:516 [inlined]
   [9] afoldl at ./operators.jl:517 [inlined]
   [10] +(::ℚ[x,y], ::ℚ[x,y], ::ℚ[x,y], ::ℚ[x,y], ::Int64) at ./operators.jl:529
   [11] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:157
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [13] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:156
   [14] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [15] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
base extension: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:195
  Test threw exception
  Expression: base_extend(a[1] ^ 2 + x, S) == 2 + x
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert(::Type{ℚ[a[]]}, ::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[a[]]}, ::BigInt) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] ℚ[a[]](::BigInt) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25
   [6] ^(::ℚ[a[]][x,y], ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Operators.jl:166
   [7] macro expansion at ./none:0 [inlined]
   [8] literal_pow(::typeof(^), ::ℚ[a[]][x,y], ::Val{2}) at ./none:0
   [9] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:195
   [10] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [11] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:179
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [13] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
base extension: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:200
  Test threw exception
  Expression: base_extend(y, #= /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:200 =# @ring(ℚ[x])) isa #= /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:200 =# @ring((ℚ[x])[y])
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x]}, ::BigInt) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _broadcast_getindex_evalf at ./broadcast.jl:631 [inlined]
   [6] _broadcast_getindex at ./broadcast.jl:614 [inlined]
   [7] getindex at ./broadcast.jl:564 [inlined]
   [8] macro expansion at ./broadcast.jl:910 [inlined]
   [9] macro expansion at ./simdloop.jl:77 [inlined]
   [10] copyto! at ./broadcast.jl:909 [inlined]
   [11] copyto! at ./broadcast.jl:864 [inlined]
   [12] copy at ./broadcast.jl:840 [inlined]
   [13] materialize at ./broadcast.jl:820 [inlined]
   [14] convert(::Type{ℚ[x][y]}, ::ℤ[y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/SparsePolynomials.jl:388
   [15] ℚ[x][y](::ℤ[y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25
   [16] base_extend(::ℤ[y], ::Type{ℚ[x]}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:111
   [17] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:200
   [18] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [19] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:179
   [20] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [21] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
  
Minimal rings: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:254
  Got exception outside of a @test
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[a]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] -(::ℚ[a], ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:259
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/EntryPoints.jl:214
   [9] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:255
   [10] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [11] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:255
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [13] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:15
   [14] include(::String) at ./client.jl:439
   [15] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/runtests.jl:4
   [16] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [17] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/runtests.jl:4
   [18] include(::String) at ./client.jl:439
   [19] top-level scope at none:6
   [20] eval(::Module, ::Any) at ./boot.jl:331
   [21] exec_options(::Base.JLOptions) at ./client.jl:264
   [22] _start() at ./client.jl:484
  
Arrays: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:422
  Test threw exception
  Expression: [1 1] == #= /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:422 =# @coefficient([x ^ 2 + y ^ 2 x ^ 2 + 1], x ^ 2)
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] +(::ℚ[x,y], ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:259
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:532
   [9] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:422
   [10] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [11] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:419
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [13] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:287
  
Arrays: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:423
  Test threw exception
  Expression: [1 1] == #= /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:423 =# @coefficient([x ^ 2 + y ^ 2 x ^ 2 + 1], x ^ 2)
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] +(::ℚ[x,y], ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:259
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:532
   [9] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:423
   [10] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [11] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:419
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [13] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:287
  
Arrays: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:424
  Test threw exception
  Expression: [0 1] == #= /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:424 =# @constant_coefficient([x ^ 2 + y ^ 2 x ^ 2 + 1], x, y)
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] +(::ℚ[x,y], ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:259
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:563
   [9] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:424
   [10] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [11] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:419
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [13] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:287
  
Arrays: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:425
  Test threw exception
  Expression: [y ^ 2 1] == #= /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:425 =# @constant_coefficient([x ^ 2 + y ^ 2 x ^ 2 + 1], x)
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] fill!(::SubArray{ℚ[x,y],2,Array{ℚ[x,y],2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}, ::Int64) at ./multidimensional.jl:927
   [6] __cat(::Array{ℚ[x,y],2}, ::Tuple{Int64,Int64}, ::Tuple{Bool,Bool}, ::ℚ[x,y], ::Vararg{Any,N} where N) at ./abstractarray.jl:1465
   [7] _cat_t at ./abstractarray.jl:1445 [inlined]
   [8] #cat_t#109 at ./abstractarray.jl:1437 [inlined]
   [9] _cat at ./abstractarray.jl:1435 [inlined]
   [10] #cat#110 at ./abstractarray.jl:1573 [inlined]
   [11] hcat(::ℚ[x,y], ::Int64) at ./abstractarray.jl:1553
   [12] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:425
   [13] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [14] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:419
   [15] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [16] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:287
  
Arrays: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:426
  Test threw exception
  Expression: [[1 0], [0 0]] == #= /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:426 =# @linear_coefficients([x + y ^ 2 x ^ 2 + 1], x, y)
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] +(::ℚ[x,y], ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:259
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:597
   [9] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:426
   [10] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [11] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:419
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [13] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:287
  
Arrays: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:427
  Test threw exception
  Expression: [[0 0], [1 0]] == #= /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:427 =# @linear_coefficients([x + y ^ 2 x ^ 2 + 1], y, x)
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] +(::ℚ[x,y], ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:259
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Expansions.jl:597
   [9] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:427
   [10] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [11] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:419
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [13] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:287
  
Arrays: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:431
  Test threw exception
  Expression: [x 0; 0 x] * sparse([x 0; 0 x]) == [x ^ 2 0; 0 x ^ 2]
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Bool) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] *(::Bool, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [8] * at ./operators.jl:529 [inlined]
   [9] mul!(::Array{ℚ[x,y],2}, ::Array{ℚ[x,y],2}, ::SparseArrays.SparseMatrixCSC{ℚ[x,y],Int64}, ::Bool, ::Bool) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/SparseArrays/src/linalg.jl:106
   [10] *(::Array{ℚ[x,y],2}, ::SparseArrays.SparseMatrixCSC{ℚ[x,y],Int64}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/SparseArrays/src/linalg.jl:111
   [11] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:431
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [13] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:419
   [14] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [15] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:287
  
Arrays: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:432
  Test threw exception
  Expression: sparse([x 0; 0 x]) * [x 0; 0 x] == [x ^ 2 0; 0 x ^ 2]
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Bool) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] *(::ℚ[x,y], ::Bool) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:259
   [8] mul!(::Array{ℚ[x,y],2}, ::SparseArrays.SparseMatrixCSC{ℚ[x,y],Int64}, ::Array{ℚ[x,y],2}, ::Bool, ::Bool) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/SparseArrays/src/linalg.jl:21
   [9] *(::SparseArrays.SparseMatrixCSC{ℚ[x,y],Int64}, ::Array{ℚ[x,y],2}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/SparseArrays/src/linalg.jl:32
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:432
   [11] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [12] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:419
   [13] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [14] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:287
  
Arrays: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:438
  Test threw exception
  Expression: common_denominator([3 // 5 * z ^ 5, 6z + 3 // 2]) == 10
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290 [inlined]
   [2] convert(::Type{Rational{Int64}[x,y,z]}, ::Rational{Int64}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149
   [3] _promote at ./promotion.jl:259 [inlined]
   [4] promote at ./promotion.jl:282 [inlined]
   [5] *(::Rational{Int64}, ::Int64[x,y,z]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [6] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:438
   [7] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:419
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:287
  
Arrays: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:439
  Test threw exception
  Expression: integral_fraction([3 // 5 * z ^ 5, 6z + 3 // 2]) == ([6 * z ^ 5, 60z + 15], 10)
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290 [inlined]
   [2] convert(::Type{Rational{Int64}[x,y,z]}, ::Rational{Int64}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149
   [3] _promote at ./promotion.jl:259 [inlined]
   [4] promote at ./promotion.jl:282 [inlined]
   [5] *(::Rational{Int64}, ::Int64[x,y,z]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [6] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:439
   [7] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:419
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:287
  
Arrays: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:441
  Test threw exception
  Expression: I * x == [x 0; 0 x] == x * I
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Bool) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] *(::Bool, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [8] *(::LinearAlgebra.UniformScaling{Bool}, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:351
   [9] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:441
   [10] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [11] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:419
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [13] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/PolynomialRings.jl:287
  
Polynomials: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/Display.jl:47
  Test threw exception
  Expression: repr(2e3) == "2//1*e[3]"
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142 (repeats 2 times)
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] *(::Int64, ::ℚ[x,y][e[]]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/Display.jl:47
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/Display.jl:30
   [11] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [12] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/Display.jl:6
  
Gröbner: preparing inputs 33%|████████▋                 |  ETA: 0:00:03[KGröbner: preparing inputs100%|██████████████████████████| Time: 0:00:01[K
Computing Gröbner basis:  33%|████████▋                 |  ETA: 0:00:10[K
  |G|:   1
  |H|:   0
  |JP|:  2[A[A[A


[K[A[K[A[K[AComputing Gröbner basis:  50%|█████████████             |  ETA: 0:00:06[K
  |G|:   2
  |H|:   1
  |JP|:  2[A[A[A


[K[A[K[A[K[AComputing Gröbner basis: 100%|██████████████████████████| Time: 0:00:07[K
  |G|:   4
  |H|:   2
  |JP|:  0
Gröbner: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/Groebner.jl:39
  Got exception outside of a @test
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] _promote at ./promotion.jl:259 [inlined]
   [4] promote at ./promotion.jl:282 [inlined]
   [5] *(::Rational{BigInt}, ::ℤ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [6] _broadcast_getindex_evalf at ./broadcast.jl:631 [inlined]
   [7] _broadcast_getindex at ./broadcast.jl:604 [inlined]
   [8] getindex at ./broadcast.jl:564 [inlined]
   [9] macro expansion at ./broadcast.jl:910 [inlined]
   [10] macro expansion at ./simdloop.jl:77 [inlined]
   [11] copyto! at ./broadcast.jl:909 [inlined]
   [12] copyto! at ./broadcast.jl:864 [inlined]
   [13] copy at ./broadcast.jl:840 [inlined]
   [14] materialize at ./broadcast.jl:820 [inlined]
   [15] broadcast_preserving_zero_d at ./broadcast.jl:809 [inlined]
   [16] *(::Rational{BigInt}, ::Array{ℤ[x,y],1}) at ./arraymath.jl:52
   [17] * at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/SparseArrays/src/sparsevector.jl:1406 [inlined]
   [18] #51 at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Modules.jl:333 [inlined]
   [19] iterate at ./generator.jl:47 [inlined]
   [20] _collect(::Array{PolynomialRings.Modules.TransformedModuleElement{ℤ[x,y],ℤ[x,y],BigInt},1}, ::Base.Generator{Array{PolynomialRings.Modules.TransformedModuleElement{ℤ[x,y],ℤ[x,y],BigInt},1},PolynomialRings.Modules.var"#51#53"}, ::Base.EltypeUnknown, ::Base.HasShape{1}) at ./array.jl:677
   [21] collect_similar at ./array.jl:606 [inlined]
   [22] map at ./abstractarray.jl:2081 [inlined]
   [23] separatetransformation(::Array{PolynomialRings.Modules.TransformedModuleElement{ℤ[x,y],ℤ[x,y],BigInt},1}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Modules.jl:333
   [24] gwv(::PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y)}}, ::Array{ℤ[x,y],1}; with_transformation::Bool) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/GroebnerGWV.jl:236
   [25] #gröbner_transformation#43 at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/GroebnerGWV.jl:261 [inlined]
   [26] gröbner_transformation at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/GroebnerGWV.jl:257 [inlined]
   [27] #gröbner_transformation#2 at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Backends.jl:20 [inlined]
   [28] gröbner_transformation at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Backends.jl:20 [inlined]
   [29] #gröbner_transformation#8 at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Backends.jl:32 [inlined]
   [30] gröbner_transformation(::PolynomialRings.Backends.Gröbner.NamedBackend{:m4gb}, ::Array{ℤ[x,y],1}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Backends.jl:32
   [31] gröbner_transformation(::Array{ℤ[x,y],1}; kwds::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Backends.jl:49
   [32] gröbner_transformation(::Array{ℤ[x,y],1}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Backends.jl:44
   [33] (::var"#tests#91")() at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/Groebner.jl:45
   [34] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/Groebner.jl:85
   [35] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [36] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/Groebner.jl:40
   [37] include(::String) at ./client.jl:439
   [38] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/runtests.jl:8
   [39] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [40] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/runtests.jl:4
   [41] include(::String) at ./client.jl:439
   [42] top-level scope at none:6
   [43] eval(::Module, ::Any) at ./boot.jl:331
   [44] exec_options(::Base.JLOptions) at ./client.jl:264
   [45] _start() at ./client.jl:484
  
Syzygy: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/Groebner.jl:96
  Got exception outside of a @test
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[x,y]}, ::BigInt) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] *(::BigInt, ::ℚ[x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:258
   [8] integral_fraction at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Operators.jl:215 [inlined]
   [9] (::PolynomialRings.Modules.var"#48#49"{DataType,DataType,Int64})(::Tuple{Int64,ℚ[x,y]}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Modules.jl:325
   [10] iterate at ./generator.jl:47 [inlined]
   [11] collect(::Base.Generator{Base.Iterators.Enumerate{Array{ℚ[x,y],1}},PolynomialRings.Modules.var"#48#49"{DataType,DataType,Int64}}) at ./array.jl:664
   [12] map at ./abstractarray.jl:2107 [inlined]
   [13] withtransformations at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Modules.jl:324 [inlined]
   [14] gwv(::PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y)}}, ::Array{ℚ[x,y],1}; with_transformation::Bool) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/GroebnerGWV.jl:86
   [15] #gröbner_transformation#43 at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/GroebnerGWV.jl:261 [inlined]
   [16] gröbner_transformation at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/GroebnerGWV.jl:257 [inlined]
   [17] #gröbner_transformation#2 at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Backends.jl:20 [inlined]
   [18] gröbner_transformation at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Backends.jl:20 [inlined]
   [19] #gröbner_transformation#8 at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Backends.jl:32 [inlined]
   [20] gröbner_transformation(::PolynomialRings.Backends.Gröbner.NamedBackend{:m4gb}, ::Array{ℚ[x,y],1}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Backends.jl:32
   [21] gröbner_transformation(::Array{ℚ[x,y],1}; kwds::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Backends.jl:49
   [22] gröbner_transformation(::Array{ℚ[x,y],1}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Backends.jl:44
   [23] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/Groebner.jl:101
   [24] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [25] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/Groebner.jl:98
   [26] include(::String) at ./client.jl:439
   [27] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/runtests.jl:8
   [28] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [29] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/runtests.jl:4
   [30] include(::String) at ./client.jl:439
   [31] top-level scope at none:6
   [32] eval(::Module, ::Any) at ./boot.jl:331
   [33] exec_options(::Base.JLOptions) at ./client.jl:264
   [34] _start() at ./client.jl:484
  
Ideals: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/CommutativeAlgebras.jl:23
  Test threw exception
  Expression: !(y ^ 2 in I * J)
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290 [inlined]
   [2] lcm_multipliers(::Rational{Int64}, ::Rational{Int64}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Methods.jl:75
   [3] lcm_multipliers at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Terms.jl:92 [inlined]
   [4] macro expansion at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/GroebnerM4GB.jl:74 [inlined]
   [5] macro expansion at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:177 [inlined]
   [6] m4gb(::PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y)}}, ::Array{Rational{Int64}[x,y],1}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/GroebnerM4GB.jl:70
   [7] gröbner_basis(::PolynomialRings.Backends.Gröbner.NamedBackend{:m4gb}, ::PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y)}}, ::Array{Int64[x,y],1}; kwds::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/GroebnerM4GB.jl:303
   [8] gröbner_basis at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/GroebnerM4GB.jl:300 [inlined]
   [9] #gröbner_basis#7 at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Backends.jl:31 [inlined]
   [10] gröbner_basis(::PolynomialRings.Backends.Gröbner.NamedBackend{:m4gb}, ::Array{Int64[x,y],1}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Backends.jl:31
   [11] gröbner_basis(::Array{Int64[x,y],1}; kwds::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Backends.jl:66
   [12] gröbner_basis(::Array{Int64[x,y],1}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Backends.jl:61
   [13] _grb(::Ideal{Int64[x,y]}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/CommutativeAlgebras/Ideals.jl:39
   [14] rem(::Int64[x,y], ::Ideal{Int64[x,y]}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/CommutativeAlgebras/Ideals.jl:62
   [15] in(::Int64[x,y], ::Ideal{Int64[x,y]}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/CommutativeAlgebras/Ideals.jl:63
   [16] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:246
   [17] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/CommutativeAlgebras.jl:23
   [18] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [19] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/CommutativeAlgebras.jl:6
   [20] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [21] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/CommutativeAlgebras.jl:5
  
Ideals: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/CommutativeAlgebras.jl:24
  Test threw exception
  Expression: I ^ 5 ⊆ J ^ 5
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290 [inlined]
   [2] lcm_multipliers(::Rational{Int64}, ::Rational{Int64}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Methods.jl:75
   [3] lcm_multipliers at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Terms.jl:92 [inlined]
   [4] macro expansion at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/GroebnerM4GB.jl:74 [inlined]
   [5] macro expansion at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:177 [inlined]
   [6] m4gb(::PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y)}}, ::Array{Rational{Int64}[x,y],1}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/GroebnerM4GB.jl:70
   [7] gröbner_basis(::PolynomialRings.Backends.Gröbner.NamedBackend{:m4gb}, ::PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y)}}, ::Array{Int64[x,y],1}; kwds::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/GroebnerM4GB.jl:303
   [8] gröbner_basis at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/GroebnerM4GB.jl:300 [inlined]
   [9] #gröbner_basis#7 at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Backends.jl:31 [inlined]
   [10] gröbner_basis(::PolynomialRings.Backends.Gröbner.NamedBackend{:m4gb}, ::Array{Int64[x,y],1}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Backends.jl:31
   [11] gröbner_basis(::Array{Int64[x,y],1}; kwds::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Backends.jl:66
   [12] gröbner_basis(::Array{Int64[x,y],1}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Backends.jl:61
   [13] _grb(::Ideal{Int64[x,y]}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/CommutativeAlgebras/Ideals.jl:39
   [14] rem(::Int64[x,y], ::Ideal{Int64[x,y]}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/CommutativeAlgebras/Ideals.jl:62
   [15] in(::Int64[x,y], ::Ideal{Int64[x,y]}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/CommutativeAlgebras/Ideals.jl:63
   [16] #1 at ./none:0 [inlined]
   [17] iterate at ./generator.jl:47 [inlined]
   [18] _all(::typeof(identity), ::Base.Generator{Array{Int64[x,y],1},PolynomialRings.Ideals.var"#1#2"{Ideal{Int64[x,y]}}}, ::Colon) at ./reduce.jl:816
   [19] all at ./reduce.jl:812 [inlined]
   [20] all(::Base.Generator{Array{Int64[x,y],1},PolynomialRings.Ideals.var"#1#2"{Ideal{Int64[x,y]}}}) at ./reduce.jl:730
   [21] issubset(::Ideal{Int64[x,y]}, ::Ideal{Int64[x,y]}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/CommutativeAlgebras/Ideals.jl:65
   [22] eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:246
   [23] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/CommutativeAlgebras.jl:24
   [24] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [25] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/CommutativeAlgebras.jl:6
   [26] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [27] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/CommutativeAlgebras.jl:5
  
Construction and conversion: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/CommutativeAlgebras.jl:27
  Got exception outside of a @test
  setfield! immutable struct of type Rational cannot be changed
  Stacktrace:
   [1] deepcopy(::Rational{BigInt}) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Util.jl:290
   [2] convert at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:149 [inlined]
   [3] Type at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:25 [inlined]
   [4] convert(::Type{ℚ[α]}, ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:142
   [5] _promote at ./promotion.jl:259 [inlined]
   [6] promote at ./promotion.jl:282 [inlined]
   [7] -(::ℚ[α], ::Int64) at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/src/PolynomialRings/Conversions.jl:259
   [8] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/CommutativeAlgebras.jl:30
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/CommutativeAlgebras.jl:28
   [11] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [12] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/CommutativeAlgebras.jl:5
   [13] include(::String) at ./client.jl:439
   [14] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/runtests.jl:9
   [15] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [16] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/runtests.jl:4
   [17] include(::String) at ./client.jl:439
   [18] top-level scope at none:6
   [19] eval(::Module, ::Any) at ./boot.jl:331
   [20] exec_options(::Base.JLOptions) at ./client.jl:264
   [21] _start() at ./client.jl:484
  
Test Summary:                   | Pass  Error  Total
PolynomialRings                 |  237     52    289
  PolynomialRings               |  102     35    137
    Arithmetic                  |   17     10     27
    Hashing                     |           3      3
    Extension of scalars        |    5      4      9
    conversions between rings   |    3      7     10
    substitution                |    4      5      9
    zero comparison in Base     |    3             3
    degrees                     |    5             5
    differentiation             |    5      1      6
    sparse monomials            |           1      1
    constructors                |    9      1     10
    base extension              |   16      2     18
    promotions                  |   29            29
    Minimal rings               |           1      1
    Sparse result types         |    6             6
  Expansions                    |   72     11     83
    expansion()                 |   16            16
    numbered variables          |    9             9
    coefficient()               |   26            26
    Nested types                |   13            13
    New types                   |    1             1
    Arrays                      |    7     11     18
  Display                       |   21      1     22
    Types                       |    7             7
    Polynomials                 |   14      1     15
  Reductions                    |   18            18
  Gröbner                       |           1      1
  Syzygy                        |           1      1
  CommutativeAlgebras           |   24      3     27
    Ideals                      |   12      2     14
    Construction and conversion |           1      1
    Interplay with conversions  |   11            11
    Bound names                 |    1             1
ERROR: LoadError: Some tests did not pass: 237 passed, 0 failed, 52 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/PolynomialRings/Sas0j/test/runtests.jl:3
ERROR: Package PolynomialRings errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:53
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1503
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:316
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:303
 [5] #test#68 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [7] #test#67 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [8] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [10] test(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [11] top-level scope at none:13
