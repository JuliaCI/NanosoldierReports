Julia Version 1.5.0-DEV.247
Commit 1297b518e3 (2020-02-07 18:46 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Reexport ──────────────────── v0.2.0
  Installed Tables ────────────────────── v0.2.11
  Installed LearnBase ─────────────────── v0.2.2
  Installed KCenters ──────────────────── v0.1.11
  Installed TableTraits ───────────────── v1.0.0
  Installed MLDataPattern ─────────────── v0.5.0
  Installed SimilaritySearch ──────────── v0.3.18
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Compat ────────────────────── v3.3.1
  Installed MappedArrays ──────────────── v0.2.2
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed MLDataUtils ───────────────── v0.5.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed StatsBase ─────────────────── v0.32.0
  Installed DataStructures ────────────── v0.17.9
  Installed InvertedIndices ───────────── v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed JSON ──────────────────────── v0.21.0
  Installed DataAPI ───────────────────── v1.1.0
  Installed Missings ──────────────────── v0.4.3
  Installed DataFrames ────────────────── v0.20.0
  Installed Parsers ───────────────────── v0.3.11
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.1.11
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.3.1
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.1.11
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.18
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_aTJPok/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.3.1
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.0
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.1.11
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.18
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v0.2.11
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
[ Info: 152.63
[ Info: 71.46
[ Info: 37.109999999999985
[ Info: 26.11999999999999
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 267.50999838966254
[ Info: 216.4799982609868
[ Info: 196.63000003532366
[ Info: 75.76000114354103
Test Summary:        |
Clustering with dnet | No tests
inertia(cfft.distances) = 18.945391710476862
inertia(cdnet.distances) = 29.29630127909515
inertia(crand.distances) = 21.37537281736836
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4453125, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.4453125,"f1":null,"seconds":4.24310564994812e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":6.7734375,"distances_sum":1297.819666130259}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4453125,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.4453125,"f1":null,"seconds":4.24310564994812e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":6.7734375,"distances_sum":1297.819666130259}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8499953171828178,"seconds":4.8074871301651e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.4765625,"distances_sum":2348.697722596631}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6826171875,"f1":0.8027285214785224,"seconds":4.567205905914307e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.1875,"distances_sum":2035.2694452831795}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6982421875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6982421875,"f1":0.8123178904428914,"seconds":4.822388291358948e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.2421875,"distances_sum":2121.744829685435}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8588031759906768,"seconds":5.302950739860535e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.5546875,"distances_sum":2338.81540080238}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.736328125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.736328125,"f1":0.8364650974025982,"seconds":5.422160029411316e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.3515625,"distances_sum":2317.516497231463}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76171875,"state":{"ssize":8,"bsize":5},"perf":{"precision":1.0,"recall":0.76171875,"f1":0.8588031759906768,"seconds":5.302950739860535e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.5546875,"distances_sum":2338.81540080238}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9541723901098905,"seconds":5.9604644775390625e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.8203125,"distances_sum":3119.2246042854918}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9543383699633705,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.8125,"distances_sum":3131.7087983678166}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.941157280219781,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.765625,"distances_sum":2963.8103124541644}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9455242673992679,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.6953125,"distances_sum":3048.563231655511}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9291437728937733,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.625,"distances_sum":2916.6370785041127}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8486328125, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8486328125,"f1":0.9122741841491849,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.640625,"distances_sum":2761.063115448083}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9543383699633705,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.8125,"distances_sum":3131.7087983678166}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.919921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9543383699633705,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.8125,"distances_sum":3131.7087983678166}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5693359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5693359375,"f1":0.7110788517038523,"seconds":4.462897777557373e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.265625,"distances_sum":1343.8057977886006}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8462407384282393,"seconds":5.329027771949768e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.9921875,"distances_sum":1950.420467588687}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3955078125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3955078125,"f1":null,"seconds":3.764405846595764e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":6.4453125,"distances_sum":882.5674830198128}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8756046037296045,"seconds":5.219131708145142e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.3046875,"distances_sum":2106.019814204779}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7890625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7890625,"f1":0.8756046037296045,"seconds":5.219131708145142e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.3046875,"distances_sum":2106.019814204779}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9400576853701863,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.625,"distances_sum":2529.8330007963036}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9654418498168501,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8359375,"distances_sum":2745.271828394033}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.9159371878121885,"seconds":5.600973963737488e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.4296875,"distances_sum":2339.6412653687494}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9654418498168501,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8359375,"distances_sum":2745.271828394033}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":2,"bsize":13}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9806375915750917,"seconds":6.454065442085266e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9375,"distances_sum":2846.780329423576}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.9817937271062274,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.921875,"distances_sum":2859.141931933671}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9687156593406597,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8828125,"distances_sum":2753.2279550527555}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":11,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9733115842490847,"seconds":6.107613444328308e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8828125,"distances_sum":2792.1542452232493}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9677734375,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9817937271062274,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.921875,"distances_sum":2859.141931933671}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9677734375,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9817937271062274,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.921875,"distances_sum":2859.141931933671}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.197265625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.197265625,"f1":null,"seconds":3.647059202194214e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":6.765625,"distances_sum":535.6805200506291}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.177734375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.177734375,"f1":null,"seconds":3.432855010032654e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":6.65625,"distances_sum":452.018363799311}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1787109375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1787109375,"f1":null,"seconds":3.5334378480911255e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":6.890625,"distances_sum":463.49696665128147}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.197265625,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.197265625,"f1":null,"seconds":3.647059202194214e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":6.765625,"distances_sum":535.6805200506291}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4072265625, conf: {"ssize":9,"bsize":2}, perf: {"precision":null,"recall":0.4072265625,"f1":null,"seconds":3.9227306842803955e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":7.265625,"distances_sum":988.1938064176522}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7995129870129878,"seconds":5.077570676803589e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.3828125,"distances_sum":1756.1477540841674}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5537109375, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5537109375,"f1":0.6930132367632372,"seconds":4.45730984210968e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":7.75,"distances_sum":1350.324509057511}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8588874666999673,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.4375,"distances_sum":2132.0323587127205}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.59765625, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.59765625,"f1":0.7326083638583645,"seconds":4.587695002555847e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.265625,"distances_sum":1485.0028960494471}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.771484375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.771484375,"f1":0.8588874666999673,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.4375,"distances_sum":2132.0323587127205}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9458276098901104,"seconds":5.7462602853775024e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8671875,"distances_sum":2653.106359269961}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9480946137196142,"seconds":5.783513188362122e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.796875,"distances_sum":2670.435400352072}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8610811063936071,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.484375,"distances_sum":2120.3689791396573}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9480946137196142,"seconds":5.783513188362122e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.796875,"distances_sum":2670.435400352072}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.912109375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9480946137196142,"seconds":5.783513188362122e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.796875,"distances_sum":2670.435400352072}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.808057047119548,"seconds":5.327165126800537e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.484375,"distances_sum":1862.3969746189568}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.69140625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.69140625,"f1":0.808057047119548,"seconds":5.327165126800537e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.484375,"distances_sum":1862.3969746189568}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9331959706959714,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8125,"distances_sum":2633.4071336353454}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8600118631368638,"seconds":5.435198545455933e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.703125,"distances_sum":2141.490922378841}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.884765625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.884765625,"f1":0.9331959706959714,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8125,"distances_sum":2633.4071336353454}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9689961080586086,"seconds":6.476417183876038e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.90625,"distances_sum":2926.2151064991904}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9781650641025641,"seconds":6.495043635368347e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.953125,"distances_sum":2956.6973337767818}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9630093864468869,"seconds":6.1802566051483154e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.9609375,"distances_sum":2839.896200716577}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9781650641025641,"seconds":6.495043635368347e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.953125,"distances_sum":2956.6973337767818}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9781650641025641,"seconds":6.495043635368347e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.953125,"distances_sum":2956.6973337767818}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5458984375, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5458984375,"f1":0.6900321900321906,"seconds":4.542991518974304e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.1640625,"distances_sum":1398.3237599403806}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.158203125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.158203125,"f1":null,"seconds":3.1366944313049316e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":5.0546875,"distances_sum":418.7980957685407}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1591796875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1591796875,"f1":null,"seconds":3.160908818244934e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":5.078125,"distances_sum":444.04394927019536}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5458984375,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.5458984375,"f1":0.6900321900321906,"seconds":4.542991518974304e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.1640625,"distances_sum":1398.3237599403806}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.650390625, conf: {"ssize":1,"bsize":4}, perf: {"precision":null,"recall":0.650390625,"f1":null,"seconds":4.801899194717407e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.546875,"distances_sum":1715.8475156554969}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8721830253080262,"seconds":5.392357707023621e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.140625,"distances_sum":2176.9709996556826}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.81640625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.81640625,"f1":0.8905167748917756,"seconds":5.3104013204574585e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.1875,"distances_sum":2313.894825682319}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.81640625,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.81640625,"f1":0.8905167748917756,"seconds":5.3104013204574585e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.1875,"distances_sum":2313.894825682319}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9592490842490846,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.7734375,"distances_sum":2689.1798248985433}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9609260531135537,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.7890625,"distances_sum":2683.465480884353}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9265796703296707,"seconds":5.593523383140564e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.5078125,"distances_sum":2459.9426803592005}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.8985811063936071,"seconds":5.500391125679016e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.1875,"distances_sum":2371.5142527990643}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9609260531135537,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.7890625,"distances_sum":2683.465480884353}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9296875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9609260531135537,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.7890625,"distances_sum":2683.465480884353}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4013671875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4013671875,"f1":null,"seconds":4.159286618232727e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":6.125,"distances_sum":754.1927069529124}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":5,"bsize":4}, perf: {"precision":0.9879464285714286,"recall":0.662109375,"f1":0.7805075133200139,"seconds":5.384907126426697e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.96875,"distances_sum":1283.459826925238}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.662109375,"state":{"ssize":5,"bsize":4},"perf":{"precision":0.9879464285714286,"recall":0.662109375,"f1":0.7805075133200139,"seconds":5.384907126426697e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.96875,"distances_sum":1283.459826925238}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":8,"bsize":7}, perf: {"precision":0.9907924107142858,"recall":0.87890625,"f1":0.9267985920329675,"seconds":6.32554292678833e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.875,"distances_sum":1919.4242603417845}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9916573660714286,"recall":0.7548828125,"f1":0.848382411858975,"seconds":5.127862095832825e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.2890625,"distances_sum":1542.983294762686}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.806640625, conf: {"ssize":7,"bsize":5}, perf: {"precision":0.9940011160714285,"recall":0.806640625,"f1":0.8844458276098909,"seconds":5.718320608139038e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.5625,"distances_sum":1674.547111039947}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87890625,"state":{"ssize":8,"bsize":7},"perf":{"precision":0.9907924107142858,"recall":0.87890625,"f1":0.9267985920329675,"seconds":6.32554292678833e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.875,"distances_sum":1919.4242603417845}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":0.9868861607142857,"recall":0.8876953125,"f1":0.931453832625708,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8828125,"distances_sum":1951.7921013633447}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":0.9870721726190476,"recall":0.888671875,"f1":0.9288795839577091,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8515625,"distances_sum":1986.1160513313062}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.888671875,"state":{"ssize":1,"bsize":8},"perf":{"precision":0.9870721726190476,"recall":0.888671875,"f1":0.9288795839577091,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8515625,"distances_sum":1986.1160513313062}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.888671875,"state":{"ssize":1,"bsize":8},"perf":{"precision":0.9870721726190476,"recall":0.888671875,"f1":0.9288795839577091,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8515625,"distances_sum":1986.1160513313062}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.803634733322234,"seconds":4.47593629360199e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.4921875,"distances_sum":1424.3584091394978}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5673828125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5673828125,"f1":0.7026754495504501,"seconds":4.207715392112732e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.0703125,"distances_sum":1082.5778273225426}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.69140625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.69140625,"f1":0.803634733322234,"seconds":4.47593629360199e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.4921875,"distances_sum":1424.3584091394978}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9170959249084256,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.4453125,"distances_sum":1999.133597353186}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8712142024642033,"seconds":5.1353126764297485e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.0625,"distances_sum":1677.60916734764}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9183353105228115,"seconds":5.455687642097473e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.484375,"distances_sum":1949.7481591604096}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.859375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.859375,"f1":0.9183353105228115,"seconds":5.455687642097473e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.484375,"distances_sum":1949.7481591604096}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9416958041958048,"seconds":5.584210157394409e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.640625,"distances_sum":2134.6274106465453}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.960067536630037,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8125,"distances_sum":2220.689144416179}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9380093864468868,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.6171875,"distances_sum":2131.173992465844}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9267602189477198,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.5,"distances_sum":2004.6130142237994}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.948483287545788,"seconds":6.010755896568298e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7265625,"distances_sum":2159.9545849775727}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.960067536630037,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8125,"distances_sum":2220.689144416179}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.927734375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.960067536630037,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8125,"distances_sum":2220.689144416179}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41796875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.41796875,"f1":null,"seconds":3.680586814880371e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.1484375,"distances_sum":862.3091523018593}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.41796875,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.41796875,"f1":null,"seconds":3.680586814880371e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.1484375,"distances_sum":862.3091523018593}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.697265625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.697265625,"f1":0.8073306901431909,"seconds":4.6174973249435425e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.4921875,"distances_sum":1485.9515529057965}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.8994448260073268,"seconds":5.301088094711304e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.2890625,"distances_sum":1904.8554715101234}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8658143939393947,"seconds":5.152076482772827e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.8203125,"distances_sum":1704.2264474992844}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7978515625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7978515625,"f1":0.8801573426573432,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.9609375,"distances_sum":1757.8909885099195}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.689453125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.689453125,"f1":0.8033147408147415,"seconds":4.688277840614319e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.4765625,"distances_sum":1448.523001542071}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5595703125, conf: {"ssize":7,"bsize":3}, perf: {"precision":1.0,"recall":0.5595703125,"f1":0.6982113372738379,"seconds":4.371628165245056e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.8046875,"distances_sum":1162.04902613067}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6923828125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6923828125,"f1":0.8079285298035304,"seconds":4.591420292854309e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.6328125,"distances_sum":1480.6681271107852}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8310546875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8310546875,"f1":0.8994448260073268,"seconds":5.301088094711304e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.2890625,"distances_sum":1904.8554715101234}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.967467948717949,"seconds":6.1355531215667725e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8671875,"distances_sum":2318.243288741468}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.947335997335998,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.6796875,"distances_sum":2242.600767464713}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9430689102564107,"seconds":5.727633833885193e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.671875,"distances_sum":2221.3578215451525}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9464400183150189,"seconds":5.649402737617493e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.65625,"distances_sum":2231.758765814209}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.967467948717949,"seconds":6.1355531215667725e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8671875,"distances_sum":2318.243288741468}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.967467948717949,"seconds":6.1355531215667725e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8671875,"distances_sum":2318.243288741468}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.681640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.681640625,"f1":0.797863421300922,"seconds":4.420056939125061e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":7.5859375,"distances_sum":1423.3735452425215}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.681640625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.681640625,"f1":0.797863421300922,"seconds":4.420056939125061e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":7.5859375,"distances_sum":1423.3735452425215}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.8769808316683326,"seconds":5.185604095458984e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.171875,"distances_sum":1732.6550728400682}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9165813353313359,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.4765625,"distances_sum":1960.038230226892}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8564453125,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.8564453125,"f1":0.9165813353313359,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.4765625,"distances_sum":1960.038230226892}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9707589285714286,"seconds":6.577000021934509e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.921875,"distances_sum":2296.0526563516573}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9461569680319684,"seconds":5.7853758335113525e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.71875,"distances_sum":2151.224779124636}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9235805860805869,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.5625,"distances_sum":1967.5602867487776}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9707589285714286,"seconds":6.577000021934509e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.921875,"distances_sum":2296.0526563516573}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9707589285714286,"seconds":6.577000021934509e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.921875,"distances_sum":2296.0526563516573}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2099609375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2099609375,"f1":null,"seconds":3.125518560409546e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":5.2265625,"distances_sum":477.87659348649566}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2099609375,"state":{"ssize":4,"bsize":1},"perf":{"precision":null,"recall":0.2099609375,"f1":null,"seconds":3.125518560409546e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":5.2265625,"distances_sum":477.87659348649566}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3544921875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3544921875,"f1":null,"seconds":3.0566006898880005e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":5.359375,"distances_sum":762.7538874978299}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8690958347208356,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.2109375,"distances_sum":1742.2403374837295}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21484375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.21484375,"f1":null,"seconds":2.907589077949524e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":5.1796875,"distances_sum":506.8578092264792}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.783203125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.783203125,"f1":0.8690958347208356,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.2109375,"distances_sum":1742.2403374837295}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9289663461538467,"seconds":5.409121513366699e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.625,"distances_sum":2093.7217457190404}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9544871794871801,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.7421875,"distances_sum":2284.6025874207103}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9496909340659347,"seconds":5.48921525478363e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.6875,"distances_sum":2264.7735432739846}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.889885982073483,"seconds":5.247071385383606e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.3046875,"distances_sum":1858.1841540817913}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9544871794871801,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.7421875,"distances_sum":2284.6025874207103}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9189453125,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9544871794871801,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.7421875,"distances_sum":2284.6025874207103}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7373046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7373046875,"f1":0.8408849830724836,"seconds":4.930421710014343e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.1640625,"distances_sum":1615.3151712320293}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7963983932733941,"seconds":4.3585896492004395e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":7.609375,"distances_sum":1404.7583169801435}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7373046875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7373046875,"f1":0.8408849830724836,"seconds":4.930421710014343e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.1640625,"distances_sum":1615.3151712320293}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9374198717948724,"seconds":5.979090929031372e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.8984375,"distances_sum":2118.3917854153624}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.888671875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.888671875,"f1":0.9374198717948724,"seconds":5.979090929031372e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.8984375,"distances_sum":2118.3917854153624}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9719150641025645,"seconds":6.103888154029846e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.984375,"distances_sum":2324.8135904560436}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9439451173826181,"seconds":5.76116144657135e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.8125,"distances_sum":2209.6809806110623}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9719150641025645,"seconds":6.103888154029846e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.984375,"distances_sum":2324.8135904560436}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9719150641025645,"seconds":6.103888154029846e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.984375,"distances_sum":2324.8135904560436}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2314453125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2314453125,"f1":null,"seconds":3.4421682357788086e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.1640625,"distances_sum":456.57939411731354}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.792760191197692,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.3125,"distances_sum":1373.542182204346}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2451171875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2451171875,"f1":null,"seconds":3.6116689443588257e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.3515625,"distances_sum":513.2340367112996}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5654296875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5654296875,"f1":null,"seconds":4.407018423080444e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.703125,"distances_sum":1117.6457954060172}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6708984375,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6708984375,"f1":0.792760191197692,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.3125,"distances_sum":1373.542182204346}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9102767024642032,"seconds":5.723908543586731e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.890625,"distances_sum":1898.2956741902735}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.80373896936397,"seconds":4.902482032775879e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.2890625,"distances_sum":1394.7750017639023}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.7990738428238436,"seconds":5.042180418968201e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.2890625,"distances_sum":1377.3864295731569}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8466796875,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8466796875,"f1":0.9102767024642032,"seconds":5.723908543586731e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.890625,"distances_sum":1898.2956741902735}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9549507783882788,"seconds":6.0033053159713745e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.828125,"distances_sum":2216.2841576344777}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9214114010989016,"seconds":6.370991468429565e-5,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.875,"distances_sum":1982.6428612867992}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9549507783882788,"seconds":6.0033053159713745e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.828125,"distances_sum":2216.2841576344777}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.919921875,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9549507783882788,"seconds":6.0033053159713745e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.828125,"distances_sum":2216.2841576344777}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.515625,"f1":0.6649413086913092,"seconds":4.289671778678894e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.875,"distances_sum":1195.7194700041534}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.341796875, conf: {"ssize":3,"bsize":2}, perf: {"precision":1.0,"recall":0.341796875,"f1":0.4916826229326225,"seconds":3.4924596548080444e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":5.5390625,"distances_sum":798.78102829714}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.515625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.515625,"f1":0.6649413086913092,"seconds":4.289671778678894e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.875,"distances_sum":1195.7194700041534}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8682666292041301,"seconds":5.19677996635437e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.421875,"distances_sum":1890.4519396842097}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9301313270063277,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.734375,"distances_sum":2266.846980683524}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.548828125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.548828125,"f1":0.6931698509823516,"seconds":4.578381776809692e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.25,"distances_sum":1280.918245370937}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.64453125, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.64453125,"f1":0.7737411893661902,"seconds":4.867091774940491e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.03125,"distances_sum":1470.7521028896992}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.87890625,"f1":0.9301313270063277,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.734375,"distances_sum":2266.846980683524}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9514251373626379,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8203125,"distances_sum":2388.041934846813}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9560470779220782,"seconds":5.597248673439026e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8046875,"distances_sum":2440.5510393769796}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9752804487179488,"seconds":5.908310413360596e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9296875,"distances_sum":2549.892927125552}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9485176282051285,"seconds":5.992129445075989e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7890625,"distances_sum":2395.937082093392}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9752804487179488,"seconds":5.908310413360596e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9296875,"distances_sum":2549.892927125552}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9752804487179488,"seconds":5.908310413360596e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9296875,"distances_sum":2549.892927125552}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6591796875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6591796875,"f1":0.7832147019647028,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.484375,"distances_sum":1456.2116846927775}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6591796875,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6591796875,"f1":0.7832147019647028,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.484375,"distances_sum":1456.2116846927775}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7932753010878019,"seconds":5.511566996574402e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.546875,"distances_sum":1481.872241432185}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6611328125, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6611328125,"f1":0.7845305735930744,"seconds":5.498528480529785e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.453125,"distances_sum":1429.8891087456327}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6708984375,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6708984375,"f1":0.7932753010878019,"seconds":5.511566996574402e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.546875,"distances_sum":1481.872241432185}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9478365384615389,"seconds":5.671754479408264e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8515625,"distances_sum":2273.4995819282162}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9138366841491848,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8203125,"distances_sum":1993.7660368816908}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8540449134199143,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.6796875,"distances_sum":1731.5746184289915}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9483001373626379,"seconds":5.630776286125183e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.890625,"distances_sum":2235.729300541777}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9478365384615389,"seconds":5.671754479408264e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8515625,"distances_sum":2273.4995819282162}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91015625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9478365384615389,"seconds":5.671754479408264e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8515625,"distances_sum":2273.4995819282162}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8658289627039635,"seconds":4.688277840614319e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.953125,"distances_sum":1801.1761950679163}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3427734375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3427734375,"f1":null,"seconds":2.905726432800293e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":4.9921875,"distances_sum":783.4686316359602}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.77734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.77734375,"f1":0.8658289627039635,"seconds":4.688277840614319e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.953125,"distances_sum":1801.1761950679163}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9053602647352657,"seconds":4.98257577419281e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.171875,"distances_sum":2011.4657552054546}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8369140625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8369140625,"f1":0.9053602647352657,"seconds":4.98257577419281e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.171875,"distances_sum":2011.4657552054546}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9373085248085252,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.65625,"distances_sum":2225.096151067164}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8916015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8916015625,"f1":0.9373085248085252,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.65625,"distances_sum":2225.096151067164}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8916015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8916015625,"f1":0.9373085248085252,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.65625,"distances_sum":2225.096151067164}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8456148018648029,"seconds":5.038455128669739e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.0390625,"distances_sum":1687.3832780054163}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.515625,"f1":0.6687826062826069,"seconds":4.170462489128113e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":6.765625,"distances_sum":1059.0324301505045}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1787109375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1787109375,"f1":null,"seconds":3.254041075706482e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":4.9609375,"distances_sum":378.7234432419427}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.380859375, conf: {"ssize":2,"bsize":2}, perf: {"precision":1.0,"recall":0.380859375,"f1":0.5321602009102007,"seconds":3.779307007789612e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":6.234375,"distances_sum":840.5534845937365}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7509765625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7509765625,"f1":0.8456148018648029,"seconds":5.038455128669739e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.0390625,"distances_sum":1687.3832780054163}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9397435897435904,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.671875,"distances_sum":2188.7648708963166}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8524418290043299,"seconds":4.978850483894348e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.109375,"distances_sum":1673.156287807193}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8056640625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8056640625,"f1":0.8845617923742929,"seconds":5.086883902549744e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.0859375,"distances_sum":1875.4011899893476}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8889828921078927,"seconds":5.2638351917266846e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.15625,"distances_sum":1877.1444985115625}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.89453125,"state":{"ssize":8,"bsize":8},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.9397435897435904,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.671875,"distances_sum":2188.7648708963166}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9634901556776561,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8203125,"distances_sum":2299.1952556717683}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9546932234432242,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.7421875,"distances_sum":2261.985442143515}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":8,"bsize":12}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9686412545787548,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8671875,"distances_sum":2337.460828822654}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9482772435897441,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.671875,"distances_sum":2254.4840205595765}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9614983974358978,"seconds":5.584210157394409e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.796875,"distances_sum":2306.287475681755}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9505239552114557,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.640625,"distances_sum":2263.0452492037343}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":8,"bsize":12},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9686412545787548,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8671875,"distances_sum":2337.460828822654}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":8,"bsize":12},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9686412545787548,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8671875,"distances_sum":2337.460828822654}}, n: 9
inertia(cfft.distances) = 19.132137165775404
inertia(cdnet.distances) = 22.280194444444458
inertia(crand.distances) = 22.819446885825055
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.86
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8888888888888888
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333332
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8488888888888889
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9244444444444445
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.86
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8911111111111111
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9155555555555556
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9155555555555556
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9133333333333334
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8799999999999999
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9266666666666667
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9311111111111111
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8466666666666667
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9177777777777778
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8711111111111111
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9199999999999999
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.92
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9177777777777777
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9066666666666667
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.88
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9111111111111111
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.888888888888889
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9066666666666667
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX===== rocchio like>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX==== clustering>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
nc.class_map = [2, 1, 3, 2, 1, 3, 3, 3, 3, 3, 3, 2, 1, 3, 2, 3, 2, 3, 1, 3, 3]
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.92
*** finished computation of 12 references, err: [Inf, 0.4934854018688202] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 26]]
** centroid: 1, normalized-entropy: 0.22853814395352806, [(2, 1), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 18, 4]]
** centroid: 6, normalized-entropy: 0.6840384356390419, [(2, 18), (3, 4)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 10: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 2, 4]]
** centroid: 12, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 4)]
finished with 14 centroids; started with 12
acc = 0.98
Test Summary:   | Pass  Total
NearestCentroid |   10     10
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.43677431225776675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.43677431225776675, 0.3824385794252157] ***
*** finished computation of 7 references, err: [Inf, 0.43677431225776675, 0.3824385794252157] ***
*** center 1: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 2, 12]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(2, 2), (3, 12)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 9, 11]]
** centroid: 5, normalized-entropy: 0.9927744539878083, [(2, 9), (3, 11)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 21, 1]]
*** center 7: selecting labels [1] (freq >= 2) [from [3, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.9558628465235234] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9558628465235234, 0.6112068672478199] ***
*** starting iteration: 2; err: [Inf, 0.9558628465235234, 0.6112068672478199] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9558628465235234, 0.6112068672478199, 0.6097037726640702] ***
*** starting iteration: 3; err: [Inf, 0.9558628465235234, 0.6112068672478199, 0.6097037726640702] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9558628465235234, 0.6112068672478199, 0.6097037726640702, 0.6074434724450112] ***
*** finished computation of 3 references, err: [Inf, 0.9558628465235234, 0.6112068672478199, 0.6097037726640702, 0.6074434724450112] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 7, 34]]
** centroid: 1, normalized-entropy: 0.6593758812786991, [(2, 7), (3, 34)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 25, 1]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6237457899749279] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6237457899749279, 0.39248235546052457] ***
*** finished computation of 7 references, err: [Inf, 0.6237457899749279, 0.39248235546052457] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 1, 4]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 14, 1]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 12]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 15, 5]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 15), (3, 5)]
*** center 6: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5228564268350602] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5228564268350602, 0.41131564021110534] ***
*** finished computation of 7 references, err: [Inf, 0.5228564268350602, 0.41131564021110534] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 12, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 12, 2]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(2, 12), (3, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [21, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 12, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 2, 6]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(2, 2), (3, 6)]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 22]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.253136115670204] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.253136115670204, 0.611824332177639] ***
*** starting iteration: 2; err: [Inf, 1.253136115670204, 0.611824332177639] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.253136115670204, 0.611824332177639, 0.5127994237840175] ***
*** starting iteration: 3; err: [Inf, 1.253136115670204, 0.611824332177639, 0.5127994237840175] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.253136115670204, 0.611824332177639, 0.5127994237840175, 0.5084318561851978] ***
*** finished computation of 3 references, err: [Inf, 1.253136115670204, 0.611824332177639, 0.5127994237840175, 0.5084318561851978] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 25, 1]]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 7, 34]]
** centroid: 3, normalized-entropy: 0.6593758812786991, [(2, 7), (3, 34)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7569458657503128] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7569458657503128, 0.6076310270279646] ***
*** starting iteration: 2; err: [Inf, 0.7569458657503128, 0.6076310270279646] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7569458657503128, 0.6076310270279646, 0.5314608772844076] ***
*** starting iteration: 3; err: [Inf, 0.7569458657503128, 0.6076310270279646, 0.5314608772844076] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7569458657503128, 0.6076310270279646, 0.5314608772844076, 0.5268716520816088] ***
*** finished computation of 3 references, err: [Inf, 0.7569458657503128, 0.6076310270279646, 0.5314608772844076, 0.5268716520816088] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 27, 6]]
** centroid: 1, normalized-entropy: 0.6840384356390419, [(2, 27), (3, 6)]
*** center 2: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 3, 29]]
** centroid: 3, normalized-entropy: 0.44886448872302936, [(2, 3), (3, 29)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7692261579632759] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7692261579632759, 0.5684277997165919] ***
*** starting iteration: 2; err: [Inf, 0.7692261579632759, 0.5684277997165919] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7692261579632759, 0.5684277997165919, 0.5631812236458064] ***
*** starting iteration: 3; err: [Inf, 0.7692261579632759, 0.5684277997165919, 0.5631812236458064] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7692261579632759, 0.5684277997165919, 0.5631812236458064, 0.562636823579669] ***
*** finished computation of 3 references, err: [Inf, 0.7692261579632759, 0.5684277997165919, 0.5631812236458064, 0.562636823579669] ***
*** center 1: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 34, 4]]
** centroid: 2, normalized-entropy: 0.48546076074591343, [(2, 34), (3, 4)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 4, 26]]
** centroid: 3, normalized-entropy: 0.5665095065529052, [(2, 4), (3, 26)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.3886828470230101] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3886828470230101, 0.7432067169249058] ***
*** starting iteration: 2; err: [Inf, 1.3886828470230101, 0.7432067169249058] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3886828470230101, 0.7432067169249058, 0.610412290841341] ***
*** starting iteration: 3; err: [Inf, 1.3886828470230101, 0.7432067169249058, 0.610412290841341] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3886828470230101, 0.7432067169249058, 0.610412290841341, 0.6074434724450112] ***
*** starting iteration: 4; err: [Inf, 1.3886828470230101, 0.7432067169249058, 0.610412290841341, 0.6074434724450112] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3886828470230101, 0.7432067169249058, 0.610412290841341, 0.6074434724450112, 0.6071515579521656] ***
*** finished computation of 3 references, err: [Inf, 1.3886828470230101, 0.7432067169249058, 0.610412290841341, 0.6074434724450112, 0.6071515579521656] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 8, 34]]
** centroid: 1, normalized-entropy: 0.7024665512903904, [(2, 8), (3, 34)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 24, 1]]
** centroid: 2, normalized-entropy: 0.24229218908241482, [(2, 24), (3, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9151092027127743] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9151092027127743, 0.6423452680557966] ***
*** starting iteration: 2; err: [Inf, 0.9151092027127743, 0.6423452680557966] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9151092027127743, 0.6423452680557966, 0.6349425987154246] ***
*** starting iteration: 3; err: [Inf, 0.9151092027127743, 0.6423452680557966, 0.6349425987154246] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9151092027127743, 0.6423452680557966, 0.6349425987154246, 0.6298205990344286] ***
*** starting iteration: 4; err: [Inf, 0.9151092027127743, 0.6423452680557966, 0.6349425987154246, 0.6298205990344286] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9151092027127743, 0.6423452680557966, 0.6349425987154246, 0.6298205990344286, 0.6254470478743315] ***
*** starting iteration: 5; err: [Inf, 0.9151092027127743, 0.6423452680557966, 0.6349425987154246, 0.6298205990344286, 0.6254470478743315] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9151092027127743, 0.6423452680557966, 0.6349425987154246, 0.6298205990344286, 0.6254470478743315, 0.6264406765252352] ***
*** finished computation of 3 references, err: [Inf, 0.9151092027127743, 0.6423452680557966, 0.6349425987154246, 0.6298205990344286, 0.6254470478743315, 0.6264406765252352] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 25]]
** centroid: 1, normalized-entropy: 0.23519338181924157, [(2, 1), (3, 25)]
*** center 2: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 29, 10]]
** centroid: 3, normalized-entropy: 0.8212809417449864, [(2, 29), (3, 10)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9459339264780283] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9459339264780283, 0.8581232950091362] ***
*** starting iteration: 2; err: [Inf, 0.9459339264780283, 0.8581232950091362] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9459339264780283, 0.8581232950091362, 0.8676783239841461] ***
*** finished computation of 3 references, err: [Inf, 0.9459339264780283, 0.8581232950091362, 0.8676783239841461] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 35, 30]]
** centroid: 1, normalized-entropy: 0.9957274520849256, [(2, 35), (3, 30)]
*** center 2: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [17, 3, 0]]
** centroid: 3, normalized-entropy: 0.6098403047164005, [(1, 17), (2, 3)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.755337121039629] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.755337121039629, 0.4223643895611167] ***
*** finished computation of 7 references, err: [Inf, 0.755337121039629, 0.4223643895611167] ***
*** center 1: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 11, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 11, 1]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 2, 34]]
** centroid: 4, normalized-entropy: 0.3095434291503252, [(2, 2), (3, 34)]
*** center 5: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 3, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 5, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7952877740561962] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7952877740561962, 0.4498270207643509] ***
*** finished computation of 7 references, err: [Inf, 0.7952877740561962, 0.4498270207643509] ***
*** center 1: selecting labels [1] (freq >= 2) [from [23, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 2, 19]]
** centroid: 3, normalized-entropy: 0.45371633918694493, [(2, 2), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 28, 10]]
** centroid: 6, normalized-entropy: 0.8314743880097292, [(2, 28), (3, 10)]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5539426854252816] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5539426854252816, 0.4426602759957314] ***
*** finished computation of 7 references, err: [Inf, 0.5539426854252816, 0.4426602759957314] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 11, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 1, 25]]
*** center 5: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 26, 5]]
** centroid: 7, normalized-entropy: 0.6373874992221911, [(2, 26), (3, 5)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.8102673505246639] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8102673505246639, 0.61245256960392] ***
*** finished computation of 3 references, err: [Inf, 0.8102673505246639, 0.61245256960392] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 4, 34]]
** centroid: 1, normalized-entropy: 0.48546076074591343, [(2, 4), (3, 34)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 28, 1]]
** centroid: 3, normalized-entropy: 0.21639693245126485, [(2, 28), (3, 1)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.947357181161642] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.947357181161642, 0.6460520225763321] ***
*** finished computation of 3 references, err: [Inf, 0.947357181161642, 0.6460520225763321] ***
*** center 1: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 5, 32]]
** centroid: 2, normalized-entropy: 0.5713549744279549, [(2, 5), (3, 32)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 25, 3]]
** centroid: 3, normalized-entropy: 0.4912373418243334, [(2, 25), (3, 3)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.715426278114319] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.715426278114319, 0.9038629196584225] ***
*** finished computation of 3 references, err: [Inf, 2.715426278114319, 0.9038629196584225] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 38, 30]]
** centroid: 1, normalized-entropy: 0.9899927915575186, [(2, 38), (3, 30)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7877331449091435] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7877331449091435, 0.5081256973743439] ***
*** finished computation of 3 references, err: [Inf, 0.7877331449091435, 0.5081256973743439] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 8, 34]]
** centroid: 1, normalized-entropy: 0.7024665512903904, [(2, 8), (3, 34)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 24, 1]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.4874442160129546] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4874442160129546, 0.8574943347275257] ***
*** finished computation of 3 references, err: [Inf, 1.4874442160129546, 0.8574943347275257] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 16, 34]]
** centroid: 1, normalized-entropy: 0.9043814577244941, [(2, 16), (3, 34)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [35, 2, 0]]
** centroid: 2, normalized-entropy: 0.30337483608641397, [(1, 35), (2, 2)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 12, 1]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.5767937828600407] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.5767937828600407, 0.7541536100953817] ***
*** finished computation of 3 references, err: [Inf, 2.5767937828600407, 0.7541536100953817] ***
*** center 1: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [21, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 38, 30]]
** centroid: 3, normalized-entropy: 0.9899927915575186, [(2, 38), (3, 30)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7342632715404034] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7342632715404034, 0.5153247436881065] ***
*** starting iteration: 2; err: [Inf, 0.7342632715404034, 0.5153247436881065] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7342632715404034, 0.5153247436881065, 0.5081256973743439] ***
*** starting iteration: 3; err: [Inf, 0.7342632715404034, 0.5153247436881065, 0.5081256973743439] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7342632715404034, 0.5153247436881065, 0.5081256973743439, 0.5081256973743439] ***
*** finished computation of 3 references, err: [Inf, 0.7342632715404034, 0.5153247436881065, 0.5081256973743439, 0.5081256973743439] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 8, 34]]
** centroid: 2, normalized-entropy: 0.7024665512903904, [(2, 8), (3, 34)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 24, 1]]
** centroid: 3, normalized-entropy: 0.24229218908241482, [(2, 24), (3, 1)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.3363078798353671] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3363078798353671, 0.7736031858623028] ***
*** starting iteration: 2; err: [Inf, 1.3363078798353671, 0.7736031858623028] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3363078798353671, 0.7736031858623028, 0.5782848671078682] ***
*** starting iteration: 3; err: [Inf, 1.3363078798353671, 0.7736031858623028, 0.5782848671078682] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3363078798353671, 0.7736031858623028, 0.5782848671078682, 0.5490946559607983] ***
*** starting iteration: 4; err: [Inf, 1.3363078798353671, 0.7736031858623028, 0.5782848671078682, 0.5490946559607983] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3363078798353671, 0.7736031858623028, 0.5782848671078682, 0.5490946559607983, 0.5288664395362139] ***
*** starting iteration: 5; err: [Inf, 1.3363078798353671, 0.7736031858623028, 0.5782848671078682, 0.5490946559607983, 0.5288664395362139] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3363078798353671, 0.7736031858623028, 0.5782848671078682, 0.5490946559607983, 0.5288664395362139, 0.5238991243392229] ***
*** starting iteration: 6; err: [Inf, 1.3363078798353671, 0.7736031858623028, 0.5782848671078682, 0.5490946559607983, 0.5288664395362139, 0.5238991243392229] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3363078798353671, 0.7736031858623028, 0.5782848671078682, 0.5490946559607983, 0.5288664395362139, 0.5238991243392229, 0.5238991243392229] ***
*** finished computation of 3 references, err: [Inf, 1.3363078798353671, 0.7736031858623028, 0.5782848671078682, 0.5490946559607983, 0.5288664395362139, 0.5238991243392229, 0.5238991243392229] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 30, 10]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 30), (3, 10)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 25]]
*** center 3: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9551779492199421] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9551779492199421, 0.5798199888318777] ***
*** starting iteration: 2; err: [Inf, 0.9551779492199421, 0.5798199888318777] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9551779492199421, 0.5798199888318777, 0.5749855607002974] ***
*** starting iteration: 3; err: [Inf, 0.9551779492199421, 0.5798199888318777, 0.5749855607002974] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9551779492199421, 0.5798199888318777, 0.5749855607002974, 0.5701739821583033] ***
*** starting iteration: 4; err: [Inf, 0.9551779492199421, 0.5798199888318777, 0.5749855607002974, 0.5701739821583033] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9551779492199421, 0.5798199888318777, 0.5749855607002974, 0.5701739821583033, 0.5631812236458064] ***
*** starting iteration: 5; err: [Inf, 0.9551779492199421, 0.5798199888318777, 0.5749855607002974, 0.5701739821583033, 0.5631812236458064] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9551779492199421, 0.5798199888318777, 0.5749855607002974, 0.5701739821583033, 0.5631812236458064, 0.562636823579669] ***
*** finished computation of 3 references, err: [Inf, 0.9551779492199421, 0.5798199888318777, 0.5749855607002974, 0.5701739821583033, 0.5631812236458064, 0.562636823579669] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 4, 26]]
** centroid: 1, normalized-entropy: 0.5665095065529052, [(2, 4), (3, 26)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 34, 4]]
** centroid: 2, normalized-entropy: 0.48546076074591343, [(2, 34), (3, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9528892742097378] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9528892742097378, 0.5068228997290134] ***
*** finished computation of 7 references, err: [Inf, 0.9528892742097378, 0.5068228997290134] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 2, 13]]
** centroid: 1, normalized-entropy: 0.5665095065529052, [(2, 2), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 3, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 5, 21]]
** centroid: 4, normalized-entropy: 0.7062740891876008, [(2, 5), (3, 21)]
*** center 5: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6448038775473833] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6448038775473833, 0.47441249422729015] ***
*** finished computation of 7 references, err: [Inf, 0.6448038775473833, 0.47441249422729015] ***
*** center 1: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 2, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 20, 10]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 20), (3, 10)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 1, 18]]
** centroid: 7, normalized-entropy: 0.2974722489192896, [(2, 1), (3, 18)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.9341863338649273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9341863338649273, 0.5885531205683947] ***
*** finished computation of 7 references, err: [Inf, 0.9341863338649273, 0.5885531205683947] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [9, 2, 0]]
** centroid: 3, normalized-entropy: 0.6840384356390419, [(1, 9), (2, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 36, 8]]
** centroid: 4, normalized-entropy: 0.6840384356390419, [(2, 36), (3, 8)]
*** center 5: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6207072539627552] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6207072539627552, 0.48345128625631334] ***
*** starting iteration: 2; err: [Inf, 0.6207072539627552, 0.48345128625631334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6207072539627552, 0.48345128625631334, 0.4767817857861519] ***
*** starting iteration: 3; err: [Inf, 0.6207072539627552, 0.48345128625631334, 0.4767817857861519] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6207072539627552, 0.48345128625631334, 0.4767817857861519, 0.47512398451566695] ***
*** finished computation of 7 references, err: [Inf, 0.6207072539627552, 0.48345128625631334, 0.4767817857861519, 0.47512398451566695] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 4, 16]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 16)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 14, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 4: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 14, 1]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
*** center 7: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [0, 0, 1]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6350306458771229] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6350306458771229, 0.44668906442821027] ***
*** starting iteration: 2; err: [Inf, 0.6350306458771229, 0.44668906442821027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6350306458771229, 0.44668906442821027, 0.4322816331684589] ***
*** starting iteration: 3; err: [Inf, 0.6350306458771229, 0.44668906442821027, 0.4322816331684589] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6350306458771229, 0.44668906442821027, 0.4322816331684589, 0.4311237569898367] ***
*** finished computation of 7 references, err: [Inf, 0.6350306458771229, 0.44668906442821027, 0.4322816331684589, 0.4311237569898367] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 11, 1]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 15, 9]]
** centroid: 4, normalized-entropy: 0.954434002924965, [(2, 15), (3, 9)]
*** center 5: selecting labels [1] (freq >= 2) [from [21, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 4, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6526087238639593] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6526087238639593, 0.5350105717778206] ***
*** starting iteration: 2; err: [Inf, 0.6526087238639593, 0.5350105717778206] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6526087238639593, 0.5350105717778206, 0.5142778952419758] ***
*** starting iteration: 3; err: [Inf, 0.6526087238639593, 0.5350105717778206, 0.5142778952419758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6526087238639593, 0.5350105717778206, 0.5142778952419758, 0.5098375625908375] ***
*** finished computation of 7 references, err: [Inf, 0.6526087238639593, 0.5350105717778206, 0.5142778952419758, 0.5098375625908375] ***
*** center 1: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 19, 12]]
** centroid: 4, normalized-entropy: 0.9629004147713269, [(2, 19), (3, 12)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 19, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 18]]
*** center 7: selecting labels [1] (freq >= 2) [from [7, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.1443838407099247] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1443838407099247, 0.6272131306678057] ***
*** starting iteration: 2; err: [Inf, 1.1443838407099247, 0.6272131306678057] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1443838407099247, 0.6272131306678057, 0.6266871378570795] ***
*** finished computation of 3 references, err: [Inf, 1.1443838407099247, 0.6272131306678057, 0.6266871378570795] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 29, 11]]
** centroid: 1, normalized-entropy: 0.8485481782946159, [(2, 29), (3, 11)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 24]]
*** center 3: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9336781495809555] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9336781495809555, 0.712040762603283] ***
*** starting iteration: 2; err: [Inf, 0.9336781495809555, 0.712040762603283] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9336781495809555, 0.712040762603283, 0.6880157808959484] ***
*** starting iteration: 3; err: [Inf, 0.9336781495809555, 0.712040762603283, 0.6880157808959484] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9336781495809555, 0.712040762603283, 0.6880157808959484, 0.6783283463120461] ***
*** finished computation of 3 references, err: [Inf, 0.9336781495809555, 0.712040762603283, 0.6880157808959484, 0.6783283463120461] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 38, 5]]
** centroid: 1, normalized-entropy: 0.5185697317883058, [(2, 38), (3, 5)]
*** center 2: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 25]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0173615969717502] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0173615969717502, 0.612108441144228] ***
*** starting iteration: 2; err: [Inf, 1.0173615969717502, 0.612108441144228] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0173615969717502, 0.612108441144228, 0.6075677838921547] ***
*** starting iteration: 3; err: [Inf, 1.0173615969717502, 0.612108441144228, 0.6075677838921547] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0173615969717502, 0.612108441144228, 0.6075677838921547, 0.6075677838921547] ***
*** finished computation of 3 references, err: [Inf, 1.0173615969717502, 0.612108441144228, 0.6075677838921547, 0.6075677838921547] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 8, 34]]
** centroid: 1, normalized-entropy: 0.7024665512903904, [(2, 8), (3, 34)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 24, 1]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.115078360438347] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.115078360438347, 0.6323346623033285] ***
*** starting iteration: 2; err: [Inf, 1.115078360438347, 0.6323346623033285] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.115078360438347, 0.6323346623033285, 0.6266871378570795] ***
*** starting iteration: 3; err: [Inf, 1.115078360438347, 0.6323346623033285, 0.6266871378570795] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.115078360438347, 0.6323346623033285, 0.6266871378570795, 0.6264554350823164] ***
*** finished computation of 3 references, err: [Inf, 1.115078360438347, 0.6323346623033285, 0.6266871378570795, 0.6264554350823164] ***
*** center 1: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 24]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 29, 11]]
** centroid: 3, normalized-entropy: 0.8485481782946159, [(2, 29), (3, 11)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.109642308652401] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.109642308652401, 0.7189158497750759] ***
*** starting iteration: 2; err: [Inf, 1.109642308652401, 0.7189158497750759] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.109642308652401, 0.7189158497750759, 0.6916045291721821] ***
*** starting iteration: 3; err: [Inf, 1.109642308652401, 0.7189158497750759, 0.6916045291721821] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.109642308652401, 0.7189158497750759, 0.6916045291721821, 0.6783283463120461] ***
*** starting iteration: 4; err: [Inf, 1.109642308652401, 0.7189158497750759, 0.6916045291721821, 0.6783283463120461] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.109642308652401, 0.7189158497750759, 0.6916045291721821, 0.6783283463120461, 0.6743021649122238] ***
*** starting iteration: 5; err: [Inf, 1.109642308652401, 0.7189158497750759, 0.6916045291721821, 0.6783283463120461, 0.6743021649122238] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.109642308652401, 0.7189158497750759, 0.6916045291721821, 0.6783283463120461, 0.6743021649122238, 0.6731753695011139] ***
*** starting iteration: 6; err: [Inf, 1.109642308652401, 0.7189158497750759, 0.6916045291721821, 0.6783283463120461, 0.6743021649122238, 0.6731753695011139] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.109642308652401, 0.7189158497750759, 0.6916045291721821, 0.6783283463120461, 0.6743021649122238, 0.6731753695011139, 0.6726830661296844] ***
*** finished computation of 3 references, err: [Inf, 1.109642308652401, 0.7189158497750759, 0.6916045291721821, 0.6783283463120461, 0.6743021649122238, 0.6731753695011139, 0.6726830661296844] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 36, 5]]
** centroid: 1, normalized-entropy: 0.5349436990971067, [(2, 36), (3, 5)]
*** center 2: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 2, 25]]
** centroid: 3, normalized-entropy: 0.38094658570539014, [(2, 2), (3, 25)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0947659328579902] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0947659328579902, 0.6491310131549836] ***
*** finished computation of 3 references, err: [Inf, 1.0947659328579902, 0.6491310131549836] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 31, 14]]
** centroid: 1, normalized-entropy: 0.8944518845341284, [(2, 31), (3, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 21]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0705391836166382] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0705391836166382, 0.6323346623033285] ***
*** finished computation of 3 references, err: [Inf, 1.0705391836166382, 0.6323346623033285] ***
*** center 1: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 24]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 30, 11]]
** centroid: 3, normalized-entropy: 0.8390040613676978, [(2, 30), (3, 11)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0441757598519326] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0441757598519326, 0.6783283463120461] ***
*** finished computation of 3 references, err: [Inf, 1.0441757598519326, 0.6783283463120461] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 38, 5]]
** centroid: 1, normalized-entropy: 0.5185697317883058, [(2, 38), (3, 5)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 25]]
*** center 3: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5810838434100151] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5810838434100151, 0.40634961917996404] ***
*** starting iteration: 2; err: [Inf, 0.5810838434100151, 0.40634961917996404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5810838434100151, 0.40634961917996404, 0.3868120139092207] ***
*** starting iteration: 3; err: [Inf, 0.5810838434100151, 0.40634961917996404, 0.3868120139092207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5810838434100151, 0.40634961917996404, 0.3868120139092207, 0.38411992058157923] ***
*** starting iteration: 4; err: [Inf, 0.5810838434100151, 0.40634961917996404, 0.3868120139092207, 0.38411992058157923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5810838434100151, 0.40634961917996404, 0.3868120139092207, 0.38411992058157923, 0.3786887417733669] ***
*** starting iteration: 5; err: [Inf, 0.5810838434100151, 0.40634961917996404, 0.3868120139092207, 0.38411992058157923, 0.3786887417733669] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5810838434100151, 0.40634961917996404, 0.3868120139092207, 0.38411992058157923, 0.3786887417733669, 0.3685164346545935] ***
*** starting iteration: 6; err: [Inf, 0.5810838434100151, 0.40634961917996404, 0.3868120139092207, 0.38411992058157923, 0.3786887417733669, 0.3685164346545935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5810838434100151, 0.40634961917996404, 0.3868120139092207, 0.38411992058157923, 0.3786887417733669, 0.3685164346545935, 0.3629014509171247] ***
*** starting iteration: 7; err: [Inf, 0.5810838434100151, 0.40634961917996404, 0.3868120139092207, 0.38411992058157923, 0.3786887417733669, 0.3685164346545935, 0.3629014509171247] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5810838434100151, 0.40634961917996404, 0.3868120139092207, 0.38411992058157923, 0.3786887417733669, 0.3685164346545935, 0.3629014509171247, 0.3618974737077951] ***
*** starting iteration: 8; err: [Inf, 0.5810838434100151, 0.40634961917996404, 0.3868120139092207, 0.38411992058157923, 0.3786887417733669, 0.3685164346545935, 0.3629014509171247, 0.3618974737077951] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5810838434100151, 0.40634961917996404, 0.3868120139092207, 0.38411992058157923, 0.3786887417733669, 0.3685164346545935, 0.3629014509171247, 0.3618974737077951, 0.3618974737077951] ***
*** finished computation of 7 references, err: [Inf, 0.5810838434100151, 0.40634961917996404, 0.3868120139092207, 0.38411992058157923, 0.3786887417733669, 0.3685164346545935, 0.3629014509171247, 0.3618974737077951, 0.3618974737077951] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 11, 13]]
** centroid: 1, normalized-entropy: 0.9949848281859699, [(2, 11), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 5, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4985730518400669] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4985730518400669, 0.39165198519825933] ***
*** starting iteration: 2; err: [Inf, 0.4985730518400669, 0.39165198519825933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4985730518400669, 0.39165198519825933, 0.366798305734992] ***
*** starting iteration: 3; err: [Inf, 0.4985730518400669, 0.39165198519825933, 0.366798305734992] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4985730518400669, 0.39165198519825933, 0.366798305734992, 0.35982125587761404] ***
*** starting iteration: 4; err: [Inf, 0.4985730518400669, 0.39165198519825933, 0.366798305734992, 0.35982125587761404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4985730518400669, 0.39165198519825933, 0.366798305734992, 0.35982125587761404, 0.3592442474514246] ***
*** finished computation of 7 references, err: [Inf, 0.4985730518400669, 0.39165198519825933, 0.366798305734992, 0.35982125587761404, 0.3592442474514246] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 2: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 11, 1]]
** centroid: 3, normalized-entropy: 0.4138168503036336, [(2, 11), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 6, 10]]
** centroid: 7, normalized-entropy: 0.954434002924965, [(2, 6), (3, 10)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5339918640255928] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5339918640255928, 0.42681947819888594] ***
*** starting iteration: 2; err: [Inf, 0.5339918640255928, 0.42681947819888594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5339918640255928, 0.42681947819888594, 0.4152047514915466] ***
*** starting iteration: 3; err: [Inf, 0.5339918640255928, 0.42681947819888594, 0.4152047514915466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5339918640255928, 0.42681947819888594, 0.4152047514915466, 0.4108718922734261] ***
*** starting iteration: 4; err: [Inf, 0.5339918640255928, 0.42681947819888594, 0.4152047514915466, 0.4108718922734261] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5339918640255928, 0.42681947819888594, 0.4152047514915466, 0.4108718922734261, 0.40863426730036734] ***
*** starting iteration: 5; err: [Inf, 0.5339918640255928, 0.42681947819888594, 0.4152047514915466, 0.4108718922734261, 0.40863426730036734] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5339918640255928, 0.42681947819888594, 0.4152047514915466, 0.4108718922734261, 0.40863426730036734, 0.40367048561573027] ***
*** starting iteration: 6; err: [Inf, 0.5339918640255928, 0.42681947819888594, 0.4152047514915466, 0.4108718922734261, 0.40863426730036734, 0.40367048561573027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5339918640255928, 0.42681947819888594, 0.4152047514915466, 0.4108718922734261, 0.40863426730036734, 0.40367048561573027, 0.3988437373936176] ***
*** starting iteration: 7; err: [Inf, 0.5339918640255928, 0.42681947819888594, 0.4152047514915466, 0.4108718922734261, 0.40863426730036734, 0.40367048561573027, 0.3988437373936176] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5339918640255928, 0.42681947819888594, 0.4152047514915466, 0.4108718922734261, 0.40863426730036734, 0.40367048561573027, 0.3988437373936176, 0.3976421369612217] ***
*** starting iteration: 8; err: [Inf, 0.5339918640255928, 0.42681947819888594, 0.4152047514915466, 0.4108718922734261, 0.40863426730036734, 0.40367048561573027, 0.3988437373936176, 0.3976421369612217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5339918640255928, 0.42681947819888594, 0.4152047514915466, 0.4108718922734261, 0.40863426730036734, 0.40367048561573027, 0.3988437373936176, 0.3976421369612217, 0.3960271254181862] ***
*** starting iteration: 9; err: [Inf, 0.5339918640255928, 0.42681947819888594, 0.4152047514915466, 0.4108718922734261, 0.40863426730036734, 0.40367048561573027, 0.3988437373936176, 0.3976421369612217, 0.3960271254181862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5339918640255928, 0.42681947819888594, 0.4152047514915466, 0.4108718922734261, 0.40863426730036734, 0.40367048561573027, 0.3988437373936176, 0.3976421369612217, 0.3960271254181862, 0.39591932415962217] ***
*** finished computation of 7 references, err: [Inf, 0.5339918640255928, 0.42681947819888594, 0.4152047514915466, 0.4108718922734261, 0.40863426730036734, 0.40367048561573027, 0.3988437373936176, 0.3976421369612217, 0.3960271254181862, 0.39591932415962217] ***
*** center 1: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 22, 4]]
** centroid: 3, normalized-entropy: 0.6193821946787638, [(2, 22), (3, 4)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6111495897173882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6111495897173882, 0.3976148045063019] ***
*** finished computation of 7 references, err: [Inf, 0.6111495897173882, 0.3976148045063019] ***
*** center 1: selecting labels [1] (freq >= 1) [from [26, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 13, 4]]
** centroid: 3, normalized-entropy: 0.787126586201269, [(2, 13), (3, 4)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 11, 9]]
** centroid: 4, normalized-entropy: 0.9927744539878083, [(2, 11), (3, 9)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5443193507194519] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5443193507194519, 0.3959405706822872] ***
*** finished computation of 7 references, err: [Inf, 0.5443193507194519, 0.3959405706822872] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 19]]
** centroid: 1, normalized-entropy: 0.2863969571159561, [(2, 1), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 10, 1]]
** centroid: 3, normalized-entropy: 0.43949698692151346, [(2, 10), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 19, 8]]
** centroid: 4, normalized-entropy: 0.876716288999464, [(2, 19), (3, 8)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 6: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5652697744965554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5652697744965554, 0.420173432379961] ***
*** finished computation of 7 references, err: [Inf, 0.5652697744965554, 0.420173432379961] ***
*** center 1: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 27, 3]]
** centroid: 3, normalized-entropy: 0.46899559358928133, [(2, 27), (3, 3)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 4, 16]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 16)]
*** center 5: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7749064464867115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7749064464867115, 0.48203323274850846] ***
*** finished computation of 7 references, err: [Inf, 0.7749064464867115, 0.48203323274850846] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 2, 6]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 2), (3, 6)]
*** center 2: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 16, 1]]
** centroid: 3, normalized-entropy: 0.32275695889739825, [(2, 16), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 14, 13]]
** centroid: 4, normalized-entropy: 0.9990102708804813, [(2, 14), (3, 13)]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6490156924724579] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6490156924724579, 0.44790181443095206] ***
*** finished computation of 7 references, err: [Inf, 0.6490156924724579, 0.44790181443095206] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 5, 13]]
** centroid: 1, normalized-entropy: 0.8524051786494784, [(2, 5), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 6, 1]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(2, 6), (3, 1)]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 5: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6978577513992786] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6978577513992786, 0.4786931961774826] ***
*** finished computation of 7 references, err: [Inf, 0.6978577513992786, 0.4786931961774826] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 24, 4]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(2, 24), (3, 4)]
*** center 2: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5932798644900322] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5932798644900322, 0.3955093991756439] ***
*** starting iteration: 2; err: [Inf, 0.5932798644900322, 0.3955093991756439] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5932798644900322, 0.3955093991756439, 0.3778846473991871] ***
*** starting iteration: 3; err: [Inf, 0.5932798644900322, 0.3955093991756439, 0.3778846473991871] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5932798644900322, 0.3955093991756439, 0.3778846473991871, 0.36772463101893665] ***
*** finished computation of 7 references, err: [Inf, 0.5932798644900322, 0.3955093991756439, 0.3778846473991871, 0.36772463101893665] ***
*** center 1: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 14, 1]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 11, 12]]
** centroid: 4, normalized-entropy: 0.9986359641585719, [(2, 11), (3, 12)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 18]]
*** center 7: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5383956117928028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5383956117928028, 0.39017574951052664] ***
*** starting iteration: 2; err: [Inf, 0.5383956117928028, 0.39017574951052664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5383956117928028, 0.39017574951052664, 0.37061196483671666] ***
*** starting iteration: 3; err: [Inf, 0.5383956117928028, 0.39017574951052664, 0.37061196483671666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5383956117928028, 0.39017574951052664, 0.37061196483671666, 0.366908180937171] ***
*** finished computation of 7 references, err: [Inf, 0.5383956117928028, 0.39017574951052664, 0.37061196483671666, 0.366908180937171] ***
*** center 1: selecting labels [1] (freq >= 2) [from [24, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 10, 1]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 15, 9]]
** centroid: 4, normalized-entropy: 0.954434002924965, [(2, 15), (3, 9)]
*** center 5: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 5, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5668999883532524] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5668999883532524, 0.43494841374456883] ***
*** starting iteration: 2; err: [Inf, 0.5668999883532524, 0.43494841374456883] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5668999883532524, 0.43494841374456883, 0.3893743623048067] ***
*** starting iteration: 3; err: [Inf, 0.5668999883532524, 0.43494841374456883, 0.3893743623048067] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5668999883532524, 0.43494841374456883, 0.3893743623048067, 0.3793487901240587] ***
*** finished computation of 7 references, err: [Inf, 0.5668999883532524, 0.43494841374456883, 0.3893743623048067, 0.3793487901240587] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
*** center 2: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 10, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 12, 1]]
*** center 5: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 16, 5]]
** centroid: 7, normalized-entropy: 0.7918583525674836, [(2, 16), (3, 5)]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 16)
[0.98, 0.9666666666666667, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9466666666666667, 0.9066666666666666, 0.9066666666666666, 0.8866666666666667, 0.88, 0.8733333333333334, 0.8666666666666667, 0.8666666666666667, 0.86]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 3, 10, 1.0, :dnet, 0.3, 1) => 0.98
finished with 17
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.7074050679802895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7074050679802895, 0.49122500538825986] ***
*** finished computation of 7 references, err: [Inf, 0.7074050679802895, 0.49122500538825986] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 8, 1]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 1, 13]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 23, 1]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.663438944965601] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.663438944965601, 0.4727969176322222] ***
*** finished computation of 7 references, err: [Inf, 0.663438944965601, 0.4727969176322222] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 12, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 11, 6]]
** centroid: 5, normalized-entropy: 0.9366673818775627, [(2, 11), (3, 6)]
*** center 6: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 1, 15]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6654270118474961] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6654270118474961, 0.5127359870076179] ***
*** finished computation of 7 references, err: [Inf, 0.6654270118474961, 0.5127359870076179] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 9, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 10, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 4, 3]]
** centroid: 3, normalized-entropy: 0.9852281360342514, [(2, 4), (3, 3)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 22]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 9, 5]]
** centroid: 5, normalized-entropy: 0.940285958670631, [(2, 9), (3, 5)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
finished with 9 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 17)
[0.98, 0.9666666666666667, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9466666666666667, 0.9266666666666666, 0.9066666666666666, 0.9066666666666666, 0.8866666666666667, 0.88, 0.8733333333333334, 0.8666666666666667, 0.8666666666666667, 0.86]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 3, 10, 1.0, :dnet, 0.3, 1) => 0.98
finished with 18
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.7043625603616238] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7043625603616238, 0.48853578329086306] ***
*** starting iteration: 2; err: [Inf, 0.7043625603616238, 0.48853578329086306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7043625603616238, 0.48853578329086306, 0.4801301617920399] ***
*** starting iteration: 3; err: [Inf, 0.7043625603616238, 0.48853578329086306, 0.4801301617920399] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7043625603616238, 0.48853578329086306, 0.4801301617920399, 0.4782057425379753] ***
*** finished computation of 7 references, err: [Inf, 0.7043625603616238, 0.48853578329086306, 0.4801301617920399, 0.4782057425379753] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 7, 27]]
** centroid: 1, normalized-entropy: 0.7335379291086666, [(2, 7), (3, 27)]
*** center 2: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 5, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 18, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 2, 1]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.623958557099104] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.623958557099104, 0.4515588389337063] ***
*** starting iteration: 2; err: [Inf, 0.623958557099104, 0.4515588389337063] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.623958557099104, 0.4515588389337063, 0.4419994097203016] ***
*** starting iteration: 3; err: [Inf, 0.623958557099104, 0.4515588389337063, 0.4419994097203016] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.623958557099104, 0.4515588389337063, 0.4419994097203016, 0.43408688105642795] ***
*** finished computation of 7 references, err: [Inf, 0.623958557099104, 0.4515588389337063, 0.4419994097203016, 0.43408688105642795] ***
*** center 1: selecting labels [1] (freq >= 2) [from [24, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 2, 6]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 2), (3, 6)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 16, 5]]
** centroid: 5, normalized-entropy: 0.7918583525674836, [(2, 16), (3, 5)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 12, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6802481351792813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6802481351792813, 0.5009178768098355] ***
*** starting iteration: 2; err: [Inf, 0.6802481351792813, 0.5009178768098355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6802481351792813, 0.5009178768098355, 0.4907306033372879] ***
*** starting iteration: 3; err: [Inf, 0.6802481351792813, 0.5009178768098355, 0.4907306033372879] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6802481351792813, 0.5009178768098355, 0.4907306033372879, 0.48666779562830925] ***
*** finished computation of 7 references, err: [Inf, 0.6802481351792813, 0.5009178768098355, 0.4907306033372879, 0.48666779562830925] ***
*** center 1: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 21, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 15, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 2, 6]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 2), (3, 6)]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 18)
[0.98, 0.98, 0.9666666666666667, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9466666666666667, 0.9266666666666666, 0.9066666666666666, 0.9066666666666666, 0.8866666666666667, 0.88, 0.8733333333333334, 0.8666666666666667, 0.8666666666666667, 0.86]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.3, 2) => 0.98
finished with 18
iteration 4 finished
generating 4 configurations using top 4 configurations, starting with 18)
[0.98, 0.98, 0.9666666666666667, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9466666666666667, 0.9266666666666666, 0.9066666666666666, 0.9066666666666666, 0.8866666666666667, 0.88, 0.8733333333333334, 0.8666666666666667, 0.8666666666666667, 0.86]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.3, 2) => 0.98
finished with 18
iteration 5 finished
generating 4 configurations using top 4 configurations, starting with 18)
[0.98, 0.98, 0.9666666666666667, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9466666666666667, 0.9266666666666666, 0.9066666666666666, 0.9066666666666666, 0.8866666666666667, 0.88, 0.8733333333333334, 0.8666666666666667, 0.8666666666666667, 0.86]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.3, 2) => 0.98
finished with 20
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.7322085674107075] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7322085674107075, 0.5130690045654773] ***
*** starting iteration: 2; err: [Inf, 0.7322085674107075, 0.5130690045654773] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7322085674107075, 0.5130690045654773, 0.5081256973743439] ***
*** starting iteration: 3; err: [Inf, 0.7322085674107075, 0.5130690045654773, 0.5081256973743439] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7322085674107075, 0.5130690045654773, 0.5081256973743439, 0.5081256973743439] ***
*** finished computation of 3 references, err: [Inf, 0.7322085674107075, 0.5130690045654773, 0.5081256973743439, 0.5081256973743439] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 8, 34]]
** centroid: 1, normalized-entropy: 0.7024665512903904, [(2, 8), (3, 34)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 24, 1]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.326493608802557] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.326493608802557, 0.6828526705503464] ***
*** starting iteration: 2; err: [Inf, 1.326493608802557, 0.6828526705503464] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.326493608802557, 0.6828526705503464, 0.5242698089778424] ***
*** starting iteration: 3; err: [Inf, 1.326493608802557, 0.6828526705503464, 0.5242698089778424] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.326493608802557, 0.6828526705503464, 0.5242698089778424, 0.5240362746268511] ***
*** finished computation of 3 references, err: [Inf, 1.326493608802557, 0.6828526705503464, 0.5242698089778424, 0.5240362746268511] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 1, 25]]
*** center 2: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 29, 10]]
** centroid: 3, normalized-entropy: 0.8212809417449864, [(2, 29), (3, 10)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.818783270418644] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.818783270418644, 0.7261097466945649] ***
*** starting iteration: 2; err: [Inf, 0.818783270418644, 0.7261097466945649] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.818783270418644, 0.7261097466945649, 0.7189052800834179] ***
*** starting iteration: 3; err: [Inf, 0.818783270418644, 0.7261097466945649, 0.7189052800834179] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.818783270418644, 0.7261097466945649, 0.7189052800834179, 0.7115598541498184] ***
*** finished computation of 3 references, err: [Inf, 0.818783270418644, 0.7261097466945649, 0.7189052800834179, 0.7115598541498184] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 35, 30]]
** centroid: 1, normalized-entropy: 0.9957274520849256, [(2, 35), (3, 30)]
*** center 2: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [21, 3, 0]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(1, 21), (2, 3)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0613861000537872] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0613861000537872, 0.7274641930311918] ***
*** starting iteration: 2; err: [Inf, 1.0613861000537872, 0.7274641930311918] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0613861000537872, 0.7274641930311918, 0.6500730633735656] ***
*** starting iteration: 3; err: [Inf, 1.0613861000537872, 0.7274641930311918, 0.6500730633735656] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0613861000537872, 0.7274641930311918, 0.6500730633735656, 0.6117959269881248] ***
*** finished computation of 3 references, err: [Inf, 1.0613861000537872, 0.7274641930311918, 0.6500730633735656, 0.6117959269881248] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 8, 34]]
** centroid: 2, normalized-entropy: 0.7024665512903904, [(2, 8), (3, 34)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 24, 1]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9954962767660618] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9954962767660618, 0.6430306246131658] ***
*** starting iteration: 2; err: [Inf, 0.9954962767660618, 0.6430306246131658] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9954962767660618, 0.6430306246131658, 0.6349425987154246] ***
*** starting iteration: 3; err: [Inf, 0.9954962767660618, 0.6430306246131658, 0.6349425987154246] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9954962767660618, 0.6430306246131658, 0.6349425987154246, 0.6298205990344286] ***
*** finished computation of 3 references, err: [Inf, 0.9954962767660618, 0.6430306246131658, 0.6349425987154246, 0.6298205990344286] ***
*** center 1: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 29, 9]]
** centroid: 2, normalized-entropy: 0.7897492536625221, [(2, 29), (3, 9)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 26]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.079586895480752] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.079586895480752, 0.751010832041502] ***
*** starting iteration: 2; err: [Inf, 1.079586895480752, 0.751010832041502] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.079586895480752, 0.751010832041502, 0.715803654640913] ***
*** starting iteration: 3; err: [Inf, 1.079586895480752, 0.751010832041502, 0.715803654640913] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.079586895480752, 0.751010832041502, 0.715803654640913, 0.6880157808959484] ***
*** finished computation of 3 references, err: [Inf, 1.079586895480752, 0.751010832041502, 0.715803654640913, 0.6880157808959484] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 38, 8]]
** centroid: 1, normalized-entropy: 0.6665783579949205, [(2, 38), (3, 8)]
*** center 2: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 22]]
finished with 3 centroids; started with 3
generating 4 configurations using top 4 configurations, starting with 20)
[0.98, 0.98, 0.9666666666666667, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9466666666666667, 0.9266666666666666, 0.9066666666666666, 0.9066666666666666, 0.8866666666666667, 0.88, 0.8733333333333334, 0.8666666666666667, 0.8666666666666667, 0.86, 0.86, 0.8266666666666668]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.3, 2) => 0.98
finished with 21
iteration 7 finished
*** starting iteration: 1; err: [Inf, 1.2506092055141926] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2506092055141926, 0.6917447507381439] ***
*** starting iteration: 2; err: [Inf, 1.2506092055141926, 0.6917447507381439] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2506092055141926, 0.6917447507381439, 0.6182765240967274] ***
*** starting iteration: 3; err: [Inf, 1.2506092055141926, 0.6917447507381439, 0.6182765240967274] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2506092055141926, 0.6917447507381439, 0.6182765240967274, 0.612921008169651] ***
*** starting iteration: 4; err: [Inf, 1.2506092055141926, 0.6917447507381439, 0.6182765240967274, 0.612921008169651] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2506092055141926, 0.6917447507381439, 0.6182765240967274, 0.612921008169651, 0.612921008169651] ***
*** finished computation of 3 references, err: [Inf, 1.2506092055141926, 0.6917447507381439, 0.6182765240967274, 0.612921008169651, 0.612921008169651] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 28, 3]]
** centroid: 1, normalized-entropy: 0.45868581620054033, [(2, 28), (3, 3)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 4, 32]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(2, 4), (3, 32)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.6326533104479313] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.6326533104479313, 0.8534076894819737] ***
*** starting iteration: 2; err: [Inf, 1.6326533104479313, 0.8534076894819737] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.6326533104479313, 0.8534076894819737, 0.6293371842801571] ***
*** starting iteration: 3; err: [Inf, 1.6326533104479313, 0.8534076894819737, 0.6293371842801571] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.6326533104479313, 0.8534076894819737, 0.6293371842801571, 0.6264406765252352] ***
*** starting iteration: 4; err: [Inf, 1.6326533104479313, 0.8534076894819737, 0.6293371842801571, 0.6264406765252352] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.6326533104479313, 0.8534076894819737, 0.6293371842801571, 0.6264406765252352, 0.6264406765252352] ***
*** finished computation of 3 references, err: [Inf, 1.6326533104479313, 0.8534076894819737, 0.6293371842801571, 0.6264406765252352, 0.6264406765252352] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 25]]
** centroid: 1, normalized-entropy: 0.23519338181924157, [(2, 1), (3, 25)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 29, 10]]
** centroid: 2, normalized-entropy: 0.8212809417449864, [(2, 29), (3, 10)]
*** center 3: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.3433120086789132] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3433120086789132, 0.9363983988761901] ***
*** starting iteration: 2; err: [Inf, 1.3433120086789132, 0.9363983988761901] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3433120086789132, 0.9363983988761901, 0.8855312310159207] ***
*** starting iteration: 3; err: [Inf, 1.3433120086789132, 0.9363983988761901, 0.8855312310159207] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3433120086789132, 0.9363983988761901, 0.8855312310159207, 0.8814742510020733] ***
*** starting iteration: 4; err: [Inf, 1.3433120086789132, 0.9363983988761901, 0.8855312310159207, 0.8814742510020733] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3433120086789132, 0.9363983988761901, 0.8855312310159207, 0.8814742510020733, 0.8821474042534828] ***
*** finished computation of 3 references, err: [Inf, 1.3433120086789132, 0.9363983988761901, 0.8855312310159207, 0.8814742510020733, 0.8821474042534828] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [4, 3, 0]]
** centroid: 1, normalized-entropy: 0.9852281360342514, [(1, 4), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 35, 30]]
** centroid: 2, normalized-entropy: 0.9957274520849256, [(2, 35), (3, 30)]
*** center 3: selecting labels [1] (freq >= 1) [from [28, 0, 0]]
finished with 5 centroids; started with 3
generating 4 configurations using top 4 configurations, starting with 21)
[0.98, 0.98, 0.9666666666666667, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9466666666666667, 0.9266666666666666, 0.9266666666666666, 0.9066666666666666, 0.9066666666666666, 0.8866666666666667, 0.88, 0.8733333333333334, 0.8666666666666667, 0.8666666666666667, 0.86, 0.86, 0.8266666666666668]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.3, 2) => 0.98
finished with 21
iteration 8 finished
generating 4 configurations using top 4 configurations, starting with 21)
[0.98, 0.98, 0.9666666666666667, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9466666666666667, 0.9266666666666666, 0.9266666666666666, 0.9066666666666666, 0.9066666666666666, 0.8866666666666667, 0.88, 0.8733333333333334, 0.8666666666666667, 0.8666666666666667, 0.86, 0.86, 0.8266666666666668]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.3, 2) => 0.98
finished with 21
iteration 9 finished
[ Info: ========== BEST MODEL ==========
[ Info: (AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.3, 2), 0.98)
[ Info: AKNC{Array{Float64,1}}[AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[6.585714285714286, 3.0, 4.728571428571429, 1.4714285714285713], [6.27037037037037, 2.859259259259259, 5.262962962962962, 1.9407407407407404], [4.6866666666666665, 3.106666666666667, 1.4133333333333336, 0.20000000000000007], [7.366666666666667, 3.1666666666666665, 6.1000000000000005, 2.0833333333333335], [5.2, 2.35, 3.325, 1.025], [5.194444444444445, 3.611111111111111, 1.4999999999999998, 0.31111111111111117], [5.842105263157895, 2.710526315789473, 4.110526315789474, 1.2684210526315791], [5.166666666666667, 2.733333333333333, 4.3, 1.5333333333333332]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 3, 1, 3, 2, 1, 2, 2], 3), KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.3, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[4.916, 3.264, 1.476, 0.21200000000000002], [7.433333333333334, 3.1, 6.300000000000001, 2.1111111111111116], [5.75, 3.1, 4.65, 1.65], [5.616666666666667, 2.716666666666667, 4.949999999999999, 1.9666666666666668], [6.546666666666668, 3.0866666666666664, 5.553333333333334, 2.1666666666666665], [6.24375, 2.8437499999999996, 4.618749999999999, 1.4375000000000004], [6.159999999999999, 2.78, 5.08, 1.6800000000000002], [5.575, 2.575, 3.875, 1.1500000000000001], [5.42, 3.94, 1.5399999999999998, 0.27]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1, 3, 2, 3, 3, 2, 3, 2, 1], 3), KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.3, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[4.990625, 3.4125, 1.434375, 0.24375000000000005], [7.540000000000001, 2.8200000000000003, 6.5200000000000005, 2.02], [6.25909090909091, 3.022727272727273, 4.590909090909091, 1.4590909090909092], [5.471428571428571, 2.5428571428571423, 3.785714285714285, 1.142857142857143], [6.606666666666667, 3.0866666666666664, 5.513333333333334, 2.146666666666667], [7.44, 3.4800000000000004, 6.200000000000001, 2.02], [6.25, 2.35, 4.7, 1.5], [6.083333333333333, 2.65, 5.033333333333332, 1.8833333333333335]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1, 3, 2, 2, 3, 3, 2, 3], 3), KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.3, 2))]
Test Summary: | Pass  Total
AKNC          |    1      1
[242, 5, 10, 1, 2, 2, 1, 2, 3, 29, 1, 6, 3, 2, 54, 5, 2, 6, 16, 3, 24, 1, 2, 3, 13, 12, 2, 8, 33, 5, 3, 6, 1, 4, 3, 24, 5, 2, 18, 6, 26, 7, 32, 7, 2, 1, 8, 8, 6, 22, 2, 2, 40, 34, 2, 1, 14, 8, 6, 2, 4, 13, 52, 14, 7, 42, 5, 14, 40, 5, 25, 6, 18, 39, 11, 15, 5, 8, 68, 11, 12, 14, 13, 11, 4, 3, 20, 3, 1, 10, 4, 13, 140, 47, 69, 7, 18, 14, 21, 27, 4, 38, 9, 52, 11, 21, 16, 46, 126, 39, 7, 2, 63, 13, 3, 5, 10, 7, 64, 33, 1, 33, 158, 31, 9, 4, 27, 24, 12, 20, 228, 1, 39, 23, 10, 104, 9, 59, 22, 17, 139, 18, 15, 6, 13, 23, 4, 10, 33, 50, 38, 26, 16, 30, 23, 9, 24, 2, 22, 21, 16, 53, 10, 22, 3, 26, 6, 20, 31, 6, 26, 6, 26, 12, 34, 34, 61, 136, 142, 20, 10, 25, 8, 703, 54, 2, 62, 1, 137, 90, 9, 4, 20, 50, 8, 39, 11, 5, 76, 44, 39, 85, 17, 2, 2, 21, 633, 8, 9, 5, 13, 4, 2, 21, 24, 52, 12, 4, 15, 17, 4, 6, 22, 35, 12, 64, 49, 34, 1, 3, 11, 69, 7, 39, 5, 2, 13, 73, 8, 25, 36, 15, 63, 9, 36, 35, 4, 51, 41, 92, 18, 6, 20, 62, 78, 32, 11, 15, 24, 10, 22, 33, 51, 24, 4, 13, 3, 28, 16, 3, 32, 70, 2, 32, 15, 27, 56, 283, 2, 10, 28, 58, 10, 430, 14, 13, 121, 7, 632, 36, 20, 6, 18, 13, 16, 9, 67, 11, 9, 8]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.659, speedup = 0.26341739920642776, eval_ratio = 0.079938)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.409796626984127,"recall":0.4045138888888889,"f1":null,"seconds":0.00015343725681304932,"exhaustive_search_seconds":0.0003593284636735916,"evaluations":504.28125,"distances_sum":1732.3608626766186}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5807291666666663,"recall":0.5807291666666663,"f1":null,"seconds":0.00020219944417476654,"exhaustive_search_seconds":0.0003593284636735916,"evaluations":696.625,"distances_sum":1622.472887304843}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6822916666666661,"recall":0.6822916666666661,"f1":0.6822916666666661,"seconds":0.0002848673611879349,"exhaustive_search_seconds":0.0003593284636735916,"evaluations":834.6015625,"distances_sum":1572.432895353594}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7447916666666657,"recall":0.7447916666666657,"f1":0.7447916666666657,"seconds":0.0005285963416099548,"exhaustive_search_seconds":0.0003593284636735916,"evaluations":953.359375,"distances_sum":1550.1560335024467}
KCenters.DeloneInvIndex> reached performance {"precision":0.8064236111111103,"recall":0.8064236111111103,"f1":0.8064236111111103,"seconds":0.0005865395069122314,"exhaustive_search_seconds":0.0003593284636735916,"evaluations":1102.9453125,"distances_sum":1533.8101931212575}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7920000000000001, speedup = 0.5702948773389745, eval_ratio = 0.105983)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
