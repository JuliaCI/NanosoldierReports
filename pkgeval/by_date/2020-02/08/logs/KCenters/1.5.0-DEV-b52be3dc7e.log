Julia Version 1.5.0-DEV.252
Commit b52be3dc7e (2020-02-08 18:26 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed InvertedIndices ───────────── v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Reexport ──────────────────── v0.2.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed KCenters ──────────────────── v0.1.11
  Installed TableTraits ───────────────── v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed Missings ──────────────────── v0.4.3
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Compat ────────────────────── v3.3.1
  Installed DataStructures ────────────── v0.17.9
  Installed JSON ──────────────────────── v0.21.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed SimilaritySearch ──────────── v0.3.18
  Installed LearnBase ─────────────────── v0.2.2
  Installed MLDataUtils ───────────────── v0.5.0
  Installed MLDataPattern ─────────────── v0.5.0
  Installed DataFrames ────────────────── v0.20.0
  Installed DataAPI ───────────────────── v1.1.0
  Installed Parsers ───────────────────── v0.3.11
  Installed Tables ────────────────────── v0.2.11
  Installed StatsBase ─────────────────── v0.32.0
  Installed MLLabelUtils ──────────────── v0.5.1
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.1.11
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.3.1
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.1.11
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.18
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_odroOw/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.3.1
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.0
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.1.11
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.18
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v0.2.11
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
[ Info: 147.31
[ Info: 71.66
[ Info: 41.34999999999998
[ Info: 23.569999999999997
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 267.24999848336876
[ Info: 215.71999828423913
[ Info: 196.7700000419625
[ Info: 76.58000118467912
Test Summary:        |
Clustering with dnet | No tests
inertia(cfft.distances) = 19.01306810910969
inertia(cdnet.distances) = 31.535274639324104
inertia(crand.distances) = 27.455788889520036
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8459972319347329,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.3828125,"distances_sum":2314.1002918421927}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.744140625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.744140625,"f1":0.8459972319347329,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.3828125,"distances_sum":2314.1002918421927}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9598271520146526,"seconds":4.0084123611450195e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.8046875,"distances_sum":3239.3654803442114}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9625801282051285,"seconds":3.87243926525116e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.8828125,"distances_sum":3227.5137660806818}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9625801282051285,"seconds":3.87243926525116e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.8828125,"distances_sum":3227.5137660806818}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9740728021978027,"seconds":6.144866347312927e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.9609375,"distances_sum":3303.5717399024884}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9769917582417585,"seconds":6.426125764846802e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.953125,"distances_sum":3322.2501235965174}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9659798534798537,"seconds":6.061047315597534e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.90625,"distances_sum":3250.5266087407012}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9769917582417585,"seconds":6.426125764846802e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.953125,"distances_sum":3322.2501235965174}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9769917582417585,"seconds":6.426125764846802e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.953125,"distances_sum":3322.2501235965174}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.7913856976356985,"seconds":5.031004548072815e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.1171875,"distances_sum":1842.6134090851658}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.66796875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.66796875,"f1":0.7913856976356985,"seconds":5.031004548072815e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.1171875,"distances_sum":1842.6134090851658}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.66796875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.66796875,"f1":0.7913856976356985,"seconds":5.031004548072815e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.1171875,"distances_sum":1842.6134090851658}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.66796875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.66796875,"f1":0.7913856976356985,"seconds":5.031004548072815e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.1171875,"distances_sum":1842.6134090851658}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6494140625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6494140625,"f1":0.7721672424797433,"seconds":4.887580871582031e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.6484375,"distances_sum":1824.283232809948}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.169921875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.169921875,"f1":null,"seconds":2.9578804969787598e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":4.5,"distances_sum":524.6807497797973}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1630859375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1630859375,"f1":null,"seconds":9.477697312831879e-5,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":4.4609375,"distances_sum":439.1863676121894}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6494140625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6494140625,"f1":0.7721672424797433,"seconds":4.887580871582031e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.6484375,"distances_sum":1824.283232809948}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9330273892773899,"seconds":5.535781383514404e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.7265625,"distances_sum":2756.0013008543747}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8891400266400274,"seconds":5.435198545455933e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.625,"distances_sum":2402.9861562527253}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.654296875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.654296875,"f1":0.775113428238429,"seconds":4.779547452926636e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.5,"distances_sum":1908.1308409723179}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8857421875,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8857421875,"f1":0.9330273892773899,"seconds":5.535781383514404e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.7265625,"distances_sum":2756.0013008543747}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9674336080586083,"seconds":5.668029189109802e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.828125,"distances_sum":3008.137858595813}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9364640567765575,"seconds":5.543231964111328e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.71875,"distances_sum":2763.347524573267}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9674336080586083,"seconds":5.668029189109802e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.828125,"distances_sum":3008.137858595813}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9674336080586083,"seconds":5.668029189109802e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.828125,"distances_sum":3008.137858595813}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6923828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6923828125,"f1":0.8078057359307369,"seconds":4.827976226806641e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.1640625,"distances_sum":1910.4020445286303}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6923828125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6923828125,"f1":0.8078057359307369,"seconds":4.827976226806641e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.1640625,"distances_sum":1910.4020445286303}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7373046875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7373046875,"f1":0.840442370129871,"seconds":5.174428224563599e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.5234375,"distances_sum":2092.0933222174294}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8622231934731945,"seconds":5.114823579788208e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.625,"distances_sum":2224.702933392106}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7705078125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7705078125,"f1":0.8622231934731945,"seconds":5.114823579788208e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.625,"distances_sum":2224.702933392106}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9511103479853482,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.9453125,"distances_sum":2847.3120929086167}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9111409423909431,"seconds":5.923211574554443e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8359375,"distances_sum":2548.343688255201}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9751316391941396,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.984375,"distances_sum":3041.2401764380616}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9527789918414923,"seconds":6.0051679611206055e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.9296875,"distances_sum":2872.345016504171}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9482028388278396,"seconds":5.943700671195984e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.921875,"distances_sum":2863.8084491725567}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9328843031968038,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.859375,"distances_sum":2725.403891644492}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.9023268398268407,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8125,"distances_sum":2468.3219889820934}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9751316391941396,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.984375,"distances_sum":3041.2401764380616}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9751316391941396,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.984375,"distances_sum":3041.2401764380616}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.732421875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.732421875,"f1":0.8388424075924085,"seconds":5.044043064117432e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.0703125,"distances_sum":2146.3419658518405}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.732421875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.732421875,"f1":0.8388424075924085,"seconds":5.044043064117432e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.0703125,"distances_sum":2146.3419658518405}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8134765625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8134765625,"f1":0.8903445512820521,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.2890625,"distances_sum":2498.0819451380976}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8466476232101242,"seconds":5.7462602853775024e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.078125,"distances_sum":2215.7145312076013}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8134765625,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.8134765625,"f1":0.8903445512820521,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.2890625,"distances_sum":2498.0819451380976}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9630437271062275,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8359375,"distances_sum":3029.8340897923267}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9358230311355314,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.625,"distances_sum":2800.5251524656364}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9389480311355317,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.6953125,"distances_sum":2820.382801713019}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9568681318681322,"seconds":5.8766454458236694e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8125,"distances_sum":2953.7096184270454}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":10,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9295875999001005,"seconds":5.671754479408264e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.6640625,"distances_sum":2730.015218537753}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9443910256410261,"seconds":5.580484867095947e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.7265625,"distances_sum":2848.412795271526}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.939365842490843,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.703125,"distances_sum":2861.9402481027882}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9630437271062275,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8359375,"distances_sum":3029.8340897923267}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9630437271062275,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8359375,"distances_sum":3029.8340897923267}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.53515625, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.53515625,"f1":null,"seconds":4.280358552932739e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.515625,"distances_sum":1413.0867004885906}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.53515625,"state":{"ssize":5,"bsize":3},"perf":{"precision":null,"recall":0.53515625,"f1":null,"seconds":4.280358552932739e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.515625,"distances_sum":1413.0867004885906}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.818359375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.818359375,"f1":0.8918617840492848,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.7734375,"distances_sum":2388.981758527378}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9376030219780227,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.875,"distances_sum":2708.2100417533666}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8916015625,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.8916015625,"f1":0.9376030219780227,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.875,"distances_sum":2708.2100417533666}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9403076090576099,"seconds":5.906447768211365e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.828125,"distances_sum":2722.090035610315}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":11,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9585966117216121,"seconds":5.956739187240601e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8984375,"distances_sum":2856.454470467479}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9452266483516488,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8828125,"distances_sum":2764.9408852637694}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.950509386446887,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.859375,"distances_sum":2809.3985900946595}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":11,"bsize":8},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9585966117216121,"seconds":5.956739187240601e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8984375,"distances_sum":2856.454470467479}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9267578125,"state":{"ssize":11,"bsize":8},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9585966117216121,"seconds":5.956739187240601e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8984375,"distances_sum":2856.454470467479}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.314453125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.314453125,"f1":null,"seconds":4.045665264129639e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.34375,"distances_sum":622.0536428104282}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.568359375,"f1":0.7073071026196032,"seconds":4.684552550315857e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.6796875,"distances_sum":1028.0799923066618}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.30859375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.30859375,"f1":null,"seconds":3.829598426818848e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.3125,"distances_sum":641.562336662917}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.568359375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.568359375,"f1":0.7073071026196032,"seconds":4.684552550315857e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.6796875,"distances_sum":1028.0799923066618}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8921302655677665,"seconds":5.608424544334412e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.25,"distances_sum":1632.1360904165763}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6611328125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6611328125,"f1":0.7829831626706635,"seconds":4.7478824853897095e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.2578125,"distances_sum":1277.0840059652048}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6845703125, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6845703125,"f1":0.8008619852369859,"seconds":4.9620866775512695e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.4296875,"distances_sum":1315.6241235308626}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.689453125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.689453125,"f1":0.80444225912976,"seconds":5.09992241859436e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.421875,"distances_sum":1339.408318898199}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8486159673659681,"seconds":5.628913640975952e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.8828125,"distances_sum":1502.3730594044396}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8125,"f1":0.8921302655677665,"seconds":5.608424544334412e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.25,"distances_sum":1632.1360904165763}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9650869963369967,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8671875,"distances_sum":2085.237040644336}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9323202838827844,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.453125,"distances_sum":1888.6888447536628}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9611263736263741,"seconds":6.269663572311401e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.84375,"distances_sum":2052.62989509924}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9464915293040299,"seconds":6.061047315597534e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.6875,"distances_sum":1984.0306440901343}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9650869963369967,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8671875,"distances_sum":2085.237040644336}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9650869963369967,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8671875,"distances_sum":2085.237040644336}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6953125,"f1":0.8097029706404713,"seconds":5.014240741729736e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.625,"distances_sum":1435.997936665595}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8595560689310696,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.1015625,"distances_sum":1623.8820903992455}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.767578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.767578125,"f1":0.8595560689310696,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.1015625,"distances_sum":1623.8820903992455}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8611050407925416,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.25,"distances_sum":1617.7060195337533}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.794921875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.794921875,"f1":0.8792816558441565,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.3515625,"distances_sum":1707.581766370261}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9420875999001003,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.6953125,"distances_sum":2078.489375681294}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9420875999001003,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.6953125,"distances_sum":2078.489375681294}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9649381868131874,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.8125,"distances_sum":2178.9895807914695}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9649381868131874,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.8125,"distances_sum":2178.9895807914695}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9649381868131874,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.8125,"distances_sum":2178.9895807914695}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.236328125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.236328125,"f1":null,"seconds":3.244727849960327e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":5.3984375,"distances_sum":447.4722175463957}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5283203125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5283203125,"f1":0.6729067807192811,"seconds":4.071742296218872e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":6.46875,"distances_sum":968.0860068165463}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5283203125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5283203125,"f1":0.6729067807192811,"seconds":4.071742296218872e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":6.46875,"distances_sum":968.0860068165463}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8919309856809862,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.296875,"distances_sum":1644.9436008991022}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.796875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.796875,"f1":0.8789673867798875,"seconds":5.2209943532943726e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.15625,"distances_sum":1592.9218615504444}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7158203125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7158203125,"f1":0.8222891691641699,"seconds":4.844740033149719e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.6875,"distances_sum":1384.1967010101882}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8193359375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8193359375,"f1":0.8919309856809862,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.296875,"distances_sum":1644.9436008991022}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.961836080586081,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8515625,"distances_sum":2018.9930352047083}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9551625457875461,"seconds":5.900859832763672e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.75,"distances_sum":2017.9227519206227}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.947630494505495,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.6953125,"distances_sum":1972.3977227610299}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8992845695970703,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.3515625,"distances_sum":1678.810133400562}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.961836080586081,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8515625,"distances_sum":2018.9930352047083}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.931640625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.961836080586081,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8515625,"distances_sum":2018.9930352047083}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.57421875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.57421875,"f1":0.7156848359973366,"seconds":4.4852495193481445e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":6.9609375,"distances_sum":1153.3838937490593}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2666015625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2666015625,"f1":null,"seconds":3.56137752532959e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":6.109375,"distances_sum":618.2758355761755}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.396484375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.396484375,"f1":null,"seconds":3.9227306842803955e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":6.25,"distances_sum":794.4587716827036}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65234375, conf: {"ssize":4,"bsize":4}, perf: {"precision":null,"recall":0.65234375,"f1":null,"seconds":4.8317015171051025e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":7.5390625,"distances_sum":1374.6390213056259}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.65234375,"state":{"ssize":4,"bsize":4},"perf":{"precision":null,"recall":0.65234375,"f1":null,"seconds":4.8317015171051025e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":7.5390625,"distances_sum":1374.6390213056259}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8585607101232108,"seconds":5.383044481277466e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":7.8125,"distances_sum":1654.5071696163093}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9080159423909432,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.171875,"distances_sum":1909.47381922422}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.931627747252748,"seconds":6.0014426708221436e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.78125,"distances_sum":2128.824319213416}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8993189102564112,"seconds":5.543231964111328e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.109375,"distances_sum":1876.7496263781723}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8652425699300706,"seconds":5.261972546577454e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":7.84375,"distances_sum":1709.3440681574127}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7939453125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7939453125,"f1":0.8785407301032311,"seconds":5.133450031280518e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":7.8984375,"distances_sum":1755.2052876157738}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8932640276390285,"seconds":5.243346095085144e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.0,"distances_sum":1846.468973545201}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.9115899725274735,"seconds":5.1781535148620605e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.203125,"distances_sum":1982.228912221266}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87890625,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.87890625,"f1":0.931627747252748,"seconds":6.0014426708221436e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.78125,"distances_sum":2128.824319213416}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9563301282051285,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.828125,"distances_sum":2307.7334133639856}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9634901556776561,"seconds":6.124377250671387e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.859375,"distances_sum":2353.873954989842}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9715602106227113,"seconds":6.213784217834473e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.953125,"distances_sum":2377.7924648493454}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9715602106227113,"seconds":6.213784217834473e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.953125,"distances_sum":2377.7924648493454}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9715602106227113,"seconds":6.213784217834473e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.953125,"distances_sum":2377.7924648493454}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80078125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.80078125,"f1":0.8806386322011329,"seconds":5.273148417472839e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":7.9609375,"distances_sum":1861.1005615148038}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8056640625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.8056640625,"f1":0.883482663170164,"seconds":5.23589551448822e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":7.8984375,"distances_sum":1868.7635713343927}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8056640625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.8056640625,"f1":0.883482663170164,"seconds":5.23589551448822e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":7.8984375,"distances_sum":1868.7635713343927}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9256238553113563,"seconds":5.865469574928284e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.4765625,"distances_sum":2104.400831399439}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9208104395604402,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.828125,"distances_sum":2100.6633742534864}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9142799908424915,"seconds":5.695968866348267e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.3671875,"distances_sum":2057.1108945571286}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9512534340659345,"seconds":5.956739187240601e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.828125,"distances_sum":2333.756008696227}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9512534340659345,"seconds":5.956739187240601e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.828125,"distances_sum":2333.756008696227}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9665979853479856,"seconds":6.202608346939087e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.859375,"distances_sum":2439.1980884784166}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9677483974358978,"seconds":6.157904863357544e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.8828125,"distances_sum":2445.52043023775}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9604395604395607,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.8828125,"distances_sum":2378.6717199603377}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9677483974358978,"seconds":6.157904863357544e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.8828125,"distances_sum":2445.52043023775}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9677483974358978,"seconds":6.157904863357544e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.8828125,"distances_sum":2445.52043023775}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6640625,"f1":0.787065365190366,"seconds":5.103647708892822e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.40625,"distances_sum":1370.6849882207202}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1845703125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1845703125,"f1":null,"seconds":3.598630428314209e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":5.015625,"distances_sum":407.13958174877337}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6640625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6640625,"f1":0.787065365190366,"seconds":5.103647708892822e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.40625,"distances_sum":1370.6849882207202}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8702328921078929,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.8671875,"distances_sum":1773.508198004988}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9386649808524817,"seconds":5.997717380523682e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.5625,"distances_sum":2262.2679006377984}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8935546875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9386649808524817,"seconds":5.997717380523682e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.5625,"distances_sum":2262.2679006377984}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9621508699633705,"seconds":6.202608346939087e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.78125,"distances_sum":2381.5618322355595}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9563301282051289,"seconds":6.3534826040267944e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.765625,"distances_sum":2331.071248835836}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9621508699633705,"seconds":6.202608346939087e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.78125,"distances_sum":2381.5618322355595}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.931640625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9621508699633705,"seconds":6.202608346939087e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.78125,"distances_sum":2381.5618322355595}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4091796875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.4091796875,"f1":null,"seconds":4.207715392112732e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":5.6875,"distances_sum":807.4882629559942}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4091796875,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.4091796875,"f1":null,"seconds":4.207715392112732e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":5.6875,"distances_sum":807.4882629559942}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.685546875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.685546875,"f1":0.8043508574758583,"seconds":5.068257451057434e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":7.6015625,"distances_sum":1512.284010966458}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8917925824175832,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.09375,"distances_sum":1912.4008705279853}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8154296875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.8154296875,"f1":0.8917925824175832,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.09375,"distances_sum":1912.4008705279853}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8154296875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.8154296875,"f1":0.8917925824175832,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.09375,"distances_sum":1912.4008705279853}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8154296875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.8154296875,"f1":0.8917925824175832,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.09375,"distances_sum":1912.4008705279853}}, n: 9
inertia(cfft.distances) = 19.01306818181818
inertia(cdnet.distances) = 43.124635995378206
inertia(crand.distances) = 33.75093774367948
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8688888888888888
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8777777777777778
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8755555555555556
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8955555555555555
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9066666666666667
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.8844444444444445
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9044444444444445
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9199999999999999
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8488888888888888
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9333333333333332
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9022222222222224
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9266666666666666
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9311111111111111
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8555555555555556
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.908888888888889
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9222222222222222
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9244444444444445
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8777777777777778
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.891111111111111
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8866666666666666
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8888888888888888
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8466666666666667
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX===== rocchio like>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX==== clustering>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
nc.class_map = [2, 1, 3, 2, 1, 3, 3, 3, 3, 3, 1, 2, 3, 3, 2, 3, 3, 2, 1, 3, 2]
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.92
*** finished computation of 12 references, err: [Inf, 0.534519793788592] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 16, 7]]
** centroid: 1, normalized-entropy: 0.8865408928220899, [(2, 16), (3, 7)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 16, 1]]
** centroid: 7, normalized-entropy: 0.32275695889739825, [(2, 16), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 10, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 12: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
finished with 13 centroids; started with 12
acc = 0.9466666666666667
Test Summary:   | Pass  Total
NearestCentroid |   10     10
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.5484258487820626] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5484258487820626, 0.3836584674566984] ***
*** finished computation of 7 references, err: [Inf, 0.5484258487820626, 0.3836584674566984] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 16, 4]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(2, 16), (3, 4)]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 6, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.567406615614891] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.567406615614891, 0.4222132579237223] ***
*** starting iteration: 2; err: [Inf, 0.567406615614891, 0.4222132579237223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.567406615614891, 0.4222132579237223, 0.3985870243981481] ***
*** starting iteration: 3; err: [Inf, 0.567406615614891, 0.4222132579237223, 0.3985870243981481] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.567406615614891, 0.4222132579237223, 0.3985870243981481, 0.3898653420433402] ***
*** finished computation of 7 references, err: [Inf, 0.567406615614891, 0.4222132579237223, 0.3985870243981481, 0.3898653420433402] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 13, 4]]
** centroid: 4, normalized-entropy: 0.787126586201269, [(2, 13), (3, 4)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 6: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 9, 4]]
** centroid: 7, normalized-entropy: 0.8904916402194913, [(2, 9), (3, 4)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.48268701329827307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48268701329827307, 0.3730413343012333] ***
*** starting iteration: 2; err: [Inf, 0.48268701329827307, 0.3730413343012333] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48268701329827307, 0.3730413343012333, 0.36275195971131324] ***
*** starting iteration: 3; err: [Inf, 0.48268701329827307, 0.3730413343012333, 0.36275195971131324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48268701329827307, 0.3730413343012333, 0.36275195971131324, 0.35382305577397344] ***
*** finished computation of 7 references, err: [Inf, 0.48268701329827307, 0.3730413343012333, 0.36275195971131324, 0.35382305577397344] ***
*** center 1: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 15, 7]]
** centroid: 7, normalized-entropy: 0.9023932827949788, [(2, 15), (3, 7)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6812989662587643] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6812989662587643, 0.4621078436076641] ***
*** finished computation of 7 references, err: [Inf, 0.6812989662587643, 0.4621078436076641] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 19, 11]]
** centroid: 1, normalized-entropy: 0.9480782435939054, [(2, 19), (3, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 10, 1]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7530544075369835] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7530544075369835, 0.4931924246996641] ***
*** finished computation of 7 references, err: [Inf, 0.7530544075369835, 0.4931924246996641] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 9, 10]]
** centroid: 1, normalized-entropy: 0.9980008838722993, [(2, 9), (3, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [26, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 11, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 19]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 9, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6187342494726181] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6187342494726181, 0.4238485074043274] ***
*** finished computation of 7 references, err: [Inf, 0.6187342494726181, 0.4238485074043274] ***
*** center 1: selecting labels [1] (freq >= 2) [from [21, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
*** center 5: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 4, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 15, 7]]
** centroid: 7, normalized-entropy: 0.9023932827949788, [(2, 15), (3, 7)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7015425169467926] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7015425169467926, 0.559661242775619] ***
*** starting iteration: 2; err: [Inf, 0.7015425169467926, 0.559661242775619] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7015425169467926, 0.559661242775619, 0.5442248757556081] ***
*** starting iteration: 3; err: [Inf, 0.7015425169467926, 0.559661242775619, 0.5442248757556081] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7015425169467926, 0.559661242775619, 0.5442248757556081, 0.5422371352091432] ***
*** starting iteration: 4; err: [Inf, 0.7015425169467926, 0.559661242775619, 0.5442248757556081, 0.5422371352091432] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7015425169467926, 0.559661242775619, 0.5442248757556081, 0.5422371352091432, 0.54166727270931] ***
*** finished computation of 3 references, err: [Inf, 0.7015425169467926, 0.559661242775619, 0.5442248757556081, 0.5422371352091432, 0.54166727270931] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 35, 12]]
** centroid: 1, normalized-entropy: 0.8196004346196011, [(2, 35), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 19]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0263311639428139] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0263311639428139, 0.5814068343490362] ***
*** starting iteration: 2; err: [Inf, 1.0263311639428139, 0.5814068343490362] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0263311639428139, 0.5814068343490362, 0.5720706892758608] ***
*** starting iteration: 3; err: [Inf, 1.0263311639428139, 0.5814068343490362, 0.5720706892758608] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0263311639428139, 0.5814068343490362, 0.5720706892758608, 0.5715697727352381] ***
*** finished computation of 3 references, err: [Inf, 1.0263311639428139, 0.5814068343490362, 0.5720706892758608, 0.5715697727352381] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 1, 31]]
*** center 2: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 28, 9]]
** centroid: 3, normalized-entropy: 0.8003922080453356, [(2, 28), (3, 9)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9457999983429909] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9457999983429909, 0.5244912421703338] ***
*** starting iteration: 2; err: [Inf, 0.9457999983429909, 0.5244912421703338] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9457999983429909, 0.5244912421703338, 0.5143296591192484] ***
*** starting iteration: 3; err: [Inf, 0.9457999983429909, 0.5244912421703338, 0.5143296591192484] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9457999983429909, 0.5244912421703338, 0.5143296591192484, 0.5126270582526922] ***
*** starting iteration: 4; err: [Inf, 0.9457999983429909, 0.5244912421703338, 0.5143296591192484, 0.5126270582526922] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9457999983429909, 0.5244912421703338, 0.5143296591192484, 0.5126270582526922, 0.5104744739085436] ***
*** starting iteration: 5; err: [Inf, 0.9457999983429909, 0.5244912421703338, 0.5143296591192484, 0.5126270582526922, 0.5104744739085436] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9457999983429909, 0.5244912421703338, 0.5143296591192484, 0.5126270582526922, 0.5104744739085436, 0.5104744739085436] ***
*** finished computation of 3 references, err: [Inf, 0.9457999983429909, 0.5244912421703338, 0.5143296591192484, 0.5126270582526922, 0.5104744739085436, 0.5104744739085436] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 32, 6]]
** centroid: 1, normalized-entropy: 0.6292492238560344, [(2, 32), (3, 6)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 3, 23]]
** centroid: 2, normalized-entropy: 0.5159469300074472, [(2, 3), (3, 23)]
*** center 3: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5898708970844746] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5898708970844746, 0.42988422483205796] ***
*** finished computation of 7 references, err: [Inf, 0.5898708970844746, 0.42988422483205796] ***
*** center 1: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 10, 4]]
** centroid: 4, normalized-entropy: 0.8631205685666311, [(2, 10), (3, 4)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 2, 5]]
** centroid: 5, normalized-entropy: 0.8631205685666311, [(2, 2), (3, 5)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 31]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4528834079951048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4528834079951048, 0.3924491610378027] ***
*** finished computation of 7 references, err: [Inf, 0.4528834079951048, 0.3924491610378027] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 5, 9]]
** centroid: 2, normalized-entropy: 0.940285958670631, [(2, 5), (3, 9)]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 5: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 8, 1]]
** centroid: 6, normalized-entropy: 0.5032583347756457, [(2, 8), (3, 1)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 12, 1]]
** centroid: 7, normalized-entropy: 0.3912435636292556, [(2, 12), (3, 1)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.5234878104925156] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5234878104925156, 0.8932592616975308] ***
*** finished computation of 3 references, err: [Inf, 1.5234878104925156, 0.8932592616975308] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [33, 3, 0]]
** centroid: 1, normalized-entropy: 0.4138168503036336, [(1, 33), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 33, 19]]
** centroid: 2, normalized-entropy: 0.9470622432515328, [(2, 33), (3, 19)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 12]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.493513770699501] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.493513770699501, 1.1529725626111031] ***
*** finished computation of 3 references, err: [Inf, 1.493513770699501, 1.1529725626111031] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [31, 11, 0]]
** centroid: 1, normalized-entropy: 0.8296071030882032, [(1, 31), (2, 11)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 21]]
** centroid: 2, normalized-entropy: 0.42622865699814483, [(2, 2), (3, 21)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 16, 19]]
** centroid: 3, normalized-entropy: 0.9946937953613056, [(2, 16), (3, 19)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9515576702356339] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9515576702356339, 0.7934395195543766] ***
*** finished computation of 3 references, err: [Inf, 0.9515576702356339, 0.7934395195543766] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 33, 29]]
** centroid: 1, normalized-entropy: 0.9969954265557693, [(2, 33), (3, 29)]
*** center 2: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [18, 2, 0]]
** centroid: 3, normalized-entropy: 0.46899559358928133, [(1, 18), (2, 2)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.2707873134315013] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2707873134315013, 0.8426401871442795] ***
*** starting iteration: 2; err: [Inf, 1.2707873134315013, 0.8426401871442795] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2707873134315013, 0.8426401871442795, 0.5532155793905258] ***
*** starting iteration: 3; err: [Inf, 1.2707873134315013, 0.8426401871442795, 0.5532155793905258] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2707873134315013, 0.8426401871442795, 0.5532155793905258, 0.5422371352091432] ***
*** finished computation of 3 references, err: [Inf, 1.2707873134315013, 0.8426401871442795, 0.5532155793905258, 0.5422371352091432] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 36, 12]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 36), (3, 12)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.071726729273796] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.071726729273796, 1.1385216537117957] ***
*** starting iteration: 2; err: [Inf, 2.071726729273796, 1.1385216537117957] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.071726729273796, 1.1385216537117957, 0.8696155728399754] ***
*** starting iteration: 3; err: [Inf, 2.071726729273796, 1.1385216537117957, 0.8696155728399754] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.071726729273796, 1.1385216537117957, 0.8696155728399754, 0.6533898989856243] ***
*** finished computation of 3 references, err: [Inf, 2.071726729273796, 1.1385216537117957, 0.8696155728399754, 0.6533898989856243] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 26, 25]]
** centroid: 2, normalized-entropy: 0.9997226475394071, [(2, 26), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [31, 3, 0]]
** centroid: 3, normalized-entropy: 0.43055186701043935, [(1, 31), (2, 3)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.196453193202615] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.196453193202615, 0.612790540009737] ***
*** starting iteration: 2; err: [Inf, 2.196453193202615, 0.612790540009737] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.196453193202615, 0.612790540009737, 0.5398279594630003] ***
*** starting iteration: 3; err: [Inf, 2.196453193202615, 0.612790540009737, 0.5398279594630003] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.196453193202615, 0.612790540009737, 0.5398279594630003, 0.5198660909384489] ***
*** finished computation of 3 references, err: [Inf, 2.196453193202615, 0.612790540009737, 0.5398279594630003, 0.5198660909384489] ***
*** center 1: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 26, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 9, 29]]
** centroid: 3, normalized-entropy: 0.7897492536625221, [(2, 9), (3, 29)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5475808911025524] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5475808911025524, 0.4681395499035716] ***
*** starting iteration: 2; err: [Inf, 0.5475808911025524, 0.4681395499035716] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5475808911025524, 0.4681395499035716, 0.44535311590880156] ***
*** starting iteration: 3; err: [Inf, 0.5475808911025524, 0.4681395499035716, 0.44535311590880156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5475808911025524, 0.4681395499035716, 0.44535311590880156, 0.43203623343259095] ***
*** finished computation of 7 references, err: [Inf, 0.5475808911025524, 0.4681395499035716, 0.44535311590880156, 0.43203623343259095] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 9, 1]]
** centroid: 2, normalized-entropy: 0.46899559358928133, [(2, 9), (3, 1)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 7, 17]]
** centroid: 4, normalized-entropy: 0.8708644692353648, [(2, 7), (3, 17)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6571368029713631] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6571368029713631, 0.5052225050702691] ***
*** starting iteration: 2; err: [Inf, 0.6571368029713631, 0.5052225050702691] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6571368029713631, 0.5052225050702691, 0.485513441413641] ***
*** starting iteration: 3; err: [Inf, 0.6571368029713631, 0.5052225050702691, 0.485513441413641] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6571368029713631, 0.5052225050702691, 0.485513441413641, 0.47372687358409166] ***
*** finished computation of 7 references, err: [Inf, 0.6571368029713631, 0.5052225050702691, 0.485513441413641, 0.47372687358409166] ***
*** center 1: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 20, 9]]
** centroid: 2, normalized-entropy: 0.8935711016541908, [(2, 20), (3, 9)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 1, 31]]
** centroid: 3, normalized-entropy: 0.2006223243127146, [(2, 1), (3, 31)]
*** center 4: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4826430603861809] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4826430603861809, 0.402280799485743] ***
*** starting iteration: 2; err: [Inf, 0.4826430603861809, 0.402280799485743] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4826430603861809, 0.402280799485743, 0.3983712013438344] ***
*** starting iteration: 3; err: [Inf, 0.4826430603861809, 0.402280799485743, 0.3983712013438344] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4826430603861809, 0.402280799485743, 0.3983712013438344, 0.3959284682199359] ***
*** finished computation of 7 references, err: [Inf, 0.4826430603861809, 0.402280799485743, 0.3983712013438344, 0.3959284682199359] ***
*** center 1: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 7, 21]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(2, 7), (3, 21)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 24, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.0859756453335285] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0859756453335285, 0.7540269821882248] ***
*** finished computation of 3 references, err: [Inf, 1.0859756453335285, 0.7540269821882248] ***
*** center 1: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 36, 31]]
** centroid: 2, normalized-entropy: 0.995978956518722, [(2, 36), (3, 31)]
*** center 3: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0025783774256707] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0025783774256707, 0.7046924138069153] ***
*** finished computation of 3 references, err: [Inf, 1.0025783774256707, 0.7046924138069153] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 29, 12]]
** centroid: 1, normalized-entropy: 0.8721617883411698, [(2, 29), (3, 12)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 28]]
*** center 3: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8541638340055943] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8541638340055943, 0.7062750139832497] ***
*** finished computation of 3 references, err: [Inf, 0.8541638340055943, 0.7062750139832497] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 29, 4]]
** centroid: 1, normalized-entropy: 0.5328350630342235, [(2, 29), (3, 4)]
*** center 2: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 6, 25]]
** centroid: 3, normalized-entropy: 0.708835673332196, [(2, 6), (3, 25)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7139176206290722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7139176206290722, 0.5450855534523725] ***
*** starting iteration: 2; err: [Inf, 0.7139176206290722, 0.5450855534523725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7139176206290722, 0.5450855534523725, 0.5230648538470268] ***
*** starting iteration: 3; err: [Inf, 0.7139176206290722, 0.5450855534523725, 0.5230648538470268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7139176206290722, 0.5450855534523725, 0.5230648538470268, 0.5030670729279518] ***
*** finished computation of 7 references, err: [Inf, 0.7139176206290722, 0.5450855534523725, 0.5230648538470268, 0.5030670729279518] ***
*** center 1: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 20, 3]]
** centroid: 2, normalized-entropy: 0.5586293734521991, [(2, 20), (3, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 11, 1]]
** centroid: 3, normalized-entropy: 0.4138168503036336, [(2, 11), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 3, 21]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(2, 3), (3, 21)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 2, 6]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 2), (3, 6)]
*** center 6: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7005380333960056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7005380333960056, 0.6083480036258697] ***
*** starting iteration: 2; err: [Inf, 0.7005380333960056, 0.6083480036258697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7005380333960056, 0.6083480036258697, 0.5729327954351902] ***
*** starting iteration: 3; err: [Inf, 0.7005380333960056, 0.6083480036258697, 0.5729327954351902] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7005380333960056, 0.6083480036258697, 0.5729327954351902, 0.5588044263422489] ***
*** finished computation of 7 references, err: [Inf, 0.7005380333960056, 0.6083480036258697, 0.5729327954351902, 0.5588044263422489] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 30]]
*** center 2: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 17, 9]]
** centroid: 4, normalized-entropy: 0.9305861291319927, [(2, 17), (3, 9)]
*** center 5: selecting labels [1] (freq >= 1) [from [6, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 12, 1]]
** centroid: 6, normalized-entropy: 0.3912435636292556, [(2, 12), (3, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6873736208677292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6873736208677292, 0.49934985615313054] ***
*** starting iteration: 2; err: [Inf, 0.6873736208677292, 0.49934985615313054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6873736208677292, 0.49934985615313054, 0.4783264953643084] ***
*** starting iteration: 3; err: [Inf, 0.6873736208677292, 0.49934985615313054, 0.4783264953643084] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6873736208677292, 0.49934985615313054, 0.4783264953643084, 0.47329379580914976] ***
*** finished computation of 7 references, err: [Inf, 0.6873736208677292, 0.49934985615313054, 0.4783264953643084, 0.47329379580914976] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 23, 7]]
** centroid: 2, normalized-entropy: 0.7837769474847011, [(2, 23), (3, 7)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 1, 22]]
** centroid: 3, normalized-entropy: 0.2580186686648155, [(2, 1), (3, 22)]
*** center 4: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5380315832793713] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5380315832793713, 0.4100031631812453] ***
*** starting iteration: 2; err: [Inf, 0.5380315832793713, 0.4100031631812453] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5380315832793713, 0.4100031631812453, 0.40376209657639267] ***
*** starting iteration: 3; err: [Inf, 0.5380315832793713, 0.4100031631812453, 0.40376209657639267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5380315832793713, 0.4100031631812453, 0.40376209657639267, 0.4013246253505349] ***
*** starting iteration: 4; err: [Inf, 0.5380315832793713, 0.4100031631812453, 0.40376209657639267, 0.4013246253505349] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5380315832793713, 0.4100031631812453, 0.40376209657639267, 0.4013246253505349, 0.4002020159736276] ***
*** starting iteration: 5; err: [Inf, 0.5380315832793713, 0.4100031631812453, 0.40376209657639267, 0.4013246253505349, 0.4002020159736276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5380315832793713, 0.4100031631812453, 0.40376209657639267, 0.4013246253505349, 0.4002020159736276, 0.3998302898928523] ***
*** finished computation of 7 references, err: [Inf, 0.5380315832793713, 0.4100031631812453, 0.40376209657639267, 0.4013246253505349, 0.4002020159736276, 0.3998302898928523] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 9, 1]]
** centroid: 1, normalized-entropy: 0.46899559358928133, [(2, 9), (3, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 11, 1]]
** centroid: 2, normalized-entropy: 0.4138168503036336, [(2, 11), (3, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 3, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 5, 3]]
** centroid: 5, normalized-entropy: 0.954434002924965, [(2, 5), (3, 3)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 7: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.48016319796442986] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48016319796442986, 0.4269021873921156] ***
*** starting iteration: 2; err: [Inf, 0.48016319796442986, 0.4269021873921156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48016319796442986, 0.4269021873921156, 0.40071206390857694] ***
*** starting iteration: 3; err: [Inf, 0.48016319796442986, 0.4269021873921156, 0.40071206390857694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48016319796442986, 0.4269021873921156, 0.40071206390857694, 0.38106588900089267] ***
*** starting iteration: 4; err: [Inf, 0.48016319796442986, 0.4269021873921156, 0.40071206390857694, 0.38106588900089267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48016319796442986, 0.4269021873921156, 0.40071206390857694, 0.38106588900089267, 0.37898111656308175] ***
*** starting iteration: 5; err: [Inf, 0.48016319796442986, 0.4269021873921156, 0.40071206390857694, 0.38106588900089267, 0.37898111656308175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48016319796442986, 0.4269021873921156, 0.40071206390857694, 0.38106588900089267, 0.37898111656308175, 0.37898111656308175] ***
*** finished computation of 7 references, err: [Inf, 0.48016319796442986, 0.4269021873921156, 0.40071206390857694, 0.38106588900089267, 0.37898111656308175, 0.37898111656308175] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 5, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 7, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.486447895988822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.486447895988822, 0.40721678715199233] ***
*** starting iteration: 2; err: [Inf, 0.486447895988822, 0.40721678715199233] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.486447895988822, 0.40721678715199233, 0.4032898981310427] ***
*** starting iteration: 3; err: [Inf, 0.486447895988822, 0.40721678715199233, 0.4032898981310427] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.486447895988822, 0.40721678715199233, 0.4032898981310427, 0.3988013940304518] ***
*** starting iteration: 4; err: [Inf, 0.486447895988822, 0.40721678715199233, 0.4032898981310427, 0.3988013940304518] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.486447895988822, 0.40721678715199233, 0.4032898981310427, 0.3988013940304518, 0.3923003227263689] ***
*** starting iteration: 5; err: [Inf, 0.486447895988822, 0.40721678715199233, 0.4032898981310427, 0.3988013940304518, 0.3923003227263689] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.486447895988822, 0.40721678715199233, 0.4032898981310427, 0.3988013940304518, 0.3923003227263689, 0.38575588099658487] ***
*** starting iteration: 6; err: [Inf, 0.486447895988822, 0.40721678715199233, 0.4032898981310427, 0.3988013940304518, 0.3923003227263689, 0.38575588099658487] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.486447895988822, 0.40721678715199233, 0.4032898981310427, 0.3988013940304518, 0.3923003227263689, 0.38575588099658487, 0.38342660404741763] ***
*** starting iteration: 7; err: [Inf, 0.486447895988822, 0.40721678715199233, 0.4032898981310427, 0.3988013940304518, 0.3923003227263689, 0.38575588099658487, 0.38342660404741763] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.486447895988822, 0.40721678715199233, 0.4032898981310427, 0.3988013940304518, 0.3923003227263689, 0.38575588099658487, 0.38342660404741763, 0.38342660404741763] ***
*** finished computation of 7 references, err: [Inf, 0.486447895988822, 0.40721678715199233, 0.4032898981310427, 0.3988013940304518, 0.3923003227263689, 0.38575588099658487, 0.38342660404741763, 0.38342660404741763] ***
*** center 1: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 2, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 1, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 2, 16]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(2, 2), (3, 16)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 11, 7]]
** centroid: 7, normalized-entropy: 0.9640787648082293, [(2, 11), (3, 7)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.611762226819992] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.611762226819992, 0.8225788788497448] ***
*** starting iteration: 2; err: [Inf, 1.611762226819992, 0.8225788788497448] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.611762226819992, 0.8225788788497448, 0.5402389252185822] ***
*** starting iteration: 3; err: [Inf, 1.611762226819992, 0.8225788788497448, 0.5402389252185822] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.611762226819992, 0.8225788788497448, 0.5402389252185822, 0.5378520978614688] ***
*** finished computation of 3 references, err: [Inf, 1.611762226819992, 0.8225788788497448, 0.5402389252185822, 0.5378520978614688] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 5, 24]]
** centroid: 2, normalized-entropy: 0.6631968402398286, [(2, 5), (3, 24)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 31, 7]]
** centroid: 3, normalized-entropy: 0.6892019851173655, [(2, 31), (3, 7)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.5788434633612634] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5788434633612634, 1.0537397614121438] ***
*** starting iteration: 2; err: [Inf, 1.5788434633612634, 1.0537397614121438] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5788434633612634, 1.0537397614121438, 0.7742360642552376] ***
*** starting iteration: 3; err: [Inf, 1.5788434633612634, 1.0537397614121438, 0.7742360642552376] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5788434633612634, 1.0537397614121438, 0.7742360642552376, 0.6397724612802267] ***
*** finished computation of 3 references, err: [Inf, 1.5788434633612634, 1.0537397614121438, 0.7742360642552376, 0.6397724612802267] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 26, 23]]
** centroid: 1, normalized-entropy: 0.9972943816462351, [(2, 26), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [31, 3, 0]]
** centroid: 2, normalized-entropy: 0.43055186701043935, [(1, 31), (2, 3)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 17]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.020613792836666] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.020613792836666, 0.566329523101449] ***
*** starting iteration: 2; err: [Inf, 1.020613792836666, 0.566329523101449] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.020613792836666, 0.566329523101449, 0.5096891140192747] ***
*** starting iteration: 3; err: [Inf, 1.020613792836666, 0.566329523101449, 0.5096891140192747] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.020613792836666, 0.566329523101449, 0.5096891140192747, 0.5104744739085436] ***
*** finished computation of 3 references, err: [Inf, 1.020613792836666, 0.566329523101449, 0.5096891140192747, 0.5104744739085436] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 32, 6]]
** centroid: 1, normalized-entropy: 0.6292492238560344, [(2, 32), (3, 6)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 3, 23]]
** centroid: 2, normalized-entropy: 0.5159469300074472, [(2, 3), (3, 23)]
*** center 3: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8023880976438522] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8023880976438522, 0.6419264952465892] ***
*** finished computation of 3 references, err: [Inf, 0.8023880976438522, 0.6419264952465892] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 35, 12]]
** centroid: 2, normalized-entropy: 0.8196004346196011, [(2, 35), (3, 12)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 19]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.5435812954604626] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5435812954604626, 0.9475068338215351] ***
*** finished computation of 3 references, err: [Inf, 1.5435812954604626, 0.9475068338215351] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [31, 6, 0]]
** centroid: 2, normalized-entropy: 0.6394571324851642, [(1, 31), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 23, 20]]
** centroid: 3, normalized-entropy: 0.996485989886783, [(2, 23), (3, 20)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8491606330871582] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8491606330871582, 0.615416711717844] ***
*** finished computation of 3 references, err: [Inf, 0.8491606330871582, 0.615416711717844] ***
*** center 1: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 22]]
** centroid: 2, normalized-entropy: 0.4138168503036336, [(2, 2), (3, 22)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 33, 7]]
** centroid: 3, normalized-entropy: 0.6690158350565576, [(2, 33), (3, 7)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.836407074034214] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.836407074034214, 0.545614230223] ***
*** finished computation of 3 references, err: [Inf, 0.836407074034214, 0.545614230223] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 36, 13]]
** centroid: 1, normalized-entropy: 0.834648285181383, [(2, 36), (3, 13)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 18]]
*** center 3: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8427743910253048] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8427743910253048, 0.6003882505744695] ***
*** finished computation of 3 references, err: [Inf, 0.8427743910253048, 0.6003882505744695] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 28, 16]]
** centroid: 1, normalized-entropy: 0.9456603046006401, [(2, 28), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [31, 1, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 24]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7175607255101204] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7175607255101204, 0.5440261352807283] ***
*** finished computation of 3 references, err: [Inf, 0.7175607255101204, 0.5440261352807283] ***
*** center 1: selecting labels [1] (freq >= 2) [from [36, 1, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 19]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 34, 10]]
** centroid: 3, normalized-entropy: 0.7732266742876346, [(2, 34), (3, 10)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0913464845716954] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0913464845716954, 0.6477810226753354] ***
*** starting iteration: 2; err: [Inf, 1.0913464845716954, 0.6477810226753354] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0913464845716954, 0.6477810226753354, 0.642856029830873] ***
*** starting iteration: 3; err: [Inf, 1.0913464845716954, 0.6477810226753354, 0.642856029830873] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0913464845716954, 0.6477810226753354, 0.642856029830873, 0.6417422411963344] ***
*** finished computation of 3 references, err: [Inf, 1.0913464845716954, 0.6477810226753354, 0.642856029830873, 0.6417422411963344] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 19]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 35, 12]]
** centroid: 3, normalized-entropy: 0.8196004346196011, [(2, 35), (3, 12)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0233546343445779] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0233546343445779, 0.7231117977201938] ***
*** starting iteration: 2; err: [Inf, 1.0233546343445779, 0.7231117977201938] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0233546343445779, 0.7231117977201938, 0.7076759942620993] ***
*** starting iteration: 3; err: [Inf, 1.0233546343445779, 0.7231117977201938, 0.7076759942620993] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0233546343445779, 0.7231117977201938, 0.7076759942620993, 0.6865604085475207] ***
*** finished computation of 3 references, err: [Inf, 1.0233546343445779, 0.7231117977201938, 0.7076759942620993, 0.6865604085475207] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 29, 10]]
** centroid: 1, normalized-entropy: 0.8212809417449864, [(2, 29), (3, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 30]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.038562034368515] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.038562034368515, 0.6408425499498844] ***
*** starting iteration: 2; err: [Inf, 1.038562034368515, 0.6408425499498844] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.038562034368515, 0.6408425499498844, 0.625668330192566] ***
*** starting iteration: 3; err: [Inf, 1.038562034368515, 0.6408425499498844, 0.625668330192566] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.038562034368515, 0.6408425499498844, 0.625668330192566, 0.6179937528073788] ***
*** finished computation of 3 references, err: [Inf, 1.038562034368515, 0.6408425499498844, 0.625668330192566, 0.6179937528073788] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 7, 29]]
** centroid: 1, normalized-entropy: 0.710676853856123, [(2, 7), (3, 29)]
*** center 2: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 28, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.653020341694355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.653020341694355, 0.46794662162661554] ***
*** starting iteration: 2; err: [Inf, 0.653020341694355, 0.46794662162661554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.653020341694355, 0.46794662162661554, 0.45155269019305705] ***
*** starting iteration: 3; err: [Inf, 0.653020341694355, 0.46794662162661554, 0.45155269019305705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.653020341694355, 0.46794662162661554, 0.45155269019305705, 0.4440488638728857] ***
*** finished computation of 7 references, err: [Inf, 0.653020341694355, 0.46794662162661554, 0.45155269019305705, 0.4440488638728857] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 14]]
** centroid: 1, normalized-entropy: 0.3533593350214213, [(2, 1), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 2, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 17, 12]]
** centroid: 6, normalized-entropy: 0.9784493292686188, [(2, 17), (3, 12)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 16, 1]]
** centroid: 7, normalized-entropy: 0.32275695889739825, [(2, 16), (3, 1)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7337317779660225] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7337317779660225, 0.47134559109807017] ***
*** starting iteration: 2; err: [Inf, 0.7337317779660225, 0.47134559109807017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7337317779660225, 0.47134559109807017, 0.4618396127223969] ***
*** starting iteration: 3; err: [Inf, 0.7337317779660225, 0.47134559109807017, 0.4618396127223969] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7337317779660225, 0.47134559109807017, 0.4618396127223969, 0.4599600476026535] ***
*** finished computation of 7 references, err: [Inf, 0.7337317779660225, 0.47134559109807017, 0.4618396127223969, 0.4599600476026535] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 2: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 10, 1]]
** centroid: 3, normalized-entropy: 0.43949698692151346, [(2, 10), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 1, 11]]
** centroid: 7, normalized-entropy: 0.4138168503036336, [(2, 1), (3, 11)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5542897222191095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5542897222191095, 0.4617227051407099] ***
*** starting iteration: 2; err: [Inf, 0.5542897222191095, 0.4617227051407099] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5542897222191095, 0.4617227051407099, 0.4477481610327959] ***
*** starting iteration: 3; err: [Inf, 0.5542897222191095, 0.4617227051407099, 0.4477481610327959] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5542897222191095, 0.4617227051407099, 0.4477481610327959, 0.4382116362452507] ***
*** finished computation of 7 references, err: [Inf, 0.5542897222191095, 0.4617227051407099, 0.4477481610327959, 0.4382116362452507] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 2, 17]]
** centroid: 1, normalized-entropy: 0.48546076074591343, [(2, 2), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 23, 6]]
** centroid: 6, normalized-entropy: 0.7355085815538399, [(2, 23), (3, 6)]
*** center 7: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6582979393005371] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6582979393005371, 0.4533360129594803] ***
*** starting iteration: 2; err: [Inf, 0.6582979393005371, 0.4533360129594803] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6582979393005371, 0.4533360129594803, 0.44285561263561246] ***
*** starting iteration: 3; err: [Inf, 0.6582979393005371, 0.4533360129594803, 0.44285561263561246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6582979393005371, 0.4533360129594803, 0.44285561263561246, 0.4376655493676662] ***
*** finished computation of 7 references, err: [Inf, 0.6582979393005371, 0.4533360129594803, 0.44285561263561246, 0.4376655493676662] ***
*** center 1: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 4, 7]]
** centroid: 3, normalized-entropy: 0.9456603046006401, [(2, 4), (3, 7)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 16, 6]]
** centroid: 4, normalized-entropy: 0.8453509366224364, [(2, 16), (3, 6)]
*** center 5: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7977555692195892] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7977555692195892, 0.47443642795085905] ***
*** starting iteration: 2; err: [Inf, 0.7977555692195892, 0.47443642795085905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7977555692195892, 0.47443642795085905, 0.46730112835764887] ***
*** starting iteration: 3; err: [Inf, 0.7977555692195892, 0.47443642795085905, 0.46730112835764887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7977555692195892, 0.47443642795085905, 0.46730112835764887, 0.4642897361516953] ***
*** finished computation of 7 references, err: [Inf, 0.7977555692195892, 0.47443642795085905, 0.46730112835764887, 0.4642897361516953] ***
*** center 1: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 12]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 10, 4]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(2, 10), (3, 4)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 13, 4]]
** centroid: 4, normalized-entropy: 0.787126586201269, [(2, 13), (3, 4)]
*** center 5: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5926190549135208] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5926190549135208, 0.43376152098178866] ***
*** starting iteration: 2; err: [Inf, 0.5926190549135208, 0.43376152098178866] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5926190549135208, 0.43376152098178866, 0.4192354851961136] ***
*** starting iteration: 3; err: [Inf, 0.5926190549135208, 0.43376152098178866, 0.4192354851961136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5926190549135208, 0.43376152098178866, 0.4192354851961136, 0.4162542091310024] ***
*** finished computation of 7 references, err: [Inf, 0.5926190549135208, 0.43376152098178866, 0.4192354851961136, 0.4162542091310024] ***
*** center 1: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
*** center 5: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 4, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 15, 7]]
** centroid: 7, normalized-entropy: 0.9023932827949788, [(2, 15), (3, 7)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5661836212873459] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5661836212873459, 0.4269841389358044] ***
*** starting iteration: 2; err: [Inf, 0.5661836212873459, 0.4269841389358044] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5661836212873459, 0.4269841389358044, 0.40338238593190906] ***
*** starting iteration: 3; err: [Inf, 0.5661836212873459, 0.4269841389358044, 0.40338238593190906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5661836212873459, 0.4269841389358044, 0.40338238593190906, 0.3891723395138979] ***
*** finished computation of 7 references, err: [Inf, 0.5661836212873459, 0.4269841389358044, 0.40338238593190906, 0.3891723395138979] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 17, 10]]
** centroid: 1, normalized-entropy: 0.9509560484549724, [(2, 17), (3, 10)]
*** center 2: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 6: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 11, 1]]
** centroid: 7, normalized-entropy: 0.4138168503036336, [(2, 11), (3, 1)]
finished with 9 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 16)
[0.9733333333333333, 0.9733333333333333, 0.9666666666666667, 0.9666666666666667, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.9199999999999999, 0.9133333333333332, 0.9066666666666666, 0.9066666666666666, 0.9, 0.8933333333333332, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9733333333333333
finished with 17
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.5966287343204022] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5966287343204022, 0.4110784425958991] ***
*** starting iteration: 2; err: [Inf, 0.5966287343204022, 0.4110784425958991] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5966287343204022, 0.4110784425958991, 0.39804754581302404] ***
*** starting iteration: 3; err: [Inf, 0.5966287343204022, 0.4110784425958991, 0.39804754581302404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5966287343204022, 0.4110784425958991, 0.39804754581302404, 0.39737005092203614] ***
*** finished computation of 7 references, err: [Inf, 0.5966287343204022, 0.4110784425958991, 0.39804754581302404, 0.39737005092203614] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 8]]
** centroid: 3, normalized-entropy: 0.8453509366224364, [(2, 3), (3, 8)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 4]]
** centroid: 4, normalized-entropy: 0.7424875695421234, [(2, 15), (3, 4)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 3, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.639438252300024] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.639438252300024, 0.39381345607340335] ***
*** starting iteration: 2; err: [Inf, 0.639438252300024, 0.39381345607340335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.639438252300024, 0.39381345607340335, 0.38476044334471227] ***
*** starting iteration: 3; err: [Inf, 0.639438252300024, 0.39381345607340335, 0.38476044334471227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.639438252300024, 0.39381345607340335, 0.38476044334471227, 0.38386143147945406] ***
*** finished computation of 7 references, err: [Inf, 0.639438252300024, 0.39381345607340335, 0.38476044334471227, 0.38386143147945406] ***
*** center 1: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 10, 3]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(2, 10), (3, 3)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 13, 5]]
** centroid: 4, normalized-entropy: 0.8524051786494784, [(2, 13), (3, 5)]
*** center 5: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4979922746121883] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4979922746121883, 0.3787352998927236] ***
*** starting iteration: 2; err: [Inf, 0.4979922746121883, 0.3787352998927236] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4979922746121883, 0.3787352998927236, 0.3656257598102093] ***
*** starting iteration: 3; err: [Inf, 0.4979922746121883, 0.3787352998927236, 0.3656257598102093] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4979922746121883, 0.3787352998927236, 0.3656257598102093, 0.35844782542437315] ***
*** finished computation of 7 references, err: [Inf, 0.4979922746121883, 0.3787352998927236, 0.3656257598102093, 0.35844782542437315] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 20, 6]]
** centroid: 1, normalized-entropy: 0.7793498372920851, [(2, 20), (3, 6)]
*** center 2: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 4, 17]]
** centroid: 5, normalized-entropy: 0.7024665512903904, [(2, 4), (3, 17)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
finished with 9 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 17)
[0.9733333333333333, 0.9733333333333333, 0.9666666666666667, 0.9666666666666667, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.9199999999999999, 0.9133333333333332, 0.9066666666666666, 0.9066666666666666, 0.9, 0.8933333333333332, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9733333333333333
finished with 18
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.48403692573308943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48403692573308943, 0.38357184451073406] ***
*** finished computation of 7 references, err: [Inf, 0.48403692573308943, 0.38357184451073406] ***
*** center 1: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 5, 13]]
** centroid: 3, normalized-entropy: 0.8524051786494784, [(2, 5), (3, 13)]
*** center 4: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 17]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 15, 1]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5362361727654934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5362361727654934, 0.45013637997210026] ***
*** finished computation of 7 references, err: [Inf, 0.5362361727654934, 0.45013637997210026] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 1, 12]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 7, 7]]
** centroid: 2, normalized-entropy: 1.0, [(2, 7), (3, 7)]
*** center 3: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 1, 3]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 20, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.43174212247133253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.43174212247133253, 0.3811103143543005] ***
*** finished computation of 7 references, err: [Inf, 0.43174212247133253, 0.3811103143543005] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 12, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 8, 12]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 8), (3, 12)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
*** center 5: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 15, 1]]
*** center 7: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 18)
[0.9733333333333333, 0.9733333333333333, 0.9666666666666667, 0.9666666666666667, 0.9666666666666667, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.9199999999999999, 0.9133333333333332, 0.9066666666666666, 0.9066666666666666, 0.9, 0.8933333333333332, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9733333333333333
finished with 20
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.644912705719471] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.644912705719471, 0.5401636973023415] ***
*** finished computation of 7 references, err: [Inf, 0.644912705719471, 0.5401636973023415] ***
*** center 1: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 2, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 6, 1]]
** centroid: 4, normalized-entropy: 0.5916727785823274, [(2, 6), (3, 1)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 10, 29]]
** centroid: 5, normalized-entropy: 0.8212809417449864, [(2, 10), (3, 29)]
*** center 6: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5867969250679016] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5867969250679016, 0.48308503165841105] ***
*** finished computation of 7 references, err: [Inf, 0.5867969250679016, 0.48308503165841105] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 20]]
** centroid: 5, normalized-entropy: 0.5586293734521991, [(2, 3), (3, 20)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5577950105071068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5577950105071068, 0.47732630126178266] ***
*** finished computation of 7 references, err: [Inf, 0.5577950105071068, 0.47732630126178266] ***
*** center 1: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 23, 7]]
** centroid: 5, normalized-entropy: 0.7837769474847011, [(2, 23), (3, 7)]
*** center 6: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 2, 6]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 2), (3, 6)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.507501886561513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.507501886561513, 0.3861311857402325] ***
*** finished computation of 7 references, err: [Inf, 0.507501886561513, 0.3861311857402325] ***
*** center 1: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 10, 8]]
** centroid: 2, normalized-entropy: 0.9910760598382222, [(2, 10), (3, 8)]
*** center 3: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 9, 1]]
** centroid: 4, normalized-entropy: 0.46899559358928133, [(2, 9), (3, 1)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 9, 7]]
** centroid: 5, normalized-entropy: 0.9886994082884974, [(2, 9), (3, 7)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5140573351085186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5140573351085186, 0.44141754746437073] ***
*** finished computation of 7 references, err: [Inf, 0.5140573351085186, 0.44141754746437073] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 6, 11]]
** centroid: 3, normalized-entropy: 0.9366673818775627, [(2, 6), (3, 11)]
*** center 4: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 7: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5428923127055169] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5428923127055169, 0.41884410366415975] ***
*** finished computation of 7 references, err: [Inf, 0.5428923127055169, 0.41884410366415975] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 9, 5]]
** centroid: 1, normalized-entropy: 0.940285958670631, [(2, 9), (3, 5)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 4, 2]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 4), (3, 2)]
finished with 9 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 20)
[0.9733333333333333, 0.9733333333333333, 0.9733333333333333, 0.9666666666666667, 0.9666666666666667, 0.9666666666666667, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.9199999999999999, 0.9133333333333332, 0.9066666666666666, 0.9066666666666666, 0.9, 0.8933333333333332, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9733333333333333
finished with 22
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.46934559881687166] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46934559881687166, 0.3901497545838356] ***
*** starting iteration: 2; err: [Inf, 0.46934559881687166, 0.3901497545838356] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46934559881687166, 0.3901497545838356, 0.3862060784548521] ***
*** starting iteration: 3; err: [Inf, 0.46934559881687166, 0.3901497545838356, 0.3862060784548521] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46934559881687166, 0.3901497545838356, 0.3862060784548521, 0.38387932628393173] ***
*** finished computation of 7 references, err: [Inf, 0.46934559881687166, 0.3901497545838356, 0.3862060784548521, 0.38387932628393173] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 13]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 11, 17]]
** centroid: 2, normalized-entropy: 0.9666186325481027, [(2, 11), (3, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 12, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 6, 1]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.9100393363833428] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9100393363833428, 0.5230549564212561] ***
*** starting iteration: 2; err: [Inf, 0.9100393363833428, 0.5230549564212561] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9100393363833428, 0.5230549564212561, 0.5072283537685871] ***
*** starting iteration: 3; err: [Inf, 0.9100393363833428, 0.5230549564212561, 0.5072283537685871] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9100393363833428, 0.5230549564212561, 0.5072283537685871, 0.5093877176940441] ***
*** finished computation of 7 references, err: [Inf, 0.9100393363833428, 0.5230549564212561, 0.5072283537685871, 0.5093877176940441] ***
*** center 1: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 33]]
** centroid: 2, normalized-entropy: 0.3159971329784246, [(2, 2), (3, 33)]
*** center 3: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [7, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [2, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 27, 7]]
** centroid: 6, normalized-entropy: 0.7335379291086666, [(2, 27), (3, 7)]
*** center 7: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.44738124251365663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.44738124251365663, 0.38747208774089814] ***
*** starting iteration: 2; err: [Inf, 0.44738124251365663, 0.38747208774089814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.44738124251365663, 0.38747208774089814, 0.38010613702237606] ***
*** starting iteration: 3; err: [Inf, 0.44738124251365663, 0.38747208774089814, 0.38010613702237606] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.44738124251365663, 0.38747208774089814, 0.38010613702237606, 0.3745512436330318] ***
*** finished computation of 7 references, err: [Inf, 0.44738124251365663, 0.38747208774089814, 0.38010613702237606, 0.3745512436330318] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 7, 21]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 7), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 20, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 8, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 6: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [3, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7692594470083713] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7692594470083713, 0.5154162777215242] ***
*** starting iteration: 2; err: [Inf, 0.7692594470083713, 0.5154162777215242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7692594470083713, 0.5154162777215242, 0.48411188431084157] ***
*** starting iteration: 3; err: [Inf, 0.7692594470083713, 0.5154162777215242, 0.48411188431084157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7692594470083713, 0.5154162777215242, 0.48411188431084157, 0.4545351824909449] ***
*** finished computation of 7 references, err: [Inf, 0.7692594470083713, 0.5154162777215242, 0.48411188431084157, 0.4545351824909449] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 6]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(2, 2), (3, 6)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 17, 8]]
** centroid: 4, normalized-entropy: 0.9043814577244941, [(2, 17), (3, 8)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 17, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.8875603803992271] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8875603803992271, 0.6703411720693111] ***
*** starting iteration: 2; err: [Inf, 0.8875603803992271, 0.6703411720693111] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8875603803992271, 0.6703411720693111, 0.6242021097242832] ***
*** starting iteration: 3; err: [Inf, 0.8875603803992271, 0.6703411720693111, 0.6242021097242832] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8875603803992271, 0.6703411720693111, 0.6242021097242832, 0.6121405817195773] ***
*** finished computation of 7 references, err: [Inf, 0.8875603803992271, 0.6703411720693111, 0.6242021097242832, 0.6121405817195773] ***
*** center 1: selecting labels [1] (freq >= 2) [from [7, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 31]]
*** center 3: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 28, 9]]
** centroid: 4, normalized-entropy: 0.8003922080453356, [(2, 28), (3, 9)]
*** center 5: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [3, 0, 0]]
*** center 7: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.9294182196259498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9294182196259498, 0.7365820356458426] ***
*** starting iteration: 2; err: [Inf, 0.9294182196259498, 0.7365820356458426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9294182196259498, 0.7365820356458426, 0.7456272406876088] ***
*** finished computation of 7 references, err: [Inf, 0.9294182196259498, 0.7365820356458426, 0.7456272406876088] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 32, 29]]
** centroid: 1, normalized-entropy: 0.9982545693874832, [(2, 32), (3, 29)]
*** center 2: selecting labels [1] (freq >= 2) [from [3, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 5: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 3, 0]]
** centroid: 6, normalized-entropy: 0.9852281360342514, [(1, 4), (2, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 22)
[0.9733333333333333, 0.9733333333333333, 0.9733333333333333, 0.9666666666666667, 0.9666666666666667, 0.9666666666666667, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9133333333333332, 0.9066666666666666, 0.9066666666666666, 0.9, 0.8933333333333332, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9733333333333333
finished with 22
iteration 6 finished
generating 4 configurations using top 4 configurations, starting with 22)
[0.9733333333333333, 0.9733333333333333, 0.9733333333333333, 0.9666666666666667, 0.9666666666666667, 0.9666666666666667, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9133333333333332, 0.9066666666666666, 0.9066666666666666, 0.9, 0.8933333333333332, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9733333333333333
finished with 22
iteration 7 finished
generating 4 configurations using top 4 configurations, starting with 22)
[0.9733333333333333, 0.9733333333333333, 0.9733333333333333, 0.9666666666666667, 0.9666666666666667, 0.9666666666666667, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9133333333333332, 0.9066666666666666, 0.9066666666666666, 0.9, 0.8933333333333332, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9733333333333333
finished with 24
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.7413694827258587] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7413694827258587, 0.48125190660357475] ***
*** starting iteration: 2; err: [Inf, 0.7413694827258587, 0.48125190660357475] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7413694827258587, 0.48125190660357475, 0.44923328019678593] ***
*** starting iteration: 3; err: [Inf, 0.7413694827258587, 0.48125190660357475, 0.44923328019678593] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7413694827258587, 0.48125190660357475, 0.44923328019678593, 0.44421337626874446] ***
*** starting iteration: 4; err: [Inf, 0.7413694827258587, 0.48125190660357475, 0.44923328019678593, 0.44421337626874446] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7413694827258587, 0.48125190660357475, 0.44923328019678593, 0.44421337626874446, 0.44342540167272093] ***
*** finished computation of 7 references, err: [Inf, 0.7413694827258587, 0.48125190660357475, 0.44923328019678593, 0.44421337626874446, 0.44342540167272093] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 17]]
** centroid: 1, normalized-entropy: 0.3095434291503252, [(2, 1), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 3, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 5: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 6, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7010002146661282] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7010002146661282, 0.4880401598662138] ***
*** starting iteration: 2; err: [Inf, 0.7010002146661282, 0.4880401598662138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7010002146661282, 0.4880401598662138, 0.47429754927754403] ***
*** starting iteration: 3; err: [Inf, 0.7010002146661282, 0.4880401598662138, 0.47429754927754403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7010002146661282, 0.4880401598662138, 0.47429754927754403, 0.46432529903948305] ***
*** starting iteration: 4; err: [Inf, 0.7010002146661282, 0.4880401598662138, 0.47429754927754403, 0.46432529903948305] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7010002146661282, 0.4880401598662138, 0.47429754927754403, 0.46432529903948305, 0.4636025746166706] ***
*** finished computation of 7 references, err: [Inf, 0.7010002146661282, 0.4880401598662138, 0.47429754927754403, 0.46432529903948305, 0.4636025746166706] ***
*** center 1: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 10, 4]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(2, 10), (3, 4)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 13, 4]]
** centroid: 4, normalized-entropy: 0.787126586201269, [(2, 13), (3, 4)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6593525475263595] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6593525475263595, 0.42448752515017985] ***
*** starting iteration: 2; err: [Inf, 0.6593525475263595, 0.42448752515017985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6593525475263595, 0.42448752515017985, 0.4135712728649378] ***
*** starting iteration: 3; err: [Inf, 0.6593525475263595, 0.42448752515017985, 0.4135712728649378] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6593525475263595, 0.42448752515017985, 0.4135712728649378, 0.4135712728649378] ***
*** finished computation of 7 references, err: [Inf, 0.6593525475263595, 0.42448752515017985, 0.4135712728649378, 0.4135712728649378] ***
*** center 1: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 15, 7]]
** centroid: 7, normalized-entropy: 0.9023932827949788, [(2, 15), (3, 7)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6172099928557873] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6172099928557873, 0.409799827337265] ***
*** starting iteration: 2; err: [Inf, 0.6172099928557873, 0.409799827337265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6172099928557873, 0.409799827337265, 0.38749101080000403] ***
*** starting iteration: 3; err: [Inf, 0.6172099928557873, 0.409799827337265, 0.38749101080000403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6172099928557873, 0.409799827337265, 0.38749101080000403, 0.37960096798837184] ***
*** starting iteration: 4; err: [Inf, 0.6172099928557873, 0.409799827337265, 0.38749101080000403, 0.37960096798837184] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6172099928557873, 0.409799827337265, 0.38749101080000403, 0.37960096798837184, 0.37534783318638804] ***
*** starting iteration: 5; err: [Inf, 0.6172099928557873, 0.409799827337265, 0.38749101080000403, 0.37960096798837184, 0.37534783318638804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6172099928557873, 0.409799827337265, 0.38749101080000403, 0.37960096798837184, 0.37534783318638804, 0.3749064727127552] ***
*** finished computation of 7 references, err: [Inf, 0.6172099928557873, 0.409799827337265, 0.38749101080000403, 0.37960096798837184, 0.37534783318638804, 0.3749064727127552] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 2, 18]]
** centroid: 1, normalized-entropy: 0.46899559358928133, [(2, 2), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 4, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 5: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6167740288376808] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6167740288376808, 0.4458855333179235] ***
*** starting iteration: 2; err: [Inf, 0.6167740288376808, 0.4458855333179235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6167740288376808, 0.4458855333179235, 0.4321565652266145] ***
*** starting iteration: 3; err: [Inf, 0.6167740288376808, 0.4458855333179235, 0.4321565652266145] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6167740288376808, 0.4458855333179235, 0.4321565652266145, 0.4222847365215421] ***
*** starting iteration: 4; err: [Inf, 0.6167740288376808, 0.4458855333179235, 0.4321565652266145, 0.4222847365215421] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6167740288376808, 0.4458855333179235, 0.4321565652266145, 0.4222847365215421, 0.41780083902180193] ***
*** starting iteration: 5; err: [Inf, 0.6167740288376808, 0.4458855333179235, 0.4321565652266145, 0.4222847365215421, 0.41780083902180193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6167740288376808, 0.4458855333179235, 0.4321565652266145, 0.4222847365215421, 0.41780083902180193, 0.4179164195805788] ***
*** finished computation of 7 references, err: [Inf, 0.6167740288376808, 0.4458855333179235, 0.4321565652266145, 0.4222847365215421, 0.41780083902180193, 0.4179164195805788] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 19, 5]]
** centroid: 1, normalized-entropy: 0.7382848661434506, [(2, 19), (3, 5)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 4, 22]]
** centroid: 4, normalized-entropy: 0.6193821946787638, [(2, 4), (3, 22)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5837427279353142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5837427279353142, 0.36800231397151945] ***
*** starting iteration: 2; err: [Inf, 0.5837427279353142, 0.36800231397151945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5837427279353142, 0.36800231397151945, 0.3521412436664104] ***
*** starting iteration: 3; err: [Inf, 0.5837427279353142, 0.36800231397151945, 0.3521412436664104] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5837427279353142, 0.36800231397151945, 0.3521412436664104, 0.34767710864543916] ***
*** starting iteration: 4; err: [Inf, 0.5837427279353142, 0.36800231397151945, 0.3521412436664104, 0.34767710864543916] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5837427279353142, 0.36800231397151945, 0.3521412436664104, 0.34767710864543916, 0.3471198906004429] ***
*** finished computation of 7 references, err: [Inf, 0.5837427279353142, 0.36800231397151945, 0.3521412436664104, 0.34767710864543916, 0.3471198906004429] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 16]]
** centroid: 6, normalized-entropy: 0.5032583347756457, [(2, 2), (3, 16)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 9, 7]]
** centroid: 7, normalized-entropy: 0.9886994082884974, [(2, 9), (3, 7)]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 24)
[0.9733333333333333, 0.9733333333333333, 0.9733333333333333, 0.9666666666666667, 0.9666666666666667, 0.9666666666666667, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9133333333333332, 0.9066666666666666, 0.9066666666666666, 0.9, 0.8933333333333332, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9733333333333333
finished with 24
iteration 9 finished
[ Info: ========== BEST MODEL ==========
[ Info: (AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 1), 0.9733333333333333)
[ Info: AKNC{Array{Float64,1}}[AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[6.664705882352942, 3.041176470588235, 5.488235294117648, 1.9882352941176473], [4.7299999999999995, 3.16, 1.4450000000000003, 0.2200000000000001], [4.95, 2.2, 3.4, 1.0], [5.338461538461539, 3.738461538461538, 1.5153846153846153, 0.27692307692307694], [7.525, 2.775, 6.500000000000001, 1.9999999999999998], [6.311764705882353, 2.958823529411765, 4.629411764705883, 1.4705882352941178], [6.008333333333332, 2.7083333333333335, 5.058333333333333, 1.8083333333333336], [5.614285714285714, 2.6142857142857148, 3.9928571428571433, 1.242857142857143]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [3, 1, 2, 1, 3, 2, 3, 2], 3), KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 1)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[7.474999999999999, 3.125, 6.3, 2.0500000000000003], [4.987096774193549, 3.3935483870967733, 1.4322580645161287, 0.24193548387096783], [5.627272727272726, 2.6363636363636367, 4.218181818181818, 1.3181818181818181], [6.533333333333334, 2.941666666666667, 4.541666666666667, 1.3833333333333335], [6.546666666666667, 3.1466666666666665, 5.526666666666667, 2.2], [5.3, 2.5166666666666666, 3.4000000000000004, 1.0666666666666667], [6.115384615384615, 2.6692307692307695, 5.153846153846154, 1.823076923076923]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [3, 1, 2, 2, 3, 2, 3], 3), KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 1)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[6.472727272727273, 3.013636363636364, 5.39090909090909, 2.0545454545454542], [4.718181818181818, 3.0818181818181816, 1.4272727272727275, 0.18181818181818182], [5.4, 2.44, 3.6700000000000004, 1.1300000000000001], [5.5, 4.05, 1.4666666666666666, 0.25], [7.55, 3.4000000000000004, 6.316666666666666, 2.15], [6.0086956521739125, 2.882608695652174, 4.452173913043478, 1.391304347826087], [5.95, 2.8000000000000003, 4.966666666666666, 1.8166666666666667], [5.110526315789474, 3.5052631578947366, 1.5210526315789472, 0.28421052631578947]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [3, 1, 2, 1, 3, 2, 3, 1], 3), KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :fft, 0.6, 1))]
Test Summary: | Pass  Total
AKNC          |    1      1
[389, 1, 1, 2, 1, 8, 2, 11, 1, 5, 9, 24, 3, 10, 5, 1, 3, 10, 12, 1, 8, 12, 2, 8, 18, 3, 2, 7, 2, 16, 41, 10, 37, 46, 2, 91, 15, 3, 1, 5, 1, 20, 4, 2, 20, 15, 17, 8, 5, 3, 5, 5, 6, 16, 13, 5, 8, 16, 51, 3, 7, 25, 33, 32, 6, 9, 7, 17, 48, 94, 3, 16, 5, 1, 38, 14, 8, 27, 7, 2, 26, 3, 4, 38, 40, 14, 6, 10, 6, 17, 31, 138, 16, 33, 13, 5, 9, 63, 5, 3, 71, 23, 17, 37, 8, 5, 19, 37, 24, 12, 3, 10, 19, 58, 48, 12, 28, 18, 31, 3, 13, 26, 14, 13, 23, 433, 14, 22, 8, 11, 34, 9, 2, 47, 20, 18, 3, 8, 37, 22, 1, 11, 40, 29, 36, 11, 3, 52, 6, 9, 150, 16, 54, 14, 6, 4, 11, 42, 4, 8, 7, 18, 31, 13, 30, 32, 19, 24, 18, 7, 21, 47, 50, 22, 9, 1146, 11, 638, 6, 5, 4, 6, 44, 9, 8, 91, 13, 19, 3, 47, 1, 2, 48, 23, 65, 19, 20, 4, 15, 4, 139, 22, 19, 131, 2, 10, 7, 5, 7, 42, 2, 127, 73, 56, 2, 29, 8, 5, 11, 10, 11, 29, 52, 50, 27, 8, 24, 4, 27, 17, 12, 9, 24, 69, 22, 10, 18, 5, 10, 4, 22, 33, 423, 29, 31, 67, 10, 27, 47, 33, 27, 7, 8, 45, 95, 6, 26, 12, 11, 22, 30, 31, 14, 22, 5, 37, 29, 22, 23, 57, 24, 17, 21, 7, 20, 9, 42, 54, 4, 68, 101, 142, 155, 130, 21, 8, 12, 55, 17, 49, 4, 83, 13, 46, 16, 30, 6, 19, 45, 96]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7070000000000001, speedup = 0.2350745054785035, eval_ratio = 0.097972)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4274398561507937,"recall":0.420138888888889,"f1":null,"seconds":0.00020943209528923035,"exhaustive_search_seconds":0.00037570297718048096,"evaluations":563.609375,"distances_sum":1729.8192470431977}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5720486111111113,"recall":0.5720486111111113,"f1":null,"seconds":0.0005111582577228546,"exhaustive_search_seconds":0.00037570297718048096,"evaluations":780.375,"distances_sum":1618.2975316526968}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6788194444444442,"recall":0.6788194444444442,"f1":0.6788194444444442,"seconds":0.0004457850009202957,"exhaustive_search_seconds":0.00037570297718048096,"evaluations":933.890625,"distances_sum":1570.4331975422601}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7552083333333327,"recall":0.7552083333333327,"f1":0.7552083333333327,"seconds":0.0005741547793149948,"exhaustive_search_seconds":0.00037570297718048096,"evaluations":1116.7109375,"distances_sum":1539.9605808503372}
KCenters.DeloneInvIndex> reached performance {"precision":0.8020833333333326,"recall":0.8020833333333326,"f1":0.8020833333333326,"seconds":0.0006535090506076813,"exhaustive_search_seconds":0.00037570297718048096,"evaluations":1203.3515625,"distances_sum":1526.429018017632}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.828, speedup = 0.4874245957561625, eval_ratio = 0.12984)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
