Julia Version 1.5.0-DEV.271
Commit 438485e5a9 (2020-02-14 18:24 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Missings ──────────────────── v0.4.3
  Installed Parsers ───────────────────── v0.3.11
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed KCenters ──────────────────── v0.2.1
  Installed Tables ────────────────────── v1.0.1
  Installed MLDataPattern ─────────────── v0.5.0
  Installed DataFrames ────────────────── v0.20.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.1.0
  Installed TableTraits ───────────────── v1.0.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed DataStructures ────────────── v0.17.9
  Installed Compat ────────────────────── v3.5.0
  Installed OrderedCollections ────────── v1.1.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed JSON ──────────────────────── v0.21.0
  Installed MLDataUtils ───────────────── v0.5.0
  Installed StatsBase ─────────────────── v0.32.1
  Installed InvertedIndices ───────────── v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Reexport ──────────────────── v0.2.0
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed CategoricalArrays ─────────── v0.7.7
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.1
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.5.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.1
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.1
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_VNewJl/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.5.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.1
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.1
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9326678744951884
[ Info: 0.8307796732584636
[ Info: 0.5559340282777945
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3433588461826245
mean(cdnet.distances) = 0.34840803844233353
mean(crand.distances) = 0.3535385124385357
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.71484375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.71484375,"f1":0.824011405261406,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.09375,"distances_sum":2045.2324966072756}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.71484375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.71484375,"f1":0.824011405261406,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.09375,"distances_sum":2045.2324966072756}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.794921875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.794921875,"f1":0.8808035714285724,"seconds":5.291774868965149e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.4140625,"distances_sum":2325.550939255914}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9353537087912095,"seconds":5.513429641723633e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.8203125,"distances_sum":2645.0837405428197}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.88671875,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.88671875,"f1":0.9353537087912095,"seconds":5.513429641723633e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.8203125,"distances_sum":2645.0837405428197}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9496768856143861,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.8359375,"distances_sum":2780.5639417544453}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9394288003663008,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.8046875,"distances_sum":2679.989858048159}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9510734057609062,"seconds":5.748122930526733e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.796875,"distances_sum":2803.1430047926033}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9510734057609062,"seconds":5.748122930526733e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.796875,"distances_sum":2803.1430047926033}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.916015625,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9510734057609062,"seconds":5.748122930526733e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.796875,"distances_sum":2803.1430047926033}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7001953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":null,"recall":0.7001953125,"f1":null,"seconds":4.813075065612793e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.0625,"distances_sum":1636.5689670130375}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8758246961371969,"seconds":5.144625902175903e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.328125,"distances_sum":1902.0101125599247}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.232421875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.232421875,"f1":null,"seconds":3.285706043243408e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.1796875,"distances_sum":578.9149441262929}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7890625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7890625,"f1":0.8758246961371969,"seconds":5.144625902175903e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.328125,"distances_sum":1902.0101125599247}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9461195054945062,"seconds":6.057322025299072e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8203125,"distances_sum":2344.97963398445}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9733630952380954,"seconds":5.951151251792908e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.90625,"distances_sum":2568.400511237537}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.9027472527472536,"seconds":5.500391125679016e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.6015625,"distances_sum":2072.010601563723}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9733630952380954,"seconds":5.951151251792908e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.90625,"distances_sum":2568.400511237537}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9733630952380954,"seconds":5.951151251792908e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.90625,"distances_sum":2568.400511237537}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9733630952380954,"seconds":5.951151251792908e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.90625,"distances_sum":2568.400511237537}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.8472855269730278,"seconds":5.0477683544158936e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.3359375,"distances_sum":1799.9642662964304}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.39453125, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.39453125,"f1":null,"seconds":3.471970558166504e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":6.21875,"distances_sum":850.9900012457315}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6904296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6904296875,"f1":0.8079491688866699,"seconds":4.770234227180481e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.9296875,"distances_sum":1612.5382729246437}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.748046875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.748046875,"f1":0.8472855269730278,"seconds":5.0477683544158936e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.3359375,"distances_sum":1799.9642662964304}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9544642857142863,"seconds":5.926936864852905e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.875,"distances_sum":2445.635789646831}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9340487637362644,"seconds":6.658956408500671e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.71875,"distances_sum":2304.6994752510755}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.8992240398490408,"seconds":6.128102540969849e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.5390625,"distances_sum":2058.1413008063746}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9576293498168503,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.828125,"distances_sum":2472.270889278088}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8553066724941734,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.4375,"distances_sum":1846.9506458201913}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8602600524475532,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.4609375,"distances_sum":1870.5055923200753}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9576293498168503,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.828125,"distances_sum":2472.270889278088}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9622455669330675,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8359375,"distances_sum":2519.990812384463}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9763221153846157,"seconds":6.107613444328308e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9375,"distances_sum":2593.0940418537075}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9673191391941396,"seconds":6.172806024551392e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.890625,"distances_sum":2560.9405333444456}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9622081043956047,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.875,"distances_sum":2490.4060135978157}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9617616758241763,"seconds":6.3497573137283325e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8984375,"distances_sum":2489.9177613848556}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9684523809523815,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9140625,"distances_sum":2529.6653238368017}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9763221153846157,"seconds":6.107613444328308e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9375,"distances_sum":2593.0940418537075}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9763221153846157,"seconds":6.107613444328308e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9375,"distances_sum":2593.0940418537075}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6474609375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6474609375,"f1":0.7711056304806313,"seconds":4.639849066734314e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":7.46875,"distances_sum":1633.9338470101159}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.857418623043624,"seconds":5.234032869338989e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.046875,"distances_sum":2016.0646489093394}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2216796875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2216796875,"f1":null,"seconds":3.0603259801864624e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":6.0078125,"distances_sum":569.0944564340771}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.857418623043624,"seconds":5.234032869338989e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.046875,"distances_sum":2016.0646489093394}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9295163170163177,"seconds":5.576759576797485e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.7734375,"distances_sum":2388.6256522865747}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9270260989010993,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.671875,"distances_sum":2377.0695824742534}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.810546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.810546875,"f1":0.8882185522810531,"seconds":5.628913640975952e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.4296875,"distances_sum":2128.816245181092}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9536172161172168,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.8046875,"distances_sum":2568.848290214953}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9536172161172168,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.8046875,"distances_sum":2568.848290214953}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.975858516483517,"seconds":6.163492798805237e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.9375,"distances_sum":2704.2892704871956}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9690705128205132,"seconds":6.077811121940613e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.921875,"distances_sum":2677.831012357647}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9657051282051284,"seconds":5.882233381271362e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.8984375,"distances_sum":2618.570162408639}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9653559981684985,"seconds":6.284564733505249e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.8828125,"distances_sum":2642.049099566389}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9572287087912092,"seconds":6.288290023803711e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.828125,"distances_sum":2584.6564912700524}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.975858516483517,"seconds":6.163492798805237e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.9375,"distances_sum":2704.2892704871956}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.975858516483517,"seconds":6.163492798805237e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.9375,"distances_sum":2704.2892704871956}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4873046875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.4873046875,"f1":null,"seconds":3.95067036151886e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":6.8125,"distances_sum":1139.1964026810276}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1904296875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1904296875,"f1":null,"seconds":2.9616057872772217e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":4.640625,"distances_sum":569.897615605868}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4873046875,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.4873046875,"f1":null,"seconds":3.95067036151886e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":6.8125,"distances_sum":1139.1964026810276}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8134765625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8134765625,"f1":0.8891233766233775,"seconds":5.494803190231323e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.5859375,"distances_sum":2043.5571349951863}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6669921875,"f1":0.7907092907092914,"seconds":4.7031790018081665e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.609375,"distances_sum":1623.0498603269084}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8134765625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8134765625,"f1":0.8891233766233775,"seconds":5.494803190231323e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.5859375,"distances_sum":2043.5571349951863}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.894975337162838,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.4921875,"distances_sum":2117.5681385769144}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9305033508158516,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.828125,"distances_sum":2284.846510848061}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8798828125,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9305033508158516,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.828125,"distances_sum":2284.846510848061}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8798828125,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9305033508158516,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.828125,"distances_sum":2284.846510848061}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.373046875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.373046875,"f1":null,"seconds":3.986060619354248e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":5.96875,"distances_sum":845.1414007480449}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69921875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.69921875,"f1":0.8139345029970038,"seconds":4.967674612998962e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.640625,"distances_sum":1727.3300133235107}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8679232226107235,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.7421875,"distances_sum":1987.8920940061428}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7783203125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7783203125,"f1":0.8679232226107235,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.7421875,"distances_sum":1987.8920940061428}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9580044955044961,"seconds":6.372109055519104e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7109375,"distances_sum":2654.114675231329}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9407280219780223,"seconds":6.1746686697006226e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.671875,"distances_sum":2535.527016787273}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9439045329670334,"seconds":6.3516199588775635e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7265625,"distances_sum":2497.6788356842935}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8486328125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8486328125,"f1":0.9116701007326014,"seconds":6.232410669326782e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.375,"distances_sum":2325.6754479419437}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8747226731601739,"seconds":5.243346095085144e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.8671875,"distances_sum":2042.4836944965482}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.896466033966035,"seconds":6.031244993209839e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.1171875,"distances_sum":2201.4884203883094}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9580044955044961,"seconds":6.372109055519104e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7109375,"distances_sum":2654.114675231329}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":13,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9603308150183153,"seconds":6.148591637611389e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7734375,"distances_sum":2640.1499517075767}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9599587912087917,"seconds":6.455928087234497e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.8125,"distances_sum":2616.2082011497637}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9750744047619052,"seconds":6.5658241510391235e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.890625,"distances_sum":2737.370516777934}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9658203125, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9658203125,"f1":0.9813988095238096,"seconds":6.632879376411438e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.9375,"distances_sum":2784.601411658976}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9669299450549456,"seconds":6.683170795440674e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.8828125,"distances_sum":2673.2214251534365}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9683779761904767,"seconds":6.327405571937561e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.828125,"distances_sum":2705.761089555027}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9658203125,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9813988095238096,"seconds":6.632879376411438e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.9375,"distances_sum":2784.601411658976}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9658203125,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9813988095238096,"seconds":6.632879376411438e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.9375,"distances_sum":2784.601411658976}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6748046875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6748046875,"f1":0.7963130619380627,"seconds":5.044043064117432e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.6953125,"distances_sum":1546.2324321068697}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6748046875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6748046875,"f1":0.7963130619380627,"seconds":5.044043064117432e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.6953125,"distances_sum":1546.2324321068697}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9600160256410264,"seconds":5.898997187614441e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.78125,"distances_sum":2470.06891101178}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.948408882783883,"seconds":5.908310413360596e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.7109375,"distances_sum":2400.6448671795033}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8519334831834842,"seconds":5.31412661075592e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.8984375,"distances_sum":1788.62568586368}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9600160256410264,"seconds":5.898997187614441e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.78125,"distances_sum":2470.06891101178}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9672447344322348,"seconds":6.103888154029846e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.78125,"distances_sum":2538.0039687850494}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9706673534798541,"seconds":6.3516199588775635e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8671875,"distances_sum":2558.605525650262}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9686412545787548,"seconds":6.226822733879089e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.84375,"distances_sum":2519.640731601992}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9706673534798541,"seconds":6.3516199588775635e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8671875,"distances_sum":2558.605525650262}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9706673534798541,"seconds":6.3516199588775635e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8671875,"distances_sum":2558.605525650262}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8489848692973703,"seconds":5.912035703659058e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.0234375,"distances_sum":1886.763782996092}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8475139443889451,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":7.9609375,"distances_sum":1883.5439985745102}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.751953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.751953125,"f1":0.8489848692973703,"seconds":5.912035703659058e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.0234375,"distances_sum":1886.763782996092}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9250972985347995,"seconds":6.124377250671387e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.609375,"distances_sum":2365.9506251598614}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8681640625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8681640625,"f1":0.9250972985347995,"seconds":6.124377250671387e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.609375,"distances_sum":2365.9506251598614}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8681640625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8681640625,"f1":0.9250972985347995,"seconds":6.124377250671387e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.609375,"distances_sum":2365.9506251598614}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8681640625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8681640625,"f1":0.9250972985347995,"seconds":6.124377250671387e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.609375,"distances_sum":2365.9506251598614}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7953993922743932,"seconds":5.133450031280518e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":7.390625,"distances_sum":719.1225041078465}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.328125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.328125,"f1":null,"seconds":3.958120942115784e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":5.4921875,"distances_sum":343.9573448581445}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.572265625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.572265625,"f1":0.7111518689643697,"seconds":4.8354268074035645e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":7.0546875,"distances_sum":574.8062343294333}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.673828125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.673828125,"f1":0.7953993922743932,"seconds":5.133450031280518e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":7.390625,"distances_sum":719.1225041078465}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8621168761793772,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.0546875,"distances_sum":871.3999246871364}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8594103812853823,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.015625,"distances_sum":842.5971605304915}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7724609375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7724609375,"f1":0.8621168761793772,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.0546875,"distances_sum":871.3999246871364}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9231143856143866,"seconds":6.152316927909851e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.6484375,"distances_sum":993.4946675991023}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9350217490842495,"seconds":6.424263119697571e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.6015625,"distances_sum":1024.4262792626967}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9490212912087919,"seconds":6.718561053276062e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.6484375,"distances_sum":1096.089633170259}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.940633845321346,"seconds":6.249174475669861e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.6015625,"distances_sum":1055.7255903792466}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9192911255411262,"seconds":6.4373016357421875e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.609375,"distances_sum":993.8772758619145}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9164007867132875,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.6171875,"distances_sum":989.1177075706875}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9391483516483522,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.65625,"distances_sum":1044.5367720776337}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.9161057692307701,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.625,"distances_sum":970.6470734577919}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9470867673992681,"seconds":6.355345249176025e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.6640625,"distances_sum":1090.9405312921408}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9490212912087919,"seconds":6.718561053276062e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.6484375,"distances_sum":1096.089633170259}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.908203125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9490212912087919,"seconds":6.718561053276062e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.6484375,"distances_sum":1096.089633170259}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.169921875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.169921875,"f1":null,"seconds":3.1050294637680054e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":5.46875,"distances_sum":191.03114442926048}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8540959040959052,"seconds":6.159767508506775e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.203125,"distances_sum":880.7306872458546}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7626953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7626953125,"f1":0.8540959040959052,"seconds":6.159767508506775e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.203125,"distances_sum":880.7306872458546}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8583984375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8583984375,"f1":0.9152711871461878,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.6171875,"distances_sum":1038.4693976440112}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.925612408424909,"seconds":5.869194865226746e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.625,"distances_sum":1051.5367616275985}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8664158757908766,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.21875,"distances_sum":915.3753333272632}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8720703125,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.8720703125,"f1":0.925612408424909,"seconds":5.869194865226746e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.625,"distances_sum":1051.5367616275985}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9348901098901101,"seconds":6.377696990966797e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.6484375,"distances_sum":1092.3643186088918}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.890625,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.890625,"f1":0.9348901098901101,"seconds":6.377696990966797e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.6484375,"distances_sum":1092.3643186088918}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.890625,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.890625,"f1":0.9348901098901101,"seconds":6.377696990966797e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.6484375,"distances_sum":1092.3643186088918}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.697265625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.697265625,"f1":0.8112111846486855,"seconds":5.101785063743591e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":8.0703125,"distances_sum":782.3883301366537}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8916099525474536,"seconds":6.3944607973098755e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":8.5390625,"distances_sum":943.833200007719}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8154296875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.8154296875,"f1":0.8916099525474536,"seconds":6.3944607973098755e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":8.5390625,"distances_sum":943.833200007719}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.9014142107892117,"seconds":5.582347512245178e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":8.640625,"distances_sum":976.4084635674831}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8310546875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8310546875,"f1":0.9014142107892117,"seconds":5.582347512245178e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":8.640625,"distances_sum":976.4084635674831}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9734031593406596,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":8.90625,"distances_sum":1175.724840858935}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9577838827838833,"seconds":6.258487701416016e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":8.875,"distances_sum":1127.957661684722}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9698489010989014,"seconds":6.269663572311401e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":8.921875,"distances_sum":1164.8135016135072}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9734031593406596,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":8.90625,"distances_sum":1175.724840858935}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9734031593406596,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":8.90625,"distances_sum":1175.724840858935}}, n: 9
mean(cfft.distances) = 0.3586023266322657
mean(cdnet.distances) = 0.36158372383741694
mean(crand.distances) = 0.42582757698639034
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8911111111111111
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.9466666666666667
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8777777777777778
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8911111111111111
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8844444444444445
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8888888888888888
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9466666666666667
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8777777777777778
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9333333333333332
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8911111111111111
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.88
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9333333333333332
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8888888888888888
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8866666666666667
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9288888888888889
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9199999999999999
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8755555555555555
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8777777777777778
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.94
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9333333333333332
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9155555555555556
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9311111111111111
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8755555555555555
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222224
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8933333333333334
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8955555555555557
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8644444444444446
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9111111111111111
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5871898356080055] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 23]]
** centroid: 4, normalized-entropy: 0.24988229283318547, [(2, 1), (3, 23)]
*** center 5: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 6, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 11, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
*** center 12: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
finished with 14 centroids; started with 12
acc = 0.9733333333333334
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.18712476887194826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18712476887194826, 0.16135905532679568] ***
*** finished computation of 7 references, err: [Inf, 0.18712476887194826, 0.16135905532679568] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [15, 60, 0]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(1, 15), (2, 60)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 114, 17]]
** centroid: 2, normalized-entropy: 0.5568097960715243, [(2, 114), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 14, 0]]
** centroid: 3, normalized-entropy: 0.7335379291086666, [(1, 54), (2, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [93, 61, 0]]
** centroid: 6, normalized-entropy: 0.9686258457313756, [(1, 93), (2, 61)]
*** center 7: selecting labels [1] (freq >= 2) [from [139, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.197474872651468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.197474872651468, 0.14982611090839804] ***
*** finished computation of 7 references, err: [Inf, 0.197474872651468, 0.14982611090839804] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [66, 58, 0]]
** centroid: 1, normalized-entropy: 0.9969954265557693, [(1, 66), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [71, 5, 0]]
** centroid: 2, normalized-entropy: 0.35001059292688486, [(1, 71), (2, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 76, 17]]
** centroid: 4, normalized-entropy: 0.6861549474202007, [(2, 76), (3, 17)]
*** center 5: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [72, 24, 0]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(1, 72), (2, 24)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 86, 0]]
** centroid: 7, normalized-entropy: 0.21265863988163503, [(1, 3), (2, 86)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18931751728973825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18931751728973825, 0.15264661264964666] ***
*** finished computation of 7 references, err: [Inf, 0.18931751728973825, 0.15264661264964666] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [44, 8, 0]]
** centroid: 1, normalized-entropy: 0.6193821946787638, [(1, 44), (2, 8)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 95, 16]]
** centroid: 2, normalized-entropy: 0.5949898952560516, [(2, 95), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [36, 58, 0]]
** centroid: 3, normalized-entropy: 0.9601186626422924, [(1, 36), (2, 58)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [105, 24, 0]]
** centroid: 4, normalized-entropy: 0.6931274153282881, [(1, 105), (2, 24)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 60, 4]]
** centroid: 5, normalized-entropy: 0.3372900666170139, [(2, 60), (3, 4)]
*** center 6: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [140, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20911359945256291] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20911359945256291, 0.17372632231577292] ***
*** finished computation of 7 references, err: [Inf, 0.20911359945256291, 0.17372632231577292] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [138, 63, 0]]
** centroid: 1, normalized-entropy: 0.8970964164730478, [(1, 138), (2, 63)]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 128, 25]]
** centroid: 3, normalized-entropy: 0.6423786613569126, [(2, 128), (3, 25)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [25, 53, 0]]
** centroid: 4, normalized-entropy: 0.9049382594235603, [(1, 25), (2, 53)]
*** center 5: selecting labels [1] (freq >= 2) [from [118, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [28, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.45880107406118475] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45880107406118475, 0.3520312922609573] ***
*** finished computation of 3 references, err: [Inf, 0.45880107406118475, 0.3520312922609573] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [105, 185, 17]]
** centroid: 1, normalized-entropy: 0.7576806631959165, [(1, 105), (2, 185), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [131, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [164, 64, 0]]
** centroid: 3, normalized-entropy: 0.8564052389131375, [(1, 164), (2, 64)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.45632401799623934] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45632401799623934, 0.31678732039722457] ***
*** finished computation of 3 references, err: [Inf, 0.45632401799623934, 0.31678732039722457] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [45, 204, 20]]
** centroid: 1, normalized-entropy: 0.6390841208121124, [(1, 45), (2, 204), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [179, 41, 0]]
** centroid: 2, normalized-entropy: 0.6938021847990082, [(1, 179), (2, 41)]
*** center 3: selecting labels [1] (freq >= 2) [from [178, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5135417631932017] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5135417631932017, 0.32345802842665916] ***
*** finished computation of 3 references, err: [Inf, 0.5135417631932017, 0.32345802842665916] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [112, 174, 25]]
** centroid: 1, normalized-entropy: 0.8149895825034523, [(1, 112), (2, 174), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [227, 14, 0]]
** centroid: 2, normalized-entropy: 0.31982097306048385, [(1, 227), (2, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 56, 0]]
** centroid: 3, normalized-entropy: 0.9995090461828581, [(1, 59), (2, 56)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.404894306304845] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.404894306304845, 0.35052450340766983] ***
*** starting iteration: 2; err: [Inf, 0.404894306304845, 0.35052450340766983] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.404894306304845, 0.35052450340766983, 0.3058716244296403] ***
*** starting iteration: 3; err: [Inf, 0.404894306304845, 0.35052450340766983, 0.3058716244296403] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.404894306304845, 0.35052450340766983, 0.3058716244296403, 0.30249933458238215] ***
*** starting iteration: 4; err: [Inf, 0.404894306304845, 0.35052450340766983, 0.3058716244296403, 0.30249933458238215] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.404894306304845, 0.35052450340766983, 0.3058716244296403, 0.30249933458238215, 0.3021269147298313] ***
*** finished computation of 3 references, err: [Inf, 0.404894306304845, 0.35052450340766983, 0.3058716244296403, 0.30249933458238215, 0.3021269147298313] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 180, 17]]
** centroid: 1, normalized-entropy: 0.42397859285436, [(2, 180), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [151, 50, 0]]
** centroid: 2, normalized-entropy: 0.8093008199012015, [(1, 151), (2, 50)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [249, 19, 0]]
** centroid: 3, normalized-entropy: 0.36925671344142824, [(1, 249), (2, 19)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.47677456343482283] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47677456343482283, 0.2888955757653025] ***
*** starting iteration: 2; err: [Inf, 0.47677456343482283, 0.2888955757653025] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47677456343482283, 0.2888955757653025, 0.2859888367837985] ***
*** starting iteration: 3; err: [Inf, 0.47677456343482283, 0.2888955757653025, 0.2859888367837985] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47677456343482283, 0.2888955757653025, 0.2859888367837985, 0.28601716571896596] ***
*** finished computation of 3 references, err: [Inf, 0.47677456343482283, 0.2888955757653025, 0.2859888367837985, 0.28601716571896596] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [83, 165, 20]]
** centroid: 1, normalized-entropy: 0.7785435453758262, [(1, 83), (2, 165), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [204, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [115, 80, 0]]
** centroid: 3, normalized-entropy: 0.9766349114440099, [(1, 115), (2, 80)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5913226887321231] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5913226887321231, 0.3415140401351376] ***
*** starting iteration: 2; err: [Inf, 0.5913226887321231, 0.3415140401351376] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5913226887321231, 0.3415140401351376, 0.30201527843533876] ***
*** starting iteration: 3; err: [Inf, 0.5913226887321231, 0.3415140401351376, 0.30201527843533876] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5913226887321231, 0.3415140401351376, 0.30201527843533876, 0.2956989410281324] ***
*** starting iteration: 4; err: [Inf, 0.5913226887321231, 0.3415140401351376, 0.30201527843533876, 0.2956989410281324] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5913226887321231, 0.3415140401351376, 0.30201527843533876, 0.2956989410281324, 0.2931087169477875] ***
*** starting iteration: 5; err: [Inf, 0.5913226887321231, 0.3415140401351376, 0.30201527843533876, 0.2956989410281324, 0.2931087169477875] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5913226887321231, 0.3415140401351376, 0.30201527843533876, 0.2956989410281324, 0.2931087169477875, 0.2922441672248908] ***
*** finished computation of 3 references, err: [Inf, 0.5913226887321231, 0.3415140401351376, 0.30201527843533876, 0.2956989410281324, 0.2931087169477875, 0.2922441672248908] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [79, 145, 25]]
** centroid: 1, normalized-entropy: 0.8282120595031551, [(1, 79), (2, 145), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [113, 99, 0]]
** centroid: 2, normalized-entropy: 0.9968519255971731, [(1, 113), (2, 99)]
*** center 3: selecting labels [1] (freq >= 1) [from [206, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24953921018979391] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24953921018979391, 0.19090874403066285] ***
*** starting iteration: 2; err: [Inf, 0.24953921018979391, 0.19090874403066285] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24953921018979391, 0.19090874403066285, 0.18776416620057826] ***
*** starting iteration: 3; err: [Inf, 0.24953921018979391, 0.19090874403066285, 0.18776416620057826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24953921018979391, 0.19090874403066285, 0.18776416620057826, 0.18681091038851408] ***
*** finished computation of 7 references, err: [Inf, 0.24953921018979391, 0.19090874403066285, 0.18776416620057826, 0.18681091038851408] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [59, 27, 0]]
** centroid: 1, normalized-entropy: 0.8976844934141643, [(1, 59), (2, 27)]
*** center 2: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [92, 35, 0]]
** centroid: 4, normalized-entropy: 0.8493728320452445, [(1, 92), (2, 35)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 82, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [85, 12, 0]]
** centroid: 6, normalized-entropy: 0.5399357331112666, [(1, 85), (2, 12)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 93, 17]]
** centroid: 7, normalized-entropy: 0.6210993704855443, [(2, 93), (3, 17)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22858544379595605] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22858544379595605, 0.2028805153340386] ***
*** starting iteration: 2; err: [Inf, 0.22858544379595605, 0.2028805153340386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22858544379595605, 0.2028805153340386, 0.19493446682022697] ***
*** starting iteration: 3; err: [Inf, 0.22858544379595605, 0.2028805153340386, 0.19493446682022697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22858544379595605, 0.2028805153340386, 0.19493446682022697, 0.19092799700528518] ***
*** finished computation of 7 references, err: [Inf, 0.22858544379595605, 0.2028805153340386, 0.19493446682022697, 0.19092799700528518] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [39, 54, 0]]
** centroid: 1, normalized-entropy: 0.9811522341999134, [(1, 39), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [73, 9, 0]]
** centroid: 2, normalized-entropy: 0.49917983618854633, [(1, 73), (2, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [67, 8, 0]]
** centroid: 3, normalized-entropy: 0.48977901368693744, [(1, 67), (2, 8)]
*** center 4: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 2) [from [7, 88, 15]]
** centroid: 5, normalized-entropy: 0.5693552693112701, [(1, 7), (2, 88), (3, 15)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 86, 5]]
** centroid: 6, normalized-entropy: 0.30704288878312236, [(2, 86), (3, 5)]
*** center 7: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23618320865847026] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23618320865847026, 0.19782918220458515] ***
*** starting iteration: 2; err: [Inf, 0.23618320865847026, 0.19782918220458515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23618320865847026, 0.19782918220458515, 0.19331472284946663] ***
*** starting iteration: 3; err: [Inf, 0.23618320865847026, 0.19782918220458515, 0.19331472284946663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23618320865847026, 0.19782918220458515, 0.19331472284946663, 0.19221717075652806] ***
*** finished computation of 7 references, err: [Inf, 0.23618320865847026, 0.19782918220458515, 0.19331472284946663, 0.19221717075652806] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [18, 56, 0]]
** centroid: 1, normalized-entropy: 0.8003922080453356, [(1, 18), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [77, 39, 0]]
** centroid: 2, normalized-entropy: 0.9211426316005454, [(1, 77), (2, 39)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 86, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [118, 4, 0]]
** centroid: 4, normalized-entropy: 0.20818094555717087, [(1, 118), (2, 4)]
*** center 5: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 59, 25]]
** centroid: 7, normalized-entropy: 0.8783609387702275, [(2, 59), (3, 25)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3192448211531784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3192448211531784, 0.18940527005786742] ***
*** starting iteration: 2; err: [Inf, 0.3192448211531784, 0.18940527005786742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3192448211531784, 0.18940527005786742, 0.16838432312803203] ***
*** starting iteration: 3; err: [Inf, 0.3192448211531784, 0.18940527005786742, 0.16838432312803203] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3192448211531784, 0.18940527005786742, 0.16838432312803203, 0.16183304518472413] ***
*** finished computation of 7 references, err: [Inf, 0.3192448211531784, 0.18940527005786742, 0.16838432312803203, 0.16183304518472413] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [60, 13, 0]]
** centroid: 1, normalized-entropy: 0.6758635715876156, [(1, 60), (2, 13)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 138, 17]]
** centroid: 2, normalized-entropy: 0.4989421901991209, [(2, 138), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [36, 25, 0]]
** centroid: 3, normalized-entropy: 0.9764143081154868, [(1, 36), (2, 25)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [117, 70, 0]]
** centroid: 4, normalized-entropy: 0.9539400033239684, [(1, 117), (2, 70)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 3, 0]]
** centroid: 5, normalized-entropy: 0.26377743669413856, [(1, 64), (2, 3)]
*** center 6: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3447211113865899] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3447211113865899, 0.2141259576695255] ***
*** starting iteration: 2; err: [Inf, 0.3447211113865899, 0.2141259576695255] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3447211113865899, 0.2141259576695255, 0.1947863187076806] ***
*** starting iteration: 3; err: [Inf, 0.3447211113865899, 0.2141259576695255, 0.1947863187076806] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3447211113865899, 0.2141259576695255, 0.1947863187076806, 0.18607104075388395] ***
*** finished computation of 7 references, err: [Inf, 0.3447211113865899, 0.2141259576695255, 0.1947863187076806, 0.18607104075388395] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [62, 139, 19]]
** centroid: 1, normalized-entropy: 0.7814797274195848, [(1, 62), (2, 139), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [48, 75, 1]]
** centroid: 4, normalized-entropy: 0.9649567669505686, [(1, 48), (2, 75)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [68, 31, 0]]
** centroid: 5, normalized-entropy: 0.8967550157663144, [(1, 68), (2, 31)]
*** center 6: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [23, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25733582691374657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25733582691374657, 0.19781600600220206] ***
*** starting iteration: 2; err: [Inf, 0.25733582691374657, 0.19781600600220206] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25733582691374657, 0.19781600600220206, 0.1621035336729033] ***
*** starting iteration: 3; err: [Inf, 0.25733582691374657, 0.19781600600220206, 0.1621035336729033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25733582691374657, 0.19781600600220206, 0.1621035336729033, 0.1497238519244773] ***
*** finished computation of 7 references, err: [Inf, 0.25733582691374657, 0.19781600600220206, 0.1621035336729033, 0.1497238519244773] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [72, 33, 0]]
** centroid: 1, normalized-entropy: 0.8980587934501658, [(1, 72), (2, 33)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 81, 24]]
** centroid: 2, normalized-entropy: 0.775512658133148, [(2, 81), (3, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [127, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [26, 41, 0]]
** centroid: 5, normalized-entropy: 0.9635359835770286, [(1, 26), (2, 41)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 89, 1]]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.40970727544440116] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40970727544440116, 0.30718454772007986] ***
*** starting iteration: 2; err: [Inf, 0.40970727544440116, 0.30718454772007986] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40970727544440116, 0.30718454772007986, 0.3043098952886914] ***
*** starting iteration: 3; err: [Inf, 0.40970727544440116, 0.30718454772007986, 0.3043098952886914] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40970727544440116, 0.30718454772007986, 0.3043098952886914, 0.3031925556666634] ***
*** starting iteration: 4; err: [Inf, 0.40970727544440116, 0.30718454772007986, 0.3043098952886914, 0.3031925556666634] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40970727544440116, 0.30718454772007986, 0.3043098952886914, 0.3031925556666634, 0.30283357322708265] ***
*** finished computation of 3 references, err: [Inf, 0.40970727544440116, 0.30718454772007986, 0.3043098952886914, 0.3031925556666634, 0.30283357322708265] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [245, 20, 0]]
** centroid: 1, normalized-entropy: 0.3860189005698936, [(1, 245), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [155, 41, 0]]
** centroid: 2, normalized-entropy: 0.7399194614272068, [(1, 155), (2, 41)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 188, 17]]
** centroid: 3, normalized-entropy: 0.41240901454617007, [(2, 188), (3, 17)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4416612796988087] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4416612796988087, 0.30421702649773863] ***
*** starting iteration: 2; err: [Inf, 0.4416612796988087, 0.30421702649773863] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4416612796988087, 0.30421702649773863, 0.30291582910397064] ***
*** starting iteration: 3; err: [Inf, 0.4416612796988087, 0.30421702649773863, 0.30291582910397064] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4416612796988087, 0.30421702649773863, 0.30291582910397064, 0.30265108084884185] ***
*** finished computation of 3 references, err: [Inf, 0.4416612796988087, 0.30421702649773863, 0.30291582910397064, 0.30265108084884185] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [252, 11, 0]]
** centroid: 1, normalized-entropy: 0.25059850059652594, [(1, 252), (2, 11)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 179, 20]]
** centroid: 2, normalized-entropy: 0.4705864997996835, [(2, 179), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [150, 55, 0]]
** centroid: 3, normalized-entropy: 0.8390040613676978, [(1, 150), (2, 55)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.41899039634717056] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41899039634717056, 0.300775823184754] ***
*** starting iteration: 2; err: [Inf, 0.41899039634717056, 0.300775823184754] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41899039634717056, 0.300775823184754, 0.29935392151507123] ***
*** starting iteration: 3; err: [Inf, 0.41899039634717056, 0.300775823184754, 0.29935392151507123] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41899039634717056, 0.300775823184754, 0.29935392151507123, 0.29909479256713767] ***
*** finished computation of 3 references, err: [Inf, 0.41899039634717056, 0.300775823184754, 0.29935392151507123, 0.29909479256713767] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [271, 11, 0]]
** centroid: 1, normalized-entropy: 0.2377210757608166, [(1, 271), (2, 11)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 181, 25]]
** centroid: 2, normalized-entropy: 0.5332553315209451, [(2, 181), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [127, 52, 0]]
** centroid: 3, normalized-entropy: 0.8693698523290506, [(1, 127), (2, 52)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33959911210747723] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33959911210747723, 0.22989781552439068] ***
*** starting iteration: 2; err: [Inf, 0.33959911210747723, 0.22989781552439068] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33959911210747723, 0.22989781552439068, 0.2285531702725491] ***
*** starting iteration: 3; err: [Inf, 0.33959911210747723, 0.22989781552439068, 0.2285531702725491] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33959911210747723, 0.22989781552439068, 0.2285531702725491, 0.22857978322064956] ***
*** finished computation of 3 references, err: [Inf, 0.33959911210747723, 0.22989781552439068, 0.2285531702725491, 0.22857978322064956] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [99, 157, 15]]
** centroid: 1, normalized-entropy: 0.7685172994418762, [(1, 99), (2, 157), (3, 15)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [109, 92, 2]]
** centroid: 2, normalized-entropy: 0.6718419733316606, [(1, 109), (2, 92), (3, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [192, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30645169633841407] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30645169633841407, 0.2520197105679153] ***
*** starting iteration: 2; err: [Inf, 0.30645169633841407, 0.2520197105679153] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30645169633841407, 0.2520197105679153, 0.24224631214511583] ***
*** starting iteration: 3; err: [Inf, 0.30645169633841407, 0.2520197105679153, 0.24224631214511583] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30645169633841407, 0.2520197105679153, 0.24224631214511583, 0.2406560769039339] ***
*** starting iteration: 4; err: [Inf, 0.30645169633841407, 0.2520197105679153, 0.24224631214511583, 0.2406560769039339] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30645169633841407, 0.2520197105679153, 0.24224631214511583, 0.2406560769039339, 0.24029187187329046] ***
*** finished computation of 3 references, err: [Inf, 0.30645169633841407, 0.2520197105679153, 0.24224631214511583, 0.2406560769039339, 0.24029187187329046] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [250, 21, 0]]
** centroid: 1, normalized-entropy: 0.39327547292628595, [(1, 250), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [152, 49, 0]]
** centroid: 2, normalized-entropy: 0.801271768765644, [(1, 152), (2, 49)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 175, 20]]
** centroid: 3, normalized-entropy: 0.4770713062193298, [(2, 175), (3, 20)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3017784986209342] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3017784986209342, 0.24253891342399136] ***
*** starting iteration: 2; err: [Inf, 0.3017784986209342, 0.24253891342399136] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3017784986209342, 0.24253891342399136, 0.2390010055277435] ***
*** starting iteration: 3; err: [Inf, 0.3017784986209342, 0.24253891342399136, 0.2390010055277435] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3017784986209342, 0.24253891342399136, 0.2390010055277435, 0.2384209472328603] ***
*** finished computation of 3 references, err: [Inf, 0.3017784986209342, 0.24253891342399136, 0.2390010055277435, 0.2384209472328603] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [260, 22, 0]]
** centroid: 1, normalized-entropy: 0.3951431006348973, [(1, 260), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [138, 49, 0]]
** centroid: 2, normalized-entropy: 0.8297973615077835, [(1, 138), (2, 49)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 173, 25]]
** centroid: 3, normalized-entropy: 0.5470985992436426, [(2, 173), (3, 25)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3159669169054196] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3159669169054196, 0.24566292511047544] ***
*** starting iteration: 2; err: [Inf, 0.3159669169054196, 0.24566292511047544] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3159669169054196, 0.24566292511047544, 0.24106689269847428] ***
*** starting iteration: 3; err: [Inf, 0.3159669169054196, 0.24566292511047544, 0.24106689269847428] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3159669169054196, 0.24566292511047544, 0.24106689269847428, 0.24002104113262998] ***
*** finished computation of 3 references, err: [Inf, 0.3159669169054196, 0.24566292511047544, 0.24106689269847428, 0.24002104113262998] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [251, 21, 0]]
** centroid: 1, normalized-entropy: 0.3922565988974065, [(1, 251), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [149, 46, 0]]
** centroid: 2, normalized-entropy: 0.7881510341214842, [(1, 149), (2, 46)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 182, 17]]
** centroid: 3, normalized-entropy: 0.42101912899883215, [(2, 182), (3, 17)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3721532724725119] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3721532724725119, 0.23035035827204117] ***
*** starting iteration: 2; err: [Inf, 0.3721532724725119, 0.23035035827204117] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3721532724725119, 0.23035035827204117, 0.22898355602095466] ***
*** starting iteration: 3; err: [Inf, 0.3721532724725119, 0.23035035827204117, 0.22898355602095466] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3721532724725119, 0.23035035827204117, 0.22898355602095466, 0.228763085259739] ***
*** finished computation of 3 references, err: [Inf, 0.3721532724725119, 0.23035035827204117, 0.22898355602095466, 0.228763085259739] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [108, 103, 15]]
** centroid: 1, normalized-entropy: 0.8110509353805582, [(1, 108), (2, 103), (3, 15)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [101, 142, 5]]
** centroid: 2, normalized-entropy: 0.6952632023948021, [(1, 101), (2, 142), (3, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [193, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2955142149849721] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2955142149849721, 0.24493210359491865] ***
*** starting iteration: 2; err: [Inf, 0.2955142149849721, 0.24493210359491865] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2955142149849721, 0.24493210359491865, 0.2394953890853021] ***
*** starting iteration: 3; err: [Inf, 0.2955142149849721, 0.24493210359491865, 0.2394953890853021] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2955142149849721, 0.24493210359491865, 0.2394953890853021, 0.23857407475440487] ***
*** finished computation of 3 references, err: [Inf, 0.2955142149849721, 0.24493210359491865, 0.2394953890853021, 0.23857407475440487] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [258, 28, 0]]
** centroid: 1, normalized-entropy: 0.462309904202122, [(1, 258), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [140, 49, 0]]
** centroid: 2, normalized-entropy: 0.8256265261578954, [(1, 140), (2, 49)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 167, 25]]
** centroid: 3, normalized-entropy: 0.5580092632860789, [(2, 167), (3, 25)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.19169328314275935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19169328314275935, 0.15264363366149847] ***
*** finished computation of 7 references, err: [Inf, 0.19169328314275935, 0.15264363366149847] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 96, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [73, 9, 0]]
** centroid: 3, normalized-entropy: 0.49917983618854633, [(1, 73), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [124, 3, 0]]
** centroid: 4, normalized-entropy: 0.16132067110180368, [(1, 124), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [114, 17, 0]]
** centroid: 5, normalized-entropy: 0.5568097960715243, [(1, 114), (2, 17)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 96, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 24, 20]]
** centroid: 7, normalized-entropy: 0.9940302114769566, [(2, 24), (3, 20)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18840393559473834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18840393559473834, 0.15058980626368274] ***
*** finished computation of 7 references, err: [Inf, 0.18840393559473834, 0.15058980626368274] ***
*** center 1: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 57, 25]]
** centroid: 2, normalized-entropy: 0.8871723027673716, [(2, 57), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 28, 0]]
** centroid: 3, normalized-entropy: 0.9340680553754911, [(1, 52), (2, 28)]
*** center 4: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [39, 79, 0]]
** centroid: 5, normalized-entropy: 0.9154450354498175, [(1, 39), (2, 79)]
*** center 6: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 80, 0]]
** centroid: 7, normalized-entropy: 0.40379715049939235, [(1, 7), (2, 80)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23188975300114076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23188975300114076, 0.1941794514608522] ***
*** finished computation of 7 references, err: [Inf, 0.23188975300114076, 0.1941794514608522] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 117, 17]]
** centroid: 1, normalized-entropy: 0.5487791867822941, [(2, 117), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 10, 0]]
** centroid: 3, normalized-entropy: 0.625262405223423, [(1, 54), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [71, 24, 0]]
** centroid: 4, normalized-entropy: 0.8154224977821039, [(1, 71), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [93, 17, 0]]
** centroid: 5, normalized-entropy: 0.6210993704855443, [(1, 93), (2, 17)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [33, 81, 0]]
** centroid: 6, normalized-entropy: 0.8680403986166402, [(1, 33), (2, 81)]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 11 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23805598859190719] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23805598859190719, 0.19427381135869598] ***
*** finished computation of 7 references, err: [Inf, 0.23805598859190719, 0.19427381135869598] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [110, 13, 0]]
** centroid: 1, normalized-entropy: 0.4867804823835752, [(1, 110), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [81, 14, 0]]
** centroid: 2, normalized-entropy: 0.6032154068313579, [(1, 81), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 14, 20]]
** centroid: 3, normalized-entropy: 0.9774178175281716, [(2, 14), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [104, 22, 0]]
** centroid: 5, normalized-entropy: 0.6681273338436138, [(1, 104), (2, 22)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 89, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 93, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24179480939676268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24179480939676268, 0.1867983835264817] ***
*** finished computation of 7 references, err: [Inf, 0.24179480939676268, 0.1867983835264817] ***
*** center 1: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [81, 4, 0]]
** centroid: 2, normalized-entropy: 0.2737691686829417, [(1, 81), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 70, 24]]
** centroid: 3, normalized-entropy: 0.8196004346196011, [(2, 70), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [89, 37, 0]]
** centroid: 4, normalized-entropy: 0.8733906387040391, [(1, 89), (2, 37)]
*** center 5: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 84, 1]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [33, 49, 0]]
** centroid: 7, normalized-entropy: 0.9723594643683989, [(1, 33), (2, 49)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19425207874304182] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19425207874304182, 0.15243599070627634] ***
*** starting iteration: 2; err: [Inf, 0.19425207874304182, 0.15243599070627634] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19425207874304182, 0.15243599070627634, 0.14773082324547004] ***
*** starting iteration: 3; err: [Inf, 0.19425207874304182, 0.15243599070627634, 0.14773082324547004] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19425207874304182, 0.15243599070627634, 0.14773082324547004, 0.14716499255670867] ***
*** finished computation of 7 references, err: [Inf, 0.19425207874304182, 0.15243599070627634, 0.14773082324547004, 0.14716499255670867] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [40, 50, 0]]
** centroid: 1, normalized-entropy: 0.9910760598382222, [(1, 40), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [79, 19, 0]]
** centroid: 2, normalized-entropy: 0.7095128863456239, [(1, 79), (2, 19)]
*** center 3: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 72, 17]]
** centroid: 4, normalized-entropy: 0.7035821005719904, [(2, 72), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [76, 11, 0]]
** centroid: 5, normalized-entropy: 0.5475844288749033, [(1, 76), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [91, 1, 0]]
** centroid: 6, normalized-entropy: 0.08650421412134586, [(1, 91), (2, 1)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 96, 0]]
** centroid: 7, normalized-entropy: 0.0828365528136124, [(1, 1), (2, 96)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19937078784760284] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19937078784760284, 0.15438882398211035] ***
*** starting iteration: 2; err: [Inf, 0.19937078784760284, 0.15438882398211035] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19937078784760284, 0.15438882398211035, 0.15080172670348876] ***
*** starting iteration: 3; err: [Inf, 0.19937078784760284, 0.15438882398211035, 0.15080172670348876] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19937078784760284, 0.15438882398211035, 0.15080172670348876, 0.14990047824525762] ***
*** finished computation of 7 references, err: [Inf, 0.19937078784760284, 0.15438882398211035, 0.15080172670348876, 0.14990047824525762] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [97, 5, 0]]
** centroid: 1, normalized-entropy: 0.28221763445592507, [(1, 97), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [80, 24, 0]]
** centroid: 2, normalized-entropy: 0.7793498372920851, [(1, 80), (2, 24)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 62, 20]]
** centroid: 3, normalized-entropy: 0.8014698931335286, [(2, 62), (3, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [47, 62, 0]]
** centroid: 5, normalized-entropy: 0.9862958176866949, [(1, 47), (2, 62)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 92, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18624146411689682] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18624146411689682, 0.15067310893846705] ***
*** starting iteration: 2; err: [Inf, 0.18624146411689682, 0.15067310893846705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18624146411689682, 0.15067310893846705, 0.14631153534011526] ***
*** starting iteration: 3; err: [Inf, 0.18624146411689682, 0.15067310893846705, 0.14631153534011526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18624146411689682, 0.15067310893846705, 0.14631153534011526, 0.1457833524952563] ***
*** finished computation of 7 references, err: [Inf, 0.18624146411689682, 0.15067310893846705, 0.14631153534011526, 0.1457833524952563] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [84, 15, 0]]
** centroid: 1, normalized-entropy: 0.6136190195993708, [(1, 84), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [76, 30, 0]]
** centroid: 2, normalized-entropy: 0.8595316914502928, [(1, 76), (2, 30)]
*** center 3: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 82, 20]]
** centroid: 4, normalized-entropy: 0.7140152804378671, [(2, 82), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [77, 26, 0]]
** centroid: 5, normalized-entropy: 0.8151025048028707, [(1, 77), (2, 26)]
*** center 6: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 91, 5]]
** centroid: 7, normalized-entropy: 0.29518174309075856, [(2, 91), (3, 5)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.195570733814917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.195570733814917, 0.15093818703084602] ***
*** starting iteration: 2; err: [Inf, 0.195570733814917, 0.15093818703084602] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.195570733814917, 0.15093818703084602, 0.14744844889497613] ***
*** starting iteration: 3; err: [Inf, 0.195570733814917, 0.15093818703084602, 0.14744844889497613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.195570733814917, 0.15093818703084602, 0.14744844889497613, 0.14705595477587646] ***
*** finished computation of 7 references, err: [Inf, 0.195570733814917, 0.15093818703084602, 0.14744844889497613, 0.14705595477587646] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [100, 1, 0]]
** centroid: 1, normalized-entropy: 0.08013604733127526, [(1, 100), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [81, 15, 0]]
** centroid: 2, normalized-entropy: 0.625262405223423, [(1, 81), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 67, 17]]
** centroid: 3, normalized-entropy: 0.7266645172796352, [(2, 67), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [36, 87, 0]]
** centroid: 5, normalized-entropy: 0.8721617883411698, [(1, 36), (2, 87)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [14, 79, 0]]
** centroid: 6, normalized-entropy: 0.6111841012714984, [(1, 14), (2, 79)]
*** center 7: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19757222265250857] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19757222265250857, 0.15217906104734466] ***
*** starting iteration: 2; err: [Inf, 0.19757222265250857, 0.15217906104734466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19757222265250857, 0.15217906104734466, 0.14873327504120198] ***
*** starting iteration: 3; err: [Inf, 0.19757222265250857, 0.15217906104734466, 0.14873327504120198] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19757222265250857, 0.15217906104734466, 0.14873327504120198, 0.14840653284859176] ***
*** finished computation of 7 references, err: [Inf, 0.19757222265250857, 0.15217906104734466, 0.14873327504120198, 0.14840653284859176] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [78, 9, 0]]
** centroid: 1, normalized-entropy: 0.47983202361612853, [(1, 78), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [95, 16, 0]]
** centroid: 2, normalized-entropy: 0.5949898952560516, [(1, 95), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 56, 20]]
** centroid: 3, normalized-entropy: 0.8314743880097292, [(2, 56), (3, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [38, 63, 0]]
** centroid: 5, normalized-entropy: 0.9553413768968346, [(1, 38), (2, 63)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 101, 0]]
** centroid: 6, normalized-entropy: 0.07949044238393414, [(1, 1), (2, 101)]
*** center 7: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1985216398808597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1985216398808597, 0.15101969954201663] ***
*** starting iteration: 2; err: [Inf, 0.1985216398808597, 0.15101969954201663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1985216398808597, 0.15101969954201663, 0.14663035074748781] ***
*** starting iteration: 3; err: [Inf, 0.1985216398808597, 0.15101969954201663, 0.14663035074748781] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1985216398808597, 0.15101969954201663, 0.14663035074748781, 0.1454417547284356] ***
*** starting iteration: 4; err: [Inf, 0.1985216398808597, 0.15101969954201663, 0.14663035074748781, 0.1454417547284356] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1985216398808597, 0.15101969954201663, 0.14663035074748781, 0.1454417547284356, 0.14465415122677228] ***
*** finished computation of 7 references, err: [Inf, 0.1985216398808597, 0.15101969954201663, 0.14663035074748781, 0.1454417547284356, 0.14465415122677228] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [76, 31, 0]]
** centroid: 1, normalized-entropy: 0.8683587934693187, [(1, 76), (2, 31)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 83, 25]]
** centroid: 2, normalized-entropy: 0.7805849322915901, [(2, 83), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [56, 17, 0]]
** centroid: 3, normalized-entropy: 0.7829924501610913, [(1, 56), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [89, 35, 0]]
** centroid: 4, normalized-entropy: 0.8585093672491074, [(1, 89), (2, 35)]
*** center 5: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 78, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9549939160717603, 0.9369848890806974, 0.9369758980537423, 0.9239898581215947, 0.9179838521155886, 0.9080307852762943, 0.8850527173880467, 0.87396678115241, 0.8630067192941445, 0.8359856862850875, 0.8339716962471453, 0.8061085037132941, 0.7959396522270774, 0.777061492630355]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9549939160717603
finished with 15
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.23900303423583685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23900303423583685, 0.19149923987068548] ***
*** starting iteration: 2; err: [Inf, 0.23900303423583685, 0.19149923987068548] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23900303423583685, 0.19149923987068548, 0.18795170281683696] ***
*** starting iteration: 3; err: [Inf, 0.23900303423583685, 0.19149923987068548, 0.18795170281683696] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23900303423583685, 0.19149923987068548, 0.18795170281683696, 0.18725696614350532] ***
*** finished computation of 7 references, err: [Inf, 0.23900303423583685, 0.19149923987068548, 0.18795170281683696, 0.18725696614350532] ***
*** center 1: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 62, 17]]
** centroid: 2, normalized-entropy: 0.751286576718343, [(2, 62), (3, 17)]
*** center 3: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [11, 76, 0]]
** centroid: 4, normalized-entropy: 0.5475844288749033, [(1, 11), (2, 76)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [21, 91, 0]]
** centroid: 5, normalized-entropy: 0.6962122601251459, [(1, 21), (2, 91)]
*** center 6: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [78, 20, 0]]
** centroid: 7, normalized-entropy: 0.7300166301457938, [(1, 78), (2, 20)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23038805123122558] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23038805123122558, 0.19096352288295618] ***
*** starting iteration: 2; err: [Inf, 0.23038805123122558, 0.19096352288295618] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23038805123122558, 0.19096352288295618, 0.18902204777749404] ***
*** starting iteration: 3; err: [Inf, 0.23038805123122558, 0.19096352288295618, 0.18902204777749404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23038805123122558, 0.19096352288295618, 0.18902204777749404, 0.18860428495056134] ***
*** finished computation of 7 references, err: [Inf, 0.23038805123122558, 0.19096352288295618, 0.18902204777749404, 0.18860428495056134] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [1, 103, 0]]
** centroid: 1, normalized-entropy: 0.07823246525771242, [(1, 1), (2, 103)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [78, 14, 0]]
** centroid: 2, normalized-entropy: 0.6152538910563409, [(1, 78), (2, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 68, 20]]
** centroid: 4, normalized-entropy: 0.7732266742876346, [(2, 68), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [62, 55, 0]]
** centroid: 5, normalized-entropy: 0.9974163820804769, [(1, 62), (2, 55)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [92, 5, 0]]
** centroid: 6, normalized-entropy: 0.29292995113885967, [(1, 92), (2, 5)]
*** center 7: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23488101697732125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23488101697732125, 0.1940297961491265] ***
*** starting iteration: 2; err: [Inf, 0.23488101697732125, 0.1940297961491265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23488101697732125, 0.1940297961491265, 0.1905687989798309] ***
*** starting iteration: 3; err: [Inf, 0.23488101697732125, 0.1940297961491265, 0.1905687989798309] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23488101697732125, 0.1940297961491265, 0.1905687989798309, 0.19014202315650736] ***
*** finished computation of 7 references, err: [Inf, 0.23488101697732125, 0.1940297961491265, 0.1905687989798309, 0.19014202315650736] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [87, 7, 0]]
** centroid: 1, normalized-entropy: 0.3823806751537801, [(1, 87), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [73, 11, 0]]
** centroid: 2, normalized-entropy: 0.5600443203590992, [(1, 73), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 91, 25]]
** centroid: 3, normalized-entropy: 0.7518972278650765, [(2, 91), (3, 25)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [26, 81, 0]]
** centroid: 4, normalized-entropy: 0.7999783611177544, [(1, 26), (2, 81)]
*** center 5: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [52, 54, 0]]
** centroid: 6, normalized-entropy: 0.9997431860710851, [(1, 52), (2, 54)]
*** center 7: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9549939160717603, 0.9369848890806974, 0.9369758980537423, 0.9239958521395648, 0.9239898581215947, 0.9179838521155886, 0.9080307852762943, 0.8850527173880467, 0.87396678115241, 0.8630067192941445, 0.8359856862850875, 0.8339716962471453, 0.8061085037132941, 0.7959396522270774, 0.777061492630355]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9549939160717603
finished with 15
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9549939160717603, 0.9369848890806974, 0.9369758980537423, 0.9239958521395648, 0.9239898581215947, 0.9179838521155886, 0.9080307852762943, 0.8850527173880467, 0.87396678115241, 0.8630067192941445, 0.8359856862850875, 0.8339716962471453, 0.8061085037132941, 0.7959396522270774, 0.777061492630355]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9549939160717603
finished with 15
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9549939160717603, 0.9369848890806974, 0.9369758980537423, 0.9239958521395648, 0.9239898581215947, 0.9179838521155886, 0.9080307852762943, 0.8850527173880467, 0.87396678115241, 0.8630067192941445, 0.8359856862850875, 0.8339716962471453, 0.8061085037132941, 0.7959396522270774, 0.777061492630355]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9549939160717603
finished with 15
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9549939160717603, 0.9369848890806974, 0.9369758980537423, 0.9239958521395648, 0.9239898581215947, 0.9179838521155886, 0.9080307852762943, 0.8850527173880467, 0.87396678115241, 0.8630067192941445, 0.8359856862850875, 0.8339716962471453, 0.8061085037132941, 0.7959396522270774, 0.777061492630355]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9549939160717603
finished with 16
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.40424103046663934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.40424103046663934, 0.24216681047183303] ***
*** finished computation of 7 references, err: [Inf, 0.40424103046663934, 0.24216681047183303] ***
*** center 1: selecting labels [1] (freq >= 2) [from [28, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [93, 3, 0]]
** centroid: 2, normalized-entropy: 0.2006223243127146, [(1, 93), (2, 3)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [71, 141, 5]]
** centroid: 3, normalized-entropy: 0.6668031714355835, [(1, 71), (2, 141), (3, 5)]
*** center 4: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 2) [from [66, 105, 12]]
** centroid: 5, normalized-entropy: 0.7875510976545771, [(1, 66), (2, 105), (3, 12)]
*** center 6: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [23, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2855725414224382] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2855725414224382, 0.22574698949453312] ***
*** finished computation of 7 references, err: [Inf, 0.2855725414224382, 0.22574698949453312] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 172, 20]]
** centroid: 1, normalized-entropy: 0.4820661480830933, [(2, 172), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 26, 0]]
** centroid: 2, normalized-entropy: 0.842657877202239, [(1, 70), (2, 26)]
*** center 3: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [64, 30, 0]]
** centroid: 6, normalized-entropy: 0.9034535552068337, [(1, 64), (2, 30)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [129, 17, 0]]
** centroid: 7, normalized-entropy: 0.5190356256549792, [(1, 129), (2, 17)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25751359787011435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25751359787011435, 0.2195546576862169] ***
*** finished computation of 7 references, err: [Inf, 0.25751359787011435, 0.2195546576862169] ***
*** center 1: selecting labels [1] (freq >= 2) [from [167, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [23, 77, 0]]
** centroid: 2, normalized-entropy: 0.7780113035465377, [(1, 23), (2, 77)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [3, 120, 25]]
** centroid: 3, normalized-entropy: 0.5001437042275911, [(1, 3), (2, 120), (3, 25)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [33, 18, 0]]
** centroid: 4, normalized-entropy: 0.9366673818775627, [(1, 33), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [110, 10, 0]]
** centroid: 5, normalized-entropy: 0.4138168503036336, [(1, 110), (2, 10)]
*** center 6: selecting labels [1] (freq >= 2) [from [42, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [20, 19, 0]]
** centroid: 7, normalized-entropy: 0.9995256892936492, [(1, 20), (2, 19)]
finished with 13 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9549939160717603, 0.9369848890806974, 0.9369758980537423, 0.9239958521395648, 0.9239898581215947, 0.9179838521155886, 0.9080307852762943, 0.9019708331085576, 0.8850527173880467, 0.87396678115241, 0.8630067192941445, 0.8359856862850875, 0.8339716962471453, 0.8061085037132941, 0.7959396522270774, 0.777061492630355]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9549939160717603
finished with 18
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.46356243344426556] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46356243344426556, 0.30600763789822794] ***
*** starting iteration: 2; err: [Inf, 0.46356243344426556, 0.30600763789822794] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46356243344426556, 0.30600763789822794, 0.3024130079170896] ***
*** starting iteration: 3; err: [Inf, 0.46356243344426556, 0.30600763789822794, 0.3024130079170896] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46356243344426556, 0.30600763789822794, 0.3024130079170896, 0.301169037322483] ***
*** starting iteration: 4; err: [Inf, 0.46356243344426556, 0.30600763789822794, 0.3024130079170896, 0.301169037322483] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46356243344426556, 0.30600763789822794, 0.3024130079170896, 0.301169037322483, 0.3009040239917299] ***
*** finished computation of 3 references, err: [Inf, 0.46356243344426556, 0.30600763789822794, 0.3024130079170896, 0.301169037322483, 0.3009040239917299] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [249, 4, 0]]
** centroid: 1, normalized-entropy: 0.1172209221846178, [(1, 249), (2, 4)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [11, 182, 17]]
** centroid: 2, normalized-entropy: 0.4387434974494662, [(1, 11), (2, 182), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [140, 63, 0]]
** centroid: 3, normalized-entropy: 0.8935711016541908, [(1, 140), (2, 63)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4135079926446728] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4135079926446728, 0.2953849503703449] ***
*** starting iteration: 2; err: [Inf, 0.4135079926446728, 0.2953849503703449] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4135079926446728, 0.2953849503703449, 0.2883982177868463] ***
*** starting iteration: 3; err: [Inf, 0.4135079926446728, 0.2953849503703449, 0.2883982177868463] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4135079926446728, 0.2953849503703449, 0.2883982177868463, 0.28686826244119495] ***
*** starting iteration: 4; err: [Inf, 0.4135079926446728, 0.2953849503703449, 0.2883982177868463, 0.28686826244119495] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4135079926446728, 0.2953849503703449, 0.2883982177868463, 0.28686826244119495, 0.28630855163863705] ***
*** finished computation of 3 references, err: [Inf, 0.4135079926446728, 0.2953849503703449, 0.2883982177868463, 0.28686826244119495, 0.28630855163863705] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [88, 165, 20]]
** centroid: 1, normalized-entropy: 0.7834876199327258, [(1, 88), (2, 165), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [117, 80, 0]]
** centroid: 2, normalized-entropy: 0.9744024804601971, [(1, 117), (2, 80)]
*** center 3: selecting labels [1] (freq >= 1) [from [197, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4380287416083836] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4380287416083836, 0.300143722104079] ***
*** starting iteration: 2; err: [Inf, 0.4380287416083836, 0.300143722104079] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4380287416083836, 0.300143722104079, 0.29632971042451606] ***
*** starting iteration: 3; err: [Inf, 0.4380287416083836, 0.300143722104079, 0.29632971042451606] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4380287416083836, 0.300143722104079, 0.29632971042451606, 0.29564126860210743] ***
*** finished computation of 3 references, err: [Inf, 0.4380287416083836, 0.300143722104079, 0.29632971042451606, 0.29564126860210743] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [248, 28, 0]]
** centroid: 1, normalized-entropy: 0.47357292491745173, [(1, 248), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [150, 48, 0]]
** centroid: 2, normalized-entropy: 0.7990485210442682, [(1, 150), (2, 48)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 168, 25]]
** centroid: 3, normalized-entropy: 0.5561579089198946, [(2, 168), (3, 25)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3379047385112078] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3379047385112078, 0.2431348628915466] ***
*** starting iteration: 2; err: [Inf, 0.3379047385112078, 0.2431348628915466] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3379047385112078, 0.2431348628915466, 0.24014054779131133] ***
*** starting iteration: 3; err: [Inf, 0.3379047385112078, 0.2431348628915466, 0.24014054779131133] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3379047385112078, 0.2431348628915466, 0.24014054779131133, 0.23950599721498653] ***
*** finished computation of 3 references, err: [Inf, 0.3379047385112078, 0.2431348628915466, 0.24014054779131133, 0.23950599721498653] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [250, 10, 0]]
** centroid: 1, normalized-entropy: 0.23519338181924157, [(1, 250), (2, 10)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [4, 185, 17]]
** centroid: 2, normalized-entropy: 0.34494911268757456, [(1, 4), (2, 185), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [146, 54, 0]]
** centroid: 3, normalized-entropy: 0.8414646362081756, [(1, 146), (2, 54)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3593813012447627] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3593813012447627, 0.22727007661545384] ***
*** starting iteration: 2; err: [Inf, 0.3593813012447627, 0.22727007661545384] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3593813012447627, 0.22727007661545384, 0.22675090988558985] ***
*** finished computation of 3 references, err: [Inf, 0.3593813012447627, 0.22727007661545384, 0.22675090988558985] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [91, 163, 19]]
** centroid: 1, normalized-entropy: 0.7824455124156954, [(1, 91), (2, 163), (3, 19)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [117, 82, 1]]
** centroid: 2, normalized-entropy: 0.6423473782261637, [(1, 117), (2, 82), (3, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [194, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3190929944134098] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3190929944134098, 0.24117743552451593] ***
*** starting iteration: 2; err: [Inf, 0.3190929944134098, 0.24117743552451593] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3190929944134098, 0.24117743552451593, 0.23806272914166796] ***
*** starting iteration: 3; err: [Inf, 0.3190929944134098, 0.24117743552451593, 0.23806272914166796] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3190929944134098, 0.24117743552451593, 0.23806272914166796, 0.23759799198920503] ***
*** finished computation of 3 references, err: [Inf, 0.3190929944134098, 0.24117743552451593, 0.23806272914166796, 0.23759799198920503] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [265, 4, 0]]
** centroid: 1, normalized-entropy: 0.11157438633209325, [(1, 265), (2, 4)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [7, 185, 25]]
** centroid: 2, normalized-entropy: 0.4512547938229379, [(1, 7), (2, 185), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [126, 55, 0]]
** centroid: 3, normalized-entropy: 0.8859671323603006, [(1, 126), (2, 55)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 18)
[0.9549939160717603, 0.9369848890806974, 0.9369758980537423, 0.9239958521395648, 0.9239898581215947, 0.9179838521155886, 0.9080307852762943, 0.9019708331085576, 0.8939808071544598, 0.8850527173880467, 0.87396678115241, 0.8739607871344398, 0.8630067192941445, 0.8359856862850875, 0.8339716962471453, 0.8061085037132941, 0.7959396522270774, 0.777061492630355]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9549939160717603
finished with 19
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.24047020045542591] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24047020045542591, 0.19090534372299955] ***
*** starting iteration: 2; err: [Inf, 0.24047020045542591, 0.19090534372299955] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24047020045542591, 0.19090534372299955, 0.1861999200897532] ***
*** starting iteration: 3; err: [Inf, 0.24047020045542591, 0.19090534372299955, 0.1861999200897532] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24047020045542591, 0.19090534372299955, 0.1861999200897532, 0.18559580932961436] ***
*** finished computation of 7 references, err: [Inf, 0.24047020045542591, 0.19090534372299955, 0.1861999200897532, 0.18559580932961436] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [102, 4, 0]]
** centroid: 1, normalized-entropy: 0.23181305002459035, [(1, 102), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 51, 17]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(2, 51), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [104, 2, 0]]
** centroid: 3, normalized-entropy: 0.13503620280212753, [(1, 104), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [90, 19, 0]]
** centroid: 4, normalized-entropy: 0.6674742199595056, [(1, 90), (2, 19)]
*** center 5: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 95, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 78, 0]]
** centroid: 7, normalized-entropy: 0.1686609314966701, [(1, 2), (2, 78)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22689064707176976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22689064707176976, 0.19194182372516555] ***
*** starting iteration: 2; err: [Inf, 0.22689064707176976, 0.19194182372516555] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22689064707176976, 0.19194182372516555, 0.19116213856295666] ***
*** finished computation of 7 references, err: [Inf, 0.22689064707176976, 0.19194182372516555, 0.19116213856295666] ***
*** center 1: selecting labels [1] (freq >= 1) [from [116, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [84, 11, 0]]
** centroid: 2, normalized-entropy: 0.5171354891896202, [(1, 84), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 41, 20]]
** centroid: 3, normalized-entropy: 0.9127341558073343, [(2, 41), (3, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [121, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [71, 36, 0]]
** centroid: 5, normalized-entropy: 0.9213796449361407, [(1, 71), (2, 36)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 85, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [10, 72, 0]]
** centroid: 7, normalized-entropy: 0.5349436990971067, [(1, 10), (2, 72)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23486969173457223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23486969173457223, 0.195094331459462] ***
*** starting iteration: 2; err: [Inf, 0.23486969173457223, 0.195094331459462] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23486969173457223, 0.195094331459462, 0.18974489730404415] ***
*** starting iteration: 3; err: [Inf, 0.23486969173457223, 0.195094331459462, 0.18974489730404415] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23486969173457223, 0.195094331459462, 0.18974489730404415, 0.1871999288019703] ***
*** finished computation of 7 references, err: [Inf, 0.23486969173457223, 0.195094331459462, 0.18974489730404415, 0.1871999288019703] ***
*** center 1: selecting labels [1] (freq >= 1) [from [128, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 75, 25]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(2, 75), (3, 25)]
*** center 3: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [25, 57, 0]]
** centroid: 4, normalized-entropy: 0.8871723027673716, [(1, 25), (2, 57)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [60, 51, 0]]
** centroid: 5, normalized-entropy: 0.9952525494396791, [(1, 60), (2, 51)]
*** center 6: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [22, 61, 0]]
** centroid: 7, normalized-entropy: 0.8342867421739538, [(1, 22), (2, 61)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 19)
[0.9549939160717603, 0.9369848890806974, 0.9369758980537423, 0.9309878741016465, 0.9239958521395648, 0.9239898581215947, 0.9179838521155886, 0.9080307852762943, 0.9019708331085576, 0.8939808071544598, 0.8850527173880467, 0.87396678115241, 0.8739607871344398, 0.8630067192941445, 0.8359856862850875, 0.8339716962471453, 0.8061085037132941, 0.7959396522270774, 0.777061492630355]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9549939160717603
finished with 19
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.2068505722330883] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2068505722330883, 0.15162080119550228] ***
*** finished computation of 7 references, err: [Inf, 0.2068505722330883, 0.15162080119550228] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [86, 91, 0]]
** centroid: 1, normalized-entropy: 0.9994243005775637, [(1, 86), (2, 91)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [127, 3, 0]]
** centroid: 2, normalized-entropy: 0.15838440747285035, [(1, 127), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [146, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 106, 31]]
** centroid: 4, normalized-entropy: 0.7714652668605834, [(2, 106), (3, 31)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [126, 53, 0]]
** centroid: 5, normalized-entropy: 0.8764579311590105, [(1, 126), (2, 53)]
*** center 6: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 116, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19423165011778473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19423165011778473, 0.1488625731728971] ***
*** finished computation of 7 references, err: [Inf, 0.19423165011778473, 0.1488625731728971] ***
*** center 1: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 50, 16]]
** centroid: 2, normalized-entropy: 0.7990485210442682, [(2, 50), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [62, 15, 0]]
** centroid: 3, normalized-entropy: 0.7114160189012126, [(1, 62), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [69, 11, 0]]
** centroid: 4, normalized-entropy: 0.5776539033535634, [(1, 69), (2, 11)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [52, 36, 0]]
** centroid: 5, normalized-entropy: 0.976020648236615, [(1, 52), (2, 36)]
*** center 6: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 57, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19115013198554515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19115013198554515, 0.14492226367630065] ***
*** finished computation of 7 references, err: [Inf, 0.19115013198554515, 0.14492226367630065] ***
*** center 1: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 10, 0]]
** centroid: 2, normalized-entropy: 0.581321498763703, [(1, 62), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 32, 15]]
** centroid: 3, normalized-entropy: 0.9034535552068337, [(2, 32), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [50, 23, 0]]
** centroid: 5, normalized-entropy: 0.8989377852081333, [(1, 50), (2, 23)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 66, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20327542615309357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20327542615309357, 0.15197046237811446] ***
*** finished computation of 7 references, err: [Inf, 0.20327542615309357, 0.15197046237811446] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [19, 67, 0]]
** centroid: 1, normalized-entropy: 0.7618624463753669, [(1, 19), (2, 67)]
*** center 2: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 34, 18]]
** centroid: 4, normalized-entropy: 0.9305861291319927, [(2, 34), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [61, 12, 0]]
** centroid: 5, normalized-entropy: 0.644694043811662, [(1, 61), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 75, 0]]
** centroid: 6, normalized-entropy: 0.42080948947668984, [(1, 7), (2, 75)]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2054806056637317] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2054806056637317, 0.15325765690486878] ***
*** finished computation of 7 references, err: [Inf, 0.2054806056637317, 0.15325765690486878] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [45, 49, 0]]
** centroid: 1, normalized-entropy: 0.998693408098057, [(1, 45), (2, 49)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 21, 0]]
** centroid: 2, normalized-entropy: 0.8403586716091169, [(1, 57), (2, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 51, 18]]
** centroid: 4, normalized-entropy: 0.828055725379504, [(2, 51), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [20, 70, 0]]
** centroid: 5, normalized-entropy: 0.7642045065086204, [(1, 20), (2, 70)]
*** center 6: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1827590470612049] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1827590470612049, 0.15128025875031018] ***
*** finished computation of 7 references, err: [Inf, 0.1827590470612049, 0.15128025875031018] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [92, 8, 0]]
** centroid: 1, normalized-entropy: 0.4021791902022729, [(1, 92), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 10, 0]]
** centroid: 2, normalized-entropy: 0.6631968402398286, [(1, 48), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 21, 21]]
** centroid: 3, normalized-entropy: 1.0, [(2, 21), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 86, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1845677005238831] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1845677005238831, 0.1461528651729459] ***
*** finished computation of 7 references, err: [Inf, 0.1845677005238831, 0.1461528651729459] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 72, 0]]
** centroid: 1, normalized-entropy: 0.3912435636292556, [(1, 6), (2, 72)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 17, 0]]
** centroid: 2, normalized-entropy: 0.829059069399666, [(1, 48), (2, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 69, 13]]
** centroid: 4, normalized-entropy: 0.6307970795750609, [(2, 69), (3, 13)]
*** center 5: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [75, 18, 0]]
** centroid: 6, normalized-entropy: 0.708835673332196, [(1, 75), (2, 18)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [54, 5, 0]]
** centroid: 7, normalized-entropy: 0.4186843105268563, [(1, 54), (2, 5)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20219752326980234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20219752326980234, 0.1534980555009097] ***
*** finished computation of 7 references, err: [Inf, 0.20219752326980234, 0.1534980555009097] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [44, 34, 0]]
** centroid: 1, normalized-entropy: 0.98811083652183, [(1, 44), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 7, 0]]
** centroid: 2, normalized-entropy: 0.46899559358928133, [(1, 63), (2, 7)]
*** center 3: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 55, 15]]
** centroid: 4, normalized-entropy: 0.7495952572594798, [(2, 55), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [27, 85, 0]]
** centroid: 5, normalized-entropy: 0.7968174923244049, [(1, 27), (2, 85)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18514328467473387] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18514328467473387, 0.15013333609327673] ***
*** finished computation of 7 references, err: [Inf, 0.18514328467473387, 0.15013333609327673] ***
*** center 1: selecting labels [1] (freq >= 2) [from [104, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 35, 17]]
** centroid: 2, normalized-entropy: 0.9117517586347538, [(2, 35), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [57, 9, 0]]
** centroid: 3, normalized-entropy: 0.5746356978376794, [(1, 57), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [71, 3, 0]]
** centroid: 4, normalized-entropy: 0.2447650820208971, [(1, 71), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [9, 59, 0]]
** centroid: 5, normalized-entropy: 0.5638560041131417, [(1, 9), (2, 59)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [14, 64, 0]]
** centroid: 6, normalized-entropy: 0.6789538995185759, [(1, 14), (2, 64)]
*** center 7: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1970434339903295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1970434339903295, 0.15188285463489593] ***
*** finished computation of 7 references, err: [Inf, 0.1970434339903295, 0.15188285463489593] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [37, 56, 0]]
** centroid: 1, normalized-entropy: 0.9696787018231177, [(1, 37), (2, 56)]
*** center 2: selecting labels [1] (freq >= 2) [from [57, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 54, 14]]
** centroid: 4, normalized-entropy: 0.7335379291086666, [(2, 54), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [76, 20, 0]]
** centroid: 5, normalized-entropy: 0.7382848661434506, [(1, 76), (2, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 51, 0]]
** centroid: 7, normalized-entropy: 0.48546076074591343, [(1, 6), (2, 51)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19233320012688637] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19233320012688637, 0.1481381886024028] ***
*** finished computation of 7 references, err: [Inf, 0.19233320012688637, 0.1481381886024028] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [1, 76, 2]]
** centroid: 1, normalized-entropy: 0.17203694935311387, [(2, 76), (3, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 13, 0]]
** centroid: 2, normalized-entropy: 0.6705250693158382, [(1, 61), (2, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 77, 12]]
** centroid: 4, normalized-entropy: 0.5705411428522262, [(2, 77), (3, 12)]
*** center 5: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [68, 11, 0]]
** centroid: 6, normalized-entropy: 0.5822463050121238, [(1, 68), (2, 11)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [44, 12, 0]]
** centroid: 7, normalized-entropy: 0.7495952572594798, [(1, 44), (2, 12)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18697961412742733] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18697961412742733, 0.15350860145315529] ***
*** finished computation of 7 references, err: [Inf, 0.18697961412742733, 0.15350860145315529] ***
*** center 1: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 31, 15]]
** centroid: 2, normalized-entropy: 0.9108783787500366, [(2, 31), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [44, 11, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 44), (2, 11)]
*** center 4: selecting labels [1] (freq >= 2) [from [62, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 70, 0]]
** centroid: 5, normalized-entropy: 0.6261776539736496, [(1, 13), (2, 70)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 55, 0]]
** centroid: 6, normalized-entropy: 0.2192973081321754, [(1, 2), (2, 55)]
*** center 7: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18772421968914568] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18772421968914568, 0.1482890399582684] ***
*** finished computation of 7 references, err: [Inf, 0.18772421968914568, 0.1482890399582684] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 71, 15]]
** centroid: 1, normalized-entropy: 0.6677135405281421, [(2, 71), (3, 15)]
*** center 2: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [65, 2, 0]]
** centroid: 3, normalized-entropy: 0.19364280468389852, [(1, 65), (2, 2)]
*** center 4: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [93, 7, 0]]
** centroid: 5, normalized-entropy: 0.36592365090022316, [(1, 93), (2, 7)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 60, 1]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [25, 38, 0]]
** centroid: 7, normalized-entropy: 0.9690632527820694, [(1, 25), (2, 38)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19502179145626725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19502179145626725, 0.15548062107898294] ***
*** finished computation of 7 references, err: [Inf, 0.19502179145626725, 0.15548062107898294] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [58, 28, 0]]
** centroid: 1, normalized-entropy: 0.9103480624345157, [(1, 58), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 15, 0]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(1, 60), (2, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 74, 5]]
** centroid: 4, normalized-entropy: 0.340373285759646, [(2, 74), (3, 5)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [79, 19, 0]]
** centroid: 5, normalized-entropy: 0.7095128863456239, [(1, 79), (2, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 46, 9]]
** centroid: 7, normalized-entropy: 0.6429383500409613, [(2, 46), (3, 9)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19639347795955836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19639347795955836, 0.14944732688181103] ***
*** finished computation of 7 references, err: [Inf, 0.19639347795955836, 0.14944732688181103] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [55, 33, 0]]
** centroid: 1, normalized-entropy: 0.954434002924965, [(1, 55), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 2, 0]]
** centroid: 2, normalized-entropy: 0.18927843126120178, [(1, 67), (2, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 60, 17]]
** centroid: 4, normalized-entropy: 0.7615877869576693, [(2, 60), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [55, 27, 0]]
** centroid: 5, normalized-entropy: 0.9141770436147919, [(1, 55), (2, 27)]
*** center 6: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 61, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19800109485536813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19800109485536813, 0.14970107994228601] ***
*** finished computation of 7 references, err: [Inf, 0.19800109485536813, 0.14970107994228601] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [85, 11, 0]]
** centroid: 1, normalized-entropy: 0.5135877363803757, [(1, 85), (2, 11)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 57, 16]]
** centroid: 2, normalized-entropy: 0.7586638628883696, [(2, 57), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [50, 4, 0]]
** centroid: 3, normalized-entropy: 0.38094658570539014, [(1, 50), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 37, 0]]
** centroid: 4, normalized-entropy: 0.9590550044058676, [(1, 60), (2, 37)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [7, 74, 0]]
** centroid: 5, normalized-entropy: 0.42440514472480345, [(1, 7), (2, 74)]
*** center 6: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.187924579821527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.187924579821527, 0.15110705402866006] ***
*** finished computation of 7 references, err: [Inf, 0.187924579821527, 0.15110705402866006] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 91, 13]]
** centroid: 1, normalized-entropy: 0.5435644431995963, [(2, 91), (3, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [64, 7, 0]]
** centroid: 3, normalized-entropy: 0.4645149440905521, [(1, 64), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [66, 8, 0]]
** centroid: 4, normalized-entropy: 0.4941829348497886, [(1, 66), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 22, 0]]
** centroid: 5, normalized-entropy: 0.7849920887641585, [(1, 72), (2, 22)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 59, 2]]
** centroid: 6, normalized-entropy: 0.20818094555717087, [(2, 59), (3, 2)]
*** center 7: selecting labels [1] (freq >= 2) [from [42, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1949991327142343] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1949991327142343, 0.1479063032399863] ***
*** finished computation of 7 references, err: [Inf, 0.1949991327142343, 0.1479063032399863] ***
*** center 1: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 43, 15]]
** centroid: 2, normalized-entropy: 0.8246578332945033, [(2, 43), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 2, 0]]
** centroid: 3, normalized-entropy: 0.22853814395352806, [(1, 52), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 28, 0]]
** centroid: 4, normalized-entropy: 0.9023932827949788, [(1, 60), (2, 28)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 52, 0]]
** centroid: 5, normalized-entropy: 0.9474351361840305, [(1, 30), (2, 52)]
*** center 6: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 46, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18900313797034324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18900313797034324, 0.15132109600771218] ***
*** finished computation of 7 references, err: [Inf, 0.18900313797034324, 0.15132109600771218] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [67, 20, 0]]
** centroid: 1, normalized-entropy: 0.7778108790853029, [(1, 67), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 14, 0]]
** centroid: 2, normalized-entropy: 0.7162583911075451, [(1, 57), (2, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 60, 8]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 60), (3, 8)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [83, 22, 0]]
** centroid: 5, normalized-entropy: 0.7405715327916912, [(1, 83), (2, 22)]
*** center 6: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 56, 8]]
** centroid: 7, normalized-entropy: 0.5435644431995963, [(2, 56), (3, 8)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18573710822314024] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18573710822314024, 0.1519613749552518] ***
*** finished computation of 7 references, err: [Inf, 0.18573710822314024, 0.1519613749552518] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [46, 45, 0]]
** centroid: 1, normalized-entropy: 0.999912889501356, [(1, 46), (2, 45)]
*** center 2: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 60, 11]]
** centroid: 4, normalized-entropy: 0.6220403090607189, [(2, 60), (3, 11)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [82, 10, 0]]
** centroid: 5, normalized-entropy: 0.49596907206183377, [(1, 82), (2, 10)]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 63, 0]]
** centroid: 7, normalized-entropy: 0.46899559358928133, [(1, 7), (2, 63)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1916036843508482] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1916036843508482, 0.15140019033569843] ***
*** finished computation of 7 references, err: [Inf, 0.1916036843508482, 0.15140019033569843] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [41, 32, 0]]
** centroid: 1, normalized-entropy: 0.9890076795739703, [(1, 41), (2, 32)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 14, 0]]
** centroid: 2, normalized-entropy: 0.699772221773307, [(1, 60), (2, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 56, 3]]
** centroid: 4, normalized-entropy: 0.2899860470332091, [(2, 56), (3, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [79, 20, 0]]
** centroid: 5, normalized-entropy: 0.7259501452943735, [(1, 79), (2, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 58, 10]]
** centroid: 7, normalized-entropy: 0.6024308020404452, [(2, 58), (3, 10)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18634217661246658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18634217661246658, 0.15424784543365241] ***
*** finished computation of 7 references, err: [Inf, 0.18634217661246658, 0.15424784543365241] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 15, 0]]
** centroid: 2, normalized-entropy: 0.7982441335646697, [(1, 47), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 36, 10]]
** centroid: 3, normalized-entropy: 0.7553754125614286, [(2, 36), (3, 10)]
*** center 4: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 84, 0]]
** centroid: 5, normalized-entropy: 0.5683625344629001, [(1, 13), (2, 84)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [33, 58, 0]]
** centroid: 7, normalized-entropy: 0.9448506439764089, [(1, 33), (2, 58)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18571587208099663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18571587208099663, 0.15144711958244442] ***
*** finished computation of 7 references, err: [Inf, 0.18571587208099663, 0.15144711958244442] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [106, 17, 0]]
** centroid: 1, normalized-entropy: 0.5795353469249725, [(1, 106), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 6, 0]]
** centroid: 2, normalized-entropy: 0.47983202361612853, [(1, 52), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 28, 17]]
** centroid: 3, normalized-entropy: 0.9564574047992596, [(2, 28), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [9, 60, 0]]
** centroid: 5, normalized-entropy: 0.5586293734521991, [(1, 9), (2, 60)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 60, 0]]
** centroid: 6, normalized-entropy: 0.2761954276479391, [(1, 3), (2, 60)]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19186341025587172] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19186341025587172, 0.14681835942901672] ***
*** finished computation of 7 references, err: [Inf, 0.19186341025587172, 0.14681835942901672] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [84, 4, 0]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(1, 84), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 2, 0]]
** centroid: 2, normalized-entropy: 0.21357981533827744, [(1, 57), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 29, 17]]
** centroid: 3, normalized-entropy: 0.9503376699710269, [(2, 29), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [61, 22, 0]]
** centroid: 5, normalized-entropy: 0.8342867421739538, [(1, 61), (2, 22)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 70, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19950876642297954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19950876642297954, 0.1492736537558958] ***
*** finished computation of 7 references, err: [Inf, 0.19950876642297954, 0.1492736537558958] ***
*** center 1: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 43, 13]]
** centroid: 2, normalized-entropy: 0.7817281222714539, [(2, 43), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [44, 21, 0]]
** centroid: 3, normalized-entropy: 0.9076961653608385, [(1, 44), (2, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [69, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [20, 55, 0]]
** centroid: 5, normalized-entropy: 0.8366407419411671, [(1, 20), (2, 55)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 62, 0]]
** centroid: 6, normalized-entropy: 0.43055186701043935, [(1, 6), (2, 62)]
*** center 7: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18737439344637097] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18737439344637097, 0.14838473075069486] ***
*** finished computation of 7 references, err: [Inf, 0.18737439344637097, 0.14838473075069486] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 65, 15]]
** centroid: 1, normalized-entropy: 0.6962122601251459, [(2, 65), (3, 15)]
*** center 2: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 12, 0]]
** centroid: 5, normalized-entropy: 0.5916727785823274, [(1, 72), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 58, 0]]
** centroid: 6, normalized-entropy: 0.49291577961610966, [(1, 7), (2, 58)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [9, 51, 0]]
** centroid: 7, normalized-entropy: 0.6098403047164005, [(1, 9), (2, 51)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2044258431904018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2044258431904018, 0.15068317709164694] ***
*** finished computation of 7 references, err: [Inf, 0.2044258431904018, 0.15068317709164694] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [89, 3, 0]]
** centroid: 1, normalized-entropy: 0.20731018585948177, [(1, 89), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 42, 16]]
** centroid: 2, normalized-entropy: 0.8497511372532974, [(2, 42), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [41, 52, 0]]
** centroid: 3, normalized-entropy: 0.989884644089986, [(1, 41), (2, 52)]
*** center 4: selecting labels [1] (freq >= 2) [from [55, 1, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [1, 81, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18162919585686177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18162919585686177, 0.1489349462762475] ***
*** finished computation of 7 references, err: [Inf, 0.18162919585686177, 0.1489349462762475] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 87, 15]]
** centroid: 1, normalized-entropy: 0.6024308020404452, [(2, 87), (3, 15)]
*** center 2: selecting labels [1] (freq >= 2) [from [42, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [62, 2, 0]]
** centroid: 3, normalized-entropy: 0.2006223243127146, [(1, 62), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [64, 16, 0]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(1, 64), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 9, 0]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(1, 72), (2, 9)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 67, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19306689885538073] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19306689885538073, 0.15764748793281616] ***
*** finished computation of 7 references, err: [Inf, 0.19306689885538073, 0.15764748793281616] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [86, 11, 0]]
** centroid: 1, normalized-entropy: 0.5100930822965021, [(1, 86), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 8, 0]]
** centroid: 2, normalized-entropy: 0.5079353563991225, [(1, 63), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 37, 13]]
** centroid: 3, normalized-entropy: 0.8267463724926181, [(2, 37), (3, 13)]
*** center 4: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [17, 56, 0]]
** centroid: 5, normalized-entropy: 0.7829924501610913, [(1, 17), (2, 56)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [11, 71, 0]]
** centroid: 7, normalized-entropy: 0.5687008669370753, [(1, 11), (2, 71)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20471988706104458] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20471988706104458, 0.15344870406389235] ***
*** finished computation of 7 references, err: [Inf, 0.20471988706104458, 0.15344870406389235] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [39, 44, 0]]
** centroid: 1, normalized-entropy: 0.9973806632063373, [(1, 39), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [49, 9, 0]]
** centroid: 2, normalized-entropy: 0.6226343162547099, [(1, 49), (2, 9)]
*** center 3: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 42, 19]]
** centroid: 4, normalized-entropy: 0.8948692308065576, [(2, 42), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 16, 0]]
** centroid: 5, normalized-entropy: 0.7269625813353975, [(1, 63), (2, 16)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18446153534576296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18446153534576296, 0.15308523119054734] ***
*** finished computation of 7 references, err: [Inf, 0.18446153534576296, 0.15308523119054734] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 74, 15]]
** centroid: 1, normalized-entropy: 0.6543524423071835, [(2, 74), (3, 15)]
*** center 2: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 21, 0]]
** centroid: 3, normalized-entropy: 0.8656939941993219, [(1, 52), (2, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [90, 17, 0]]
** centroid: 5, normalized-entropy: 0.6316198184485629, [(1, 90), (2, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 65, 0]]
** centroid: 7, normalized-entropy: 0.460127886147135, [(1, 7), (2, 65)]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 369,3 => 31,1 => 600), Dict(2 => 368,3 => 36,1 => 596))
[ Info: ===== scores for single classifier: {"micro_f1":0.955,"precision":0.955,"recall":0.955,"macro_recall":0.9672089290925007,"macro_f1":0.9226982302064904,"accuracy":0.955,"class_f1":{"2":0.9389416553595659,"3":0.8571428571428571,"1":0.9720101781170483},"class_precision":{"2":0.9376693766937669,"3":0.75,"1":0.9828473413379074},"class_recall":{"2":0.9402173913043478,"3":1.0,"1":0.9614093959731543}}
[ Info: ===== scores for 1: {"micro_f1":0.975,"precision":0.975,"recall":0.975,"macro_recall":0.9801271763447135,"macro_f1":0.9690827215464565,"accuracy":0.975,"class_f1":{"2":0.9656121045392022,"3":0.9600000000000001,"1":0.9816360601001669},"class_precision":{"2":0.9777158774373259,"3":0.9230769230769231,"1":0.9767441860465116},"class_recall":{"2":0.9538043478260869,"3":1.0,"1":0.9865771812080537}}
[ Info: ===== scores for 5: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9868689816165742,"macro_f1":0.9762642846754996,"accuracy":0.979,"class_f1":{"2":0.9719626168224299,"3":0.972972972972973,"1":0.983857264231096},"class_precision":{"2":0.9553805774278216,"3":0.9473684210526315,"1":0.9965576592082617},"class_recall":{"2":0.9891304347826086,"3":1.0,"1":0.9714765100671141}}
[ Info: ===== scores for 7: {"micro_f1":0.977,"precision":0.977,"recall":0.977,"macro_recall":0.9854039003987939,"macro_f1":0.9668301993799372,"accuracy":0.977,"class_f1":{"2":0.9692923898531375,"3":0.9473684210526316,"1":0.9838297872340425},"class_precision":{"2":0.952755905511811,"3":0.9,"1":0.998272884283247},"class_recall":{"2":0.9864130434782609,"3":1.0,"1":0.9697986577181208}}
[ Info: ===== scores for 9: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9817016827156891,"macro_f1":0.9586798327834184,"accuracy":0.971,"class_f1":{"2":0.9614873837981407,"3":0.9350649350649352,"1":0.9794871794871796},"class_precision":{"2":0.9402597402597402,"3":0.8780487804878049,"1":0.9982578397212544},"class_recall":{"2":0.9836956521739131,"3":1.0,"1":0.9614093959731543}}
[ Info: ===== scores for 11: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9833795350646825,"macro_f1":0.9608318183663452,"accuracy":0.974,"class_f1":{"2":0.9653333333333333,"3":0.9350649350649352,"1":0.9820971867007674},"class_precision":{"2":0.9476439790575916,"3":0.8780487804878049,"1":0.9982668977469671},"class_recall":{"2":0.9836956521739131,"3":1.0,"1":0.9664429530201343}}
(score = 0.974, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.975, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.975, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.976, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.981, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.981, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.977, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.981,"k":5,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.9810000000000001,"precision":0.981,"recall":0.981,"macro_recall":0.9876410368641183,"macro_f1":0.9736457740871346,"accuracy":0.981,"class_f1":{"2":0.974496644295302,"3":0.9600000000000001,"1":0.9864406779661017},"class_precision":{"2":0.9628647214854111,"3":0.9230769230769231,"1":0.9965753424657534},"class_recall":{"2":0.9864130434782609,"3":1.0,"1":0.9765100671140939}}
Test Summary: | Pass  Total
AKNC          |    8      8
[809, 1, 2, 1, 1, 4, 3, 1, 1, 1, 6, 3, 3, 2, 1, 2, 3, 4, 8, 13, 5, 2, 7, 3, 4, 5, 13, 1, 6, 2, 20, 10, 33, 2, 8, 19, 22, 2, 36, 2, 1, 14, 1, 2, 21, 8, 17, 4, 6, 14, 11, 54, 2, 16, 22, 18, 16, 7, 11, 1, 27, 5, 26, 11, 8, 13, 9, 69, 17, 12, 5, 14, 42, 7, 2, 24, 10, 6, 21, 21, 1, 7, 6, 8, 15, 6, 14, 3, 5, 49, 16, 26, 14, 5, 22, 30, 8, 47, 19, 31, 191, 39, 4, 21, 70, 40, 2, 11, 17, 155, 3, 17, 227, 26, 35, 20, 7, 5, 22, 22, 29, 9, 3, 376, 22, 4, 19, 18, 8, 34, 68, 55, 5, 7, 44, 27, 156, 12, 21, 31, 3, 8, 36, 15, 5, 9, 13, 72, 20, 9, 9, 60, 12, 6, 7, 19, 6, 19, 8, 27, 16, 57, 9, 12, 3, 12, 19, 4, 96, 105, 10, 41, 71, 45, 9, 10, 31, 23, 44, 9, 15, 37, 17, 15, 211, 117, 52, 17, 65, 64, 13, 8, 9, 15, 15, 13, 28, 12, 48, 63, 177, 30, 14, 16, 11, 32, 35, 40, 3, 5, 7, 13, 48, 32, 4, 14, 88, 24, 178, 24, 11, 5, 9, 15, 108, 13, 11, 54, 29, 22, 17, 203, 87, 10, 156, 30, 23, 8, 4, 33, 22, 13, 48, 5, 22, 24, 17, 12, 5, 13, 42, 7, 19, 64, 38, 6, 7, 145, 1, 45, 16, 106, 53, 5, 34, 27, 15, 28, 10, 49, 51, 79, 24, 443, 5, 6, 144, 13, 103, 9, 49, 58, 4, 7, 5, 1, 12, 25, 24, 3, 13, 18, 505, 23, 68, 6, 18, 11, 14, 15]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6499999999999999, speedup = 0.2711373504088034, eval_ratio = 0.08175700000000001)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":null,"recall":0.39930555555555564,"f1":null,"seconds":0.00017515942454338074,"exhaustive_search_seconds":0.0003792569041252136,"evaluations":490.078125,"distances_sum":1749.2193646439114}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5607638888888887,"recall":0.5590277777777776,"f1":null,"seconds":0.00030455365777015686,"exhaustive_search_seconds":0.0003792569041252136,"evaluations":660.734375,"distances_sum":1646.926314026953}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6788194444444442,"recall":0.6788194444444442,"f1":null,"seconds":0.0006262306123971939,"exhaustive_search_seconds":0.0003792569041252136,"evaluations":777.328125,"distances_sum":1609.0038093289425}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7543402777777771,"recall":0.7543402777777771,"f1":0.7543402777777771,"seconds":0.00046945177018642426,"exhaustive_search_seconds":0.0003792569041252136,"evaluations":894.34375,"distances_sum":1578.223141067797}
KCenters.DeloneInvIndex> reached performance {"precision":0.8081597222222214,"recall":0.8081597222222214,"f1":0.8081597222222214,"seconds":0.0005542803555727005,"exhaustive_search_seconds":0.0003792569041252136,"evaluations":1015.921875,"distances_sum":1559.4636592448917}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.785, speedup = 0.922490694978339, eval_ratio = 0.10272300000000001)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
