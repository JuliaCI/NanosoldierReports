Julia Version 1.5.0-DEV.288
Commit b0d1c1abb6 (2020-02-18 18:55 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed PooledArrays ──────────────── v0.5.3
  Installed Parsers ───────────────────── v0.3.11
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed KCenters ──────────────────── v0.2.1
  Installed MLDataUtils ───────────────── v0.5.0
  Installed JSON ──────────────────────── v0.21.0
  Installed StatsBase ─────────────────── v0.32.1
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Missings ──────────────────── v0.4.3
  Installed TableTraits ───────────────── v1.0.0
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed Reexport ──────────────────── v0.2.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataFrames ────────────────── v0.20.2
  Installed DataAPI ───────────────────── v1.1.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed Compat ────────────────────── v3.5.0
  Installed Tables ────────────────────── v1.0.1
  Installed MappedArrays ──────────────── v0.2.2
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataStructures ────────────── v0.17.9
  Installed MLDataPattern ─────────────── v0.5.0
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.1
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.5.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.1
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.1
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_TOoaSr/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.5.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.1
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.1
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9326678744951884
[ Info: 0.8302954188982645
[ Info: 0.555438105414311
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.32520933754742143
mean(cdnet.distances) = 0.39298482606808344
mean(crand.distances) = 0.3400939423839251
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21484375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.21484375,"f1":null,"seconds":4.215165972709656e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":6.59375,"distances_sum":531.6509961642614}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4609375, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.4609375,"f1":null,"seconds":4.259869456291199e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":6.828125,"distances_sum":1167.3014850424665}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4609375,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.4609375,"f1":null,"seconds":4.259869456291199e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":6.828125,"distances_sum":1167.3014850424665}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6943359375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6943359375,"f1":0.8111591533466542,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.09375,"distances_sum":1828.6575685865794}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9172535797535805,"seconds":6.902962923049927e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.640625,"distances_sum":2376.0581787655533}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5478515625, conf: {"ssize":7,"bsize":3}, perf: {"precision":1.0,"recall":0.5478515625,"f1":0.6955357142857149,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":7.5859375,"distances_sum":1389.7190426587943}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8564453125,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.8564453125,"f1":0.9172535797535805,"seconds":6.902962923049927e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.640625,"distances_sum":2376.0581787655533}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.970203754578755,"seconds":7.005408406257629e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.9296875,"distances_sum":2796.0858906582766}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9578010531135539,"seconds":6.496906280517578e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.8828125,"distances_sum":2696.144851757091}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.970203754578755,"seconds":7.005408406257629e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.9296875,"distances_sum":2796.0858906582766}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.970203754578755,"seconds":7.005408406257629e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.9296875,"distances_sum":2796.0858906582766}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7265625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.7265625,"f1":0.8336226273726283,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.4609375,"distances_sum":1675.2299047960464}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.20703125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.20703125,"f1":null,"seconds":3.7420541048049927e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":6.7578125,"distances_sum":506.10344621697413}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7265625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.7265625,"f1":0.8336226273726283,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.4609375,"distances_sum":1675.2299047960464}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8729057400932408,"seconds":5.9586018323898315e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.6953125,"distances_sum":1905.558424314389}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7978515625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7978515625,"f1":0.8815106768231777,"seconds":5.749985575675964e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.6640625,"distances_sum":1947.9208380676591}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9083052364302371,"seconds":5.865469574928284e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.9140625,"distances_sum":2075.0800564614037}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.841796875,"state":{"ssize":8,"bsize":6},"perf":{"precision":1.0,"recall":0.841796875,"f1":0.9083052364302371,"seconds":5.865469574928284e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.9140625,"distances_sum":2075.0800564614037}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9528388278388285,"seconds":5.921348929405212e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.9765625,"distances_sum":2384.4439442326957}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.912718011155512,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.96875,"distances_sum":2098.502232852903}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":11,"bsize":9}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9740728021978027,"seconds":6.387010216712952e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.96875,"distances_sum":2542.4223434703235}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9416895604395608,"seconds":6.122514605522156e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.9453125,"distances_sum":2285.421983976932}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9103740009990019,"seconds":6.100162863731384e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.921875,"distances_sum":2073.746506303365}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9700549450549455,"seconds":6.590038537979126e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.9921875,"distances_sum":2490.444691885609}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":11,"bsize":9},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9740728021978027,"seconds":6.387010216712952e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.96875,"distances_sum":2542.4223434703235}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":11,"bsize":9},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9740728021978027,"seconds":6.387010216712952e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.96875,"distances_sum":2542.4223434703235}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5830078125, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5830078125,"f1":0.7236929736929743,"seconds":4.751607775688171e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.859375,"distances_sum":1312.6938553874802}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5830078125,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.5830078125,"f1":0.7236929736929743,"seconds":4.751607775688171e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.859375,"distances_sum":1312.6938553874802}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9474759615384624,"seconds":6.182119250297546e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.953125,"distances_sum":2380.0680092312687}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9474759615384624,"seconds":6.182119250297546e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.953125,"distances_sum":2380.0680092312687}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9499141483516489,"seconds":6.0908496379852295e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.9375,"distances_sum":2395.039072339614}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9499141483516489,"seconds":6.0908496379852295e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.9375,"distances_sum":2395.039072339614}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.912109375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9499141483516489,"seconds":6.0908496379852295e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.9375,"distances_sum":2395.039072339614}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1982421875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1982421875,"f1":null,"seconds":3.4142285585403442e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.046875,"distances_sum":505.1688705165515}}, beam: 1, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1982421875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1982421875,"f1":null,"seconds":3.4142285585403442e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.046875,"distances_sum":505.1688705165515}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.236328125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.236328125,"f1":null,"seconds":3.6694109439849854e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":6.1875,"distances_sum":432.5510965559149}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.236328125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.236328125,"f1":null,"seconds":3.6694109439849854e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":6.1875,"distances_sum":432.5510965559149}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.509765625, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.509765625,"f1":0.661295475357976,"seconds":3.98978590965271e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.2109375,"distances_sum":956.2576533585892}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2080078125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2080078125,"f1":null,"seconds":3.0640512704849243e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":4.9765625,"distances_sum":418.726219627878}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.509765625,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.509765625,"f1":0.661295475357976,"seconds":3.98978590965271e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.2109375,"distances_sum":956.2576533585892}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.63671875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.63671875,"f1":0.7669387903762911,"seconds":4.6622008085250854e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.34375,"distances_sum":1262.6039239110764}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9331330128205132,"seconds":5.668029189109802e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.6328125,"distances_sum":1953.6623792829153}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.728515625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.728515625,"f1":0.8341476232101241,"seconds":5.0086528062820435e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.59375,"distances_sum":1477.2481037458062}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.880859375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.880859375,"f1":0.9331330128205132,"seconds":5.668029189109802e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.6328125,"distances_sum":1953.6623792829153}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9709649725274729,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8984375,"distances_sum":2166.1658717420846}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9679887820512822,"seconds":5.83939254283905e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.9140625,"distances_sum":2139.344696902811}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9709649725274729,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8984375,"distances_sum":2166.1658717420846}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9709649725274729,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8984375,"distances_sum":2166.1658717420846}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.20703125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.20703125,"f1":null,"seconds":3.1981617212295532e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":5.5390625,"distances_sum":407.80890157012783}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3984375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3984375,"f1":null,"seconds":3.7997961044311523e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":6.203125,"distances_sum":737.3718873028189}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.859521728271729,"seconds":5.299225449562073e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.234375,"distances_sum":1658.9588533203714}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7666015625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7666015625,"f1":0.859521728271729,"seconds":5.299225449562073e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.234375,"distances_sum":1658.9588533203714}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9474473443223448,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8359375,"distances_sum":2130.7750902741263}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.9015801906426918,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.453125,"distances_sum":1897.9047517462468}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9091796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9474473443223448,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8359375,"distances_sum":2130.7750902741263}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9589342948717953,"seconds":6.318092346191406e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.84375,"distances_sum":2202.205384454001}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9668956043956047,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.921875,"distances_sum":2222.994082468014}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9621565934065937,"seconds":6.105750799179077e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8984375,"distances_sum":2206.4007111155934}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9505437271062275,"seconds":6.05359673500061e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8515625,"distances_sum":2128.154641961457}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9584134615384619,"seconds":6.036832928657532e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.90625,"distances_sum":2170.5216769812428}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9668956043956047,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.921875,"distances_sum":2222.994082468014}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9668956043956047,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.921875,"distances_sum":2222.994082468014}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5859375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5859375,"f1":0.7242108585858592,"seconds":4.585832357406616e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":7.5390625,"distances_sum":1151.6507997061335}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5859375,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.5859375,"f1":0.7242108585858592,"seconds":4.585832357406616e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":7.5390625,"distances_sum":1151.6507997061335}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8661531177156185,"seconds":5.535781383514404e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.2421875,"distances_sum":1658.4771301580452}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80078125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.80078125,"f1":0.8823405760905769,"seconds":5.504116415977478e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.28125,"distances_sum":1715.7208961314677}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.80078125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.80078125,"f1":0.8823405760905769,"seconds":5.504116415977478e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.28125,"distances_sum":1715.7208961314677}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9461767399267406,"seconds":6.323680281639099e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8984375,"distances_sum":2086.1334798583907}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9249942765567772,"seconds":6.1336904764175415e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.84375,"distances_sum":1956.2171194584582}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.954990842490843,"seconds":6.236135959625244e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.890625,"distances_sum":2136.0669226132995}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.954990842490843,"seconds":6.236135959625244e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.890625,"distances_sum":2136.0669226132995}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.919921875,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.954990842490843,"seconds":6.236135959625244e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.890625,"distances_sum":2136.0669226132995}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7939453125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7939453125,"f1":0.8770953005328012,"seconds":5.630776286125183e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.3984375,"distances_sum":1730.9890390221938}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.669921875,"f1":0.7916640651015661,"seconds":5.302950739860535e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.2109375,"distances_sum":1385.486901492635}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7939453125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7939453125,"f1":0.8770953005328012,"seconds":5.630776286125183e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.3984375,"distances_sum":1730.9890390221938}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9106003371628382,"seconds":6.010755896568298e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.4921875,"distances_sum":1912.5144080705836}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9322516025641033,"seconds":5.8300793170928955e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.765625,"distances_sum":2035.4416636778508}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9341231684981691,"seconds":6.0442835092544556e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8046875,"distances_sum":2066.8367238217043}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.884765625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.884765625,"f1":0.9322516025641033,"seconds":5.8300793170928955e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.765625,"distances_sum":2035.4416636778508}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9339233682983688,"seconds":5.865469574928284e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8125,"distances_sum":2057.881253732288}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9702609890109896,"seconds":6.57886266708374e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.953125,"distances_sum":2271.290636703757}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9699061355311359,"seconds":6.346032023429871e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.9375,"distances_sum":2275.0024836498083}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9710222069597072,"seconds":6.357207894325256e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.9453125,"distances_sum":2269.3012206596372}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9517888361638368,"seconds":6.15045428276062e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.890625,"distances_sum":2159.4388935397283}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9710222069597072,"seconds":6.357207894325256e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.9453125,"distances_sum":2269.3012206596372}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9710222069597072,"seconds":6.357207894325256e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.9453125,"distances_sum":2269.3012206596372}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7965345418470428,"seconds":5.031004548072815e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.078125,"distances_sum":1384.5993702758592}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5537109375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5537109375,"f1":0.6958227536352543,"seconds":4.7888606786727905e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.4921875,"distances_sum":1089.4744411813456}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2587890625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2587890625,"f1":null,"seconds":3.824010491371155e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":6.375,"distances_sum":501.2049796643581}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6806640625,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6806640625,"f1":0.7965345418470428,"seconds":5.031004548072815e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.078125,"distances_sum":1384.5993702758592}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9255895146520156,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.8515625,"distances_sum":1984.2299972157277}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9371227730602738,"seconds":6.388872861862183e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.8828125,"distances_sum":2083.815054633815}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9228937728937736,"seconds":6.888061761856079e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.5546875,"distances_sum":1967.1813512240844}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9381753663003669,"seconds":6.791204214096069e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.8984375,"distances_sum":2074.8680824251646}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9371227730602738,"seconds":6.388872861862183e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.8828125,"distances_sum":2083.815054633815}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9652930402930409,"seconds":6.893649697303772e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9609375,"distances_sum":2246.332193498527}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9555288461538465,"seconds":6.936490535736084e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.921875,"distances_sum":2188.802474439671}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9581959706959711,"seconds":6.571412086486816e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.8515625,"distances_sum":2225.616501757427}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9709821428571431,"seconds":6.9607049226760864e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9296875,"distances_sum":2284.7128011143527}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9679143772893776,"seconds":6.92903995513916e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9453125,"distances_sum":2257.3298398627426}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9572058150183155,"seconds":6.996095180511475e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.90625,"distances_sum":2206.735667615156}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9709821428571431,"seconds":6.9607049226760864e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9296875,"distances_sum":2284.7128011143527}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9709821428571431,"seconds":6.9607049226760864e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9296875,"distances_sum":2284.7128011143527}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5400390625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5400390625,"f1":0.6862845487845494,"seconds":4.677101969718933e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.03125,"distances_sum":1082.319810681197}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3583984375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3583984375,"f1":null,"seconds":3.87243926525116e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":5.4609375,"distances_sum":730.6300515876519}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5400390625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5400390625,"f1":0.6862845487845494,"seconds":4.677101969718933e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.03125,"distances_sum":1082.319810681197}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5849609375, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5849609375,"f1":0.7221556221556229,"seconds":4.639849066734314e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.203125,"distances_sum":1209.7955101137313}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.7882849789099796,"seconds":4.766508936882019e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.5,"distances_sum":1399.51399206281}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.7831389097014105,"seconds":4.805624485015869e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.421875,"distances_sum":1419.196706418843}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6650390625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6650390625,"f1":0.7882849789099796,"seconds":4.766508936882019e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.5,"distances_sum":1399.51399206281}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9089889277389285,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.5,"distances_sum":1994.558337225231}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8506280178155186,"seconds":5.368143320083618e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.0078125,"distances_sum":1689.967341951966}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8607720404595413,"seconds":5.4817646741867065e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.0234375,"distances_sum":1752.2491869619244}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8483330905205914,"seconds":5.319714546203613e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.9609375,"distances_sum":1719.7699521493887}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.84375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.84375,"f1":0.9089889277389285,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.5,"distances_sum":1994.558337225231}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.84375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.84375,"f1":0.9089889277389285,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.5,"distances_sum":1994.558337225231}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.515625,"f1":0.66432230963481,"seconds":4.341825842857361e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.7421875,"distances_sum":779.4428656285119}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.64453125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.64453125,"f1":0.7721179861804869,"seconds":4.6584755182266235e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.6015625,"distances_sum":1029.4605693899719}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.64453125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.64453125,"f1":0.7721179861804869,"seconds":4.6584755182266235e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.6015625,"distances_sum":1029.4605693899719}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9058582042957052,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.3671875,"distances_sum":1427.0580389373902}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9310782967032971,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.6796875,"distances_sum":1593.4768096879566}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8818359375,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8818359375,"f1":0.9310782967032971,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.6796875,"distances_sum":1593.4768096879566}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9470695970695974,"seconds":5.850568413734436e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.7734375,"distances_sum":1644.4473772443648}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9582818223443228,"seconds":5.723908543586731e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8671875,"distances_sum":1660.2182513927344}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.934309440559441,"seconds":5.478039383888245e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.7265625,"distances_sum":1557.1294962954805}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9476991758241761,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.65625,"distances_sum":1655.8546022761839}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9582818223443228,"seconds":5.723908543586731e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8671875,"distances_sum":1660.2182513927344}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.92578125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9582818223443228,"seconds":5.723908543586731e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8671875,"distances_sum":1660.2182513927344}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5224609375, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.5224609375,"f1":null,"seconds":3.7606805562973022e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":6.5859375,"distances_sum":876.0299703733}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8434482184482193,"seconds":5.025416612625122e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":8.0234375,"distances_sum":1382.5191505079704}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3603515625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3603515625,"f1":null,"seconds":3.7029385566711426e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":5.5546875,"distances_sum":636.9840002470054}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7470703125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7470703125,"f1":0.8434482184482193,"seconds":5.025416612625122e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":8.0234375,"distances_sum":1382.5191505079704}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9561984890109892,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":8.78125,"distances_sum":1857.1855273533986}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9354827464202469,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":8.6484375,"distances_sum":1744.1886405862115}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9561813186813193,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":8.7109375,"distances_sum":1854.538724678577}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9400099900099904,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":8.7265625,"distances_sum":1787.8052761144086}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8503876332001342,"seconds":4.870817065238953e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":8.1171875,"distances_sum":1386.7053766562276}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9561984890109892,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":8.78125,"distances_sum":1857.1855273533986}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":4,"bsize":13}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9787030677655681,"seconds":5.939975380897522e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":8.9375,"distances_sum":1949.2579108350756}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9793898809523811,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":8.9140625,"distances_sum":1956.5619384011757}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9588942307692313,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":8.828125,"distances_sum":1825.0390649053804}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":11,"bsize":11}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9664835164835169,"seconds":5.949288606643677e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":8.84375,"distances_sum":1885.764173189109}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9729739010989016,"seconds":5.776062607765198e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":8.8828125,"distances_sum":1922.7666481110646}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9722298534798538,"seconds":5.491077899932861e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":8.8984375,"distances_sum":1903.4012005634254}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9694826007326013,"seconds":5.781650543212891e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":8.8828125,"distances_sum":1921.0434298076789}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9793898809523811,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":8.9140625,"distances_sum":1956.5619384011757}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9793898809523811,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.212581992149353e-6,"evaluations":8.9140625,"distances_sum":1956.5619384011757}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8718276515151523,"seconds":5.250796675682068e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.546875,"distances_sum":1400.9331718847795}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8499323593073601,"seconds":5.172565579414368e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.546875,"distances_sum":1278.3007637185606}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.787109375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.787109375,"f1":0.8718276515151523,"seconds":5.250796675682068e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.546875,"distances_sum":1400.9331718847795}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.810546875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.810546875,"f1":0.8831219128094137,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.46875,"distances_sum":1438.2097848466985}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.951774267399268,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.7734375,"distances_sum":1743.226741215358}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9054721320346327,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.6328125,"distances_sum":1508.9779359694915}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9497081043956048,"seconds":6.161630153656006e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.796875,"distances_sum":1745.5294713170247}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.951774267399268,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.7734375,"distances_sum":1743.226741215358}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9645833333333337,"seconds":6.0442835092544556e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8359375,"distances_sum":1803.4284864193587}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9748340201465202,"seconds":6.3925981521606445e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.9140625,"distances_sum":1862.0302397806186}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9642144314019319,"seconds":6.342306733131409e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8671875,"distances_sum":1793.717016701928}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9544299450549454,"seconds":6.489455699920654e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8125,"distances_sum":1765.0053433395185}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9634329212454217,"seconds":7.00727105140686e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8515625,"distances_sum":1797.8284490262602}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9748340201465202,"seconds":6.3925981521606445e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.9140625,"distances_sum":1862.0302397806186}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9748340201465202,"seconds":6.3925981521606445e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.9140625,"distances_sum":1862.0302397806186}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2001953125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2001953125,"f1":null,"seconds":3.863126039505005e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":5.6015625,"distances_sum":350.8285684783162}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2001953125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2001953125,"f1":null,"seconds":3.863126039505005e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":5.6015625,"distances_sum":350.8285684783162}}, n: 9
mean(cfft.distances) = 0.535282189342544
mean(cdnet.distances) = 0.3927572516074357
mean(crand.distances) = 0.7201027711949112
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8844444444444445
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8666666666666667
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8577777777777778
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9488888888888889
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9066666666666666
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9466666666666667
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.84
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8888888888888888
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8755555555555555
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9199999999999999
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9488888888888889
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8866666666666667
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8933333333333332
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9355555555555556
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9177777777777777
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8666666666666667
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9355555555555556
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9355555555555556
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9133333333333332
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8888888888888888
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9266666666666666
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8711111111111111
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9066666666666666
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8911111111111111
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8866666666666667
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8577777777777778
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9111111111111111
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9066666666666666
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 1, 3]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 1, 3]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.6261491636435191] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 7]]
** centroid: 9, normalized-entropy: 0.8812908992306927, [(2, 3), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 15 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.2329339698396131] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2329339698396131, 0.16004235216475152] ***
*** starting iteration: 2; err: [Inf, 0.2329339698396131, 0.16004235216475152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2329339698396131, 0.16004235216475152, 0.1507199244900934] ***
*** starting iteration: 3; err: [Inf, 0.2329339698396131, 0.16004235216475152, 0.1507199244900934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2329339698396131, 0.16004235216475152, 0.1507199244900934, 0.1487307728257019] ***
*** starting iteration: 4; err: [Inf, 0.2329339698396131, 0.16004235216475152, 0.1507199244900934, 0.1487307728257019] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2329339698396131, 0.16004235216475152, 0.1507199244900934, 0.1487307728257019, 0.14746024493860813] ***
*** starting iteration: 5; err: [Inf, 0.2329339698396131, 0.16004235216475152, 0.1507199244900934, 0.1487307728257019, 0.14746024493860813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2329339698396131, 0.16004235216475152, 0.1507199244900934, 0.1487307728257019, 0.14746024493860813, 0.14645759844187614] ***
*** starting iteration: 6; err: [Inf, 0.2329339698396131, 0.16004235216475152, 0.1507199244900934, 0.1487307728257019, 0.14746024493860813, 0.14645759844187614] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2329339698396131, 0.16004235216475152, 0.1507199244900934, 0.1487307728257019, 0.14746024493860813, 0.14645759844187614, 0.14597773876470477] ***
*** finished computation of 7 references, err: [Inf, 0.2329339698396131, 0.16004235216475152, 0.1507199244900934, 0.1487307728257019, 0.14746024493860813, 0.14645759844187614, 0.14597773876470477] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [74, 1, 0]]
** centroid: 1, normalized-entropy: 0.10215803640865054, [(1, 74), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [27, 90, 0]]
** centroid: 2, normalized-entropy: 0.7793498372920851, [(1, 27), (2, 90)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 71, 26]]
** centroid: 3, normalized-entropy: 0.8386398715015523, [(2, 71), (3, 26)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [6, 86, 0]]
** centroid: 4, normalized-entropy: 0.3478169135710632, [(1, 6), (2, 86)]
*** center 5: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [92, 15, 0]]
** centroid: 6, normalized-entropy: 0.5847281182574745, [(1, 92), (2, 15)]
*** center 7: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.40790776715980276] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40790776715980276, 0.30362180768800257] ***
*** starting iteration: 2; err: [Inf, 0.40790776715980276, 0.30362180768800257] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40790776715980276, 0.30362180768800257, 0.2966919333517395] ***
*** starting iteration: 3; err: [Inf, 0.40790776715980276, 0.30362180768800257, 0.2966919333517395] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40790776715980276, 0.30362180768800257, 0.2966919333517395, 0.2955892647046025] ***
*** starting iteration: 4; err: [Inf, 0.40790776715980276, 0.30362180768800257, 0.2966919333517395, 0.2955892647046025] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40790776715980276, 0.30362180768800257, 0.2966919333517395, 0.2955892647046025, 0.2953506604049567] ***
*** finished computation of 3 references, err: [Inf, 0.40790776715980276, 0.30362180768800257, 0.2966919333517395, 0.2955892647046025, 0.2953506604049567] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [70, 196, 26]]
** centroid: 1, normalized-entropy: 0.7512480530153249, [(1, 70), (2, 196), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [118, 67, 0]]
** centroid: 2, normalized-entropy: 0.9444633222170256, [(1, 118), (2, 67)]
*** center 3: selecting labels [1] (freq >= 1) [from [189, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3817754974295532] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3817754974295532, 0.3065658159850017] ***
*** starting iteration: 2; err: [Inf, 0.3817754974295532, 0.3065658159850017] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3817754974295532, 0.3065658159850017, 0.3014494767471885] ***
*** starting iteration: 3; err: [Inf, 0.3817754974295532, 0.3065658159850017, 0.3014494767471885] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3817754974295532, 0.3065658159850017, 0.3014494767471885, 0.30001162485299127] ***
*** starting iteration: 4; err: [Inf, 0.3817754974295532, 0.3065658159850017, 0.3014494767471885, 0.30001162485299127] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3817754974295532, 0.3065658159850017, 0.3014494767471885, 0.30001162485299127, 0.2998288720343513] ***
*** finished computation of 3 references, err: [Inf, 0.3817754974295532, 0.3065658159850017, 0.3014494767471885, 0.30001162485299127, 0.2998288720343513] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [223, 15, 0]]
** centroid: 1, normalized-entropy: 0.3393386178610706, [(1, 223), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [177, 56, 0]]
** centroid: 2, normalized-entropy: 0.7956107884314632, [(1, 177), (2, 56)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 162, 34]]
** centroid: 3, normalized-entropy: 0.665580063146735, [(2, 162), (3, 34)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37331658094629894] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37331658094629894, 0.3114647662079987] ***
*** starting iteration: 2; err: [Inf, 0.37331658094629894, 0.3114647662079987] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37331658094629894, 0.3114647662079987, 0.30156466638951424] ***
*** starting iteration: 3; err: [Inf, 0.37331658094629894, 0.3114647662079987, 0.30156466638951424] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37331658094629894, 0.3114647662079987, 0.30156466638951424, 0.2993090677911463] ***
*** starting iteration: 4; err: [Inf, 0.37331658094629894, 0.3114647662079987, 0.30156466638951424, 0.2993090677911463] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37331658094629894, 0.3114647662079987, 0.30156466638951424, 0.2993090677911463, 0.2988267656683788] ***
*** finished computation of 3 references, err: [Inf, 0.37331658094629894, 0.3114647662079987, 0.30156466638951424, 0.2993090677911463, 0.2988267656683788] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [230, 30, 0]]
** centroid: 1, normalized-entropy: 0.5159469300074472, [(1, 230), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [165, 45, 0]]
** centroid: 2, normalized-entropy: 0.7495952572594798, [(1, 165), (2, 45)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 171, 26]]
** centroid: 3, normalized-entropy: 0.5628426178464427, [(2, 171), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.24452427630431425] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24452427630431425, 0.17960923343388618] ***
*** starting iteration: 2; err: [Inf, 0.24452427630431425, 0.17960923343388618] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24452427630431425, 0.17960923343388618, 0.1602604095283002] ***
*** starting iteration: 3; err: [Inf, 0.24452427630431425, 0.17960923343388618, 0.1602604095283002] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24452427630431425, 0.17960923343388618, 0.1602604095283002, 0.15367028100005556] ***
*** starting iteration: 4; err: [Inf, 0.24452427630431425, 0.17960923343388618, 0.1602604095283002, 0.15367028100005556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24452427630431425, 0.17960923343388618, 0.1602604095283002, 0.15367028100005556, 0.15094412933208462] ***
*** starting iteration: 5; err: [Inf, 0.24452427630431425, 0.17960923343388618, 0.1602604095283002, 0.15367028100005556, 0.15094412933208462] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24452427630431425, 0.17960923343388618, 0.1602604095283002, 0.15367028100005556, 0.15094412933208462, 0.14953371810948832] ***
*** starting iteration: 6; err: [Inf, 0.24452427630431425, 0.17960923343388618, 0.1602604095283002, 0.15367028100005556, 0.15094412933208462, 0.14953371810948832] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24452427630431425, 0.17960923343388618, 0.1602604095283002, 0.15367028100005556, 0.15094412933208462, 0.14953371810948832, 0.14860570221941086] ***
*** finished computation of 7 references, err: [Inf, 0.24452427630431425, 0.17960923343388618, 0.1602604095283002, 0.15367028100005556, 0.15094412933208462, 0.14953371810948832, 0.14860570221941086] ***
*** center 1: selecting labels [1] (freq >= 1) [from [116, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 47, 34]]
** centroid: 3, normalized-entropy: 0.9813387358307915, [(2, 47), (3, 34)]
*** center 4: selecting labels [1] (freq >= 1) [from [128, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [9, 64, 0]]
** centroid: 5, normalized-entropy: 0.5387379148665815, [(1, 9), (2, 64)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [32, 57, 0]]
** centroid: 6, normalized-entropy: 0.9423094893103273, [(1, 32), (2, 57)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 65, 0]]
** centroid: 7, normalized-entropy: 0.11327430349709665, [(1, 1), (2, 65)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22440573657308516] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22440573657308516, 0.1822940840007461] ***
*** starting iteration: 2; err: [Inf, 0.22440573657308516, 0.1822940840007461] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22440573657308516, 0.1822940840007461, 0.17008455481514267] ***
*** starting iteration: 3; err: [Inf, 0.22440573657308516, 0.1822940840007461, 0.17008455481514267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22440573657308516, 0.1822940840007461, 0.17008455481514267, 0.1624741901530475] ***
*** starting iteration: 4; err: [Inf, 0.22440573657308516, 0.1822940840007461, 0.17008455481514267, 0.1624741901530475] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22440573657308516, 0.1822940840007461, 0.17008455481514267, 0.1624741901530475, 0.15762248317357794] ***
*** starting iteration: 5; err: [Inf, 0.22440573657308516, 0.1822940840007461, 0.17008455481514267, 0.1624741901530475, 0.15762248317357794] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22440573657308516, 0.1822940840007461, 0.17008455481514267, 0.1624741901530475, 0.15762248317357794, 0.15478263059672878] ***
*** starting iteration: 6; err: [Inf, 0.22440573657308516, 0.1822940840007461, 0.17008455481514267, 0.1624741901530475, 0.15762248317357794, 0.15478263059672878] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22440573657308516, 0.1822940840007461, 0.17008455481514267, 0.1624741901530475, 0.15762248317357794, 0.15478263059672878, 0.1526022706162659] ***
*** starting iteration: 7; err: [Inf, 0.22440573657308516, 0.1822940840007461, 0.17008455481514267, 0.1624741901530475, 0.15762248317357794, 0.15478263059672878, 0.1526022706162659] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22440573657308516, 0.1822940840007461, 0.17008455481514267, 0.1624741901530475, 0.15762248317357794, 0.15478263059672878, 0.1526022706162659, 0.15067007512585825] ***
*** starting iteration: 8; err: [Inf, 0.22440573657308516, 0.1822940840007461, 0.17008455481514267, 0.1624741901530475, 0.15762248317357794, 0.15478263059672878, 0.1526022706162659, 0.15067007512585825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22440573657308516, 0.1822940840007461, 0.17008455481514267, 0.1624741901530475, 0.15762248317357794, 0.15478263059672878, 0.1526022706162659, 0.15067007512585825, 0.14925377656226751] ***
*** starting iteration: 9; err: [Inf, 0.22440573657308516, 0.1822940840007461, 0.17008455481514267, 0.1624741901530475, 0.15762248317357794, 0.15478263059672878, 0.1526022706162659, 0.15067007512585825, 0.14925377656226751] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22440573657308516, 0.1822940840007461, 0.17008455481514267, 0.1624741901530475, 0.15762248317357794, 0.15478263059672878, 0.1526022706162659, 0.15067007512585825, 0.14925377656226751, 0.1479200113346909] ***
*** starting iteration: 10; err: [Inf, 0.22440573657308516, 0.1822940840007461, 0.17008455481514267, 0.1624741901530475, 0.15762248317357794, 0.15478263059672878, 0.1526022706162659, 0.15067007512585825, 0.14925377656226751, 0.1479200113346909] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22440573657308516, 0.1822940840007461, 0.17008455481514267, 0.1624741901530475, 0.15762248317357794, 0.15478263059672878, 0.1526022706162659, 0.15067007512585825, 0.14925377656226751, 0.1479200113346909, 0.14736282216724306] ***
*** finished computation of 7 references, err: [Inf, 0.22440573657308516, 0.1822940840007461, 0.17008455481514267, 0.1624741901530475, 0.15762248317357794, 0.15478263059672878, 0.1526022706162659, 0.15067007512585825, 0.14925377656226751, 0.1479200113346909, 0.14736282216724306] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [63, 39, 0]]
** centroid: 1, normalized-entropy: 0.9596868937742168, [(1, 63), (2, 39)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 98, 26]]
** centroid: 2, normalized-entropy: 0.7408656862339816, [(2, 98), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [81, 2, 0]]
** centroid: 3, normalized-entropy: 0.1638605128691586, [(1, 81), (2, 2)]
*** center 4: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [90, 18, 0]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(1, 90), (2, 18)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 89, 0]]
** centroid: 6, normalized-entropy: 0.442571064839798, [(1, 9), (2, 89)]
*** center 7: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3882624717490809] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3882624717490809, 0.2517938425082031] ***
*** starting iteration: 2; err: [Inf, 0.3882624717490809, 0.2517938425082031] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3882624717490809, 0.2517938425082031, 0.24373483296774617] ***
*** starting iteration: 3; err: [Inf, 0.3882624717490809, 0.2517938425082031, 0.24373483296774617] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3882624717490809, 0.2517938425082031, 0.24373483296774617, 0.24189418801819687] ***
*** finished computation of 3 references, err: [Inf, 0.3882624717490809, 0.2517938425082031, 0.24373483296774617, 0.24189418801819687] ***
*** center 1: selecting labels [1] (freq >= 2) [from [185, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [114, 94, 0]]
** centroid: 2, normalized-entropy: 0.993320421638792, [(1, 114), (2, 94)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [78, 169, 26]]
** centroid: 3, normalized-entropy: 0.7998739500319954, [(1, 78), (2, 169), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34757808079549307] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34757808079549307, 0.2674179727524363] ***
*** starting iteration: 2; err: [Inf, 0.34757808079549307, 0.2674179727524363] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34757808079549307, 0.2674179727524363, 0.24285278544165026] ***
*** starting iteration: 3; err: [Inf, 0.34757808079549307, 0.2674179727524363, 0.24285278544165026] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34757808079549307, 0.2674179727524363, 0.24285278544165026, 0.23847641776325643] ***
*** finished computation of 3 references, err: [Inf, 0.34757808079549307, 0.2674179727524363, 0.24285278544165026, 0.23847641776325643] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [260, 15, 0]]
** centroid: 1, normalized-entropy: 0.30540057087920036, [(1, 260), (2, 15)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [2, 167, 34]]
** centroid: 2, normalized-entropy: 0.4600218787341908, [(1, 2), (2, 167), (3, 34)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [138, 51, 0]]
** centroid: 3, normalized-entropy: 0.8412367762002599, [(1, 138), (2, 51)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2872283202630916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2872283202630916, 0.24421004074551667] ***
*** starting iteration: 2; err: [Inf, 0.2872283202630916, 0.24421004074551667] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2872283202630916, 0.24421004074551667, 0.23873460544147593] ***
*** starting iteration: 3; err: [Inf, 0.2872283202630916, 0.24421004074551667, 0.23873460544147593] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2872283202630916, 0.24421004074551667, 0.23873460544147593, 0.2371273082562316] ***
*** finished computation of 3 references, err: [Inf, 0.2872283202630916, 0.24421004074551667, 0.23873460544147593, 0.2371273082562316] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [226, 36, 0]]
** centroid: 1, normalized-entropy: 0.577401071927696, [(1, 226), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [169, 47, 0]]
** centroid: 2, normalized-entropy: 0.7557472208646812, [(1, 169), (2, 47)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 163, 26]]
** centroid: 3, normalized-entropy: 0.5778290813039613, [(2, 163), (3, 26)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2855906560632481] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2855906560632481, 0.21709623173796558] ***
*** starting iteration: 2; err: [Inf, 0.2855906560632481, 0.21709623173796558] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2855906560632481, 0.21709623173796558, 0.20254288925775313] ***
*** starting iteration: 3; err: [Inf, 0.2855906560632481, 0.21709623173796558, 0.20254288925775313] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2855906560632481, 0.21709623173796558, 0.20254288925775313, 0.19749758714759671] ***
*** finished computation of 7 references, err: [Inf, 0.2855906560632481, 0.21709623173796558, 0.20254288925775313, 0.19749758714759671] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [69, 47, 0]]
** centroid: 1, normalized-entropy: 0.9738959645539289, [(1, 69), (2, 47)]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 143, 26]]
** centroid: 3, normalized-entropy: 0.6193821946787638, [(2, 143), (3, 26)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [32, 60, 0]]
** centroid: 4, normalized-entropy: 0.9321115676166747, [(1, 32), (2, 60)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [79, 13, 0]]
** centroid: 5, normalized-entropy: 0.5876446142980418, [(1, 79), (2, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30422272206238027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30422272206238027, 0.23226628433480143] ***
*** starting iteration: 2; err: [Inf, 0.30422272206238027, 0.23226628433480143] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30422272206238027, 0.23226628433480143, 0.2112926171779789] ***
*** starting iteration: 3; err: [Inf, 0.30422272206238027, 0.23226628433480143, 0.2112926171779789] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30422272206238027, 0.23226628433480143, 0.2112926171779789, 0.19378616144905786] ***
*** finished computation of 7 references, err: [Inf, 0.30422272206238027, 0.23226628433480143, 0.2112926171779789, 0.19378616144905786] ***
*** center 1: selecting labels [1] (freq >= 2) [from [131, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [122, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 49, 0]]
** centroid: 3, normalized-entropy: 0.9999233329473267, [(1, 48), (2, 49)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [6, 78, 0]]
** centroid: 4, normalized-entropy: 0.3712323266408756, [(1, 6), (2, 78)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 69, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [93, 6, 0]]
** centroid: 6, normalized-entropy: 0.32984607020714635, [(1, 93), (2, 6)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 31, 34]]
** centroid: 7, normalized-entropy: 0.9984628557283827, [(2, 31), (3, 34)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2729688771243586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2729688771243586, 0.20248124419014785] ***
*** starting iteration: 2; err: [Inf, 0.2729688771243586, 0.20248124419014785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2729688771243586, 0.20248124419014785, 0.19197728781160833] ***
*** starting iteration: 3; err: [Inf, 0.2729688771243586, 0.20248124419014785, 0.19197728781160833] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2729688771243586, 0.20248124419014785, 0.19197728781160833, 0.18990530411543874] ***
*** finished computation of 7 references, err: [Inf, 0.2729688771243586, 0.20248124419014785, 0.19197728781160833, 0.18990530411543874] ***
*** center 1: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [12, 70, 0]]
** centroid: 4, normalized-entropy: 0.6006085754131871, [(1, 12), (2, 70)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [47, 59, 0]]
** centroid: 5, normalized-entropy: 0.9907353985141654, [(1, 47), (2, 59)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [51, 45, 0]]
** centroid: 6, normalized-entropy: 0.9971803988942641, [(1, 51), (2, 45)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 72, 26]]
** centroid: 7, normalized-entropy: 0.834648285181383, [(2, 72), (3, 26)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3561865985785071] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3561865985785071, 0.30762284717525357] ***
*** starting iteration: 2; err: [Inf, 0.3561865985785071, 0.30762284717525357] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3561865985785071, 0.30762284717525357, 0.29079212931994425] ***
*** starting iteration: 3; err: [Inf, 0.3561865985785071, 0.30762284717525357, 0.29079212931994425] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3561865985785071, 0.30762284717525357, 0.29079212931994425, 0.2676366931358884] ***
*** finished computation of 3 references, err: [Inf, 0.3561865985785071, 0.30762284717525357, 0.29079212931994425, 0.2676366931358884] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [134, 197, 26]]
** centroid: 1, normalized-entropy: 0.8070774967962544, [(1, 134), (2, 197), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [62, 57, 0]]
** centroid: 2, normalized-entropy: 0.9987261494308297, [(1, 62), (2, 57)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [181, 9, 0]]
** centroid: 3, normalized-entropy: 0.2751112368833637, [(1, 181), (2, 9)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30437787500876134] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30437787500876134, 0.2381920922265529] ***
*** starting iteration: 2; err: [Inf, 0.30437787500876134, 0.2381920922265529] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30437787500876134, 0.2381920922265529, 0.23765267549442878] ***
*** finished computation of 3 references, err: [Inf, 0.30437787500876134, 0.2381920922265529, 0.23765267549442878] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [253, 1, 0]]
** centroid: 1, normalized-entropy: 0.03712022063964432, [(1, 253), (2, 1)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [4, 181, 34]]
** centroid: 2, normalized-entropy: 0.4731469672380279, [(1, 4), (2, 181), (3, 34)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [143, 51, 0]]
** centroid: 3, normalized-entropy: 0.8310711226002413, [(1, 143), (2, 51)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34263216036984856] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34263216036984856, 0.24494738361310922] ***
*** starting iteration: 2; err: [Inf, 0.34263216036984856, 0.24494738361310922] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34263216036984856, 0.24494738361310922, 0.24455529287725553] ***
*** finished computation of 3 references, err: [Inf, 0.34263216036984856, 0.24494738361310922, 0.24455529287725553] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [101, 131, 18]]
** centroid: 1, normalized-entropy: 0.8139742057833476, [(1, 101), (2, 131), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [189, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [105, 115, 8]]
** centroid: 3, normalized-entropy: 0.7462454156057837, [(1, 105), (2, 115), (3, 8)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4797842525527463] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4797842525527463, 0.3054913176746631] ***
*** starting iteration: 2; err: [Inf, 0.4797842525527463, 0.3054913176746631] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4797842525527463, 0.3054913176746631, 0.30407279144200655] ***
*** starting iteration: 3; err: [Inf, 0.4797842525527463, 0.3054913176746631, 0.30407279144200655] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4797842525527463, 0.3054913176746631, 0.30407279144200655, 0.3039070019056579] ***
*** finished computation of 3 references, err: [Inf, 0.4797842525527463, 0.3054913176746631, 0.30407279144200655, 0.3039070019056579] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [97, 153, 26]]
** centroid: 1, normalized-entropy: 0.8347690565275969, [(1, 97), (2, 153), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [88, 110, 0]]
** centroid: 2, normalized-entropy: 0.9910760598382222, [(1, 88), (2, 110)]
*** center 3: selecting labels [1] (freq >= 1) [from [192, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.41877902427344754] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41877902427344754, 0.30281509855284594] ***
*** starting iteration: 2; err: [Inf, 0.41877902427344754, 0.30281509855284594] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41877902427344754, 0.30281509855284594, 0.30119939824856673] ***
*** starting iteration: 3; err: [Inf, 0.41877902427344754, 0.30281509855284594, 0.30119939824856673] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41877902427344754, 0.30281509855284594, 0.30119939824856673, 0.3011094727239263] ***
*** finished computation of 3 references, err: [Inf, 0.41877902427344754, 0.30281509855284594, 0.30119939824856673, 0.3011094727239263] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [252, 26, 0]]
** centroid: 1, normalized-entropy: 0.44812821878952425, [(1, 252), (2, 26)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 156, 34]]
** centroid: 2, normalized-entropy: 0.6777688570413568, [(2, 156), (3, 34)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [148, 51, 0]]
** centroid: 3, normalized-entropy: 0.8210829594701269, [(1, 148), (2, 51)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4657431205823973] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4657431205823973, 0.30432214184121037] ***
*** starting iteration: 2; err: [Inf, 0.4657431205823973, 0.30432214184121037] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4657431205823973, 0.30432214184121037, 0.3004711998872336] ***
*** starting iteration: 3; err: [Inf, 0.4657431205823973, 0.30432214184121037, 0.3004711998872336] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4657431205823973, 0.30432214184121037, 0.3004711998872336, 0.30004507729523944] ***
*** finished computation of 3 references, err: [Inf, 0.4657431205823973, 0.30432214184121037, 0.3004711998872336, 0.30004507729523944] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [65, 169, 26]]
** centroid: 1, normalized-entropy: 0.7799302846668992, [(1, 65), (2, 169), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [196, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [134, 77, 0]]
** centroid: 3, normalized-entropy: 0.9466986429496074, [(1, 134), (2, 77)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3137419383166017] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3137419383166017, 0.23883631076893067] ***
*** starting iteration: 2; err: [Inf, 0.3137419383166017, 0.23883631076893067] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3137419383166017, 0.23883631076893067, 0.23367741938985256] ***
*** starting iteration: 3; err: [Inf, 0.3137419383166017, 0.23883631076893067, 0.23367741938985256] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3137419383166017, 0.23883631076893067, 0.23367741938985256, 0.23299288244738997] ***
*** finished computation of 3 references, err: [Inf, 0.3137419383166017, 0.23883631076893067, 0.23367741938985256, 0.23299288244738997] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [58, 203, 26]]
** centroid: 1, normalized-entropy: 0.7151067005927131, [(1, 58), (2, 203), (3, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [198, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [121, 60, 0]]
** centroid: 3, normalized-entropy: 0.91644319400731, [(1, 121), (2, 60)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3388045111969895] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3388045111969895, 0.24155119071662917] ***
*** starting iteration: 2; err: [Inf, 0.3388045111969895, 0.24155119071662917] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3388045111969895, 0.24155119071662917, 0.23907430912053834] ***
*** starting iteration: 3; err: [Inf, 0.3388045111969895, 0.24155119071662917, 0.23907430912053834] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3388045111969895, 0.24155119071662917, 0.23907430912053834, 0.23830316938889928] ***
*** finished computation of 3 references, err: [Inf, 0.3388045111969895, 0.24155119071662917, 0.23907430912053834, 0.23830316938889928] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [223, 31, 0]]
** centroid: 1, normalized-entropy: 0.5352171147083034, [(1, 223), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [177, 59, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 177), (2, 59)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 143, 34]]
** centroid: 3, normalized-entropy: 0.7058239808071712, [(2, 143), (3, 34)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3406899898205472] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3406899898205472, 0.24184359048756407] ***
*** starting iteration: 2; err: [Inf, 0.3406899898205472, 0.24184359048756407] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3406899898205472, 0.24184359048756407, 0.23647703161404499] ***
*** starting iteration: 3; err: [Inf, 0.3406899898205472, 0.24184359048756407, 0.23647703161404499] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3406899898205472, 0.24184359048756407, 0.23647703161404499, 0.23520485343581912] ***
*** finished computation of 3 references, err: [Inf, 0.3406899898205472, 0.24184359048756407, 0.23647703161404499, 0.23520485343581912] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [222, 21, 0]]
** centroid: 1, normalized-entropy: 0.42440514472480345, [(1, 222), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [173, 52, 0]]
** centroid: 2, normalized-entropy: 0.7799431968859699, [(1, 173), (2, 52)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 173, 26]]
** centroid: 3, normalized-entropy: 0.559227052439017, [(2, 173), (3, 26)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18947436038667598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18947436038667598, 0.15760327179219807] ***
*** starting iteration: 2; err: [Inf, 0.18947436038667598, 0.15760327179219807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18947436038667598, 0.15760327179219807, 0.1538516924836793] ***
*** starting iteration: 3; err: [Inf, 0.18947436038667598, 0.15760327179219807, 0.1538516924836793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18947436038667598, 0.15760327179219807, 0.1538516924836793, 0.15265739909387208] ***
*** starting iteration: 4; err: [Inf, 0.18947436038667598, 0.15760327179219807, 0.1538516924836793, 0.15265739909387208] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18947436038667598, 0.15760327179219807, 0.1538516924836793, 0.15265739909387208, 0.15203452140635423] ***
*** finished computation of 7 references, err: [Inf, 0.18947436038667598, 0.15760327179219807, 0.1538516924836793, 0.15265739909387208, 0.15203452140635423] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 111, 26]]
** centroid: 1, normalized-entropy: 0.701013149847168, [(2, 111), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [73, 6, 0]]
** centroid: 3, normalized-entropy: 0.3877431810559867, [(1, 73), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [70, 39, 0]]
** centroid: 4, normalized-entropy: 0.9408403089808224, [(1, 70), (2, 39)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [74, 4, 0]]
** centroid: 5, normalized-entropy: 0.29181825659888555, [(1, 74), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [88, 1, 0]]
** centroid: 6, normalized-entropy: 0.08887969568457589, [(1, 88), (2, 1)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 102, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1914641430065304] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1914641430065304, 0.15329471956016957] ***
*** starting iteration: 2; err: [Inf, 0.1914641430065304, 0.15329471956016957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1914641430065304, 0.15329471956016957, 0.1496167107369343] ***
*** starting iteration: 3; err: [Inf, 0.1914641430065304, 0.15329471956016957, 0.1496167107369343] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1914641430065304, 0.15329471956016957, 0.1496167107369343, 0.1488468164363052] ***
*** finished computation of 7 references, err: [Inf, 0.1914641430065304, 0.15329471956016957, 0.1496167107369343, 0.1488468164363052] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [51, 80, 0]]
** centroid: 1, normalized-entropy: 0.964354757021914, [(1, 51), (2, 80)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 5, 0]]
** centroid: 2, normalized-entropy: 0.378958787501346, [(1, 63), (2, 5)]
*** center 3: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 56, 34]]
** centroid: 4, normalized-entropy: 0.9564574047992596, [(2, 56), (3, 34)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [89, 1, 0]]
** centroid: 5, normalized-entropy: 0.08807225904068142, [(1, 89), (2, 1)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 91, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19926899394112593] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19926899394112593, 0.15081304458501948] ***
*** starting iteration: 2; err: [Inf, 0.19926899394112593, 0.15081304458501948] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19926899394112593, 0.15081304458501948, 0.1475715746647906] ***
*** starting iteration: 3; err: [Inf, 0.19926899394112593, 0.15081304458501948, 0.1475715746647906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19926899394112593, 0.15081304458501948, 0.1475715746647906, 0.14736184693252977] ***
*** finished computation of 7 references, err: [Inf, 0.19926899394112593, 0.15081304458501948, 0.1475715746647906, 0.14736184693252977] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [66, 41, 0]]
** centroid: 1, normalized-entropy: 0.9602553596067602, [(1, 66), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [68, 5, 0]]
** centroid: 2, normalized-entropy: 0.3602750564216625, [(1, 68), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 75, 26]]
** centroid: 3, normalized-entropy: 0.8228368841492258, [(2, 75), (3, 26)]
*** center 4: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [78, 29, 0]]
** centroid: 5, normalized-entropy: 0.8429359403268015, [(1, 78), (2, 29)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [7, 96, 0]]
** centroid: 6, normalized-entropy: 0.35826863860424546, [(1, 7), (2, 96)]
*** center 7: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
finished with 12 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 10)
[0.9430058801316287, 0.9389928851006696, 0.9060347772922622, 0.9059658460856066, 0.9009788231345118, 0.882987778197359, 0.8589397781014547, 0.8329976683270096, 0.8290536045027063, 0.7930055804307301]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9430058801316287
finished with 11
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.19738223111220599] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19738223111220599, 0.15312279936614204] ***
*** starting iteration: 2; err: [Inf, 0.19738223111220599, 0.15312279936614204] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19738223111220599, 0.15312279936614204, 0.15181761941181737] ***
*** starting iteration: 3; err: [Inf, 0.19738223111220599, 0.15312279936614204, 0.15181761941181737] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19738223111220599, 0.15312279936614204, 0.15181761941181737, 0.15144660146473474] ***
*** finished computation of 7 references, err: [Inf, 0.19738223111220599, 0.15312279936614204, 0.15181761941181737, 0.15144660146473474] ***
*** center 1: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 45, 26]]
** centroid: 2, normalized-entropy: 0.9477073729342067, [(2, 45), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [92, 19, 0]]
** centroid: 3, normalized-entropy: 0.6603769229926888, [(1, 92), (2, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [28, 59, 0]]
** centroid: 4, normalized-entropy: 0.9063701886077911, [(1, 28), (2, 59)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 92, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [91, 1, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [55, 47, 0]]
** centroid: 7, normalized-entropy: 0.995558084395954, [(1, 55), (2, 47)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19778662932564742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19778662932564742, 0.15801427360048806] ***
*** starting iteration: 2; err: [Inf, 0.19778662932564742, 0.15801427360048806] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19778662932564742, 0.15801427360048806, 0.1550004607125156] ***
*** starting iteration: 3; err: [Inf, 0.19778662932564742, 0.15801427360048806, 0.1550004607125156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19778662932564742, 0.15801427360048806, 0.1550004607125156, 0.15258401389355244] ***
*** finished computation of 7 references, err: [Inf, 0.19778662932564742, 0.15801427360048806, 0.1550004607125156, 0.15258401389355244] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [107, 41, 0]]
** centroid: 1, normalized-entropy: 0.8513682322893271, [(1, 107), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 8, 0]]
** centroid: 2, normalized-entropy: 0.5032583347756457, [(1, 64), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 54, 34]]
** centroid: 5, normalized-entropy: 0.9624127354629922, [(2, 54), (3, 34)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [47, 41, 0]]
** centroid: 6, normalized-entropy: 0.99664402524877, [(1, 47), (2, 41)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 89, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25807977156997053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25807977156997053, 0.16751333609407676] ***
*** starting iteration: 2; err: [Inf, 0.25807977156997053, 0.16751333609407676] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25807977156997053, 0.16751333609407676, 0.15760970478346836] ***
*** starting iteration: 3; err: [Inf, 0.25807977156997053, 0.16751333609407676, 0.15760970478346836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25807977156997053, 0.16751333609407676, 0.15760970478346836, 0.1550819042503186] ***
*** finished computation of 7 references, err: [Inf, 0.25807977156997053, 0.16751333609407676, 0.15760970478346836, 0.1550819042503186] ***
*** center 1: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [112, 37, 0]]
** centroid: 2, normalized-entropy: 0.8086079446318072, [(1, 112), (2, 37)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [3, 104, 0]]
** centroid: 3, normalized-entropy: 0.18445186314098744, [(1, 3), (2, 104)]
*** center 4: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [75, 38, 0]]
** centroid: 5, normalized-entropy: 0.9212174819014947, [(1, 75), (2, 38)]
*** center 6: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 67, 26]]
** centroid: 7, normalized-entropy: 0.8548640967818041, [(2, 67), (3, 26)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 11)
[0.9469919020817223, 0.9430058801316287, 0.9389928851006696, 0.9060347772922622, 0.9059658460856066, 0.9009788231345118, 0.882987778197359, 0.8589397781014547, 0.8329976683270096, 0.8290536045027063, 0.7930055804307301]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9469919020817223
finished with 11
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 11)
[0.9469919020817223, 0.9430058801316287, 0.9389928851006696, 0.9060347772922622, 0.9059658460856066, 0.9009788231345118, 0.882987778197359, 0.8589397781014547, 0.8329976683270096, 0.8290536045027063, 0.7930055804307301]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9469919020817223
finished with 11
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 11)
[0.9469919020817223, 0.9430058801316287, 0.9389928851006696, 0.9060347772922622, 0.9059658460856066, 0.9009788231345118, 0.882987778197359, 0.8589397781014547, 0.8329976683270096, 0.8290536045027063, 0.7930055804307301]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9469919020817223
finished with 12
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.33098662077021357] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33098662077021357, 0.24557176061735317] ***
*** starting iteration: 2; err: [Inf, 0.33098662077021357, 0.24557176061735317] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33098662077021357, 0.24557176061735317, 0.24181583539272347] ***
*** starting iteration: 3; err: [Inf, 0.33098662077021357, 0.24557176061735317, 0.24181583539272347] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33098662077021357, 0.24557176061735317, 0.24181583539272347, 0.2411071097662857] ***
*** finished computation of 3 references, err: [Inf, 0.33098662077021357, 0.24557176061735317, 0.24181583539272347, 0.2411071097662857] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [85, 159, 26]]
** centroid: 1, normalized-entropy: 0.8201669893707435, [(1, 85), (2, 159), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [109, 104, 0]]
** centroid: 2, normalized-entropy: 0.9996024742757982, [(1, 109), (2, 104)]
*** center 3: selecting labels [1] (freq >= 1) [from [183, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33337557016602387] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33337557016602387, 0.24497168738886468] ***
*** starting iteration: 2; err: [Inf, 0.33337557016602387, 0.24497168738886468] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33337557016602387, 0.24497168738886468, 0.24164064268887356] ***
*** starting iteration: 3; err: [Inf, 0.33337557016602387, 0.24497168738886468, 0.24164064268887356] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33337557016602387, 0.24497168738886468, 0.24164064268887356, 0.2406698932952905] ***
*** finished computation of 3 references, err: [Inf, 0.33337557016602387, 0.24497168738886468, 0.24164064268887356, 0.2406698932952905] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [74, 167, 34]]
** centroid: 1, normalized-entropy: 0.8324882814600302, [(1, 74), (2, 167), (3, 34)]
*** center 2: selecting labels [1] (freq >= 1) [from [201, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [125, 66, 0]]
** centroid: 3, normalized-entropy: 0.9300306737927182, [(1, 125), (2, 66)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3276746865764059] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3276746865764059, 0.24407676108617118] ***
*** starting iteration: 2; err: [Inf, 0.3276746865764059, 0.24407676108617118] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3276746865764059, 0.24407676108617118, 0.23751622068484884] ***
*** starting iteration: 3; err: [Inf, 0.3276746865764059, 0.24407676108617118, 0.23751622068484884] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3276746865764059, 0.24407676108617118, 0.23751622068484884, 0.23659148821230236] ***
*** finished computation of 3 references, err: [Inf, 0.3276746865764059, 0.24407676108617118, 0.23751622068484884, 0.23659148821230236] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [223, 46, 0]]
** centroid: 1, normalized-entropy: 0.659995716977254, [(1, 223), (2, 46)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [172, 38, 0]]
** centroid: 2, normalized-entropy: 0.6821560732869936, [(1, 172), (2, 38)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 162, 26]]
** centroid: 3, normalized-entropy: 0.57976367540648, [(2, 162), (3, 26)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 12)
[0.9469919020817223, 0.9430058801316287, 0.9389928851006696, 0.9060347772922622, 0.9059658460856066, 0.9009788231345118, 0.882987778197359, 0.8589397781014547, 0.8329976683270096, 0.831031630432828, 0.8290536045027063, 0.7930055804307301]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9469919020817223
finished with 12
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9469919020817223, 0.9430058801316287, 0.9389928851006696, 0.9060347772922622, 0.9059658460856066, 0.9009788231345118, 0.882987778197359, 0.8589397781014547, 0.8329976683270096, 0.831031630432828, 0.8290536045027063, 0.7930055804307301]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9469919020817223
finished with 12
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9469919020817223, 0.9430058801316287, 0.9389928851006696, 0.9060347772922622, 0.9059658460856066, 0.9009788231345118, 0.882987778197359, 0.8589397781014547, 0.8329976683270096, 0.831031630432828, 0.8290536045027063, 0.7930055804307301]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9469919020817223
finished with 14
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.31742186931048605] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31742186931048605, 0.24819555219721506] ***
*** finished computation of 3 references, err: [Inf, 0.31742186931048605, 0.24819555219721506] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [125, 96, 0]]
** centroid: 1, normalized-entropy: 0.987543122052102, [(1, 125), (2, 96)]
*** center 2: selecting labels [1] (freq >= 1) [from [182, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [70, 167, 26]]
** centroid: 3, normalized-entropy: 0.791411014918677, [(1, 70), (2, 167), (3, 26)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4020285219026693] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4020285219026693, 0.2821976798687778] ***
*** finished computation of 3 references, err: [Inf, 0.4020285219026693, 0.2821976798687778] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [72, 173, 34]]
** centroid: 1, normalized-entropy: 0.8214090877517564, [(1, 72), (2, 173), (3, 34)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [196, 44, 0]]
** centroid: 2, normalized-entropy: 0.6873150928309273, [(1, 196), (2, 44)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [132, 16, 0]]
** centroid: 3, normalized-entropy: 0.4941829348497886, [(1, 132), (2, 16)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.41792079822245476] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41792079822245476, 0.26080500398171896] ***
*** finished computation of 3 references, err: [Inf, 0.41792079822245476, 0.26080500398171896] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [183, 52, 0]]
** centroid: 1, normalized-entropy: 0.7624916880572697, [(1, 183), (2, 52)]
*** center 2: selecting labels [1] (freq >= 1) [from [198, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [14, 194, 26]]
** centroid: 3, normalized-entropy: 0.5170600138372732, [(1, 14), (2, 194), (3, 26)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4019275252587042] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4019275252587042, 0.32267801545549174] ***
*** finished computation of 3 references, err: [Inf, 0.4019275252587042, 0.32267801545549174] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [116, 102, 0]]
** centroid: 1, normalized-entropy: 0.9970229471810967, [(1, 116), (2, 102)]
*** center 2: selecting labels [1] (freq >= 1) [from [168, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [93, 161, 26]]
** centroid: 3, normalized-entropy: 0.823742844517702, [(1, 93), (2, 161), (3, 26)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.42421484010285704] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42421484010285704, 0.3400259631311708] ***
*** finished computation of 3 references, err: [Inf, 0.42421484010285704, 0.3400259631311708] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [124, 145, 19]]
** centroid: 1, normalized-entropy: 0.8079857676093082, [(1, 124), (2, 145), (3, 19)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [59, 69, 15]]
** centroid: 2, normalized-entropy: 0.8678333522842895, [(1, 59), (2, 69), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [217, 19, 0]]
** centroid: 3, normalized-entropy: 0.4039683027691288, [(1, 217), (2, 19)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4893026786829824] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4893026786829824, 0.3376375052804264] ***
*** finished computation of 3 references, err: [Inf, 0.4893026786829824, 0.3376375052804264] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [155, 105, 0]]
** centroid: 1, normalized-entropy: 0.9731560354421095, [(1, 155), (2, 105)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [186, 12, 0]]
** centroid: 2, normalized-entropy: 0.32984607020714635, [(1, 186), (2, 12)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [54, 129, 26]]
** centroid: 3, normalized-entropy: 0.8253840692196528, [(1, 54), (2, 129), (3, 26)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9469919020817223, 0.9430058801316287, 0.9389928851006696, 0.9060347772922622, 0.9059658460856066, 0.9009788231345118, 0.882987778197359, 0.8589397781014547, 0.8329976683270096, 0.831031630432828, 0.8290536045027063, 0.8199966433499367, 0.7930055804307301, 0.7870025714337091]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9469919020817223
finished with 14
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.27116071740956976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27116071740956976, 0.20809048455487936] ***
*** starting iteration: 2; err: [Inf, 0.27116071740956976, 0.20809048455487936] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27116071740956976, 0.20809048455487936, 0.18661973543837668] ***
*** starting iteration: 3; err: [Inf, 0.27116071740956976, 0.20809048455487936, 0.18661973543837668] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27116071740956976, 0.20809048455487936, 0.18661973543837668, 0.17514229134563356] ***
*** finished computation of 7 references, err: [Inf, 0.27116071740956976, 0.20809048455487936, 0.18661973543837668, 0.17514229134563356] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [84, 59, 0]]
** centroid: 1, normalized-entropy: 0.9778391449898266, [(1, 84), (2, 59)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 154, 43]]
** centroid: 2, normalized-entropy: 0.7570035366177722, [(2, 154), (3, 43)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [40, 31, 0]]
** centroid: 3, normalized-entropy: 0.9883779727795042, [(1, 40), (2, 31)]
*** center 4: selecting labels [1] (freq >= 2) [from [176, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [216, 26, 0]]
** centroid: 5, normalized-entropy: 0.4921395466176624, [(1, 216), (2, 26)]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 101, 0]]
** centroid: 7, normalized-entropy: 0.34626857427148255, [(1, 7), (2, 101)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20204704996384681] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20204704996384681, 0.1494836885575205] ***
*** starting iteration: 2; err: [Inf, 0.20204704996384681, 0.1494836885575205] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20204704996384681, 0.1494836885575205, 0.14726517293974759] ***
*** starting iteration: 3; err: [Inf, 0.20204704996384681, 0.1494836885575205, 0.14726517293974759] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20204704996384681, 0.1494836885575205, 0.14726517293974759, 0.14677634564787148] ***
*** finished computation of 7 references, err: [Inf, 0.20204704996384681, 0.1494836885575205, 0.14726517293974759, 0.14677634564787148] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 57, 0]]
** centroid: 1, normalized-entropy: 0.45371633918694493, [(1, 6), (2, 57)]
*** center 2: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [82, 3, 0]]
** centroid: 3, normalized-entropy: 0.22028326695127437, [(1, 82), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [12, 62, 0]]
** centroid: 4, normalized-entropy: 0.6394571324851642, [(1, 12), (2, 62)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 46, 26]]
** centroid: 5, normalized-entropy: 0.943601631299382, [(2, 46), (3, 26)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [65, 4, 0]]
** centroid: 7, normalized-entropy: 0.3193373865339728, [(1, 65), (2, 4)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.215767195712775] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.215767195712775, 0.19526913002319635] ***
*** starting iteration: 2; err: [Inf, 0.215767195712775, 0.19526913002319635] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.215767195712775, 0.19526913002319635, 0.18394785791821777] ***
*** starting iteration: 3; err: [Inf, 0.215767195712775, 0.19526913002319635, 0.18394785791821777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.215767195712775, 0.19526913002319635, 0.18394785791821777, 0.16870726148504764] ***
*** finished computation of 7 references, err: [Inf, 0.215767195712775, 0.19526913002319635, 0.18394785791821777, 0.16870726148504764] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 28, 25]]
** centroid: 1, normalized-entropy: 0.9976875760352552, [(2, 28), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [32, 28, 0]]
** centroid: 2, normalized-entropy: 0.9967916319816367, [(1, 32), (2, 28)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 52, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [124, 3, 0]]
** centroid: 4, normalized-entropy: 0.16132067110180368, [(1, 124), (2, 3)]
*** center 5: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [43, 7, 0]]
** centroid: 6, normalized-entropy: 0.5842388116428561, [(1, 43), (2, 7)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 71, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3242708203019574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3242708203019574, 0.20857292419858278] ***
*** starting iteration: 2; err: [Inf, 0.3242708203019574, 0.20857292419858278] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3242708203019574, 0.20857292419858278, 0.18202485864050685] ***
*** starting iteration: 3; err: [Inf, 0.3242708203019574, 0.20857292419858278, 0.18202485864050685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3242708203019574, 0.20857292419858278, 0.18202485864050685, 0.1595667523406446] ***
*** finished computation of 7 references, err: [Inf, 0.3242708203019574, 0.20857292419858278, 0.18202485864050685, 0.1595667523406446] ***
*** center 1: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [32, 9, 0]]
** centroid: 2, normalized-entropy: 0.7592757847892834, [(1, 32), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 81, 19]]
** centroid: 3, normalized-entropy: 0.7014714598838974, [(2, 81), (3, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [37, 13, 0]]
** centroid: 4, normalized-entropy: 0.8267463724926181, [(1, 37), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [4, 64, 0]]
** centroid: 5, normalized-entropy: 0.32275695889739825, [(1, 4), (2, 64)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [88, 14, 0]]
** centroid: 6, normalized-entropy: 0.577004250315725, [(1, 88), (2, 14)]
*** center 7: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2323808571184054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2323808571184054, 0.16388106398656965] ***
*** starting iteration: 2; err: [Inf, 0.2323808571184054, 0.16388106398656965] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2323808571184054, 0.16388106398656965, 0.15567406621482224] ***
*** starting iteration: 3; err: [Inf, 0.2323808571184054, 0.16388106398656965, 0.15567406621482224] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2323808571184054, 0.16388106398656965, 0.15567406621482224, 0.15256411366909742] ***
*** finished computation of 7 references, err: [Inf, 0.2323808571184054, 0.16388106398656965, 0.15567406621482224, 0.15256411366909742] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [28, 52, 0]]
** centroid: 1, normalized-entropy: 0.9340680553754911, [(1, 28), (2, 52)]
*** center 2: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [39, 7, 0]]
** centroid: 3, normalized-entropy: 0.6152538910563409, [(1, 39), (2, 7)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 65, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [78, 18, 0]]
** centroid: 6, normalized-entropy: 0.6962122601251459, [(1, 78), (2, 18)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 40, 19]]
** centroid: 7, normalized-entropy: 0.9065795484987461, [(2, 40), (3, 19)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18337616967223586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18337616967223586, 0.1567125463820994] ***
*** starting iteration: 2; err: [Inf, 0.18337616967223586, 0.1567125463820994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18337616967223586, 0.1567125463820994, 0.153522747900337] ***
*** starting iteration: 3; err: [Inf, 0.18337616967223586, 0.1567125463820994, 0.153522747900337] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18337616967223586, 0.1567125463820994, 0.153522747900337, 0.15224406459368767] ***
*** finished computation of 7 references, err: [Inf, 0.18337616967223586, 0.1567125463820994, 0.153522747900337, 0.15224406459368767] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [66, 39, 0]]
** centroid: 1, normalized-entropy: 0.9517626756348312, [(1, 66), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [26, 8, 0]]
** centroid: 2, normalized-entropy: 0.787126586201269, [(1, 26), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 76, 22]]
** centroid: 4, normalized-entropy: 0.7682814090975241, [(2, 76), (3, 22)]
*** center 5: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [19, 56, 0]]
** centroid: 6, normalized-entropy: 0.8165187119538281, [(1, 19), (2, 56)]
*** center 7: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2090181986456737] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2090181986456737, 0.17115172998141498] ***
*** starting iteration: 2; err: [Inf, 0.2090181986456737, 0.17115172998141498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2090181986456737, 0.17115172998141498, 0.15806139580789022] ***
*** starting iteration: 3; err: [Inf, 0.2090181986456737, 0.17115172998141498, 0.15806139580789022] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2090181986456737, 0.17115172998141498, 0.15806139580789022, 0.15237331293337047] ***
*** finished computation of 7 references, err: [Inf, 0.2090181986456737, 0.17115172998141498, 0.15806139580789022, 0.15237331293337047] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [96, 35, 0]]
** centroid: 1, normalized-entropy: 0.8373825002984822, [(1, 96), (2, 35)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [9, 62, 0]]
** centroid: 2, normalized-entropy: 0.5484866088431741, [(1, 9), (2, 62)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [31, 10, 0]]
** centroid: 3, normalized-entropy: 0.8014698931335286, [(1, 31), (2, 10)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 63, 25]]
** centroid: 4, normalized-entropy: 0.8609652558547648, [(2, 63), (3, 25)]
*** center 5: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28229976378008725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28229976378008725, 0.19738843858521432] ***
*** starting iteration: 2; err: [Inf, 0.28229976378008725, 0.19738843858521432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28229976378008725, 0.19738843858521432, 0.18854453471675514] ***
*** starting iteration: 3; err: [Inf, 0.28229976378008725, 0.19738843858521432, 0.18854453471675514] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28229976378008725, 0.19738843858521432, 0.18854453471675514, 0.18112285337783396] ***
*** finished computation of 7 references, err: [Inf, 0.28229976378008725, 0.19738843858521432, 0.18854453471675514, 0.18112285337783396] ***
*** center 1: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 79, 8]]
** centroid: 3, normalized-entropy: 0.4429586785384856, [(2, 79), (3, 8)]
*** center 4: selecting labels [1, 2, 3] (freq >= 2) [from [27, 90, 18]]
** centroid: 4, normalized-entropy: 0.7835807040488098, [(1, 27), (2, 90), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 9, 0]]
** centroid: 5, normalized-entropy: 0.7793498372920851, [(1, 30), (2, 9)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [36, 8, 0]]
** centroid: 6, normalized-entropy: 0.6840384356390419, [(1, 36), (2, 8)]
*** center 7: selecting labels [1] (freq >= 2) [from [27, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21446852115448564] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21446852115448564, 0.18175817011110484] ***
*** starting iteration: 2; err: [Inf, 0.21446852115448564, 0.18175817011110484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21446852115448564, 0.18175817011110484, 0.16569067689497025] ***
*** starting iteration: 3; err: [Inf, 0.21446852115448564, 0.18175817011110484, 0.16569067689497025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21446852115448564, 0.18175817011110484, 0.16569067689497025, 0.15707708716392518] ***
*** finished computation of 7 references, err: [Inf, 0.21446852115448564, 0.18175817011110484, 0.16569067689497025, 0.15707708716392518] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [81, 19, 0]]
** centroid: 1, normalized-entropy: 0.7014714598838974, [(1, 81), (2, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [85, 18, 0]]
** centroid: 3, normalized-entropy: 0.6684725699243225, [(1, 85), (2, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [2, 79, 0]]
** centroid: 5, normalized-entropy: 0.16702680404522793, [(1, 2), (2, 79)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 27, 20]]
** centroid: 6, normalized-entropy: 0.9839393951635759, [(2, 27), (3, 20)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 43, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21852424020133912] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21852424020133912, 0.16134532374888658] ***
*** starting iteration: 2; err: [Inf, 0.21852424020133912, 0.16134532374888658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21852424020133912, 0.16134532374888658, 0.1536326722232625] ***
*** starting iteration: 3; err: [Inf, 0.21852424020133912, 0.16134532374888658, 0.1536326722232625] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21852424020133912, 0.16134532374888658, 0.1536326722232625, 0.1506189040467143] ***
*** finished computation of 7 references, err: [Inf, 0.21852424020133912, 0.16134532374888658, 0.1536326722232625, 0.1506189040467143] ***
*** center 1: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [3, 63, 0]]
** centroid: 2, normalized-entropy: 0.2667649878030262, [(1, 3), (2, 63)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [81, 5, 0]]
** centroid: 3, normalized-entropy: 0.32001486274754665, [(1, 81), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [12, 50, 0]]
** centroid: 4, normalized-entropy: 0.708835673332196, [(1, 12), (2, 50)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 22, 20]]
** centroid: 5, normalized-entropy: 0.998363672593813, [(2, 22), (3, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 36, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2294315935652703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2294315935652703, 0.16087081364542247] ***
*** starting iteration: 2; err: [Inf, 0.2294315935652703, 0.16087081364542247] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2294315935652703, 0.16087081364542247, 0.15731769207492471] ***
*** starting iteration: 3; err: [Inf, 0.2294315935652703, 0.16087081364542247, 0.15731769207492471] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2294315935652703, 0.16087081364542247, 0.15731769207492471, 0.15431516146287322] ***
*** finished computation of 7 references, err: [Inf, 0.2294315935652703, 0.16087081364542247, 0.15731769207492471, 0.15431516146287322] ***
*** center 1: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 50, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [8, 75, 0]]
** centroid: 3, normalized-entropy: 0.4574321808988397, [(1, 8), (2, 75)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [51, 21, 0]]
** centroid: 4, normalized-entropy: 0.8708644692353648, [(1, 51), (2, 21)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 23, 19]]
** centroid: 5, normalized-entropy: 0.9934472383802028, [(2, 23), (3, 19)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [70, 23, 0]]
** centroid: 6, normalized-entropy: 0.8069896049203007, [(1, 70), (2, 23)]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20700418728031217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20700418728031217, 0.17216928620636462] ***
*** starting iteration: 2; err: [Inf, 0.20700418728031217, 0.17216928620636462] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20700418728031217, 0.17216928620636462, 0.16441364741045983] ***
*** starting iteration: 3; err: [Inf, 0.20700418728031217, 0.17216928620636462, 0.16441364741045983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20700418728031217, 0.17216928620636462, 0.16441364741045983, 0.1574211886804551] ***
*** finished computation of 7 references, err: [Inf, 0.20700418728031217, 0.17216928620636462, 0.16441364741045983, 0.1574211886804551] ***
*** center 1: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 71, 20]]
** centroid: 2, normalized-entropy: 0.7597659876428757, [(2, 71), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [27, 43, 0]]
** centroid: 3, normalized-entropy: 0.9619780596506257, [(1, 27), (2, 43)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [88, 31, 0]]
** centroid: 4, normalized-entropy: 0.8275062669879832, [(1, 88), (2, 31)]
*** center 5: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [26, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 47, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1939354170151055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1939354170151055, 0.1563892647791654] ***
*** starting iteration: 2; err: [Inf, 0.1939354170151055, 0.1563892647791654] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1939354170151055, 0.1563892647791654, 0.14930182640627027] ***
*** starting iteration: 3; err: [Inf, 0.1939354170151055, 0.1563892647791654, 0.14930182640627027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1939354170151055, 0.1563892647791654, 0.14930182640627027, 0.1469962359899655] ***
*** finished computation of 7 references, err: [Inf, 0.1939354170151055, 0.1563892647791654, 0.14930182640627027, 0.1469962359899655] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 23, 26]]
** centroid: 1, normalized-entropy: 0.9972943816462351, [(2, 23), (3, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [70, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 71, 0]]
** centroid: 5, normalized-entropy: 0.39481484603049416, [(1, 6), (2, 71)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [66, 10, 0]]
** centroid: 6, normalized-entropy: 0.5617526078313283, [(1, 66), (2, 10)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [54, 23, 0]]
** centroid: 7, normalized-entropy: 0.8796975782775168, [(1, 54), (2, 23)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25389433617889884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25389433617889884, 0.1786465419586748] ***
*** starting iteration: 2; err: [Inf, 0.25389433617889884, 0.1786465419586748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25389433617889884, 0.1786465419586748, 0.1630884930472821] ***
*** starting iteration: 3; err: [Inf, 0.25389433617889884, 0.1786465419586748, 0.1630884930472821] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25389433617889884, 0.1786465419586748, 0.1630884930472821, 0.15698864573612809] ***
*** finished computation of 7 references, err: [Inf, 0.25389433617889884, 0.1786465419586748, 0.1630884930472821, 0.15698864573612809] ***
*** center 1: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [11, 76, 0]]
** centroid: 2, normalized-entropy: 0.5475844288749033, [(1, 11), (2, 76)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 20, 0]]
** centroid: 3, normalized-entropy: 0.8162554088088008, [(1, 59), (2, 20)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 99, 23]]
** centroid: 4, normalized-entropy: 0.6983747934875366, [(2, 99), (3, 23)]
*** center 5: selecting labels [1] (freq >= 2) [from [66, 1, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18794130659289657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18794130659289657, 0.15951845426671207] ***
*** starting iteration: 2; err: [Inf, 0.18794130659289657, 0.15951845426671207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18794130659289657, 0.15951845426671207, 0.15669781829137355] ***
*** starting iteration: 3; err: [Inf, 0.18794130659289657, 0.15951845426671207, 0.15669781829137355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18794130659289657, 0.15951845426671207, 0.15669781829137355, 0.15624546961858868] ***
*** finished computation of 7 references, err: [Inf, 0.18794130659289657, 0.15951845426671207, 0.15669781829137355, 0.15624546961858868] ***
*** center 1: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [92, 29, 0]]
** centroid: 2, normalized-entropy: 0.7944901065643072, [(1, 92), (2, 29)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [19, 28, 0]]
** centroid: 3, normalized-entropy: 0.9733854352299557, [(1, 19), (2, 28)]
*** center 4: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 63, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 60, 23]]
** centroid: 6, normalized-entropy: 0.8514808683852091, [(2, 60), (3, 23)]
*** center 7: selecting labels [1] (freq >= 2) [from [39, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25913032620213927] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25913032620213927, 0.18358813700824975] ***
*** starting iteration: 2; err: [Inf, 0.25913032620213927, 0.18358813700824975] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25913032620213927, 0.18358813700824975, 0.15716385099850594] ***
*** starting iteration: 3; err: [Inf, 0.25913032620213927, 0.18358813700824975, 0.15716385099850594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25913032620213927, 0.18358813700824975, 0.15716385099850594, 0.147872104043141] ***
*** finished computation of 7 references, err: [Inf, 0.25913032620213927, 0.18358813700824975, 0.15716385099850594, 0.147872104043141] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [65, 43, 0]]
** centroid: 1, normalized-entropy: 0.9698570179131006, [(1, 65), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [6, 70, 0]]
** centroid: 2, normalized-entropy: 0.39845927409523557, [(1, 6), (2, 70)]
*** center 3: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 6, 0]]
** centroid: 4, normalized-entropy: 0.42622865699814483, [(1, 63), (2, 6)]
*** center 5: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 59, 23]]
** centroid: 6, normalized-entropy: 0.8561146277685725, [(2, 59), (3, 23)]
*** center 7: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21179054754413665] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21179054754413665, 0.17328804347943513] ***
*** starting iteration: 2; err: [Inf, 0.21179054754413665, 0.17328804347943513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21179054754413665, 0.17328804347943513, 0.15904405902232974] ***
*** starting iteration: 3; err: [Inf, 0.21179054754413665, 0.17328804347943513, 0.15904405902232974] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21179054754413665, 0.17328804347943513, 0.15904405902232974, 0.1554327800888568] ***
*** finished computation of 7 references, err: [Inf, 0.21179054754413665, 0.17328804347943513, 0.15904405902232974, 0.1554327800888568] ***
*** center 1: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [44, 27, 0]]
** centroid: 2, normalized-entropy: 0.9582407282588409, [(1, 44), (2, 27)]
*** center 3: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [13, 86, 0]]
** centroid: 4, normalized-entropy: 0.5610284863400681, [(1, 13), (2, 86)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [7, 26, 0]]
** centroid: 5, normalized-entropy: 0.7455178428108284, [(1, 7), (2, 26)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 50, 25]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 50), (3, 25)]
*** center 7: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2129078466128558] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2129078466128558, 0.1652875156113878] ***
*** starting iteration: 2; err: [Inf, 0.2129078466128558, 0.1652875156113878] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2129078466128558, 0.1652875156113878, 0.15947166852653027] ***
*** starting iteration: 3; err: [Inf, 0.2129078466128558, 0.1652875156113878, 0.15947166852653027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2129078466128558, 0.1652875156113878, 0.15947166852653027, 0.15722651700861753] ***
*** finished computation of 7 references, err: [Inf, 0.2129078466128558, 0.1652875156113878, 0.15947166852653027, 0.15722651700861753] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [35, 34, 0]]
** centroid: 1, normalized-entropy: 0.9998484829291058, [(1, 35), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [86, 24, 0]]
** centroid: 2, normalized-entropy: 0.7568336324184036, [(1, 86), (2, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [45, 32, 0]]
** centroid: 4, normalized-entropy: 0.9793399259567798, [(1, 45), (2, 32)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 89, 19]]
** centroid: 5, normalized-entropy: 0.6710828900205286, [(2, 89), (3, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [35, 6, 0]]
** centroid: 7, normalized-entropy: 0.6006085754131871, [(1, 35), (2, 6)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19478436900209636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19478436900209636, 0.16575747412256897] ***
*** starting iteration: 2; err: [Inf, 0.19478436900209636, 0.16575747412256897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19478436900209636, 0.16575747412256897, 0.16191639781324194] ***
*** starting iteration: 3; err: [Inf, 0.19478436900209636, 0.16575747412256897, 0.16191639781324194] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19478436900209636, 0.16575747412256897, 0.16191639781324194, 0.1603170524444431] ***
*** finished computation of 7 references, err: [Inf, 0.19478436900209636, 0.16575747412256897, 0.16191639781324194, 0.1603170524444431] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 107, 13]]
** centroid: 1, normalized-entropy: 0.4948682299355441, [(2, 107), (3, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [101, 14, 0]]
** centroid: 3, normalized-entropy: 0.5343393668857862, [(1, 101), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [2, 33, 0]]
** centroid: 4, normalized-entropy: 0.3159971329784246, [(1, 2), (2, 33)]
*** center 5: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [16, 33, 0]]
** centroid: 6, normalized-entropy: 0.9113423759758414, [(1, 16), (2, 33)]
*** center 7: selecting labels [1] (freq >= 2) [from [39, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25085946266539394] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25085946266539394, 0.16828801013901828] ***
*** starting iteration: 2; err: [Inf, 0.25085946266539394, 0.16828801013901828] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25085946266539394, 0.16828801013901828, 0.1511392299104482] ***
*** starting iteration: 3; err: [Inf, 0.25085946266539394, 0.16828801013901828, 0.1511392299104482] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25085946266539394, 0.16828801013901828, 0.1511392299104482, 0.14866253536380827] ***
*** finished computation of 7 references, err: [Inf, 0.25085946266539394, 0.16828801013901828, 0.1511392299104482, 0.14866253536380827] ***
*** center 1: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [6, 66, 0]]
** centroid: 3, normalized-entropy: 0.4138168503036336, [(1, 6), (2, 66)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [25, 37, 0]]
** centroid: 4, normalized-entropy: 0.9728063221185002, [(1, 25), (2, 37)]
*** center 5: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 73, 0]]
** centroid: 6, normalized-entropy: 0.5600443203590992, [(1, 11), (2, 73)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 24, 22]]
** centroid: 7, normalized-entropy: 0.9986359641585719, [(2, 24), (3, 22)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2393176242839545] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2393176242839545, 0.1632488521966152] ***
*** starting iteration: 2; err: [Inf, 0.2393176242839545, 0.1632488521966152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2393176242839545, 0.1632488521966152, 0.15924718898907303] ***
*** starting iteration: 3; err: [Inf, 0.2393176242839545, 0.1632488521966152, 0.15924718898907303] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2393176242839545, 0.1632488521966152, 0.15924718898907303, 0.15731638853810728] ***
*** finished computation of 7 references, err: [Inf, 0.2393176242839545, 0.1632488521966152, 0.15924718898907303, 0.15731638853810728] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 59, 21]]
** centroid: 1, normalized-entropy: 0.8304955225035798, [(2, 59), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [77, 34, 0]]
** centroid: 2, normalized-entropy: 0.8888636119715568, [(1, 77), (2, 34)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [2, 84, 0]]
** centroid: 3, normalized-entropy: 0.15935006268563429, [(1, 2), (2, 84)]
*** center 4: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [74, 7, 0]]
** centroid: 5, normalized-entropy: 0.42440514472480345, [(1, 74), (2, 7)]
*** center 6: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [27, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19770201494172215] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19770201494172215, 0.152356947414577] ***
*** starting iteration: 2; err: [Inf, 0.19770201494172215, 0.152356947414577] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19770201494172215, 0.152356947414577, 0.1492633154927753] ***
*** starting iteration: 3; err: [Inf, 0.19770201494172215, 0.152356947414577, 0.1492633154927753] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19770201494172215, 0.152356947414577, 0.1492633154927753, 0.14848376138322056] ***
*** finished computation of 7 references, err: [Inf, 0.19770201494172215, 0.152356947414577, 0.1492633154927753, 0.14848376138322056] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [66, 13, 0]]
** centroid: 1, normalized-entropy: 0.6451006442088483, [(1, 66), (2, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [18, 59, 0]]
** centroid: 3, normalized-entropy: 0.7845191388986644, [(1, 18), (2, 59)]
*** center 4: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 67, 0]]
** centroid: 6, normalized-entropy: 0.18927843126120178, [(1, 2), (2, 67)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 41, 19]]
** centroid: 7, normalized-entropy: 0.9007196798623592, [(2, 41), (3, 19)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19854828686080872] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19854828686080872, 0.16439889443665742] ***
*** starting iteration: 2; err: [Inf, 0.19854828686080872, 0.16439889443665742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19854828686080872, 0.16439889443665742, 0.15722686720080672] ***
*** starting iteration: 3; err: [Inf, 0.19854828686080872, 0.16439889443665742, 0.15722686720080672] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19854828686080872, 0.16439889443665742, 0.15722686720080672, 0.15410952769219877] ***
*** finished computation of 7 references, err: [Inf, 0.19854828686080872, 0.16439889443665742, 0.15722686720080672, 0.15410952769219877] ***
*** center 1: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [15, 60, 0]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(1, 15), (2, 60)]
*** center 3: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [37, 15, 0]]
** centroid: 4, normalized-entropy: 0.8667256130949592, [(1, 37), (2, 15)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 82, 13]]
** centroid: 5, normalized-entropy: 0.5759084429149787, [(2, 82), (3, 13)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [60, 25, 0]]
** centroid: 6, normalized-entropy: 0.8739810481273581, [(1, 60), (2, 25)]
*** center 7: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22041179903456942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22041179903456942, 0.16823438346665354] ***
*** starting iteration: 2; err: [Inf, 0.22041179903456942, 0.16823438346665354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22041179903456942, 0.16823438346665354, 0.1603253587530926] ***
*** starting iteration: 3; err: [Inf, 0.22041179903456942, 0.16823438346665354, 0.1603253587530926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22041179903456942, 0.16823438346665354, 0.1603253587530926, 0.1555526186451316] ***
*** finished computation of 7 references, err: [Inf, 0.22041179903456942, 0.16823438346665354, 0.1603253587530926, 0.1555526186451316] ***
*** center 1: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [12, 66, 0]]
** centroid: 2, normalized-entropy: 0.6193821946787638, [(1, 12), (2, 66)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [8, 59, 0]]
** centroid: 3, normalized-entropy: 0.52764232609436, [(1, 8), (2, 59)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [86, 15, 0]]
** centroid: 4, normalized-entropy: 0.6061112071230008, [(1, 86), (2, 15)]
*** center 5: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 35, 2]]
** centroid: 6, normalized-entropy: 0.30337483608641397, [(2, 35), (3, 2)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 10, 21]]
** centroid: 7, normalized-entropy: 0.9071657675730821, [(2, 10), (3, 21)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20539031615387648] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20539031615387648, 0.16075885883066804] ***
*** starting iteration: 2; err: [Inf, 0.20539031615387648, 0.16075885883066804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20539031615387648, 0.16075885883066804, 0.1536138035543263] ***
*** starting iteration: 3; err: [Inf, 0.20539031615387648, 0.16075885883066804, 0.1536138035543263] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20539031615387648, 0.16075885883066804, 0.1536138035543263, 0.1509044523704797] ***
*** finished computation of 7 references, err: [Inf, 0.20539031615387648, 0.16075885883066804, 0.1536138035543263, 0.1509044523704797] ***
*** center 1: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 84, 27]]
** centroid: 2, normalized-entropy: 0.8003922080453356, [(2, 84), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [74, 11, 0]]
** centroid: 3, normalized-entropy: 0.5558227377664954, [(1, 74), (2, 11)]
*** center 4: selecting labels [1] (freq >= 2) [from [46, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [3, 60, 0]]
** centroid: 5, normalized-entropy: 0.2761954276479391, [(1, 3), (2, 60)]
*** center 6: selecting labels [1] (freq >= 2) [from [61, 1, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [48, 28, 0]]
** centroid: 7, normalized-entropy: 0.9494520153879484, [(1, 48), (2, 28)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2077860165880993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2077860165880993, 0.15974840625561773] ***
*** starting iteration: 2; err: [Inf, 0.2077860165880993, 0.15974840625561773] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2077860165880993, 0.15974840625561773, 0.15409849364403636] ***
*** starting iteration: 3; err: [Inf, 0.2077860165880993, 0.15974840625561773, 0.15409849364403636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2077860165880993, 0.15974840625561773, 0.15409849364403636, 0.15225394911319018] ***
*** finished computation of 7 references, err: [Inf, 0.2077860165880993, 0.15974840625561773, 0.15409849364403636, 0.15225394911319018] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [12, 36, 0]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(1, 12), (2, 36)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 60, 21]]
** centroid: 2, normalized-entropy: 0.8256265261578954, [(2, 60), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [85, 36, 0]]
** centroid: 3, normalized-entropy: 0.8782390255090747, [(1, 85), (2, 36)]
*** center 4: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 52, 0]]
** centroid: 6, normalized-entropy: 0.4288109647301171, [(1, 5), (2, 52)]
*** center 7: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21619099164754152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21619099164754152, 0.1689754005949944] ***
*** starting iteration: 2; err: [Inf, 0.21619099164754152, 0.1689754005949944] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21619099164754152, 0.1689754005949944, 0.154359190762043] ***
*** starting iteration: 3; err: [Inf, 0.21619099164754152, 0.1689754005949944, 0.154359190762043] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21619099164754152, 0.1689754005949944, 0.154359190762043, 0.15025690224580468] ***
*** finished computation of 7 references, err: [Inf, 0.21619099164754152, 0.1689754005949944, 0.154359190762043, 0.15025690224580468] ***
*** center 1: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 11, 0]]
** centroid: 2, normalized-entropy: 0.5822463050121238, [(1, 68), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 56, 19]]
** centroid: 3, normalized-entropy: 0.8165187119538281, [(2, 56), (3, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [22, 36, 0]]
** centroid: 4, normalized-entropy: 0.9575534837147484, [(1, 22), (2, 36)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [42, 7, 0]]
** centroid: 5, normalized-entropy: 0.5916727785823274, [(1, 42), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [13, 67, 0]]
** centroid: 6, normalized-entropy: 0.6402569436810504, [(1, 13), (2, 67)]
*** center 7: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2945815126746893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2945815126746893, 0.18263764678500594] ***
*** starting iteration: 2; err: [Inf, 0.2945815126746893, 0.18263764678500594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2945815126746893, 0.18263764678500594, 0.1581368960728869] ***
*** starting iteration: 3; err: [Inf, 0.2945815126746893, 0.18263764678500594, 0.1581368960728869] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2945815126746893, 0.18263764678500594, 0.1581368960728869, 0.15125430997367947] ***
*** finished computation of 7 references, err: [Inf, 0.2945815126746893, 0.18263764678500594, 0.1581368960728869, 0.15125430997367947] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 48, 21]]
** centroid: 1, normalized-entropy: 0.8865408928220899, [(2, 48), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [79, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [68, 9, 0]]
** centroid: 3, normalized-entropy: 0.5203346157857599, [(1, 68), (2, 9)]
*** center 4: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 35, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [16, 58, 0]]
** centroid: 6, normalized-entropy: 0.7531979910695015, [(1, 16), (2, 58)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [46, 35, 0]]
** centroid: 7, normalized-entropy: 0.9866554896538049, [(1, 46), (2, 35)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2120647205132991] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2120647205132991, 0.17568200372718273] ***
*** starting iteration: 2; err: [Inf, 0.2120647205132991, 0.17568200372718273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2120647205132991, 0.17568200372718273, 0.1643333413284272] ***
*** starting iteration: 3; err: [Inf, 0.2120647205132991, 0.17568200372718273, 0.1643333413284272] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2120647205132991, 0.17568200372718273, 0.1643333413284272, 0.15566107783839106] ***
*** finished computation of 7 references, err: [Inf, 0.2120647205132991, 0.17568200372718273, 0.1643333413284272, 0.15566107783839106] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [76, 10, 0]]
** centroid: 1, normalized-entropy: 0.5185697317883058, [(1, 76), (2, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [6, 61, 0]]
** centroid: 3, normalized-entropy: 0.43497348007474274, [(1, 6), (2, 61)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 42, 1]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [68, 3, 0]]
** centroid: 5, normalized-entropy: 0.25253077151613923, [(1, 68), (2, 3)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 43, 19]]
** centroid: 6, normalized-entropy: 0.8890349038123858, [(2, 43), (3, 19)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [57, 31, 0]]
** centroid: 7, normalized-entropy: 0.9360814319397586, [(1, 57), (2, 31)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21370832184003666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21370832184003666, 0.16189970377925783] ***
*** starting iteration: 2; err: [Inf, 0.21370832184003666, 0.16189970377925783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21370832184003666, 0.16189970377925783, 0.1533212778866291] ***
*** starting iteration: 3; err: [Inf, 0.21370832184003666, 0.16189970377925783, 0.1533212778866291] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21370832184003666, 0.16189970377925783, 0.1533212778866291, 0.15000199606036768] ***
*** finished computation of 7 references, err: [Inf, 0.21370832184003666, 0.16189970377925783, 0.1533212778866291, 0.15000199606036768] ***
*** center 1: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 47, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [84, 32, 0]]
** centroid: 4, normalized-entropy: 0.8497511372532974, [(1, 84), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 38, 0]]
** centroid: 5, normalized-entropy: 0.9833761901392238, [(1, 28), (2, 38)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 70, 24]]
** centroid: 6, normalized-entropy: 0.8196004346196011, [(2, 70), (3, 24)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [47, 2, 0]]
** centroid: 7, normalized-entropy: 0.2460225782203316, [(1, 47), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19399740558490158] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19399740558490158, 0.1664320708438754] ***
*** starting iteration: 2; err: [Inf, 0.19399740558490158, 0.1664320708438754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19399740558490158, 0.1664320708438754, 0.16102577142044902] ***
*** starting iteration: 3; err: [Inf, 0.19399740558490158, 0.1664320708438754, 0.16102577142044902] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19399740558490158, 0.1664320708438754, 0.16102577142044902, 0.15656265270593575] ***
*** finished computation of 7 references, err: [Inf, 0.19399740558490158, 0.1664320708438754, 0.16102577142044902, 0.15656265270593575] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 7, 0]]
** centroid: 1, normalized-entropy: 0.46899559358928133, [(1, 63), (2, 7)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 56, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 14, 0]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(1, 49), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [7, 57, 0]]
** centroid: 4, normalized-entropy: 0.49802788653447644, [(1, 7), (2, 57)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 32, 16]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(2, 32), (3, 16)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [86, 21, 0]]
** centroid: 6, normalized-entropy: 0.7143881566559658, [(1, 86), (2, 21)]
*** center 7: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 371,3 => 43,1 => 586), Dict(2 => 369,3 => 42,1 => 589))
[ Info: ===== scores for single classifier: {"micro_f1":0.933,"precision":0.933,"recall":0.933,"macro_recall":0.9489235809166242,"macro_f1":0.8872442863475625,"accuracy":0.933,"class_f1":{"2":0.9078404401650619,"3":0.7924528301886793,"1":0.961439588688946},"class_precision":{"2":0.9217877094972067,"3":0.65625,"1":0.9705882352941176},"class_recall":{"2":0.8943089430894309,"3":1.0,"1":0.9524617996604414}}
[ Info: ===== scores for 1: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9121566921061725,"macro_f1":0.9417758166329594,"accuracy":0.978,"class_f1":{"2":0.9706666666666667,"3":0.8648648648648648,"1":0.9897959183673469},"class_precision":{"2":0.9553805774278216,"3":1.0,"1":0.9914821124361158},"class_recall":{"2":0.986449864498645,"3":0.7619047619047619,"1":0.9881154499151104}}
[ Info: ===== scores for 5: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.9340641138645197,"macro_f1":0.9520518526888258,"accuracy":0.967,"class_f1":{"2":0.9561752988047808,"3":0.923076923076923,"1":0.9769033361847734},"class_precision":{"2":0.9375,"3":1.0,"1":0.9844827586206897},"class_recall":{"2":0.975609756097561,"3":0.8571428571428571,"1":0.969439728353141}}
[ Info: ===== scores for 7: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.9340641138645197,"macro_f1":0.9520518526888258,"accuracy":0.967,"class_f1":{"2":0.9561752988047808,"3":0.923076923076923,"1":0.9769033361847734},"class_precision":{"2":0.9375,"3":1.0,"1":0.9844827586206897},"class_recall":{"2":0.975609756097561,"3":0.8571428571428571,"1":0.969439728353141}}
[ Info: ===== scores for 9: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.9403028289317575,"macro_f1":0.954874085624105,"accuracy":0.965,"class_f1":{"2":0.9536423841059603,"3":0.9367088607594937,"1":0.9742710120068612},"class_precision":{"2":0.9326424870466321,"3":1.0,"1":0.9844020797227037},"class_recall":{"2":0.975609756097561,"3":0.8809523809523809,"1":0.9643463497453311}}
[ Info: ===== scores for 11: {"micro_f1":0.964,"precision":0.964,"recall":0.964,"macro_recall":0.9541406405251699,"macro_f1":0.9586609150567428,"accuracy":0.964,"class_f1":{"2":0.9522546419098142,"3":0.951219512195122,"1":0.972508591065292},"class_precision":{"2":0.9324675324675324,"3":0.975,"1":0.9843478260869565},"class_recall":{"2":0.9728997289972899,"3":0.9285714285714286,"1":0.9609507640067911}}
(score = 0.977, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.978,"k":1,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9121566921061725,"macro_f1":0.9417758166329594,"accuracy":0.978,"class_f1":{"2":0.9706666666666667,"3":0.8648648648648648,"1":0.9897959183673469},"class_precision":{"2":0.9553805774278216,"3":1.0,"1":0.9914821124361158},"class_recall":{"2":0.986449864498645,"3":0.7619047619047619,"1":0.9881154499151104}}
Test Summary: | Pass  Total
AKNC          |    8      8
[485, 1, 4, 3, 1, 1, 1, 3, 8, 5, 5, 2, 5, 9, 1, 12, 2, 1, 4, 2, 3, 51, 4, 2, 15, 4, 10, 21, 11, 2, 3, 2, 6, 36, 16, 2, 16, 2, 21, 3, 60, 34, 3, 4, 10, 8, 15, 2, 8, 9, 5, 3, 8, 3, 3, 44, 7, 3, 4, 6, 15, 78, 10, 19, 3, 2, 37, 16, 20, 3, 7, 33, 5, 4, 16, 7, 7, 7, 9, 11, 2, 140, 7, 28, 2, 62, 7, 38, 12, 76, 8, 21, 3, 16, 1, 7, 41, 99, 2, 4, 237, 30, 74, 4, 41, 2, 72, 1, 1, 30, 3, 6, 25, 17, 8, 121, 4, 7, 4, 10, 16, 543, 13, 30, 37, 53, 12, 17, 29, 39, 36, 5, 45, 28, 5, 11, 8, 21, 24, 4, 815, 8, 8, 4, 8, 198, 31, 7, 22, 34, 16, 33, 98, 89, 12, 97, 20, 37, 18, 8, 20, 14, 25, 3, 18, 21, 123, 14, 249, 8, 10, 5, 11, 34, 17, 25, 146, 15, 24, 9, 23, 106, 114, 6, 14, 32, 4, 80, 11, 59, 34, 13, 29, 6, 16, 23, 4, 88, 5, 22, 186, 7, 35, 31, 44, 65, 13, 44, 22, 33, 30, 57, 37, 13, 47, 19, 54, 12, 5, 19, 10, 34, 59, 43, 25, 9, 4, 3, 27, 10, 40, 9, 38, 6, 13, 18, 115, 2, 17, 57, 9, 83, 10, 12, 94, 10, 80, 12, 10, 28, 3, 15, 6, 3, 46, 7, 140, 62, 35, 55, 31, 168, 61, 15, 32, 10, 17, 56, 77, 31, 3, 10, 128, 26, 5, 4, 12, 21, 42, 11, 22, 1, 56, 93, 4, 85, 29, 12, 107, 13, 23, 12, 4, 38, 23, 10, 20, 15, 9, 7]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.657, speedup = 0.47448492095732325, eval_ratio = 0.077718)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.39691840277777796,"recall":0.3906250000000001,"f1":null,"seconds":9.561702609062195e-5,"exhaustive_search_seconds":0.0003293287009000778,"evaluations":461.4921875,"distances_sum":1771.9896828963283}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5399305555555555,"recall":0.5399305555555555,"f1":null,"seconds":0.0005189180374145508,"exhaustive_search_seconds":0.0003293287009000778,"evaluations":626.6171875,"distances_sum":1663.4089292469653}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6519097222222219,"recall":0.6519097222222219,"f1":0.6519097222222219,"seconds":0.00021345354616641998,"exhaustive_search_seconds":0.0003293287009000778,"evaluations":726.578125,"distances_sum":1611.5252837881003}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.723090277777777,"recall":0.723090277777777,"f1":0.723090277777777,"seconds":0.0003216303884983063,"exhaustive_search_seconds":0.0003293287009000778,"evaluations":843.875,"distances_sum":1584.545157780911}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7751736111111102,"recall":0.7751736111111102,"f1":0.7751736111111102,"seconds":0.0004186704754829407,"exhaustive_search_seconds":0.0003293287009000778,"evaluations":936.1171875,"distances_sum":1567.2333118738056}
KCenters.DeloneInvIndex> reached performance {"precision":0.8177083333333325,"recall":0.8177083333333325,"f1":0.8177083333333325,"seconds":0.0005129463970661163,"exhaustive_search_seconds":0.0003293287009000778,"evaluations":1038.8515625,"distances_sum":1555.547136141331}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8400000000000002, speedup = 0.8356046369860597, eval_ratio = 0.10668599999999999)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
