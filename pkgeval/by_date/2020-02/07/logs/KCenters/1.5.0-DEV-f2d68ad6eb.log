Julia Version 1.5.0-DEV.234
Commit f2d68ad6eb (2020-02-05 16:31 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed DataValueInterfaces ───────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed InvertedIndices ───────────── v1.0.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed KCenters ──────────────────── v0.1.11
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed JSON ──────────────────────── v0.21.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed TableTraits ───────────────── v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Reexport ──────────────────── v0.2.0
  Installed Tables ────────────────────── v0.2.11
  Installed MappedArrays ──────────────── v0.2.2
  Installed Compat ────────────────────── v3.3.1
  Installed Parsers ───────────────────── v0.3.11
  Installed DataFrames ────────────────── v0.20.0
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed Missings ──────────────────── v0.4.3
  Installed DataAPI ───────────────────── v1.1.0
  Installed OrderedCollections ────────── v1.1.0
  Installed MLDataPattern ─────────────── v0.5.0
  Installed StatsBase ─────────────────── v0.32.0
  Installed MLDataUtils ───────────────── v0.5.0
  Installed SimilaritySearch ──────────── v0.3.17
  Installed DataStructures ────────────── v0.17.9
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.1.11
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.3.1
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.1.11
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.17
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_TlpSiB/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.3.1
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.0
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.1.11
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.17
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v0.2.11
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
[ Info: 176.53
[ Info: 76.81000000000002
[ Info: 39.37999999999998
[ Info: 27.359999999999996
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 267.24999848336876
[ Info: 215.71999828423913
[ Info: 195.99000008183336
[ Info: 76.6400011840614
Test Summary:        |
Clustering with dnet | No tests
inertia(cfft.distances) = 18.713468711276757
inertia(cdnet.distances) = 24.709389044205682
inertia(crand.distances) = 23.40109307428156
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8560926920301928,"seconds":6.11133873462677e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.2578125,"distances_sum":2233.397906648122}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5009765625, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.5009765625,"f1":null,"seconds":4.7050416469573975e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.375,"distances_sum":1458.125130738076}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7666015625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7666015625,"f1":0.8560926920301928,"seconds":6.11133873462677e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.2578125,"distances_sum":2233.397906648122}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9556464368964374,"seconds":6.182119250297546e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.875,"distances_sum":2868.828918782807}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9556464368964374,"seconds":6.182119250297546e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.875,"distances_sum":2868.828918782807}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9654590201465205,"seconds":6.550922989845276e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8671875,"distances_sum":2944.6980692282496}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9654590201465205,"seconds":6.550922989845276e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8671875,"distances_sum":2944.6980692282496}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9654590201465205,"seconds":6.550922989845276e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8671875,"distances_sum":2944.6980692282496}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5068359375, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5068359375,"f1":0.6543338605838609,"seconds":4.664063453674316e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":6.4453125,"distances_sum":1279.7255678364284}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5068359375,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.5068359375,"f1":0.6543338605838609,"seconds":4.664063453674316e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":6.4453125,"distances_sum":1279.7255678364284}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7021484375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7021484375,"f1":0.8165740509490518,"seconds":5.291774868965149e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":7.8671875,"distances_sum":1824.3872432693208}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.93580325924076,"seconds":6.200745701789856e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.7109375,"distances_sum":2410.830562993797}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8916015625,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8916015625,"f1":0.93580325924076,"seconds":6.200745701789856e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.7109375,"distances_sum":2410.830562993797}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9456959706959711,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.7734375,"distances_sum":2458.2298824900704}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9688873626373632,"seconds":6.299465894699097e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.8984375,"distances_sum":2596.87821684365}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9441740551115556,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.7578125,"distances_sum":2466.8874399928413}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9688873626373632,"seconds":6.299465894699097e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.8984375,"distances_sum":2596.87821684365}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9688873626373632,"seconds":6.299465894699097e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.8984375,"distances_sum":2596.87821684365}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6982421875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6982421875,"f1":0.8125067640692648,"seconds":5.19677996635437e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.890625,"distances_sum":1659.841907850545}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8694685522810529,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.1640625,"distances_sum":1878.8552185749368}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.60546875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.60546875,"f1":0.7405096639471647,"seconds":4.563480615615845e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.0859375,"distances_sum":1383.0726827084643}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.779296875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.779296875,"f1":0.8694685522810529,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.1640625,"distances_sum":1878.8552185749368}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9066308691308701,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.6796875,"distances_sum":2112.80849672576}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.959100274725275,"seconds":6.0480087995529175e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8984375,"distances_sum":2493.141174064428}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9544700091575093,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8828125,"distances_sum":2441.0105288967834}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.947461913086914,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.828125,"distances_sum":2392.6328015164313}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.959100274725275,"seconds":6.0480087995529175e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8984375,"distances_sum":2493.141174064428}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9652186355311361,"seconds":6.295740604400635e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9453125,"distances_sum":2517.7570297161883}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9724530677655681,"seconds":6.252899765968323e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.90625,"distances_sum":2578.1788949061984}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9659626831501837,"seconds":6.671994924545288e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9140625,"distances_sum":2519.3420198299336}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.968137591575092,"seconds":6.590038537979126e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9140625,"distances_sum":2556.2167417621126}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9658203125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9658203125,"f1":0.9814732142857148,"seconds":6.679445505142212e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9921875,"distances_sum":2620.3462572283856}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9631555944055948,"seconds":6.3963234424591064e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8828125,"distances_sum":2543.5024821864863}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9658203125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9814732142857148,"seconds":6.679445505142212e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9921875,"distances_sum":2620.3462572283856}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9658203125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9814732142857148,"seconds":6.679445505142212e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9921875,"distances_sum":2620.3462572283856}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5947265625, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.5947265625,"f1":null,"seconds":4.7478824853897095e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.4375,"distances_sum":1343.6178940985008}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4248046875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4248046875,"f1":null,"seconds":4.518777132034302e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.046875,"distances_sum":869.622258967055}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5947265625,"state":{"ssize":5,"bsize":3},"perf":{"precision":null,"recall":0.5947265625,"f1":null,"seconds":4.7478824853897095e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.4375,"distances_sum":1343.6178940985008}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.697265625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.697265625,"f1":0.8111589799089808,"seconds":5.200505256652832e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.1875,"distances_sum":1604.6888843974575}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.796875, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.796875,"f1":0.8766450563325572,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.671875,"distances_sum":1919.060182773876}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.916197344322345,"seconds":6.249174475669861e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.9453125,"distances_sum":2127.7805052640115}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8600311147186156,"seconds":5.45009970664978e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.5390625,"distances_sum":1800.6147599029632}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.85546875,"state":{"ssize":7,"bsize":6},"perf":{"precision":1.0,"recall":0.85546875,"f1":0.916197344322345,"seconds":6.249174475669861e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.9453125,"distances_sum":2127.7805052640115}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":11,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9514194139194143,"seconds":6.245449185371399e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.8671875,"distances_sum":2421.2825419333903}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9218869671994679,"seconds":6.0908496379852295e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.7421875,"distances_sum":2248.484425076686}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":10,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9348073801198808,"seconds":6.163492798805237e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.7265625,"distances_sum":2341.5699650899746}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":11,"bsize":9},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9514194139194143,"seconds":6.245449185371399e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.8671875,"distances_sum":2421.2825419333903}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9140625,"state":{"ssize":11,"bsize":9},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9514194139194143,"seconds":6.245449185371399e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.8671875,"distances_sum":2421.2825419333903}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.193359375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.193359375,"f1":null,"seconds":3.6228448152542114e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":5.8359375,"distances_sum":468.28278757476835}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6953125,"f1":0.8096715784215792,"seconds":5.435198545455933e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.109375,"distances_sum":1706.7584084717068}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41015625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.41015625,"f1":null,"seconds":4.325062036514282e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":6.375,"distances_sum":933.0663940170341}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5791015625, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.5791015625,"f1":null,"seconds":4.794448614120483e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":7.1796875,"distances_sum":1369.7187277732405}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6953125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6953125,"f1":0.8096715784215792,"seconds":5.435198545455933e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.109375,"distances_sum":1706.7584084717068}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.860497315184816,"seconds":5.7425349950790405e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.5234375,"distances_sum":1936.98472038428}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9563504204129211,"seconds":6.370246410369873e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.8125,"distances_sum":2565.3512548005415}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9323202838827844,"seconds":6.083399057388306e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.8203125,"distances_sum":2361.1550522522016}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9299939643689652,"seconds":6.310641765594482e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.8515625,"distances_sum":2308.809108006989}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9563504204129211,"seconds":6.370246410369873e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.8125,"distances_sum":2565.3512548005415}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9723614926739932,"seconds":6.563961505889893e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.90625,"distances_sum":2649.74117337288}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9761733058608062,"seconds":6.735324859619141e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.9609375,"distances_sum":2663.418120146746}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9633070054945062,"seconds":6.414949893951416e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.9609375,"distances_sum":2542.688517683538}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9748340201465202,"seconds":6.59748911857605e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.953125,"distances_sum":2653.29540267916}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9761733058608062,"seconds":6.735324859619141e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.9609375,"distances_sum":2663.418120146746}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9761733058608062,"seconds":6.735324859619141e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.9609375,"distances_sum":2663.418120146746}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.8428321678321689,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.171875,"distances_sum":1892.1632706686119}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3466796875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3466796875,"f1":null,"seconds":3.846362233161926e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":5.7421875,"distances_sum":866.1777872625725}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7412109375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7412109375,"f1":0.8428321678321689,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.171875,"distances_sum":1892.1632706686119}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8961595695970705,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.3359375,"distances_sum":2182.054691963131}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9419585622710629,"seconds":5.992129445075989e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.7890625,"distances_sum":2405.7285007094065}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8460851648351657,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.25,"distances_sum":1892.8352790341276}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.89030760905761,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.28125,"distances_sum":2130.797879932324}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8994140625,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.8994140625,"f1":0.9419585622710629,"seconds":5.992129445075989e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.7890625,"distances_sum":2405.7285007094065}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9628777472527474,"seconds":6.105750799179077e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.8125,"distances_sum":2569.7983605434056}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9450606684981687,"seconds":5.939975380897522e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.703125,"distances_sum":2462.317478897426}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9596955128205131,"seconds":6.239861249923706e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.875,"distances_sum":2526.363319100448}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9606284340659346,"seconds":6.3497573137283325e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.859375,"distances_sum":2525.6877204537695}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9581501831501837,"seconds":6.148591637611389e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.8125,"distances_sum":2510.677247216137}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9628777472527474,"seconds":6.105750799179077e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.8125,"distances_sum":2569.7983605434056}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9628777472527474,"seconds":6.105750799179077e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.8125,"distances_sum":2569.7983605434056}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.61328125, conf: {"ssize":1,"bsize":4}, perf: {"precision":0.9833891369047617,"recall":0.61328125,"f1":0.7415139547952052,"seconds":5.284324288368225e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":7.8671875,"distances_sum":1076.3913821492613}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.296875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.296875,"f1":null,"seconds":4.1406601667404175e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":5.8359375,"distances_sum":532.5066693359367}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.61328125,"state":{"ssize":1,"bsize":4},"perf":{"precision":0.9833891369047617,"recall":0.61328125,"f1":0.7415139547952052,"seconds":5.284324288368225e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":7.8671875,"distances_sum":1076.3913821492613}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":3,"bsize":5}, perf: {"precision":0.986904761904762,"recall":0.7705078125,"f1":0.8582953504828512,"seconds":5.0067901611328125e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.5390625,"distances_sum":1367.2205254022517}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":3,"bsize":7}, perf: {"precision":0.9898158482142858,"recall":0.8984375,"f1":0.9383334764194141,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.890625,"distances_sum":1637.50731463799}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9874627976190476,"recall":0.775390625,"f1":0.8605451839826843,"seconds":5.073845386505127e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.515625,"distances_sum":1377.3186092853962}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8984375,"state":{"ssize":3,"bsize":7},"perf":{"precision":0.9898158482142858,"recall":0.8984375,"f1":0.9383334764194141,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.890625,"distances_sum":1637.50731463799}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":10}, perf: {"precision":0.9902343749999999,"recall":0.9384765625,"f1":0.961906192765568,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.96875,"distances_sum":1784.4825336978568}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":5,"bsize":9}, perf: {"precision":0.9888392857142857,"recall":0.9208984375,"f1":0.9502835705960709,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.875,"distances_sum":1758.5826190094688}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":6,"bsize":11}, perf: {"precision":0.9876767113095238,"recall":0.9462890625,"f1":0.9645740327380954,"seconds":6.0033053159713745e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.953125,"distances_sum":1829.3194879427488}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":0.9883742559523809,"recall":0.91015625,"f1":0.9445183722527478,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.890625,"distances_sum":1706.0284071743479}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":6,"bsize":11},"perf":{"precision":0.9876767113095238,"recall":0.9462890625,"f1":0.9645740327380954,"seconds":6.0033053159713745e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.953125,"distances_sum":1829.3194879427488}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":6,"bsize":11},"perf":{"precision":0.9876767113095238,"recall":0.9462890625,"f1":0.9645740327380954,"seconds":6.0033053159713745e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.953125,"distances_sum":1829.3194879427488}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.794921875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.794921875,"f1":0.8754037629037636,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.28125,"distances_sum":1457.5606364149078}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6591796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6591796875,"f1":0.7799573690198698,"seconds":4.695728421211243e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.6953125,"distances_sum":1153.7133783938114}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.65625,"f1":0.7807525807525816,"seconds":4.779547452926636e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.5390625,"distances_sum":1166.3534931287018}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.794921875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.794921875,"f1":0.8754037629037636,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.28125,"distances_sum":1457.5606364149078}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9390141108891115,"seconds":5.695968866348267e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.671875,"distances_sum":1753.2661787981388}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9227314352314357,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.703125,"distances_sum":1685.3115006057}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9572432775557783,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7578125,"distances_sum":1840.382799445315}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9328614094239099,"seconds":5.811452865600586e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.765625,"distances_sum":1687.1924197601925}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9005843115218121,"seconds":5.602836608886719e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.6015625,"distances_sum":1572.5166261926654}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9437245046620051,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7265625,"distances_sum":1778.5349624452645}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9572432775557783,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7578125,"distances_sum":1840.382799445315}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9667639652014656,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.90625,"distances_sum":1866.07047607558}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9763965201465205,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9296875,"distances_sum":1920.1880865091916}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.965238927738928,"seconds":6.0908496379852295e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.765625,"distances_sum":1886.848714403841}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9628033424908429,"seconds":6.064772605895996e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8359375,"distances_sum":1858.5283671495056}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9763965201465205,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9296875,"distances_sum":1920.1880865091916}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9763965201465205,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9296875,"distances_sum":1920.1880865091916}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.318359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.318359375,"f1":null,"seconds":3.520399332046509e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":5.53125,"distances_sum":547.486401862991}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6689453125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6689453125,"f1":0.7892159923409933,"seconds":4.967674612998962e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.8203125,"distances_sum":1203.6866413549287}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6689453125,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6689453125,"f1":0.7892159923409933,"seconds":4.967674612998962e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.8203125,"distances_sum":1203.6866413549287}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8633907758907766,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.34375,"distances_sum":1430.7559329633327}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7783203125,"state":{"ssize":8,"bsize":5},"perf":{"precision":1.0,"recall":0.7783203125,"f1":0.8633907758907766,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.34375,"distances_sum":1430.7559329633327}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":11,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.952444430569431,"seconds":6.882473826408386e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.765625,"distances_sum":1812.771030217131}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.906639714452215,"seconds":6.103888154029846e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.6171875,"distances_sum":1619.750763385008}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.936057692307693,"seconds":5.403533577919006e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.6328125,"distances_sum":1753.3333819818986}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.902455357142858,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.671875,"distances_sum":1534.957401604449}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":11,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.952444430569431,"seconds":6.882473826408386e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.765625,"distances_sum":1812.771030217131}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91796875,"state":{"ssize":11,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.952444430569431,"seconds":6.882473826408386e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.765625,"distances_sum":1812.771030217131}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.603515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.603515625,"f1":null,"seconds":4.373490810394287e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":7.6953125,"distances_sum":1009.7705914979638}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1787109375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1787109375,"f1":null,"seconds":3.1013041734695435e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":5.390625,"distances_sum":302.2061211552523}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3642578125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3642578125,"f1":null,"seconds":3.689900040626526e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":6.046875,"distances_sum":634.6439284085372}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.603515625,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.603515625,"f1":null,"seconds":4.373490810394287e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":7.6953125,"distances_sum":1009.7705914979638}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.9198946886446895,"seconds":5.792826414108276e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":8.828125,"distances_sum":1584.4090061888908}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8649678446553456,"seconds":5.258247256278992e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":8.53125,"distances_sum":1383.9605187370003}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8076171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.8076171875,"f1":0.8846559690309695,"seconds":5.3122639656066895e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":8.53125,"distances_sum":1460.6552770777475}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.701171875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.701171875,"f1":0.8141696844821855,"seconds":4.859641194343567e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":8.2734375,"distances_sum":1172.797374476593}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8603515625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8603515625,"f1":0.9198946886446895,"seconds":5.792826414108276e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":8.828125,"distances_sum":1584.4090061888908}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9513450091575096,"seconds":5.884096026420593e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":8.78125,"distances_sum":1765.543206171048}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9357028388278396,"seconds":5.723908543586731e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":8.7578125,"distances_sum":1678.9165221239737}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9326897061272067,"seconds":5.6140124797821045e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":8.7890625,"distances_sum":1652.090921021172}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.949613927738928,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":8.71875,"distances_sum":1777.2006110733819}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9513450091575096,"seconds":5.884096026420593e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":8.78125,"distances_sum":1765.543206171048}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9513450091575096,"seconds":5.884096026420593e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":8.78125,"distances_sum":1765.543206171048}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.361328125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.361328125,"f1":null,"seconds":3.563240170478821e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":6.2578125,"distances_sum":587.5181586574049}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4111328125, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4111328125,"f1":null,"seconds":3.8351863622665405e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":6.671875,"distances_sum":669.373557314122}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5791015625, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.5791015625,"f1":null,"seconds":4.233792424201965e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.359375,"distances_sum":908.2366915213191}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5791015625,"state":{"ssize":2,"bsize":3},"perf":{"precision":null,"recall":0.5791015625,"f1":null,"seconds":4.233792424201965e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.359375,"distances_sum":908.2366915213191}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5859375, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.5859375,"f1":0.7201491217116222,"seconds":4.127621650695801e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.28125,"distances_sum":941.6829509619068}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.937660256410257,"seconds":5.763024091720581e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.765625,"distances_sum":1617.7842204617498}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.937660256410257,"seconds":5.763024091720581e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.765625,"distances_sum":1617.7842204617498}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9645833333333339,"seconds":6.023794412612915e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.90625,"distances_sum":1747.4597008025594}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9645833333333339,"seconds":6.023794412612915e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.90625,"distances_sum":1747.4597008025594}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9645833333333339,"seconds":6.023794412612915e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.90625,"distances_sum":1747.4597008025594}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8487158674658681,"seconds":5.243346095085144e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.3203125,"distances_sum":1428.7612151578262}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7529296875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7529296875,"f1":0.8487158674658681,"seconds":5.243346095085144e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.3203125,"distances_sum":1428.7612151578262}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8505728646353655,"seconds":5.055218935012817e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.2578125,"distances_sum":1414.3154758345795}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7548828125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.8505728646353655,"seconds":5.055218935012817e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.2578125,"distances_sum":1414.3154758345795}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.7548828125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.8505728646353655,"seconds":5.055218935012817e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.2578125,"distances_sum":1414.3154758345795}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.169921875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.169921875,"f1":null,"seconds":2.9671937227249146e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":5.0546875,"distances_sum":353.8790125960852}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.169921875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.169921875,"f1":null,"seconds":2.9671937227249146e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":5.0546875,"distances_sum":353.8790125960852}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.53125, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.53125,"f1":null,"seconds":4.120171070098877e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":7.1953125,"distances_sum":1058.8652799356764}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2529296875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2529296875,"f1":null,"seconds":3.1888484954833984e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":6.703125,"distances_sum":566.7076699194878}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.53125,"state":{"ssize":2,"bsize":3},"perf":{"precision":null,"recall":0.53125,"f1":null,"seconds":4.120171070098877e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":7.1953125,"distances_sum":1058.8652799356764}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.927340888278389,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.46875,"distances_sum":2137.8402873486925}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8759765625,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8759765625,"f1":0.927340888278389,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.46875,"distances_sum":2137.8402873486925}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9734031593406596,"seconds":5.617737770080566e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.90625,"distances_sum":2464.516577603046}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9379438270063275,"seconds":5.4836273193359375e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.46875,"distances_sum":2245.213948864243}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9734031593406596,"seconds":5.617737770080566e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.90625,"distances_sum":2464.516577603046}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9734031593406596,"seconds":5.617737770080566e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.90625,"distances_sum":2464.516577603046}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4052734375, conf: {"ssize":5,"bsize":2}, perf: {"precision":1.0,"recall":0.4052734375,"f1":0.5558975746475745,"seconds":3.546476364135742e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":6.421875,"distances_sum":836.9982390344129}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.796875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.796875,"f1":0.8781114718614728,"seconds":4.9639493227005005e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.0625,"distances_sum":1856.9756266726715}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.427734375, conf: {"ssize":2,"bsize":2}, perf: {"precision":1.0,"recall":0.427734375,"f1":0.5769778832278832,"seconds":3.7495046854019165e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":6.3359375,"distances_sum":904.6659972388237}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.796875,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.796875,"f1":0.8781114718614728,"seconds":4.9639493227005005e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.0625,"distances_sum":1856.9756266726715}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9607371794871802,"seconds":5.602836608886719e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.8671875,"distances_sum":2397.1075454573543}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8076171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.8076171875,"f1":0.885291271228772,"seconds":4.939734935760498e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.0625,"distances_sum":1911.0134605712515}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.9122162559662567,"seconds":5.25452196598053e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.5,"distances_sum":2106.2743023126664}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9607371794871802,"seconds":5.602836608886719e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.8671875,"distances_sum":2397.1075454573543}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9744619963369965,"seconds":6.0461461544036865e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.8984375,"distances_sum":2496.7750994419093}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9628376831501836,"seconds":5.649402737617493e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.875,"distances_sum":2416.9315233211887}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9620936355311358,"seconds":5.865469574928284e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.859375,"distances_sum":2422.23176142792}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9744619963369965,"seconds":6.0461461544036865e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.8984375,"distances_sum":2496.7750994419093}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9744619963369965,"seconds":6.0461461544036865e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.8984375,"distances_sum":2496.7750994419093}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6875,"f1":0.8029083763458771,"seconds":4.580244421958923e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.609375,"distances_sum":1547.393158173026}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6875,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6875,"f1":0.8029083763458771,"seconds":4.580244421958923e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.609375,"distances_sum":1547.393158173026}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8562395937395947,"seconds":5.152076482772827e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.90625,"distances_sum":1780.7102361672235}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9103771228771237,"seconds":5.500391125679016e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.421875,"distances_sum":2100.9586089180702}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8466796875,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.8466796875,"f1":0.9103771228771237,"seconds":5.500391125679016e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.421875,"distances_sum":2100.9586089180702}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9332360347985355,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.6015625,"distances_sum":2260.997812584821}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9455960705960713,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.6953125,"distances_sum":2387.3356227937106}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9476076007326013,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.75,"distances_sum":2366.2747259229855}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9072265625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9476076007326013,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.75,"distances_sum":2366.2747259229855}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9072265625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9476076007326013,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.75,"distances_sum":2366.2747259229855}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.870224567099568,"seconds":5.319714546203613e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.78125,"distances_sum":1850.6873376326341}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.576171875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.576171875,"f1":0.7150049603174611,"seconds":3.9637088775634766e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":6.8046875,"distances_sum":1266.4015191278163}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.232421875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.232421875,"f1":null,"seconds":3.429129719734192e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":6.140625,"distances_sum":537.0769408929491}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.78125,"f1":0.870224567099568,"seconds":5.319714546203613e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.78125,"distances_sum":1850.6873376326341}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9570741758241765,"seconds":5.617737770080566e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8125,"distances_sum":2450.974585463408}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8970097610722618,"seconds":5.321577191352844e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.1328125,"distances_sum":2021.8645440905589}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7939453125, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7939453125,"f1":0.8785173160173166,"seconds":4.779547452926636e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.859375,"distances_sum":1909.6697793173735}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9570741758241765,"seconds":5.617737770080566e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8125,"distances_sum":2450.974585463408}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.972435897435898,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.90625,"distances_sum":2537.5485965521507}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.972435897435898,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.90625,"distances_sum":2537.5485965521507}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.972435897435898,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.90625,"distances_sum":2537.5485965521507}}, n: 9
inertia(cfft.distances) = 21.02653969102793
inertia(cdnet.distances) = 22.487844428587294
inertia(crand.distances) = 33.70852421645433
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.86
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.88
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.9
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9288888888888889
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9444444444444445
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8266666666666667
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8822222222222221
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9044444444444445
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9222222222222222
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8933333333333332
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9311111111111111
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9222222222222222
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9222222222222222
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8444444444444444
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8799999999999999
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8777777777777779
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8777777777777778
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9333333333333332
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8755555555555555
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8911111111111111
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9133333333333334
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9133333333333334
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8511111111111113
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8822222222222221
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8688888888888888
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.888888888888889
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX===== rocchio like>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX==== clustering>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
nc.class_map = [1, 3, 3, 2, 1, 3, 2, 2, 3, 3, 3, 3, 1, 2, 3, 3, 2, 3, 3, 1, 2]
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 14]]
** centroid: 7, normalized-entropy: 0.6722948170756378, [(2, 3), (3, 14)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 13, 1]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 13), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 3, 1, 2, 2]
acc = 0.9533333333333334
*** finished computation of 12 references, err: [Inf, 0.5148309205969175] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 25]]
** centroid: 1, normalized-entropy: 0.23519338181924157, [(2, 1), (3, 25)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 15, 4]]
** centroid: 6, normalized-entropy: 0.7424875695421234, [(2, 15), (3, 4)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 8, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 9, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
acc = 0.9666666666666667
Test Summary:   | Pass  Total
NearestCentroid |   10     10
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.9225689181685448] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9225689181685448, 0.6914577306807042] ***
*** starting iteration: 2; err: [Inf, 0.9225689181685448, 0.6914577306807042] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9225689181685448, 0.6914577306807042, 0.6659018278121949] ***
*** starting iteration: 3; err: [Inf, 0.9225689181685448, 0.6914577306807042, 0.6659018278121949] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9225689181685448, 0.6914577306807042, 0.6659018278121949, 0.6056581472605467] ***
*** finished computation of 3 references, err: [Inf, 0.9225689181685448, 0.6914577306807042, 0.6659018278121949, 0.6056581472605467] ***
*** center 1: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 15, 35]]
** centroid: 2, normalized-entropy: 0.8812908992306927, [(2, 15), (3, 35)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 3, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8555119121074677] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8555119121074677, 0.5985215914994478] ***
*** finished computation of 3 references, err: [Inf, 0.8555119121074677, 0.5985215914994478] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 29, 20]]
** centroid: 1, normalized-entropy: 0.9755259511264975, [(2, 29), (3, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [34, 1, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8910944467782974] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8910944467782974, 0.5695521233603358] ***
*** finished computation of 3 references, err: [Inf, 0.8910944467782974, 0.5695521233603358] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 37, 18]]
** centroid: 1, normalized-entropy: 0.9121156307204275, [(2, 37), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 13]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8006679639220238] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8006679639220238, 0.5852751038223505] ***
*** finished computation of 3 references, err: [Inf, 0.8006679639220238, 0.5852751038223505] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 32, 18]]
** centroid: 1, normalized-entropy: 0.9426831892554921, [(2, 32), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [34, 1, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7378048215061426] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7378048215061426, 0.5390085091814398] ***
*** starting iteration: 2; err: [Inf, 0.7378048215061426, 0.5390085091814398] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7378048215061426, 0.5390085091814398, 0.5245977374538779] ***
*** starting iteration: 3; err: [Inf, 0.7378048215061426, 0.5390085091814398, 0.5245977374538779] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7378048215061426, 0.5390085091814398, 0.5245977374538779, 0.5209378407523036] ***
*** finished computation of 3 references, err: [Inf, 0.7378048215061426, 0.5390085091814398, 0.5245977374538779, 0.5209378407523036] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 12, 31]]
** centroid: 1, normalized-entropy: 0.8541802051521676, [(2, 12), (3, 31)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 25, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7281301145255565] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7281301145255565, 0.560060349330306] ***
*** starting iteration: 2; err: [Inf, 0.7281301145255565, 0.560060349330306] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7281301145255565, 0.560060349330306, 0.5604883369058371] ***
*** finished computation of 3 references, err: [Inf, 0.7281301145255565, 0.560060349330306, 0.5604883369058371] ***
*** center 1: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 33, 12]]
** centroid: 2, normalized-entropy: 0.8366407419411671, [(2, 33), (3, 12)]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7323327735066414] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7323327735066414, 0.6953037464618683] ***
*** starting iteration: 2; err: [Inf, 0.7323327735066414, 0.6953037464618683] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7323327735066414, 0.6953037464618683, 0.6943464843183755] ***
*** finished computation of 3 references, err: [Inf, 0.7323327735066414, 0.6953037464618683, 0.6943464843183755] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [4, 3, 0]]
** centroid: 1, normalized-entropy: 0.9852281360342514, [(1, 4), (2, 3)]
*** center 2: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 27, 36]]
** centroid: 3, normalized-entropy: 0.9852281360342514, [(2, 27), (3, 36)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.24881854981184] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.24881854981184, 0.6266765619814396] ***
*** starting iteration: 2; err: [Inf, 1.24881854981184, 0.6266765619814396] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.24881854981184, 0.6266765619814396, 0.5198598645254969] ***
*** starting iteration: 3; err: [Inf, 1.24881854981184, 0.6266765619814396, 0.5198598645254969] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.24881854981184, 0.6266765619814396, 0.5198598645254969, 0.5158588778600097] ***
*** finished computation of 3 references, err: [Inf, 1.24881854981184, 0.6266765619814396, 0.5198598645254969, 0.5158588778600097] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 29, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 8, 31]]
** centroid: 3, normalized-entropy: 0.7320666900931937, [(2, 8), (3, 31)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7024151420593262] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7024151420593262, 0.5609477493166923] ***
*** starting iteration: 2; err: [Inf, 0.7024151420593262, 0.5609477493166923] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7024151420593262, 0.5609477493166923, 0.5615547996014356] ***
*** finished computation of 3 references, err: [Inf, 0.7024151420593262, 0.5609477493166923, 0.5615547996014356] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 2, 22]]
** centroid: 1, normalized-entropy: 0.4138168503036336, [(2, 2), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 31, 11]]
** centroid: 3, normalized-entropy: 0.8296071030882032, [(2, 31), (3, 11)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.3601707905530929] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3601707905530929, 0.6401060333102941] ***
*** finished computation of 3 references, err: [Inf, 1.3601707905530929, 0.6401060333102941] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 15, 35]]
** centroid: 1, normalized-entropy: 0.8812908992306927, [(2, 15), (3, 35)]
*** center 2: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 3, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6609326126426458] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6609326126426458, 0.616051452755928] ***
*** finished computation of 3 references, err: [Inf, 0.6609326126426458, 0.616051452755928] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 37, 31]]
** centroid: 1, normalized-entropy: 0.9943766625699823, [(2, 37), (3, 31)]
*** center 2: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6832415690273046] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6832415690273046, 0.5597717779129744] ***
*** finished computation of 3 references, err: [Inf, 0.6832415690273046, 0.5597717779129744] ***
*** center 1: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 31, 9]]
** centroid: 2, normalized-entropy: 0.7691928290130138, [(2, 31), (3, 9)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 24]]
** centroid: 3, normalized-entropy: 0.3912435636292556, [(2, 2), (3, 24)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6638430392742157] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6638430392742157, 0.5448464568704366] ***
*** starting iteration: 2; err: [Inf, 0.6638430392742157, 0.5448464568704366] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6638430392742157, 0.5448464568704366, 0.5402058403939008] ***
*** starting iteration: 3; err: [Inf, 0.6638430392742157, 0.5448464568704366, 0.5402058403939008] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6638430392742157, 0.5448464568704366, 0.5402058403939008, 0.5403137387335301] ***
*** finished computation of 3 references, err: [Inf, 0.6638430392742157, 0.5448464568704366, 0.5402058403939008, 0.5403137387335301] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 30]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(2, 3), (3, 30)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 27, 6]]
** centroid: 2, normalized-entropy: 0.6840384356390419, [(2, 27), (3, 6)]
*** center 3: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9215071689337492] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9215071689337492, 0.6215882813930511] ***
*** starting iteration: 2; err: [Inf, 0.9215071689337492, 0.6215882813930511] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9215071689337492, 0.6215882813930511, 0.616376441642642] ***
*** starting iteration: 3; err: [Inf, 0.9215071689337492, 0.6215882813930511, 0.616376441642642] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9215071689337492, 0.6215882813930511, 0.616376441642642, 0.6158245410025119] ***
*** finished computation of 3 references, err: [Inf, 0.9215071689337492, 0.6215882813930511, 0.616376441642642, 0.6158245410025119] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 37, 31]]
** centroid: 1, normalized-entropy: 0.9943766625699823, [(2, 37), (3, 31)]
*** center 2: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8927206920832396] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8927206920832396, 0.5923911079764366] ***
*** starting iteration: 2; err: [Inf, 0.8927206920832396, 0.5923911079764366] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8927206920832396, 0.5923911079764366, 0.5784676019847393] ***
*** starting iteration: 3; err: [Inf, 0.8927206920832396, 0.5923911079764366, 0.5784676019847393] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8927206920832396, 0.5923911079764366, 0.5784676019847393, 0.5640903088450432] ***
*** starting iteration: 4; err: [Inf, 0.8927206920832396, 0.5923911079764366, 0.5784676019847393, 0.5640903088450432] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8927206920832396, 0.5923911079764366, 0.5784676019847393, 0.5640903088450432, 0.560319101139903] ***
*** starting iteration: 5; err: [Inf, 0.8927206920832396, 0.5923911079764366, 0.5784676019847393, 0.5640903088450432, 0.560319101139903] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8927206920832396, 0.5923911079764366, 0.5784676019847393, 0.5640903088450432, 0.560319101139903, 0.560319101139903] ***
*** finished computation of 3 references, err: [Inf, 0.8927206920832396, 0.5923911079764366, 0.5784676019847393, 0.5640903088450432, 0.560319101139903, 0.560319101139903] ***
*** center 1: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 33, 12]]
** centroid: 3, normalized-entropy: 0.8366407419411671, [(2, 33), (3, 12)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5952661947906017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5952661947906017, 0.4387138532847166] ***
*** starting iteration: 2; err: [Inf, 0.5952661947906017, 0.4387138532847166] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5952661947906017, 0.4387138532847166, 0.42612162545323373] ***
*** starting iteration: 3; err: [Inf, 0.5952661947906017, 0.4387138532847166, 0.42612162545323373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5952661947906017, 0.4387138532847166, 0.42612162545323373, 0.4144407020509243] ***
*** starting iteration: 4; err: [Inf, 0.5952661947906017, 0.4387138532847166, 0.42612162545323373, 0.4144407020509243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5952661947906017, 0.4387138532847166, 0.42612162545323373, 0.4144407020509243, 0.4086237162351608] ***
*** starting iteration: 5; err: [Inf, 0.5952661947906017, 0.4387138532847166, 0.42612162545323373, 0.4144407020509243, 0.4086237162351608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5952661947906017, 0.4387138532847166, 0.42612162545323373, 0.4144407020509243, 0.4086237162351608, 0.3915699888765812] ***
*** starting iteration: 6; err: [Inf, 0.5952661947906017, 0.4387138532847166, 0.42612162545323373, 0.4144407020509243, 0.4086237162351608, 0.3915699888765812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5952661947906017, 0.4387138532847166, 0.42612162545323373, 0.4144407020509243, 0.4086237162351608, 0.3915699888765812, 0.38380343839526176] ***
*** starting iteration: 7; err: [Inf, 0.5952661947906017, 0.4387138532847166, 0.42612162545323373, 0.4144407020509243, 0.4086237162351608, 0.3915699888765812, 0.38380343839526176] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5952661947906017, 0.4387138532847166, 0.42612162545323373, 0.4144407020509243, 0.4086237162351608, 0.3915699888765812, 0.38380343839526176, 0.38329429164528844] ***
*** finished computation of 7 references, err: [Inf, 0.5952661947906017, 0.4387138532847166, 0.42612162545323373, 0.4144407020509243, 0.4086237162351608, 0.3915699888765812, 0.38380343839526176, 0.38329429164528844] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 8, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 5, 6]]
** centroid: 3, normalized-entropy: 0.9940302114769566, [(2, 5), (3, 6)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 11, 1]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 7: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6100826378166676] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6100826378166676, 0.390755049996078] ***
*** starting iteration: 2; err: [Inf, 0.6100826378166676, 0.390755049996078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6100826378166676, 0.390755049996078, 0.3771585134416819] ***
*** starting iteration: 3; err: [Inf, 0.6100826378166676, 0.390755049996078, 0.3771585134416819] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6100826378166676, 0.390755049996078, 0.3771585134416819, 0.37338184744119646] ***
*** starting iteration: 4; err: [Inf, 0.6100826378166676, 0.390755049996078, 0.3771585134416819, 0.37338184744119646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6100826378166676, 0.390755049996078, 0.3771585134416819, 0.37338184744119646, 0.36778402864933013] ***
*** starting iteration: 5; err: [Inf, 0.6100826378166676, 0.390755049996078, 0.3771585134416819, 0.37338184744119646, 0.36778402864933013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6100826378166676, 0.390755049996078, 0.3771585134416819, 0.37338184744119646, 0.36778402864933013, 0.3638083340227604] ***
*** starting iteration: 6; err: [Inf, 0.6100826378166676, 0.390755049996078, 0.3771585134416819, 0.37338184744119646, 0.36778402864933013, 0.3638083340227604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6100826378166676, 0.390755049996078, 0.3771585134416819, 0.37338184744119646, 0.36778402864933013, 0.3638083340227604, 0.3634845644235611] ***
*** finished computation of 7 references, err: [Inf, 0.6100826378166676, 0.390755049996078, 0.3771585134416819, 0.37338184744119646, 0.36778402864933013, 0.3638083340227604, 0.3634845644235611] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 19, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 14, 2]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(2, 14), (3, 2)]
*** center 4: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 4, 9]]
** centroid: 5, normalized-entropy: 0.8904916402194913, [(2, 4), (3, 9)]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 7: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4950797671079636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4950797671079636, 0.4040670424699783] ***
*** starting iteration: 2; err: [Inf, 0.4950797671079636, 0.4040670424699783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4950797671079636, 0.4040670424699783, 0.3806662107259035] ***
*** starting iteration: 3; err: [Inf, 0.4950797671079636, 0.4040670424699783, 0.3806662107259035] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4950797671079636, 0.4040670424699783, 0.3806662107259035, 0.3663784256577492] ***
*** starting iteration: 4; err: [Inf, 0.4950797671079636, 0.4040670424699783, 0.3806662107259035, 0.3663784256577492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4950797671079636, 0.4040670424699783, 0.3806662107259035, 0.3663784256577492, 0.35977617006748913] ***
*** starting iteration: 5; err: [Inf, 0.4950797671079636, 0.4040670424699783, 0.3806662107259035, 0.3663784256577492, 0.35977617006748913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4950797671079636, 0.4040670424699783, 0.3806662107259035, 0.3663784256577492, 0.35977617006748913, 0.3590192774683237] ***
*** finished computation of 7 references, err: [Inf, 0.4950797671079636, 0.4040670424699783, 0.3806662107259035, 0.3663784256577492, 0.35977617006748913, 0.3590192774683237] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 2, 13]]
** centroid: 1, normalized-entropy: 0.5665095065529052, [(2, 2), (3, 13)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 14, 1]]
*** center 3: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 12, 9]]
** centroid: 4, normalized-entropy: 0.9852281360342514, [(2, 12), (3, 9)]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 10]]
*** center 6: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 5, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.9178903342783451] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9178903342783451, 0.680993011072278] ***
*** starting iteration: 2; err: [Inf, 0.9178903342783451, 0.680993011072278] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9178903342783451, 0.680993011072278, 0.6821953014284372] ***
*** finished computation of 3 references, err: [Inf, 0.9178903342783451, 0.680993011072278, 0.6821953014284372] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 27, 36]]
** centroid: 1, normalized-entropy: 0.9852281360342514, [(2, 27), (3, 36)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [19, 3, 0]]
** centroid: 2, normalized-entropy: 0.5746356978376794, [(1, 19), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.3177494054287673] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3177494054287673, 0.6208735682070256] ***
*** starting iteration: 2; err: [Inf, 1.3177494054287673, 0.6208735682070256] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3177494054287673, 0.6208735682070256, 0.620326053276658] ***
*** finished computation of 3 references, err: [Inf, 1.3177494054287673, 0.6208735682070256, 0.620326053276658] ***
*** center 1: selecting labels [1] (freq >= 2) [from [21, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 37, 31]]
** centroid: 3, normalized-entropy: 0.9943766625699823, [(2, 37), (3, 31)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.7799260558187961] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7799260558187961, 1.1421660609543323] ***
*** starting iteration: 2; err: [Inf, 1.7799260558187961, 1.1421660609543323] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7799260558187961, 1.1421660609543323, 0.8283789974451065] ***
*** starting iteration: 3; err: [Inf, 1.7799260558187961, 1.1421660609543323, 0.8283789974451065] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7799260558187961, 1.1421660609543323, 0.8283789974451065, 0.5986444108188153] ***
*** finished computation of 3 references, err: [Inf, 1.7799260558187961, 1.1421660609543323, 0.8283789974451065, 0.5986444108188153] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 32, 20]]
** centroid: 1, normalized-entropy: 0.961236604722876, [(2, 32), (3, 20)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 13]]
*** center 3: selecting labels [1] (freq >= 2) [from [34, 1, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.118109714090824] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.118109714090824, 0.8639311535656452] ***
*** starting iteration: 2; err: [Inf, 1.118109714090824, 0.8639311535656452] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.118109714090824, 0.8639311535656452, 0.8380337649583817] ***
*** starting iteration: 3; err: [Inf, 1.118109714090824, 0.8639311535656452, 0.8380337649583817] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.118109714090824, 0.8639311535656452, 0.8380337649583817, 0.8382732189446688] ***
*** finished computation of 3 references, err: [Inf, 1.118109714090824, 0.8639311535656452, 0.8380337649583817, 0.8382732189446688] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [17, 3, 0]]
** centroid: 1, normalized-entropy: 0.6098403047164005, [(1, 17), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 27, 36]]
** centroid: 2, normalized-entropy: 0.9852281360342514, [(2, 27), (3, 36)]
*** center 3: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.6153079058229922] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.6153079058229922, 0.6593914146721364] ***
*** starting iteration: 2; err: [Inf, 1.6153079058229922, 0.6593914146721364] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.6153079058229922, 0.6593914146721364, 0.624254762865603] ***
*** starting iteration: 3; err: [Inf, 1.6153079058229922, 0.6593914146721364, 0.624254762865603] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.6153079058229922, 0.6593914146721364, 0.624254762865603, 0.6234260371699929] ***
*** finished computation of 3 references, err: [Inf, 1.6153079058229922, 0.6593914146721364, 0.624254762865603, 0.6234260371699929] ***
*** center 1: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 30, 1]]
** centroid: 2, normalized-entropy: 0.2055925081850832, [(2, 30), (3, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 7, 30]]
** centroid: 3, normalized-entropy: 0.699772221773307, [(2, 7), (3, 30)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8093653162568808] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8093653162568808, 0.6695718149840831] ***
*** starting iteration: 2; err: [Inf, 0.8093653162568808, 0.6695718149840831] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8093653162568808, 0.6695718149840831, 0.6695470872521401] ***
*** finished computation of 3 references, err: [Inf, 0.8093653162568808, 0.6695718149840831, 0.6695470872521401] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 32, 11]]
** centroid: 1, normalized-entropy: 0.8203636429576731, [(2, 32), (3, 11)]
*** center 2: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 1, 22]]
** centroid: 3, normalized-entropy: 0.2580186686648155, [(2, 1), (3, 22)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5766744585335255] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5766744585335255, 0.4293845371156931] ***
*** finished computation of 7 references, err: [Inf, 0.5766744585335255, 0.4293845371156931] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 2: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 22, 1]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 8, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.49085761301219466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.49085761301219466, 0.4259341201558709] ***
*** finished computation of 7 references, err: [Inf, 0.49085761301219466, 0.4259341201558709] ***
*** center 1: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 19]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 6, 5]]
** centroid: 4, normalized-entropy: 0.9940302114769566, [(2, 6), (3, 5)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 2, 7]]
** centroid: 5, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7699825286865234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7699825286865234, 0.4745554882660508] ***
*** finished computation of 7 references, err: [Inf, 0.7699825286865234, 0.4745554882660508] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 12]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(2, 3), (3, 12)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 21]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 28, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 2, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.8020108500123024] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8020108500123024, 0.6885819124430418] ***
*** starting iteration: 2; err: [Inf, 0.8020108500123024, 0.6885819124430418] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8020108500123024, 0.6885819124430418, 0.6889174170792103] ***
*** finished computation of 3 references, err: [Inf, 0.8020108500123024, 0.6885819124430418, 0.6889174170792103] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 27, 36]]
** centroid: 1, normalized-entropy: 0.9852281360342514, [(2, 27), (3, 36)]
*** center 2: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [12, 3, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 12), (2, 3)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.457682576626539] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.457682576626539, 0.972331277281046] ***
*** starting iteration: 2; err: [Inf, 2.457682576626539, 0.972331277281046] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.457682576626539, 0.972331277281046, 0.6457169406861066] ***
*** starting iteration: 3; err: [Inf, 2.457682576626539, 0.972331277281046, 0.6457169406861066] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.457682576626539, 0.972331277281046, 0.6457169406861066, 0.6457169406861066] ***
*** finished computation of 3 references, err: [Inf, 2.457682576626539, 0.972331277281046, 0.6457169406861066, 0.6457169406861066] ***
*** center 1: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 37, 31]]
** centroid: 2, normalized-entropy: 0.9943766625699823, [(2, 37), (3, 31)]
*** center 3: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.7008377835154533] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7008377835154533, 1.1247879798710345] ***
*** starting iteration: 2; err: [Inf, 1.7008377835154533, 1.1247879798710345] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7008377835154533, 1.1247879798710345, 0.7879449477791787] ***
*** starting iteration: 3; err: [Inf, 1.7008377835154533, 1.1247879798710345, 0.7879449477791787] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7008377835154533, 1.1247879798710345, 0.7879449477791787, 0.5956057265400887] ***
*** starting iteration: 4; err: [Inf, 1.7008377835154533, 1.1247879798710345, 0.7879449477791787, 0.5956057265400887] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7008377835154533, 1.1247879798710345, 0.7879449477791787, 0.5956057265400887, 0.5729190286248922] ***
*** starting iteration: 5; err: [Inf, 1.7008377835154533, 1.1247879798710345, 0.7879449477791787, 0.5956057265400887, 0.5729190286248922] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7008377835154533, 1.1247879798710345, 0.7879449477791787, 0.5956057265400887, 0.5729190286248922, 0.5602324712276459] ***
*** starting iteration: 6; err: [Inf, 1.7008377835154533, 1.1247879798710345, 0.7879449477791787, 0.5956057265400887, 0.5729190286248922, 0.5602324712276459] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7008377835154533, 1.1247879798710345, 0.7879449477791787, 0.5956057265400887, 0.5729190286248922, 0.5602324712276459, 0.560319101139903] ***
*** finished computation of 3 references, err: [Inf, 1.7008377835154533, 1.1247879798710345, 0.7879449477791787, 0.5956057265400887, 0.5729190286248922, 0.5602324712276459, 0.560319101139903] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 21]]
*** center 2: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 33, 12]]
** centroid: 3, normalized-entropy: 0.8366407419411671, [(2, 33), (3, 12)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.3525239452719688] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.3525239452719688, 0.470552164837718] ***
*** starting iteration: 2; err: [Inf, 1.3525239452719688, 0.470552164837718] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.3525239452719688, 0.470552164837718, 0.4123205681145191] ***
*** starting iteration: 3; err: [Inf, 1.3525239452719688, 0.470552164837718, 0.4123205681145191] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.3525239452719688, 0.470552164837718, 0.4123205681145191, 0.40155571945011614] ***
*** starting iteration: 4; err: [Inf, 1.3525239452719688, 0.470552164837718, 0.4123205681145191, 0.40155571945011614] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.3525239452719688, 0.470552164837718, 0.4123205681145191, 0.40155571945011614, 0.4003177685290575] ***
*** starting iteration: 5; err: [Inf, 1.3525239452719688, 0.470552164837718, 0.4123205681145191, 0.40155571945011614, 0.4003177685290575] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.3525239452719688, 0.470552164837718, 0.4123205681145191, 0.40155571945011614, 0.4003177685290575, 0.4003177685290575] ***
*** finished computation of 7 references, err: [Inf, 1.3525239452719688, 0.470552164837718, 0.4123205681145191, 0.40155571945011614, 0.4003177685290575, 0.4003177685290575] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 17, 1]]
** centroid: 3, normalized-entropy: 0.3095434291503252, [(2, 17), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 4, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 7: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4270997089892626] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4270997089892626, 0.3923740988224745] ***
*** starting iteration: 2; err: [Inf, 0.4270997089892626, 0.3923740988224745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4270997089892626, 0.3923740988224745, 0.38688376992940904] ***
*** starting iteration: 3; err: [Inf, 0.4270997089892626, 0.3923740988224745, 0.38688376992940904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4270997089892626, 0.3923740988224745, 0.38688376992940904, 0.37887908205389975] ***
*** starting iteration: 4; err: [Inf, 0.4270997089892626, 0.3923740988224745, 0.38688376992940904, 0.37887908205389975] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4270997089892626, 0.3923740988224745, 0.38688376992940904, 0.37887908205389975, 0.3783520944043994] ***
*** finished computation of 7 references, err: [Inf, 0.4270997089892626, 0.3923740988224745, 0.38688376992940904, 0.37887908205389975, 0.3783520944043994] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 8, 7]]
** centroid: 1, normalized-entropy: 0.9967916319816367, [(2, 8), (3, 7)]
*** center 2: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 12, 10]]
** centroid: 5, normalized-entropy: 0.9940302114769566, [(2, 12), (3, 10)]
*** center 6: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6871860922127963] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6871860922127963, 0.48592871468514204] ***
*** starting iteration: 2; err: [Inf, 0.6871860922127963, 0.48592871468514204] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6871860922127963, 0.48592871468514204, 0.4684531168267131] ***
*** starting iteration: 3; err: [Inf, 0.6871860922127963, 0.48592871468514204, 0.4684531168267131] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6871860922127963, 0.48592871468514204, 0.4684531168267131, 0.4347949418053031] ***
*** starting iteration: 4; err: [Inf, 0.6871860922127963, 0.48592871468514204, 0.4684531168267131, 0.4347949418053031] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6871860922127963, 0.48592871468514204, 0.4684531168267131, 0.4347949418053031, 0.4118670367076993] ***
*** starting iteration: 5; err: [Inf, 0.6871860922127963, 0.48592871468514204, 0.4684531168267131, 0.4347949418053031, 0.4118670367076993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6871860922127963, 0.48592871468514204, 0.4684531168267131, 0.4347949418053031, 0.4118670367076993, 0.40283460590988396] ***
*** starting iteration: 6; err: [Inf, 0.6871860922127963, 0.48592871468514204, 0.4684531168267131, 0.4347949418053031, 0.4118670367076993, 0.40283460590988396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6871860922127963, 0.48592871468514204, 0.4684531168267131, 0.4347949418053031, 0.4118670367076993, 0.40283460590988396, 0.39969299759715793] ***
*** starting iteration: 7; err: [Inf, 0.6871860922127963, 0.48592871468514204, 0.4684531168267131, 0.4347949418053031, 0.4118670367076993, 0.40283460590988396, 0.39969299759715793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6871860922127963, 0.48592871468514204, 0.4684531168267131, 0.4347949418053031, 0.4118670367076993, 0.40283460590988396, 0.39969299759715793, 0.39901558559387923] ***
*** finished computation of 7 references, err: [Inf, 0.6871860922127963, 0.48592871468514204, 0.4684531168267131, 0.4347949418053031, 0.4118670367076993, 0.40283460590988396, 0.39969299759715793, 0.39901558559387923] ***
*** center 1: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 2, normalized-entropy: 0.2974722489192896, [(2, 18), (3, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 15, 12]]
** centroid: 3, normalized-entropy: 0.9910760598382222, [(2, 15), (3, 12)]
*** center 4: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 7: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7688786253333092] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7688786253333092, 0.5441822674870491] ***
*** finished computation of 3 references, err: [Inf, 0.7688786253333092, 0.5441822674870491] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 26, 5]]
** centroid: 1, normalized-entropy: 0.6373874992221911, [(2, 26), (3, 5)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 4, 31]]
** centroid: 2, normalized-entropy: 0.5127091420308771, [(2, 4), (3, 31)]
*** center 3: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7366432552039623] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7366432552039623, 0.6376603846997022] ***
*** finished computation of 3 references, err: [Inf, 0.7366432552039623, 0.6376603846997022] ***
*** center 1: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 37, 31]]
** centroid: 2, normalized-entropy: 0.9943766625699823, [(2, 37), (3, 31)]
*** center 3: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.384411919116974] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.384411919116974, 0.7724937304854393] ***
*** finished computation of 3 references, err: [Inf, 1.384411919116974, 0.7724937304854393] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 28, 33]]
** centroid: 1, normalized-entropy: 0.995148095654003, [(2, 28), (3, 33)]
*** center 2: selecting labels [1] (freq >= 2) [from [23, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [11, 5, 0]]
** centroid: 3, normalized-entropy: 0.8960382325345574, [(1, 11), (2, 5)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.323565044105053] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.323565044105053, 0.8265195940434933] ***
*** starting iteration: 2; err: [Inf, 1.323565044105053, 0.8265195940434933] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.323565044105053, 0.8265195940434933, 0.834336147904396] ***
*** finished computation of 3 references, err: [Inf, 1.323565044105053, 0.8265195940434933, 0.834336147904396] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [18, 3, 0]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(1, 18), (2, 3)]
*** center 2: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 27, 36]]
** centroid: 3, normalized-entropy: 0.9852281360342514, [(2, 27), (3, 36)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8351576495915651] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8351576495915651, 0.6632763755694032] ***
*** starting iteration: 2; err: [Inf, 0.8351576495915651, 0.6632763755694032] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8351576495915651, 0.6632763755694032, 0.6232577322795987] ***
*** starting iteration: 3; err: [Inf, 0.8351576495915651, 0.6632763755694032, 0.6232577322795987] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8351576495915651, 0.6632763755694032, 0.6232577322795987, 0.6205327870324254] ***
*** finished computation of 3 references, err: [Inf, 0.8351576495915651, 0.6632763755694032, 0.6232577322795987, 0.6205327870324254] ***
*** center 1: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 1, 21]]
** centroid: 2, normalized-entropy: 0.2667649878030262, [(2, 1), (3, 21)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 36, 10]]
** centroid: 3, normalized-entropy: 0.7553754125614286, [(2, 36), (3, 10)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9696909196674823] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9696909196674823, 0.6847114446759224] ***
*** starting iteration: 2; err: [Inf, 0.9696909196674823, 0.6847114446759224] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9696909196674823, 0.6847114446759224, 0.6749580284953117] ***
*** starting iteration: 3; err: [Inf, 0.9696909196674823, 0.6847114446759224, 0.6749580284953117] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9696909196674823, 0.6847114446759224, 0.6749580284953117, 0.6743915095925331] ***
*** finished computation of 3 references, err: [Inf, 0.9696909196674823, 0.6847114446759224, 0.6749580284953117, 0.6743915095925331] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 26]]
** centroid: 1, normalized-entropy: 0.47983202361612853, [(2, 3), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 30, 7]]
** centroid: 3, normalized-entropy: 0.699772221773307, [(2, 30), (3, 7)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.841383955925703] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.841383955925703, 0.5771171402186155] ***
*** finished computation of 3 references, err: [Inf, 0.841383955925703, 0.5771171402186155] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 29, 11]]
** centroid: 1, normalized-entropy: 0.8485481782946159, [(2, 29), (3, 11)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [34, 1, 0]]
** centroid: 2, normalized-entropy: 0.18717625687320805, [(1, 34), (2, 1)]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 25]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7004434435069561] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7004434435069561, 0.531637264676392] ***
*** finished computation of 3 references, err: [Inf, 0.7004434435069561, 0.531637264676392] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 15, 31]]
** centroid: 1, normalized-entropy: 0.9108783787500366, [(2, 15), (3, 31)]
*** center 2: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.906936200261116] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.906936200261116, 0.5641964635252953] ***
*** finished computation of 3 references, err: [Inf, 0.906936200261116, 0.5641964635252953] ***
*** center 1: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 33, 12]]
** centroid: 3, normalized-entropy: 0.8366407419411671, [(2, 33), (3, 12)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7301844657957554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7301844657957554, 0.45811411559581755] ***
*** finished computation of 7 references, err: [Inf, 0.7301844657957554, 0.45811411559581755] ***
*** center 1: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 12, 2]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(2, 12), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 12, 9]]
** centroid: 4, normalized-entropy: 0.9852281360342514, [(2, 12), (3, 9)]
*** center 5: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 18]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.767842184305191] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.767842184305191, 0.4628407788276672] ***
*** finished computation of 7 references, err: [Inf, 0.767842184305191, 0.4628407788276672] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 24, 10]]
** centroid: 1, normalized-entropy: 0.8739810481273581, [(2, 24), (3, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 3: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [0, 0, 1]
*** center 4: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 13, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6513672260195017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6513672260195017, 0.48115688532590867] ***
*** finished computation of 7 references, err: [Inf, 0.6513672260195017, 0.48115688532590867] ***
*** center 1: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 5]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 13, 5]]
** centroid: 4, normalized-entropy: 0.8524051786494784, [(2, 13), (3, 5)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 3, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 15)
[0.9666666666666667, 0.9666666666666667, 0.96, 0.9533333333333333, 0.9333333333333332, 0.9266666666666667, 0.9266666666666667, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9133333333333334, 0.9133333333333334, 0.9066666666666667, 0.8933333333333334, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :rand, 0.6, 2) => 0.9666666666666667
finished with 15
iteration 2 finished
generating 4 configurations using top 4 configurations, starting with 15)
[0.9666666666666667, 0.9666666666666667, 0.96, 0.9533333333333333, 0.9333333333333332, 0.9266666666666667, 0.9266666666666667, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9133333333333334, 0.9133333333333334, 0.9066666666666667, 0.8933333333333334, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :rand, 0.6, 2) => 0.9666666666666667
finished with 16
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.5244110256433487] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5244110256433487, 0.4424729008972645] ***
*** starting iteration: 2; err: [Inf, 0.5244110256433487, 0.4424729008972645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5244110256433487, 0.4424729008972645, 0.4423509554564953] ***
*** finished computation of 7 references, err: [Inf, 0.5244110256433487, 0.4424729008972645, 0.4423509554564953] ***
*** center 1: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 3, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 7, 7]]
** centroid: 7, normalized-entropy: 1.0, [(2, 7), (3, 7)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6037111806869507] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6037111806869507, 0.4815449666231871] ***
*** starting iteration: 2; err: [Inf, 0.6037111806869507, 0.4815449666231871] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6037111806869507, 0.4815449666231871, 0.4692032160609961] ***
*** starting iteration: 3; err: [Inf, 0.6037111806869507, 0.4815449666231871, 0.4692032160609961] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6037111806869507, 0.4815449666231871, 0.4692032160609961, 0.4664012611657381] ***
*** starting iteration: 4; err: [Inf, 0.6037111806869507, 0.4815449666231871, 0.4692032160609961, 0.4664012611657381] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6037111806869507, 0.4815449666231871, 0.4692032160609961, 0.4664012611657381, 0.46445827655494215] ***
*** starting iteration: 5; err: [Inf, 0.6037111806869507, 0.4815449666231871, 0.4692032160609961, 0.4664012611657381, 0.46445827655494215] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6037111806869507, 0.4815449666231871, 0.4692032160609961, 0.4664012611657381, 0.46445827655494215, 0.46445827655494215] ***
*** finished computation of 7 references, err: [Inf, 0.6037111806869507, 0.4815449666231871, 0.4692032160609961, 0.4664012611657381, 0.46445827655494215, 0.46445827655494215] ***
*** center 1: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 2, 13]]
** centroid: 4, normalized-entropy: 0.5665095065529052, [(2, 2), (3, 13)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 20, 10]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(2, 20), (3, 10)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5834878779947757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5834878779947757, 0.4763424818217754] ***
*** starting iteration: 2; err: [Inf, 0.5834878779947757, 0.4763424818217754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5834878779947757, 0.4763424818217754, 0.47076708868145944] ***
*** starting iteration: 3; err: [Inf, 0.5834878779947757, 0.4763424818217754, 0.47076708868145944] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5834878779947757, 0.4763424818217754, 0.47076708868145944, 0.46355756402015685] ***
*** starting iteration: 4; err: [Inf, 0.5834878779947757, 0.4763424818217754, 0.47076708868145944, 0.46355756402015685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5834878779947757, 0.4763424818217754, 0.47076708868145944, 0.46355756402015685, 0.45593583174049856] ***
*** starting iteration: 5; err: [Inf, 0.5834878779947757, 0.4763424818217754, 0.47076708868145944, 0.46355756402015685, 0.45593583174049856] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5834878779947757, 0.4763424818217754, 0.47076708868145944, 0.46355756402015685, 0.45593583174049856, 0.45198918640613556] ***
*** starting iteration: 6; err: [Inf, 0.5834878779947757, 0.4763424818217754, 0.47076708868145944, 0.46355756402015685, 0.45593583174049856, 0.45198918640613556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5834878779947757, 0.4763424818217754, 0.47076708868145944, 0.46355756402015685, 0.45593583174049856, 0.45198918640613556, 0.4511058271303773] ***
*** finished computation of 7 references, err: [Inf, 0.5834878779947757, 0.4763424818217754, 0.47076708868145944, 0.46355756402015685, 0.45593583174049856, 0.45198918640613556, 0.4511058271303773] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 3, 10]]
** centroid: 2, normalized-entropy: 0.7793498372920851, [(2, 3), (3, 10)]
*** center 3: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 4, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
finished with 9 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 16)
[0.9666666666666667, 0.9666666666666667, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9333333333333332, 0.9266666666666667, 0.9266666666666667, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9133333333333334, 0.9133333333333334, 0.9066666666666667, 0.8933333333333334, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :rand, 0.6, 2) => 0.9666666666666667
finished with 17
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.6564437735080719] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6564437735080719, 0.4127031532675028] ***
*** finished computation of 7 references, err: [Inf, 0.6564437735080719, 0.4127031532675028] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 17, 5]]
** centroid: 1, normalized-entropy: 0.7732266742876346, [(2, 17), (3, 5)]
*** center 2: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 21]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 6, 2]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(2, 6), (3, 2)]
*** center 7: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5041281409561634] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5041281409561634, 0.40806322582066057] ***
*** finished computation of 7 references, err: [Inf, 0.5041281409561634, 0.40806322582066057] ***
*** center 1: selecting labels [1] (freq >= 2) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 21, 6]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(2, 21), (3, 6)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 1, 21]]
*** center 5: selecting labels [1] (freq >= 2) [from [7, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 10, 1]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 5, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.545500076264143] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.545500076264143, 0.36725392743945123] ***
*** finished computation of 7 references, err: [Inf, 0.545500076264143, 0.36725392743945123] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 2: selecting labels [1] (freq >= 2) [from [23, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 19, 1]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 12, 1]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 2, 9]]
** centroid: 5, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 6: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 13]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 17)
[0.9666666666666667, 0.9666666666666667, 0.96, 0.9533333333333333, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9266666666666667, 0.9266666666666667, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9133333333333334, 0.9133333333333334, 0.9066666666666667, 0.8933333333333334, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :rand, 0.6, 2) => 0.9666666666666667
finished with 19
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.5761456543207168] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5761456543207168, 0.44857120849192145] ***
*** starting iteration: 2; err: [Inf, 0.5761456543207168, 0.44857120849192145] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5761456543207168, 0.44857120849192145, 0.41938229501247404] ***
*** starting iteration: 3; err: [Inf, 0.5761456543207168, 0.44857120849192145, 0.41938229501247404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5761456543207168, 0.44857120849192145, 0.41938229501247404, 0.40342978775501254] ***
*** finished computation of 7 references, err: [Inf, 0.5761456543207168, 0.44857120849192145, 0.41938229501247404, 0.40342978775501254] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 19]]
** centroid: 1, normalized-entropy: 0.5746356978376794, [(2, 3), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 11, 4]]
** centroid: 5, normalized-entropy: 0.8366407419411671, [(2, 11), (3, 4)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 16, 1]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 12]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5365765345096588] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5365765345096588, 0.40868391081690786] ***
*** starting iteration: 2; err: [Inf, 0.5365765345096588, 0.40868391081690786] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5365765345096588, 0.40868391081690786, 0.40426389265805485] ***
*** starting iteration: 3; err: [Inf, 0.5365765345096588, 0.40868391081690786, 0.40426389265805485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5365765345096588, 0.40868391081690786, 0.40426389265805485, 0.39417601749300957] ***
*** finished computation of 7 references, err: [Inf, 0.5365765345096588, 0.40868391081690786, 0.40426389265805485, 0.39417601749300957] ***
*** center 1: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 10, 3]]
** centroid: 2, normalized-entropy: 0.7793498372920851, [(2, 10), (3, 3)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 19]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 4, 9]]
** centroid: 6, normalized-entropy: 0.8904916402194913, [(2, 4), (3, 9)]
*** center 7: selecting labels [1] (freq >= 2) [from [21, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5804386343806982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5804386343806982, 0.45358151152729986] ***
*** starting iteration: 2; err: [Inf, 0.5804386343806982, 0.45358151152729986] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5804386343806982, 0.45358151152729986, 0.4083348590880632] ***
*** starting iteration: 3; err: [Inf, 0.5804386343806982, 0.45358151152729986, 0.4083348590880632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5804386343806982, 0.45358151152729986, 0.4083348590880632, 0.40545069687068463] ***
*** finished computation of 7 references, err: [Inf, 0.5804386343806982, 0.45358151152729986, 0.4083348590880632, 0.40545069687068463] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 14, 12]]
** centroid: 1, normalized-entropy: 0.9957274520849256, [(2, 14), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 19, 1]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
*** center 5: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [7, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.2999632908403873] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.2999632908403873, 0.7398270019888877] ***
*** starting iteration: 2; err: [Inf, 1.2999632908403873, 0.7398270019888877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.2999632908403873, 0.7398270019888877, 0.5306424003839493] ***
*** starting iteration: 3; err: [Inf, 1.2999632908403873, 0.7398270019888877, 0.5306424003839493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.2999632908403873, 0.7398270019888877, 0.5306424003839493, 0.4835255397111177] ***
*** finished computation of 7 references, err: [Inf, 1.2999632908403873, 0.7398270019888877, 0.5306424003839493, 0.4835255397111177] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
*** center 4: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 16, 1]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 14, 6]]
** centroid: 7, normalized-entropy: 0.8812908992306927, [(2, 14), (3, 6)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6065035160630942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6065035160630942, 0.524302307292819] ***
*** starting iteration: 2; err: [Inf, 0.6065035160630942, 0.524302307292819] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6065035160630942, 0.524302307292819, 0.5191091595962644] ***
*** starting iteration: 3; err: [Inf, 0.6065035160630942, 0.524302307292819, 0.5191091595962644] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6065035160630942, 0.524302307292819, 0.5191091595962644, 0.5179754842817783] ***
*** finished computation of 7 references, err: [Inf, 0.6065035160630942, 0.524302307292819, 0.5191091595962644, 0.5179754842817783] ***
*** center 1: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 34, 3]]
** centroid: 3, normalized-entropy: 0.40597703847557104, [(2, 34), (3, 3)]
*** center 4: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 5: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 3, 23]]
** centroid: 7, normalized-entropy: 0.5159469300074472, [(2, 3), (3, 23)]
finished with 6 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6852198436856269] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6852198436856269, 0.594671883136034] ***
*** starting iteration: 2; err: [Inf, 0.6852198436856269, 0.594671883136034] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6852198436856269, 0.594671883136034, 0.5926607011258602] ***
*** starting iteration: 3; err: [Inf, 0.6852198436856269, 0.594671883136034, 0.5926607011258602] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6852198436856269, 0.594671883136034, 0.5926607011258602, 0.5903975784033537] ***
*** finished computation of 7 references, err: [Inf, 0.6852198436856269, 0.594671883136034, 0.5926607011258602, 0.5903975784033537] ***
*** center 1: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 4, 30]]
** centroid: 5, normalized-entropy: 0.5225593745369407, [(2, 4), (3, 30)]
*** center 6: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 29, 3]]
** centroid: 7, normalized-entropy: 0.44886448872302936, [(2, 29), (3, 3)]
finished with 7 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 19)
[0.9666666666666667, 0.9666666666666667, 0.96, 0.9533333333333333, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9266666666666667, 0.9266666666666667, 0.9199999999999999, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9133333333333334, 0.9133333333333334, 0.9066666666666667, 0.9, 0.8933333333333334, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :rand, 0.6, 2) => 0.9666666666666667
finished with 20
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.6665781290829181] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6665781290829181, 0.4741074126958847] ***
*** finished computation of 7 references, err: [Inf, 0.6665781290829181, 0.4741074126958847] ***
*** center 1: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 19]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 14, 7]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 14), (3, 7)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6512358166277409] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6512358166277409, 0.5040373741835356] ***
*** finished computation of 7 references, err: [Inf, 0.6512358166277409, 0.5040373741835356] ***
*** center 1: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 12]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 8, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 10, 5]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(2, 10), (3, 5)]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 19, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7139603815972805] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7139603815972805, 0.5954457185044885] ***
*** finished computation of 7 references, err: [Inf, 0.7139603815972805, 0.5954457185044885] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 23, 1]]
*** center 2: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 10, 32]]
** centroid: 3, normalized-entropy: 0.7918583525674836, [(2, 10), (3, 32)]
*** center 4: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [3, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
finished with 7 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 20)
[0.9666666666666667, 0.9666666666666667, 0.96, 0.9533333333333333, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9266666666666667, 0.9266666666666667, 0.9199999999999999, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9133333333333334, 0.9133333333333334, 0.9066666666666667, 0.9, 0.8933333333333334, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :rand, 0.6, 2) => 0.9666666666666667
finished with 20
iteration 7 finished
generating 4 configurations using top 4 configurations, starting with 20)
[0.9666666666666667, 0.9666666666666667, 0.96, 0.9533333333333333, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9266666666666667, 0.9266666666666667, 0.9199999999999999, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9133333333333334, 0.9133333333333334, 0.9066666666666667, 0.9, 0.8933333333333334, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :rand, 0.6, 2) => 0.9666666666666667
finished with 22
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.6356920877099037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6356920877099037, 0.39245051264762876] ***
*** finished computation of 7 references, err: [Inf, 0.6356920877099037, 0.39245051264762876] ***
*** center 1: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 12, 2]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(2, 12), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 12, 9]]
** centroid: 4, normalized-entropy: 0.9852281360342514, [(2, 12), (3, 9)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 18]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5121759463101625] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5121759463101625, 0.42662135683000085] ***
*** finished computation of 7 references, err: [Inf, 0.5121759463101625, 0.42662135683000085] ***
*** center 1: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 21, 6]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(2, 21), (3, 6)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 1, 21]]
*** center 5: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 10, 1]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 5, 0]]
finished with 6 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6539566057920456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6539566057920456, 0.41517139501869676] ***
*** finished computation of 7 references, err: [Inf, 0.6539566057920456, 0.41517139501869676] ***
*** center 1: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 14, 3]]
** centroid: 3, normalized-entropy: 0.6722948170756378, [(2, 14), (3, 3)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 9, 19]]
** centroid: 4, normalized-entropy: 0.9059282160429994, [(2, 9), (3, 19)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 10, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6916696345806121] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6916696345806121, 0.4819697067141533] ***
*** finished computation of 7 references, err: [Inf, 0.6916696345806121, 0.4819697067141533] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 22]]
** centroid: 1, normalized-entropy: 0.5293608652873645, [(2, 3), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 21, 3]]
** centroid: 6, normalized-entropy: 0.5435644431995963, [(2, 21), (3, 3)]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6648540577292442] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6648540577292442, 0.4668289266526699] ***
*** finished computation of 7 references, err: [Inf, 0.6648540577292442, 0.4668289266526699] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 17, 8]]
** centroid: 1, normalized-entropy: 0.9043814577244941, [(2, 17), (3, 8)]
*** center 2: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 4: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 11, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 9, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.700490511059761] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.700490511059761, 0.4635669010132551] ***
*** finished computation of 7 references, err: [Inf, 0.700490511059761, 0.4635669010132551] ***
*** center 1: selecting labels [1] (freq >= 2) [from [23, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 11, 3]]
** centroid: 3, normalized-entropy: 0.7495952572594798, [(2, 11), (3, 3)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 14, 7]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(2, 14), (3, 7)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 8, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
*** center 7: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 22)
[0.9733333333333333, 0.9666666666666667, 0.9666666666666667, 0.96, 0.9533333333333333, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9266666666666667, 0.9266666666666667, 0.9199999999999999, 0.9199999999999999, 0.9199999999999999, 0.9133333333333334, 0.9133333333333334, 0.9133333333333334, 0.9066666666666667, 0.9, 0.8933333333333334, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 1, 1.0, :fft, 0.9, 2) => 0.9733333333333333
finished with 22
iteration 9 finished
[ Info: ========== BEST MODEL ==========
[ Info: (AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 1, 1.0, :fft, 0.9, 2), 0.9733333333333333)
[ Info: AKNC{Array{Float64,1}}[AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[6.5137931034482754, 3.0068965517241377, 5.3517241379310345, 1.9758620689655166], [4.822727272727273, 3.231818181818181, 1.4318181818181819, 0.23636363636363641], [5.2, 2.4000000000000004, 3.4200000000000004, 1.0399999999999998], [5.333333333333333, 3.8083333333333322, 1.575, 0.3083333333333333], [7.5375000000000005, 3.1125, 6.3875, 2.1], [6.031818181818181, 2.8545454545454545, 4.327272727272727, 1.331818181818182], [5.25, 2.65, 4.7, 1.85]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [3, 1, 2, 1, 3, 2, 3], 3), KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 1, 1.0, :fft, 0.9, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[5.917647058823529, 2.8058823529411767, 4.482352941176471, 1.4235294117647062], [5.949999999999999, 2.7249999999999996, 4.9875, 1.8125000000000002], [4.865217391304348, 3.2304347826086954, 1.4608695652173913, 0.2130434782608696], [7.7, 3.4, 6.4, 2.25], [5.455555555555557, 3.8999999999999995, 1.5222222222222221, 0.2888888888888889], [5.371428571428572, 2.485714285714286, 3.6428571428571432, 1.1285714285714286], [6.530434782608695, 2.9695652173913043, 5.5086956521739125, 2.0695652173913044], [6.574999999999999, 3.1124999999999994, 4.6375, 1.4625000000000001]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 3, 1, 3, 1, 2, 3, 2], 3), KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 1, 1.0, :fft, 0.9, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[4.857692307692309, 3.2576923076923086, 1.4384615384615382, 0.24230769230769234], [7.614285714285714, 3.1, 6.528571428571429, 2.0428571428571427], [5.557142857142857, 2.735714285714286, 4.300000000000001, 1.4357142857142857], [6.378571428571428, 2.9285714285714284, 4.664285714285714, 1.4857142857142855], [6.057142857142858, 2.7857142857142856, 5.014285714285714, 1.8], [5.449999999999999, 2.4125, 3.5999999999999996, 1.0499999999999998], [6.45, 3.0250000000000004, 5.499999999999999, 2.065], [5.4, 3.8625, 1.4124999999999999, 0.21250000000000002]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1, 3, 2, 2, 3, 2, 3, 1], 3), KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 1, 1.0, :fft, 0.9, 2))]
Test Summary: | Pass  Total
AKNC          |    1      1
[20, 4, 1, 5, 3, 3, 4, 4, 2, 4, 4, 1, 2, 1, 5, 9, 1, 10, 5, 3, 3, 9, 6, 37, 3, 2, 2, 6, 2, 7, 4, 7, 1, 22, 6, 30, 1, 1, 3, 44, 2, 1, 20, 6, 33, 2, 20, 25, 10, 7, 8, 3, 8, 14, 9, 4, 6, 5, 32, 38, 6, 11, 3, 9, 34, 15, 17, 8, 7, 3, 125, 11, 16, 7, 10, 48, 59, 9, 1, 3, 25, 23, 51, 53, 127, 18, 7, 41, 27, 3, 10, 10, 16, 10, 14, 18, 9, 16, 52, 2, 7, 20, 39, 36, 28, 238, 24, 4, 4, 15, 3, 13, 102, 12, 3, 9, 18, 8, 3, 40, 46, 8, 2, 34, 12, 77, 34, 529, 13, 5, 9, 21, 18, 1, 34, 11, 6, 3, 51, 91, 6, 11, 3, 88, 18, 9, 6, 7, 125, 58, 45, 8, 21, 40, 4, 82, 68, 49, 23, 10, 64, 32, 6, 11, 13, 24, 10, 67, 79, 1, 53, 63, 2, 19, 5, 7, 13, 62, 24, 2, 8, 11, 492, 19, 12, 26, 9, 355, 17, 58, 12, 111, 4, 6, 30, 13, 18, 33, 13, 28, 38, 11, 4, 42, 37, 34, 91, 33, 30, 16, 3, 8, 38, 558, 63, 44, 16, 43, 90, 1, 80, 4, 4, 37, 95, 10, 3, 65, 74, 32, 2, 6, 10, 12, 28, 18, 48, 5, 44, 29, 5, 13, 339, 12, 39, 42, 24, 99, 16, 5, 23, 18, 78, 11, 15, 10, 7, 17, 50, 7, 17, 23, 30, 31, 6, 11, 25, 9, 471, 85, 16, 7, 11, 42, 13, 17, 10, 2, 38, 3, 8, 18, 12, 8, 9, 54, 30, 22, 21, 7, 32, 28, 17, 18, 365, 60, 55, 20, 11, 84]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6189999999999997, speedup = 0.2690138616203019, eval_ratio = 0.073001)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3542627728174603,"recall":0.3368055555555556,"f1":null,"seconds":0.00011630728840827942,"exhaustive_search_seconds":0.00024046190083026886,"evaluations":468.921875,"distances_sum":1761.9021305026988}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5199652777777776,"recall":0.5199652777777776,"f1":0.5199652777777776,"seconds":0.0001762043684720993,"exhaustive_search_seconds":0.00024046190083026886,"evaluations":596.453125,"distances_sum":1697.4835288876664}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6328124999999997,"recall":0.6328124999999997,"f1":0.6328124999999997,"seconds":0.00029062479734420776,"exhaustive_search_seconds":0.00024046190083026886,"evaluations":732.9140625,"distances_sum":1627.1231738894976}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7100694444444444,"recall":0.7100694444444444,"f1":0.7100694444444444,"seconds":0.00047410279512405396,"exhaustive_search_seconds":0.00024046190083026886,"evaluations":873.953125,"distances_sum":1602.327457460763}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7638888888888886,"recall":0.7638888888888886,"f1":0.7638888888888886,"seconds":0.0006251577287912369,"exhaustive_search_seconds":0.00024046190083026886,"evaluations":983.703125,"distances_sum":1585.640604176415}
KCenters.DeloneInvIndex> reached performance {"precision":0.8038194444444439,"recall":0.8038194444444439,"f1":0.8038194444444439,"seconds":0.0003967341035604477,"exhaustive_search_seconds":0.00024046190083026886,"evaluations":1071.7890625,"distances_sum":1574.6714319013104}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8140000000000002, speedup = 0.7509927859174895, eval_ratio = 0.104977)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
