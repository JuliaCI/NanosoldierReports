Julia Version 1.5.0-DEV.247
Commit 1297b518e3 (2020-02-07 18:46 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Missings ──────────────────── v0.4.3
  Installed Reexport ──────────────────── v0.2.0
  Installed KCenters ──────────────────── v0.1.11
  Installed MLDataPattern ─────────────── v0.5.0
  Installed MLDataUtils ───────────────── v0.5.0
  Installed DataFrames ────────────────── v0.20.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed JSON ──────────────────────── v0.21.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed TableTraits ───────────────── v1.0.0
  Installed DataAPI ───────────────────── v1.1.0
  Installed Compat ────────────────────── v3.3.1
  Installed Parsers ───────────────────── v0.3.11
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed SimilaritySearch ──────────── v0.3.17
  Installed OrderedCollections ────────── v1.1.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed Tables ────────────────────── v0.2.11
  Installed DataStructures ────────────── v0.17.9
  Installed StatsBase ─────────────────── v0.32.0
  Installed CategoricalArrays ─────────── v0.7.7
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.1.11
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.3.1
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.1.11
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.17
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_ackewd/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.3.1
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.0
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.1.11
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.17
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v0.2.11
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
[ Info: 117.08000000000011
[ Info: 73.60000000000001
[ Info: 46.139999999999986
[ Info: 27.62
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 267.50999838966254
[ Info: 215.63999825865392
[ Info: 195.99000008183336
[ Info: 76.04000118347305
Test Summary:        |
Clustering with dnet | No tests
inertia(cfft.distances) = 19.30006825901031
inertia(cdnet.distances) = 33.68565167360341
inertia(crand.distances) = 21.398280334353156
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2333984375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2333984375,"f1":null,"seconds":3.816559910774231e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":5.8671875,"distances_sum":687.5619302054442}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2333984375,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.2333984375,"f1":null,"seconds":3.816559910774231e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":5.8671875,"distances_sum":687.5619302054442}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4140625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4140625,"f1":null,"seconds":2.469867467880249e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":6.2265625,"distances_sum":1198.4342852002599}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.46875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.46875,"f1":null,"seconds":2.4866312742233276e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":6.5078125,"distances_sum":1396.5078116865604}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.46875,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.46875,"f1":null,"seconds":2.4866312742233276e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":6.5078125,"distances_sum":1396.5078116865604}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.9014480311355321,"seconds":6.3963234424591064e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.640625,"distances_sum":2664.0973236907175}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.646484375, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.646484375,"f1":0.7733539030414036,"seconds":5.191192030906677e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.5625,"distances_sum":1936.8437606692291}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5888671875, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.5888671875,"f1":null,"seconds":4.762783646583557e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.15625,"distances_sum":1773.8162232716472}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.828125,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.828125,"f1":0.9014480311355321,"seconds":6.3963234424591064e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.640625,"distances_sum":2664.0973236907175}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.828125,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.828125,"f1":0.9014480311355321,"seconds":6.3963234424591064e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.640625,"distances_sum":2664.0973236907175}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2021484375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2021484375,"f1":null,"seconds":1.9241124391555786e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":5.59375,"distances_sum":578.6099031021637}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.666015625,"f1":0.7897331834831842,"seconds":3.3136457204818726e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":7.359375,"distances_sum":1894.0405117370303}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.666015625,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.666015625,"f1":0.7897331834831842,"seconds":3.3136457204818726e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":7.359375,"distances_sum":1894.0405117370303}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7974946928071935,"seconds":3.2726675271987915e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":7.4921875,"distances_sum":1955.7455465503706}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8943598068598078,"seconds":3.7830322980880737e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.328125,"distances_sum":2598.1882794617777}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.8043310855810863,"seconds":3.1050294637680054e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":7.359375,"distances_sum":1955.2100876202603}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8193359375,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8193359375,"f1":0.8943598068598078,"seconds":3.7830322980880737e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.328125,"distances_sum":2598.1882794617777}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9233433233433241,"seconds":3.948807716369629e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.4609375,"distances_sum":2826.4963922829998}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9657394688644694,"seconds":3.885477781295776e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.84375,"distances_sum":3182.8462718195196}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9529819139194143,"seconds":3.769993782043457e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.78125,"distances_sum":3045.3484591911656}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9536916208791213,"seconds":3.885477781295776e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.796875,"distances_sum":3078.1072573064926}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9657394688644694,"seconds":3.885477781295776e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.84375,"distances_sum":3182.8462718195196}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9657394688644694,"seconds":3.885477781295776e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.84375,"distances_sum":3182.8462718195196}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.67578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.67578125,"f1":0.7957693348318357,"seconds":3.07522714138031e-6,"exhaustive_search_seconds":8.996576070785522e-7,"evaluations":7.6640625,"distances_sum":1907.6778788004547}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.790328248140749,"seconds":2.946704626083374e-6,"exhaustive_search_seconds":8.996576070785522e-7,"evaluations":7.578125,"distances_sum":1849.5065381778675}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.67578125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.67578125,"f1":0.7957693348318357,"seconds":3.07522714138031e-6,"exhaustive_search_seconds":8.996576070785522e-7,"evaluations":7.6640625,"distances_sum":1907.6778788004547}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9478537087912092,"seconds":3.939494490623474e-6,"exhaustive_search_seconds":8.996576070785522e-7,"evaluations":8.6796875,"distances_sum":3004.3204398835596}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8503990800865808,"seconds":3.1813979148864746e-6,"exhaustive_search_seconds":8.996576070785522e-7,"evaluations":8.0546875,"distances_sum":2212.517841875972}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9483891108891113,"seconds":3.6600977182388306e-6,"exhaustive_search_seconds":8.996576070785522e-7,"evaluations":8.7421875,"distances_sum":2969.2604893433972}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9446886446886454,"seconds":3.87243926525116e-6,"exhaustive_search_seconds":8.996576070785522e-7,"evaluations":8.703125,"distances_sum":2916.3533730943004}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9195892649017655,"seconds":3.550201654434204e-6,"exhaustive_search_seconds":8.996576070785522e-7,"evaluations":8.5234375,"distances_sum":2755.601502487376}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.7997752247752256,"seconds":3.0472874641418457e-6,"exhaustive_search_seconds":8.996576070785522e-7,"evaluations":7.703125,"distances_sum":1951.6761761374282}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9091796875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9483891108891113,"seconds":3.6600977182388306e-6,"exhaustive_search_seconds":8.996576070785522e-7,"evaluations":8.7421875,"distances_sum":2969.2604893433972}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9664262820512822,"seconds":3.926455974578857e-6,"exhaustive_search_seconds":8.996576070785522e-7,"evaluations":8.8671875,"distances_sum":3094.741041163149}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9708733974358977,"seconds":3.961846232414246e-6,"exhaustive_search_seconds":8.996576070785522e-7,"evaluations":8.9296875,"distances_sum":3127.4028661108323}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9600503663003667,"seconds":3.7495046854019165e-6,"exhaustive_search_seconds":8.996576070785522e-7,"evaluations":8.828125,"distances_sum":3026.8592280361986}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9708733974358977,"seconds":3.961846232414246e-6,"exhaustive_search_seconds":8.996576070785522e-7,"evaluations":8.9296875,"distances_sum":3127.4028661108323}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9708733974358977,"seconds":3.961846232414246e-6,"exhaustive_search_seconds":8.996576070785522e-7,"evaluations":8.9296875,"distances_sum":3127.4028661108323}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3564453125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3564453125,"f1":null,"seconds":2.434477210044861e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":5.484375,"distances_sum":1046.1357403765974}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.35546875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.35546875,"f1":null,"seconds":2.4959444999694824e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":5.4375,"distances_sum":1005.2282399431833}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73828125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.73828125,"f1":0.8396988428238437,"seconds":3.376975655555725e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":7.7734375,"distances_sum":2287.382732575914}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.73828125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.73828125,"f1":0.8396988428238437,"seconds":3.376975655555725e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":7.7734375,"distances_sum":2287.382732575914}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9326923076923082,"seconds":3.6619603633880615e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.6328125,"distances_sum":2962.0313137280255}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9521233974358979,"seconds":3.6247074604034424e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.75,"distances_sum":3141.0002573814368}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9521233974358979,"seconds":3.6247074604034424e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.75,"distances_sum":3141.0002573814368}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9566620879120884,"seconds":3.684312105178833e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.71875,"distances_sum":3196.868763996615}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":13,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9616872710622713,"seconds":3.7904828786849976e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.8046875,"distances_sum":3207.638712663358}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9622424450549455,"seconds":4.056841135025024e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.84375,"distances_sum":3176.1494528159506}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9622424450549455,"seconds":4.056841135025024e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.84375,"distances_sum":3176.1494528159506}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9622424450549455,"seconds":4.056841135025024e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.84375,"distances_sum":3176.1494528159506}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.251953125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.251953125,"f1":null,"seconds":2.2687017917633057e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":6.4453125,"distances_sum":665.8096471262182}}, beam: 1, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.251953125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.251953125,"f1":null,"seconds":2.2687017917633057e-6,"exhaustive_search_seconds":1.0468065738677979e-6,"evaluations":6.4453125,"distances_sum":665.8096471262182}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":5,"bsize":4}, perf: {"precision":0.9662760416666667,"recall":0.6708984375,"f1":0.7833903076090583,"seconds":3.3136457204818726e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.1328125,"distances_sum":974.421363111054}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6708984375,"state":{"ssize":5,"bsize":4},"perf":{"precision":0.9662760416666667,"recall":0.6708984375,"f1":0.7833903076090583,"seconds":3.3136457204818726e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.1328125,"distances_sum":974.421363111054}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":4,"bsize":8}, perf: {"precision":0.980766369047619,"recall":0.8916015625,"f1":0.9293154761904767,"seconds":4.166737198829651e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.8359375,"distances_sum":1358.5966562117906}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":9,"bsize":5}, perf: {"precision":0.9846633184523809,"recall":0.7744140625,"f1":0.8598922561813195,"seconds":3.4961849451065063e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.4765625,"distances_sum":1111.3675014845355}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":8,"bsize":7}, perf: {"precision":0.9796781994047619,"recall":0.8740234375,"f1":0.9196793440934073,"seconds":3.850087523460388e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.859375,"distances_sum":1321.0822982460518}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":7,"bsize":8}, perf: {"precision":0.9873976934523808,"recall":0.8955078125,"f1":0.9339524407883787,"seconds":4.023313522338867e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.8671875,"distances_sum":1353.8827148349262}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8955078125,"state":{"ssize":7,"bsize":8},"perf":{"precision":0.9873976934523808,"recall":0.8955078125,"f1":0.9339524407883787,"seconds":4.023313522338867e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.8671875,"distances_sum":1353.8827148349262}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":3,"bsize":12}, perf: {"precision":0.9861886160714286,"recall":0.9326171875,"f1":0.9567815647893771,"seconds":4.06801700592041e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.9296875,"distances_sum":1435.342331858846}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":6,"bsize":8}, perf: {"precision":0.9824869791666668,"recall":0.9140625,"f1":0.9436448317307695,"seconds":3.948807716369629e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.8828125,"distances_sum":1409.4223021986907}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":11,"bsize":11}, perf: {"precision":0.9871651785714286,"recall":0.9384765625,"f1":0.9602335164835166,"seconds":3.98978590965271e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.984375,"distances_sum":1442.3032738422448}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":5,"bsize":8}, perf: {"precision":0.984747023809524,"recall":0.908203125,"f1":0.9414119734432238,"seconds":3.935769200325012e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.9453125,"distances_sum":1378.0192662644397}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":3,"bsize":10}, perf: {"precision":0.980952380952381,"recall":0.91796875,"f1":0.9459563873626378,"seconds":3.946945071220398e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.953125,"distances_sum":1409.0114727051916}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":2,"bsize":9}, perf: {"precision":0.9837425595238096,"recall":0.91796875,"f1":0.9471268315018319,"seconds":4.02890145778656e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.890625,"distances_sum":1415.6261590399943}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":10,"bsize":7}, perf: {"precision":0.9845982142857141,"recall":0.9033203125,"f1":0.9386532738095243,"seconds":3.7960708141326904e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.8984375,"distances_sum":1368.1142514832977}, best_list's length: 14, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":4,"bsize":9}, perf: {"precision":0.9775390625,"recall":0.9189453125,"f1":0.945193023122711,"seconds":3.686174750328064e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.8984375,"distances_sum":1429.2400092976475}, best_list's length: 16, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":5,"bsize":9}, perf: {"precision":0.9806082589285715,"recall":0.916015625,"f1":0.9444504063644692,"seconds":3.885477781295776e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.8828125,"distances_sum":1422.1128072405716}, best_list's length: 18, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":11,"bsize":11},"perf":{"precision":0.9871651785714286,"recall":0.9384765625,"f1":0.9602335164835166,"seconds":3.98978590965271e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.984375,"distances_sum":1442.3032738422448}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":11,"bsize":11},"perf":{"precision":0.9871651785714286,"recall":0.9384765625,"f1":0.9602335164835166,"seconds":3.98978590965271e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.984375,"distances_sum":1442.3032738422448}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2421875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2421875,"f1":null,"seconds":2.3990869522094727e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":6.4609375,"distances_sum":373.6244164748987}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2421875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2421875,"f1":null,"seconds":2.3990869522094727e-6,"exhaustive_search_seconds":1.0319054126739502e-6,"evaluations":6.4609375,"distances_sum":373.6244164748987}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2080078125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2080078125,"f1":null,"seconds":2.2221356630325317e-6,"exhaustive_search_seconds":9.685754776000977e-7,"evaluations":5.6953125,"distances_sum":343.597873837335}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2080078125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2080078125,"f1":null,"seconds":2.2221356630325317e-6,"exhaustive_search_seconds":9.685754776000977e-7,"evaluations":5.6953125,"distances_sum":343.597873837335}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3955078125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3955078125,"f1":null,"seconds":2.332031726837158e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":5.546875,"distances_sum":901.6395033088305}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.58984375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.58984375,"f1":0.7235661907536914,"seconds":3.0174851417541504e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":6.96875,"distances_sum":1383.0251281843314}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.851316912254413,"seconds":3.3136457204818726e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":7.75,"distances_sum":1881.1958064359753}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75390625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.75390625,"f1":0.851316912254413,"seconds":3.3136457204818726e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":7.75,"distances_sum":1881.1958064359753}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9507726648351655,"seconds":3.7942081689834595e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.7578125,"distances_sum":2668.1698538568066}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9507726648351655,"seconds":3.7942081689834595e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.7578125,"distances_sum":2668.1698538568066}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.960943223443224,"seconds":3.766268491744995e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.8359375,"distances_sum":2737.9611220696984}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9698489010989018,"seconds":4.025176167488098e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.8828125,"distances_sum":2798.4580021622764}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9698489010989018,"seconds":4.025176167488098e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.8828125,"distances_sum":2798.4580021622764}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9453125,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9698489010989018,"seconds":4.025176167488098e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.8828125,"distances_sum":2798.4580021622764}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.275390625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.275390625,"f1":null,"seconds":3.382563591003418e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.421875,"distances_sum":655.4702416196644}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8705450799200806,"seconds":5.200505256652832e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.0546875,"distances_sum":1999.1826790221235}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6005859375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.6005859375,"f1":0.7391561563436571,"seconds":3.952533006668091e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.171875,"distances_sum":1470.7109568465157}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.783203125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.783203125,"f1":0.8705450799200806,"seconds":5.200505256652832e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.0546875,"distances_sum":1999.1826790221235}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9394288003663008,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.796875,"distances_sum":2521.342237369586}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9378605769230778,"seconds":5.500391125679016e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.90625,"distances_sum":2457.961953890662}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9571485805860811,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.859375,"distances_sum":2656.0254318225616}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9571485805860811,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.859375,"distances_sum":2656.0254318225616}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9654418498168501,"seconds":5.630776286125183e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.953125,"distances_sum":2708.0898522203624}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9735691391941395,"seconds":5.582347512245178e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9296875,"distances_sum":2793.2917531485473}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.975003121878122,"seconds":5.628913640975952e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9375,"distances_sum":2818.566249161459}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9807119963369965,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.96875,"distances_sum":2842.598639120768}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.970930631868132,"seconds":5.476176738739014e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.921875,"distances_sum":2778.164634214163}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96484375,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9807119963369965,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.96875,"distances_sum":2842.598639120768}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96484375,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9807119963369965,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.96875,"distances_sum":2842.598639120768}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.572265625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.572265625,"f1":0.7122703685203692,"seconds":3.876164555549622e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.1328125,"distances_sum":1209.5303624892874}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.572265625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.572265625,"f1":0.7122703685203692,"seconds":3.876164555549622e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.1328125,"distances_sum":1209.5303624892874}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.9211970321345331,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.609375,"distances_sum":2232.962325129302}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.86328125,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.86328125,"f1":0.9211970321345331,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.609375,"distances_sum":2232.962325129302}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9617616758241763,"seconds":5.444511771202087e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8203125,"distances_sum":2516.4770914729893}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9489297161172167,"seconds":5.3551048040390015e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.7890625,"distances_sum":2423.258462177621}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9617616758241763,"seconds":5.444511771202087e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8203125,"distances_sum":2516.4770914729893}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9617616758241763,"seconds":5.444511771202087e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8203125,"distances_sum":2516.4770914729893}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7957459207459214,"seconds":4.3138861656188965e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.34375,"distances_sum":1578.1995564866977}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.501953125, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.501953125,"f1":0.6487942612942618,"seconds":3.5818666219711304e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":6.1796875,"distances_sum":1111.915712275544}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8476768023643031,"seconds":4.5746564865112305e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.7265625,"distances_sum":1836.5369986415153}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7470703125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7470703125,"f1":0.8476768023643031,"seconds":4.5746564865112305e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.7265625,"distances_sum":1836.5369986415153}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9494104853479857,"seconds":5.2638351917266846e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.75,"distances_sum":2579.741222484519}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9432406135531142,"seconds":5.209818482398987e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.6953125,"distances_sum":2534.469090327865}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80078125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.80078125,"f1":0.8811906843156853,"seconds":4.893168807029724e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.1328125,"distances_sum":2081.137735806427}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.794921875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.794921875,"f1":0.8782571595071603,"seconds":4.854053258895874e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.03125,"distances_sum":2032.00743013552}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.9494104853479857,"seconds":5.2638351917266846e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.75,"distances_sum":2579.741222484519}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.961446886446887,"seconds":5.46872615814209e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8515625,"distances_sum":2637.7296362153343}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9741472069597075,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9140625,"distances_sum":2738.338761213633}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9702037545787547,"seconds":5.608424544334412e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.890625,"distances_sum":2721.7056796317474}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9651842948717954,"seconds":5.427747964859009e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8515625,"distances_sum":2680.103987917231}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9573546245421249,"seconds":5.280598998069763e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8515625,"distances_sum":2594.5026608939093}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9741472069597075,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9140625,"distances_sum":2738.338761213633}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9741472069597075,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9140625,"distances_sum":2738.338761213633}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2734375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2734375,"f1":null,"seconds":2.9690563678741455e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.1171875,"distances_sum":695.9321549691689}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.255859375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.255859375,"f1":null,"seconds":2.896413207054138e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":5.7578125,"distances_sum":632.640323307216}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.275390625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.275390625,"f1":null,"seconds":2.9355287551879883e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.03125,"distances_sum":700.1822885397071}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.275390625,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.275390625,"f1":null,"seconds":2.9355287551879883e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.03125,"distances_sum":700.1822885397071}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5654296875, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5654296875,"f1":0.7087272102897109,"seconds":3.98978590965271e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.9140625,"distances_sum":1210.4284923335688}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.56640625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.56640625,"f1":0.7084268162393166,"seconds":3.948807716369629e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.0234375,"distances_sum":1254.8287342051312}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8637222152847164,"seconds":4.857778549194336e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.0,"distances_sum":1865.3389901808605}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5556640625, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5556640625,"f1":0.7013604451104456,"seconds":3.8817524909973145e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.9921875,"distances_sum":1201.6797725638514}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7724609375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7724609375,"f1":0.8637222152847164,"seconds":4.857778549194336e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.0,"distances_sum":1865.3389901808605}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9671531593406596,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.859375,"distances_sum":2635.084972561854}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8966439810189817,"seconds":5.109235644340515e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.328125,"distances_sum":2079.0249911925525}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8671734515484523,"seconds":4.839152097702026e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.9609375,"distances_sum":1885.3326747469869}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9671531593406596,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.859375,"distances_sum":2635.084972561854}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9671531593406596,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.859375,"distances_sum":2635.084972561854}}, n: 9
inertia(cfft.distances) = 76.8379041852223
inertia(cdnet.distances) = 567.9583558961581
inertia(crand.distances) = 28.419159217171714
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8577777777777778
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.9
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8888888888888888
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8955555555555555
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9155555555555557
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8666666666666667
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9288888888888889
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8911111111111111
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8977777777777778
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9333333333333332
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9266666666666666
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.931111111111111
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9222222222222222
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8822222222222224
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8777777777777779
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8777777777777778
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9133333333333334
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8822222222222221
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8733333333333334
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8911111111111111
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8911111111111111
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8777777777777778
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.88
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8844444444444445
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX===== rocchio like>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX==== clustering>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 3, 3, 2, 1, 3, 3, 3, 2, 2, 3, 3, 3, 1]
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.92
*** finished computation of 12 references, err: [Inf, 0.5811436170339584] ***
*** center 1: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 7]]
** centroid: 9, normalized-entropy: 0.8812908992306927, [(2, 3), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 15 centroids; started with 12
acc = 0.9333333333333333
Test Summary:   | Pass  Total
NearestCentroid |   10     10
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.8553801101446151] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8553801101446151, 0.6344080329686403] ***
*** finished computation of 3 references, err: [Inf, 0.8553801101446151, 0.6344080329686403] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 29, 8]]
** centroid: 1, normalized-entropy: 0.7531979910695015, [(2, 29), (3, 8)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 29]]
*** center 3: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5309654350578785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5309654350578785, 0.39628287732601164] ***
*** starting iteration: 2; err: [Inf, 0.5309654350578785, 0.39628287732601164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5309654350578785, 0.39628287732601164, 0.3762334729731083] ***
*** starting iteration: 3; err: [Inf, 0.5309654350578785, 0.39628287732601164, 0.3762334729731083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5309654350578785, 0.39628287732601164, 0.3762334729731083, 0.37108253672719] ***
*** finished computation of 7 references, err: [Inf, 0.5309654350578785, 0.39628287732601164, 0.3762334729731083, 0.37108253672719] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 17]]
** centroid: 1, normalized-entropy: 0.6098403047164005, [(2, 3), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 9, 1]]
** centroid: 3, normalized-entropy: 0.46899559358928133, [(2, 9), (3, 1)]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 5, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5499167241156101] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5499167241156101, 0.4148600639402866] ***
*** starting iteration: 2; err: [Inf, 0.5499167241156101, 0.4148600639402866] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5499167241156101, 0.4148600639402866, 0.4045835636556149] ***
*** starting iteration: 3; err: [Inf, 0.5499167241156101, 0.4148600639402866, 0.4045835636556149] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5499167241156101, 0.4148600639402866, 0.4045835636556149, 0.3967452688515186] ***
*** finished computation of 7 references, err: [Inf, 0.5499167241156101, 0.4148600639402866, 0.4045835636556149, 0.3967452688515186] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 4, 14]]
** centroid: 1, normalized-entropy: 0.7642045065086204, [(2, 4), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 18, 6]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(2, 18), (3, 6)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.0887774369120597] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0887774369120597, 0.8026219320297241] ***
*** finished computation of 3 references, err: [Inf, 1.0887774369120597, 0.8026219320297241] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [30, 2, 0]]
** centroid: 1, normalized-entropy: 0.3372900666170139, [(1, 30), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 33, 32]]
** centroid: 2, normalized-entropy: 0.9998292601233937, [(2, 33), (3, 32)]
*** center 3: selecting labels [1] (freq >= 2) [from [3, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9817905028164386] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9817905028164386, 0.7456339645385742] ***
*** finished computation of 3 references, err: [Inf, 0.9817905028164386, 0.7456339645385742] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 33, 16]]
** centroid: 1, normalized-entropy: 0.9113423759758414, [(2, 33), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [33, 3, 0]]
** centroid: 2, normalized-entropy: 0.4138168503036336, [(1, 33), (2, 3)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8676542598009109] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8676542598009109, 0.6430768986791372] ***
*** starting iteration: 2; err: [Inf, 0.8676542598009109, 0.6430768986791372] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8676542598009109, 0.6430768986791372, 0.6361485344916582] ***
*** starting iteration: 3; err: [Inf, 0.8676542598009109, 0.6430768986791372, 0.6361485344916582] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8676542598009109, 0.6430768986791372, 0.6361485344916582, 0.6385300569981337] ***
*** finished computation of 3 references, err: [Inf, 0.8676542598009109, 0.6430768986791372, 0.6361485344916582, 0.6385300569981337] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 29, 9]]
** centroid: 1, normalized-entropy: 0.7897492536625221, [(2, 29), (3, 9)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 28]]
*** center 3: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8839250355958939] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8839250355958939, 0.6634112926572562] ***
*** starting iteration: 2; err: [Inf, 0.8839250355958939, 0.6634112926572562] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8839250355958939, 0.6634112926572562, 0.6451907638460398] ***
*** starting iteration: 3; err: [Inf, 0.8839250355958939, 0.6634112926572562, 0.6451907638460398] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8839250355958939, 0.6634112926572562, 0.6451907638460398, 0.6403155183047056] ***
*** finished computation of 3 references, err: [Inf, 0.8839250355958939, 0.6634112926572562, 0.6451907638460398, 0.6403155183047056] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 4, 24]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(2, 4), (3, 24)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 31, 8]]
** centroid: 2, normalized-entropy: 0.7320666900931937, [(2, 31), (3, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.2069965348392726] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2069965348392726, 0.8363315099477768] ***
*** starting iteration: 2; err: [Inf, 1.2069965348392726, 0.8363315099477768] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2069965348392726, 0.8363315099477768, 0.7277210369706154] ***
*** starting iteration: 3; err: [Inf, 1.2069965348392726, 0.8363315099477768, 0.7277210369706154] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2069965348392726, 0.8363315099477768, 0.7277210369706154, 0.6714061319828033] ***
*** finished computation of 3 references, err: [Inf, 1.2069965348392726, 0.8363315099477768, 0.7277210369706154, 0.6714061319828033] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 36, 9]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 36), (3, 9)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 22]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.5794371570646764] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.5794371570646764, 0.7940933793783188] ***
*** starting iteration: 2; err: [Inf, 2.5794371570646764, 0.7940933793783188] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.5794371570646764, 0.7940933793783188, 0.6936701400578023] ***
*** starting iteration: 3; err: [Inf, 2.5794371570646764, 0.7940933793783188, 0.6936701400578023] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.5794371570646764, 0.7940933793783188, 0.6936701400578023, 0.6890335173159837] ***
*** finished computation of 3 references, err: [Inf, 2.5794371570646764, 0.7940933793783188, 0.6936701400578023, 0.6890335173159837] ***
*** center 1: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 29, 37]]
** centroid: 2, normalized-entropy: 0.9893755831922303, [(2, 29), (3, 37)]
*** center 3: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.3720596386492252] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3720596386492252, 0.6318688081949949] ***
*** starting iteration: 2; err: [Inf, 1.3720596386492252, 0.6318688081949949] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3720596386492252, 0.6318688081949949, 0.6211406698822975] ***
*** starting iteration: 3; err: [Inf, 1.3720596386492252, 0.6318688081949949, 0.6211406698822975] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3720596386492252, 0.6318688081949949, 0.6211406698822975, 0.621403798609972] ***
*** finished computation of 3 references, err: [Inf, 1.3720596386492252, 0.6318688081949949, 0.6211406698822975, 0.621403798609972] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 34, 32]]
** centroid: 1, normalized-entropy: 0.9993375041688846, [(2, 34), (3, 32)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [22, 1, 0]]
** centroid: 2, normalized-entropy: 0.2580186686648155, [(1, 22), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9372092637419701] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9372092637419701, 0.7081298691034317] ***
*** starting iteration: 2; err: [Inf, 0.9372092637419701, 0.7081298691034317] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9372092637419701, 0.7081298691034317, 0.6919169425964355] ***
*** starting iteration: 3; err: [Inf, 0.9372092637419701, 0.7081298691034317, 0.6919169425964355] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9372092637419701, 0.7081298691034317, 0.6919169425964355, 0.691245864778757] ***
*** finished computation of 3 references, err: [Inf, 0.9372092637419701, 0.7081298691034317, 0.6919169425964355, 0.691245864778757] ***
*** center 1: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [19, 3, 0]]
** centroid: 2, normalized-entropy: 0.5746356978376794, [(1, 19), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 33, 31]]
** centroid: 3, normalized-entropy: 0.9992954443621548, [(2, 33), (3, 31)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.2460423482209444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.2460423482209444, 0.7566611278057098] ***
*** finished computation of 7 references, err: [Inf, 1.2460423482209444, 0.7566611278057098] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [34, 5, 0]]
** centroid: 1, normalized-entropy: 0.552495114325111, [(1, 34), (2, 5)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 17, 3]]
** centroid: 2, normalized-entropy: 0.6098403047164005, [(2, 17), (3, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 7, 8]]
** centroid: 3, normalized-entropy: 0.9967916319816367, [(2, 7), (3, 8)]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5567077125608921] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5567077125608921, 0.42343934647738934] ***
*** finished computation of 7 references, err: [Inf, 0.5567077125608921, 0.42343934647738934] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 17, 14]]
** centroid: 4, normalized-entropy: 0.9932338197397066, [(2, 17), (3, 14)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5971574266999959] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5971574266999959, 0.41336114041507244] ***
*** finished computation of 7 references, err: [Inf, 0.5971574266999959, 0.41336114041507244] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 14, 8]]
** centroid: 4, normalized-entropy: 0.9456603046006401, [(2, 14), (3, 8)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.8770962339639664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8770962339639664, 0.48377970516681673] ***
*** starting iteration: 2; err: [Inf, 0.8770962339639664, 0.48377970516681673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8770962339639664, 0.48377970516681673, 0.4402882481366396] ***
*** starting iteration: 3; err: [Inf, 0.8770962339639664, 0.48377970516681673, 0.4402882481366396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8770962339639664, 0.48377970516681673, 0.4402882481366396, 0.4366388062387705] ***
*** starting iteration: 4; err: [Inf, 0.8770962339639664, 0.48377970516681673, 0.4402882481366396, 0.4366388062387705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8770962339639664, 0.48377970516681673, 0.4402882481366396, 0.4366388062387705, 0.4366388062387705] ***
*** finished computation of 7 references, err: [Inf, 0.8770962339639664, 0.48377970516681673, 0.4402882481366396, 0.4366388062387705, 0.4366388062387705] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 14, 8]]
** centroid: 1, normalized-entropy: 0.9456603046006401, [(2, 14), (3, 8)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 19]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 15, 1]]
*** center 4: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 7: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6932460375130176] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6932460375130176, 0.5345730427652597] ***
*** starting iteration: 2; err: [Inf, 0.6932460375130176, 0.5345730427652597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6932460375130176, 0.5345730427652597, 0.5127049167454243] ***
*** starting iteration: 3; err: [Inf, 0.6932460375130176, 0.5345730427652597, 0.5127049167454243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6932460375130176, 0.5345730427652597, 0.5127049167454243, 0.5000111074745655] ***
*** starting iteration: 4; err: [Inf, 0.6932460375130176, 0.5345730427652597, 0.5127049167454243, 0.5000111074745655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6932460375130176, 0.5345730427652597, 0.5127049167454243, 0.5000111074745655, 0.4867116951942444] ***
*** starting iteration: 5; err: [Inf, 0.6932460375130176, 0.5345730427652597, 0.5127049167454243, 0.5000111074745655, 0.4867116951942444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6932460375130176, 0.5345730427652597, 0.5127049167454243, 0.5000111074745655, 0.4867116951942444, 0.47643069878220556] ***
*** starting iteration: 6; err: [Inf, 0.6932460375130176, 0.5345730427652597, 0.5127049167454243, 0.5000111074745655, 0.4867116951942444, 0.47643069878220556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6932460375130176, 0.5345730427652597, 0.5127049167454243, 0.5000111074745655, 0.4867116951942444, 0.47643069878220556, 0.4644092406332493] ***
*** starting iteration: 7; err: [Inf, 0.6932460375130176, 0.5345730427652597, 0.5127049167454243, 0.5000111074745655, 0.4867116951942444, 0.47643069878220556, 0.4644092406332493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6932460375130176, 0.5345730427652597, 0.5127049167454243, 0.5000111074745655, 0.4867116951942444, 0.47643069878220556, 0.4644092406332493, 0.4537182360887527] ***
*** starting iteration: 8; err: [Inf, 0.6932460375130176, 0.5345730427652597, 0.5127049167454243, 0.5000111074745655, 0.4867116951942444, 0.47643069878220556, 0.4644092406332493, 0.4537182360887527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6932460375130176, 0.5345730427652597, 0.5127049167454243, 0.5000111074745655, 0.4867116951942444, 0.47643069878220556, 0.4644092406332493, 0.4537182360887527, 0.4519964276254177] ***
*** starting iteration: 9; err: [Inf, 0.6932460375130176, 0.5345730427652597, 0.5127049167454243, 0.5000111074745655, 0.4867116951942444, 0.47643069878220556, 0.4644092406332493, 0.4537182360887527, 0.4519964276254177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6932460375130176, 0.5345730427652597, 0.5127049167454243, 0.5000111074745655, 0.4867116951942444, 0.47643069878220556, 0.4644092406332493, 0.4537182360887527, 0.4519964276254177, 0.45151243850588796] ***
*** finished computation of 7 references, err: [Inf, 0.6932460375130176, 0.5345730427652597, 0.5127049167454243, 0.5000111074745655, 0.4867116951942444, 0.47643069878220556, 0.4644092406332493, 0.4537182360887527, 0.4519964276254177, 0.45151243850588796] ***
*** center 1: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 3: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 14, 1]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 21, 11]]
** centroid: 6, normalized-entropy: 0.9283620723948678, [(2, 21), (3, 11)]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7019475777447224] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7019475777447224, 0.574100880920887] ***
*** starting iteration: 2; err: [Inf, 0.7019475777447224, 0.574100880920887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7019475777447224, 0.574100880920887, 0.5671192497015] ***
*** starting iteration: 3; err: [Inf, 0.7019475777447224, 0.574100880920887, 0.5671192497015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7019475777447224, 0.574100880920887, 0.5671192497015, 0.5668545699864626] ***
*** finished computation of 7 references, err: [Inf, 0.7019475777447224, 0.574100880920887, 0.5671192497015, 0.5668545699864626] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 5, 27]]
** centroid: 1, normalized-entropy: 0.625262405223423, [(2, 5), (3, 27)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 31, 4]]
** centroid: 2, normalized-entropy: 0.5127091420308771, [(2, 31), (3, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
*** center 7: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.8130871610343456] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8130871610343456, 0.6842183906584978] ***
*** starting iteration: 2; err: [Inf, 0.8130871610343456, 0.6842183906584978] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8130871610343456, 0.6842183906584978, 0.6842653737962245] ***
*** finished computation of 3 references, err: [Inf, 0.8130871610343456, 0.6842183906584978, 0.6842653737962245] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 29, 37]]
** centroid: 1, normalized-entropy: 0.9893755831922303, [(2, 29), (3, 37)]
*** center 2: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7521169854700566] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7521169854700566, 0.6254406965523959] ***
*** starting iteration: 2; err: [Inf, 0.7521169854700566, 0.6254406965523959] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7521169854700566, 0.6254406965523959, 0.6259703628718853] ***
*** finished computation of 3 references, err: [Inf, 0.7521169854700566, 0.6254406965523959, 0.6259703628718853] ***
*** center 1: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 33, 32]]
** centroid: 2, normalized-entropy: 0.9998292601233937, [(2, 33), (3, 32)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [16, 2, 0]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(1, 16), (2, 2)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.7879812133312225] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7879812133312225, 1.0967553493380546] ***
*** starting iteration: 2; err: [Inf, 1.7879812133312225, 1.0967553493380546] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7879812133312225, 1.0967553493380546, 0.7920053559541702] ***
*** starting iteration: 3; err: [Inf, 1.7879812133312225, 1.0967553493380546, 0.7920053559541702] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7879812133312225, 1.0967553493380546, 0.7920053559541702, 0.6000303655862809] ***
*** starting iteration: 4; err: [Inf, 1.7879812133312225, 1.0967553493380546, 0.7920053559541702, 0.6000303655862809] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7879812133312225, 1.0967553493380546, 0.7920053559541702, 0.6000303655862809, 0.5532124987244607] ***
*** starting iteration: 5; err: [Inf, 1.7879812133312225, 1.0967553493380546, 0.7920053559541702, 0.6000303655862809, 0.5532124987244607] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7879812133312225, 1.0967553493380546, 0.7920053559541702, 0.6000303655862809, 0.5532124987244607, 0.5498121954500675] ***
*** starting iteration: 6; err: [Inf, 1.7879812133312225, 1.0967553493380546, 0.7920053559541702, 0.6000303655862809, 0.5532124987244607, 0.5498121954500675] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7879812133312225, 1.0967553493380546, 0.7920053559541702, 0.6000303655862809, 0.5532124987244607, 0.5498121954500675, 0.5478413937985898] ***
*** starting iteration: 7; err: [Inf, 1.7879812133312225, 1.0967553493380546, 0.7920053559541702, 0.6000303655862809, 0.5532124987244607, 0.5498121954500675, 0.5478413937985898] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7879812133312225, 1.0967553493380546, 0.7920053559541702, 0.6000303655862809, 0.5532124987244607, 0.5498121954500675, 0.5478413937985898, 0.5463908134400844] ***
*** starting iteration: 8; err: [Inf, 1.7879812133312225, 1.0967553493380546, 0.7920053559541702, 0.6000303655862809, 0.5532124987244607, 0.5498121954500675, 0.5478413937985898, 0.5463908134400844] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7879812133312225, 1.0967553493380546, 0.7920053559541702, 0.6000303655862809, 0.5532124987244607, 0.5498121954500675, 0.5478413937985898, 0.5463908134400844, 0.5458357380330563] ***
*** finished computation of 3 references, err: [Inf, 1.7879812133312225, 1.0967553493380546, 0.7920053559541702, 0.6000303655862809, 0.5532124987244607, 0.5498121954500675, 0.5478413937985898, 0.5463908134400844, 0.5458357380330563] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 4, 25]]
** centroid: 1, normalized-entropy: 0.5787946246321198, [(2, 4), (3, 25)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 32, 6]]
** centroid: 3, normalized-entropy: 0.6292492238560344, [(2, 32), (3, 6)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1412810638546944] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1412810638546944, 0.8848330718278885] ***
*** starting iteration: 2; err: [Inf, 1.1412810638546944, 0.8848330718278885] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1412810638546944, 0.8848330718278885, 0.8397690352797508] ***
*** starting iteration: 3; err: [Inf, 1.1412810638546944, 0.8848330718278885, 0.8397690352797508] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1412810638546944, 0.8848330718278885, 0.8397690352797508, 0.7237459582835436] ***
*** finished computation of 3 references, err: [Inf, 1.1412810638546944, 0.8848330718278885, 0.8397690352797508, 0.7237459582835436] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 12, 36]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 12), (3, 36)]
*** center 2: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 17, 1]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9269635483622551] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9269635483622551, 0.6656312860548497] ***
*** starting iteration: 2; err: [Inf, 0.9269635483622551, 0.6656312860548497] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9269635483622551, 0.6656312860548497, 0.6401646633446216] ***
*** starting iteration: 3; err: [Inf, 0.9269635483622551, 0.6656312860548497, 0.6401646633446216] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9269635483622551, 0.6656312860548497, 0.6401646633446216, 0.6397874969989061] ***
*** finished computation of 3 references, err: [Inf, 0.9269635483622551, 0.6656312860548497, 0.6401646633446216, 0.6397874969989061] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 32, 11]]
** centroid: 1, normalized-entropy: 0.8203636429576731, [(2, 32), (3, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 3, 21]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(2, 3), (3, 21)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9263248650729656] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9263248650729656, 0.6569603057205677] ***
*** starting iteration: 2; err: [Inf, 0.9263248650729656, 0.6569603057205677] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9263248650729656, 0.6569603057205677, 0.6569603057205677] ***
*** finished computation of 3 references, err: [Inf, 0.9263248650729656, 0.6569603057205677, 0.6569603057205677] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 23]]
** centroid: 1, normalized-entropy: 0.5159469300074472, [(2, 3), (3, 23)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 33, 8]]
** centroid: 2, normalized-entropy: 0.7120640548905481, [(2, 33), (3, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9103411911427974] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9103411911427974, 0.6622860267013312] ***
*** starting iteration: 2; err: [Inf, 0.9103411911427974, 0.6622860267013312] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9103411911427974, 0.6622860267013312, 0.5832069282978773] ***
*** starting iteration: 3; err: [Inf, 0.9103411911427974, 0.6622860267013312, 0.5832069282978773] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9103411911427974, 0.6622860267013312, 0.5832069282978773, 0.5478330808877945] ***
*** finished computation of 3 references, err: [Inf, 0.9103411911427974, 0.6622860267013312, 0.5832069282978773, 0.5478330808877945] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 5, 35]]
** centroid: 1, normalized-entropy: 0.5435644431995963, [(2, 5), (3, 35)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 24, 2]]
** centroid: 2, normalized-entropy: 0.3912435636292556, [(2, 24), (3, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.744446438550949] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.744446438550949, 0.5772540424019098] ***
*** starting iteration: 2; err: [Inf, 0.744446438550949, 0.5772540424019098] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.744446438550949, 0.5772540424019098, 0.5380541080236435] ***
*** starting iteration: 3; err: [Inf, 0.744446438550949, 0.5772540424019098, 0.5380541080236435] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.744446438550949, 0.5772540424019098, 0.5380541080236435, 0.5368173580616713] ***
*** finished computation of 3 references, err: [Inf, 0.744446438550949, 0.5772540424019098, 0.5380541080236435, 0.5368173580616713] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 32, 10]]
** centroid: 1, normalized-entropy: 0.7918583525674836, [(2, 32), (3, 10)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 22]]
** centroid: 3, normalized-entropy: 0.5293608652873645, [(2, 3), (3, 22)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.193070446997881] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.193070446997881, 0.7947860954701901] ***
*** starting iteration: 2; err: [Inf, 1.193070446997881, 0.7947860954701901] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.193070446997881, 0.7947860954701901, 0.5731006030738354] ***
*** starting iteration: 3; err: [Inf, 1.193070446997881, 0.7947860954701901, 0.5731006030738354] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.193070446997881, 0.7947860954701901, 0.5731006030738354, 0.5508991515636444] ***
*** finished computation of 3 references, err: [Inf, 1.193070446997881, 0.7947860954701901, 0.5731006030738354, 0.5508991515636444] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 23]]
** centroid: 1, normalized-entropy: 0.24988229283318547, [(2, 1), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 35, 8]]
** centroid: 3, normalized-entropy: 0.6931274153282881, [(2, 35), (3, 8)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.4641033727675676] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.4641033727675676, 0.7904103395342826] ***
*** starting iteration: 2; err: [Inf, 2.4641033727675676, 0.7904103395342826] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.4641033727675676, 0.7904103395342826, 0.6829279636591673] ***
*** starting iteration: 3; err: [Inf, 2.4641033727675676, 0.7904103395342826, 0.6829279636591673] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.4641033727675676, 0.7904103395342826, 0.6829279636591673, 0.682010255753994] ***
*** finished computation of 3 references, err: [Inf, 2.4641033727675676, 0.7904103395342826, 0.6829279636591673, 0.682010255753994] ***
*** center 1: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 29, 37]]
** centroid: 3, normalized-entropy: 0.9893755831922303, [(2, 29), (3, 37)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8207617165148258] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8207617165148258, 0.5392813597619533] ***
*** starting iteration: 2; err: [Inf, 0.8207617165148258, 0.5392813597619533] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8207617165148258, 0.5392813597619533, 0.5344694888591767] ***
*** starting iteration: 3; err: [Inf, 0.8207617165148258, 0.5392813597619533, 0.5344694888591767] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8207617165148258, 0.5392813597619533, 0.5344694888591767, 0.5360898263007402] ***
*** finished computation of 3 references, err: [Inf, 0.8207617165148258, 0.5392813597619533, 0.5344694888591767, 0.5360898263007402] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 22]]
** centroid: 1, normalized-entropy: 0.5293608652873645, [(2, 3), (3, 22)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 32, 10]]
** centroid: 2, normalized-entropy: 0.7918583525674836, [(2, 32), (3, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.3134506726264954] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3134506726264954, 0.7083082354068756] ***
*** starting iteration: 2; err: [Inf, 1.3134506726264954, 0.7083082354068756] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3134506726264954, 0.7083082354068756, 0.6932996037602425] ***
*** starting iteration: 3; err: [Inf, 1.3134506726264954, 0.7083082354068756, 0.6932996037602425] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3134506726264954, 0.7083082354068756, 0.6932996037602425, 0.691245864778757] ***
*** starting iteration: 4; err: [Inf, 1.3134506726264954, 0.7083082354068756, 0.6932996037602425, 0.691245864778757] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3134506726264954, 0.7083082354068756, 0.6932996037602425, 0.691245864778757, 0.6852503057569266] ***
*** starting iteration: 5; err: [Inf, 1.3134506726264954, 0.7083082354068756, 0.6932996037602425, 0.691245864778757, 0.6852503057569266] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3134506726264954, 0.7083082354068756, 0.6932996037602425, 0.691245864778757, 0.6852503057569266, 0.6846034001559019] ***
*** finished computation of 3 references, err: [Inf, 1.3134506726264954, 0.7083082354068756, 0.6932996037602425, 0.691245864778757, 0.6852503057569266, 0.6846034001559019] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [15, 3, 0]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(1, 15), (2, 3)]
*** center 2: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 33, 31]]
** centroid: 3, normalized-entropy: 0.9992954443621548, [(2, 33), (3, 31)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0556724122166634] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0556724122166634, 0.8753804256021976] ***
*** finished computation of 3 references, err: [Inf, 1.0556724122166634, 0.8753804256021976] ***
*** center 1: selecting labels [1] (freq >= 2) [from [27, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 28, 37]]
** centroid: 2, normalized-entropy: 0.9861260846302384, [(2, 28), (3, 37)]
*** center 3: selecting labels [1] (freq >= 2) [from [7, 1, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.834749875664711] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.834749875664711, 0.8475927086174488] ***
*** finished computation of 3 references, err: [Inf, 1.834749875664711, 0.8475927086174488] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 32, 32]]
** centroid: 1, normalized-entropy: 1.0, [(2, 32), (3, 32)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [24, 3, 0]]
** centroid: 2, normalized-entropy: 0.5032583347756457, [(1, 24), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9991545157879591] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9991545157879591, 0.7708261869847775] ***
*** finished computation of 3 references, err: [Inf, 0.9991545157879591, 0.7708261869847775] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [33, 3, 0]]
** centroid: 1, normalized-entropy: 0.4138168503036336, [(1, 33), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 33, 18]]
** centroid: 2, normalized-entropy: 0.9366673818775627, [(2, 33), (3, 18)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 13]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9509873292595148] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9509873292595148, 0.6776841565966606] ***
*** starting iteration: 2; err: [Inf, 0.9509873292595148, 0.6776841565966606] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9509873292595148, 0.6776841565966606, 0.6443980484455823] ***
*** starting iteration: 3; err: [Inf, 0.9509873292595148, 0.6776841565966606, 0.6443980484455823] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9509873292595148, 0.6776841565966606, 0.6443980484455823, 0.6385300569981337] ***
*** finished computation of 3 references, err: [Inf, 0.9509873292595148, 0.6776841565966606, 0.6443980484455823, 0.6385300569981337] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 29, 9]]
** centroid: 1, normalized-entropy: 0.7897492536625221, [(2, 29), (3, 9)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 28]]
*** center 3: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1810809180140496] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1810809180140496, 0.7925699502974749] ***
*** starting iteration: 2; err: [Inf, 1.1810809180140496, 0.7925699502974749] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1810809180140496, 0.7925699502974749, 0.7927507281303405] ***
*** finished computation of 3 references, err: [Inf, 1.1810809180140496, 0.7925699502974749, 0.7927507281303405] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 33, 32]]
** centroid: 1, normalized-entropy: 0.9998292601233937, [(2, 33), (3, 32)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [30, 2, 0]]
** centroid: 2, normalized-entropy: 0.3372900666170139, [(1, 30), (2, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.4144717770814896] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4144717770814896, 0.6573720157891512] ***
*** starting iteration: 2; err: [Inf, 1.4144717770814896, 0.6573720157891512] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4144717770814896, 0.6573720157891512, 0.6552919548749924] ***
*** starting iteration: 3; err: [Inf, 1.4144717770814896, 0.6573720157891512, 0.6552919548749924] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4144717770814896, 0.6573720157891512, 0.6552919548749924, 0.6552919548749924] ***
*** finished computation of 3 references, err: [Inf, 1.4144717770814896, 0.6573720157891512, 0.6552919548749924, 0.6552919548749924] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 31, 6]]
** centroid: 1, normalized-entropy: 0.6394571324851642, [(2, 31), (3, 6)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 5, 25]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 25)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.076487367004156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.076487367004156, 1.0730991964042187] ***
*** starting iteration: 2; err: [Inf, 2.076487367004156, 1.0730991964042187] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.076487367004156, 1.0730991964042187, 0.643336685448885] ***
*** starting iteration: 3; err: [Inf, 2.076487367004156, 1.0730991964042187, 0.643336685448885] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.076487367004156, 1.0730991964042187, 0.643336685448885, 0.5330005072057247] ***
*** finished computation of 7 references, err: [Inf, 2.076487367004156, 1.0730991964042187, 0.643336685448885, 0.5330005072057247] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 29, 8]]
** centroid: 2, normalized-entropy: 0.7531979910695015, [(2, 29), (3, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.661889947578311] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.661889947578311, 0.5318203324079513] ***
*** starting iteration: 2; err: [Inf, 0.661889947578311, 0.5318203324079513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.661889947578311, 0.5318203324079513, 0.4888889110460877] ***
*** starting iteration: 3; err: [Inf, 0.661889947578311, 0.5318203324079513, 0.4888889110460877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.661889947578311, 0.5318203324079513, 0.4888889110460877, 0.4649605392664671] ***
*** finished computation of 7 references, err: [Inf, 0.661889947578311, 0.5318203324079513, 0.4888889110460877, 0.4649605392664671] ***
*** center 1: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 19, 1]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 16, 13]]
** centroid: 3, normalized-entropy: 0.9922666387194963, [(2, 16), (3, 13)]
*** center 4: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6469310696423054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6469310696423054, 0.5189739294350147] ***
*** starting iteration: 2; err: [Inf, 0.6469310696423054, 0.5189739294350147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6469310696423054, 0.5189739294350147, 0.4911566760390997] ***
*** starting iteration: 3; err: [Inf, 0.6469310696423054, 0.5189739294350147, 0.4911566760390997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6469310696423054, 0.5189739294350147, 0.4911566760390997, 0.48424943499267104] ***
*** finished computation of 7 references, err: [Inf, 0.6469310696423054, 0.5189739294350147, 0.4911566760390997, 0.48424943499267104] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 13, 16]]
** centroid: 1, normalized-entropy: 0.9922666387194963, [(2, 13), (3, 16)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 23, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [3, 0, 0]]
*** center 6: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
*** center 7: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.759453634172678] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.759453634172678, 0.5670528993755579] ***
*** starting iteration: 2; err: [Inf, 0.759453634172678, 0.5670528993755579] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.759453634172678, 0.5670528993755579, 0.5453509040176868] ***
*** starting iteration: 3; err: [Inf, 0.759453634172678, 0.5670528993755579, 0.5453509040176868] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.759453634172678, 0.5670528993755579, 0.5453509040176868, 0.5367682204395533] ***
*** finished computation of 3 references, err: [Inf, 0.759453634172678, 0.5670528993755579, 0.5453509040176868, 0.5367682204395533] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 2, 30]]
** centroid: 1, normalized-entropy: 0.3372900666170139, [(2, 2), (3, 30)]
*** center 2: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 27, 7]]
** centroid: 3, normalized-entropy: 0.7335379291086666, [(2, 27), (3, 7)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9209758320450783] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9209758320450783, 0.5458159134536982] ***
*** starting iteration: 2; err: [Inf, 0.9209758320450783, 0.5458159134536982] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9209758320450783, 0.5458159134536982, 0.536562594100833] ***
*** starting iteration: 3; err: [Inf, 0.9209758320450783, 0.5458159134536982, 0.536562594100833] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9209758320450783, 0.5458159134536982, 0.536562594100833, 0.5364812652021647] ***
*** finished computation of 3 references, err: [Inf, 0.9209758320450783, 0.5458159134536982, 0.536562594100833, 0.5364812652021647] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 3, 22]]
** centroid: 2, normalized-entropy: 0.5293608652873645, [(2, 3), (3, 22)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 32, 10]]
** centroid: 3, normalized-entropy: 0.7918583525674836, [(2, 32), (3, 10)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8139728961884976] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8139728961884976, 0.611404674500227] ***
*** starting iteration: 2; err: [Inf, 0.8139728961884976, 0.611404674500227] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8139728961884976, 0.611404674500227, 0.5780808040499688] ***
*** starting iteration: 3; err: [Inf, 0.8139728961884976, 0.611404674500227, 0.5780808040499688] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8139728961884976, 0.611404674500227, 0.5780808040499688, 0.5532124987244607] ***
*** finished computation of 3 references, err: [Inf, 0.8139728961884976, 0.611404674500227, 0.5780808040499688, 0.5532124987244607] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 36, 8]]
** centroid: 1, normalized-entropy: 0.6840384356390419, [(2, 36), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5835285773873329] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5835285773873329, 0.3902427224069834] ***
*** starting iteration: 2; err: [Inf, 0.5835285773873329, 0.3902427224069834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5835285773873329, 0.3902427224069834, 0.3665047328174114] ***
*** starting iteration: 3; err: [Inf, 0.5835285773873329, 0.3902427224069834, 0.3665047328174114] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5835285773873329, 0.3902427224069834, 0.3665047328174114, 0.36015146821737287] ***
*** starting iteration: 4; err: [Inf, 0.5835285773873329, 0.3902427224069834, 0.3665047328174114, 0.36015146821737287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5835285773873329, 0.3902427224069834, 0.3665047328174114, 0.36015146821737287, 0.356250281855464] ***
*** starting iteration: 5; err: [Inf, 0.5835285773873329, 0.3902427224069834, 0.3665047328174114, 0.36015146821737287, 0.356250281855464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5835285773873329, 0.3902427224069834, 0.3665047328174114, 0.36015146821737287, 0.356250281855464, 0.3545603321492672] ***
*** starting iteration: 6; err: [Inf, 0.5835285773873329, 0.3902427224069834, 0.3665047328174114, 0.36015146821737287, 0.356250281855464, 0.3545603321492672] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5835285773873329, 0.3902427224069834, 0.3665047328174114, 0.36015146821737287, 0.356250281855464, 0.3545603321492672, 0.35369630604982377] ***
*** finished computation of 7 references, err: [Inf, 0.5835285773873329, 0.3902427224069834, 0.3665047328174114, 0.36015146821737287, 0.356250281855464, 0.3545603321492672, 0.35369630604982377] ***
*** center 1: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 10, 1]]
** centroid: 3, normalized-entropy: 0.43949698692151346, [(2, 10), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 11, 7]]
** centroid: 4, normalized-entropy: 0.9640787648082293, [(2, 11), (3, 7)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5667781825363636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5667781825363636, 0.37992027793079614] ***
*** starting iteration: 2; err: [Inf, 0.5667781825363636, 0.37992027793079614] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5667781825363636, 0.37992027793079614, 0.37496726363897326] ***
*** starting iteration: 3; err: [Inf, 0.5667781825363636, 0.37992027793079614, 0.37496726363897326] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5667781825363636, 0.37992027793079614, 0.37496726363897326, 0.37555458821356297] ***
*** finished computation of 7 references, err: [Inf, 0.5667781825363636, 0.37992027793079614, 0.37496726363897326, 0.37555458821356297] ***
*** center 1: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 12, 1]]
** centroid: 3, normalized-entropy: 0.3912435636292556, [(2, 12), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 17, 3]]
** centroid: 4, normalized-entropy: 0.6098403047164005, [(2, 17), (3, 3)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 1, 21]]
** centroid: 7, normalized-entropy: 0.2667649878030262, [(2, 1), (3, 21)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5886698551476002] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5886698551476002, 0.42008439645171164] ***
*** starting iteration: 2; err: [Inf, 0.5886698551476002, 0.42008439645171164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5886698551476002, 0.42008439645171164, 0.40387889608740807] ***
*** starting iteration: 3; err: [Inf, 0.5886698551476002, 0.42008439645171164, 0.40387889608740807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5886698551476002, 0.42008439645171164, 0.40387889608740807, 0.38828572116792204] ***
*** starting iteration: 4; err: [Inf, 0.5886698551476002, 0.42008439645171164, 0.40387889608740807, 0.38828572116792204] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5886698551476002, 0.42008439645171164, 0.40387889608740807, 0.38828572116792204, 0.3843712928146124] ***
*** starting iteration: 5; err: [Inf, 0.5886698551476002, 0.42008439645171164, 0.40387889608740807, 0.38828572116792204, 0.3843712928146124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5886698551476002, 0.42008439645171164, 0.40387889608740807, 0.38828572116792204, 0.3843712928146124, 0.382404952198267] ***
*** starting iteration: 6; err: [Inf, 0.5886698551476002, 0.42008439645171164, 0.40387889608740807, 0.38828572116792204, 0.3843712928146124, 0.382404952198267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5886698551476002, 0.42008439645171164, 0.40387889608740807, 0.38828572116792204, 0.3843712928146124, 0.382404952198267, 0.38174651831388473] ***
*** finished computation of 7 references, err: [Inf, 0.5886698551476002, 0.42008439645171164, 0.40387889608740807, 0.38828572116792204, 0.3843712928146124, 0.382404952198267, 0.38174651831388473] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 14, 8]]
** centroid: 1, normalized-entropy: 0.9456603046006401, [(2, 14), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6807579138875007] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6807579138875007, 0.47420667923986914] ***
*** starting iteration: 2; err: [Inf, 0.6807579138875007, 0.47420667923986914] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6807579138875007, 0.47420667923986914, 0.464326371178031] ***
*** starting iteration: 3; err: [Inf, 0.6807579138875007, 0.47420667923986914, 0.464326371178031] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6807579138875007, 0.47420667923986914, 0.464326371178031, 0.45734554193913934] ***
*** starting iteration: 4; err: [Inf, 0.6807579138875007, 0.47420667923986914, 0.464326371178031, 0.45734554193913934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6807579138875007, 0.47420667923986914, 0.464326371178031, 0.45734554193913934, 0.4420311085134745] ***
*** starting iteration: 5; err: [Inf, 0.6807579138875007, 0.47420667923986914, 0.464326371178031, 0.45734554193913934, 0.4420311085134745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6807579138875007, 0.47420667923986914, 0.464326371178031, 0.45734554193913934, 0.4420311085134745, 0.43499358631670476] ***
*** starting iteration: 6; err: [Inf, 0.6807579138875007, 0.47420667923986914, 0.464326371178031, 0.45734554193913934, 0.4420311085134745, 0.43499358631670476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6807579138875007, 0.47420667923986914, 0.464326371178031, 0.45734554193913934, 0.4420311085134745, 0.43499358631670476, 0.43499358631670476] ***
*** finished computation of 7 references, err: [Inf, 0.6807579138875007, 0.47420667923986914, 0.464326371178031, 0.45734554193913934, 0.4420311085134745, 0.43499358631670476, 0.43499358631670476] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 2: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 17, 1]]
*** center 4: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 12, 7]]
** centroid: 6, normalized-entropy: 0.9494520153879484, [(2, 12), (3, 7)]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6445760196447372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6445760196447372, 0.48166684120893477] ***
*** starting iteration: 2; err: [Inf, 0.6445760196447372, 0.48166684120893477] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6445760196447372, 0.48166684120893477, 0.4570109812915325] ***
*** starting iteration: 3; err: [Inf, 0.6445760196447372, 0.48166684120893477, 0.4570109812915325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6445760196447372, 0.48166684120893477, 0.4570109812915325, 0.4469953212887049] ***
*** starting iteration: 4; err: [Inf, 0.6445760196447372, 0.48166684120893477, 0.4570109812915325, 0.4469953212887049] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6445760196447372, 0.48166684120893477, 0.4570109812915325, 0.4469953212887049, 0.4450989455729723] ***
*** starting iteration: 5; err: [Inf, 0.6445760196447372, 0.48166684120893477, 0.4570109812915325, 0.4469953212887049, 0.4450989455729723] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6445760196447372, 0.48166684120893477, 0.4570109812915325, 0.4469953212887049, 0.4450989455729723, 0.441082411557436] ***
*** starting iteration: 6; err: [Inf, 0.6445760196447372, 0.48166684120893477, 0.4570109812915325, 0.4469953212887049, 0.4450989455729723, 0.441082411557436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6445760196447372, 0.48166684120893477, 0.4570109812915325, 0.4469953212887049, 0.4450989455729723, 0.441082411557436, 0.43988178685307505] ***
*** starting iteration: 7; err: [Inf, 0.6445760196447372, 0.48166684120893477, 0.4570109812915325, 0.4469953212887049, 0.4450989455729723, 0.441082411557436, 0.43988178685307505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6445760196447372, 0.48166684120893477, 0.4570109812915325, 0.4469953212887049, 0.4450989455729723, 0.441082411557436, 0.43988178685307505, 0.43988178685307505] ***
*** finished computation of 7 references, err: [Inf, 0.6445760196447372, 0.48166684120893477, 0.4570109812915325, 0.4469953212887049, 0.4450989455729723, 0.441082411557436, 0.43988178685307505, 0.43988178685307505] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 19, 10]]
** centroid: 1, normalized-entropy: 0.9293636260137188, [(2, 19), (3, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [23, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 1, 16]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 11, 1]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6724835345149041] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6724835345149041, 0.4696771877259016] ***
*** starting iteration: 2; err: [Inf, 0.6724835345149041, 0.4696771877259016] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6724835345149041, 0.4696771877259016, 0.45449306346476076] ***
*** starting iteration: 3; err: [Inf, 0.6724835345149041, 0.4696771877259016, 0.45449306346476076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6724835345149041, 0.4696771877259016, 0.45449306346476076, 0.44899117641150954] ***
*** starting iteration: 4; err: [Inf, 0.6724835345149041, 0.4696771877259016, 0.45449306346476076, 0.44899117641150954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6724835345149041, 0.4696771877259016, 0.45449306346476076, 0.44899117641150954, 0.44788381226360796] ***
*** starting iteration: 5; err: [Inf, 0.6724835345149041, 0.4696771877259016, 0.45449306346476076, 0.44899117641150954, 0.44788381226360796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6724835345149041, 0.4696771877259016, 0.45449306346476076, 0.44899117641150954, 0.44788381226360796, 0.4462483947724104] ***
*** starting iteration: 6; err: [Inf, 0.6724835345149041, 0.4696771877259016, 0.45449306346476076, 0.44899117641150954, 0.44788381226360796, 0.4462483947724104] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6724835345149041, 0.4696771877259016, 0.45449306346476076, 0.44899117641150954, 0.44788381226360796, 0.4462483947724104, 0.44383339159190655] ***
*** starting iteration: 7; err: [Inf, 0.6724835345149041, 0.4696771877259016, 0.45449306346476076, 0.44899117641150954, 0.44788381226360796, 0.4462483947724104, 0.44383339159190655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6724835345149041, 0.4696771877259016, 0.45449306346476076, 0.44899117641150954, 0.44788381226360796, 0.4462483947724104, 0.44383339159190655, 0.44229811020195486] ***
*** starting iteration: 8; err: [Inf, 0.6724835345149041, 0.4696771877259016, 0.45449306346476076, 0.44899117641150954, 0.44788381226360796, 0.4462483947724104, 0.44383339159190655, 0.44229811020195486] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6724835345149041, 0.4696771877259016, 0.45449306346476076, 0.44899117641150954, 0.44788381226360796, 0.4462483947724104, 0.44383339159190655, 0.44229811020195486, 0.44229811020195486] ***
*** finished computation of 7 references, err: [Inf, 0.6724835345149041, 0.4696771877259016, 0.45449306346476076, 0.44899117641150954, 0.44788381226360796, 0.4462483947724104, 0.44383339159190655, 0.44229811020195486, 0.44229811020195486] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 12, 10]]
** centroid: 1, normalized-entropy: 0.9940302114769566, [(2, 12), (3, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 10, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 5: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 14, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.608436678647995] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.608436678647995, 0.3945638586580753] ***
*** starting iteration: 2; err: [Inf, 0.608436678647995, 0.3945638586580753] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.608436678647995, 0.3945638586580753, 0.36631410554051397] ***
*** starting iteration: 3; err: [Inf, 0.608436678647995, 0.3945638586580753, 0.36631410554051397] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.608436678647995, 0.3945638586580753, 0.36631410554051397, 0.35866409599781035] ***
*** finished computation of 7 references, err: [Inf, 0.608436678647995, 0.3945638586580753, 0.36631410554051397, 0.35866409599781035] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 11, 7]]
** centroid: 1, normalized-entropy: 0.9640787648082293, [(2, 11), (3, 7)]
*** center 2: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 9, 1]]
** centroid: 7, normalized-entropy: 0.46899559358928133, [(2, 9), (3, 1)]
finished with 9 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 16)
[0.9666666666666667, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9133333333333332, 0.9066666666666666, 0.9066666666666666, 0.9066666666666666, 0.9066666666666666, 0.9, 0.8999999999999999]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9666666666666667
finished with 16
iteration 2 finished
generating 4 configurations using top 4 configurations, starting with 16)
[0.9666666666666667, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9133333333333332, 0.9066666666666666, 0.9066666666666666, 0.9066666666666666, 0.9066666666666666, 0.9, 0.8999999999999999]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9666666666666667
finished with 17
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.7828172700107098] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7828172700107098, 0.46908000223338603] ***
*** starting iteration: 2; err: [Inf, 0.7828172700107098, 0.46908000223338603] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7828172700107098, 0.46908000223338603, 0.40469159714877606] ***
*** starting iteration: 3; err: [Inf, 0.7828172700107098, 0.46908000223338603, 0.40469159714877606] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7828172700107098, 0.46908000223338603, 0.40469159714877606, 0.39904900200664994] ***
*** finished computation of 7 references, err: [Inf, 0.7828172700107098, 0.46908000223338603, 0.40469159714877606, 0.39904900200664994] ***
*** center 1: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 18, 1]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 11, 7]]
** centroid: 5, normalized-entropy: 0.9640787648082293, [(2, 11), (3, 7)]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5886861881613732] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5886861881613732, 0.40498522110283375] ***
*** starting iteration: 2; err: [Inf, 0.5886861881613732, 0.40498522110283375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5886861881613732, 0.40498522110283375, 0.3898725439608097] ***
*** starting iteration: 3; err: [Inf, 0.5886861881613732, 0.40498522110283375, 0.3898725439608097] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5886861881613732, 0.40498522110283375, 0.3898725439608097, 0.3866973801702261] ***
*** finished computation of 7 references, err: [Inf, 0.5886861881613732, 0.40498522110283375, 0.3898725439608097, 0.3866973801702261] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 14, 1]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 15, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 3, 13]]
** centroid: 4, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 3, 10]]
** centroid: 5, normalized-entropy: 0.7793498372920851, [(2, 3), (3, 10)]
*** center 6: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [0, 0, 1]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7448431777209044] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7448431777209044, 0.6410525941848755] ***
*** starting iteration: 2; err: [Inf, 0.7448431777209044, 0.6410525941848755] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7448431777209044, 0.6410525941848755, 0.6024709492921829] ***
*** starting iteration: 3; err: [Inf, 0.7448431777209044, 0.6410525941848755, 0.6024709492921829] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7448431777209044, 0.6410525941848755, 0.6024709492921829, 0.5387294815480709] ***
*** finished computation of 7 references, err: [Inf, 0.7448431777209044, 0.6410525941848755, 0.6024709492921829, 0.5387294815480709] ***
*** center 1: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [7, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 20, 31]]
** centroid: 5, normalized-entropy: 0.9661773513883509, [(2, 20), (3, 31)]
*** center 6: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 17)
[0.9666666666666667, 0.9533333333333333, 0.9466666666666667, 0.9466666666666667, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9133333333333332, 0.9066666666666666, 0.9066666666666666, 0.9066666666666666, 0.9066666666666666, 0.9, 0.8999999999999999]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9666666666666667
finished with 19
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.5896912383288145] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5896912383288145, 0.4071705451607704] ***
*** finished computation of 7 references, err: [Inf, 0.5896912383288145, 0.4071705451607704] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 22]]
*** center 2: selecting labels [1] (freq >= 2) [from [28, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 5: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 13, 4]]
** centroid: 6, normalized-entropy: 0.787126586201269, [(2, 13), (3, 4)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 9, 2]]
** centroid: 7, normalized-entropy: 0.6840384356390419, [(2, 9), (3, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5861373111605644] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5861373111605644, 0.4103925383836031] ***
*** finished computation of 7 references, err: [Inf, 0.5861373111605644, 0.4103925383836031] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 14, 3]]
** centroid: 4, normalized-entropy: 0.6722948170756378, [(2, 14), (3, 3)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 5, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 1, 17]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 15, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5261888741701841] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5261888741701841, 0.3922691153362393] ***
*** finished computation of 7 references, err: [Inf, 0.5261888741701841, 0.3922691153362393] ***
*** center 1: selecting labels [1] (freq >= 2) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 18, 2]]
** centroid: 3, normalized-entropy: 0.46899559358928133, [(2, 18), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 11, 7]]
** centroid: 4, normalized-entropy: 0.9640787648082293, [(2, 11), (3, 7)]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 17]]
*** center 6: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6851146405935288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6851146405935288, 0.44523602060973644] ***
*** finished computation of 7 references, err: [Inf, 0.6851146405935288, 0.44523602060973644] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
*** center 2: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 14, 1]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 5: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 15, 7]]
** centroid: 6, normalized-entropy: 0.9023932827949788, [(2, 15), (3, 7)]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.700039668083191] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.700039668083191, 0.4657389412075281] ***
*** finished computation of 7 references, err: [Inf, 0.700039668083191, 0.4657389412075281] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 23, 5]]
** centroid: 1, normalized-entropy: 0.6769418697808861, [(2, 23), (3, 5)]
*** center 2: selecting labels [1] (freq >= 2) [from [24, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 10, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 1, 16]]
*** center 6: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 1, 5]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6381900875270367] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6381900875270367, 0.46902755469083784] ***
*** finished computation of 7 references, err: [Inf, 0.6381900875270367, 0.46902755469083784] ***
*** center 1: selecting labels [1] (freq >= 2) [from [24, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 17, 2]]
** centroid: 3, normalized-entropy: 0.48546076074591343, [(2, 17), (3, 2)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 8, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 11, 7]]
** centroid: 6, normalized-entropy: 0.9640787648082293, [(2, 11), (3, 7)]
*** center 7: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
finished with 9 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 19)
[0.9666666666666667, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9466666666666667, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9199999999999999, 0.9133333333333332, 0.9066666666666666, 0.9066666666666666, 0.9066666666666666, 0.9066666666666666, 0.9, 0.8999999999999999]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9666666666666667
finished with 19
iteration 5 finished
generating 4 configurations using top 4 configurations, starting with 19)
[0.9666666666666667, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9466666666666667, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9199999999999999, 0.9133333333333332, 0.9066666666666666, 0.9066666666666666, 0.9066666666666666, 0.9066666666666666, 0.9, 0.8999999999999999]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9666666666666667
finished with 19
iteration 6 finished
generating 4 configurations using top 4 configurations, starting with 19)
[0.9666666666666667, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9466666666666667, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9199999999999999, 0.9133333333333332, 0.9066666666666666, 0.9066666666666666, 0.9066666666666666, 0.9066666666666666, 0.9, 0.8999999999999999]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9666666666666667
finished with 21
iteration 7 finished
*** starting iteration: 1; err: [Inf, 1.0854945029318332] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0854945029318332, 0.642152719721198] ***
*** starting iteration: 2; err: [Inf, 1.0854945029318332, 0.642152719721198] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0854945029318332, 0.642152719721198, 0.6385300569981337] ***
*** starting iteration: 3; err: [Inf, 1.0854945029318332, 0.642152719721198, 0.6385300569981337] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0854945029318332, 0.642152719721198, 0.6385300569981337, 0.6385300569981337] ***
*** finished computation of 3 references, err: [Inf, 1.0854945029318332, 0.642152719721198, 0.6385300569981337, 0.6385300569981337] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 29, 9]]
** centroid: 1, normalized-entropy: 0.7897492536625221, [(2, 29), (3, 9)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 28]]
*** center 3: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0344937208294869] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0344937208294869, 0.6471793187409639] ***
*** starting iteration: 2; err: [Inf, 1.0344937208294869, 0.6471793187409639] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0344937208294869, 0.6471793187409639, 0.6403155183047056] ***
*** starting iteration: 3; err: [Inf, 1.0344937208294869, 0.6471793187409639, 0.6403155183047056] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0344937208294869, 0.6471793187409639, 0.6403155183047056, 0.6403155183047056] ***
*** finished computation of 3 references, err: [Inf, 1.0344937208294869, 0.6471793187409639, 0.6403155183047056, 0.6403155183047056] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 4, 24]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(2, 4), (3, 24)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 31, 8]]
** centroid: 2, normalized-entropy: 0.7320666900931937, [(2, 31), (3, 8)]
*** center 3: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8004890143871307] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8004890143871307, 0.6572494198381901] ***
*** starting iteration: 2; err: [Inf, 0.8004890143871307, 0.6572494198381901] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8004890143871307, 0.6572494198381901, 0.6480615279078483] ***
*** starting iteration: 3; err: [Inf, 0.8004890143871307, 0.6572494198381901, 0.6480615279078483] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8004890143871307, 0.6572494198381901, 0.6480615279078483, 0.6463367475569248] ***
*** starting iteration: 4; err: [Inf, 0.8004890143871307, 0.6572494198381901, 0.6480615279078483, 0.6463367475569248] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8004890143871307, 0.6572494198381901, 0.6480615279078483, 0.6463367475569248, 0.6463367475569248] ***
*** finished computation of 3 references, err: [Inf, 0.8004890143871307, 0.6572494198381901, 0.6480615279078483, 0.6463367475569248, 0.6463367475569248] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 11, 31]]
** centroid: 1, normalized-entropy: 0.8296071030882032, [(2, 11), (3, 31)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 25, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7789127145707607] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7789127145707607, 0.5561670946329832] ***
*** starting iteration: 2; err: [Inf, 0.7789127145707607, 0.5561670946329832] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7789127145707607, 0.5561670946329832, 0.5427093333750963] ***
*** starting iteration: 3; err: [Inf, 0.7789127145707607, 0.5561670946329832, 0.5427093333750963] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7789127145707607, 0.5561670946329832, 0.5427093333750963, 0.5393885350972414] ***
*** starting iteration: 4; err: [Inf, 0.7789127145707607, 0.5561670946329832, 0.5427093333750963, 0.5393885350972414] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7789127145707607, 0.5561670946329832, 0.5427093333750963, 0.5393885350972414, 0.5393885350972414] ***
*** finished computation of 3 references, err: [Inf, 0.7789127145707607, 0.5561670946329832, 0.5427093333750963, 0.5393885350972414, 0.5393885350972414] ***
*** center 1: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 29, 9]]
** centroid: 2, normalized-entropy: 0.7897492536625221, [(2, 29), (3, 9)]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 28]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.669087581038475] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.669087581038475, 0.5338704593479633] ***
*** starting iteration: 2; err: [Inf, 0.669087581038475, 0.5338704593479633] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.669087581038475, 0.5338704593479633, 0.5347421052306891] ***
*** finished computation of 3 references, err: [Inf, 0.669087581038475, 0.5338704593479633, 0.5347421052306891] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 32, 8]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(2, 32), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 24]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(2, 3), (3, 24)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.7474874077737332] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7474874077737332, 0.9719103181362152] ***
*** starting iteration: 2; err: [Inf, 1.7474874077737332, 0.9719103181362152] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7474874077737332, 0.9719103181362152, 0.675314120054245] ***
*** starting iteration: 3; err: [Inf, 1.7474874077737332, 0.9719103181362152, 0.675314120054245] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7474874077737332, 0.9719103181362152, 0.675314120054245, 0.5606512068212033] ***
*** starting iteration: 4; err: [Inf, 1.7474874077737332, 0.9719103181362152, 0.675314120054245, 0.5606512068212033] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7474874077737332, 0.9719103181362152, 0.675314120054245, 0.5606512068212033, 0.5508991515636444] ***
*** starting iteration: 5; err: [Inf, 1.7474874077737332, 0.9719103181362152, 0.675314120054245, 0.5606512068212033, 0.5508991515636444] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7474874077737332, 0.9719103181362152, 0.675314120054245, 0.5606512068212033, 0.5508991515636444, 0.5487934510409832] ***
*** starting iteration: 6; err: [Inf, 1.7474874077737332, 0.9719103181362152, 0.675314120054245, 0.5606512068212033, 0.5508991515636444, 0.5487934510409832] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7474874077737332, 0.9719103181362152, 0.675314120054245, 0.5606512068212033, 0.5508991515636444, 0.5487934510409832, 0.5478413937985898] ***
*** finished computation of 3 references, err: [Inf, 1.7474874077737332, 0.9719103181362152, 0.675314120054245, 0.5606512068212033, 0.5508991515636444, 0.5487934510409832, 0.5478413937985898] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 24]]
** centroid: 1, normalized-entropy: 0.5032583347756457, [(2, 3), (3, 24)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 33, 7]]
** centroid: 2, normalized-entropy: 0.6690158350565576, [(2, 33), (3, 7)]
*** center 3: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
finished with 4 centroids; started with 3
generating 4 configurations using top 4 configurations, starting with 21)
[0.9666666666666667, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9133333333333332, 0.9066666666666666, 0.9066666666666666, 0.9066666666666666, 0.9066666666666666, 0.9, 0.8999999999999999]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9666666666666667
finished with 21
iteration 8 finished
generating 4 configurations using top 4 configurations, starting with 21)
[0.9666666666666667, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9466666666666667, 0.9466666666666667, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9133333333333332, 0.9066666666666666, 0.9066666666666666, 0.9066666666666666, 0.9066666666666666, 0.9, 0.8999999999999999]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9666666666666667
finished with 21
iteration 9 finished
[ Info: ========== BEST MODEL ==========
[ Info: (AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2), 0.9666666666666667)
[ Info: AKNC{Array{Float64,1}}[AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[7.550000000000001, 2.9000000000000004, 6.3999999999999995, 2.0666666666666664], [4.613333333333332, 3.1133333333333337, 1.4, 0.2066666666666667], [5.538888888888889, 2.6944444444444446, 4.050000000000001, 1.2722222222222221], [5.199999999999999, 3.6210526315789466, 1.4947368421052634, 0.3052631578947369], [6.505000000000001, 3.075, 5.51, 2.1900000000000004], [6.2749999999999995, 2.783333333333333, 4.65, 1.4416666666666667], [5.885714285714285, 2.657142857142857, 4.971428571428572, 1.842857142857143], [7.6000000000000005, 3.733333333333333, 6.400000000000001, 2.2333333333333334]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [3, 1, 2, 1, 3, 2, 3, 3], 3), KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[6.336842105263157, 2.9473684210526314, 4.594736842105263, 1.4578947368421054], [5.989999999999999, 2.7, 5.020000000000001, 1.8499999999999996], [4.869565217391304, 3.2478260869565205, 1.4565217391304344, 0.22173913043478263], [7.58, 3.06, 6.42, 1.9599999999999997], [5.125, 2.325, 3.375, 1.025], [5.38, 3.8699999999999997, 1.58, 0.3], [6.647058823529413, 3.01764705882353, 5.476470588235294, 2.0000000000000004], [5.641666666666667, 2.6999999999999997, 4.075, 1.2666666666666668]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 3, 1, 3, 2, 1, 3, 2], 3), KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[6.55, 3.016666666666667, 4.708333333333333, 1.4916666666666665], [6.12, 2.79, 5.039999999999999, 1.7700000000000002], [4.825, 3.185, 1.4200000000000002, 0.20500000000000002], [5.300000000000001, 2.42, 3.6199999999999997, 1.1300000000000001], [7.466666666666668, 3.183333333333333, 6.3500000000000005, 2.15], [5.407692307692307, 3.784615384615385, 1.4846153846153847, 0.2538461538461539], [5.821428571428572, 2.7857142857142856, 4.207142857142857, 1.2785714285714287], [6.633333333333334, 3.073333333333333, 5.6466666666666665, 2.146666666666667]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 3, 1, 2, 3, 1, 2, 3], 3), KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2))]
Test Summary: | Pass  Total
AKNC          |    1      1
[91, 1, 1, 3, 1, 2, 1, 1, 6, 1, 7, 3, 8, 9, 16, 4, 2, 10, 6, 8, 1, 8, 12, 14, 2, 1, 7, 1, 2, 26, 13, 14, 10, 38, 9, 10, 3, 11, 5, 19, 14, 2, 31, 14, 8, 26, 5, 14, 12, 2, 36, 8, 21, 7, 16, 16, 39, 13, 146, 6, 20, 37, 10, 2, 4, 11, 6, 10, 66, 70, 4, 5, 12, 22, 49, 12, 20, 3, 58, 24, 1, 27, 57, 5, 1, 3, 27, 15, 87, 3, 42, 3, 195, 1, 8, 6, 20, 4, 9, 40, 7, 19, 20, 9, 5, 5, 15, 13, 9, 4, 2, 4, 18, 12, 36, 7, 7, 9, 10, 8, 201, 19, 3, 15, 93, 2, 8, 35, 30, 106, 4, 31, 31, 41, 16, 3, 38, 26, 61, 12, 14, 155, 8, 12, 95, 9, 9, 8, 7, 7, 4, 3, 122, 16, 10, 45, 7, 30, 25, 155, 25, 381, 91, 21, 82, 39, 62, 42, 5, 37, 8, 33, 87, 13, 5, 37, 3, 8, 4, 33, 3, 28, 5, 10, 9, 15, 17, 26, 177, 29, 24, 24, 10, 40, 28, 9, 3, 36, 24, 18, 17, 6, 28, 21, 23, 50, 90, 9, 560, 131, 3, 230, 19, 5, 38, 25, 14, 18, 12, 13, 138, 14, 12, 14, 4, 4, 4, 25, 16, 88, 18, 9, 13, 5, 5, 2, 137, 13, 17, 117, 10, 253, 24, 8, 9, 17, 63, 4, 380, 12, 21, 8, 30, 397, 5, 12, 3, 5, 13, 7, 53, 230, 3, 40, 40, 179, 5, 147, 11, 3, 15, 15, 10, 12, 47, 43, 75, 7, 4, 39, 15, 84, 14, 13, 10, 15, 18, 17, 7, 12, 8, 3, 24, 3, 65, 62, 69, 100, 120, 7]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6400000000000002, speedup = 0.21508451759041017, eval_ratio = 0.069564)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":null,"recall":0.36197916666666674,"f1":null,"seconds":9.243376553058624e-5,"exhaustive_search_seconds":0.00022006221115589142,"evaluations":452.625,"distances_sum":1733.2829510709682}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5407986111111109,"recall":0.5407986111111109,"f1":null,"seconds":0.00015280023217201233,"exhaustive_search_seconds":0.00022006221115589142,"evaluations":573.875,"distances_sum":1674.109199035503}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6371527777777773,"recall":0.6371527777777773,"f1":0.6371527777777773,"seconds":0.00020323321223258972,"exhaustive_search_seconds":0.00022006221115589142,"evaluations":682.4375,"distances_sum":1619.3467774516594}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7065972222222219,"recall":0.7065972222222219,"f1":0.7065972222222219,"seconds":0.0002550799399614334,"exhaustive_search_seconds":0.00022006221115589142,"evaluations":781.703125,"distances_sum":1591.8811988845046}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7664930555555554,"recall":0.7664930555555554,"f1":0.7664930555555554,"seconds":0.0003072097897529602,"exhaustive_search_seconds":0.00022006221115589142,"evaluations":875.125,"distances_sum":1572.5623243573436}
KCenters.DeloneInvIndex> optimize! step region_expansion=7, performance {"precision":0.797743055555555,"recall":0.797743055555555,"f1":0.797743055555555,"seconds":0.00044578686356544495,"exhaustive_search_seconds":0.00022006221115589142,"evaluations":963.4921875,"distances_sum":1565.0829785541434}
KCenters.DeloneInvIndex> reached performance {"precision":0.8298611111111105,"recall":0.8298611111111105,"f1":0.8298611111111105,"seconds":0.0003853756934404373,"exhaustive_search_seconds":0.00022006221115589142,"evaluations":1049.0078125,"distances_sum":1554.5017369905229}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8639999999999999, speedup = 0.5582286934020201, eval_ratio = 0.110828)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
