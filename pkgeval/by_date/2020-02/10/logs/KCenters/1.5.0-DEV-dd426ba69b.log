Julia Version 1.5.0-DEV.255
Commit dd426ba69b (2020-02-09 18:28 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed PooledArrays ──────────────── v0.5.3
  Installed KCenters ──────────────────── v0.1.11
  Installed Parsers ───────────────────── v0.3.11
  Installed Compat ────────────────────── v3.4.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed StatsBase ─────────────────── v0.32.0
  Installed SimilaritySearch ──────────── v0.3.18
  Installed Reexport ──────────────────── v0.2.0
  Installed MLDataUtils ───────────────── v0.5.0
  Installed MLDataPattern ─────────────── v0.5.0
  Installed Missings ──────────────────── v0.4.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed InvertedIndices ───────────── v1.0.0
  Installed DataAPI ───────────────────── v1.1.0
  Installed Tables ────────────────────── v0.2.11
  Installed JSON ──────────────────────── v0.21.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed TableTraits ───────────────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed OrderedCollections ────────── v1.1.0
  Installed DataStructures ────────────── v0.17.9
  Installed DataFrames ────────────────── v0.20.0
  Installed MLLabelUtils ──────────────── v0.5.1
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.1.11
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.4.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.1.11
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.18
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_g029TT/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.4.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.0
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.1.11
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.18
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v0.2.11
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
[ Info: 117.08000000000011
[ Info: 80.99999999999997
[ Info: 42.079999999999984
[ Info: 25.799999999999997
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 267.50999838966254
[ Info: 215.63999825865392
[ Info: 196.1300000884722
[ Info: 75.46000113480547
Test Summary:        |
Clustering with dnet | No tests
inertia(cfft.distances) = 19.30006825901031
inertia(cdnet.distances) = 22.261329568326776
inertia(crand.distances) = 22.47495140167205
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":null,"recall":0.66796875,"f1":null,"seconds":5.2656978368759155e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":7.8359375,"distances_sum":2087.439210810668}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.560546875, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.560546875,"f1":0.7026626151626156,"seconds":4.351139068603516e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":7.03125,"distances_sum":1709.9222362571652}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.66796875,"state":{"ssize":1,"bsize":4},"perf":{"precision":null,"recall":0.66796875,"f1":null,"seconds":5.2656978368759155e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":7.8359375,"distances_sum":2087.439210810668}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8616794663669672,"seconds":5.422160029411316e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.2734375,"distances_sum":2521.166524414434}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8851710789210797,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.796875,"distances_sum":2701.5591960248703}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9328182234432242,"seconds":5.906447768211365e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.7109375,"distances_sum":3153.633016083638}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.884765625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.884765625,"f1":0.9328182234432242,"seconds":5.906447768211365e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.7109375,"distances_sum":3153.633016083638}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9662259615384619,"seconds":6.474554538726807e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.921875,"distances_sum":3412.139788452796}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9594894688644691,"seconds":6.340444087982178e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.875,"distances_sum":3330.331050646029}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9626888736263739,"seconds":6.0889869928359985e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.890625,"distances_sum":3368.5045494843334}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9578182234432241,"seconds":5.97536563873291e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.8828125,"distances_sum":3315.4627815548206}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9662259615384619,"seconds":6.474554538726807e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.921875,"distances_sum":3412.139788452796}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9662259615384619,"seconds":6.474554538726807e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.921875,"distances_sum":3412.139788452796}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3408203125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3408203125,"f1":null,"seconds":3.550201654434204e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":5.1328125,"distances_sum":935.7746636144537}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.53125, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.53125,"f1":0.6741040209790214,"seconds":4.433095455169678e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":6.421875,"distances_sum":1555.9747019274382}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.53125,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.53125,"f1":0.6741040209790214,"seconds":4.433095455169678e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":6.421875,"distances_sum":1555.9747019274382}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.724609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.724609375,"f1":0.8322614885114893,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":7.78125,"distances_sum":2163.4291852766137}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9276587995338001,"seconds":5.492940545082092e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.5234375,"distances_sum":2844.9986656970427}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9075695138195145,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.421875,"distances_sum":2646.202497946669}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8759765625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8759765625,"f1":0.9276587995338001,"seconds":5.492940545082092e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.5234375,"distances_sum":2844.9986656970427}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9436469780219786,"seconds":5.466863512992859e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.6953125,"distances_sum":2982.275097146365}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.950263278388279,"seconds":5.284324288368225e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.7421875,"distances_sum":3000.325814974561}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9513106684981691,"seconds":5.25452196598053e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.7265625,"distances_sum":3013.6336996671603}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9565361721611725,"seconds":5.578622221946716e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.78125,"distances_sum":3042.289477657157}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9369219322344328,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.703125,"distances_sum":2922.031510057362}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9565361721611725,"seconds":5.578622221946716e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.78125,"distances_sum":3042.289477657157}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9228515625,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9565361721611725,"seconds":5.578622221946716e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.78125,"distances_sum":3042.289477657157}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2158203125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2158203125,"f1":null,"seconds":2.9671937227249146e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":5.296875,"distances_sum":620.047187100585}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.55078125, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.55078125,"f1":0.6973366910866917,"seconds":4.060566425323486e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.9140625,"distances_sum":1506.203605626043}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.55078125,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.55078125,"f1":0.6973366910866917,"seconds":4.060566425323486e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.9140625,"distances_sum":1506.203605626043}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6904296875, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.6904296875,"f1":0.8043928293928302,"seconds":4.520639777183533e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.859375,"distances_sum":1929.8327477544203}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8076171875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8076171875,"f1":0.887211226273727,"seconds":5.166977643966675e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.3359375,"distances_sum":2435.3946870286213}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8441048534798542,"seconds":4.742294549942017e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.1328125,"distances_sum":2150.812269525009}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6962890625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6962890625,"f1":0.8118225524475531,"seconds":4.55416738986969e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.8984375,"distances_sum":1909.1867026674072}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8076171875,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.8076171875,"f1":0.887211226273727,"seconds":5.166977643966675e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.3359375,"distances_sum":2435.3946870286213}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9631181318681321,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.765625,"distances_sum":3090.4154286332973}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9304429945054953,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.6328125,"distances_sum":2810.9149234869574}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9482429029304033,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.78125,"distances_sum":2925.5847892517877}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9072490009990016,"seconds":5.5301934480667114e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.5390625,"distances_sum":2569.853122052902}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":10,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.9036572802197811,"seconds":5.578622221946716e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.421875,"distances_sum":2532.2706433328303}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9631181318681321,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.765625,"distances_sum":3090.4154286332973}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9345703125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9631181318681321,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.765625,"distances_sum":3090.4154286332973}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8740675990675999,"seconds":5.11854887008667e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.5546875,"distances_sum":2321.156101034447}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8662837162837171,"seconds":5.248934030532837e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.53125,"distances_sum":2333.6754234729992}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5185546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5185546875,"f1":0.6677433677433682,"seconds":3.974884748458862e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":6.8515625,"distances_sum":1421.885439759812}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7890625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7890625,"f1":0.8740675990675999,"seconds":5.11854887008667e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.5546875,"distances_sum":2321.156101034447}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9216632326007334,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.828125,"distances_sum":2705.7047326141073}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9421245421245426,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.859375,"distances_sum":2879.6686369408526}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.957016941391942,"seconds":5.885958671569824e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8203125,"distances_sum":3049.664980639914}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9527415293040297,"seconds":5.6978315114974976e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.84375,"distances_sum":2992.696841396051}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9458994130869136,"seconds":5.735084414482117e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.875,"distances_sum":2904.3985334975628}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.957016941391942,"seconds":5.885958671569824e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8203125,"distances_sum":3049.664980639914}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9729967948717954,"seconds":6.252899765968323e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9609375,"distances_sum":3141.6974796712}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9708161630036634,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.875,"distances_sum":3134.409310138034}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9692193223443226,"seconds":6.057322025299072e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.875,"distances_sum":3117.0565646443356}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9729967948717954,"seconds":6.252899765968323e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9609375,"distances_sum":3141.6974796712}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9729967948717954,"seconds":6.252899765968323e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9609375,"distances_sum":3141.6974796712}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.544921875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.544921875,"f1":0.6902208902208908,"seconds":4.289671778678894e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":6.28125,"distances_sum":1545.6469548109249}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8618041680541688,"seconds":5.206093192100525e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":7.9453125,"distances_sum":2288.8577938468306}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.771484375,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.771484375,"f1":0.8618041680541688,"seconds":5.206093192100525e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":7.9453125,"distances_sum":2288.8577938468306}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.936406822344323,"seconds":5.576759576797485e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.6015625,"distances_sum":2938.5745000811366}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8896484375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8896484375,"f1":0.936406822344323,"seconds":5.576759576797485e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.6015625,"distances_sum":2938.5745000811366}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9758012820512826,"seconds":6.513670086860657e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.890625,"distances_sum":3256.678019879967}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9681604853479859,"seconds":5.8747828006744385e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.859375,"distances_sum":3175.7924463828035}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9758012820512826,"seconds":6.513670086860657e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.890625,"distances_sum":3256.678019879967}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9758012820512826,"seconds":6.513670086860657e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.890625,"distances_sum":3256.678019879967}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.8755359224109233,"seconds":5.2209943532943726e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.1796875,"distances_sum":1401.9500260904229}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.212890625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.212890625,"f1":null,"seconds":3.4496188163757324e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":6.328125,"distances_sum":422.1869549550956}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7919921875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7919921875,"f1":0.8755359224109233,"seconds":5.2209943532943726e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.1796875,"distances_sum":1401.9500260904229}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.9207219863469871,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.703125,"distances_sum":1632.3606774115776}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9593063186813192,"seconds":5.93625009059906e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.921875,"distances_sum":1841.909926969196}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9532280219780223,"seconds":6.010755896568298e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.859375,"distances_sum":1791.2598484052207}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9593063186813192,"seconds":5.93625009059906e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.921875,"distances_sum":1841.909926969196}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.970703125, conf: {"ssize":5,"bsize":13}, perf: {"precision":1.0,"recall":0.970703125,"f1":0.9840029761904763,"seconds":6.34416937828064e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":9.0,"distances_sum":1965.8075769669658}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9755437271062274,"seconds":6.3944607973098755e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.96875,"distances_sum":1917.452574247163}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9658203125, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9658203125,"f1":0.9813072344322347,"seconds":6.582587957382202e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.9921875,"distances_sum":1960.1210417553652}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9606055402930407,"seconds":6.126239895820618e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.9140625,"distances_sum":1837.5590530582956}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.970703125,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.9840029761904763,"seconds":6.34416937828064e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":9.0,"distances_sum":1965.8075769669658}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.970703125,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.9840029761904763,"seconds":6.34416937828064e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":9.0,"distances_sum":1965.8075769669658}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8640566031191039,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.015625,"distances_sum":1641.3637644518592}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.568359375,"f1":0.7078924547674552,"seconds":4.26173210144043e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":7.03125,"distances_sum":1107.4904624664566}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.685546875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.685546875,"f1":0.8040511571761579,"seconds":4.494562745094299e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":7.484375,"distances_sum":1352.476539009567}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7763671875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7763671875,"f1":0.8640566031191039,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.015625,"distances_sum":1641.3637644518592}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9084139818514825,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.4453125,"distances_sum":1829.2155866934395}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9299049908424913,"seconds":5.900859832763672e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.5546875,"distances_sum":2007.642977695199}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87890625,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.87890625,"f1":0.9299049908424913,"seconds":5.900859832763672e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.5546875,"distances_sum":2007.642977695199}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9524782509157513,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.75,"distances_sum":2109.207664260053}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9731971153846156,"seconds":6.098300218582153e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.875,"distances_sum":2219.367180360218}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9773637820512823,"seconds":5.97536563873291e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.8828125,"distances_sum":2244.4470779340336}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9528331043956048,"seconds":5.651265382766724e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.78125,"distances_sum":2098.985597073357}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9773637820512823,"seconds":5.97536563873291e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.8828125,"distances_sum":2244.4470779340336}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9773637820512823,"seconds":5.97536563873291e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.8828125,"distances_sum":2244.4470779340336}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3525390625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3525390625,"f1":null,"seconds":3.555789589881897e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":5.9765625,"distances_sum":665.7908883232949}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3525390625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3525390625,"f1":null,"seconds":3.555789589881897e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":5.9765625,"distances_sum":665.7908883232949}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5576171875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5576171875,"f1":0.6974176864801871,"seconds":4.353001713752747e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.0703125,"distances_sum":1010.37914741656}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5634765625, conf: {"ssize":7,"bsize":3}, perf: {"precision":1.0,"recall":0.5634765625,"f1":0.7017664627039635,"seconds":4.014000296592712e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":6.96875,"distances_sum":1047.48512864593}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5634765625,"state":{"ssize":7,"bsize":3},"perf":{"precision":1.0,"recall":0.5634765625,"f1":0.7017664627039635,"seconds":4.014000296592712e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":6.96875,"distances_sum":1047.48512864593}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6640625, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6640625,"f1":0.7840170246420253,"seconds":4.490837454795837e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.421875,"distances_sum":1274.9960267148579}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8473318348318355,"seconds":4.850327968597412e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.765625,"distances_sum":1575.3807860755392}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9249058233433238,"seconds":5.301088094711304e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.4609375,"distances_sum":1929.1809263852972}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9284772519147523,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.53125,"distances_sum":1945.6659619377258}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8648991633366643,"seconds":5.019828677177429e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.1015625,"distances_sum":1561.790314023526}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8798828125,"state":{"ssize":9,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9284772519147523,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.53125,"distances_sum":1945.6659619377258}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8798828125,"state":{"ssize":9,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9284772519147523,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.53125,"distances_sum":1945.6659619377258}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8586236679986688,"seconds":5.029141902923584e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.171875,"distances_sum":1683.4033552227434}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8536848568098575,"seconds":5.245208740234375e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.1875,"distances_sum":1657.423250875332}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.67578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.67578125,"f1":0.7946220446220454,"seconds":4.731118679046631e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.6875,"distances_sum":1436.0169360925565}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.767578125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.767578125,"f1":0.8586236679986688,"seconds":5.029141902923584e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.171875,"distances_sum":1683.4033552227434}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9341975732600739,"seconds":6.105750799179077e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.6015625,"distances_sum":2104.0096044890206}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8592048576423584,"seconds":4.990026354789734e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.15625,"distances_sum":1704.579525326325}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9461226273726279,"seconds":6.016343832015991e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.6484375,"distances_sum":2171.948113524334}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9461226273726279,"seconds":6.016343832015991e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.6484375,"distances_sum":2171.948113524334}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9753376831501832,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.8984375,"distances_sum":2300.7730527731437}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9772321428571432,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.9296875,"distances_sum":2299.054040427731}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9593635531135536,"seconds":6.115064024925232e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.8203125,"distances_sum":2206.6464733640405}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9541323260073263,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.7890625,"distances_sum":2189.072404829867}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9772321428571432,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.9296875,"distances_sum":2299.054040427731}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9772321428571432,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.9296875,"distances_sum":2299.054040427731}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7001953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7001953125,"f1":0.813451132201133,"seconds":4.952773451805115e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":7.7109375,"distances_sum":1732.55711858356}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7001953125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.7001953125,"f1":0.813451132201133,"seconds":4.952773451805115e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":7.7109375,"distances_sum":1732.55711858356}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8585201257076265,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.0703125,"distances_sum":1951.6153530728222}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.8585201257076265,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.0703125,"distances_sum":1951.6153530728222}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.960622710622711,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.796875,"distances_sum":2638.325244791476}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8776301823176834,"seconds":5.343928933143616e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.1953125,"distances_sum":2066.121480093106}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.960622710622711,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.796875,"distances_sum":2638.325244791476}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9306640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.960622710622711,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.796875,"distances_sum":2638.325244791476}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6962890625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6962890625,"f1":0.8098396395271402,"seconds":4.723668098449707e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.4296875,"distances_sum":1664.950067823571}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.69921875,"f1":0.8141780094905103,"seconds":4.738569259643555e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.5390625,"distances_sum":1682.1516797660083}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.69921875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.69921875,"f1":0.8141780094905103,"seconds":4.738569259643555e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.5390625,"distances_sum":1682.1516797660083}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8666354478854487,"seconds":4.995614290237427e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.0546875,"distances_sum":1994.3069465604842}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9034803737928745,"seconds":5.401670932769775e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.15625,"distances_sum":2198.3080083195923}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.936521291208792,"seconds":5.6140124797821045e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.46875,"distances_sum":2417.822710656989}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9446543040293046,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.6875,"distances_sum":2524.2427113949984}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9033203125,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.9446543040293046,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.6875,"distances_sum":2524.2427113949984}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.971600274725275,"seconds":6.251037120819092e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8828125,"distances_sum":2726.46812401105}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9480743215118218,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7265625,"distances_sum":2535.3380495562405}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9625228937728939,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.828125,"distances_sum":2672.0800014228817}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.971600274725275,"seconds":6.251037120819092e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8828125,"distances_sum":2726.46812401105}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.971600274725275,"seconds":6.251037120819092e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8828125,"distances_sum":2726.46812401105}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.58203125, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.58203125,"f1":0.719157925407926,"seconds":4.351139068603516e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":7.015625,"distances_sum":1406.1185515363327}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3974609375, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3974609375,"f1":null,"seconds":3.693625330924988e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":6.171875,"distances_sum":952.9690341912284}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.58203125,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.58203125,"f1":0.719157925407926,"seconds":4.351139068603516e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":7.015625,"distances_sum":1406.1185515363327}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9281223984348992,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.3984375,"distances_sum":2429.981908749784}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8740234375,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8740234375,"f1":0.9281223984348992,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.3984375,"distances_sum":2429.981908749784}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9712657134532137,"seconds":5.951151251792908e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.828125,"distances_sum":2820.2443130241363}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9712657134532137,"seconds":5.951151251792908e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.828125,"distances_sum":2820.2443130241363}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9712657134532137,"seconds":5.951151251792908e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.828125,"distances_sum":2820.2443130241363}}, n: 9
inertia(cfft.distances) = 20.932334161102684
inertia(cdnet.distances) = 48.347223242630406
inertia(crand.distances) = 36.992895444848465
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8777777777777778
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8733333333333334
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8955555555555555
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9177777777777778
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9444444444444445
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8977777777777778
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8888888888888888
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8977777777777778
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9244444444444445
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9288888888888889
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9066666666666667
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9333333333333332
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9244444444444445
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8155555555555556
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8822222222222221
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.94
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8888888888888888
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.88
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9155555555555556
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.888888888888889
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8955555555555555
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.851111111111111
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8911111111111111
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX===== rocchio like>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX==== clustering>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 3, 3, 2, 1, 3, 3, 3, 2, 2, 3, 3, 3, 1]
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 8, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 1]
acc = 0.9266666666666666
*** finished computation of 12 references, err: [Inf, 0.6236379935344061] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 20, 2]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(2, 20), (3, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 8, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 12]]
** centroid: 11, normalized-entropy: 0.3912435636292556, [(2, 1), (3, 12)]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
finished with 14 centroids; started with 12
acc = 0.96
Test Summary:   | Pass  Total
NearestCentroid |   10     10
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.6506037674844265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6506037674844265, 0.5139966122061014] ***
*** finished computation of 7 references, err: [Inf, 0.6506037674844265, 0.5139966122061014] ***
*** center 1: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 28, 1]]
** centroid: 2, normalized-entropy: 0.21639693245126485, [(2, 28), (3, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 3, 19]]
** centroid: 6, normalized-entropy: 0.5746356978376794, [(2, 3), (3, 19)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 6, 11]]
** centroid: 7, normalized-entropy: 0.9366673818775627, [(2, 6), (3, 11)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6476553545892239] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6476553545892239, 0.44908744111657145] ***
*** starting iteration: 2; err: [Inf, 0.6476553545892239, 0.44908744111657145] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6476553545892239, 0.44908744111657145, 0.44075953774154186] ***
*** starting iteration: 3; err: [Inf, 0.6476553545892239, 0.44908744111657145, 0.44075953774154186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6476553545892239, 0.44908744111657145, 0.44075953774154186, 0.440946122482419] ***
*** finished computation of 7 references, err: [Inf, 0.6476553545892239, 0.44908744111657145, 0.44075953774154186, 0.440946122482419] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 12]]
*** center 2: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 20, 1]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 1, 18]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [3, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7342019894719124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7342019894719124, 0.47110459476709365] ***
*** starting iteration: 2; err: [Inf, 0.7342019894719124, 0.47110459476709365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7342019894719124, 0.47110459476709365, 0.4661632026731968] ***
*** starting iteration: 3; err: [Inf, 0.7342019894719124, 0.47110459476709365, 0.4661632026731968] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7342019894719124, 0.47110459476709365, 0.4661632026731968, 0.4653703510761261] ***
*** finished computation of 7 references, err: [Inf, 0.7342019894719124, 0.47110459476709365, 0.4661632026731968, 0.4653703510761261] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 7, 8]]
** centroid: 1, normalized-entropy: 0.9967916319816367, [(2, 7), (3, 8)]
*** center 2: selecting labels [1] (freq >= 2) [from [21, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 9, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 10]]
*** center 5: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 13, 5]]
** centroid: 7, normalized-entropy: 0.8524051786494784, [(2, 13), (3, 5)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6739156758785247] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6739156758785247, 0.49172394469380376] ***
*** starting iteration: 2; err: [Inf, 0.6739156758785247, 0.49172394469380376] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6739156758785247, 0.49172394469380376, 0.48176284730434416] ***
*** starting iteration: 3; err: [Inf, 0.6739156758785247, 0.49172394469380376, 0.48176284730434416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6739156758785247, 0.49172394469380376, 0.48176284730434416, 0.4678161697089672] ***
*** starting iteration: 4; err: [Inf, 0.6739156758785247, 0.49172394469380376, 0.48176284730434416, 0.4678161697089672] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6739156758785247, 0.49172394469380376, 0.48176284730434416, 0.4678161697089672, 0.46315426722168923] ***
*** starting iteration: 5; err: [Inf, 0.6739156758785247, 0.49172394469380376, 0.48176284730434416, 0.4678161697089672, 0.46315426722168923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6739156758785247, 0.49172394469380376, 0.48176284730434416, 0.4678161697089672, 0.46315426722168923, 0.45717034667730333] ***
*** starting iteration: 6; err: [Inf, 0.6739156758785247, 0.49172394469380376, 0.48176284730434416, 0.4678161697089672, 0.46315426722168923, 0.45717034667730333] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6739156758785247, 0.49172394469380376, 0.48176284730434416, 0.4678161697089672, 0.46315426722168923, 0.45717034667730333, 0.4531720449030399] ***
*** starting iteration: 7; err: [Inf, 0.6739156758785247, 0.49172394469380376, 0.48176284730434416, 0.4678161697089672, 0.46315426722168923, 0.45717034667730333, 0.4531720449030399] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6739156758785247, 0.49172394469380376, 0.48176284730434416, 0.4678161697089672, 0.46315426722168923, 0.45717034667730333, 0.4531720449030399, 0.4488872690498829] ***
*** starting iteration: 8; err: [Inf, 0.6739156758785247, 0.49172394469380376, 0.48176284730434416, 0.4678161697089672, 0.46315426722168923, 0.45717034667730333, 0.4531720449030399, 0.4488872690498829] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6739156758785247, 0.49172394469380376, 0.48176284730434416, 0.4678161697089672, 0.46315426722168923, 0.45717034667730333, 0.4531720449030399, 0.4488872690498829, 0.4430865629017353] ***
*** starting iteration: 9; err: [Inf, 0.6739156758785247, 0.49172394469380376, 0.48176284730434416, 0.4678161697089672, 0.46315426722168923, 0.45717034667730333, 0.4531720449030399, 0.4488872690498829, 0.4430865629017353] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6739156758785247, 0.49172394469380376, 0.48176284730434416, 0.4678161697089672, 0.46315426722168923, 0.45717034667730333, 0.4531720449030399, 0.4488872690498829, 0.4430865629017353, 0.44012759178876876] ***
*** starting iteration: 10; err: [Inf, 0.6739156758785247, 0.49172394469380376, 0.48176284730434416, 0.4678161697089672, 0.46315426722168923, 0.45717034667730333, 0.4531720449030399, 0.4488872690498829, 0.4430865629017353, 0.44012759178876876] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6739156758785247, 0.49172394469380376, 0.48176284730434416, 0.4678161697089672, 0.46315426722168923, 0.45717034667730333, 0.4531720449030399, 0.4488872690498829, 0.4430865629017353, 0.44012759178876876, 0.44012759178876876] ***
*** finished computation of 7 references, err: [Inf, 0.6739156758785247, 0.49172394469380376, 0.48176284730434416, 0.4678161697089672, 0.46315426722168923, 0.45717034667730333, 0.4531720449030399, 0.4488872690498829, 0.4430865629017353, 0.44012759178876876, 0.44012759178876876] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
*** center 2: selecting labels [1] (freq >= 2) [from [24, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 14, 1]]
*** center 4: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 4, 8]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 4), (3, 8)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6545124287903309] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6545124287903309, 0.4497843921929598] ***
*** finished computation of 7 references, err: [Inf, 0.6545124287903309, 0.4497843921929598] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 21, 1]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 19]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 16, 5]]
** centroid: 5, normalized-entropy: 0.7918583525674836, [(2, 16), (3, 5)]
*** center 6: selecting labels [1] (freq >= 2) [from [3, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6653677693009377] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6653677693009377, 0.47391286920756104] ***
*** finished computation of 7 references, err: [Inf, 0.6653677693009377, 0.47391286920756104] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 2: selecting labels [1] (freq >= 2) [from [21, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 14, 3]]
** centroid: 3, normalized-entropy: 0.6722948170756378, [(2, 14), (3, 3)]
*** center 4: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 1, 23]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 9, 3]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(2, 9), (3, 3)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 5, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6221620501577854] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6221620501577854, 0.4762802305817604] ***
*** finished computation of 7 references, err: [Inf, 0.6221620501577854, 0.4762802305817604] ***
*** center 1: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 2, 5]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(2, 2), (3, 5)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 11, 8]]
** centroid: 4, normalized-entropy: 0.9819407868640977, [(2, 11), (3, 8)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 12]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 17, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5367724307626486] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5367724307626486, 0.4122110971063375] ***
*** starting iteration: 2; err: [Inf, 0.5367724307626486, 0.4122110971063375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5367724307626486, 0.4122110971063375, 0.3978996425122023] ***
*** starting iteration: 3; err: [Inf, 0.5367724307626486, 0.4122110971063375, 0.3978996425122023] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5367724307626486, 0.4122110971063375, 0.3978996425122023, 0.3966103077679872] ***
*** finished computation of 7 references, err: [Inf, 0.5367724307626486, 0.4122110971063375, 0.3978996425122023, 0.3966103077679872] ***
*** center 1: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 6, 1]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(2, 6), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 8]]
** centroid: 4, normalized-entropy: 0.9321115676166747, [(2, 15), (3, 8)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 1, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6193274620175362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6193274620175362, 0.423575724363327] ***
*** starting iteration: 2; err: [Inf, 0.6193274620175362, 0.423575724363327] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6193274620175362, 0.423575724363327, 0.39601199090480804] ***
*** starting iteration: 3; err: [Inf, 0.6193274620175362, 0.423575724363327, 0.39601199090480804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6193274620175362, 0.423575724363327, 0.39601199090480804, 0.39199956253170964] ***
*** finished computation of 7 references, err: [Inf, 0.6193274620175362, 0.423575724363327, 0.39601199090480804, 0.39199956253170964] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 2: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 13, 14]]
** centroid: 4, normalized-entropy: 0.9990102708804813, [(2, 13), (3, 14)]
*** center 5: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6024789042770863] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6024789042770863, 0.39076217100024224] ***
*** starting iteration: 2; err: [Inf, 0.6024789042770863, 0.39076217100024224] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6024789042770863, 0.39076217100024224, 0.3891304621100426] ***
*** starting iteration: 3; err: [Inf, 0.6024789042770863, 0.39076217100024224, 0.3891304621100426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6024789042770863, 0.39076217100024224, 0.3891304621100426, 0.38779459401965144] ***
*** finished computation of 7 references, err: [Inf, 0.6024789042770863, 0.39076217100024224, 0.3891304621100426, 0.38779459401965144] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 2, 17]]
** centroid: 1, normalized-entropy: 0.48546076074591343, [(2, 2), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 6, 1]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(2, 6), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 12, 7]]
** centroid: 6, normalized-entropy: 0.9494520153879484, [(2, 12), (3, 7)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6544066990911961] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6544066990911961, 0.3589519166201353] ***
*** starting iteration: 2; err: [Inf, 0.6544066990911961, 0.3589519166201353] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6544066990911961, 0.3589519166201353, 0.34858096320182086] ***
*** starting iteration: 3; err: [Inf, 0.6544066990911961, 0.3589519166201353, 0.34858096320182086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6544066990911961, 0.3589519166201353, 0.34858096320182086, 0.3483562162145972] ***
*** finished computation of 7 references, err: [Inf, 0.6544066990911961, 0.3589519166201353, 0.34858096320182086, 0.3483562162145972] ***
*** center 1: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 10, 1]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 17, 8]]
** centroid: 4, normalized-entropy: 0.9043814577244941, [(2, 17), (3, 8)]
*** center 5: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 10, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.641999302059412] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.641999302059412, 0.4196594903618097] ***
*** starting iteration: 2; err: [Inf, 0.641999302059412, 0.4196594903618097] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.641999302059412, 0.4196594903618097, 0.4130145865678787] ***
*** starting iteration: 3; err: [Inf, 0.641999302059412, 0.4196594903618097, 0.4130145865678787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.641999302059412, 0.4196594903618097, 0.4130145865678787, 0.40124384470283986] ***
*** starting iteration: 4; err: [Inf, 0.641999302059412, 0.4196594903618097, 0.4130145865678787, 0.40124384470283986] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.641999302059412, 0.4196594903618097, 0.4130145865678787, 0.40124384470283986, 0.3919468161463737] ***
*** starting iteration: 5; err: [Inf, 0.641999302059412, 0.4196594903618097, 0.4130145865678787, 0.40124384470283986, 0.3919468161463737] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.641999302059412, 0.4196594903618097, 0.4130145865678787, 0.40124384470283986, 0.3919468161463737, 0.3900543487817049] ***
*** starting iteration: 6; err: [Inf, 0.641999302059412, 0.4196594903618097, 0.4130145865678787, 0.40124384470283986, 0.3919468161463737, 0.3900543487817049] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.641999302059412, 0.4196594903618097, 0.4130145865678787, 0.40124384470283986, 0.3919468161463737, 0.3900543487817049, 0.38934282764792444] ***
*** finished computation of 7 references, err: [Inf, 0.641999302059412, 0.4196594903618097, 0.4130145865678787, 0.40124384470283986, 0.3919468161463737, 0.3900543487817049, 0.38934282764792444] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 13, 9]]
** centroid: 1, normalized-entropy: 0.976020648236615, [(2, 13), (3, 9)]
*** center 2: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 14, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 2, 19]]
** centroid: 5, normalized-entropy: 0.45371633918694493, [(2, 2), (3, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6883429795503616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6883429795503616, 0.5321202848106623] ***
*** finished computation of 7 references, err: [Inf, 0.6883429795503616, 0.5321202848106623] ***
*** center 1: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [1, 3, 0]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(1, 1), (2, 3)]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 20, 7]]
** centroid: 5, normalized-entropy: 0.8256265261578954, [(2, 20), (3, 7)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 6, 2]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(2, 6), (3, 2)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6217017906904221] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6217017906904221, 0.46822735890746114] ***
*** finished computation of 7 references, err: [Inf, 0.6217017906904221, 0.46822735890746114] ***
*** center 1: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 2, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 7, 8]]
** centroid: 5, normalized-entropy: 0.9967916319816367, [(2, 7), (3, 8)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 3, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5703828610479832] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5703828610479832, 0.41791710413992406] ***
*** starting iteration: 2; err: [Inf, 0.5703828610479832, 0.41791710413992406] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5703828610479832, 0.41791710413992406, 0.3989450490474701] ***
*** starting iteration: 3; err: [Inf, 0.5703828610479832, 0.41791710413992406, 0.3989450490474701] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5703828610479832, 0.41791710413992406, 0.3989450490474701, 0.3850593550503254] ***
*** starting iteration: 4; err: [Inf, 0.5703828610479832, 0.41791710413992406, 0.3989450490474701, 0.3850593550503254] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5703828610479832, 0.41791710413992406, 0.3989450490474701, 0.3850593550503254, 0.37389322750270365] ***
*** starting iteration: 5; err: [Inf, 0.5703828610479832, 0.41791710413992406, 0.3989450490474701, 0.3850593550503254, 0.37389322750270365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5703828610479832, 0.41791710413992406, 0.3989450490474701, 0.3850593550503254, 0.37389322750270365, 0.37327146396040917] ***
*** finished computation of 7 references, err: [Inf, 0.5703828610479832, 0.41791710413992406, 0.3989450490474701, 0.3850593550503254, 0.37389322750270365, 0.37327146396040917] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 17, 1]]
** centroid: 1, normalized-entropy: 0.3095434291503252, [(2, 17), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 5, 7]]
** centroid: 4, normalized-entropy: 0.9798687566511527, [(2, 5), (3, 7)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 15, 3]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(2, 15), (3, 3)]
*** center 6: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6751724110543728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6751724110543728, 0.4794467216730118] ***
*** starting iteration: 2; err: [Inf, 0.6751724110543728, 0.4794467216730118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6751724110543728, 0.4794467216730118, 0.4304712940007448] ***
*** starting iteration: 3; err: [Inf, 0.6751724110543728, 0.4794467216730118, 0.4304712940007448] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6751724110543728, 0.4794467216730118, 0.4304712940007448, 0.38893090464174745] ***
*** starting iteration: 4; err: [Inf, 0.6751724110543728, 0.4794467216730118, 0.4304712940007448, 0.38893090464174745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6751724110543728, 0.4794467216730118, 0.4304712940007448, 0.38893090464174745, 0.37684198930859564] ***
*** starting iteration: 5; err: [Inf, 0.6751724110543728, 0.4794467216730118, 0.4304712940007448, 0.38893090464174745, 0.37684198930859564] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6751724110543728, 0.4794467216730118, 0.4304712940007448, 0.38893090464174745, 0.37684198930859564, 0.37307355292141436] ***
*** starting iteration: 6; err: [Inf, 0.6751724110543728, 0.4794467216730118, 0.4304712940007448, 0.38893090464174745, 0.37684198930859564, 0.37307355292141436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6751724110543728, 0.4794467216730118, 0.4304712940007448, 0.38893090464174745, 0.37684198930859564, 0.37307355292141436, 0.3723620317876339] ***
*** finished computation of 7 references, err: [Inf, 0.6751724110543728, 0.4794467216730118, 0.4304712940007448, 0.38893090464174745, 0.37684198930859564, 0.37307355292141436, 0.3723620317876339] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 12]]
** centroid: 1, normalized-entropy: 0.3912435636292556, [(2, 1), (3, 12)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5115544332563877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5115544332563877, 0.42072771906852724] ***
*** starting iteration: 2; err: [Inf, 0.5115544332563877, 0.42072771906852724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5115544332563877, 0.42072771906852724, 0.39321304082870484] ***
*** starting iteration: 3; err: [Inf, 0.5115544332563877, 0.42072771906852724, 0.39321304082870484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5115544332563877, 0.42072771906852724, 0.39321304082870484, 0.3815327788889408] ***
*** starting iteration: 4; err: [Inf, 0.5115544332563877, 0.42072771906852724, 0.39321304082870484, 0.3815327788889408] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5115544332563877, 0.42072771906852724, 0.39321304082870484, 0.3815327788889408, 0.3822962876409292] ***
*** finished computation of 7 references, err: [Inf, 0.5115544332563877, 0.42072771906852724, 0.39321304082870484, 0.3815327788889408, 0.3822962876409292] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 6, 7]]
** centroid: 5, normalized-entropy: 0.9957274520849256, [(2, 6), (3, 7)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 13, 1]]
** centroid: 6, normalized-entropy: 0.3712323266408756, [(2, 13), (3, 1)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.7223052415251732] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7223052415251732, 0.8119955682754516] ***
*** starting iteration: 2; err: [Inf, 1.7223052415251732, 0.8119955682754516] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7223052415251732, 0.8119955682754516, 0.6546387173235416] ***
*** starting iteration: 3; err: [Inf, 1.7223052415251732, 0.8119955682754516, 0.6546387173235416] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7223052415251732, 0.8119955682754516, 0.6546387173235416, 0.624036282747984] ***
*** starting iteration: 4; err: [Inf, 1.7223052415251732, 0.8119955682754516, 0.6546387173235416, 0.624036282747984] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7223052415251732, 0.8119955682754516, 0.6546387173235416, 0.624036282747984, 0.619526199400425] ***
*** starting iteration: 5; err: [Inf, 1.7223052415251732, 0.8119955682754516, 0.6546387173235416, 0.624036282747984, 0.619526199400425] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7223052415251732, 0.8119955682754516, 0.6546387173235416, 0.624036282747984, 0.619526199400425, 0.6191053410619497] ***
*** finished computation of 3 references, err: [Inf, 1.7223052415251732, 0.8119955682754516, 0.6546387173235416, 0.624036282747984, 0.619526199400425, 0.6191053410619497] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 8, 29]]
** centroid: 1, normalized-entropy: 0.7531979910695015, [(2, 8), (3, 29)]
*** center 2: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 29, 2]]
** centroid: 3, normalized-entropy: 0.3451173149449528, [(2, 29), (3, 2)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.128264478445053] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.128264478445053, 1.3068256357312202] ***
*** starting iteration: 2; err: [Inf, 2.128264478445053, 1.3068256357312202] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.128264478445053, 1.3068256357312202, 0.9960999764502049] ***
*** starting iteration: 3; err: [Inf, 2.128264478445053, 1.3068256357312202, 0.9960999764502049] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.128264478445053, 1.3068256357312202, 0.9960999764502049, 0.8027000842988491] ***
*** starting iteration: 4; err: [Inf, 2.128264478445053, 1.3068256357312202, 0.9960999764502049, 0.8027000842988491] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.128264478445053, 1.3068256357312202, 0.9960999764502049, 0.8027000842988491, 0.7413053223490715] ***
*** starting iteration: 5; err: [Inf, 2.128264478445053, 1.3068256357312202, 0.9960999764502049, 0.8027000842988491, 0.7413053223490715] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.128264478445053, 1.3068256357312202, 0.9960999764502049, 0.8027000842988491, 0.7413053223490715, 0.722677749171853] ***
*** starting iteration: 6; err: [Inf, 2.128264478445053, 1.3068256357312202, 0.9960999764502049, 0.8027000842988491, 0.7413053223490715, 0.722677749171853] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.128264478445053, 1.3068256357312202, 0.9960999764502049, 0.8027000842988491, 0.7413053223490715, 0.722677749171853, 0.7041332930326462] ***
*** starting iteration: 7; err: [Inf, 2.128264478445053, 1.3068256357312202, 0.9960999764502049, 0.8027000842988491, 0.7413053223490715, 0.722677749171853, 0.7041332930326462] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.128264478445053, 1.3068256357312202, 0.9960999764502049, 0.8027000842988491, 0.7413053223490715, 0.722677749171853, 0.7041332930326462, 0.6920613630861044] ***
*** starting iteration: 8; err: [Inf, 2.128264478445053, 1.3068256357312202, 0.9960999764502049, 0.8027000842988491, 0.7413053223490715, 0.722677749171853, 0.7041332930326462, 0.6920613630861044] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.128264478445053, 1.3068256357312202, 0.9960999764502049, 0.8027000842988491, 0.7413053223490715, 0.722677749171853, 0.7041332930326462, 0.6920613630861044, 0.6862449484318495] ***
*** starting iteration: 9; err: [Inf, 2.128264478445053, 1.3068256357312202, 0.9960999764502049, 0.8027000842988491, 0.7413053223490715, 0.722677749171853, 0.7041332930326462, 0.6920613630861044, 0.6862449484318495] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.128264478445053, 1.3068256357312202, 0.9960999764502049, 0.8027000842988491, 0.7413053223490715, 0.722677749171853, 0.7041332930326462, 0.6920613630861044, 0.6862449484318495, 0.6851878520101309] ***
*** starting iteration: 10; err: [Inf, 2.128264478445053, 1.3068256357312202, 0.9960999764502049, 0.8027000842988491, 0.7413053223490715, 0.722677749171853, 0.7041332930326462, 0.6920613630861044, 0.6862449484318495, 0.6851878520101309] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.128264478445053, 1.3068256357312202, 0.9960999764502049, 0.8027000842988491, 0.7413053223490715, 0.722677749171853, 0.7041332930326462, 0.6920613630861044, 0.6862449484318495, 0.6851878520101309, 0.6846025843173266] ***
*** finished computation of 3 references, err: [Inf, 2.128264478445053, 1.3068256357312202, 0.9960999764502049, 0.8027000842988491, 0.7413053223490715, 0.722677749171853, 0.7041332930326462, 0.6920613630861044, 0.6862449484318495, 0.6851878520101309, 0.6846025843173266] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 1, 28]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 28, 10]]
** centroid: 2, normalized-entropy: 0.8314743880097292, [(2, 28), (3, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8728153644502163] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8728153644502163, 0.6588668048381805] ***
*** starting iteration: 2; err: [Inf, 0.8728153644502163, 0.6588668048381805] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8728153644502163, 0.6588668048381805, 0.6410855674743652] ***
*** starting iteration: 3; err: [Inf, 0.8728153644502163, 0.6588668048381805, 0.6410855674743652] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8728153644502163, 0.6588668048381805, 0.6410855674743652, 0.6381916362047195] ***
*** starting iteration: 4; err: [Inf, 0.8728153644502163, 0.6588668048381805, 0.6410855674743652, 0.6381916362047195] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8728153644502163, 0.6588668048381805, 0.6410855674743652, 0.6381916362047195, 0.6368459564447403] ***
*** starting iteration: 5; err: [Inf, 0.8728153644502163, 0.6588668048381805, 0.6410855674743652, 0.6381916362047195, 0.6368459564447403] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8728153644502163, 0.6588668048381805, 0.6410855674743652, 0.6381916362047195, 0.6368459564447403, 0.6368459564447403] ***
*** finished computation of 3 references, err: [Inf, 0.8728153644502163, 0.6588668048381805, 0.6410855674743652, 0.6381916362047195, 0.6368459564447403, 0.6368459564447403] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 1, 23]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 33, 8]]
** centroid: 2, normalized-entropy: 0.7120640548905481, [(2, 33), (3, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5814897739887237] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5814897739887237, 0.42329930543899535] ***
*** finished computation of 7 references, err: [Inf, 0.5814897739887237, 0.42329930543899535] ***
*** center 1: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 8, 1]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 5, 14]]
** centroid: 4, normalized-entropy: 0.8314743880097292, [(2, 5), (3, 14)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 14, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 10, 3]]
** centroid: 6, normalized-entropy: 0.7793498372920851, [(2, 10), (3, 3)]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6698597538471222] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6698597538471222, 0.49728954762220384] ***
*** finished computation of 7 references, err: [Inf, 0.6698597538471222, 0.49728954762220384] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 7, 14]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(2, 7), (3, 14)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 17, 1]]
*** center 3: selecting labels [1] (freq >= 2) [from [23, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 5: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 17]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 5, 6]]
** centroid: 7, normalized-entropy: 0.9940302114769566, [(2, 5), (3, 6)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.272718381434679] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.272718381434679, 0.5949299673736096] ***
*** finished computation of 7 references, err: [Inf, 1.272718381434679, 0.5949299673736096] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 19, 1]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 10]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 3, 2]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [35, 2, 0]]
** centroid: 6, normalized-entropy: 0.30337483608641397, [(1, 35), (2, 2)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 8, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6264825056493283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6264825056493283, 0.4634926537424326] ***
*** finished computation of 7 references, err: [Inf, 0.6264825056493283, 0.4634926537424326] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 2: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 5, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 5, 9]]
** centroid: 6, normalized-entropy: 0.940285958670631, [(2, 5), (3, 9)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7028977292776107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7028977292776107, 0.538577594384551] ***
*** finished computation of 7 references, err: [Inf, 0.7028977292776107, 0.538577594384551] ***
*** center 1: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 3: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 24, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 5, 24]]
** centroid: 7, normalized-entropy: 0.6631968402398286, [(2, 5), (3, 24)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7214592018723488] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7214592018723488, 0.5091639094054699] ***
*** finished computation of 7 references, err: [Inf, 0.7214592018723488, 0.5091639094054699] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 3, 6]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(2, 3), (3, 6)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 2, 4]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 4)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 2, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 19, 1]]
** centroid: 7, normalized-entropy: 0.2863969571159561, [(2, 19), (3, 1)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5068491290509701] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5068491290509701, 0.3850839301943779] ***
*** finished computation of 7 references, err: [Inf, 0.5068491290509701, 0.3850839301943779] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 13]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 14, 1]]
*** center 3: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 10, 1]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 3, 8]]
** centroid: 5, normalized-entropy: 0.8453509366224364, [(2, 3), (3, 8)]
*** center 6: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 10, 8]]
** centroid: 7, normalized-entropy: 0.9910760598382222, [(2, 10), (3, 8)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.49244089126586915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.49244089126586915, 0.4030241123586893] ***
*** finished computation of 7 references, err: [Inf, 0.49244089126586915, 0.4030241123586893] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 9, 22]]
** centroid: 4, normalized-entropy: 0.8691375806126381, [(2, 9), (3, 22)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
*** center 7: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.605555557012558] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.605555557012558, 0.48425833851099015] ***
*** finished computation of 7 references, err: [Inf, 0.605555557012558, 0.48425833851099015] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 18]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
*** center 3: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 3, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 31, 11]]
** centroid: 5, normalized-entropy: 0.8296071030882032, [(2, 31), (3, 11)]
*** center 6: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.9983560439944267] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9983560439944267, 0.6390949099510909] ***
*** starting iteration: 2; err: [Inf, 0.9983560439944267, 0.6390949099510909] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9983560439944267, 0.6390949099510909, 0.6215346806496381] ***
*** starting iteration: 3; err: [Inf, 0.9983560439944267, 0.6390949099510909, 0.6215346806496381] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9983560439944267, 0.6390949099510909, 0.6215346806496381, 0.617423667088151] ***
*** finished computation of 3 references, err: [Inf, 0.9983560439944267, 0.6390949099510909, 0.6215346806496381, 0.617423667088151] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 35, 10]]
** centroid: 1, normalized-entropy: 0.7642045065086204, [(2, 35), (3, 10)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 21]]
** centroid: 2, normalized-entropy: 0.42622865699814483, [(2, 2), (3, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.038407908976078] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.038407908976078, 0.7130021590739488] ***
*** starting iteration: 2; err: [Inf, 1.038407908976078, 0.7130021590739488] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.038407908976078, 0.7130021590739488, 0.6942881195992231] ***
*** starting iteration: 3; err: [Inf, 1.038407908976078, 0.7130021590739488, 0.6942881195992231] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.038407908976078, 0.7130021590739488, 0.6942881195992231, 0.6862449484318495] ***
*** finished computation of 3 references, err: [Inf, 1.038407908976078, 0.7130021590739488, 0.6942881195992231, 0.6862449484318495] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 28, 11]]
** centroid: 1, normalized-entropy: 0.8582307926411409, [(2, 28), (3, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 27]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0622463043034076] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0622463043034076, 0.648363860398531] ***
*** starting iteration: 2; err: [Inf, 1.0622463043034076, 0.648363860398531] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0622463043034076, 0.648363860398531, 0.6396426269412041] ***
*** starting iteration: 3; err: [Inf, 1.0622463043034076, 0.648363860398531, 0.6396426269412041] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0622463043034076, 0.648363860398531, 0.6396426269412041, 0.6381916362047195] ***
*** finished computation of 3 references, err: [Inf, 1.0622463043034076, 0.648363860398531, 0.6396426269412041, 0.6381916362047195] ***
*** center 1: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 23]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 33, 8]]
** centroid: 3, normalized-entropy: 0.7120640548905481, [(2, 33), (3, 8)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9483613491058349] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9483613491058349, 0.6942637828737497] ***
*** starting iteration: 2; err: [Inf, 0.9483613491058349, 0.6942637828737497] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9483613491058349, 0.6942637828737497, 0.6433818862587214] ***
*** starting iteration: 3; err: [Inf, 0.9483613491058349, 0.6942637828737497, 0.6433818862587214] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9483613491058349, 0.6942637828737497, 0.6433818862587214, 0.6215346806496381] ***
*** starting iteration: 4; err: [Inf, 0.9483613491058349, 0.6942637828737497, 0.6433818862587214, 0.6215346806496381] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9483613491058349, 0.6942637828737497, 0.6433818862587214, 0.6215346806496381, 0.617423667088151] ***
*** starting iteration: 5; err: [Inf, 0.9483613491058349, 0.6942637828737497, 0.6433818862587214, 0.6215346806496381, 0.617423667088151] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9483613491058349, 0.6942637828737497, 0.6433818862587214, 0.6215346806496381, 0.617423667088151, 0.617423667088151] ***
*** finished computation of 3 references, err: [Inf, 0.9483613491058349, 0.6942637828737497, 0.6433818862587214, 0.6215346806496381, 0.617423667088151, 0.617423667088151] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 35, 10]]
** centroid: 1, normalized-entropy: 0.7642045065086204, [(2, 35), (3, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 2, 21]]
** centroid: 3, normalized-entropy: 0.42622865699814483, [(2, 2), (3, 21)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9716157667338848] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9716157667338848, 0.739959826245904] ***
*** starting iteration: 2; err: [Inf, 0.9716157667338848, 0.739959826245904] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9716157667338848, 0.739959826245904, 0.7160991854965687] ***
*** starting iteration: 3; err: [Inf, 0.9716157667338848, 0.739959826245904, 0.7160991854965687] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9716157667338848, 0.739959826245904, 0.7160991854965687, 0.7041332930326462] ***
*** starting iteration: 4; err: [Inf, 0.9716157667338848, 0.739959826245904, 0.7160991854965687, 0.7041332930326462] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9716157667338848, 0.739959826245904, 0.7160991854965687, 0.7041332930326462, 0.6920613630861044] ***
*** starting iteration: 5; err: [Inf, 0.9716157667338848, 0.739959826245904, 0.7160991854965687, 0.7041332930326462, 0.6920613630861044] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9716157667338848, 0.739959826245904, 0.7160991854965687, 0.7041332930326462, 0.6920613630861044, 0.6862449484318495] ***
*** starting iteration: 6; err: [Inf, 0.9716157667338848, 0.739959826245904, 0.7160991854965687, 0.7041332930326462, 0.6920613630861044, 0.6862449484318495] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9716157667338848, 0.739959826245904, 0.7160991854965687, 0.7041332930326462, 0.6920613630861044, 0.6862449484318495, 0.6851878520101309] ***
*** starting iteration: 7; err: [Inf, 0.9716157667338848, 0.739959826245904, 0.7160991854965687, 0.7041332930326462, 0.6920613630861044, 0.6862449484318495, 0.6851878520101309] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9716157667338848, 0.739959826245904, 0.7160991854965687, 0.7041332930326462, 0.6920613630861044, 0.6862449484318495, 0.6851878520101309, 0.6846025843173266] ***
*** finished computation of 3 references, err: [Inf, 0.9716157667338848, 0.739959826245904, 0.7160991854965687, 0.7041332930326462, 0.6920613630861044, 0.6862449484318495, 0.6851878520101309, 0.6846025843173266] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 28, 10]]
** centroid: 1, normalized-entropy: 0.8314743880097292, [(2, 28), (3, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 28]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9323468244075775] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9323468244075775, 0.6754756228625775] ***
*** starting iteration: 2; err: [Inf, 0.9323468244075775, 0.6754756228625775] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9323468244075775, 0.6754756228625775, 0.645044801980257] ***
*** starting iteration: 3; err: [Inf, 0.9323468244075775, 0.6754756228625775, 0.645044801980257] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9323468244075775, 0.6754756228625775, 0.645044801980257, 0.6381916362047195] ***
*** starting iteration: 4; err: [Inf, 0.9323468244075775, 0.6754756228625775, 0.645044801980257, 0.6381916362047195] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9323468244075775, 0.6754756228625775, 0.645044801980257, 0.6381916362047195, 0.6368459564447403] ***
*** starting iteration: 5; err: [Inf, 0.9323468244075775, 0.6754756228625775, 0.645044801980257, 0.6381916362047195, 0.6368459564447403] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9323468244075775, 0.6754756228625775, 0.645044801980257, 0.6381916362047195, 0.6368459564447403, 0.6368459564447403] ***
*** finished computation of 3 references, err: [Inf, 0.9323468244075775, 0.6754756228625775, 0.645044801980257, 0.6381916362047195, 0.6368459564447403, 0.6368459564447403] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 33, 8]]
** centroid: 1, normalized-entropy: 0.7120640548905481, [(2, 33), (3, 8)]
*** center 2: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 23]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8980667658150197] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8980667658150197, 0.6334165301173925] ***
*** finished computation of 3 references, err: [Inf, 0.8980667658150197, 0.6334165301173925] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 15, 30]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(2, 15), (3, 30)]
*** center 2: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 3, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9757652609050274] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9757652609050274, 0.739959826245904] ***
*** finished computation of 3 references, err: [Inf, 0.9757652609050274, 0.739959826245904] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 28, 22]]
** centroid: 1, normalized-entropy: 0.9895875212220558, [(2, 28), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [33, 1, 0]]
** centroid: 2, normalized-entropy: 0.1914332548141934, [(1, 33), (2, 1)]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9518934719264507] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9518934719264507, 0.6754756228625775] ***
*** finished computation of 3 references, err: [Inf, 0.9518934719264507, 0.6754756228625775] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 34, 13]]
** centroid: 1, normalized-entropy: 0.8507707040532602, [(2, 34), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1174896962195635] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1174896962195635, 0.6287798617035151] ***
*** starting iteration: 2; err: [Inf, 1.1174896962195635, 0.6287798617035151] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1174896962195635, 0.6287798617035151, 0.6195589526742696] ***
*** starting iteration: 3; err: [Inf, 1.1174896962195635, 0.6287798617035151, 0.6195589526742696] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1174896962195635, 0.6287798617035151, 0.6195589526742696, 0.617423667088151] ***
*** finished computation of 3 references, err: [Inf, 1.1174896962195635, 0.6287798617035151, 0.6195589526742696, 0.617423667088151] ***
*** center 1: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 21]]
** centroid: 2, normalized-entropy: 0.42622865699814483, [(2, 2), (3, 21)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 35, 10]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(2, 35), (3, 10)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9496633499860764] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9496633499860764, 0.698996487185359] ***
*** starting iteration: 2; err: [Inf, 0.9496633499860764, 0.698996487185359] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9496633499860764, 0.698996487185359, 0.6892215835303068] ***
*** starting iteration: 3; err: [Inf, 0.9496633499860764, 0.698996487185359, 0.6892215835303068] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9496633499860764, 0.698996487185359, 0.6892215835303068, 0.6871414960175752] ***
*** finished computation of 3 references, err: [Inf, 0.9496633499860764, 0.698996487185359, 0.6892215835303068, 0.6871414960175752] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 5, 36]]
** centroid: 1, normalized-entropy: 0.5349436990971067, [(2, 5), (3, 36)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 24, 2]]
** centroid: 3, normalized-entropy: 0.3912435636292556, [(2, 24), (3, 2)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.11177433013916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.11177433013916, 0.648363860398531] ***
*** starting iteration: 2; err: [Inf, 1.11177433013916, 0.648363860398531] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.11177433013916, 0.648363860398531, 0.6396426269412041] ***
*** starting iteration: 3; err: [Inf, 1.11177433013916, 0.648363860398531, 0.6396426269412041] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.11177433013916, 0.648363860398531, 0.6396426269412041, 0.6381916362047195] ***
*** finished computation of 3 references, err: [Inf, 1.11177433013916, 0.648363860398531, 0.6396426269412041, 0.6381916362047195] ***
*** center 1: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 23]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 33, 8]]
** centroid: 3, normalized-entropy: 0.7120640548905481, [(2, 33), (3, 8)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5931049618124962] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5931049618124962, 0.3962012201547623] ***
*** starting iteration: 2; err: [Inf, 0.5931049618124962, 0.3962012201547623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5931049618124962, 0.3962012201547623, 0.37979411765933035] ***
*** starting iteration: 3; err: [Inf, 0.5931049618124962, 0.3962012201547623, 0.37979411765933035] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5931049618124962, 0.3962012201547623, 0.37979411765933035, 0.37742101430892944] ***
*** starting iteration: 4; err: [Inf, 0.5931049618124962, 0.3962012201547623, 0.37979411765933035, 0.37742101430892944] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5931049618124962, 0.3962012201547623, 0.37979411765933035, 0.37742101430892944, 0.37783153995871543] ***
*** finished computation of 7 references, err: [Inf, 0.5931049618124962, 0.3962012201547623, 0.37979411765933035, 0.37742101430892944, 0.37783153995871543] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 16, 7]]
** centroid: 1, normalized-entropy: 0.8865408928220899, [(2, 16), (3, 7)]
*** center 2: selecting labels [1] (freq >= 2) [from [24, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 12, 1]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
finished with 7 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 14)
[0.9733333333333333, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.8933333333333334, 0.8933333333333334, 0.8933333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9733333333333333
finished with 16
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.5276144070923329] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5276144070923329, 0.3699124256521463] ***
*** starting iteration: 2; err: [Inf, 0.5276144070923329, 0.3699124256521463] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5276144070923329, 0.3699124256521463, 0.36742145381867886] ***
*** starting iteration: 3; err: [Inf, 0.5276144070923329, 0.3699124256521463, 0.36742145381867886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5276144070923329, 0.3699124256521463, 0.36742145381867886, 0.36742145381867886] ***
*** finished computation of 7 references, err: [Inf, 0.5276144070923329, 0.3699124256521463, 0.36742145381867886, 0.36742145381867886] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 2: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 15, 10]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 15), (3, 10)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 12, 1]]
** centroid: 5, normalized-entropy: 0.3912435636292556, [(2, 12), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5006429043412208] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5006429043412208, 0.4221886948496103] ***
*** starting iteration: 2; err: [Inf, 0.5006429043412208, 0.4221886948496103] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5006429043412208, 0.4221886948496103, 0.41558928802609446] ***
*** starting iteration: 3; err: [Inf, 0.5006429043412208, 0.4221886948496103, 0.41558928802609446] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5006429043412208, 0.4221886948496103, 0.41558928802609446, 0.410600648522377] ***
*** finished computation of 7 references, err: [Inf, 0.5006429043412208, 0.4221886948496103, 0.41558928802609446, 0.410600648522377] ***
*** center 1: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 4: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 1, 19]]
** centroid: 5, normalized-entropy: 0.2863969571159561, [(2, 1), (3, 19)]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 12, 2]]
** centroid: 7, normalized-entropy: 0.5916727785823274, [(2, 12), (3, 2)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5829481593519449] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5829481593519449, 0.4594642987847328] ***
*** starting iteration: 2; err: [Inf, 0.5829481593519449, 0.4594642987847328] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5829481593519449, 0.4594642987847328, 0.42913621179759504] ***
*** starting iteration: 3; err: [Inf, 0.5829481593519449, 0.4594642987847328, 0.42913621179759504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5829481593519449, 0.4594642987847328, 0.42913621179759504, 0.4113919163495302] ***
*** finished computation of 7 references, err: [Inf, 0.5829481593519449, 0.4594642987847328, 0.42913621179759504, 0.4113919163495302] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 3: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 12, 10]]
** centroid: 7, normalized-entropy: 0.9940302114769566, [(2, 12), (3, 10)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6077184003591537] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6077184003591537, 0.44967288002371786] ***
*** starting iteration: 2; err: [Inf, 0.6077184003591537, 0.44967288002371786] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6077184003591537, 0.44967288002371786, 0.4214585036039352] ***
*** starting iteration: 3; err: [Inf, 0.6077184003591537, 0.44967288002371786, 0.4214585036039352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6077184003591537, 0.44967288002371786, 0.4214585036039352, 0.4126957129687071] ***
*** finished computation of 7 references, err: [Inf, 0.6077184003591537, 0.44967288002371786, 0.4214585036039352, 0.4126957129687071] ***
*** center 1: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 9]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 9)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 4, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 5: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.6108451260626315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.6108451260626315, 0.6419042520970106] ***
*** starting iteration: 2; err: [Inf, 1.6108451260626315, 0.6419042520970106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.6108451260626315, 0.6419042520970106, 0.5271754982322454] ***
*** starting iteration: 3; err: [Inf, 1.6108451260626315, 0.6419042520970106, 0.5271754982322454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.6108451260626315, 0.6419042520970106, 0.5271754982322454, 0.5172731293737889] ***
*** finished computation of 7 references, err: [Inf, 1.6108451260626315, 0.6419042520970106, 0.5271754982322454, 0.5172731293737889] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 11, 27]]
** centroid: 1, normalized-entropy: 0.8680403986166402, [(2, 11), (3, 27)]
*** center 2: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7128172556310892] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7128172556310892, 0.534959130808711] ***
*** starting iteration: 2; err: [Inf, 0.7128172556310892, 0.534959130808711] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7128172556310892, 0.534959130808711, 0.5226793643087149] ***
*** starting iteration: 3; err: [Inf, 0.7128172556310892, 0.534959130808711, 0.5226793643087149] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7128172556310892, 0.534959130808711, 0.5226793643087149, 0.5108861713856458] ***
*** finished computation of 7 references, err: [Inf, 0.7128172556310892, 0.534959130808711, 0.5226793643087149, 0.5108861713856458] ***
*** center 1: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 25, 1]]
** centroid: 4, normalized-entropy: 0.23519338181924157, [(2, 25), (3, 1)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 9, 22]]
** centroid: 5, normalized-entropy: 0.8691375806126381, [(2, 9), (3, 22)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 7: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 16)
[0.9733333333333333, 0.9666666666666667, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.8933333333333334, 0.8933333333333334, 0.8933333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9733333333333333
finished with 16
iteration 3 finished
generating 4 configurations using top 4 configurations, starting with 16)
[0.9733333333333333, 0.9666666666666667, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.8933333333333334, 0.8933333333333334, 0.8933333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9733333333333333
finished with 17
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.5320405487716198] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5320405487716198, 0.377680094614625] ***
*** starting iteration: 2; err: [Inf, 0.5320405487716198, 0.377680094614625] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5320405487716198, 0.377680094614625, 0.36476288877427576] ***
*** starting iteration: 3; err: [Inf, 0.5320405487716198, 0.377680094614625, 0.36476288877427576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5320405487716198, 0.377680094614625, 0.36476288877427576, 0.36361007764935493] ***
*** starting iteration: 4; err: [Inf, 0.5320405487716198, 0.377680094614625, 0.36476288877427576, 0.36361007764935493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5320405487716198, 0.377680094614625, 0.36476288877427576, 0.36361007764935493, 0.36361007764935493] ***
*** finished computation of 7 references, err: [Inf, 0.5320405487716198, 0.377680094614625, 0.36476288877427576, 0.36361007764935493, 0.36361007764935493] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 21, 1]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
*** center 5: selecting labels [1] (freq >= 2) [from [2, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 16, 8]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 16), (3, 8)]
*** center 7: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6143025237321854] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6143025237321854, 0.45047973036766054] ***
*** starting iteration: 2; err: [Inf, 0.6143025237321854, 0.45047973036766054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6143025237321854, 0.45047973036766054, 0.4340880669653416] ***
*** starting iteration: 3; err: [Inf, 0.6143025237321854, 0.45047973036766054, 0.4340880669653416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6143025237321854, 0.45047973036766054, 0.4340880669653416, 0.426312867552042] ***
*** starting iteration: 4; err: [Inf, 0.6143025237321854, 0.45047973036766054, 0.4340880669653416, 0.426312867552042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6143025237321854, 0.45047973036766054, 0.4340880669653416, 0.426312867552042, 0.416660885065794] ***
*** starting iteration: 5; err: [Inf, 0.6143025237321854, 0.45047973036766054, 0.4340880669653416, 0.426312867552042, 0.416660885065794] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6143025237321854, 0.45047973036766054, 0.4340880669653416, 0.426312867552042, 0.416660885065794, 0.413742872774601] ***
*** starting iteration: 6; err: [Inf, 0.6143025237321854, 0.45047973036766054, 0.4340880669653416, 0.426312867552042, 0.416660885065794, 0.413742872774601] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6143025237321854, 0.45047973036766054, 0.4340880669653416, 0.426312867552042, 0.416660885065794, 0.413742872774601, 0.397347736209631] ***
*** starting iteration: 7; err: [Inf, 0.6143025237321854, 0.45047973036766054, 0.4340880669653416, 0.426312867552042, 0.416660885065794, 0.413742872774601, 0.397347736209631] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6143025237321854, 0.45047973036766054, 0.4340880669653416, 0.426312867552042, 0.416660885065794, 0.413742872774601, 0.397347736209631, 0.3916366118192673] ***
*** starting iteration: 8; err: [Inf, 0.6143025237321854, 0.45047973036766054, 0.4340880669653416, 0.426312867552042, 0.416660885065794, 0.413742872774601, 0.397347736209631, 0.3916366118192673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6143025237321854, 0.45047973036766054, 0.4340880669653416, 0.426312867552042, 0.416660885065794, 0.413742872774601, 0.397347736209631, 0.3916366118192673, 0.39046339213848114] ***
*** starting iteration: 9; err: [Inf, 0.6143025237321854, 0.45047973036766054, 0.4340880669653416, 0.426312867552042, 0.416660885065794, 0.413742872774601, 0.397347736209631, 0.3916366118192673, 0.39046339213848114] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6143025237321854, 0.45047973036766054, 0.4340880669653416, 0.426312867552042, 0.416660885065794, 0.413742872774601, 0.397347736209631, 0.3916366118192673, 0.39046339213848114, 0.38967424362897873] ***
*** finished computation of 7 references, err: [Inf, 0.6143025237321854, 0.45047973036766054, 0.4340880669653416, 0.426312867552042, 0.416660885065794, 0.413742872774601, 0.397347736209631, 0.3916366118192673, 0.39046339213848114, 0.38967424362897873] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 13, 13]]
** centroid: 1, normalized-entropy: 1.0, [(2, 13), (3, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 10]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
*** center 5: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 7: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5575368651747703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5575368651747703, 0.4023679765313864] ***
*** starting iteration: 2; err: [Inf, 0.5575368651747703, 0.4023679765313864] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5575368651747703, 0.4023679765313864, 0.3917356224358082] ***
*** starting iteration: 3; err: [Inf, 0.5575368651747703, 0.4023679765313864, 0.3917356224358082] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5575368651747703, 0.4023679765313864, 0.3917356224358082, 0.3867924402654171] ***
*** starting iteration: 4; err: [Inf, 0.5575368651747703, 0.4023679765313864, 0.3917356224358082, 0.3867924402654171] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5575368651747703, 0.4023679765313864, 0.3917356224358082, 0.3867924402654171, 0.3856600032746792] ***
*** starting iteration: 5; err: [Inf, 0.5575368651747703, 0.4023679765313864, 0.3917356224358082, 0.3867924402654171, 0.3856600032746792] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5575368651747703, 0.4023679765313864, 0.3917356224358082, 0.3867924402654171, 0.3856600032746792, 0.3856600032746792] ***
*** finished computation of 7 references, err: [Inf, 0.5575368651747703, 0.4023679765313864, 0.3917356224358082, 0.3867924402654171, 0.3856600032746792, 0.3856600032746792] ***
*** center 1: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 12, 1]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 16, 7]]
** centroid: 4, normalized-entropy: 0.8865408928220899, [(2, 16), (3, 7)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 17]]
*** center 7: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 17)
[0.9733333333333333, 0.9666666666666667, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.8933333333333334, 0.8933333333333334, 0.8933333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9733333333333333
finished with 17
iteration 5 finished
generating 4 configurations using top 4 configurations, starting with 17)
[0.9733333333333333, 0.9666666666666667, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.8933333333333334, 0.8933333333333334, 0.8933333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9733333333333333
finished with 17
iteration 6 finished
generating 4 configurations using top 4 configurations, starting with 17)
[0.9733333333333333, 0.9666666666666667, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.8933333333333334, 0.8933333333333334, 0.8933333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9733333333333333
finished with 17
iteration 7 finished
generating 4 configurations using top 4 configurations, starting with 17)
[0.9733333333333333, 0.9666666666666667, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.8933333333333334, 0.8933333333333334, 0.8933333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9733333333333333
finished with 17
iteration 8 finished
generating 4 configurations using top 4 configurations, starting with 17)
[0.9733333333333333, 0.9666666666666667, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.8933333333333334, 0.8933333333333334, 0.8933333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9733333333333333
finished with 17
iteration 9 finished
[ Info: ========== BEST MODEL ==========
[ Info: (AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2), 0.9733333333333333)
[ Info: AKNC{Array{Float64,1}}[AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[7.058333333333334, 3.025, 5.933333333333334, 2.1250000000000004], [4.788235294117647, 3.2058823529411766, 1.4235294117647062, 0.20000000000000007], [5.595238095238095, 2.7095238095238097, 4.042857142857144, 1.2619047619047619], [6.247368421052631, 2.9315789473684215, 5.163157894736843, 1.9736842105263157], [6.4437500000000005, 2.94375, 4.625000000000001, 1.4437499999999999], [4.433333333333334, 2.733333333333333, 1.3333333333333333, 0.2333333333333333], [5.325, 3.7583333333333333, 1.5416666666666667, 0.25833333333333336]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [3, 1, 2, 3, 2, 1, 1], 3), KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[6.542857142857144, 3.0285714285714285, 4.742857142857143, 1.5142857142857142], [6.2749999999999995, 2.8375, 5.1000000000000005, 1.8250000000000002], [4.857142857142857, 3.2333333333333334, 1.4476190476190474, 0.22857142857142865], [5.255555555555556, 2.411111111111111, 3.5999999999999996, 1.1111111111111112], [7.540000000000001, 3.0900000000000003, 6.36, 2.0], [5.400000000000001, 3.8499999999999996, 1.5, 0.275], [6.493333333333334, 3.1333333333333333, 5.5600000000000005, 2.246666666666667], [5.838461538461539, 2.823076923076923, 4.338461538461539, 1.323076923076923], [5.78, 2.5799999999999996, 5.0200000000000005, 1.86]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 3, 1, 2, 3, 1, 3, 2, 3], 3), KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[6.656250000000001, 3.0, 5.593749999999999, 2.1], [4.841666666666668, 3.270833333333334, 1.45, 0.24166666666666672], [5.486666666666667, 2.5266666666666664, 3.8533333333333335, 1.1933333333333331], [5.363636363636363, 3.763636363636363, 1.5, 0.30000000000000004], [7.566666666666667, 3.316666666666667, 6.466666666666668, 2.1], [6.362499999999999, 2.8687499999999995, 4.5125, 1.40625], [5.95, 2.85, 4.824999999999999, 1.6], [5.9624999999999995, 2.775, 5.0625, 1.7750000000000001]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [3, 1, 2, 1, 3, 2, 2, 3], 3), KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :fft, 0.6, 2))]
Test Summary: | Pass  Total
AKNC          |    1      1
[196, 3, 2, 1, 2, 11, 1, 6, 2, 4, 12, 5, 8, 2, 4, 10, 4, 5, 6, 3, 8, 4, 8, 11, 5, 4, 15, 4, 3, 4, 8, 12, 13, 1, 95, 1, 8, 3, 3, 16, 2, 27, 18, 2, 8, 7, 2, 16, 43, 63, 7, 11, 3, 17, 3, 23, 9, 12, 16, 27, 6, 7, 3, 6, 8, 3, 19, 35, 25, 35, 8, 1, 3, 43, 22, 14, 43, 10, 35, 43, 4, 7, 42, 1, 12, 66, 35, 33, 29, 9, 26, 33, 6, 3, 5, 50, 4, 131, 33, 22, 29, 9, 5, 7, 10, 12, 11, 21, 75, 7, 52, 11, 25, 2, 34, 63, 23, 3, 2, 12, 52, 19, 7, 20, 204, 8, 10, 15, 15, 54, 3, 28, 57, 7, 14, 2, 7, 5, 8, 3, 3, 7, 18, 47, 12, 8, 13, 7, 12, 44, 12, 14, 26, 39, 86, 11, 6, 2, 5, 10, 31, 2, 58, 1226, 4, 3, 11, 30, 19, 147, 4, 56, 12, 35, 115, 2, 33, 50, 9, 18, 215, 8, 18, 11, 10, 12, 10, 90, 81, 5, 2, 18, 8, 26, 52, 7, 84, 25, 101, 10, 17, 25, 6, 7, 11, 11, 68, 26, 34, 123, 75, 183, 244, 45, 8, 1, 47, 104, 32, 100, 98, 200, 115, 51, 8, 50, 1, 6, 29, 22, 91, 1, 1, 40, 3, 28, 28, 74, 1, 11, 4, 4, 78, 9, 18, 1, 18, 13, 6, 77, 5, 35, 52, 10, 47, 15, 6, 10, 6, 3, 31, 11, 35, 12, 30, 5, 10, 59, 7, 10, 10, 26, 13, 61, 45, 29, 46, 78, 3, 6, 52, 40, 17, 52, 5, 11, 10, 194, 24, 4, 51, 22, 9, 48, 1, 223, 18, 58, 441, 11]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.654, speedup = 0.3121698639984083, eval_ratio = 0.089426)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3940197172619048,"recall":0.39322916666666674,"f1":null,"seconds":0.0002117753028869629,"exhaustive_search_seconds":0.0003546103835105896,"evaluations":560.9921875,"distances_sum":1739.6324213781427}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5685763888888892,"recall":0.5685763888888892,"f1":null,"seconds":0.0003412291407585144,"exhaustive_search_seconds":0.0003546103835105896,"evaluations":752.671875,"distances_sum":1605.0402766551977}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6701388888888887,"recall":0.6701388888888887,"f1":null,"seconds":0.00046654045581817627,"exhaustive_search_seconds":0.0003546103835105896,"evaluations":899.3125,"distances_sum":1555.4222336787027}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7447916666666662,"recall":0.7447916666666662,"f1":null,"seconds":0.0006380043923854828,"exhaustive_search_seconds":0.0003546103835105896,"evaluations":1066.71875,"distances_sum":1526.888445618234}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7968749999999993,"recall":0.7968749999999993,"f1":0.7968749999999993,"seconds":0.0005607102066278458,"exhaustive_search_seconds":0.0003546103835105896,"evaluations":1184.4609375,"distances_sum":1509.549245560286}
KCenters.DeloneInvIndex> reached performance {"precision":0.8350694444444436,"recall":0.8350694444444436,"f1":0.8350694444444436,"seconds":0.0007297694683074951,"exhaustive_search_seconds":0.0003546103835105896,"evaluations":1330.2578125,"distances_sum":1495.8246739012045}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8249999999999998, speedup = 0.4864566846444083, eval_ratio = 0.129795)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
