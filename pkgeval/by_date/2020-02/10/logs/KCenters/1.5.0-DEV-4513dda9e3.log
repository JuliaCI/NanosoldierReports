Julia Version 1.5.0-DEV.256
Commit 4513dda9e3 (2020-02-10 18:52 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed DataValueInterfaces ───────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataStructures ────────────── v0.17.9
  Installed StatsBase ─────────────────── v0.32.0
  Installed Missings ──────────────────── v0.4.3
  Installed Compat ────────────────────── v3.4.0
  Installed OrderedCollections ────────── v1.1.0
  Installed Reexport ──────────────────── v0.2.0
  Installed KCenters ──────────────────── v0.1.11
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed MLDataPattern ─────────────── v0.5.0
  Installed SimilaritySearch ──────────── v0.3.18
  Installed Tables ────────────────────── v0.2.11
  Installed InvertedIndices ───────────── v1.0.0
  Installed Parsers ───────────────────── v0.3.11
  Installed TableTraits ───────────────── v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed CategoricalArrays ─────────── v0.7.7
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed MLDataUtils ───────────────── v0.5.0
  Installed DataAPI ───────────────────── v1.1.0
  Installed JSON ──────────────────────── v0.21.0
  Installed DataFrames ────────────────── v0.20.0
  Installed PooledArrays ──────────────── v0.5.3
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.1.11
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.4.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.1.11
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.18
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_09cD8L/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.4.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.0
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.1.11
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.18
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v0.2.11
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
[ Info: 203.71999999999997
[ Info: 75.75999999999996
[ Info: 40.08
[ Info: 29.789999999999992
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 267.50999838966254
[ Info: 215.5799982898622
[ Info: 195.99000008183336
[ Info: 76.32000114659134
Test Summary:        |
Clustering with dnet | No tests
inertia(cfft.distances) = 19.410199979152303
inertia(cdnet.distances) = 31.468782227928976
inertia(crand.distances) = 18.790943940489452
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4501953125, conf: {"ssize":3,"bsize":2}, perf: {"precision":1.0,"recall":0.4501953125,"f1":0.5994706682206684,"seconds":4.166737198829651e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":6.265625,"distances_sum":1230.098750003389}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8513835123210132,"seconds":5.289912223815918e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.1328125,"distances_sum":2298.985457476648}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7548828125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.8513835123210132,"seconds":5.289912223815918e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.1328125,"distances_sum":2298.985457476648}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9550283050283055,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.9375,"distances_sum":3037.7922823554386}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9550283050283055,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.9375,"distances_sum":3037.7922823554386}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9716796875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9716796875,"f1":0.9848214285714287,"seconds":6.9569796323776245e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":9.0,"distances_sum":3291.6768108833307}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9806547619047623,"seconds":6.863847374916077e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.984375,"distances_sum":3264.6476898190017}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9716796875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9716796875,"f1":0.9848214285714287,"seconds":6.9569796323776245e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":9.0,"distances_sum":3291.6768108833307}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9716796875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9716796875,"f1":0.9848214285714287,"seconds":6.9569796323776245e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":9.0,"distances_sum":3291.6768108833307}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.875511294261295,"seconds":6.070360541343689e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.7109375,"distances_sum":2116.6358794097887}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7890625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7890625,"f1":0.875511294261295,"seconds":6.070360541343689e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.7109375,"distances_sum":2116.6358794097887}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9527014652014657,"seconds":6.550922989845276e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.9765625,"distances_sum":2644.328784508761}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9527014652014657,"seconds":6.550922989845276e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.9765625,"distances_sum":2644.328784508761}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9710393772893777,"seconds":6.6570937633514404e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":9.0,"distances_sum":2817.947986407284}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":9,"bsize":11}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9767857142857145,"seconds":7.0892274379730225e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.9921875,"distances_sum":2867.9598889986787}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":9,"bsize":11},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9767857142857145,"seconds":7.0892274379730225e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.9921875,"distances_sum":2867.9598889986787}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":9,"bsize":11},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9767857142857145,"seconds":7.0892274379730225e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.9921875,"distances_sum":2867.9598889986787}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5595703125, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5595703125,"f1":0.7011481573981578,"seconds":4.502013325691223e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":6.9765625,"distances_sum":1398.4620684095412}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8707995129870137,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.4296875,"distances_sum":2135.5140117590736}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.783203125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.783203125,"f1":0.8707995129870137,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.4296875,"distances_sum":2135.5140117590736}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9295157967032976,"seconds":5.466863512992859e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.78125,"distances_sum":2547.4189483112555}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9070798992674,"seconds":5.401670932769775e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.6015625,"distances_sum":2357.445351795813}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9287660256410263,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.8203125,"distances_sum":2531.370059434141}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.876953125,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.876953125,"f1":0.9287660256410263,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.8203125,"distances_sum":2531.370059434141}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9697744963369966,"seconds":6.098300218582153e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.9140625,"distances_sum":2838.126460919661}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":11,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9637305402930407,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.90625,"distances_sum":2799.161089982519}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9740728021978027,"seconds":6.141141057014465e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.9140625,"distances_sum":2884.7197501284186}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9680460164835171,"seconds":5.902722477912903e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.9140625,"distances_sum":2830.4060951158367}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9505666208791214,"seconds":5.776062607765198e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.78125,"distances_sum":2741.897983211988}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9740728021978027,"seconds":6.141141057014465e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.9140625,"distances_sum":2884.7197501284186}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9740728021978027,"seconds":6.141141057014465e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.9140625,"distances_sum":2884.7197501284186}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6103515625, conf: {"ssize":3,"bsize":4}, perf: {"precision":0.9874999999999999,"recall":0.6103515625,"f1":0.7425921300921305,"seconds":5.00120222568512e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.0625,"distances_sum":990.4261852223788}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2978515625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2978515625,"f1":null,"seconds":3.8389116525650024e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":6.0625,"distances_sum":530.6774753345613}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.51953125, conf: {"ssize":5,"bsize":3}, perf: {"precision":0.9838541666666667,"recall":0.51953125,"f1":0.6662216255966259,"seconds":4.323199391365051e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":6.7734375,"distances_sum":810.5306560662482}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6103515625,"state":{"ssize":3,"bsize":4},"perf":{"precision":0.9874999999999999,"recall":0.6103515625,"f1":0.7425921300921305,"seconds":5.00120222568512e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.0625,"distances_sum":990.4261852223788}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":2,"bsize":7}, perf: {"precision":0.9910249255952384,"recall":0.8603515625,"f1":0.9169320913461543,"seconds":5.403533577919006e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.5390625,"distances_sum":1668.5995333235612}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.703125, conf: {"ssize":6,"bsize":5}, perf: {"precision":0.9806547619047618,"recall":0.703125,"f1":0.8113615551115557,"seconds":4.984438419342041e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.78125,"distances_sum":1211.6972780117658}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7197265625, conf: {"ssize":4,"bsize":5}, perf: {"precision":0.9818824404761902,"recall":0.7197265625,"f1":0.8207244144744149,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.8359375,"distances_sum":1254.1888848676094}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8056640625, conf: {"ssize":5,"bsize":6}, perf: {"precision":0.9753999255952381,"recall":0.8056640625,"f1":null,"seconds":5.466863512992859e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.3359375,"distances_sum":1501.704246462225}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8603515625,"state":{"ssize":2,"bsize":7},"perf":{"precision":0.9910249255952384,"recall":0.8603515625,"f1":0.9169320913461543,"seconds":5.403533577919006e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.5390625,"distances_sum":1668.5995333235612}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":4,"bsize":11}, perf: {"precision":0.9909319196428572,"recall":0.947265625,"f1":0.9668247767857145,"seconds":6.32554292678833e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9140625,"distances_sum":1908.480595761103}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":0.9868861607142858,"recall":0.94140625,"f1":0.96209220467033,"seconds":6.016343832015991e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9296875,"distances_sum":1902.3983637485742}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":8,"bsize":8}, perf: {"precision":0.9904668898809524,"recall":0.892578125,"f1":0.9339653185356313,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.7109375,"distances_sum":1769.0829360292387}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":5,"bsize":10}, perf: {"precision":0.985444568452381,"recall":0.93359375,"f1":0.9564696371337,"seconds":5.902722477912903e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.875,"distances_sum":1875.7716931167681}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":4,"bsize":9}, perf: {"precision":0.986021205357143,"recall":0.9169921875,"f1":0.947382240155678,"seconds":5.792826414108276e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.828125,"distances_sum":1831.7728976574601}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":4,"bsize":11},"perf":{"precision":0.9909319196428572,"recall":0.947265625,"f1":0.9668247767857145,"seconds":6.32554292678833e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9140625,"distances_sum":1908.480595761103}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":4,"bsize":11},"perf":{"precision":0.9909319196428572,"recall":0.947265625,"f1":0.9668247767857145,"seconds":6.32554292678833e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9140625,"distances_sum":1908.480595761103}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5458984375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5458984375,"f1":0.6908532439782447,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.0078125,"distances_sum":1031.148492675902}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7392578125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7392578125,"f1":0.8410750707625716,"seconds":5.129724740982056e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.9375,"distances_sum":1439.6361354135138}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7392578125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7392578125,"f1":0.8410750707625716,"seconds":5.129724740982056e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.9375,"distances_sum":1439.6361354135138}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8687245046620056,"seconds":5.356967449188232e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.1640625,"distances_sum":1546.2413398370632}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.9186329295704304,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.609375,"distances_sum":1898.7043551669444}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8588635323010331,"seconds":5.071982741355896e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.0703125,"distances_sum":1527.5669757148094}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8634303196803204,"seconds":5.258247256278992e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.109375,"distances_sum":1529.398382353765}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.86328125,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.86328125,"f1":0.9186329295704304,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.609375,"distances_sum":1898.7043551669444}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9754864926739928,"seconds":6.170943379402161e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8828125,"distances_sum":2204.692155096974}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9731799450549453,"seconds":5.900859832763672e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8671875,"distances_sum":2186.4638358609736}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9600503663003669,"seconds":6.034970283508301e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.796875,"distances_sum":2111.0913108467794}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9467865467865478,"seconds":5.820766091346741e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.7734375,"distances_sum":2043.8805904859187}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9371997793872799,"seconds":5.93625009059906e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.6484375,"distances_sum":1983.3556148327043}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9754864926739928,"seconds":6.170943379402161e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8828125,"distances_sum":2204.692155096974}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9754864926739928,"seconds":6.170943379402161e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8828125,"distances_sum":2204.692155096974}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.416015625, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.416015625,"f1":null,"seconds":4.014000296592712e-6,"exhaustive_search_seconds":1.775100827217102e-6,"evaluations":5.8203125,"distances_sum":773.1420599865482}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.416015625,"state":{"ssize":5,"bsize":2},"perf":{"precision":null,"recall":0.416015625,"f1":null,"seconds":4.014000296592712e-6,"exhaustive_search_seconds":1.775100827217102e-6,"evaluations":5.8203125,"distances_sum":773.1420599865482}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5712890625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5712890625,"f1":0.7143876956376963,"seconds":4.349276423454285e-6,"exhaustive_search_seconds":1.775100827217102e-6,"evaluations":6.609375,"distances_sum":1065.2746394319406}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7392578125, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.7392578125,"f1":0.8393687909312917,"seconds":5.172565579414368e-6,"exhaustive_search_seconds":1.775100827217102e-6,"evaluations":7.5,"distances_sum":1529.152961775457}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.7967777014652022,"seconds":4.7441571950912476e-6,"exhaustive_search_seconds":1.775100827217102e-6,"evaluations":7.1875,"distances_sum":1374.2430963565935}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7392578125,"state":{"ssize":9,"bsize":5},"perf":{"precision":1.0,"recall":0.7392578125,"f1":0.8393687909312917,"seconds":5.172565579414368e-6,"exhaustive_search_seconds":1.775100827217102e-6,"evaluations":7.5,"distances_sum":1529.152961775457}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.93555402930403,"seconds":6.016343832015991e-6,"exhaustive_search_seconds":1.775100827217102e-6,"evaluations":8.671875,"distances_sum":2040.8070705583107}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9621852106227112,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.775100827217102e-6,"evaluations":8.8359375,"distances_sum":2196.157031679966}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8583984375, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8583984375,"f1":0.9192708333333341,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.775100827217102e-6,"evaluations":8.6484375,"distances_sum":1913.5077029751108}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9218354562104568,"seconds":5.325302481651306e-6,"exhaustive_search_seconds":1.775100827217102e-6,"evaluations":8.5546875,"distances_sum":1959.2352022161595}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9621852106227112,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.775100827217102e-6,"evaluations":8.8359375,"distances_sum":2196.157031679966}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9621852106227112,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.775100827217102e-6,"evaluations":8.8359375,"distances_sum":2196.157031679966}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.287109375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.287109375,"f1":null,"seconds":3.840774297714233e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":6.0625,"distances_sum":598.4631363091075}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.287109375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.287109375,"f1":null,"seconds":3.840774297714233e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":6.0625,"distances_sum":598.4631363091075}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8559555028305038,"seconds":5.077570676803589e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.828125,"distances_sum":2022.2839530569318}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4248046875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4248046875,"f1":null,"seconds":3.855675458908081e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":6.328125,"distances_sum":906.6915487236109}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65234375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.65234375,"f1":0.7775530025530033,"seconds":4.684552550315857e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.5234375,"distances_sum":1617.950893841016}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7578125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7578125,"f1":0.8559555028305038,"seconds":5.077570676803589e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.828125,"distances_sum":2022.2839530569318}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9655162545787548,"seconds":6.098300218582153e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9140625,"distances_sum":2908.4353588909507}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.81640625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.81640625,"f1":0.8932666292041299,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.71875,"distances_sum":2281.4544397697377}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7998046875, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.7998046875,"f1":0.879394043456544,"seconds":5.6158751249313354e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.5234375,"distances_sum":2265.3838541198684}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9584509240759246,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8984375,"distances_sum":2864.297146921264}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8577880452880461,"seconds":5.250796675682068e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.84375,"distances_sum":2020.8664643079742}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9522409881784889,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.828125,"distances_sum":2829.1530487462705}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9655162545787548,"seconds":6.098300218582153e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9140625,"distances_sum":2908.4353588909507}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9787431318681321,"seconds":6.237998604774475e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.984375,"distances_sum":3006.246695118666}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9794299450549455,"seconds":6.202608346939087e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9453125,"distances_sum":3037.4074704922446}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9816048534798538,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9921875,"distances_sum":3028.009285809924}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9679773351648356,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9296875,"distances_sum":2935.9421862806025}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9692536630036637,"seconds":6.236135959625244e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9765625,"distances_sum":2921.3370908524953}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.966796875,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9816048534798538,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9921875,"distances_sum":3028.009285809924}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.966796875,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9816048534798538,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9921875,"distances_sum":3028.009285809924}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.42578125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.42578125,"f1":null,"seconds":3.905966877937317e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":6.296875,"distances_sum":1004.5522267419665}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.177734375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.177734375,"f1":null,"seconds":3.1460076570510864e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":5.0390625,"distances_sum":443.08705168746224}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.42578125,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.42578125,"f1":null,"seconds":3.905966877937317e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":6.296875,"distances_sum":1004.5522267419665}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5537109375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5537109375,"f1":null,"seconds":4.4833868741989136e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.0078125,"distances_sum":1347.4110248453744}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8056640625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8056640625,"f1":0.8842553280053289,"seconds":5.425885319709778e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.3984375,"distances_sum":2246.9976878348957}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8056640625,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.8056640625,"f1":0.8842553280053289,"seconds":5.425885319709778e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.3984375,"distances_sum":2246.9976878348957}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.962522893772894,"seconds":5.8300793170928955e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.859375,"distances_sum":2809.9847681084448}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9554601648351653,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.859375,"distances_sum":2752.462373843619}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.962522893772894,"seconds":5.8300793170928955e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.859375,"distances_sum":2809.9847681084448}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9345703125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.962522893772894,"seconds":5.8300793170928955e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.859375,"distances_sum":2809.9847681084448}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.568359375,"f1":null,"seconds":4.420056939125061e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":7.6015625,"distances_sum":1369.3023619026162}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.185546875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.185546875,"f1":null,"seconds":3.416091203689575e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":6.2421875,"distances_sum":465.873120182375}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.568359375,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.568359375,"f1":null,"seconds":4.420056939125061e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":7.6015625,"distances_sum":1369.3023619026162}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7890078671328677,"seconds":5.012378096580505e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.046875,"distances_sum":1687.490458009306}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.9150042665667676,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.3984375,"distances_sum":2399.933283573416}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9395032051282057,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.828125,"distances_sum":2648.7590546253145}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8643876956376967,"seconds":5.09992241859436e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.2421875,"distances_sum":2085.3752865651677}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.7939709595959604,"seconds":4.772096872329712e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.1796875,"distances_sum":1727.3650276481733}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.89453125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.9395032051282057,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.828125,"distances_sum":2648.7590546253145}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9632097069597074,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.8671875,"distances_sum":2825.741713491656}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9701293498168504,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.9453125,"distances_sum":2848.81079118176}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9701293498168504,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.9453125,"distances_sum":2848.81079118176}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9701293498168504,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.9453125,"distances_sum":2848.81079118176}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1396484375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1396484375,"f1":null,"seconds":2.6244670152664185e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":3.9921875,"distances_sum":417.776252802893}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8499087717837726,"seconds":5.017966032028198e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.140625,"distances_sum":2176.259137638714}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8609218906093914,"seconds":5.0924718379974365e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.2421875,"distances_sum":2184.608584730199}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7734375,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7734375,"f1":0.8609218906093914,"seconds":5.0924718379974365e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.2421875,"distances_sum":2184.608584730199}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9423248626373629,"seconds":5.718320608139038e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.828125,"distances_sum":2770.6112742355817}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.818359375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.818359375,"f1":0.8928285256410263,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.6796875,"distances_sum":2416.176765777484}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8115234375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8115234375,"f1":0.8872653388278398,"seconds":5.299225449562073e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.5078125,"distances_sum":2432.90242496704}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8984375,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.8984375,"f1":0.9423248626373629,"seconds":5.718320608139038e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.828125,"distances_sum":2770.6112742355817}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":7,"bsize":13}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.976751373626374,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.921875,"distances_sum":3074.4045282546226}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9524610805860811,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.7890625,"distances_sum":2901.6910619016694}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.949078525641026,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.7109375,"distances_sum":2902.996333088708}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.962339743589744,"seconds":5.718320608139038e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.875,"distances_sum":2936.012287779605}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9450377747252753,"seconds":5.260109901428223e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.7578125,"distances_sum":2804.615744295814}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":7,"bsize":13},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.976751373626374,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.921875,"distances_sum":3074.4045282546226}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":7,"bsize":13},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.976751373626374,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.921875,"distances_sum":3074.4045282546226}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41015625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.41015625,"f1":null,"seconds":3.688037395477295e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.1484375,"distances_sum":1034.6110339904428}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.17578125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.17578125,"f1":null,"seconds":2.9280781745910645e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":5.140625,"distances_sum":439.8920045189234}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.41015625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.41015625,"f1":null,"seconds":3.688037395477295e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.1484375,"distances_sum":1034.6110339904428}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6494140625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6494140625,"f1":0.7739940614940622,"seconds":4.654750227928162e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.5390625,"distances_sum":1749.047376283228}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6494140625,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6494140625,"f1":0.7739940614940622,"seconds":4.654750227928162e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.5390625,"distances_sum":1749.047376283228}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.9002206127206136,"seconds":5.321577191352844e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.5625,"distances_sum":2444.6344424229906}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9404532967032972,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.71875,"distances_sum":2748.0832955183423}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8994140625,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.8994140625,"f1":0.9404532967032972,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.71875,"distances_sum":2748.0832955183423}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8994140625,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.8994140625,"f1":0.9404532967032972,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.71875,"distances_sum":2748.0832955183423}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3095703125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3095703125,"f1":null,"seconds":3.123655915260315e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":4.7734375,"distances_sum":865.3579554507108}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3291015625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3291015625,"f1":null,"seconds":3.1795352697372437e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":5.09375,"distances_sum":909.6554632827023}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5078125,"f1":null,"seconds":3.987923264503479e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":6.3984375,"distances_sum":1369.1266131822358}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5078125,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5078125,"f1":null,"seconds":3.987923264503479e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":6.3984375,"distances_sum":1369.1266131822358}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.915264943389944,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.515625,"distances_sum":2524.881205889249}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8965383574758584,"seconds":5.494803190231323e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.484375,"distances_sum":2332.4798068439663}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.560546875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.560546875,"f1":0.7027132589632595,"seconds":4.040077328681946e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":6.8359375,"distances_sum":1479.1608347398624}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7275390625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7275390625,"f1":0.8315887237762247,"seconds":5.239620804786682e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":7.7578125,"distances_sum":2036.081727525939}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":7,"bsize":4}, perf: {"precision":null,"recall":0.6572265625,"f1":null,"seconds":4.809349775314331e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":7.5078125,"distances_sum":1737.7727368007775}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5361328125, conf: {"ssize":8,"bsize":3}, perf: {"precision":null,"recall":0.5361328125,"f1":null,"seconds":4.414469003677368e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":6.7109375,"distances_sum":1402.3805373014593}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.8020781302031309,"seconds":6.306730210781097e-5,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":7.6171875,"distances_sum":1858.2249040864629}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5341796875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5341796875,"f1":0.6800609113109118,"seconds":4.025176167488098e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":6.703125,"distances_sum":1394.6308748258136}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.857421875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.857421875,"f1":0.915264943389944,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.515625,"distances_sum":2524.881205889249}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9564388736263741,"seconds":5.628913640975952e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.7734375,"distances_sum":2810.578306590022}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9629464285714292,"seconds":5.6978315114974976e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.7890625,"distances_sum":2855.022617761681}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9477392399267405,"seconds":5.31412661075592e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.71875,"distances_sum":2757.5315709833117}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9525526556776563,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.6640625,"distances_sum":2818.2260888093683}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.924565538628039,"seconds":5.282461643218994e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.484375,"distances_sum":2603.3005518922396}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9629464285714292,"seconds":5.6978315114974976e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.7890625,"distances_sum":2855.022617761681}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9629464285714292,"seconds":5.6978315114974976e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.7890625,"distances_sum":2855.022617761681}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.181640625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.181640625,"f1":null,"seconds":3.2652169466018677e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":5.9296875,"distances_sum":451.9246104493949}}, beam: 1, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.181640625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.181640625,"f1":null,"seconds":3.2652169466018677e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":5.9296875,"distances_sum":451.9246104493949}}, n: 9
inertia(cfft.distances) = 25.926043095822294
inertia(cdnet.distances) = 170.6837004340278
inertia(crand.distances) = 218.36546868719964
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8666666666666667
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8799999999999999
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8733333333333334
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8955555555555555
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8933333333333334
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8577777777777778
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8822222222222221
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8822222222222224
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9199999999999999
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9244444444444445
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9111111111111111
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9311111111111111
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8488888888888889
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8733333333333334
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.86
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9288888888888889
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8799999999999999
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8822222222222221
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9044444444444443
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX===== rocchio like>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX==== clustering>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
nc.class_map = [2, 3, 1, 3, 1, 2, 3, 1, 3, 3, 2, 3, 1, 3, 3, 2, 3, 2, 2, 1, 3]
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.92
*** finished computation of 12 references, err: [Inf, 0.5387458689014117] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 3: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 4, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
*** center 5: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 11, 1]]
** centroid: 6, normalized-entropy: 0.4138168503036336, [(2, 11), (3, 1)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 29, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 9: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 11, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
finished with 13 centroids; started with 12
acc = 0.98
Test Summary:   | Pass  Total
NearestCentroid |   10     10
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.5778071635961533] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5778071635961533, 0.5269990134239196] ***
*** starting iteration: 2; err: [Inf, 0.5778071635961533, 0.5269990134239196] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5778071635961533, 0.5269990134239196, 0.5280196133255959] ***
*** finished computation of 3 references, err: [Inf, 0.5778071635961533, 0.5269990134239196, 0.5280196133255959] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 30, 2]]
** centroid: 1, normalized-entropy: 0.3372900666170139, [(2, 30), (3, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 7, 32]]
** centroid: 3, normalized-entropy: 0.6789538995185759, [(2, 7), (3, 32)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9691708312928676] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9691708312928676, 0.5789899767190217] ***
*** starting iteration: 2; err: [Inf, 0.9691708312928676, 0.5789899767190217] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9691708312928676, 0.5789899767190217, 0.5715285608917475] ***
*** starting iteration: 3; err: [Inf, 0.9691708312928676, 0.5789899767190217, 0.5715285608917475] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9691708312928676, 0.5789899767190217, 0.5715285608917475, 0.5686085809022188] ***
*** finished computation of 3 references, err: [Inf, 0.9691708312928676, 0.5789899767190217, 0.5715285608917475, 0.5686085809022188] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 27, 1]]
** centroid: 1, normalized-entropy: 0.2222848306856879, [(2, 27), (3, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 6, 33]]
** centroid: 2, normalized-entropy: 0.6193821946787638, [(2, 6), (3, 33)]
*** center 3: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7607141718268394] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7607141718268394, 0.5944022431969642] ***
*** starting iteration: 2; err: [Inf, 0.7607141718268394, 0.5944022431969642] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7607141718268394, 0.5944022431969642, 0.5158590574562549] ***
*** starting iteration: 3; err: [Inf, 0.7607141718268394, 0.5944022431969642, 0.5158590574562549] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7607141718268394, 0.5944022431969642, 0.5158590574562549, 0.513862163349986] ***
*** finished computation of 3 references, err: [Inf, 0.7607141718268394, 0.5944022431969642, 0.5158590574562549, 0.513862163349986] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 28, 9]]
** centroid: 1, normalized-entropy: 0.8003922080453356, [(2, 28), (3, 9)]
*** center 2: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 23]]
** centroid: 3, normalized-entropy: 0.4021791902022729, [(2, 2), (3, 23)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6845144488662481] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6845144488662481, 0.5255371928960085] ***
*** starting iteration: 2; err: [Inf, 0.6845144488662481, 0.5255371928960085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6845144488662481, 0.5255371928960085, 0.46131731051951647] ***
*** starting iteration: 3; err: [Inf, 0.6845144488662481, 0.5255371928960085, 0.46131731051951647] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6845144488662481, 0.5255371928960085, 0.46131731051951647, 0.4531472220644355] ***
*** starting iteration: 4; err: [Inf, 0.6845144488662481, 0.5255371928960085, 0.46131731051951647, 0.4531472220644355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6845144488662481, 0.5255371928960085, 0.46131731051951647, 0.4531472220644355, 0.4530164263769984] ***
*** finished computation of 7 references, err: [Inf, 0.6845144488662481, 0.5255371928960085, 0.46131731051951647, 0.4531472220644355, 0.4530164263769984] ***
*** center 1: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 13, 11]]
** centroid: 3, normalized-entropy: 0.9949848281859699, [(2, 13), (3, 11)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 7, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.777946871817112] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.777946871817112, 0.4983999977260828] ***
*** starting iteration: 2; err: [Inf, 0.777946871817112, 0.4983999977260828] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.777946871817112, 0.4983999977260828, 0.4944779200106859] ***
*** starting iteration: 3; err: [Inf, 0.777946871817112, 0.4983999977260828, 0.4944779200106859] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.777946871817112, 0.4983999977260828, 0.4944779200106859, 0.4914969819039106] ***
*** starting iteration: 4; err: [Inf, 0.777946871817112, 0.4983999977260828, 0.4944779200106859, 0.4914969819039106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.777946871817112, 0.4983999977260828, 0.4944779200106859, 0.4914969819039106, 0.4914969819039106] ***
*** finished computation of 7 references, err: [Inf, 0.777946871817112, 0.4983999977260828, 0.4944779200106859, 0.4914969819039106, 0.4914969819039106] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 13, 1]]
** centroid: 1, normalized-entropy: 0.3712323266408756, [(2, 13), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 3: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 10, 6]]
** centroid: 5, normalized-entropy: 0.954434002924965, [(2, 10), (3, 6)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7195242227613926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7195242227613926, 0.5066313856840133] ***
*** starting iteration: 2; err: [Inf, 0.7195242227613926, 0.5066313856840133] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7195242227613926, 0.5066313856840133, 0.4798888768255711] ***
*** starting iteration: 3; err: [Inf, 0.7195242227613926, 0.5066313856840133, 0.4798888768255711] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7195242227613926, 0.5066313856840133, 0.4798888768255711, 0.4735085517168045] ***
*** starting iteration: 4; err: [Inf, 0.7195242227613926, 0.5066313856840133, 0.4798888768255711, 0.4735085517168045] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7195242227613926, 0.5066313856840133, 0.4798888768255711, 0.4735085517168045, 0.46352273240685465] ***
*** starting iteration: 5; err: [Inf, 0.7195242227613926, 0.5066313856840133, 0.4798888768255711, 0.4735085517168045, 0.46352273240685465] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7195242227613926, 0.5066313856840133, 0.4798888768255711, 0.4735085517168045, 0.46352273240685465, 0.46210597947239873] ***
*** starting iteration: 6; err: [Inf, 0.7195242227613926, 0.5066313856840133, 0.4798888768255711, 0.4735085517168045, 0.46352273240685465, 0.46210597947239873] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7195242227613926, 0.5066313856840133, 0.4798888768255711, 0.4735085517168045, 0.46352273240685465, 0.46210597947239873, 0.4625727126002312] ***
*** finished computation of 7 references, err: [Inf, 0.7195242227613926, 0.5066313856840133, 0.4798888768255711, 0.4735085517168045, 0.46352273240685465, 0.46210597947239873, 0.4625727126002312] ***
*** center 1: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 16, 11]]
** centroid: 6, normalized-entropy: 0.975119064940866, [(2, 16), (3, 11)]
*** center 7: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 2.8102241372317076] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.8102241372317076, 0.9100316664576531] ***
*** finished computation of 3 references, err: [Inf, 2.8102241372317076, 0.9100316664576531] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 20, 33]]
** centroid: 1, normalized-entropy: 0.9561550236844027, [(2, 20), (3, 33)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 17, 1]]
** centroid: 2, normalized-entropy: 0.3095434291503252, [(2, 17), (3, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0570681621134281] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0570681621134281, 0.6886417139321566] ***
*** finished computation of 3 references, err: [Inf, 1.0570681621134281, 0.6886417139321566] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 1, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 10, 33]]
** centroid: 2, normalized-entropy: 0.7824441294066888, [(2, 10), (3, 33)]
*** center 3: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8010852208733559] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8010852208733559, 0.6347454158961773] ***
*** finished computation of 3 references, err: [Inf, 0.8010852208733559, 0.6347454158961773] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 27, 4]]
** centroid: 1, normalized-entropy: 0.5547781633412736, [(2, 27), (3, 4)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 3, 28]]
** centroid: 2, normalized-entropy: 0.45868581620054033, [(2, 3), (3, 28)]
*** center 3: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7970006129145623] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7970006129145623, 0.6743372645974159] ***
*** finished computation of 3 references, err: [Inf, 0.7970006129145623, 0.6743372645974159] ***
*** center 1: selecting labels [1] (freq >= 2) [from [15, 1, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 36, 34]]
** centroid: 3, normalized-entropy: 0.9994110647387552, [(2, 36), (3, 34)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.2885278023779392] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2885278023779392, 0.7503033824265003] ***
*** finished computation of 3 references, err: [Inf, 1.2885278023779392, 0.7503033824265003] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 25]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 30, 9]]
** centroid: 2, normalized-entropy: 0.7793498372920851, [(2, 30), (3, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [33, 3, 0]]
** centroid: 3, normalized-entropy: 0.4138168503036336, [(1, 33), (2, 3)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.2689229780435562] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2689229780435562, 0.5831314317882061] ***
*** finished computation of 3 references, err: [Inf, 1.2689229780435562, 0.5831314317882061] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 23]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 29, 9]]
** centroid: 2, normalized-entropy: 0.7897492536625221, [(2, 29), (3, 9)]
*** center 3: selecting labels [1] (freq >= 2) [from [38, 1, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7423897969722748] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7423897969722748, 0.637009023502469] ***
*** starting iteration: 2; err: [Inf, 0.7423897969722748, 0.637009023502469] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7423897969722748, 0.637009023502469, 0.6380953996628523] ***
*** finished computation of 3 references, err: [Inf, 0.7423897969722748, 0.637009023502469, 0.6380953996628523] ***
*** center 1: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 4, 30]]
** centroid: 2, normalized-entropy: 0.5225593745369407, [(2, 4), (3, 30)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 33, 4]]
** centroid: 3, normalized-entropy: 0.4941829348497886, [(2, 33), (3, 4)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1166619470715522] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1166619470715522, 0.8672437686473131] ***
*** starting iteration: 2; err: [Inf, 1.1166619470715522, 0.8672437686473131] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1166619470715522, 0.8672437686473131, 0.8551396584510803] ***
*** starting iteration: 3; err: [Inf, 1.1166619470715522, 0.8672437686473131, 0.8551396584510803] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1166619470715522, 0.8672437686473131, 0.8551396584510803, 0.8493365561962127] ***
*** finished computation of 3 references, err: [Inf, 1.1166619470715522, 0.8672437686473131, 0.8551396584510803, 0.8493365561962127] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [20, 2, 0]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(1, 20), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 31, 34]]
** centroid: 2, normalized-entropy: 0.9984628557283827, [(2, 31), (3, 34)]
*** center 3: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.714258995205164] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.714258995205164, 0.6160908664762974] ***
*** starting iteration: 2; err: [Inf, 0.714258995205164, 0.6160908664762974] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.714258995205164, 0.6160908664762974, 0.615321006923914] ***
*** finished computation of 3 references, err: [Inf, 0.714258995205164, 0.6160908664762974, 0.615321006923914] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 23]]
** centroid: 1, normalized-entropy: 0.24988229283318547, [(2, 1), (3, 23)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 29, 9]]
** centroid: 2, normalized-entropy: 0.7897492536625221, [(2, 29), (3, 9)]
*** center 3: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1133099418878556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.1133099418878556, 0.6102974901348353] ***
*** finished computation of 7 references, err: [Inf, 1.1133099418878556, 0.6102974901348353] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 13]]
** centroid: 1, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 5]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 22, 1]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 8, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [29, 3, 0]]
** centroid: 7, normalized-entropy: 0.44886448872302936, [(1, 29), (2, 3)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5511844830214977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5511844830214977, 0.4310675596445799] ***
*** finished computation of 7 references, err: [Inf, 0.5511844830214977, 0.4310675596445799] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 16, 4]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 16), (3, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 17, 1]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 17]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6273667895793915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6273667895793915, 0.39345166720449926] ***
*** finished computation of 7 references, err: [Inf, 0.6273667895793915, 0.39345166720449926] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 11, 9]]
** centroid: 3, normalized-entropy: 0.9927744539878083, [(2, 11), (3, 9)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
*** center 5: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 13, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.4853851953148842] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4853851953148842, 1.0103349943459035] ***
*** finished computation of 3 references, err: [Inf, 1.4853851953148842, 1.0103349943459035] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [29, 16, 0]]
** centroid: 2, normalized-entropy: 0.9389320105807949, [(1, 29), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 21, 20]]
** centroid: 3, normalized-entropy: 0.9995708393473225, [(2, 21), (3, 20)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.5269465665519237] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5269465665519237, 0.850610458701849] ***
*** finished computation of 3 references, err: [Inf, 1.5269465665519237, 0.850610458701849] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 28, 22]]
** centroid: 1, normalized-entropy: 0.9895875212220558, [(2, 28), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [33, 5, 0]]
** centroid: 2, normalized-entropy: 0.5617526078313283, [(1, 33), (2, 5)]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8810432460904122] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8810432460904122, 0.6372852677851916] ***
*** finished computation of 3 references, err: [Inf, 0.8810432460904122, 0.6372852677851916] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 30, 32]]
** centroid: 1, normalized-entropy: 0.9992492479956566, [(2, 30), (3, 32)]
*** center 2: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7482168700546026] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7482168700546026, 0.5204597505554557] ***
*** finished computation of 7 references, err: [Inf, 0.7482168700546026, 0.5204597505554557] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 2: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 9, 7]]
** centroid: 5, normalized-entropy: 0.9886994082884974, [(2, 9), (3, 7)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 28, 6]]
** centroid: 7, normalized-entropy: 0.6722948170756378, [(2, 28), (3, 6)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5792371193319559] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5792371193319559, 0.5126598124206067] ***
*** finished computation of 7 references, err: [Inf, 0.5792371193319559, 0.5126598124206067] ***
*** center 1: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 3: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 16, 10]]
** centroid: 4, normalized-entropy: 0.961236604722876, [(2, 16), (3, 10)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 6, 1]]
** centroid: 7, normalized-entropy: 0.5916727785823274, [(2, 6), (3, 1)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6104530733823776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6104530733823776, 0.4755726609379053] ***
*** finished computation of 7 references, err: [Inf, 0.6104530733823776, 0.4755726609379053] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 2: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [6, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 18, 10]]
** centroid: 6, normalized-entropy: 0.940285958670631, [(2, 18), (3, 10)]
*** center 7: selecting labels [1] (freq >= 1) [from [6, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.2280239063501357] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2280239063501357, 0.683831576704979] ***
*** starting iteration: 2; err: [Inf, 1.2280239063501357, 0.683831576704979] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2280239063501357, 0.683831576704979, 0.594708561450243] ***
*** starting iteration: 3; err: [Inf, 1.2280239063501357, 0.683831576704979, 0.594708561450243] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2280239063501357, 0.683831576704979, 0.594708561450243, 0.5782228902727365] ***
*** starting iteration: 4; err: [Inf, 1.2280239063501357, 0.683831576704979, 0.594708561450243, 0.5782228902727365] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2280239063501357, 0.683831576704979, 0.594708561450243, 0.5782228902727365, 0.5597390503436327] ***
*** starting iteration: 5; err: [Inf, 1.2280239063501357, 0.683831576704979, 0.594708561450243, 0.5782228902727365, 0.5597390503436327] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2280239063501357, 0.683831576704979, 0.594708561450243, 0.5782228902727365, 0.5597390503436327, 0.5454509930312633] ***
*** starting iteration: 6; err: [Inf, 1.2280239063501357, 0.683831576704979, 0.594708561450243, 0.5782228902727365, 0.5597390503436327, 0.5454509930312633] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2280239063501357, 0.683831576704979, 0.594708561450243, 0.5782228902727365, 0.5597390503436327, 0.5454509930312633, 0.5398810568451882] ***
*** starting iteration: 7; err: [Inf, 1.2280239063501357, 0.683831576704979, 0.594708561450243, 0.5782228902727365, 0.5597390503436327, 0.5454509930312633, 0.5398810568451882] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2280239063501357, 0.683831576704979, 0.594708561450243, 0.5782228902727365, 0.5597390503436327, 0.5454509930312633, 0.5398810568451882, 0.5384260876476765] ***
*** starting iteration: 8; err: [Inf, 1.2280239063501357, 0.683831576704979, 0.594708561450243, 0.5782228902727365, 0.5597390503436327, 0.5454509930312633, 0.5398810568451882, 0.5384260876476765] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2280239063501357, 0.683831576704979, 0.594708561450243, 0.5782228902727365, 0.5597390503436327, 0.5454509930312633, 0.5398810568451882, 0.5384260876476765, 0.5384260876476765] ***
*** finished computation of 3 references, err: [Inf, 1.2280239063501357, 0.683831576704979, 0.594708561450243, 0.5782228902727365, 0.5597390503436327, 0.5454509930312633, 0.5398810568451882, 0.5384260876476765, 0.5384260876476765] ***
*** center 1: selecting labels [1] (freq >= 2) [from [29, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 35, 11]]
** centroid: 2, normalized-entropy: 0.7935912300117066, [(2, 35), (3, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 2, 23]]
** centroid: 3, normalized-entropy: 0.4021791902022729, [(2, 2), (3, 23)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.3222225637733935] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3222225637733935, 0.9556390932202339] ***
*** starting iteration: 2; err: [Inf, 1.3222225637733935, 0.9556390932202339] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3222225637733935, 0.9556390932202339, 0.7076113431155682] ***
*** starting iteration: 3; err: [Inf, 1.3222225637733935, 0.9556390932202339, 0.7076113431155682] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3222225637733935, 0.9556390932202339, 0.7076113431155682, 0.6053935939073563] ***
*** starting iteration: 4; err: [Inf, 1.3222225637733935, 0.9556390932202339, 0.7076113431155682, 0.6053935939073563] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3222225637733935, 0.9556390932202339, 0.7076113431155682, 0.6053935939073563, 0.5846460956335068] ***
*** starting iteration: 5; err: [Inf, 1.3222225637733935, 0.9556390932202339, 0.7076113431155682, 0.6053935939073563, 0.5846460956335068] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3222225637733935, 0.9556390932202339, 0.7076113431155682, 0.6053935939073563, 0.5846460956335068, 0.5708749763667583] ***
*** starting iteration: 6; err: [Inf, 1.3222225637733935, 0.9556390932202339, 0.7076113431155682, 0.6053935939073563, 0.5846460956335068, 0.5708749763667583] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3222225637733935, 0.9556390932202339, 0.7076113431155682, 0.6053935939073563, 0.5846460956335068, 0.5708749763667583, 0.5690813329070806] ***
*** starting iteration: 7; err: [Inf, 1.3222225637733935, 0.9556390932202339, 0.7076113431155682, 0.6053935939073563, 0.5846460956335068, 0.5708749763667583, 0.5690813329070806] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3222225637733935, 0.9556390932202339, 0.7076113431155682, 0.6053935939073563, 0.5846460956335068, 0.5708749763667583, 0.5690813329070806, 0.5685723336786032] ***
*** finished computation of 3 references, err: [Inf, 1.3222225637733935, 0.9556390932202339, 0.7076113431155682, 0.6053935939073563, 0.5846460956335068, 0.5708749763667583, 0.5690813329070806, 0.5685723336786032] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 33, 7]]
** centroid: 1, normalized-entropy: 0.6690158350565576, [(2, 33), (3, 7)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 27]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8892183502018451] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8892183502018451, 0.5119329827278852] ***
*** starting iteration: 2; err: [Inf, 0.8892183502018451, 0.5119329827278852] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8892183502018451, 0.5119329827278852, 0.5123370855301619] ***
*** finished computation of 3 references, err: [Inf, 0.8892183502018451, 0.5119329827278852, 0.5123370855301619] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 28, 8]]
** centroid: 1, normalized-entropy: 0.7642045065086204, [(2, 28), (3, 8)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 24]]
** centroid: 2, normalized-entropy: 0.3912435636292556, [(2, 2), (3, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.2955610369145871] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.2955610369145871, 0.7956089853122831] ***
*** starting iteration: 2; err: [Inf, 1.2955610369145871, 0.7956089853122831] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.2955610369145871, 0.7956089853122831, 0.6694651432335377] ***
*** starting iteration: 3; err: [Inf, 1.2955610369145871, 0.7956089853122831, 0.6694651432335377] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.2955610369145871, 0.7956089853122831, 0.6694651432335377, 0.608077379912138] ***
*** finished computation of 7 references, err: [Inf, 1.2955610369145871, 0.7956089853122831, 0.6694651432335377, 0.608077379912138] ***
*** center 1: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [2, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 13, 33]]
** centroid: 5, normalized-entropy: 0.8589810370425965, [(2, 13), (3, 33)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 24, 1]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6828406661748886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6828406661748886, 0.4785094492137432] ***
*** starting iteration: 2; err: [Inf, 0.6828406661748886, 0.4785094492137432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6828406661748886, 0.4785094492137432, 0.46814765088260174] ***
*** starting iteration: 3; err: [Inf, 0.6828406661748886, 0.4785094492137432, 0.46814765088260174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6828406661748886, 0.4785094492137432, 0.46814765088260174, 0.46051929868757724] ***
*** finished computation of 7 references, err: [Inf, 0.6828406661748886, 0.4785094492137432, 0.46814765088260174, 0.46051929868757724] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 16, 1]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 3: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 19]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 17, 6]]
** centroid: 7, normalized-entropy: 0.828055725379504, [(2, 17), (3, 6)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6330170372873545] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6330170372873545, 0.5637333942577243] ***
*** starting iteration: 2; err: [Inf, 0.6330170372873545, 0.5637333942577243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6330170372873545, 0.5637333942577243, 0.5551094736531377] ***
*** starting iteration: 3; err: [Inf, 0.6330170372873545, 0.5637333942577243, 0.5551094736531377] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6330170372873545, 0.5637333942577243, 0.5551094736531377, 0.5501848424226046] ***
*** finished computation of 7 references, err: [Inf, 0.6330170372873545, 0.5637333942577243, 0.5551094736531377, 0.5501848424226046] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 4, 28]]
** centroid: 1, normalized-entropy: 0.5435644431995963, [(2, 4), (3, 28)]
*** center 2: selecting labels [1] (freq >= 2) [from [3, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [3, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 26, 4]]
** centroid: 5, normalized-entropy: 0.5665095065529052, [(2, 26), (3, 4)]
*** center 6: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [7, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.3702668671309948] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3702668671309948, 0.817278737872839] ***
*** starting iteration: 2; err: [Inf, 1.3702668671309948, 0.817278737872839] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3702668671309948, 0.817278737872839, 0.7303206984698772] ***
*** starting iteration: 3; err: [Inf, 1.3702668671309948, 0.817278737872839, 0.7303206984698772] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3702668671309948, 0.817278737872839, 0.7303206984698772, 0.6893961654603481] ***
*** finished computation of 3 references, err: [Inf, 1.3702668671309948, 0.817278737872839, 0.7303206984698772, 0.6893961654603481] ***
*** center 1: selecting labels [1] (freq >= 2) [from [29, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 37, 16]]
** centroid: 2, normalized-entropy: 0.8835850861052531, [(2, 37), (3, 16)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 18]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0209696033596993] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0209696033596993, 0.763388663828373] ***
*** starting iteration: 2; err: [Inf, 1.0209696033596993, 0.763388663828373] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0209696033596993, 0.763388663828373, 0.7152099813520908] ***
*** starting iteration: 3; err: [Inf, 1.0209696033596993, 0.763388663828373, 0.7152099813520908] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0209696033596993, 0.763388663828373, 0.7152099813520908, 0.6915659177303314] ***
*** finished computation of 3 references, err: [Inf, 1.0209696033596993, 0.763388663828373, 0.7152099813520908, 0.6915659177303314] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 32, 9]]
** centroid: 2, normalized-entropy: 0.7592757847892834, [(2, 32), (3, 9)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 25]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7790290772914886] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7790290772914886, 0.621835755109787] ***
*** starting iteration: 2; err: [Inf, 0.7790290772914886, 0.621835755109787] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7790290772914886, 0.621835755109787, 0.6157823504507541] ***
*** starting iteration: 3; err: [Inf, 0.7790290772914886, 0.621835755109787, 0.6157823504507541] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7790290772914886, 0.621835755109787, 0.6157823504507541, 0.614409352093935] ***
*** finished computation of 3 references, err: [Inf, 0.7790290772914886, 0.621835755109787, 0.6157823504507541, 0.614409352093935] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 29, 8]]
** centroid: 1, normalized-entropy: 0.7531979910695015, [(2, 29), (3, 8)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 24]]
*** center 3: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8070838885009288] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8070838885009288, 0.5827380852401256] ***
*** starting iteration: 2; err: [Inf, 0.8070838885009288, 0.5827380852401256] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8070838885009288, 0.5827380852401256, 0.5680863100290299] ***
*** starting iteration: 3; err: [Inf, 0.8070838885009288, 0.5827380852401256, 0.5680863100290299] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8070838885009288, 0.5827380852401256, 0.5680863100290299, 0.5504159151017666] ***
*** starting iteration: 4; err: [Inf, 0.8070838885009288, 0.5827380852401256, 0.5680863100290299, 0.5504159151017666] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8070838885009288, 0.5827380852401256, 0.5680863100290299, 0.5504159151017666, 0.5412402731180191] ***
*** starting iteration: 5; err: [Inf, 0.8070838885009288, 0.5827380852401256, 0.5680863100290299, 0.5504159151017666, 0.5412402731180191] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8070838885009288, 0.5827380852401256, 0.5680863100290299, 0.5504159151017666, 0.5412402731180191, 0.5384260876476765] ***
*** starting iteration: 6; err: [Inf, 0.8070838885009288, 0.5827380852401256, 0.5680863100290299, 0.5504159151017666, 0.5412402731180191, 0.5384260876476765] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8070838885009288, 0.5827380852401256, 0.5680863100290299, 0.5504159151017666, 0.5412402731180191, 0.5384260876476765, 0.5384260876476765] ***
*** finished computation of 3 references, err: [Inf, 0.8070838885009288, 0.5827380852401256, 0.5680863100290299, 0.5504159151017666, 0.5412402731180191, 0.5384260876476765, 0.5384260876476765] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 35, 11]]
** centroid: 1, normalized-entropy: 0.7935912300117066, [(2, 35), (3, 11)]
*** center 2: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 23]]
** centroid: 3, normalized-entropy: 0.4021791902022729, [(2, 2), (3, 23)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9405212364345789] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9405212364345789, 0.57230254329741] ***
*** starting iteration: 2; err: [Inf, 0.9405212364345789, 0.57230254329741] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9405212364345789, 0.57230254329741, 0.5690813329070806] ***
*** starting iteration: 3; err: [Inf, 0.9405212364345789, 0.57230254329741, 0.5690813329070806] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9405212364345789, 0.57230254329741, 0.5690813329070806, 0.5685723336786032] ***
*** finished computation of 3 references, err: [Inf, 0.9405212364345789, 0.57230254329741, 0.5690813329070806, 0.5685723336786032] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 27]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 33, 7]]
** centroid: 3, normalized-entropy: 0.6690158350565576, [(2, 33), (3, 7)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8023576706647872] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8023576706647872, 0.5390302083641291] ***
*** starting iteration: 2; err: [Inf, 0.8023576706647872, 0.5390302083641291] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8023576706647872, 0.5390302083641291, 0.5187985742837191] ***
*** starting iteration: 3; err: [Inf, 0.8023576706647872, 0.5390302083641291, 0.5187985742837191] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8023576706647872, 0.5390302083641291, 0.5187985742837191, 0.5145620211958886] ***
*** starting iteration: 4; err: [Inf, 0.8023576706647872, 0.5390302083641291, 0.5187985742837191, 0.5145620211958886] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8023576706647872, 0.5390302083641291, 0.5187985742837191, 0.5145620211958886, 0.5145620211958886] ***
*** finished computation of 3 references, err: [Inf, 0.8023576706647872, 0.5390302083641291, 0.5187985742837191, 0.5145620211958886, 0.5145620211958886] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 30, 9]]
** centroid: 1, normalized-entropy: 0.7793498372920851, [(2, 30), (3, 9)]
*** center 2: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5694134332239628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5694134332239628, 0.38391010120511054] ***
*** starting iteration: 2; err: [Inf, 0.5694134332239628, 0.38391010120511054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5694134332239628, 0.38391010120511054, 0.37823462165892124] ***
*** starting iteration: 3; err: [Inf, 0.5694134332239628, 0.38391010120511054, 0.37823462165892124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5694134332239628, 0.38391010120511054, 0.37823462165892124, 0.37604326002299787] ***
*** starting iteration: 4; err: [Inf, 0.5694134332239628, 0.38391010120511054, 0.37823462165892124, 0.37604326002299787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5694134332239628, 0.38391010120511054, 0.37823462165892124, 0.37604326002299787, 0.37604326002299787] ***
*** finished computation of 7 references, err: [Inf, 0.5694134332239628, 0.38391010120511054, 0.37823462165892124, 0.37604326002299787, 0.37604326002299787] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 2, 14]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(2, 2), (3, 14)]
*** center 5: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 13, 11]]
** centroid: 7, normalized-entropy: 0.9949848281859699, [(2, 13), (3, 11)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6431145180761814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6431145180761814, 0.4244896415621042] ***
*** starting iteration: 2; err: [Inf, 0.6431145180761814, 0.4244896415621042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6431145180761814, 0.4244896415621042, 0.4022587479650974] ***
*** starting iteration: 3; err: [Inf, 0.6431145180761814, 0.4244896415621042, 0.4022587479650974] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6431145180761814, 0.4244896415621042, 0.4022587479650974, 0.38360554464161395] ***
*** starting iteration: 4; err: [Inf, 0.6431145180761814, 0.4244896415621042, 0.4022587479650974, 0.38360554464161395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6431145180761814, 0.4244896415621042, 0.4022587479650974, 0.38360554464161395, 0.37723394222557544] ***
*** starting iteration: 5; err: [Inf, 0.6431145180761814, 0.4244896415621042, 0.4022587479650974, 0.38360554464161395, 0.37723394222557544] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6431145180761814, 0.4244896415621042, 0.4022587479650974, 0.38360554464161395, 0.37723394222557544, 0.37743539072573185] ***
*** finished computation of 7 references, err: [Inf, 0.6431145180761814, 0.4244896415621042, 0.4022587479650974, 0.38360554464161395, 0.37723394222557544, 0.37743539072573185] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 17, 5]]
** centroid: 1, normalized-entropy: 0.7732266742876346, [(2, 17), (3, 5)]
*** center 2: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 6: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 7, 1]]
** centroid: 7, normalized-entropy: 0.5435644431995963, [(2, 7), (3, 1)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5756778465211392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5756778465211392, 0.3884090605378151] ***
*** starting iteration: 2; err: [Inf, 0.5756778465211392, 0.3884090605378151] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5756778465211392, 0.3884090605378151, 0.3743893527984619] ***
*** starting iteration: 3; err: [Inf, 0.5756778465211392, 0.3884090605378151, 0.3743893527984619] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5756778465211392, 0.3884090605378151, 0.3743893527984619, 0.3692135509848595] ***
*** starting iteration: 4; err: [Inf, 0.5756778465211392, 0.3884090605378151, 0.3743893527984619, 0.3692135509848595] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5756778465211392, 0.3884090605378151, 0.3743893527984619, 0.3692135509848595, 0.36832373686134817] ***
*** finished computation of 7 references, err: [Inf, 0.5756778465211392, 0.3884090605378151, 0.3743893527984619, 0.3692135509848595, 0.36832373686134817] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 17, 8]]
** centroid: 1, normalized-entropy: 0.9043814577244941, [(2, 17), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [6, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5563487094640732] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5563487094640732, 0.4040713034570217] ***
*** finished computation of 7 references, err: [Inf, 0.5563487094640732, 0.4040713034570217] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 8, 18]]
** centroid: 1, normalized-entropy: 0.8904916402194913, [(2, 8), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 20, 7]]
** centroid: 5, normalized-entropy: 0.8256265261578954, [(2, 20), (3, 7)]
*** center 6: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5936793230473996] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5936793230473996, 0.4508739238977432] ***
*** finished computation of 7 references, err: [Inf, 0.5936793230473996, 0.4508739238977432] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 26]]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 19, 6]]
** centroid: 4, normalized-entropy: 0.7950402793845225, [(2, 19), (3, 6)]
*** center 5: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 6, 2]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(2, 6), (3, 2)]
*** center 7: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5597148171067238] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5597148171067238, 0.4048087981343269] ***
*** finished computation of 7 references, err: [Inf, 0.5597148171067238, 0.4048087981343269] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 18, 2]]
** centroid: 4, normalized-entropy: 0.46899559358928133, [(2, 18), (3, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 6, 9]]
** centroid: 6, normalized-entropy: 0.9709505944546688, [(2, 6), (3, 9)]
*** center 7: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6222720189392567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6222720189392567, 0.4102997544407845] ***
*** starting iteration: 2; err: [Inf, 0.6222720189392567, 0.4102997544407845] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6222720189392567, 0.4102997544407845, 0.39627095207571983] ***
*** starting iteration: 3; err: [Inf, 0.6222720189392567, 0.4102997544407845, 0.39627095207571983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6222720189392567, 0.4102997544407845, 0.39627095207571983, 0.3902990944683552] ***
*** starting iteration: 4; err: [Inf, 0.6222720189392567, 0.4102997544407845, 0.39627095207571983, 0.3902990944683552] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6222720189392567, 0.4102997544407845, 0.39627095207571983, 0.3902990944683552, 0.39024379253387453] ***
*** finished computation of 7 references, err: [Inf, 0.6222720189392567, 0.4102997544407845, 0.39627095207571983, 0.3902990944683552, 0.39024379253387453] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 9, 9]]
** centroid: 1, normalized-entropy: 1.0, [(2, 9), (3, 9)]
*** center 2: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 21, 1]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 7, 13]]
** centroid: 5, normalized-entropy: 0.9340680553754911, [(2, 7), (3, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5998793964087963] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5998793964087963, 0.4320892943441868] ***
*** starting iteration: 2; err: [Inf, 0.5998793964087963, 0.4320892943441868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5998793964087963, 0.4320892943441868, 0.4108037129044533] ***
*** starting iteration: 3; err: [Inf, 0.5998793964087963, 0.4320892943441868, 0.4108037129044533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5998793964087963, 0.4320892943441868, 0.4108037129044533, 0.396853281930089] ***
*** starting iteration: 4; err: [Inf, 0.5998793964087963, 0.4320892943441868, 0.4108037129044533, 0.396853281930089] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5998793964087963, 0.4320892943441868, 0.4108037129044533, 0.396853281930089, 0.3924522588402033] ***
*** starting iteration: 5; err: [Inf, 0.5998793964087963, 0.4320892943441868, 0.4108037129044533, 0.396853281930089, 0.3924522588402033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5998793964087963, 0.4320892943441868, 0.4108037129044533, 0.396853281930089, 0.3924522588402033, 0.3921590258181095] ***
*** finished computation of 7 references, err: [Inf, 0.5998793964087963, 0.4320892943441868, 0.4108037129044533, 0.396853281930089, 0.3924522588402033, 0.3921590258181095] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 18]]
*** center 2: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 14, 1]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 10]]
*** center 5: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 19, 5]]
** centroid: 6, normalized-entropy: 0.7382848661434506, [(2, 19), (3, 5)]
*** center 7: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.46974269092082976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46974269092082976, 0.367581599727273] ***
*** starting iteration: 2; err: [Inf, 0.46974269092082976, 0.367581599727273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46974269092082976, 0.367581599727273, 0.36039465375244617] ***
*** starting iteration: 3; err: [Inf, 0.46974269092082976, 0.367581599727273, 0.36039465375244617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46974269092082976, 0.367581599727273, 0.36039465375244617, 0.35822695910930635] ***
*** starting iteration: 4; err: [Inf, 0.46974269092082976, 0.367581599727273, 0.36039465375244617, 0.35822695910930635] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46974269092082976, 0.367581599727273, 0.36039465375244617, 0.35822695910930635, 0.35885863199830054] ***
*** finished computation of 7 references, err: [Inf, 0.46974269092082976, 0.367581599727273, 0.36039465375244617, 0.35822695910930635, 0.35885863199830054] ***
*** center 1: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 14, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
*** center 5: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 12, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 4, 11]]
** centroid: 7, normalized-entropy: 0.8366407419411671, [(2, 4), (3, 11)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5924322794377804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5924322794377804, 0.4399799637869] ***
*** starting iteration: 2; err: [Inf, 0.5924322794377804, 0.4399799637869] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5924322794377804, 0.4399799637869, 0.4316446977108717] ***
*** starting iteration: 3; err: [Inf, 0.5924322794377804, 0.4399799637869, 0.4316446977108717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5924322794377804, 0.4399799637869, 0.4316446977108717, 0.42946933902800083] ***
*** starting iteration: 4; err: [Inf, 0.5924322794377804, 0.4399799637869, 0.4316446977108717, 0.42946933902800083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5924322794377804, 0.4399799637869, 0.4316446977108717, 0.42946933902800083, 0.42946933902800083] ***
*** finished computation of 7 references, err: [Inf, 0.5924322794377804, 0.4399799637869, 0.4316446977108717, 0.42946933902800083, 0.42946933902800083] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 1, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 3: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 24]]
*** center 5: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7356477604806423] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7356477604806423, 0.4684570734202862] ***
*** starting iteration: 2; err: [Inf, 0.7356477604806423, 0.4684570734202862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7356477604806423, 0.4684570734202862, 0.4569527278095484] ***
*** starting iteration: 3; err: [Inf, 0.7356477604806423, 0.4684570734202862, 0.4569527278095484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7356477604806423, 0.4684570734202862, 0.4569527278095484, 0.4548500473052263] ***
*** starting iteration: 4; err: [Inf, 0.7356477604806423, 0.4684570734202862, 0.4569527278095484, 0.4548500473052263] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7356477604806423, 0.4684570734202862, 0.4569527278095484, 0.4548500473052263, 0.45438757732510565] ***
*** finished computation of 7 references, err: [Inf, 0.7356477604806423, 0.4684570734202862, 0.4569527278095484, 0.4548500473052263, 0.45438757732510565] ***
*** center 1: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 11, 1]]
** centroid: 3, normalized-entropy: 0.4138168503036336, [(2, 11), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 14, 5]]
** centroid: 4, normalized-entropy: 0.8314743880097292, [(2, 14), (3, 5)]
*** center 5: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5651103229820729] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5651103229820729, 0.4412405428290367] ***
*** starting iteration: 2; err: [Inf, 0.5651103229820729, 0.4412405428290367] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5651103229820729, 0.4412405428290367, 0.4247207887470722] ***
*** starting iteration: 3; err: [Inf, 0.5651103229820729, 0.4412405428290367, 0.4247207887470722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5651103229820729, 0.4412405428290367, 0.4247207887470722, 0.42048862636089324] ***
*** starting iteration: 4; err: [Inf, 0.5651103229820729, 0.4412405428290367, 0.4247207887470722, 0.42048862636089324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5651103229820729, 0.4412405428290367, 0.4247207887470722, 0.42048862636089324, 0.4200862993299961] ***
*** finished computation of 7 references, err: [Inf, 0.5651103229820729, 0.4412405428290367, 0.4247207887470722, 0.42048862636089324, 0.4200862993299961] ***
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 11]]
** centroid: 7, normalized-entropy: 0.7495952572594798, [(2, 3), (3, 11)]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 16)
[0.9733333333333333, 0.9733333333333333, 0.9666666666666667, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9066666666666666, 0.9066666666666666, 0.8933333333333334, 0.8866666666666666, 0.8533333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.6, 1) => 0.9733333333333333
finished with 18
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.5750262889266015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5750262889266015, 0.3741017945110798] ***
*** finished computation of 7 references, err: [Inf, 0.5750262889266015, 0.3741017945110798] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 16, 2]]
** centroid: 1, normalized-entropy: 0.5032583347756457, [(2, 16), (3, 2)]
*** center 2: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 14, 9]]
** centroid: 4, normalized-entropy: 0.9656361333706099, [(2, 14), (3, 9)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
*** center 7: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6297774985432625] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6297774985432625, 0.3885088614374399] ***
*** finished computation of 7 references, err: [Inf, 0.6297774985432625, 0.3885088614374399] ***
*** center 1: selecting labels [1] (freq >= 2) [from [21, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 11, 1]]
*** center 4: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 16, 6]]
** centroid: 5, normalized-entropy: 0.8453509366224364, [(2, 16), (3, 6)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 18]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.473750983774662] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.473750983774662, 0.3782890785485506] ***
*** finished computation of 7 references, err: [Inf, 0.473750983774662, 0.3782890785485506] ***
*** center 1: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 19, 1]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 13]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 5, 13]]
** centroid: 6, normalized-entropy: 0.8524051786494784, [(2, 5), (3, 13)]
*** center 7: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.66005565315485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.66005565315485, 0.4572110828012228] ***
*** finished computation of 7 references, err: [Inf, 0.66005565315485, 0.4572110828012228] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 19]]
** centroid: 1, normalized-entropy: 0.5746356978376794, [(2, 3), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 10]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 5, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 9, 4]]
** centroid: 6, normalized-entropy: 0.8904916402194913, [(2, 9), (3, 4)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 20, 1]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7625700831413269] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7625700831413269, 0.49595181152224543] ***
*** finished computation of 7 references, err: [Inf, 0.7625700831413269, 0.49595181152224543] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 3: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 3, 14]]
** centroid: 4, normalized-entropy: 0.6722948170756378, [(2, 3), (3, 14)]
*** center 5: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 22, 1]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 1, 12]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5894503892958164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5894503892958164, 0.47726746156811717] ***
*** finished computation of 7 references, err: [Inf, 0.5894503892958164, 0.47726746156811717] ***
*** center 1: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 17, 8]]
** centroid: 3, normalized-entropy: 0.9043814577244941, [(2, 17), (3, 8)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [7, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 18)
[0.9733333333333333, 0.9733333333333333, 0.9666666666666667, 0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9066666666666666, 0.9066666666666666, 0.8933333333333334, 0.8866666666666666, 0.8533333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.6, 1) => 0.9733333333333333
finished with 20
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.7279707089066505] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7279707089066505, 0.5545769774913788] ***
*** starting iteration: 2; err: [Inf, 0.7279707089066505, 0.5545769774913788] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7279707089066505, 0.5545769774913788, 0.5412266629189253] ***
*** starting iteration: 3; err: [Inf, 0.7279707089066505, 0.5545769774913788, 0.5412266629189253] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7279707089066505, 0.5545769774913788, 0.5412266629189253, 0.5384260876476765] ***
*** starting iteration: 4; err: [Inf, 0.7279707089066505, 0.5545769774913788, 0.5412266629189253, 0.5384260876476765] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7279707089066505, 0.5545769774913788, 0.5412266629189253, 0.5384260876476765, 0.5384260876476765] ***
*** finished computation of 3 references, err: [Inf, 0.7279707089066505, 0.5545769774913788, 0.5412266629189253, 0.5384260876476765, 0.5384260876476765] ***
*** center 1: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 23]]
** centroid: 2, normalized-entropy: 0.4021791902022729, [(2, 2), (3, 23)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 35, 11]]
** centroid: 3, normalized-entropy: 0.7935912300117066, [(2, 35), (3, 11)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.9324813796579838] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.9324813796579838, 1.124650590866804] ***
*** starting iteration: 2; err: [Inf, 1.9324813796579838, 1.124650590866804] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.9324813796579838, 1.124650590866804, 0.7847517611086369] ***
*** starting iteration: 3; err: [Inf, 1.9324813796579838, 1.124650590866804, 0.7847517611086369] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.9324813796579838, 1.124650590866804, 0.7847517611086369, 0.5958082546293736] ***
*** starting iteration: 4; err: [Inf, 1.9324813796579838, 1.124650590866804, 0.7847517611086369, 0.5958082546293736] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.9324813796579838, 1.124650590866804, 0.7847517611086369, 0.5958082546293736, 0.5751312276721001] ***
*** starting iteration: 5; err: [Inf, 1.9324813796579838, 1.124650590866804, 0.7847517611086369, 0.5958082546293736, 0.5751312276721001] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.9324813796579838, 1.124650590866804, 0.7847517611086369, 0.5958082546293736, 0.5751312276721001, 0.5693635740876197] ***
*** starting iteration: 6; err: [Inf, 1.9324813796579838, 1.124650590866804, 0.7847517611086369, 0.5958082546293736, 0.5751312276721001, 0.5693635740876197] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.9324813796579838, 1.124650590866804, 0.7847517611086369, 0.5958082546293736, 0.5751312276721001, 0.5693635740876197, 0.5690813329070806] ***
*** finished computation of 3 references, err: [Inf, 1.9324813796579838, 1.124650590866804, 0.7847517611086369, 0.5958082546293736, 0.5751312276721001, 0.5693635740876197, 0.5690813329070806] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 27]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 33, 7]]
** centroid: 3, normalized-entropy: 0.6690158350565576, [(2, 33), (3, 7)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.819278210029006] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.819278210029006, 0.6330345796793699] ***
*** starting iteration: 2; err: [Inf, 0.819278210029006, 0.6330345796793699] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.819278210029006, 0.6330345796793699, 0.6181538791209459] ***
*** starting iteration: 3; err: [Inf, 0.819278210029006, 0.6330345796793699, 0.6181538791209459] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.819278210029006, 0.6330345796793699, 0.6181538791209459, 0.6175597745925188] ***
*** finished computation of 3 references, err: [Inf, 0.819278210029006, 0.6330345796793699, 0.6181538791209459, 0.6175597745925188] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 29, 32]]
** centroid: 1, normalized-entropy: 0.9982545693874832, [(2, 29), (3, 32)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [20, 1, 0]]
** centroid: 3, normalized-entropy: 0.2761954276479391, [(1, 20), (2, 1)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.5897496895492076] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5897496895492076, 0.9246868628263474] ***
*** starting iteration: 2; err: [Inf, 1.5897496895492076, 0.9246868628263474] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5897496895492076, 0.9246868628263474, 0.7535427796840668] ***
*** starting iteration: 3; err: [Inf, 1.5897496895492076, 0.9246868628263474, 0.7535427796840668] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5897496895492076, 0.9246868628263474, 0.7535427796840668, 0.7044518239796161] ***
*** starting iteration: 4; err: [Inf, 1.5897496895492076, 0.9246868628263474, 0.7535427796840668, 0.7044518239796161] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5897496895492076, 0.9246868628263474, 0.7535427796840668, 0.7044518239796161, 0.6672399950027466] ***
*** starting iteration: 5; err: [Inf, 1.5897496895492076, 0.9246868628263474, 0.7535427796840668, 0.7044518239796161, 0.6672399950027466] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5897496895492076, 0.9246868628263474, 0.7535427796840668, 0.7044518239796161, 0.6672399950027466, 0.6535751382261514] ***
*** starting iteration: 6; err: [Inf, 1.5897496895492076, 0.9246868628263474, 0.7535427796840668, 0.7044518239796161, 0.6672399950027466, 0.6535751382261514] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5897496895492076, 0.9246868628263474, 0.7535427796840668, 0.7044518239796161, 0.6672399950027466, 0.6535751382261514, 0.6499475482851267] ***
*** starting iteration: 7; err: [Inf, 1.5897496895492076, 0.9246868628263474, 0.7535427796840668, 0.7044518239796161, 0.6672399950027466, 0.6535751382261514, 0.6499475482851267] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5897496895492076, 0.9246868628263474, 0.7535427796840668, 0.7044518239796161, 0.6672399950027466, 0.6535751382261514, 0.6499475482851267, 0.6493706171959639] ***
*** finished computation of 3 references, err: [Inf, 1.5897496895492076, 0.9246868628263474, 0.7535427796840668, 0.7044518239796161, 0.6672399950027466, 0.6535751382261514, 0.6499475482851267, 0.6493706171959639] ***
*** center 1: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 35, 12]]
** centroid: 2, normalized-entropy: 0.8196004346196011, [(2, 35), (3, 12)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 22]]
** centroid: 3, normalized-entropy: 0.4138168503036336, [(2, 2), (3, 22)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.761799418181181] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.761799418181181, 1.105267504453659] ***
*** starting iteration: 2; err: [Inf, 1.761799418181181, 1.105267504453659] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.761799418181181, 1.105267504453659, 0.8143328541517257] ***
*** starting iteration: 3; err: [Inf, 1.761799418181181, 1.105267504453659, 0.8143328541517257] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.761799418181181, 1.105267504453659, 0.8143328541517257, 0.6952121259272098] ***
*** starting iteration: 4; err: [Inf, 1.761799418181181, 1.105267504453659, 0.8143328541517257, 0.6952121259272098] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.761799418181181, 1.105267504453659, 0.8143328541517257, 0.6952121259272098, 0.6747625656425953] ***
*** starting iteration: 5; err: [Inf, 1.761799418181181, 1.105267504453659, 0.8143328541517257, 0.6952121259272098, 0.6747625656425953] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.761799418181181, 1.105267504453659, 0.8143328541517257, 0.6952121259272098, 0.6747625656425953, 0.6724150417000055] ***
*** starting iteration: 6; err: [Inf, 1.761799418181181, 1.105267504453659, 0.8143328541517257, 0.6952121259272098, 0.6747625656425953, 0.6724150417000055] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.761799418181181, 1.105267504453659, 0.8143328541517257, 0.6952121259272098, 0.6747625656425953, 0.6724150417000055, 0.6715605083853007] ***
*** finished computation of 3 references, err: [Inf, 1.761799418181181, 1.105267504453659, 0.8143328541517257, 0.6952121259272098, 0.6747625656425953, 0.6724150417000055, 0.6715605083853007] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 31, 7]]
** centroid: 1, normalized-entropy: 0.6892019851173655, [(2, 31), (3, 7)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 27]]
** centroid: 3, normalized-entropy: 0.36205125173399805, [(2, 2), (3, 27)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8655239297449588] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8655239297449588, 0.7489088983833789] ***
*** starting iteration: 2; err: [Inf, 0.8655239297449588, 0.7489088983833789] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8655239297449588, 0.7489088983833789, 0.749991147145629] ***
*** finished computation of 3 references, err: [Inf, 0.8655239297449588, 0.7489088983833789, 0.749991147145629] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 29, 32]]
** centroid: 1, normalized-entropy: 0.9982545693874832, [(2, 29), (3, 32)]
*** center 2: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [19, 1, 0]]
** centroid: 3, normalized-entropy: 0.2863969571159561, [(1, 19), (2, 1)]
finished with 4 centroids; started with 3
generating 4 configurations using top 4 configurations, starting with 20)
[0.9733333333333333, 0.9733333333333333, 0.9666666666666667, 0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9133333333333332, 0.9066666666666666, 0.9066666666666666, 0.9066666666666666, 0.8933333333333334, 0.8866666666666666, 0.8533333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.6, 1) => 0.9733333333333333
finished with 20
iteration 4 finished
generating 4 configurations using top 4 configurations, starting with 20)
[0.9733333333333333, 0.9733333333333333, 0.9666666666666667, 0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9133333333333332, 0.9066666666666666, 0.9066666666666666, 0.9066666666666666, 0.8933333333333334, 0.8866666666666666, 0.8533333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.6, 1) => 0.9733333333333333
finished with 20
iteration 5 finished
generating 4 configurations using top 4 configurations, starting with 20)
[0.9733333333333333, 0.9733333333333333, 0.9666666666666667, 0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9133333333333332, 0.9066666666666666, 0.9066666666666666, 0.9066666666666666, 0.8933333333333334, 0.8866666666666666, 0.8533333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.6, 1) => 0.9733333333333333
finished with 20
iteration 6 finished
generating 4 configurations using top 4 configurations, starting with 20)
[0.9733333333333333, 0.9733333333333333, 0.9666666666666667, 0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9133333333333332, 0.9066666666666666, 0.9066666666666666, 0.9066666666666666, 0.8933333333333334, 0.8866666666666666, 0.8533333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.6, 1) => 0.9733333333333333
finished with 21
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.5447510218620301] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5447510218620301, 0.4271193950623274] ***
*** starting iteration: 2; err: [Inf, 0.5447510218620301, 0.4271193950623274] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5447510218620301, 0.4271193950623274, 0.410288502946496] ***
*** starting iteration: 3; err: [Inf, 0.5447510218620301, 0.4271193950623274, 0.410288502946496] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5447510218620301, 0.4271193950623274, 0.410288502946496, 0.3995970067381859] ***
*** starting iteration: 4; err: [Inf, 0.5447510218620301, 0.4271193950623274, 0.410288502946496, 0.3995970067381859] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5447510218620301, 0.4271193950623274, 0.410288502946496, 0.3995970067381859, 0.397827065885067] ***
*** starting iteration: 5; err: [Inf, 0.5447510218620301, 0.4271193950623274, 0.410288502946496, 0.3995970067381859, 0.397827065885067] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5447510218620301, 0.4271193950623274, 0.410288502946496, 0.3995970067381859, 0.397827065885067, 0.39796222910284995] ***
*** finished computation of 7 references, err: [Inf, 0.5447510218620301, 0.4271193950623274, 0.410288502946496, 0.3995970067381859, 0.397827065885067, 0.39796222910284995] ***
*** center 1: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 2, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 7, 16]]
** centroid: 4, normalized-entropy: 0.8865408928220899, [(2, 7), (3, 16)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6315225461125373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6315225461125373, 0.44046867564320563] ***
*** starting iteration: 2; err: [Inf, 0.6315225461125373, 0.44046867564320563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6315225461125373, 0.44046867564320563, 0.4248890777677298] ***
*** starting iteration: 3; err: [Inf, 0.6315225461125373, 0.44046867564320563, 0.4248890777677298] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6315225461125373, 0.44046867564320563, 0.4248890777677298, 0.422113154605031] ***
*** starting iteration: 4; err: [Inf, 0.6315225461125373, 0.44046867564320563, 0.4248890777677298, 0.422113154605031] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6315225461125373, 0.44046867564320563, 0.4248890777677298, 0.422113154605031, 0.42243691451847554] ***
*** finished computation of 7 references, err: [Inf, 0.6315225461125373, 0.44046867564320563, 0.4248890777677298, 0.422113154605031, 0.42243691451847554] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 12, 1]]
** centroid: 3, normalized-entropy: 0.3912435636292556, [(2, 12), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 14, 5]]
** centroid: 4, normalized-entropy: 0.8314743880097292, [(2, 14), (3, 5)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 6, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5404956921935081] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5404956921935081, 0.44504889503121375] ***
*** starting iteration: 2; err: [Inf, 0.5404956921935081, 0.44504889503121375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5404956921935081, 0.44504889503121375, 0.4396396401524544] ***
*** starting iteration: 3; err: [Inf, 0.5404956921935081, 0.44504889503121375, 0.4396396401524544] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5404956921935081, 0.44504889503121375, 0.4396396401524544, 0.4395306067168713] ***
*** finished computation of 7 references, err: [Inf, 0.5404956921935081, 0.44504889503121375, 0.4396396401524544, 0.4395306067168713] ***
*** center 1: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 30, 9]]
** centroid: 2, normalized-entropy: 0.7793498372920851, [(2, 30), (3, 9)]
*** center 3: selecting labels [1] (freq >= 1) [from [6, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 21)
[0.9733333333333333, 0.9733333333333333, 0.9733333333333333, 0.9666666666666667, 0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9133333333333332, 0.9066666666666666, 0.9066666666666666, 0.9066666666666666, 0.8933333333333334, 0.8866666666666666, 0.8533333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.6, 1) => 0.9733333333333333
finished with 22
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.625820669233799] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.625820669233799, 0.44215833127498627] ***
*** starting iteration: 2; err: [Inf, 0.625820669233799, 0.44215833127498627] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.625820669233799, 0.44215833127498627, 0.43203561037778854] ***
*** starting iteration: 3; err: [Inf, 0.625820669233799, 0.44215833127498627, 0.43203561037778854] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.625820669233799, 0.44215833127498627, 0.43203561037778854, 0.43032026931643486] ***
*** starting iteration: 4; err: [Inf, 0.625820669233799, 0.44215833127498627, 0.43203561037778854, 0.43032026931643486] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.625820669233799, 0.44215833127498627, 0.43203561037778854, 0.43032026931643486, 0.43032026931643486] ***
*** finished computation of 7 references, err: [Inf, 0.625820669233799, 0.44215833127498627, 0.43203561037778854, 0.43032026931643486, 0.43032026931643486] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
*** center 2: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 20, 1]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 8, 12]]
** centroid: 4, normalized-entropy: 0.9709505944546688, [(2, 8), (3, 12)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 9, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6652272059023381] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6652272059023381, 0.48443563416600227] ***
*** starting iteration: 2; err: [Inf, 0.6652272059023381, 0.48443563416600227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6652272059023381, 0.48443563416600227, 0.4649883210659027] ***
*** starting iteration: 3; err: [Inf, 0.6652272059023381, 0.48443563416600227, 0.4649883210659027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6652272059023381, 0.48443563416600227, 0.4649883210659027, 0.4635563139617443] ***
*** starting iteration: 4; err: [Inf, 0.6652272059023381, 0.48443563416600227, 0.4649883210659027, 0.4635563139617443] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6652272059023381, 0.48443563416600227, 0.4649883210659027, 0.4635563139617443, 0.4635563139617443] ***
*** finished computation of 7 references, err: [Inf, 0.6652272059023381, 0.48443563416600227, 0.4649883210659027, 0.4635563139617443, 0.4635563139617443] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 16, 1]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 10]]
*** center 3: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 18]]
*** center 5: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 17, 5]]
** centroid: 6, normalized-entropy: 0.7732266742876346, [(2, 17), (3, 5)]
*** center 7: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6564653421938419] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6564653421938419, 0.4702335229516029] ***
*** starting iteration: 2; err: [Inf, 0.6564653421938419, 0.4702335229516029] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6564653421938419, 0.4702335229516029, 0.46260150261223315] ***
*** starting iteration: 3; err: [Inf, 0.6564653421938419, 0.4702335229516029, 0.46260150261223315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6564653421938419, 0.4702335229516029, 0.46260150261223315, 0.44582135520875454] ***
*** starting iteration: 4; err: [Inf, 0.6564653421938419, 0.4702335229516029, 0.46260150261223315, 0.44582135520875454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6564653421938419, 0.4702335229516029, 0.46260150261223315, 0.44582135520875454, 0.4391857359558344] ***
*** starting iteration: 5; err: [Inf, 0.6564653421938419, 0.4702335229516029, 0.46260150261223315, 0.44582135520875454, 0.4391857359558344] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6564653421938419, 0.4702335229516029, 0.46260150261223315, 0.44582135520875454, 0.4391857359558344, 0.4359433542191982] ***
*** starting iteration: 6; err: [Inf, 0.6564653421938419, 0.4702335229516029, 0.46260150261223315, 0.44582135520875454, 0.4391857359558344, 0.4359433542191982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6564653421938419, 0.4702335229516029, 0.46260150261223315, 0.44582135520875454, 0.4391857359558344, 0.4359433542191982, 0.4350020538270474] ***
*** finished computation of 7 references, err: [Inf, 0.6564653421938419, 0.4702335229516029, 0.46260150261223315, 0.44582135520875454, 0.4391857359558344, 0.4359433542191982, 0.4350020538270474] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 16, 9]]
** centroid: 1, normalized-entropy: 0.9426831892554921, [(2, 16), (3, 9)]
*** center 2: selecting labels [1] (freq >= 2) [from [21, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 19]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 14, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 22)
[0.9733333333333333, 0.9733333333333333, 0.9733333333333333, 0.9733333333333333, 0.9666666666666667, 0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9133333333333332, 0.9066666666666666, 0.9066666666666666, 0.9066666666666666, 0.8933333333333334, 0.8866666666666666, 0.8533333333333334]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.6, 1) => 0.9733333333333333
finished with 23
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.9747625228762626] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9747625228762626, 0.6864566663652658] ***
*** starting iteration: 2; err: [Inf, 0.9747625228762626, 0.6864566663652658] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9747625228762626, 0.6864566663652658, 0.6614743911474943] ***
*** starting iteration: 3; err: [Inf, 0.9747625228762626, 0.6864566663652658, 0.6614743911474943] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9747625228762626, 0.6864566663652658, 0.6614743911474943, 0.6517455696314574] ***
*** finished computation of 3 references, err: [Inf, 0.9747625228762626, 0.6864566663652658, 0.6614743911474943, 0.6517455696314574] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 35, 12]]
** centroid: 1, normalized-entropy: 0.8196004346196011, [(2, 35), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [29, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 2, 22]]
** centroid: 3, normalized-entropy: 0.4138168503036336, [(2, 2), (3, 22)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1411353704333305] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1411353704333305, 0.6871272302418947] ***
*** starting iteration: 2; err: [Inf, 1.1411353704333305, 0.6871272302418947] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1411353704333305, 0.6871272302418947, 0.6745797800272704] ***
*** starting iteration: 3; err: [Inf, 1.1411353704333305, 0.6871272302418947, 0.6745797800272704] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1411353704333305, 0.6871272302418947, 0.6745797800272704, 0.6724150417000055] ***
*** finished computation of 3 references, err: [Inf, 1.1411353704333305, 0.6871272302418947, 0.6745797800272704, 0.6724150417000055] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 27]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 32, 7]]
** centroid: 3, normalized-entropy: 0.6789538995185759, [(2, 32), (3, 7)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.833911153525114] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.833911153525114, 0.6527060647308827] ***
*** starting iteration: 2; err: [Inf, 0.833911153525114, 0.6527060647308827] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.833911153525114, 0.6527060647308827, 0.6203805600106717] ***
*** starting iteration: 3; err: [Inf, 0.833911153525114, 0.6527060647308827, 0.6203805600106717] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.833911153525114, 0.6527060647308827, 0.6203805600106717, 0.6170335211604834] ***
*** finished computation of 3 references, err: [Inf, 0.833911153525114, 0.6527060647308827, 0.6203805600106717, 0.6170335211604834] ***
*** center 1: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 23]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 29, 9]]
** centroid: 3, normalized-entropy: 0.7897492536625221, [(2, 29), (3, 9)]
finished with 4 centroids; started with 3
[ Info: ========== BEST MODEL ==========
[ Info: (AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.6, 1), 0.9733333333333333)
[ Info: AKNC{Array{Float64,1}}[AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[4.975862068965517, 3.372413793103448, 1.4379310344827585, 0.22413793103448282], [5.766666666666666, 2.622222222222222, 4.888888888888889, 1.7888888888888888], [5.415384615384615, 2.4615384615384617, 3.661538461538461, 1.1307692307692307], [6.671428571428572, 3.071428571428572, 4.657142857142857, 1.4571428571428573], [6.4437500000000005, 2.89375, 5.287499999999999, 1.9500000000000004], [5.85625, 2.875, 4.3375, 1.34375], [7.242857142857145, 3.3857142857142857, 6.07142857142857, 2.1142857142857143], [7.6000000000000005, 2.8000000000000003, 6.366666666666667, 2.1666666666666665]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1, 3, 2, 2, 3, 2, 3, 3], 3), KCenters.var"#fun#72"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.6, 1)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[5.34, 2.46, 3.46, 1.04], [5.051515151515151, 3.475757575757576, 1.4757575757575754, 0.25454545454545463], [5.661538461538462, 2.638461538461539, 4.199999999999999, 1.3076923076923077], [6.314285714285714, 2.914285714285714, 4.65, 1.4714285714285713], [6.04, 2.8, 5.0, 1.78], [6.418181818181818, 3.1181818181818177, 5.618181818181818, 2.272727272727273], [6.800000000000001, 3.05, 4.95, 1.6], [6.788888888888889, 3.022222222222222, 5.5, 2.0000000000000004], [7.562500000000001, 3.2125000000000004, 6.375000000000001, 2.1]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 1, 2, 2, 3, 3, 2, 3, 3], 3), KCenters.var"#fun#72"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.6, 1)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[5.053846153846154, 3.4384615384615387, 1.5153846153846153, 0.30000000000000004], [5.973333333333332, 2.81, 4.316666666666666, 1.3466666666666665], [5.966666666666666, 2.7222222222222223, 4.966666666666667, 1.8888888888888888], [4.5200000000000005, 3.2800000000000002, 1.2799999999999998, 0.22000000000000003], [4.745454545454545, 3.0181818181818185, 1.4272727272727275, 0.18181818181818182], [5.666666666666667, 4.2, 1.3666666666666665, 0.26666666666666666], [6.760869565217392, 3.0173913043478255, 5.782608695652174, 2.091304347826086], [5.3500000000000005, 3.733333333333333, 1.6833333333333333, 0.2833333333333333]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1, 2, 3, 1, 1, 1, 3, 1], 3), KCenters.var"#fun#72"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 10, 1.0, :dnet, 0.6, 1))]
Test Summary: | Pass  Total
AKNC          |    1      1
[312, 2, 1, 1, 2, 4, 3, 17, 9, 3, 1, 8, 1, 2, 3, 3, 2, 2, 30, 31, 8, 4, 3, 1, 23, 6, 1, 11, 10, 17, 28, 1, 7, 6, 17, 120, 19, 9, 14, 12, 5, 12, 2, 3, 28, 10, 12, 11, 4, 1, 1, 42, 21, 1, 2, 9, 98, 18, 8, 5, 9, 20, 10, 1, 13, 1, 2, 2, 21, 5, 11, 11, 99, 12, 17, 7, 168, 4, 33, 10, 3, 2, 3, 1, 16, 23, 12, 6, 5, 33, 6, 5, 10, 8, 10, 3, 37, 27, 7, 117, 6, 10, 10, 10, 13, 4, 27, 17, 4, 45, 30, 17, 27, 30, 7, 31, 5, 5, 2, 7, 11, 135, 16, 14, 69, 29, 60, 45, 8, 5, 3, 6, 4, 20, 12, 8, 28, 40, 171, 50, 6, 53, 103, 38, 311, 112, 117, 36, 15, 70, 20, 28, 5, 2, 17, 27, 8, 28, 4, 45, 83, 35, 13, 25, 118, 43, 9, 30, 2, 5, 12, 97, 4, 190, 38, 26, 11, 3, 19, 28, 203, 16, 30, 2, 28, 5, 19, 12, 4, 16, 22, 108, 4, 21, 51, 18, 30, 5, 23, 27, 23, 10, 36, 9, 7, 43, 16, 26, 7, 31, 14, 15, 89, 27, 102, 54, 31, 17, 4, 35, 41, 31, 482, 30, 7, 21, 24, 9, 18, 2, 317, 4, 19, 2, 57, 18, 8, 66, 622, 30, 29, 19, 62, 33, 13, 3, 29, 5, 21, 5, 2, 2, 34, 8, 10, 226, 12, 41, 27, 23, 7, 99, 67, 32, 51, 22, 20, 205, 12, 83, 9, 48, 57, 52, 28, 10, 7, 27, 15, 42, 174, 89, 4, 61, 19, 11, 48, 15, 3, 36, 2, 9, 5, 96, 25, 2, 5, 34, 20, 83]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.622, speedup = 0.354495811684869, eval_ratio = 0.074169)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4079861111111111,"recall":0.40625,"f1":null,"seconds":0.00016523711383342743,"exhaustive_search_seconds":0.0003513600677251816,"evaluations":477.0390625,"distances_sum":1715.286793489755}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5843098958333331,"recall":0.5842013888888887,"f1":null,"seconds":0.0002529658377170563,"exhaustive_search_seconds":0.0003513600677251816,"evaluations":588.15625,"distances_sum":1626.5290422299993}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6805555555555552,"recall":0.6805555555555552,"f1":null,"seconds":0.0004790108650922775,"exhaustive_search_seconds":0.0003513600677251816,"evaluations":700.515625,"distances_sum":1581.3625992531381}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7430555555555549,"recall":0.7430555555555549,"f1":0.7430555555555549,"seconds":0.00040733255445957184,"exhaustive_search_seconds":0.0003513600677251816,"evaluations":787.984375,"distances_sum":1559.8333418757052}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7907986111111108,"recall":0.7907986111111108,"f1":0.7907986111111108,"seconds":0.0004088953137397766,"exhaustive_search_seconds":0.0003513600677251816,"evaluations":907.484375,"distances_sum":1544.4907157432333}
KCenters.DeloneInvIndex> reached performance {"precision":0.8376736111111106,"recall":0.8376736111111106,"f1":0.8376736111111106,"seconds":0.000573180615901947,"exhaustive_search_seconds":0.0003513600677251816,"evaluations":1018.359375,"distances_sum":1532.060657436073}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8, speedup = 0.5623998807170739, eval_ratio = 0.10531900000000001)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
