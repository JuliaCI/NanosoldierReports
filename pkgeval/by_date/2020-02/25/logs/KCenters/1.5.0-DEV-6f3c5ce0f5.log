Julia Version 1.5.0-DEV.335
Commit 6f3c5ce0f5 (2020-02-24 18:44 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataValueInterfaces ───────── v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed TableTraits ───────────────── v1.0.0
  Installed KCenters ──────────────────── v0.2.1
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed StatsBase ─────────────────── v0.32.1
  Installed SimilaritySearch ──────────── v0.3.19
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Compat ────────────────────── v3.6.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed MappedArrays ──────────────── v0.2.2
  Installed Tables ────────────────────── v1.0.2
  Installed Parsers ───────────────────── v0.3.11
  Installed Missings ──────────────────── v0.4.3
  Installed InvertedIndices ───────────── v1.0.0
  Installed Reexport ──────────────────── v0.2.0
  Installed MLDataUtils ───────────────── v0.5.0
  Installed MLDataPattern ─────────────── v0.5.0
  Installed DataFrames ────────────────── v0.20.2
  Installed DataStructures ────────────── v0.17.9
  Installed CategoricalArrays ─────────── v0.7.7
  Installed DataAPI ───────────────────── v1.1.0
  Installed JSON ──────────────────────── v0.21.0
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.1
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.6.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.1
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.2
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_cKBfCC/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.6.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.1
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.2
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9367083616058032
[ Info: 0.8321307849884033
[ Info: 0.5548521900673707
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.32982491600016756
mean(cdnet.distances) = 0.3957041430970033
mean(crand.distances) = 0.3582006329546372
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.728515625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.728515625,"f1":0.8336427461427469,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.7734375,"distances_sum":2049.677271514324}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.728515625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.728515625,"f1":0.8336427461427469,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.7734375,"distances_sum":2049.677271514324}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.8433606324231333,"seconds":3.516674041748047e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.8515625,"distances_sum":2112.722879077696}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9058524808524816,"seconds":3.8389116525650024e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.484375,"distances_sum":2468.8075097733395}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9538976648351651,"seconds":3.6116689443588257e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.7265625,"distances_sum":2830.966532403231}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9532108516483522,"seconds":3.723427653312683e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.7265625,"distances_sum":2832.822331923157}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9538976648351651,"seconds":3.6116689443588257e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.7265625,"distances_sum":2830.966532403231}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":2,"bsize":13}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9757268772893777,"seconds":6.668269634246826e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.9296875,"distances_sum":2992.1834843983493}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":5,"bsize":13}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.9821428571428572,"seconds":6.631016731262207e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.9375,"distances_sum":3040.6043050508206}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9637706043956045,"seconds":6.2230974435806274e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.84375,"distances_sum":2922.023710982716}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9585851648351651,"seconds":6.234273314476013e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.765625,"distances_sum":2869.9705241109214}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9701293498168502,"seconds":6.34416937828064e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.8671875,"distances_sum":2942.1106155201164}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9672847985347991,"seconds":6.167218089103699e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.828125,"distances_sum":2931.7433760345225}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9627461080586084,"seconds":6.143003702163696e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.8125,"distances_sum":2900.521902273939}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":9,"bsize":11}, perf: {"precision":1.0,"recall":0.9375,"f1":0.965310210622711,"seconds":6.28642737865448e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.875,"distances_sum":2897.020854948641}, best_list's length: 14, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9620764652014657,"seconds":5.953013896942139e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.8125,"distances_sum":2892.0546571616974}, best_list's length: 15, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9677734375,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9821428571428572,"seconds":6.631016731262207e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.9375,"distances_sum":3040.6043050508206}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9677734375,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9821428571428572,"seconds":6.631016731262207e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.9375,"distances_sum":3040.6043050508206}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8727741008991017,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.640625,"distances_sum":1999.7165214767965}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.689453125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.689453125,"f1":0.8051875208125215,"seconds":5.386769771575928e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.4296875,"distances_sum":1686.4747855974224}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5966796875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5966796875,"f1":null,"seconds":4.84660267829895e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":7.8203125,"distances_sum":1440.9520127760195}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7841796875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7841796875,"f1":0.8727741008991017,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.640625,"distances_sum":1999.7165214767965}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9073260073260081,"seconds":6.426125764846802e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.921875,"distances_sum":2208.142895463192}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9476991758241764,"seconds":6.414949893951416e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.9296875,"distances_sum":2492.6704696237352}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9379724442224447,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.8984375,"distances_sum":2405.125102222238}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9476991758241764,"seconds":6.414949893951416e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.9296875,"distances_sum":2492.6704696237352}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9748912545787551,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":9.0,"distances_sum":2682.8034742020577}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9685496794871797,"seconds":3.8016587495803833e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.9453125,"distances_sum":2660.172648810244}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9748912545787551,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":9.0,"distances_sum":2682.8034742020577}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9748912545787551,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":9.0,"distances_sum":2682.8034742020577}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8481950341325349,"seconds":3.209337592124939e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.2578125,"distances_sum":1931.7726450871608}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5380859375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5380859375,"f1":0.6863227050727057,"seconds":2.553686499595642e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":6.9453125,"distances_sum":1276.202979420302}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3837890625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3837890625,"f1":null,"seconds":2.173706889152527e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":6.2734375,"distances_sum":901.0126625510717}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7490234375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7490234375,"f1":0.8481950341325349,"seconds":3.209337592124939e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.2578125,"distances_sum":1931.7726450871608}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9407623626373635,"seconds":3.7103891372680664e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.8984375,"distances_sum":2376.728755754712}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9523122710622715,"seconds":3.7141144275665283e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.8359375,"distances_sum":2475.1943581240043}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9410599816849822,"seconds":5.042180418968201e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.84375,"distances_sum":2373.5100217359363}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8879469488844498,"seconds":3.4812837839126587e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.5078125,"distances_sum":2091.369329360341}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9523122710622715,"seconds":3.7141144275665283e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.8359375,"distances_sum":2475.1943581240043}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9733859890109894,"seconds":3.848224878311157e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.90625,"distances_sum":2620.253410800793}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9735519688644692,"seconds":3.721565008163452e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.921875,"distances_sum":2601.355265280071}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9596382783882789,"seconds":3.919005393981934e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.8828125,"distances_sum":2501.6270302322764}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9598614926739929,"seconds":3.77558171749115e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.859375,"distances_sum":2525.185290064289}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9726018772893776,"seconds":4.081055521965027e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.9140625,"distances_sum":2602.9813064269515}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9599587912087912,"seconds":3.680586814880371e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.828125,"distances_sum":2538.5722377917004}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9733859890109894,"seconds":3.848224878311157e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.90625,"distances_sum":2620.253410800793}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9733859890109894,"seconds":3.848224878311157e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.90625,"distances_sum":2620.253410800793}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6279296875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6279296875,"f1":0.7579887126762134,"seconds":3.4961849451065063e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":7.90625,"distances_sum":1579.4284973997896}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1474609375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1474609375,"f1":null,"seconds":1.7229467630386353e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":4.296875,"distances_sum":404.111780487624}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4599609375, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.4599609375,"f1":0.618408674658675,"seconds":2.726912498474121e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":6.4296875,"distances_sum":1184.6431962132065}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6279296875,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6279296875,"f1":0.7579887126762134,"seconds":3.4961849451065063e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":7.90625,"distances_sum":1579.4284973997896}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8908721486846494,"seconds":3.596767783164978e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.671875,"distances_sum":2107.644986153013}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8429185397935405,"seconds":4.732981324195862e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.3515625,"distances_sum":1905.1858913313506}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8232421875,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.8232421875,"f1":0.8908721486846494,"seconds":3.596767783164978e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.671875,"distances_sum":2107.644986153013}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9652560980685985,"seconds":6.280839443206787e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.875,"distances_sum":2577.4323261628074}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9174518190143197,"seconds":4.667788743972778e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.8046875,"distances_sum":2274.2653453891157}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9438904845154852,"seconds":3.933906555175781e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.734375,"distances_sum":2462.5493671113027}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9530906593406596,"seconds":4.056841135025024e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.8046875,"distances_sum":2504.075648433076}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9652560980685985,"seconds":6.280839443206787e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.875,"distances_sum":2577.4323261628074}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9652560980685985,"seconds":6.280839443206787e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.875,"distances_sum":2577.4323261628074}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.150390625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.150390625,"f1":null,"seconds":2.2705644369125366e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":5.2890625,"distances_sum":373.76662958637854}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5380859375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5380859375,"f1":0.6842941780441786,"seconds":3.3155083656311035e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":7.3125,"distances_sum":1273.5987275850432}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5390625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5390625,"f1":0.6858016983016988,"seconds":3.0975788831710815e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":7.203125,"distances_sum":1256.6630592815886}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5390625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5390625,"f1":0.6858016983016988,"seconds":3.0975788831710815e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":7.203125,"distances_sum":1256.6630592815886}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9155308233433239,"seconds":4.0959566831588745e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":8.515625,"distances_sum":2271.6015542087825}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6591796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6591796875,"f1":0.7814987096237104,"seconds":3.2354146242141724e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":7.7890625,"distances_sum":1595.4338752259066}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8115234375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8115234375,"f1":0.8878839910089917,"seconds":3.827735781669617e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":8.34375,"distances_sum":2117.8003467215876}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.705078125, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.705078125,"f1":0.8170745920745929,"seconds":3.851950168609619e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":7.90625,"distances_sum":1772.655668433241}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.81640625, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.81640625,"f1":0.8899990634365643,"seconds":5.6568533182144165e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":8.3515625,"distances_sum":2128.449132623191}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6513671875, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6513671875,"f1":0.7776234182484191,"seconds":4.9658119678497314e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":7.734375,"distances_sum":1587.6682244833112}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8564453125,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8564453125,"f1":0.9155308233433239,"seconds":4.0959566831588745e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":8.515625,"distances_sum":2271.6015542087825}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.920215201465202,"seconds":3.986060619354248e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":8.578125,"distances_sum":2269.015638223029}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9669642857142859,"seconds":4.0996819734573364e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":8.890625,"distances_sum":2547.0118183955597}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.947630494505495,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":8.796875,"distances_sum":2437.7003226766}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9215544871794878,"seconds":3.7997961044311523e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":8.578125,"distances_sum":2287.0084818153655}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":12,"bsize":7}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9195627289377296,"seconds":4.4871121644973755e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":8.5234375,"distances_sum":2277.1569839035087}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9472012362637368,"seconds":4.166737198829651e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":8.7734375,"distances_sum":2428.9974680545392}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9558665293040298,"seconds":4.023313522338867e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":8.8203125,"distances_sum":2475.138673744059}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9658711080586084,"seconds":5.869194865226746e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":8.8203125,"distances_sum":2553.9686820700463}, best_list's length: 14, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9425137362637367,"seconds":5.377456545829773e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":8.71875,"distances_sum":2430.041263357285}, best_list's length: 15, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.938885073260074,"seconds":4.306435585021973e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":8.6875,"distances_sum":2392.953990614923}, best_list's length: 16, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9453957500832504,"seconds":4.470348358154297e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":8.734375,"distances_sum":2430.5656595292858}, best_list's length: 17, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9669642857142859,"seconds":4.0996819734573364e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":8.890625,"distances_sum":2547.0118183955597}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9669642857142859,"seconds":4.0996819734573364e-6,"exhaustive_search_seconds":9.853392839431763e-7,"evaluations":8.890625,"distances_sum":2547.0118183955597}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.65625,"f1":0.7809730200355207,"seconds":4.47593629360199e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.9296875,"distances_sum":1471.4289464659958}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5712890625, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5712890625,"f1":0.7113946817071822,"seconds":3.844499588012695e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.03125,"distances_sum":1278.9449227825294}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.65625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.65625,"f1":0.7809730200355207,"seconds":4.47593629360199e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.9296875,"distances_sum":1471.4289464659958}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9364468864468871,"seconds":4.477798938751221e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.75,"distances_sum":2225.234123099025}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.888671875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.888671875,"f1":0.9364468864468871,"seconds":4.477798938751221e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.75,"distances_sum":2225.234123099025}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.888671875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.888671875,"f1":0.9364468864468871,"seconds":4.477798938751221e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.75,"distances_sum":2225.234123099025}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.888671875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.888671875,"f1":0.9364468864468871,"seconds":4.477798938751221e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.75,"distances_sum":2225.234123099025}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.189453125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.189453125,"f1":null,"seconds":2.2649765014648438e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":5.3671875,"distances_sum":437.586306698745}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.537109375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.537109375,"f1":0.6832063769563773,"seconds":3.1944364309310913e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":7.0234375,"distances_sum":1250.7073953170636}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.390625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.390625,"f1":null,"seconds":2.9653310775756836e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":6.21875,"distances_sum":889.6244757156225}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.537109375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.537109375,"f1":0.6832063769563773,"seconds":3.1944364309310913e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":7.0234375,"distances_sum":1250.7073953170636}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.857388965201466,"seconds":3.846362233161926e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.1171875,"distances_sum":1891.5565852638465}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.7912191974691984,"seconds":6.294064223766327e-5,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":7.7421875,"distances_sum":1618.648549505969}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7607421875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7607421875,"f1":0.857388965201466,"seconds":3.846362233161926e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.1171875,"distances_sum":1891.5565852638465}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9427197802197806,"seconds":3.6302953958511353e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.6953125,"distances_sum":2403.719497806102}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9427197802197806,"seconds":3.6302953958511353e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.6953125,"distances_sum":2403.719497806102}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9013671875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9427197802197806,"seconds":3.6302953958511353e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.6953125,"distances_sum":2403.719497806102}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5927734375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5927734375,"f1":0.7309922716172721,"seconds":2.8517097234725952e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.34375,"distances_sum":1382.3364108915237}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.435546875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.435546875,"f1":null,"seconds":2.333894371986389e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":6.6796875,"distances_sum":928.3163804532654}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6923828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6923828125,"f1":0.8070637695637704,"seconds":3.0603259801864624e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.796875,"distances_sum":1641.4965782108538}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6923828125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6923828125,"f1":0.8070637695637704,"seconds":3.0603259801864624e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.796875,"distances_sum":1641.4965782108538}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6923828125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6923828125,"f1":0.8070637695637704,"seconds":3.0603259801864624e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.796875,"distances_sum":1641.4965782108538}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.6923828125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6923828125,"f1":0.8070637695637704,"seconds":3.0603259801864624e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.796875,"distances_sum":1641.4965782108538}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2568359375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2568359375,"f1":null,"seconds":2.512708306312561e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":6.1640625,"distances_sum":597.7099190474847}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2451171875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2451171875,"f1":null,"seconds":2.21841037273407e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":5.9921875,"distances_sum":598.8034040290796}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3876953125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3876953125,"f1":null,"seconds":3.60049307346344e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":5.796875,"distances_sum":758.9897838503532}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3876953125,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3876953125,"f1":null,"seconds":3.60049307346344e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":5.796875,"distances_sum":758.9897838503532}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6376953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":0.9820126488095237,"recall":0.6376953125,"f1":0.7651257596570102,"seconds":4.811212420463562e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":7.59375,"distances_sum":1324.2390094887483}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5224609375, conf: {"ssize":5,"bsize":3}, perf: {"precision":0.9819568452380953,"recall":0.5224609375,"f1":0.6653112512487517,"seconds":3.0118972063064575e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":6.6953125,"distances_sum":1056.3336035452348}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6337890625, conf: {"ssize":7,"bsize":4}, perf: {"precision":0.9837053571428571,"recall":0.6337890625,"f1":0.7602609196359201,"seconds":4.500150680541992e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":7.546875,"distances_sum":1291.6310869076601}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.650390625, conf: {"ssize":4,"bsize":4}, perf: {"precision":0.9882068452380952,"recall":0.650390625,"f1":0.7744694975163732,"seconds":4.474073648452759e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":7.6328125,"distances_sum":1337.2038982023441}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4140625, conf: {"ssize":9,"bsize":2}, perf: {"precision":null,"recall":0.4140625,"f1":null,"seconds":3.084540367126465e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":6.0390625,"distances_sum":838.579034302482}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.650390625,"state":{"ssize":4,"bsize":4},"perf":{"precision":0.9882068452380952,"recall":0.650390625,"f1":0.7744694975163732,"seconds":4.474073648452759e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":7.6328125,"distances_sum":1337.2038982023441}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":1,"bsize":7}, perf: {"precision":0.9877232142857143,"recall":0.875,"f1":0.9243160485347989,"seconds":4.542991518974304e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.625,"distances_sum":2058.7924033345116}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":8,"bsize":7}, perf: {"precision":0.9914434523809523,"recall":0.8544921875,"f1":0.9135903159340669,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.484375,"distances_sum":1983.1083802634282}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9884858630952381,"recall":0.748046875,"f1":0.845474447427573,"seconds":5.19677996635437e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":7.8671875,"distances_sum":1570.7671639813686}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":5,"bsize":8}, perf: {"precision":0.9894903273809524,"recall":0.908203125,"f1":0.9430849098817853,"seconds":5.865469574928284e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.75,"distances_sum":2217.958890657482}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":3,"bsize":5}, perf: {"precision":0.9855282738095236,"recall":0.765625,"f1":0.856850961538462,"seconds":5.347654223442078e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.0390625,"distances_sum":1654.8880427458482}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":5,"bsize":8},"perf":{"precision":0.9894903273809524,"recall":0.908203125,"f1":0.9430849098817853,"seconds":5.865469574928284e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.75,"distances_sum":2217.958890657482}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.908203125,"state":{"ssize":5,"bsize":8},"perf":{"precision":0.9894903273809524,"recall":0.908203125,"f1":0.9430849098817853,"seconds":5.865469574928284e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.75,"distances_sum":2217.958890657482}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8558925449550459,"seconds":3.725290298461914e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":7.7265625,"distances_sum":1611.628130916244}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.851989676989678,"seconds":3.6191195249557495e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":7.8046875,"distances_sum":1609.1591915452748}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.388671875, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.388671875,"f1":null,"seconds":2.5834888219833374e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":5.6171875,"distances_sum":788.7453098225336}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7578125,"f1":0.8558925449550459,"seconds":3.725290298461914e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":7.7265625,"distances_sum":1611.628130916244}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9623740842490847,"seconds":3.954395651817322e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":8.8203125,"distances_sum":2283.060331360971}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8834311521811531,"seconds":4.2282044887542725e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":8.1640625,"distances_sum":1788.8825625868824}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9255010614385623,"seconds":4.034489393234253e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":8.453125,"distances_sum":2053.273821812253}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9623740842490847,"seconds":3.954395651817322e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":8.8203125,"distances_sum":2283.060331360971}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9759500915750918,"seconds":4.064291715621948e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":8.9140625,"distances_sum":2368.2489979002876}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9759500915750918,"seconds":4.064291715621948e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":8.9140625,"distances_sum":2368.2489979002876}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9759500915750918,"seconds":4.064291715621948e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":8.9140625,"distances_sum":2368.2489979002876}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3515625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3515625,"f1":null,"seconds":2.3227185010910034e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":5.46875,"distances_sum":700.0126491674462}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3515625,"state":{"ssize":4,"bsize":2},"perf":{"precision":null,"recall":0.3515625,"f1":null,"seconds":2.3227185010910034e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":5.46875,"distances_sum":700.0126491674462}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8487032065157073,"seconds":3.384426236152649e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":8.1484375,"distances_sum":1621.7729703243965}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.751953125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.751953125,"f1":0.8487032065157073,"seconds":3.384426236152649e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":8.1484375,"distances_sum":1621.7729703243965}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.8800428737928746,"seconds":3.4570693969726562e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":8.390625,"distances_sum":1769.546427730314}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9490212912087918,"seconds":3.725290298461914e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":8.765625,"distances_sum":2233.2449594322375}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8503954378954388,"seconds":3.6638230085372925e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":8.0625,"distances_sum":1621.3868864749152}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9091796875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9490212912087918,"seconds":3.725290298461914e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":8.765625,"distances_sum":2233.2449594322375}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9091796875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9490212912087918,"seconds":3.725290298461914e-6,"exhaustive_search_seconds":1.1101365089416504e-6,"evaluations":8.765625,"distances_sum":2233.2449594322375}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41015625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.41015625,"f1":null,"seconds":3.8053840398788452e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":5.7734375,"distances_sum":858.2232394864856}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.41015625,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.41015625,"f1":null,"seconds":3.8053840398788452e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":5.7734375,"distances_sum":858.2232394864856}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7275390625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7275390625,"f1":0.8301817973692981,"seconds":6.064772605895996e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.6171875,"distances_sum":1621.7793101525901}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7942380536130544,"seconds":5.057081580162048e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.265625,"distances_sum":1438.6202512626114}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7275390625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7275390625,"f1":0.8301817973692981,"seconds":6.064772605895996e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.6171875,"distances_sum":1621.7793101525901}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8571090367965377,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.8671875,"distances_sum":1696.0240608760103}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.921809440559441,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.5390625,"distances_sum":2113.3513891051107}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8483636155511163,"seconds":5.433335900306702e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.6875,"distances_sum":1693.4936482052753}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8642578125,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.8642578125,"f1":0.921809440559441,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.5390625,"distances_sum":2113.3513891051107}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8642578125,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.8642578125,"f1":0.921809440559441,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.5390625,"distances_sum":2113.3513891051107}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5322265625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5322265625,"f1":0.681994394494395,"seconds":4.33996319770813e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":6.609375,"distances_sum":1126.2815655314032}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6748046875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6748046875,"f1":0.7953140609390619,"seconds":4.827976226806641e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.1953125,"distances_sum":1460.181079074424}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3037109375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.3037109375,"f1":null,"seconds":3.995373845100403e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":5.8671875,"distances_sum":708.5272620781743}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6748046875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6748046875,"f1":0.7953140609390619,"seconds":4.827976226806641e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.1953125,"distances_sum":1460.181079074424}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8046875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8046875,"f1":0.8845612720612728,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.1171875,"distances_sum":1898.3540841865654}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7333984375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7333984375,"f1":0.8362455253080261,"seconds":5.17629086971283e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.5390625,"distances_sum":1636.1411791878527}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9301599442224449,"seconds":5.9138983488082886e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.65625,"distances_sum":2152.19378785296}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8510510323010331,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.6796875,"distances_sum":1713.4451959520516}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.876953125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.876953125,"f1":0.9301599442224449,"seconds":5.9138983488082886e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.65625,"distances_sum":2152.19378785296}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9662603021978029,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.8125,"distances_sum":2425.645333378499}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9739411630036632,"seconds":6.3497573137283325e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.890625,"distances_sum":2465.975246395211}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9638850732600738,"seconds":6.249174475669861e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.8203125,"distances_sum":2400.643656335246}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9739411630036632,"seconds":6.3497573137283325e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.890625,"distances_sum":2465.975246395211}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9739411630036632,"seconds":6.3497573137283325e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.890625,"distances_sum":2465.975246395211}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6455078125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6455078125,"f1":0.7725883491508498,"seconds":5.070120096206665e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.1328125,"distances_sum":1464.5632734320045}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2890625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2890625,"f1":null,"seconds":3.729015588760376e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":5.6953125,"distances_sum":675.5047011655244}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6455078125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6455078125,"f1":0.7725883491508498,"seconds":5.070120096206665e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.1328125,"distances_sum":1464.5632734320045}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8835940101565111,"seconds":5.610287189483643e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.1171875,"distances_sum":1982.6249807958393}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9446142399267407,"seconds":6.2659382820129395e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.640625,"distances_sum":2434.1624881214875}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7431640625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7431640625,"f1":0.8430642274392282,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.5390625,"distances_sum":1761.4682840385842}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9033203125,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.9446142399267407,"seconds":6.2659382820129395e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.640625,"distances_sum":2434.1624881214875}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9631581959706966,"seconds":6.124377250671387e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.7890625,"distances_sum":2505.5645431890725}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9638850732600737,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.796875,"distances_sum":2522.831112351209}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9694024725274728,"seconds":5.690380930900574e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.875,"distances_sum":2540.834824713996}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9677483974358979,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8828125,"distances_sum":2524.287786545123}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9612580128205134,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8046875,"distances_sum":2494.5654130587163}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9694024725274728,"seconds":5.690380930900574e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.875,"distances_sum":2540.834824713996}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9694024725274728,"seconds":5.690380930900574e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.875,"distances_sum":2540.834824713996}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6279296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6279296875,"f1":0.7538595085470092,"seconds":4.382804036140442e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.8671875,"distances_sum":1451.8846739720516}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.310546875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.310546875,"f1":null,"seconds":3.6507844924926758e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":5.9453125,"distances_sum":760.0315783703002}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.71875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.71875,"f1":0.8248818889443899,"seconds":4.7031790018081665e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.5,"distances_sum":1738.0525852536375}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.71875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.71875,"f1":0.8248818889443899,"seconds":4.7031790018081665e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.5,"distances_sum":1738.0525852536375}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9249313186813193,"seconds":5.48921525478363e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.5703125,"distances_sum":2312.5752116423564}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9484260531135534,"seconds":5.476176738739014e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.6875,"distances_sum":2460.064847331547}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9385016025641031,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.609375,"distances_sum":2409.1187274615154}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73046875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.73046875,"f1":0.8345336954711962,"seconds":4.8074871301651e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.578125,"distances_sum":1763.706414916676}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9484260531135534,"seconds":5.476176738739014e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.6875,"distances_sum":2460.064847331547}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9495421245421249,"seconds":5.666166543960571e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.640625,"distances_sum":2505.5100410270034}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9748912545787548,"seconds":5.902722477912903e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.875,"distances_sum":2641.7716819721745}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.97514880952381,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9375,"distances_sum":2614.1898667701075}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9591174450549456,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.78125,"distances_sum":2529.916728674876}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9748912545787548,"seconds":5.902722477912903e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.875,"distances_sum":2641.7716819721745}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9748912545787548,"seconds":5.902722477912903e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.875,"distances_sum":2641.7716819721745}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5751953125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5751953125,"f1":0.715758720446221,"seconds":4.172325134277344e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.40625,"distances_sum":1255.3885261638509}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.396484375, conf: {"ssize":4,"bsize":2}, perf: {"precision":1.0,"recall":0.396484375,"f1":0.5430337024087021,"seconds":3.563240170478821e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.28125,"distances_sum":846.8673100260469}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.689453125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.689453125,"f1":0.8074149808524816,"seconds":4.595145583152771e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.6015625,"distances_sum":1560.9355436475048}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.689453125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.689453125,"f1":0.8074149808524816,"seconds":4.595145583152771e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.6015625,"distances_sum":1560.9355436475048}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8963141025641036,"seconds":5.25452196598053e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.0625,"distances_sum":1993.356245893754}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9489640567765574,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7578125,"distances_sum":2349.613551292096}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8590721778221786,"seconds":5.386769771575928e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.9453125,"distances_sum":1783.820531929286}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9229426823176827,"seconds":5.401670932769775e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.5078125,"distances_sum":2177.4459529209576}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.872041500166501,"seconds":4.999339580535889e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.015625,"distances_sum":1828.7172204975873}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9091796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9489640567765574,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7578125,"distances_sum":2349.613551292096}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9778273809523811,"seconds":6.224960088729858e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8984375,"distances_sum":2564.2578657683243}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9546588827838833,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7734375,"distances_sum":2382.221864755143}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9635645604395607,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.796875,"distances_sum":2456.5482740611455}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9508616383616388,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7265625,"distances_sum":2401.493202167948}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9778273809523811,"seconds":6.224960088729858e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8984375,"distances_sum":2564.2578657683243}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9778273809523811,"seconds":6.224960088729858e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8984375,"distances_sum":2564.2578657683243}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6826171875,"f1":0.8010999417249426,"seconds":4.563480615615845e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.25,"distances_sum":1329.170429938519}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7333984375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7333984375,"f1":0.8369177697302704,"seconds":5.112960934638977e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.609375,"distances_sum":1516.072448982687}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7333984375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7333984375,"f1":0.8369177697302704,"seconds":5.112960934638977e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.609375,"distances_sum":1516.072448982687}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.953634386446887,"seconds":3.93204391002655e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.9140625,"distances_sum":2165.7742736127257}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9685096153846158,"seconds":4.367902874946594e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.9140625,"distances_sum":2273.4338304079297}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9685096153846158,"seconds":4.367902874946594e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.9140625,"distances_sum":2273.4338304079297}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9756353021978025,"seconds":6.26780092716217e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.953125,"distances_sum":2317.129309012532}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9778846153846159,"seconds":6.323680281639099e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.9765625,"distances_sum":2326.408604697554}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9797619047619051,"seconds":6.433576345443726e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.96875,"distances_sum":2349.674090040388}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9797619047619051,"seconds":6.433576345443726e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.96875,"distances_sum":2349.674090040388}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9797619047619051,"seconds":6.433576345443726e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.96875,"distances_sum":2349.674090040388}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.296875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.296875,"f1":null,"seconds":3.7513673305511475e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":6.5703125,"distances_sum":631.5041231281663}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.681640625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.681640625,"f1":0.8004551004551013,"seconds":4.9639493227005005e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.2578125,"distances_sum":1477.9788927012062}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2373046875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2373046875,"f1":null,"seconds":5.425885319709778e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":6.15625,"distances_sum":485.1722640749678}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.681640625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.681640625,"f1":0.8004551004551013,"seconds":4.9639493227005005e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.2578125,"distances_sum":1477.9788927012062}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9465315934065938,"seconds":6.11133873462677e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.84375,"distances_sum":2293.041859284583}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9052734375,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.9052734375,"f1":0.9465315934065938,"seconds":6.11133873462677e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.84375,"distances_sum":2293.041859284583}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.965739468864469,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.9296875,"distances_sum":2457.5766112008423}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":10,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9566995504495508,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.8671875,"distances_sum":2395.311739647343}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.965739468864469,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.9296875,"distances_sum":2457.5766112008423}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.965739468864469,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.9296875,"distances_sum":2457.5766112008423}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5341796875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5341796875,"f1":null,"seconds":4.079192876815796e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":6.6953125,"distances_sum":1095.2681513034274}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.25390625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.25390625,"f1":null,"seconds":3.4980475902557373e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":5.6640625,"distances_sum":506.15630536801393}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5341796875,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5341796875,"f1":null,"seconds":4.079192876815796e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":6.6953125,"distances_sum":1095.2681513034274}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9289720695970702,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.75,"distances_sum":2215.3272355156905}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7333984375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7333984375,"f1":0.8382013819513828,"seconds":5.127862095832825e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.1171875,"distances_sum":1632.5045356611815}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65234375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.65234375,"f1":0.7758396117771126,"seconds":4.384666681289673e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.375,"distances_sum":1439.7467625674894}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7869978979353986,"seconds":4.6584755182266235e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.53125,"distances_sum":1477.6767520502374}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.876953125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.876953125,"f1":0.9289720695970702,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.75,"distances_sum":2215.3272355156905}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9569055944055949,"seconds":6.055459380149841e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.84375,"distances_sum":2440.022515643938}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9301256035631044,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.6796875,"distances_sum":2218.3383481631786}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9598443223443228,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8515625,"distances_sum":2432.8743612235103}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9543383699633703,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8203125,"distances_sum":2407.0278316588992}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9303888819513827,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.6953125,"distances_sum":2236.6428617337756}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9568681318681322,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.890625,"distances_sum":2414.162999281769}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9598443223443228,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8515625,"distances_sum":2432.8743612235103}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9598443223443228,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8515625,"distances_sum":2432.8743612235103}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.431640625, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.431640625,"f1":null,"seconds":3.827735781669617e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":6.4453125,"distances_sum":953.2524002884875}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.8474936521811531,"seconds":5.148351192474365e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.1875,"distances_sum":1731.5572680033467}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7451171875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7451171875,"f1":0.8474936521811531,"seconds":5.148351192474365e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.1875,"distances_sum":1731.5572680033467}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9252440268065275,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8515625,"distances_sum":2264.6717529133007}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9614983974358979,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.984375,"distances_sum":2495.266449405342}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9614983974358979,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.984375,"distances_sum":2495.266449405342}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9693853021978024,"seconds":6.144866347312927e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.9453125,"distances_sum":2589.099903448915}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9786286630036632,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.984375,"distances_sum":2654.421912802151}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9786286630036632,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.984375,"distances_sum":2654.421912802151}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9786286630036632,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.984375,"distances_sum":2654.421912802151}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6494140625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6494140625,"f1":0.7761913433788441,"seconds":4.550442099571228e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.5078125,"distances_sum":1419.7481709177737}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.578125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.578125,"f1":0.7155913530913538,"seconds":4.133209586143494e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.640625,"distances_sum":1235.4889739734483}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6494140625,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6494140625,"f1":0.7761913433788441,"seconds":4.550442099571228e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.5078125,"distances_sum":1419.7481709177737}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9070169413919422,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.4921875,"distances_sum":2028.8172106393426}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9551224816849819,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8046875,"distances_sum":2438.8783169663225}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9595638736263742,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9375,"distances_sum":2416.5007160820956}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9303202006327014,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.84375,"distances_sum":2219.2181925106656}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9595638736263742,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9375,"distances_sum":2416.5007160820956}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9697265625, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9697265625,"f1":0.9835393772893776,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.984375,"distances_sum":2600.5471502285873}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9786458333333337,"seconds":6.0889869928359985e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.96875,"distances_sum":2571.4662705418273}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9662831959706963,"seconds":6.4391642808914185e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8984375,"distances_sum":2486.955194250901}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9697265625,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.9835393772893776,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.984375,"distances_sum":2600.5471502285873}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9697265625,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.9835393772893776,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.984375,"distances_sum":2600.5471502285873}}, n: 9
mean(cfft.distances) = 0.3269776560226592
mean(cdnet.distances) = 0.3605533779698561
mean(crand.distances) = 0.3339205860294726
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.9133333333333334
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9444444444444443
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8422222222222223
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8777777777777778
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8866666666666667
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9155555555555556
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8577777777777778
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8822222222222221
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9066666666666666
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9333333333333332
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9111111111111111
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9355555555555556
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9177777777777778
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8422222222222223
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8711111111111111
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8755555555555555
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8866666666666667
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9333333333333332
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8777777777777778
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8822222222222221
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8844444444444445
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8955555555555555
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9022222222222221
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9111111111111111
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8999999999999999
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9044444444444445
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5288709985216459] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 13, 16]]
** centroid: 1, normalized-entropy: 0.9922666387194963, [(2, 13), (3, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 16, 1]]
** centroid: 6, normalized-entropy: 0.32275695889739825, [(2, 16), (3, 1)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 10: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 4, 3]]
** centroid: 11, normalized-entropy: 0.9852281360342514, [(2, 4), (3, 3)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
finished with 14 centroids; started with 12
acc = 0.9666666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.24280624892968158] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24280624892968158, 0.17768285891206168] ***
*** finished computation of 7 references, err: [Inf, 0.24280624892968158, 0.17768285891206168] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [125, 17, 0]]
** centroid: 2, normalized-entropy: 0.5285506132792125, [(1, 125), (2, 17)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [10, 173, 18]]
** centroid: 3, normalized-entropy: 0.45010332614389653, [(1, 10), (2, 173), (3, 18)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [36, 61, 0]]
** centroid: 4, normalized-entropy: 0.9515388458648668, [(1, 36), (2, 61)]
*** center 5: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.40563965947632946] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40563965947632946, 0.2971636594130515] ***
*** starting iteration: 2; err: [Inf, 0.40563965947632946, 0.2971636594130515] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40563965947632946, 0.2971636594130515, 0.29064532971658463] ***
*** starting iteration: 3; err: [Inf, 0.40563965947632946, 0.2971636594130515, 0.29064532971658463] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40563965947632946, 0.2971636594130515, 0.29064532971658463, 0.28915096472462154] ***
*** starting iteration: 4; err: [Inf, 0.40563965947632946, 0.2971636594130515, 0.29064532971658463, 0.28915096472462154] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40563965947632946, 0.2971636594130515, 0.29064532971658463, 0.28915096472462154, 0.2887147650928111] ***
*** finished computation of 3 references, err: [Inf, 0.40563965947632946, 0.2971636594130515, 0.29064532971658463, 0.28915096472462154, 0.2887147650928111] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [56, 168, 18]]
** centroid: 1, normalized-entropy: 0.7148409359156666, [(1, 56), (2, 168), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [219, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [122, 83, 0]]
** centroid: 3, normalized-entropy: 0.9737326459226808, [(1, 122), (2, 83)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4414137079432115] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4414137079432115, 0.29949712515927324] ***
*** starting iteration: 2; err: [Inf, 0.4414137079432115, 0.29949712515927324] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4414137079432115, 0.29949712515927324, 0.29733122653059796] ***
*** starting iteration: 3; err: [Inf, 0.4414137079432115, 0.29949712515927324, 0.29733122653059796] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4414137079432115, 0.29949712515927324, 0.29733122653059796, 0.2972125754114994] ***
*** finished computation of 3 references, err: [Inf, 0.4414137079432115, 0.29949712515927324, 0.29733122653059796, 0.2972125754114994] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [73, 150, 24]]
** centroid: 1, normalized-entropy: 0.8098062823227042, [(1, 73), (2, 150), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [212, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [131, 77, 0]]
** centroid: 3, normalized-entropy: 0.9508196372040086, [(1, 131), (2, 77)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.21819506320932033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21819506320932033, 0.15234817886610572] ***
*** finished computation of 7 references, err: [Inf, 0.21819506320932033, 0.15234817886610572] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [32, 70, 0]]
** centroid: 1, normalized-entropy: 0.8974271930876951, [(1, 32), (2, 70)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 7, 0]]
** centroid: 2, normalized-entropy: 0.5564215672884282, [(1, 47), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 71, 24]]
** centroid: 3, normalized-entropy: 0.8154224977821039, [(2, 71), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [16, 79, 0]]
** centroid: 4, normalized-entropy: 0.6540800387941991, [(1, 16), (2, 79)]
*** center 5: selecting labels [1] (freq >= 2) [from [153, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2140941929234111] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2140941929234111, 0.16074312880434197] ***
*** finished computation of 7 references, err: [Inf, 0.2140941929234111, 0.16074312880434197] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [112, 27, 0]]
** centroid: 3, normalized-entropy: 0.7102668725158433, [(1, 112), (2, 27)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 128, 32]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(2, 128), (3, 32)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 42, 0]]
** centroid: 5, normalized-entropy: 0.9617136136083148, [(1, 67), (2, 42)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [13, 39, 0]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(1, 13), (2, 39)]
*** center 7: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21887236955161724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21887236955161724, 0.15165144650338291] ***
*** finished computation of 7 references, err: [Inf, 0.21887236955161724, 0.15165144650338291] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 96, 15]]
** centroid: 1, normalized-entropy: 0.5713549744279549, [(2, 96), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [81, 3, 0]]
** centroid: 2, normalized-entropy: 0.2222848306856879, [(1, 81), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 101, 3]]
** centroid: 3, normalized-entropy: 0.18857195602479668, [(2, 101), (3, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [38, 5, 0]]
** centroid: 4, normalized-entropy: 0.5185697317883058, [(1, 38), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [109, 23, 0]]
** centroid: 5, normalized-entropy: 0.6673182376160576, [(1, 109), (2, 23)]
*** center 6: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [59, 23, 0]]
** centroid: 7, normalized-entropy: 0.8561146277685725, [(1, 59), (2, 23)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21982253890490155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21982253890490155, 0.1748878507488484] ***
*** finished computation of 7 references, err: [Inf, 0.21982253890490155, 0.1748878507488484] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 58, 14]]
** centroid: 1, normalized-entropy: 0.710676853856123, [(2, 58), (3, 14)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 110, 10]]
** centroid: 2, normalized-entropy: 0.4138168503036336, [(2, 110), (3, 10)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [179, 9, 0]]
** centroid: 3, normalized-entropy: 0.277289122192091, [(1, 179), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [39, 44, 0]]
** centroid: 4, normalized-entropy: 0.9973806632063373, [(1, 39), (2, 44)]
*** center 5: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [71, 6, 0]]
** centroid: 6, normalized-entropy: 0.39481484603049416, [(1, 71), (2, 6)]
*** center 7: selecting labels [1] (freq >= 1) [from [26, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2042155216672811] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2042155216672811, 0.1593137966926912] ***
*** finished computation of 7 references, err: [Inf, 0.2042155216672811, 0.1593137966926912] ***
*** center 1: selecting labels [1] (freq >= 1) [from [139, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 80, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 34, 32]]
** centroid: 4, normalized-entropy: 0.9993375041688846, [(2, 34), (3, 32)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [33, 55, 0]]
** centroid: 5, normalized-entropy: 0.954434002924965, [(1, 33), (2, 55)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [50, 33, 0]]
** centroid: 6, normalized-entropy: 0.9695235828220429, [(1, 50), (2, 33)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [77, 34, 0]]
** centroid: 7, normalized-entropy: 0.8888636119715568, [(1, 77), (2, 34)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5172849858003842] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5172849858003842, 0.31190229410042725] ***
*** starting iteration: 2; err: [Inf, 0.5172849858003842, 0.31190229410042725] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5172849858003842, 0.31190229410042725, 0.29606749113179276] ***
*** starting iteration: 3; err: [Inf, 0.5172849858003842, 0.31190229410042725, 0.29606749113179276] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5172849858003842, 0.31190229410042725, 0.29606749113179276, 0.2920140900464544] ***
*** starting iteration: 4; err: [Inf, 0.5172849858003842, 0.31190229410042725, 0.29606749113179276, 0.2920140900464544] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5172849858003842, 0.31190229410042725, 0.29606749113179276, 0.2920140900464544, 0.2899437141325045] ***
*** starting iteration: 5; err: [Inf, 0.5172849858003842, 0.31190229410042725, 0.29606749113179276, 0.2920140900464544, 0.2899437141325045] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5172849858003842, 0.31190229410042725, 0.29606749113179276, 0.2920140900464544, 0.2899437141325045, 0.2889699964104472] ***
*** finished computation of 3 references, err: [Inf, 0.5172849858003842, 0.31190229410042725, 0.29606749113179276, 0.2920140900464544, 0.2899437141325045, 0.2889699964104472] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 189, 18]]
** centroid: 1, normalized-entropy: 0.42622865699814483, [(2, 189), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [245, 11, 0]]
** centroid: 2, normalized-entropy: 0.2557420200756249, [(1, 245), (2, 11)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [152, 51, 0]]
** centroid: 3, normalized-entropy: 0.8132242202198007, [(1, 152), (2, 51)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5420489807011395] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5420489807011395, 0.33868409396390775] ***
*** starting iteration: 2; err: [Inf, 0.5420489807011395, 0.33868409396390775] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5420489807011395, 0.33868409396390775, 0.3309181840473163] ***
*** starting iteration: 3; err: [Inf, 0.5420489807011395, 0.33868409396390775, 0.3309181840473163] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5420489807011395, 0.33868409396390775, 0.3309181840473163, 0.32829015515744686] ***
*** starting iteration: 4; err: [Inf, 0.5420489807011395, 0.33868409396390775, 0.3309181840473163, 0.32829015515744686] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5420489807011395, 0.33868409396390775, 0.3309181840473163, 0.32829015515744686, 0.3263570518530291] ***
*** starting iteration: 5; err: [Inf, 0.5420489807011395, 0.33868409396390775, 0.3309181840473163, 0.32829015515744686, 0.3263570518530291] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5420489807011395, 0.33868409396390775, 0.3309181840473163, 0.32829015515744686, 0.3263570518530291, 0.32520703536582585] ***
*** starting iteration: 6; err: [Inf, 0.5420489807011395, 0.33868409396390775, 0.3309181840473163, 0.32829015515744686, 0.3263570518530291, 0.32520703536582585] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5420489807011395, 0.33868409396390775, 0.3309181840473163, 0.32829015515744686, 0.3263570518530291, 0.32520703536582585, 0.3246053185528968] ***
*** finished computation of 3 references, err: [Inf, 0.5420489807011395, 0.33868409396390775, 0.3309181840473163, 0.32829015515744686, 0.3263570518530291, 0.32520703536582585, 0.3246053185528968] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [53, 132, 24]]
** centroid: 1, normalized-entropy: 0.8071045124006434, [(1, 53), (2, 132), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [236, 8, 0]]
** centroid: 2, normalized-entropy: 0.20818094555717087, [(1, 236), (2, 8)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [127, 87, 0]]
** centroid: 3, normalized-entropy: 0.974649045471687, [(1, 127), (2, 87)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3613014741978054] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3613014741978054, 0.2952901042699032] ***
*** starting iteration: 2; err: [Inf, 0.3613014741978054, 0.2952901042699032] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3613014741978054, 0.2952901042699032, 0.2945520592213928] ***
*** finished computation of 3 references, err: [Inf, 0.3613014741978054, 0.2952901042699032, 0.2945520592213928] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [229, 3, 0]]
** centroid: 1, normalized-entropy: 0.09965101678117703, [(1, 229), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [136, 90, 0]]
** centroid: 2, normalized-entropy: 0.9699058425934317, [(1, 136), (2, 90)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [34, 143, 32]]
** centroid: 3, normalized-entropy: 0.7667840864497903, [(1, 34), (2, 143), (3, 32)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4060142699076139] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4060142699076139, 0.3007345804204603] ***
*** starting iteration: 2; err: [Inf, 0.4060142699076139, 0.3007345804204603] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4060142699076139, 0.3007345804204603, 0.29422715446189873] ***
*** starting iteration: 3; err: [Inf, 0.4060142699076139, 0.3007345804204603, 0.29422715446189873] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4060142699076139, 0.3007345804204603, 0.29422715446189873, 0.29313474138319] ***
*** starting iteration: 4; err: [Inf, 0.4060142699076139, 0.3007345804204603, 0.29422715446189873, 0.29313474138319] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4060142699076139, 0.3007345804204603, 0.29422715446189873, 0.29313474138319, 0.2923278240333388] ***
*** finished computation of 3 references, err: [Inf, 0.4060142699076139, 0.3007345804204603, 0.29422715446189873, 0.29313474138319, 0.2923278240333388] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [247, 14, 0]]
** centroid: 1, normalized-entropy: 0.30166203063033736, [(1, 247), (2, 14)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 148, 32]]
** centroid: 2, normalized-entropy: 0.6751914401458716, [(2, 148), (3, 32)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [152, 74, 0]]
** centroid: 3, normalized-entropy: 0.9122828071055981, [(1, 152), (2, 74)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.21851849445077526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21851849445077526, 0.18999354012014047] ***
*** starting iteration: 2; err: [Inf, 0.21851849445077526, 0.18999354012014047] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21851849445077526, 0.18999354012014047, 0.1863090803681708] ***
*** starting iteration: 3; err: [Inf, 0.21851849445077526, 0.18999354012014047, 0.1863090803681708] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21851849445077526, 0.18999354012014047, 0.1863090803681708, 0.18502864921563403] ***
*** starting iteration: 4; err: [Inf, 0.21851849445077526, 0.18999354012014047, 0.1863090803681708, 0.18502864921563403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21851849445077526, 0.18999354012014047, 0.1863090803681708, 0.18502864921563403, 0.18462453187546796] ***
*** finished computation of 7 references, err: [Inf, 0.21851849445077526, 0.18999354012014047, 0.1863090803681708, 0.18502864921563403, 0.18462453187546796] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [34, 77, 0]]
** centroid: 1, normalized-entropy: 0.8888636119715568, [(1, 34), (2, 77)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [54, 30, 0]]
** centroid: 2, normalized-entropy: 0.940285958670631, [(1, 54), (2, 30)]
*** center 3: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [49, 47, 0]]
** centroid: 4, normalized-entropy: 0.999686892486842, [(1, 49), (2, 47)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 96, 18]]
** centroid: 5, normalized-entropy: 0.6292492238560344, [(2, 96), (3, 18)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [97, 1, 0]]
** centroid: 6, normalized-entropy: 0.08214305133815322, [(1, 97), (2, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2377686747859443] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2377686747859443, 0.190712068979021] ***
*** starting iteration: 2; err: [Inf, 0.2377686747859443, 0.190712068979021] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2377686747859443, 0.190712068979021, 0.18772086025127718] ***
*** starting iteration: 3; err: [Inf, 0.2377686747859443, 0.190712068979021, 0.18772086025127718] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2377686747859443, 0.190712068979021, 0.18772086025127718, 0.18702096562983392] ***
*** finished computation of 7 references, err: [Inf, 0.2377686747859443, 0.190712068979021, 0.18772086025127718, 0.18702096562983392] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 82, 19]]
** centroid: 1, normalized-entropy: 0.6975195309289136, [(2, 82), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [73, 11, 0]]
** centroid: 3, normalized-entropy: 0.5600443203590992, [(1, 73), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [87, 27, 0]]
** centroid: 4, normalized-entropy: 0.7897492536625221, [(1, 87), (2, 27)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [87, 25, 0]]
** centroid: 5, normalized-entropy: 0.765993414171823, [(1, 87), (2, 25)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 82, 5]]
** centroid: 6, normalized-entropy: 0.3173238998358585, [(2, 82), (3, 5)]
*** center 7: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.240952310030875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.240952310030875, 0.19044400558065527] ***
*** starting iteration: 2; err: [Inf, 0.240952310030875, 0.19044400558065527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.240952310030875, 0.19044400558065527, 0.18864577233503715] ***
*** starting iteration: 3; err: [Inf, 0.240952310030875, 0.19044400558065527, 0.18864577233503715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.240952310030875, 0.19044400558065527, 0.18864577233503715, 0.18764178456970373] ***
*** starting iteration: 4; err: [Inf, 0.240952310030875, 0.19044400558065527, 0.18864577233503715, 0.18764178456970373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.240952310030875, 0.19044400558065527, 0.18864577233503715, 0.18764178456970373, 0.18708511032834313] ***
*** finished computation of 7 references, err: [Inf, 0.240952310030875, 0.19044400558065527, 0.18864577233503715, 0.18764178456970373, 0.18708511032834313] ***
*** center 1: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [79, 15, 0]]
** centroid: 2, normalized-entropy: 0.6332905746550958, [(1, 79), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 78, 32]]
** centroid: 3, normalized-entropy: 0.8698926856041562, [(2, 78), (3, 32)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [93, 20, 0]]
** centroid: 4, normalized-entropy: 0.6734503665674518, [(1, 93), (2, 20)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 85, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [60, 38, 0]]
** centroid: 7, normalized-entropy: 0.9633355456726842, [(1, 60), (2, 38)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 7)
[0.9269898641156127, 0.9140397882912853, 0.8990307672942404, 0.8850077622532712, 0.8769997542452632, 0.8740387093680506, 0.795996595397793]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 10, 1.0, :fft, 0.6, 1) => 0.9269898641156127
finished with 7
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 7)
[0.9269898641156127, 0.9140397882912853, 0.8990307672942404, 0.8850077622532712, 0.8769997542452632, 0.8740387093680506, 0.795996595397793]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 10, 1.0, :fft, 0.6, 1) => 0.9269898641156127
finished with 7
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 7)
[0.9269898641156127, 0.9140397882912853, 0.8990307672942404, 0.8850077622532712, 0.8769997542452632, 0.8740387093680506, 0.795996595397793]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 10, 1.0, :fft, 0.6, 1) => 0.9269898641156127
finished with 8
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.2562583806328811] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2562583806328811, 0.2062360584335933] ***
*** finished computation of 7 references, err: [Inf, 0.2562583806328811, 0.2062360584335933] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [115, 3, 0]]
** centroid: 1, normalized-entropy: 0.17089522427059886, [(1, 115), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 121, 1]]
** centroid: 2, normalized-entropy: 0.06858609403644415, [(2, 121), (3, 1)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [23, 101, 17]]
** centroid: 3, normalized-entropy: 0.7189403716752478, [(1, 23), (2, 101), (3, 17)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [60, 22, 0]]
** centroid: 4, normalized-entropy: 0.8390040613676978, [(1, 60), (2, 22)]
*** center 5: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [57, 4, 0]]
** centroid: 6, normalized-entropy: 0.34918437350730797, [(1, 57), (2, 4)]
*** center 7: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2697740366495308] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2697740366495308, 0.21436208654599992] ***
*** finished computation of 7 references, err: [Inf, 0.2697740366495308, 0.21436208654599992] ***
*** center 1: selecting labels [1] (freq >= 1) [from [162, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 106, 2]]
** centroid: 2, normalized-entropy: 0.13303964861069897, [(2, 106), (3, 2)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [39, 66, 0]]
** centroid: 3, normalized-entropy: 0.9517626756348312, [(1, 39), (2, 66)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 40, 22]]
** centroid: 4, normalized-entropy: 0.9383153522334071, [(2, 40), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [64, 8, 0]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(1, 64), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [115, 2, 0]]
** centroid: 6, normalized-entropy: 0.1247975754927792, [(1, 115), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [36, 5, 0]]
** centroid: 7, normalized-entropy: 0.5349436990971067, [(1, 36), (2, 5)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3062640363895062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3062640363895062, 0.21370631674195695] ***
*** finished computation of 7 references, err: [Inf, 0.3062640363895062, 0.21370631674195695] ***
*** center 1: selecting labels [1] (freq >= 1) [from [157, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [36, 10, 0]]
** centroid: 2, normalized-entropy: 0.7553754125614286, [(1, 36), (2, 10)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [96, 44, 0]]
** centroid: 3, normalized-entropy: 0.8980587934501658, [(1, 96), (2, 44)]
*** center 4: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [2, 90, 4]]
** centroid: 5, normalized-entropy: 0.24901759888062894, [(1, 2), (2, 90), (3, 4)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 70, 28]]
** centroid: 6, normalized-entropy: 0.8631205685666311, [(2, 70), (3, 28)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [27, 22, 0]]
** centroid: 7, normalized-entropy: 0.9924760039430819, [(1, 27), (2, 22)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 8)
[0.9269898641156127, 0.9140397882912853, 0.8990307672942404, 0.8860327393261525, 0.8850077622532712, 0.8769997542452632, 0.8740387093680506, 0.795996595397793]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 10, 1.0, :fft, 0.6, 1) => 0.9269898641156127
finished with 10
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.3644902318109151] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3644902318109151, 0.2364123947366054] ***
*** finished computation of 3 references, err: [Inf, 0.3644902318109151, 0.2364123947366054] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [102, 161, 18]]
** centroid: 1, normalized-entropy: 0.7855190923511725, [(1, 102), (2, 161), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [101, 90, 0]]
** centroid: 2, normalized-entropy: 0.9976061137551098, [(1, 101), (2, 90)]
*** center 3: selecting labels [1] (freq >= 2) [from [194, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33476364913199663] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33476364913199663, 0.23152405006121257] ***
*** finished computation of 3 references, err: [Inf, 0.33476364913199663, 0.23152405006121257] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [267, 22, 0]]
** centroid: 1, normalized-entropy: 0.38837443900380186, [(1, 267), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [149, 48, 0]]
** centroid: 2, normalized-entropy: 0.8010654763930384, [(1, 149), (2, 48)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 157, 24]]
** centroid: 3, normalized-entropy: 0.5645168396064474, [(2, 157), (3, 24)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3466099217021628] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3466099217021628, 0.23296015914194454] ***
*** finished computation of 3 references, err: [Inf, 0.3466099217021628, 0.23296015914194454] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [242, 30, 0]]
** centroid: 1, normalized-entropy: 0.5008024688653857, [(1, 242), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [157, 60, 0]]
** centroid: 2, normalized-entropy: 0.8506346734007164, [(1, 157), (2, 60)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 146, 32]]
** centroid: 3, normalized-entropy: 0.6795851972782937, [(2, 146), (3, 32)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3650855107272083] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3650855107272083, 0.30303307652596506] ***
*** finished computation of 3 references, err: [Inf, 0.3650855107272083, 0.30303307652596506] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [279, 47, 0]]
** centroid: 1, normalized-entropy: 0.5950609087427575, [(1, 279), (2, 47)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 159, 18]]
** centroid: 2, normalized-entropy: 0.4743454375622396, [(2, 159), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [118, 45, 0]]
** centroid: 3, normalized-entropy: 0.8500455213505094, [(1, 118), (2, 45)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3995318092542632] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3995318092542632, 0.2951871491549746] ***
*** finished computation of 3 references, err: [Inf, 0.3995318092542632, 0.2951871491549746] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [268, 18, 0]]
** centroid: 1, normalized-entropy: 0.3389952770978139, [(1, 268), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [148, 27, 0]]
** centroid: 2, normalized-entropy: 0.6204621937094819, [(1, 148), (2, 27)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 182, 24]]
** centroid: 3, normalized-entropy: 0.519230019739187, [(2, 182), (3, 24)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4568582526010194] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4568582526010194, 0.3041129215820127] ***
*** finished computation of 3 references, err: [Inf, 0.4568582526010194, 0.3041129215820127] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [88, 132, 32]]
** centroid: 1, normalized-entropy: 0.8812599826580153, [(1, 88), (2, 132), (3, 32)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [115, 104, 0]]
** centroid: 2, normalized-entropy: 0.9981793584811884, [(1, 115), (2, 104)]
*** center 3: selecting labels [1] (freq >= 2) [from [196, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 10)
[0.9269898641156127, 0.9140397882912853, 0.8990307672942404, 0.8860327393261525, 0.8850077622532712, 0.8769997542452632, 0.8740387093680506, 0.8310166453879028, 0.8180575785366204, 0.795996595397793]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 10, 1.0, :fft, 0.6, 1) => 0.9269898641156127
finished with 10
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 10)
[0.9269898641156127, 0.9140397882912853, 0.8990307672942404, 0.8860327393261525, 0.8850077622532712, 0.8769997542452632, 0.8740387093680506, 0.8310166453879028, 0.8180575785366204, 0.795996595397793]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 10, 1.0, :fft, 0.6, 1) => 0.9269898641156127
finished with 11
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.29420056789917676] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29420056789917676, 0.26585892489034535] ***
*** starting iteration: 2; err: [Inf, 0.29420056789917676, 0.26585892489034535] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29420056789917676, 0.26585892489034535, 0.24668491380107407] ***
*** starting iteration: 3; err: [Inf, 0.29420056789917676, 0.26585892489034535, 0.24668491380107407] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29420056789917676, 0.26585892489034535, 0.24668491380107407, 0.23495357223386476] ***
*** starting iteration: 4; err: [Inf, 0.29420056789917676, 0.26585892489034535, 0.24668491380107407, 0.23495357223386476] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29420056789917676, 0.26585892489034535, 0.24668491380107407, 0.23495357223386476, 0.2343443863082666] ***
*** finished computation of 3 references, err: [Inf, 0.29420056789917676, 0.26585892489034535, 0.24668491380107407, 0.23495357223386476, 0.2343443863082666] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [73, 148, 18]]
** centroid: 1, normalized-entropy: 0.7771582205475364, [(1, 73), (2, 148), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [222, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [102, 103, 0]]
** centroid: 3, normalized-entropy: 0.9999828352080604, [(1, 102), (2, 103)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33363863247177233] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33363863247177233, 0.25791659958610336] ***
*** starting iteration: 2; err: [Inf, 0.33363863247177233, 0.25791659958610336] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33363863247177233, 0.25791659958610336, 0.24056165043482447] ***
*** starting iteration: 3; err: [Inf, 0.33363863247177233, 0.25791659958610336, 0.24056165043482447] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33363863247177233, 0.25791659958610336, 0.24056165043482447, 0.23820406393143817] ***
*** starting iteration: 4; err: [Inf, 0.33363863247177233, 0.25791659958610336, 0.24056165043482447, 0.23820406393143817] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33363863247177233, 0.25791659958610336, 0.24056165043482447, 0.23820406393143817, 0.23823817015235974] ***
*** finished computation of 3 references, err: [Inf, 0.33363863247177233, 0.25791659958610336, 0.24056165043482447, 0.23820406393143817, 0.23823817015235974] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [107, 107, 18]]
** centroid: 1, normalized-entropy: 0.8303226080212107, [(1, 107), (2, 107), (3, 18)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [110, 120, 6]]
** centroid: 2, normalized-entropy: 0.7218733174900682, [(1, 110), (2, 120), (3, 6)]
*** center 3: selecting labels [1] (freq >= 1) [from [199, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.34295665920674356] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34295665920674356, 0.2679232271427269] ***
*** starting iteration: 2; err: [Inf, 0.34295665920674356, 0.2679232271427269] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34295665920674356, 0.2679232271427269, 0.24816036768218522] ***
*** starting iteration: 3; err: [Inf, 0.34295665920674356, 0.2679232271427269, 0.24816036768218522] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34295665920674356, 0.2679232271427269, 0.24816036768218522, 0.2412161271306344] ***
*** starting iteration: 4; err: [Inf, 0.34295665920674356, 0.2679232271427269, 0.24816036768218522, 0.2412161271306344] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34295665920674356, 0.2679232271427269, 0.24816036768218522, 0.2412161271306344, 0.24053238212191005] ***
*** finished computation of 3 references, err: [Inf, 0.34295665920674356, 0.2679232271427269, 0.24816036768218522, 0.2412161271306344, 0.24053238212191005] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [73, 160, 32]]
** centroid: 1, normalized-entropy: 0.8329324557616331, [(1, 73), (2, 160), (3, 32)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [113, 75, 0]]
** centroid: 2, normalized-entropy: 0.9703248913579179, [(1, 113), (2, 75)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [213, 1, 0]]
** centroid: 3, normalized-entropy: 0.04290086907356038, [(1, 213), (2, 1)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 11)
[0.9269898641156127, 0.9140397882912853, 0.8990307672942404, 0.8860327393261525, 0.8850077622532712, 0.8769997542452632, 0.8740387093680506, 0.8310166453879028, 0.8180575785366204, 0.795996595397793, 0.766964569359779]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 10, 1.0, :fft, 0.6, 1) => 0.9269898641156127
finished with 11
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 11)
[0.9269898641156127, 0.9140397882912853, 0.8990307672942404, 0.8860327393261525, 0.8850077622532712, 0.8769997542452632, 0.8740387093680506, 0.8310166453879028, 0.8180575785366204, 0.795996595397793, 0.766964569359779]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 10, 1.0, :fft, 0.6, 1) => 0.9269898641156127
finished with 11
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.496977453856729] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.496977453856729, 0.29514709922857585] ***
*** starting iteration: 2; err: [Inf, 0.496977453856729, 0.29514709922857585] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.496977453856729, 0.29514709922857585, 0.2945697694029659] ***
*** finished computation of 3 references, err: [Inf, 0.496977453856729, 0.29514709922857585, 0.2945697694029659] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [78, 240, 37]]
** centroid: 1, normalized-entropy: 0.7585016357976576, [(1, 78), (2, 240), (3, 37)]
*** center 2: selecting labels [1] (freq >= 1) [from [327, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [201, 117, 0]]
** centroid: 3, normalized-entropy: 0.9490651498811383, [(1, 201), (2, 117)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4250082225725055] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4250082225725055, 0.2882939363196492] ***
*** starting iteration: 2; err: [Inf, 0.4250082225725055, 0.2882939363196492] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4250082225725055, 0.2882939363196492, 0.2862828466966748] ***
*** starting iteration: 3; err: [Inf, 0.4250082225725055, 0.2882939363196492, 0.2862828466966748] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4250082225725055, 0.2882939363196492, 0.2862828466966748, 0.28591184236854317] ***
*** finished computation of 3 references, err: [Inf, 0.4250082225725055, 0.2882939363196492, 0.2862828466966748, 0.28591184236854317] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [41, 113, 14]]
** centroid: 1, normalized-entropy: 0.7445966427985813, [(1, 41), (2, 113), (3, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [79, 71, 0]]
** centroid: 2, normalized-entropy: 0.9979471932237238, [(1, 79), (2, 71)]
*** center 3: selecting labels [1] (freq >= 1) [from [182, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3936580188963562] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3936580188963562, 0.31582921397313474] ***
*** starting iteration: 2; err: [Inf, 0.3936580188963562, 0.31582921397313474] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3936580188963562, 0.31582921397313474, 0.30011834168061613] ***
*** starting iteration: 3; err: [Inf, 0.3936580188963562, 0.31582921397313474, 0.30011834168061613] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3936580188963562, 0.31582921397313474, 0.30011834168061613, 0.2940878486298025] ***
*** starting iteration: 4; err: [Inf, 0.3936580188963562, 0.31582921397313474, 0.30011834168061613, 0.2940878486298025] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3936580188963562, 0.31582921397313474, 0.30011834168061613, 0.2940878486298025, 0.29233949578553436] ***
*** starting iteration: 5; err: [Inf, 0.3936580188963562, 0.31582921397313474, 0.30011834168061613, 0.2940878486298025, 0.29233949578553436] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3936580188963562, 0.31582921397313474, 0.30011834168061613, 0.2940878486298025, 0.29233949578553436, 0.29133000077772886] ***
*** starting iteration: 6; err: [Inf, 0.3936580188963562, 0.31582921397313474, 0.30011834168061613, 0.2940878486298025, 0.29233949578553436, 0.29133000077772886] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3936580188963562, 0.31582921397313474, 0.30011834168061613, 0.2940878486298025, 0.29233949578553436, 0.29133000077772886, 0.29120042811892927] ***
*** finished computation of 3 references, err: [Inf, 0.3936580188963562, 0.31582921397313474, 0.30011834168061613, 0.2940878486298025, 0.29233949578553436, 0.29133000077772886, 0.29120042811892927] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [47, 117, 13]]
** centroid: 1, normalized-entropy: 0.7441482008142916, [(1, 47), (2, 117), (3, 13)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [90, 64, 0]]
** centroid: 2, normalized-entropy: 0.9793399259567798, [(1, 90), (2, 64)]
*** center 3: selecting labels [1] (freq >= 1) [from [169, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.47765775763615964] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47765775763615964, 0.29363805121555925] ***
*** starting iteration: 2; err: [Inf, 0.47765775763615964, 0.29363805121555925] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47765775763615964, 0.29363805121555925, 0.29161800438165664] ***
*** starting iteration: 3; err: [Inf, 0.47765775763615964, 0.29363805121555925, 0.29161800438165664] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47765775763615964, 0.29363805121555925, 0.29161800438165664, 0.2905369581123814] ***
*** starting iteration: 4; err: [Inf, 0.47765775763615964, 0.29363805121555925, 0.29161800438165664, 0.2905369581123814] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47765775763615964, 0.29363805121555925, 0.29161800438165664, 0.2905369581123814, 0.28981137106288224] ***
*** finished computation of 3 references, err: [Inf, 0.47765775763615964, 0.29363805121555925, 0.29161800438165664, 0.2905369581123814, 0.28981137106288224] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [193, 12, 0]]
** centroid: 1, normalized-entropy: 0.3216081082791368, [(1, 193), (2, 12)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 135, 20]]
** centroid: 2, normalized-entropy: 0.5547781633412736, [(2, 135), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [110, 30, 0]]
** centroid: 3, normalized-entropy: 0.7495952572594798, [(1, 110), (2, 30)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.46826582971215247] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46826582971215247, 0.2990729559287429] ***
*** starting iteration: 2; err: [Inf, 0.46826582971215247, 0.2990729559287429] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46826582971215247, 0.2990729559287429, 0.2947297672331333] ***
*** starting iteration: 3; err: [Inf, 0.46826582971215247, 0.2990729559287429, 0.2947297672331333] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46826582971215247, 0.2990729559287429, 0.2947297672331333, 0.29265067012421786] ***
*** starting iteration: 4; err: [Inf, 0.46826582971215247, 0.2990729559287429, 0.2947297672331333, 0.29265067012421786] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46826582971215247, 0.2990729559287429, 0.2947297672331333, 0.29265067012421786, 0.2915917388107628] ***
*** starting iteration: 5; err: [Inf, 0.46826582971215247, 0.2990729559287429, 0.2947297672331333, 0.29265067012421786, 0.2915917388107628] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46826582971215247, 0.2990729559287429, 0.2947297672331333, 0.29265067012421786, 0.2915917388107628, 0.29111753590218725] ***
*** finished computation of 3 references, err: [Inf, 0.46826582971215247, 0.2990729559287429, 0.2947297672331333, 0.29265067012421786, 0.2915917388107628, 0.29111753590218725] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [42, 119, 18]]
** centroid: 1, normalized-entropy: 0.7669276436451885, [(1, 42), (2, 119), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [88, 66, 0]]
** centroid: 2, normalized-entropy: 0.9852281360342514, [(1, 88), (2, 66)]
*** center 3: selecting labels [1] (freq >= 1) [from [167, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3773580969125032] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3773580969125032, 0.305173525493592] ***
*** starting iteration: 2; err: [Inf, 0.3773580969125032, 0.305173525493592] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3773580969125032, 0.305173525493592, 0.3029464851692319] ***
*** starting iteration: 3; err: [Inf, 0.3773580969125032, 0.305173525493592, 0.3029464851692319] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3773580969125032, 0.305173525493592, 0.3029464851692319, 0.3016054014889523] ***
*** starting iteration: 4; err: [Inf, 0.3773580969125032, 0.305173525493592, 0.3029464851692319, 0.3016054014889523] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3773580969125032, 0.305173525493592, 0.3029464851692319, 0.3016054014889523, 0.30027904511615633] ***
*** starting iteration: 5; err: [Inf, 0.3773580969125032, 0.305173525493592, 0.3029464851692319, 0.3016054014889523, 0.30027904511615633] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3773580969125032, 0.305173525493592, 0.3029464851692319, 0.3016054014889523, 0.30027904511615633, 0.29966514572687447] ***
*** finished computation of 3 references, err: [Inf, 0.3773580969125032, 0.305173525493592, 0.3029464851692319, 0.3016054014889523, 0.30027904511615633, 0.29966514572687447] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [175, 22, 0]]
** centroid: 1, normalized-entropy: 0.504948062194051, [(1, 175), (2, 22)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 133, 21]]
** centroid: 2, normalized-entropy: 0.5746356978376794, [(2, 133), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [133, 16, 0]]
** centroid: 3, normalized-entropy: 0.4919701048805628, [(1, 133), (2, 16)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4438480043411255] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4438480043411255, 0.29401005653850737] ***
*** starting iteration: 2; err: [Inf, 0.4438480043411255, 0.29401005653850737] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4438480043411255, 0.29401005653850737, 0.29073844207823274] ***
*** starting iteration: 3; err: [Inf, 0.4438480043411255, 0.29401005653850737, 0.29073844207823274] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4438480043411255, 0.29401005653850737, 0.29073844207823274, 0.2902252952866256] ***
*** finished computation of 3 references, err: [Inf, 0.4438480043411255, 0.29401005653850737, 0.29073844207823274, 0.2902252952866256] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [207, 6, 0]]
** centroid: 1, normalized-entropy: 0.18512476010054582, [(1, 207), (2, 6)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 123, 14]]
** centroid: 2, normalized-entropy: 0.47589884890554157, [(2, 123), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [104, 46, 0]]
** centroid: 3, normalized-entropy: 0.8892881527272397, [(1, 104), (2, 46)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.478827245682478] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.478827245682478, 0.2940429752357304] ***
*** starting iteration: 2; err: [Inf, 0.478827245682478, 0.2940429752357304] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.478827245682478, 0.2940429752357304, 0.29229202381148933] ***
*** starting iteration: 3; err: [Inf, 0.478827245682478, 0.2940429752357304, 0.29229202381148933] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.478827245682478, 0.2940429752357304, 0.29229202381148933, 0.29149001102894545] ***
*** finished computation of 3 references, err: [Inf, 0.478827245682478, 0.2940429752357304, 0.29229202381148933, 0.29149001102894545] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [1, 150, 15]]
** centroid: 1, normalized-entropy: 0.30911902749428194, [(1, 1), (2, 150), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [185, 8, 0]]
** centroid: 2, normalized-entropy: 0.24890486008923202, [(1, 185), (2, 8)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [109, 32, 0]]
** centroid: 3, normalized-entropy: 0.7726570871457087, [(1, 109), (2, 32)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37632713893428443] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37632713893428443, 0.29672833484038713] ***
*** starting iteration: 2; err: [Inf, 0.37632713893428443, 0.29672833484038713] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37632713893428443, 0.29672833484038713, 0.2966553707569838] ***
*** finished computation of 3 references, err: [Inf, 0.37632713893428443, 0.29672833484038713, 0.2966553707569838] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [205, 23, 0]]
** centroid: 1, normalized-entropy: 0.471770078252778, [(1, 205), (2, 23)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 134, 21]]
** centroid: 2, normalized-entropy: 0.5722881639858797, [(2, 134), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [89, 28, 0]]
** centroid: 3, normalized-entropy: 0.7939013591250944, [(1, 89), (2, 28)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.48496627384424207] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.48496627384424207, 0.30018056327383963] ***
*** starting iteration: 2; err: [Inf, 0.48496627384424207, 0.30018056327383963] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.48496627384424207, 0.30018056327383963, 0.29808544264733794] ***
*** starting iteration: 3; err: [Inf, 0.48496627384424207, 0.30018056327383963, 0.29808544264733794] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.48496627384424207, 0.30018056327383963, 0.29808544264733794, 0.2975729234246537] ***
*** finished computation of 3 references, err: [Inf, 0.48496627384424207, 0.30018056327383963, 0.29808544264733794, 0.2975729234246537] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 132, 24]]
** centroid: 1, normalized-entropy: 0.6193821946787638, [(2, 132), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [186, 2, 0]]
** centroid: 2, normalized-entropy: 0.0849955598367127, [(1, 186), (2, 2)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [107, 49, 0]]
** centroid: 3, normalized-entropy: 0.8978525399739923, [(1, 107), (2, 49)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4883561972603202] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4883561972603202, 0.29827799010649325] ***
*** starting iteration: 2; err: [Inf, 0.4883561972603202, 0.29827799010649325] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4883561972603202, 0.29827799010649325, 0.29598567201197146] ***
*** starting iteration: 3; err: [Inf, 0.4883561972603202, 0.29827799010649325, 0.29598567201197146] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4883561972603202, 0.29827799010649325, 0.29598567201197146, 0.29481908682733776] ***
*** starting iteration: 4; err: [Inf, 0.4883561972603202, 0.29827799010649325, 0.29598567201197146, 0.29481908682733776] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4883561972603202, 0.29827799010649325, 0.29598567201197146, 0.29481908682733776, 0.2940298967622221] ***
*** finished computation of 3 references, err: [Inf, 0.4883561972603202, 0.29827799010649325, 0.29598567201197146, 0.29481908682733776, 0.2940298967622221] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [193, 5, 0]]
** centroid: 1, normalized-entropy: 0.1699937480231636, [(1, 193), (2, 5)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 138, 20]]
** centroid: 2, normalized-entropy: 0.5479900080939728, [(2, 138), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [119, 25, 0]]
** centroid: 3, normalized-entropy: 0.665899177983886, [(1, 119), (2, 25)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5170086785778403] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5170086785778403, 0.3034146590922028] ***
*** starting iteration: 2; err: [Inf, 0.5170086785778403, 0.3034146590922028] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5170086785778403, 0.3034146590922028, 0.30112287916243075] ***
*** starting iteration: 3; err: [Inf, 0.5170086785778403, 0.3034146590922028, 0.30112287916243075] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5170086785778403, 0.3034146590922028, 0.30112287916243075, 0.3011801771800965] ***
*** finished computation of 3 references, err: [Inf, 0.5170086785778403, 0.3034146590922028, 0.30112287916243075, 0.3011801771800965] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [44, 131, 19]]
** centroid: 1, normalized-entropy: 0.7547710659251893, [(1, 44), (2, 131), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [162, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [104, 40, 0]]
** centroid: 3, normalized-entropy: 0.8524051786494784, [(1, 104), (2, 40)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3840043182275258] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3840043182275258, 0.30381644804403185] ***
*** starting iteration: 2; err: [Inf, 0.3840043182275258, 0.30381644804403185] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3840043182275258, 0.30381644804403185, 0.2975403150636703] ***
*** starting iteration: 3; err: [Inf, 0.3840043182275258, 0.30381644804403185, 0.2975403150636703] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3840043182275258, 0.30381644804403185, 0.2975403150636703, 0.29636332562938333] ***
*** starting iteration: 4; err: [Inf, 0.3840043182275258, 0.30381644804403185, 0.2975403150636703, 0.29636332562938333] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3840043182275258, 0.30381644804403185, 0.2975403150636703, 0.29636332562938333, 0.2958260875158012] ***
*** finished computation of 3 references, err: [Inf, 0.3840043182275258, 0.30381644804403185, 0.2975403150636703, 0.29636332562938333, 0.2958260875158012] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [57, 101, 15]]
** centroid: 1, normalized-entropy: 0.8119417999410414, [(1, 57), (2, 101), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [98, 69, 0]]
** centroid: 2, normalized-entropy: 0.9781369137855249, [(1, 98), (2, 69)]
*** center 3: selecting labels [1] (freq >= 1) [from [160, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3963938414733857] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3963938414733857, 0.2949246606826782] ***
*** starting iteration: 2; err: [Inf, 0.3963938414733857, 0.2949246606826782] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3963938414733857, 0.2949246606826782, 0.29227516017481686] ***
*** starting iteration: 3; err: [Inf, 0.3963938414733857, 0.2949246606826782, 0.29227516017481686] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3963938414733857, 0.2949246606826782, 0.29227516017481686, 0.2915779465129599] ***
*** finished computation of 3 references, err: [Inf, 0.3963938414733857, 0.2949246606826782, 0.29227516017481686, 0.2915779465129599] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [191, 7, 0]]
** centroid: 1, normalized-entropy: 0.22056676851783585, [(1, 191), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [115, 45, 0]]
** centroid: 2, normalized-entropy: 0.8571484374283717, [(1, 115), (2, 45)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 124, 18]]
** centroid: 3, normalized-entropy: 0.5484866088431741, [(2, 124), (3, 18)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3847485382854938] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3847485382854938, 0.31273452429473403] ***
*** starting iteration: 2; err: [Inf, 0.3847485382854938, 0.31273452429473403] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3847485382854938, 0.31273452429473403, 0.29984961421042683] ***
*** starting iteration: 3; err: [Inf, 0.3847485382854938, 0.31273452429473403, 0.29984961421042683] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3847485382854938, 0.31273452429473403, 0.29984961421042683, 0.2951729095373303] ***
*** starting iteration: 4; err: [Inf, 0.3847485382854938, 0.31273452429473403, 0.29984961421042683, 0.2951729095373303] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3847485382854938, 0.31273452429473403, 0.29984961421042683, 0.2951729095373303, 0.29429659512639045] ***
*** finished computation of 3 references, err: [Inf, 0.3847485382854938, 0.31273452429473403, 0.29984961421042683, 0.2951729095373303, 0.29429659512639045] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [46, 97, 17]]
** centroid: 1, normalized-entropy: 0.8192079903918227, [(1, 46), (2, 97), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [184, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [71, 85, 0]]
** centroid: 3, normalized-entropy: 0.9941825069613697, [(1, 71), (2, 85)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.40634834541007875] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40634834541007875, 0.28725864047557115] ***
*** starting iteration: 2; err: [Inf, 0.40634834541007875, 0.28725864047557115] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40634834541007875, 0.28725864047557115, 0.28675624606385824] ***
*** finished computation of 3 references, err: [Inf, 0.40634834541007875, 0.28725864047557115, 0.28675624606385824] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [50, 137, 19]]
** centroid: 1, normalized-entropy: 0.75982711261999, [(1, 50), (2, 137), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [92, 43, 0]]
** centroid: 2, normalized-entropy: 0.9027631199439022, [(1, 92), (2, 43)]
*** center 3: selecting labels [1] (freq >= 1) [from [159, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39803316655009985] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39803316655009985, 0.29020548598654566] ***
*** starting iteration: 2; err: [Inf, 0.39803316655009985, 0.29020548598654566] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39803316655009985, 0.29020548598654566, 0.28749963955581187] ***
*** starting iteration: 3; err: [Inf, 0.39803316655009985, 0.29020548598654566, 0.28749963955581187] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39803316655009985, 0.29020548598654566, 0.28749963955581187, 0.28689301407337187] ***
*** finished computation of 3 references, err: [Inf, 0.39803316655009985, 0.29020548598654566, 0.28749963955581187, 0.28689301407337187] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [195, 8, 0]]
** centroid: 1, normalized-entropy: 0.23957527097249612, [(1, 195), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [98, 59, 0]]
** centroid: 2, normalized-entropy: 0.9550188085372382, [(1, 98), (2, 59)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 125, 15]]
** centroid: 3, normalized-entropy: 0.4912373418243334, [(2, 125), (3, 15)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.38065223302599044] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38065223302599044, 0.31851012852042915] ***
*** starting iteration: 2; err: [Inf, 0.38065223302599044, 0.31851012852042915] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38065223302599044, 0.31851012852042915, 0.3008962856400758] ***
*** starting iteration: 3; err: [Inf, 0.38065223302599044, 0.31851012852042915, 0.3008962856400758] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38065223302599044, 0.31851012852042915, 0.3008962856400758, 0.2957634608391672] ***
*** starting iteration: 4; err: [Inf, 0.38065223302599044, 0.31851012852042915, 0.3008962856400758, 0.2957634608391672] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38065223302599044, 0.31851012852042915, 0.3008962856400758, 0.2957634608391672, 0.2948014298584312] ***
*** finished computation of 3 references, err: [Inf, 0.38065223302599044, 0.31851012852042915, 0.3008962856400758, 0.2957634608391672, 0.2948014298584312] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [61, 123, 17]]
** centroid: 1, normalized-entropy: 0.7931203223852711, [(1, 61), (2, 123), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [87, 48, 0]]
** centroid: 2, normalized-entropy: 0.9389320105807949, [(1, 87), (2, 48)]
*** center 3: selecting labels [1] (freq >= 1) [from [164, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36631167152523997] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36631167152523997, 0.29770623229071497] ***
*** starting iteration: 2; err: [Inf, 0.36631167152523997, 0.29770623229071497] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36631167152523997, 0.29770623229071497, 0.2905708220330998] ***
*** starting iteration: 3; err: [Inf, 0.36631167152523997, 0.29770623229071497, 0.2905708220330998] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36631167152523997, 0.29770623229071497, 0.2905708220330998, 0.28837889070250095] ***
*** starting iteration: 4; err: [Inf, 0.36631167152523997, 0.29770623229071497, 0.2905708220330998, 0.28837889070250095] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36631167152523997, 0.29770623229071497, 0.2905708220330998, 0.28837889070250095, 0.2876840865127742] ***
*** finished computation of 3 references, err: [Inf, 0.36631167152523997, 0.29770623229071497, 0.2905708220330998, 0.28837889070250095, 0.2876840865127742] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [187, 6, 0]]
** centroid: 1, normalized-entropy: 0.19981952947888343, [(1, 187), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [122, 32, 0]]
** centroid: 2, normalized-entropy: 0.7372413771710565, [(1, 122), (2, 32)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 135, 18]]
** centroid: 3, normalized-entropy: 0.5225593745369407, [(2, 135), (3, 18)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3648809223473072] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3648809223473072, 0.3036293143071234] ***
*** starting iteration: 2; err: [Inf, 0.3648809223473072, 0.3036293143071234] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3648809223473072, 0.3036293143071234, 0.29269067715480923] ***
*** starting iteration: 3; err: [Inf, 0.3648809223473072, 0.3036293143071234, 0.29269067715480923] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3648809223473072, 0.3036293143071234, 0.29269067715480923, 0.28873718695342543] ***
*** starting iteration: 4; err: [Inf, 0.3648809223473072, 0.3036293143071234, 0.29269067715480923, 0.28873718695342543] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3648809223473072, 0.3036293143071234, 0.29269067715480923, 0.28873718695342543, 0.28755725459009407] ***
*** starting iteration: 5; err: [Inf, 0.3648809223473072, 0.3036293143071234, 0.29269067715480923, 0.28873718695342543, 0.28755725459009407] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3648809223473072, 0.3036293143071234, 0.29269067715480923, 0.28873718695342543, 0.28755725459009407, 0.28710776769090446] ***
*** finished computation of 3 references, err: [Inf, 0.3648809223473072, 0.3036293143071234, 0.29269067715480923, 0.28873718695342543, 0.28755725459009407, 0.28710776769090446] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [174, 21, 0]]
** centroid: 1, normalized-entropy: 0.49291577961610966, [(1, 174), (2, 21)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 140, 16]]
** centroid: 2, normalized-entropy: 0.4770713062193298, [(2, 140), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [130, 19, 0]]
** centroid: 3, normalized-entropy: 0.5505883966425158, [(1, 130), (2, 19)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.35944772213697435] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35944772213697435, 0.3013613398745656] ***
*** starting iteration: 2; err: [Inf, 0.35944772213697435, 0.3013613398745656] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35944772213697435, 0.3013613398745656, 0.29379618105478583] ***
*** starting iteration: 3; err: [Inf, 0.35944772213697435, 0.3013613398745656, 0.29379618105478583] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35944772213697435, 0.3013613398745656, 0.29379618105478583, 0.29137733110412956] ***
*** starting iteration: 4; err: [Inf, 0.35944772213697435, 0.3013613398745656, 0.29379618105478583, 0.29137733110412956] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35944772213697435, 0.3013613398745656, 0.29379618105478583, 0.29137733110412956, 0.2904490314424038] ***
*** finished computation of 3 references, err: [Inf, 0.35944772213697435, 0.3013613398745656, 0.29379618105478583, 0.29137733110412956, 0.2904490314424038] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [170, 20, 0]]
** centroid: 1, normalized-entropy: 0.48546076074591343, [(1, 170), (2, 20)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 149, 17]]
** centroid: 2, normalized-entropy: 0.47658775755103405, [(2, 149), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [130, 14, 0]]
** centroid: 3, normalized-entropy: 0.460127886147135, [(1, 130), (2, 14)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3606343100965023] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3606343100965023, 0.30388677765056493] ***
*** starting iteration: 2; err: [Inf, 0.3606343100965023, 0.30388677765056493] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3606343100965023, 0.30388677765056493, 0.29404618369415403] ***
*** starting iteration: 3; err: [Inf, 0.3606343100965023, 0.30388677765056493, 0.29404618369415403] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3606343100965023, 0.30388677765056493, 0.29404618369415403, 0.29102169738709927] ***
*** starting iteration: 4; err: [Inf, 0.3606343100965023, 0.30388677765056493, 0.29404618369415403, 0.29102169738709927] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3606343100965023, 0.30388677765056493, 0.29404618369415403, 0.29102169738709927, 0.2897952422518283] ***
*** starting iteration: 5; err: [Inf, 0.3606343100965023, 0.30388677765056493, 0.29404618369415403, 0.29102169738709927, 0.2897952422518283] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3606343100965023, 0.30388677765056493, 0.29404618369415403, 0.29102169738709927, 0.2897952422518283, 0.2891860773898661] ***
*** finished computation of 3 references, err: [Inf, 0.3606343100965023, 0.30388677765056493, 0.29404618369415403, 0.29102169738709927, 0.2897952422518283, 0.2891860773898661] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [178, 8, 0]]
** centroid: 1, normalized-entropy: 0.2559300438391133, [(1, 178), (2, 8)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 130, 22]]
** centroid: 2, normalized-entropy: 0.5965109917085881, [(2, 130), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [118, 44, 0]]
** centroid: 3, normalized-entropy: 0.8437582063121657, [(1, 118), (2, 44)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3946277160583995] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3946277160583995, 0.3145016131331213] ***
*** starting iteration: 2; err: [Inf, 0.3946277160583995, 0.3145016131331213] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3946277160583995, 0.3145016131331213, 0.30339780478179457] ***
*** starting iteration: 3; err: [Inf, 0.3946277160583995, 0.3145016131331213, 0.30339780478179457] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3946277160583995, 0.3145016131331213, 0.30339780478179457, 0.30014278206042944] ***
*** starting iteration: 4; err: [Inf, 0.3946277160583995, 0.3145016131331213, 0.30339780478179457, 0.30014278206042944] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3946277160583995, 0.3145016131331213, 0.30339780478179457, 0.30014278206042944, 0.2994302434921265] ***
*** finished computation of 3 references, err: [Inf, 0.3946277160583995, 0.3145016131331213, 0.30339780478179457, 0.30014278206042944, 0.2994302434921265] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [50, 106, 24]]
** centroid: 1, normalized-entropy: 0.8522531799787375, [(1, 50), (2, 106), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [78, 70, 0]]
** centroid: 2, normalized-entropy: 0.9978913098356861, [(1, 78), (2, 70)]
*** center 3: selecting labels [1] (freq >= 1) [from [172, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4400705727003515] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4400705727003515, 0.2970617867410183] ***
*** starting iteration: 2; err: [Inf, 0.4400705727003515, 0.2970617867410183] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4400705727003515, 0.2970617867410183, 0.2944482717495412] ***
*** starting iteration: 3; err: [Inf, 0.4400705727003515, 0.2970617867410183, 0.2944482717495412] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4400705727003515, 0.2970617867410183, 0.2944482717495412, 0.2936391177745536] ***
*** finished computation of 3 references, err: [Inf, 0.4400705727003515, 0.2970617867410183, 0.2944482717495412, 0.2936391177745536] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [195, 19, 0]]
** centroid: 1, normalized-entropy: 0.43240140725814613, [(1, 195), (2, 19)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 125, 19]]
** centroid: 2, normalized-entropy: 0.562746818538222, [(2, 125), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [109, 33, 0]]
** centroid: 3, normalized-entropy: 0.7821619269728938, [(1, 109), (2, 33)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5107920460905879] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5107920460905879, 0.30844928638264535] ***
*** starting iteration: 2; err: [Inf, 0.5107920460905879, 0.30844928638264535] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5107920460905879, 0.30844928638264535, 0.3043309746887535] ***
*** starting iteration: 3; err: [Inf, 0.5107920460905879, 0.30844928638264535, 0.3043309746887535] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5107920460905879, 0.30844928638264535, 0.3043309746887535, 0.3021040059030056] ***
*** starting iteration: 4; err: [Inf, 0.5107920460905879, 0.30844928638264535, 0.3043309746887535, 0.3021040059030056] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5107920460905879, 0.30844928638264535, 0.3043309746887535, 0.3021040059030056, 0.3011599715054035] ***
*** finished computation of 3 references, err: [Inf, 0.5107920460905879, 0.30844928638264535, 0.3043309746887535, 0.3021040059030056, 0.3011599715054035] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [81, 64, 0]]
** centroid: 1, normalized-entropy: 0.9900618470242131, [(1, 81), (2, 64)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [44, 114, 18]]
** centroid: 2, normalized-entropy: 0.7837755765654819, [(1, 44), (2, 114), (3, 18)]
*** center 3: selecting labels [1] (freq >= 1) [from [179, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4634668968440965] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4634668968440965, 0.29742147793993357] ***
*** starting iteration: 2; err: [Inf, 0.4634668968440965, 0.29742147793993357] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4634668968440965, 0.29742147793993357, 0.2960330127943307] ***
*** starting iteration: 3; err: [Inf, 0.4634668968440965, 0.29742147793993357, 0.2960330127943307] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4634668968440965, 0.29742147793993357, 0.2960330127943307, 0.2954845660794526] ***
*** finished computation of 3 references, err: [Inf, 0.4634668968440965, 0.29742147793993357, 0.2960330127943307, 0.2954845660794526] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [210, 2, 0]]
** centroid: 1, normalized-entropy: 0.07701687574298331, [(1, 210), (2, 2)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [2, 133, 16]]
** centroid: 2, normalized-entropy: 0.3703956756914293, [(1, 2), (2, 133), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [94, 43, 0]]
** centroid: 3, normalized-entropy: 0.8975887507715623, [(1, 94), (2, 43)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39210276936087757] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39210276936087757, 0.29729442786052823] ***
*** starting iteration: 2; err: [Inf, 0.39210276936087757, 0.29729442786052823] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39210276936087757, 0.29729442786052823, 0.2917264553541318] ***
*** starting iteration: 3; err: [Inf, 0.39210276936087757, 0.29729442786052823, 0.2917264553541318] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39210276936087757, 0.29729442786052823, 0.2917264553541318, 0.29104015646502374] ***
*** finished computation of 3 references, err: [Inf, 0.39210276936087757, 0.29729442786052823, 0.2917264553541318, 0.29104015646502374] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [192, 11, 0]]
** centroid: 1, normalized-entropy: 0.3039243509611751, [(1, 192), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [116, 40, 0]]
** centroid: 2, normalized-entropy: 0.8212809417449864, [(1, 116), (2, 40)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 119, 22]]
** centroid: 3, normalized-entropy: 0.624722916628114, [(2, 119), (3, 22)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.42954707480967047] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42954707480967047, 0.30180720649287107] ***
*** starting iteration: 2; err: [Inf, 0.42954707480967047, 0.30180720649287107] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42954707480967047, 0.30180720649287107, 0.2958239073753357] ***
*** starting iteration: 3; err: [Inf, 0.42954707480967047, 0.30180720649287107, 0.2958239073753357] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42954707480967047, 0.30180720649287107, 0.2958239073753357, 0.29388481595367194] ***
*** starting iteration: 4; err: [Inf, 0.42954707480967047, 0.30180720649287107, 0.2958239073753357, 0.29388481595367194] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42954707480967047, 0.30180720649287107, 0.2958239073753357, 0.29388481595367194, 0.29306040788069365] ***
*** finished computation of 3 references, err: [Inf, 0.42954707480967047, 0.30180720649287107, 0.2958239073753357, 0.29388481595367194, 0.29306040788069365] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [31, 135, 18]]
** centroid: 1, normalized-entropy: 0.6869129689789158, [(1, 31), (2, 135), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [180, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [100, 36, 0]]
** centroid: 3, normalized-entropy: 0.8337649072106652, [(1, 100), (2, 36)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.48279874136671425] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.48279874136671425, 0.29742621482163667] ***
*** starting iteration: 2; err: [Inf, 0.48279874136671425, 0.29742621482163667] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.48279874136671425, 0.29742621482163667, 0.29477477995306256] ***
*** starting iteration: 3; err: [Inf, 0.48279874136671425, 0.29742621482163667, 0.29477477995306256] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.48279874136671425, 0.29742621482163667, 0.29477477995306256, 0.29456810815818607] ***
*** finished computation of 3 references, err: [Inf, 0.48279874136671425, 0.29742621482163667, 0.29477477995306256, 0.29456810815818607] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [42, 139, 20]]
** centroid: 1, normalized-entropy: 0.7389495955220918, [(1, 42), (2, 139), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [170, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [89, 40, 0]]
** centroid: 3, normalized-entropy: 0.8932629209154721, [(1, 89), (2, 40)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4292291619963944] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4292291619963944, 0.29003469508886337] ***
*** starting iteration: 2; err: [Inf, 0.4292291619963944, 0.29003469508886337] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4292291619963944, 0.29003469508886337, 0.2816352676525712] ***
*** starting iteration: 3; err: [Inf, 0.4292291619963944, 0.29003469508886337, 0.2816352676525712] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4292291619963944, 0.29003469508886337, 0.2816352676525712, 0.28129122918471694] ***
*** finished computation of 3 references, err: [Inf, 0.4292291619963944, 0.29003469508886337, 0.2816352676525712, 0.28129122918471694] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [132, 40, 0]]
** centroid: 1, normalized-entropy: 0.7824441294066888, [(1, 132), (2, 40)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [181, 7, 0]]
** centroid: 2, normalized-entropy: 0.22946337286666185, [(1, 181), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 121, 19]]
** centroid: 3, normalized-entropy: 0.5729039136188658, [(2, 121), (3, 19)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3621939800977707] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3621939800977707, 0.29700602166168394] ***
*** starting iteration: 2; err: [Inf, 0.3621939800977707, 0.29700602166168394] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3621939800977707, 0.29700602166168394, 0.2895575627088547] ***
*** starting iteration: 3; err: [Inf, 0.3621939800977707, 0.29700602166168394, 0.2895575627088547] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3621939800977707, 0.29700602166168394, 0.2895575627088547, 0.2879938971735537] ***
*** starting iteration: 4; err: [Inf, 0.3621939800977707, 0.29700602166168394, 0.2895575627088547, 0.2879938971735537] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3621939800977707, 0.29700602166168394, 0.2895575627088547, 0.2879938971735537, 0.28800139781087636] ***
*** finished computation of 3 references, err: [Inf, 0.3621939800977707, 0.29700602166168394, 0.2895575627088547, 0.2879938971735537, 0.28800139781087636] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [193, 6, 0]]
** centroid: 1, normalized-entropy: 0.19514731804582758, [(1, 193), (2, 6)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 145, 19]]
** centroid: 2, normalized-entropy: 0.5173237070108057, [(2, 145), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [93, 44, 0]]
** centroid: 3, normalized-entropy: 0.9056469687044101, [(1, 93), (2, 44)]
finished with 4 centroids; started with 3
[ Info: ("class distribution: ", Dict(2 => 357,3 => 37,1 => 606), Dict(2 => 381,3 => 30,1 => 589))
[ Info: ===== scores for single classifier: {"micro_f1":0.909,"precision":0.909,"recall":0.909,"macro_recall":0.9234745487034833,"macro_f1":0.8141030157739989,"accuracy":0.909,"class_f1":{"2":0.8683068017366138,"3":0.6185567010309279,"1":0.9554455445544554},"class_precision":{"2":0.967741935483871,"3":0.44776119402985076,"1":0.9293739967897271},"class_recall":{"2":0.7874015748031497,"3":1.0,"1":0.9830220713073005}}
[ Info: ===== scores for 1: {"micro_f1":0.954,"precision":0.954,"recall":0.954,"macro_recall":0.9634625468081346,"macro_f1":0.8857913893537303,"accuracy":0.954,"class_f1":{"2":0.9378378378378378,"3":0.7407407407407407,"1":0.9787955894826124},"class_precision":{"2":0.9665738161559888,"3":0.5882352941176471,"1":0.9779661016949153},"class_recall":{"2":0.910761154855643,"3":1.0,"1":0.9796264855687606}}
[ Info: ===== scores for 5: {"micro_f1":0.954,"precision":0.954,"recall":0.954,"macro_recall":0.9631535871258877,"macro_f1":0.8857472053881325,"accuracy":0.954,"class_f1":{"2":0.9376693766937668,"3":0.7407407407407407,"1":0.9788314987298898},"class_precision":{"2":0.969187675070028,"3":0.5882352941176471,"1":0.9763513513513513},"class_recall":{"2":0.9081364829396326,"3":1.0,"1":0.9813242784380306}}
[ Info: ===== scores for 7: {"micro_f1":0.955,"precision":0.955,"recall":0.955,"macro_recall":0.9631015987178172,"macro_f1":0.8836354975876421,"accuracy":0.955,"class_f1":{"2":0.9386084583901774,"3":0.7317073170731707,"1":0.980590717299578},"class_precision":{"2":0.9772727272727273,"3":0.5769230769230769,"1":0.9748322147651006},"class_recall":{"2":0.9028871391076115,"3":1.0,"1":0.9864176570458404}}
[ Info: ===== scores for 9: {"micro_f1":0.958,"precision":0.958,"recall":0.958,"macro_recall":0.965417310951581,"macro_f1":0.8885995044355108,"accuracy":0.958,"class_f1":{"2":0.9427792915531334,"3":0.7407407407407407,"1":0.9822784810126582},"class_precision":{"2":0.9801699716713881,"3":0.5882352941176471,"1":0.9765100671140939},"class_recall":{"2":0.9081364829396326,"3":1.0,"1":0.9881154499151104}}
[ Info: ===== scores for 11: {"micro_f1":0.956,"precision":0.956,"recall":0.956,"macro_recall":0.9642854490387344,"macro_f1":0.8871720118933051,"accuracy":0.956,"class_f1":{"2":0.9402173913043478,"3":0.7407407407407407,"1":0.9805579036348266},"class_precision":{"2":0.9746478873239437,"3":0.5882352941176471,"1":0.9764309764309764},"class_recall":{"2":0.9081364829396326,"3":1.0,"1":0.9847198641765704}}
(score = 0.954, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.954, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.951, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.951, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.954, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.954, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.952, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.952, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.954, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.954, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.952, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.952, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.955, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.955, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.95, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.95, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.955,"k":7,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.955,"precision":0.955,"recall":0.955,"macro_recall":0.9631015987178172,"macro_f1":0.8836354975876421,"accuracy":0.955,"class_f1":{"2":0.9386084583901774,"3":0.7317073170731707,"1":0.980590717299578},"class_precision":{"2":0.9772727272727273,"3":0.5769230769230769,"1":0.9748322147651006},"class_recall":{"2":0.9028871391076115,"3":1.0,"1":0.9864176570458404}}
Test Summary: | Pass  Total
AKNC          |    8      8
[34, 1, 7, 3, 4, 4, 1, 1, 2, 16, 3, 6, 2, 2, 11, 26, 7, 2, 5, 6, 28, 17, 5, 13, 36, 9, 14, 28, 7, 15, 1, 9, 39, 171, 21, 1, 4, 2, 5, 14, 1, 5, 8, 1, 1, 87, 12, 16, 5, 25, 4, 1, 24, 2, 3, 32, 63, 13, 34, 14, 5, 26, 25, 43, 34, 5, 21, 2, 20, 6, 1, 10, 28, 15, 34, 17, 13, 16, 3, 17, 3, 10, 36, 13, 27, 23, 6, 5, 8, 2, 21, 43, 3, 5, 14, 23, 13, 8, 27, 19, 28, 4, 19, 10, 21, 25, 29, 6, 32, 15, 3, 9, 10, 1, 107, 2, 1, 55, 21, 6, 4, 20, 62, 85, 46, 10, 14, 30, 58, 21, 5, 59, 32, 16, 13, 34, 59, 19, 7, 5, 31, 14, 4, 35, 9, 12, 16, 22, 67, 13, 5, 148, 5, 13, 22, 51, 1708, 25, 17, 2, 12, 58, 38, 6, 98, 27, 5, 67, 91, 11, 10, 9, 14, 6, 25, 15, 36, 28, 10, 7, 127, 51, 28, 24, 49, 38, 26, 23, 18, 34, 49, 17, 2, 33, 42, 82, 6, 14, 3, 14, 24, 6, 17, 53, 69, 19, 135, 44, 5, 17, 57, 137, 23, 3, 21, 22, 55, 18, 36, 28, 25, 36, 97, 43, 37, 17, 3, 1, 124, 56, 47, 4, 34, 5, 5, 6, 4, 120, 7, 3, 1, 542, 65, 10, 7, 60, 2, 7, 104, 17, 94, 21, 10, 5, 2, 7, 22, 4, 3, 95, 11, 13, 3, 1, 29, 35, 32, 129, 29, 22, 32, 21, 17, 6, 7, 76, 129, 5, 9, 5, 66, 86, 13, 47, 3, 15, 11, 78, 4, 108, 168, 5, 32, 7, 52, 14, 20, 21, 34, 6]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.66, speedup = 0.23587083699829856, eval_ratio = 0.10538399999999999)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.37126736111111125,"recall":0.3602430555555557,"f1":null,"seconds":0.00036260485649108887,"exhaustive_search_seconds":0.00021111778914928436,"evaluations":655.9765625,"distances_sum":1756.8052286327625}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5355902777777776,"recall":0.5355902777777776,"f1":null,"seconds":0.0004350151866674423,"exhaustive_search_seconds":0.00021111778914928436,"evaluations":904.28125,"distances_sum":1654.671805789978}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6371527777777775,"recall":0.6371527777777775,"f1":0.6371527777777775,"seconds":0.0005711857229471207,"exhaustive_search_seconds":0.00021111778914928436,"evaluations":1050.5,"distances_sum":1595.801607246223}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7152777777777772,"recall":0.7152777777777772,"f1":0.7152777777777772,"seconds":0.0006939675658941269,"exhaustive_search_seconds":0.00021111778914928436,"evaluations":1230.125,"distances_sum":1562.1160629082976}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7725694444444435,"recall":0.7725694444444435,"f1":0.7725694444444435,"seconds":0.0008168406784534454,"exhaustive_search_seconds":0.00021111778914928436,"evaluations":1375.1796875,"distances_sum":1543.5973697433215}
KCenters.DeloneInvIndex> reached performance {"precision":0.8237847222222214,"recall":0.8237847222222214,"f1":0.8237847222222214,"seconds":0.0009735524654388428,"exhaustive_search_seconds":0.00021111778914928436,"evaluations":1535.8359375,"distances_sum":1530.9199533185174}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8349999999999997, speedup = 0.38386380299884787, eval_ratio = 0.15153699999999998)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
