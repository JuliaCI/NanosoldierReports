Julia Version 1.5.0-DEV.343
Commit c934b94ffe (2020-02-25 17:15 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Reexport ──────────────────── v0.2.0
  Installed Missings ──────────────────── v0.4.3
  Installed LearnBase ─────────────────── v0.2.2
  Installed KCenters ──────────────────── v0.2.1
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed JSON ──────────────────────── v0.21.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed DataAPI ───────────────────── v1.1.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed Tables ────────────────────── v1.0.2
  Installed MLDataUtils ───────────────── v0.5.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed DataStructures ────────────── v0.17.9
  Installed Compat ────────────────────── v3.6.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed Parsers ───────────────────── v0.3.11
  Installed SimilaritySearch ──────────── v0.3.19
  Installed StatsBase ─────────────────── v0.32.1
  Installed DataFrames ────────────────── v0.20.2
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed MLDataPattern ─────────────── v0.5.0
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.1
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.6.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.1
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.2
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_y30e0p/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.6.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.1
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.2
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9364293802777927
[ Info: 0.8321307849884033
[ Info: 0.5547140726943811
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3383602980275949
mean(cdnet.distances) = 0.3597515627493461
mean(crand.distances) = 0.3500946011642615
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.734375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.734375,"f1":0.8360535298035306,"seconds":5.247071385383606e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.4140625,"distances_sum":2362.32752910328}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.792713883338884,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.171875,"distances_sum":2192.0369824725685}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.34375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.34375,"f1":null,"seconds":3.771856427192688e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":5.453125,"distances_sum":1090.8450510462658}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.734375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.734375,"f1":0.8360535298035306,"seconds":5.247071385383606e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.4140625,"distances_sum":2362.32752910328}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9443140193140199,"seconds":6.388872861862183e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.734375,"distances_sum":3100.750872682108}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9530193764568768,"seconds":6.340444087982178e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.875,"distances_sum":3176.0277141054135}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9514594780219784,"seconds":6.124377250671387e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.875,"distances_sum":3148.0643199098035}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9553972069597076,"seconds":6.690621376037598e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.890625,"distances_sum":3149.330668671953}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9104591588966595,"seconds":6.200745701789856e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.765625,"distances_sum":2832.606448893902}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9530193764568768,"seconds":6.340444087982178e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.875,"distances_sum":3176.0277141054135}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":2,"bsize":13}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9771577380952383,"seconds":6.817281246185303e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.96875,"distances_sum":3324.6163280797064}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9603651556776563,"seconds":6.251037120819092e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.9140625,"distances_sum":3193.9600223800576}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9626888736263741,"seconds":6.463378667831421e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.984375,"distances_sum":3181.649236068717}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9778846153846155,"seconds":6.685033440589905e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.96875,"distances_sum":3354.5165796576625}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9726018772893774,"seconds":6.517395377159119e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.953125,"distances_sum":3299.046446462737}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9567193223443224,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.8203125,"distances_sum":3206.344359978201}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9751316391941394,"seconds":6.623566150665283e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.90625,"distances_sum":3357.3779467984746}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":9,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.974255952380953,"seconds":6.571412086486816e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":9.0,"distances_sum":3297.060871761975}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.9797275641025643,"seconds":6.703659892082214e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.96875,"distances_sum":3377.523996815734}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9638671875,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9797275641025643,"seconds":6.703659892082214e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.96875,"distances_sum":3377.523996815734}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9638671875,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9797275641025643,"seconds":6.703659892082214e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.96875,"distances_sum":3377.523996815734}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5673828125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5673828125,"f1":0.7134636197136204,"seconds":5.347654223442078e-6,"exhaustive_search_seconds":1.9297003746032715e-6,"evaluations":7.6640625,"distances_sum":1415.9431157649267}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5673828125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5673828125,"f1":0.7134636197136204,"seconds":5.347654223442078e-6,"exhaustive_search_seconds":1.9297003746032715e-6,"evaluations":7.6640625,"distances_sum":1415.9431157649267}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8557156385281394,"seconds":6.468966603279114e-6,"exhaustive_search_seconds":1.9297003746032715e-6,"evaluations":8.484375,"distances_sum":2063.4473437074616}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.759765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.759765625,"f1":0.8557156385281394,"seconds":6.468966603279114e-6,"exhaustive_search_seconds":1.9297003746032715e-6,"evaluations":8.484375,"distances_sum":2063.4473437074616}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.8989659645909653,"seconds":6.8694353103637695e-6,"exhaustive_search_seconds":1.9297003746032715e-6,"evaluations":8.5546875,"distances_sum":2321.6140506756037}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9445054945054951,"seconds":6.757676601409912e-6,"exhaustive_search_seconds":1.9297003746032715e-6,"evaluations":8.7421875,"distances_sum":2639.6278890023464}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9445054945054951,"seconds":6.757676601409912e-6,"exhaustive_search_seconds":1.9297003746032715e-6,"evaluations":8.7421875,"distances_sum":2639.6278890023464}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.90234375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9445054945054951,"seconds":6.757676601409912e-6,"exhaustive_search_seconds":1.9297003746032715e-6,"evaluations":8.7421875,"distances_sum":2639.6278890023464}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8565892440892448,"seconds":6.167218089103699e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.15625,"distances_sum":2083.7424542548897}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.8414111929736939,"seconds":6.144866347312927e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.0234375,"distances_sum":2001.0157417393618}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.8565892440892448,"seconds":6.167218089103699e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.15625,"distances_sum":2083.7424542548897}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9522581585081592,"seconds":6.994232535362244e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.7265625,"distances_sum":2767.737545882873}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9522581585081592,"seconds":6.994232535362244e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.7265625,"distances_sum":2767.737545882873}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9522581585081592,"seconds":6.994232535362244e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.7265625,"distances_sum":2767.737545882873}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9169921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9522581585081592,"seconds":6.994232535362244e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.7265625,"distances_sum":2767.737545882873}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.587890625, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.587890625,"f1":0.7271901709401716,"seconds":5.2656978368759155e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":7.4921875,"distances_sum":1493.507563276821}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.587890625,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.587890625,"f1":0.7271901709401716,"seconds":5.2656978368759155e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":7.4921875,"distances_sum":1493.507563276821}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.666015625,"f1":0.7877773268398277,"seconds":9.86829400062561e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":7.8984375,"distances_sum":1739.5035931449797}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9014886155511164,"seconds":6.593763828277588e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.4921875,"distances_sum":2398.0215057001233}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8685496794871802,"seconds":6.407499313354492e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.296875,"distances_sum":2171.426807083449}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8349609375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8349609375,"f1":0.9014886155511164,"seconds":6.593763828277588e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.4921875,"distances_sum":2398.0215057001233}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9564045329670334,"seconds":6.983056664466858e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.8203125,"distances_sum":2811.68377585138}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9364697802197811,"seconds":1.0479241609573364e-5,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.625,"distances_sum":2656.637975720003}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9317255661005667,"seconds":6.839632987976074e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.6328125,"distances_sum":2618.0973922998005}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9564045329670334,"seconds":6.983056664466858e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.8203125,"distances_sum":2811.68377585138}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.923828125,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9564045329670334,"seconds":6.983056664466858e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.8203125,"distances_sum":2811.68377585138}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5205078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5205078125,"f1":null,"seconds":4.775822162628174e-6,"exhaustive_search_seconds":1.7490237951278687e-6,"evaluations":6.171875,"distances_sum":1297.28268273114}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6845703125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6845703125,"f1":0.8010629995005003,"seconds":9.853392839431763e-6,"exhaustive_search_seconds":1.7490237951278687e-6,"evaluations":7.4296875,"distances_sum":1754.0710537457687}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6845703125,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6845703125,"f1":0.8010629995005003,"seconds":9.853392839431763e-6,"exhaustive_search_seconds":1.7490237951278687e-6,"evaluations":7.4296875,"distances_sum":1754.0710537457687}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6875, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.6875,"f1":0.8014291264291272,"seconds":5.623325705528259e-6,"exhaustive_search_seconds":1.7490237951278687e-6,"evaluations":7.578125,"distances_sum":1753.5745848021033}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.8845097610722618,"seconds":1.0514631867408752e-5,"exhaustive_search_seconds":1.7490237951278687e-6,"evaluations":7.921875,"distances_sum":2193.88113941981}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9080960705960711,"seconds":6.724148988723755e-6,"exhaustive_search_seconds":1.7490237951278687e-6,"evaluations":8.3828125,"distances_sum":2414.249099302102}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.858866133866135,"seconds":9.564682841300964e-6,"exhaustive_search_seconds":1.7490237951278687e-6,"evaluations":7.8046875,"distances_sum":2054.332593199119}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8427734375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8427734375,"f1":0.9080960705960711,"seconds":6.724148988723755e-6,"exhaustive_search_seconds":1.7490237951278687e-6,"evaluations":8.3828125,"distances_sum":2414.249099302102}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9418815559440565,"seconds":1.0410323739051819e-5,"exhaustive_search_seconds":1.7490237951278687e-6,"evaluations":8.765625,"distances_sum":2628.2729793059807}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9601934523809528,"seconds":8.903443813323975e-6,"exhaustive_search_seconds":1.7490237951278687e-6,"evaluations":8.7734375,"distances_sum":2800.2157112520426}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9478479853479859,"seconds":1.0881572961807251e-5,"exhaustive_search_seconds":1.7490237951278687e-6,"evaluations":8.7265625,"distances_sum":2692.098402025823}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9601934523809528,"seconds":8.903443813323975e-6,"exhaustive_search_seconds":1.7490237951278687e-6,"evaluations":8.7734375,"distances_sum":2800.2157112520426}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9601934523809528,"seconds":8.903443813323975e-6,"exhaustive_search_seconds":1.7490237951278687e-6,"evaluations":8.7734375,"distances_sum":2800.2157112520426}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.42578125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.42578125,"f1":null,"seconds":4.0978193283081055e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":6.484375,"distances_sum":964.3585024514623}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.189453125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.189453125,"f1":null,"seconds":3.4775584936141968e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":5.953125,"distances_sum":413.61810106517595}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.42578125,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.42578125,"f1":null,"seconds":4.0978193283081055e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":6.484375,"distances_sum":964.3585024514623}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8523388070263079,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.0625,"distances_sum":1818.5888174961594}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8092048576423585,"seconds":5.2265822887420654e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":7.6875,"distances_sum":1575.2953624142524}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7392578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7392578125,"f1":0.8389750874125883,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":7.9921875,"distances_sum":1806.408827527675}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7568359375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7568359375,"f1":0.8523388070263079,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.0625,"distances_sum":1818.5888174961594}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.860199696137197,"seconds":5.725771188735962e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.1171875,"distances_sum":1900.8676332223527}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9492476273726277,"seconds":6.433576345443726e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.7265625,"distances_sum":2463.8796360822325}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9424049908424915,"seconds":6.6086649894714355e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.7265625,"distances_sum":2414.398539736437}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8949243464868474,"seconds":6.100162863731384e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.2421875,"distances_sum":2071.8290219235405}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9608688186813189,"seconds":6.452202796936035e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.8515625,"distances_sum":2554.051125278677}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9521291208791213,"seconds":6.860122084617615e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.78125,"distances_sum":2454.192724591743}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9608688186813189,"seconds":6.452202796936035e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.8515625,"distances_sum":2554.051125278677}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.931640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9608688186813189,"seconds":6.452202796936035e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.8515625,"distances_sum":2554.051125278677}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.23046875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.23046875,"f1":null,"seconds":3.7830322980880737e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.0234375,"distances_sum":510.1239058433195}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.23046875,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.23046875,"f1":null,"seconds":3.7830322980880737e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.0234375,"distances_sum":510.1239058433195}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.23046875,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.23046875,"f1":null,"seconds":3.7830322980880737e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.0234375,"distances_sum":510.1239058433195}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5830078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5830078125,"f1":0.7250055500055508,"seconds":3.1739473342895508e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":6.8515625,"distances_sum":1120.5839558636396}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5830078125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5830078125,"f1":0.7250055500055508,"seconds":3.1739473342895508e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":6.8515625,"distances_sum":1120.5839558636396}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9108375999001006,"seconds":5.9586018323898315e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.71875,"distances_sum":1868.969232837997}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8447265625,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8447265625,"f1":0.9108375999001006,"seconds":5.9586018323898315e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.71875,"distances_sum":1868.969232837997}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9144516941391949,"seconds":6.152316927909851e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.5390625,"distances_sum":1974.114692199682}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9517513736263741,"seconds":6.236135959625244e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.78125,"distances_sum":2141.1305627350257}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9517513736263741,"seconds":6.236135959625244e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.78125,"distances_sum":2141.1305627350257}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.916015625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9517513736263741,"seconds":6.236135959625244e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.78125,"distances_sum":2141.1305627350257}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2685546875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2685546875,"f1":null,"seconds":3.7383288145065308e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":6.4765625,"distances_sum":639.7142250005168}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2685546875,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.2685546875,"f1":null,"seconds":3.7383288145065308e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":6.4765625,"distances_sum":639.7142250005168}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.55078125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.55078125,"f1":0.6908690268065274,"seconds":4.719942808151245e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":6.1953125,"distances_sum":1077.8500626768353}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7353515625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7353515625,"f1":0.8363105644355654,"seconds":5.403533577919006e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.71875,"distances_sum":1614.1350255337384}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.843293165168166,"seconds":5.492940545082092e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.734375,"distances_sum":1635.4269160676877}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7451171875,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7451171875,"f1":0.843293165168166,"seconds":5.492940545082092e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.734375,"distances_sum":1635.4269160676877}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9079186438561446,"seconds":5.93625009059906e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.578125,"distances_sum":1997.8466195968954}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9323405760905769,"seconds":5.999580025672913e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.75,"distances_sum":2123.151145313231}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9592891483516486,"seconds":6.070360541343689e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.84375,"distances_sum":2272.2343523225177}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8525302822177832,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.921875,"distances_sum":1639.7045326472357}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.9184903638028645,"seconds":6.031244993209839e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.265625,"distances_sum":2025.4048820886765}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9592891483516486,"seconds":6.070360541343689e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.84375,"distances_sum":2272.2343523225177}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.927734375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9592891483516486,"seconds":6.070360541343689e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.84375,"distances_sum":2272.2343523225177}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.64453125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.64453125,"f1":0.7683679168054176,"seconds":5.377456545829773e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.59375,"distances_sum":1314.3449478414448}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.259765625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.259765625,"f1":null,"seconds":3.857538104057312e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":6.6171875,"distances_sum":583.9715882316666}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.64453125,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.64453125,"f1":0.7683679168054176,"seconds":5.377456545829773e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.59375,"distances_sum":1314.3449478414448}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7431640625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7431640625,"f1":0.8417077713952722,"seconds":5.951151251792908e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.0234375,"distances_sum":1628.9209820066742}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9272638819513828,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.6171875,"distances_sum":2149.5768688657045}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8605113636363646,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.1171875,"distances_sum":1704.8024520308281}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.876953125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.876953125,"f1":0.9272638819513828,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.6171875,"distances_sum":2149.5768688657045}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9609603937728942,"seconds":6.297603249549866e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8203125,"distances_sum":2320.0745881995313}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9733287545787546,"seconds":6.489455699920654e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9453125,"distances_sum":2368.790931121701}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9498740842490847,"seconds":6.424263119697571e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.765625,"distances_sum":2264.2153166662542}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9733287545787546,"seconds":6.489455699920654e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9453125,"distances_sum":2368.790931121701}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9733287545787546,"seconds":6.489455699920654e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9453125,"distances_sum":2368.790931121701}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41015625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.41015625,"f1":null,"seconds":4.3548643589019775e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":6.1953125,"distances_sum":809.7733634880424}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2431640625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2431640625,"f1":null,"seconds":3.6973506212234497e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":5.96875,"distances_sum":551.6928956797699}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2431640625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2431640625,"f1":null,"seconds":3.680586814880371e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":5.9140625,"distances_sum":571.0582508263071}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5869140625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5869140625,"f1":0.721431346431347,"seconds":4.950910806655884e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.3046875,"distances_sum":1214.1280420168036}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5869140625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5869140625,"f1":0.721431346431347,"seconds":4.950910806655884e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.3046875,"distances_sum":1214.1280420168036}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9081444597069602,"seconds":6.316229701042175e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.4453125,"distances_sum":1957.1364073269726}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9267342032967039,"seconds":6.197020411491394e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.78125,"distances_sum":2098.8006913394406}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8525615009990017,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.0625,"distances_sum":1657.2488569293068}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6923828125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6923828125,"f1":0.8050076659451668,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.6328125,"distances_sum":1484.0568875651436}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.875,"f1":0.9267342032967039,"seconds":6.197020411491394e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.78125,"distances_sum":2098.8006913394406}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.973122710622711,"seconds":6.845220923423767e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.921875,"distances_sum":2381.644418596502}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9443884240759245,"seconds":6.258487701416016e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.8125,"distances_sum":2214.086472073241}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9641369047619052,"seconds":6.932765245437622e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.875,"distances_sum":2342.352471513652}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9580070970695975,"seconds":6.807968020439148e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.84375,"distances_sum":2295.4336254572504}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.973122710622711,"seconds":6.845220923423767e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.921875,"distances_sum":2381.644418596502}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.973122710622711,"seconds":6.845220923423767e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.921875,"distances_sum":2381.644418596502}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3935546875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3935546875,"f1":null,"seconds":4.081055521965027e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":5.90625,"distances_sum":790.085525619993}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3935546875,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3935546875,"f1":null,"seconds":4.081055521965027e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":5.90625,"distances_sum":790.085525619993}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7889322483072491,"seconds":5.472451448440552e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.359375,"distances_sum":1417.995925242233}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.599609375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.599609375,"f1":null,"seconds":5.073845386505127e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.0390625,"distances_sum":1262.2348136601918}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.858485785048286,"seconds":6.288290023803711e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.0703125,"distances_sum":1718.6356128362681}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7685546875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7685546875,"f1":0.858485785048286,"seconds":6.288290023803711e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.0703125,"distances_sum":1718.6356128362681}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9257211538461546,"seconds":6.323680281639099e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.671875,"distances_sum":2089.5000596787077}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9489468864468869,"seconds":6.342306733131409e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.8125,"distances_sum":2237.384622657765}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9407108516483523,"seconds":6.241723895072937e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.75,"distances_sum":2207.036662075023}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.9148585789210797,"seconds":3.917142748832703e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.5859375,"distances_sum":2039.0880633096467}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.92504890942391,"seconds":4.017725586891174e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.7578125,"distances_sum":2059.333446095372}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9489468864468869,"seconds":6.342306733131409e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.8125,"distances_sum":2237.384622657765}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91015625,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9489468864468869,"seconds":6.342306733131409e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.8125,"distances_sum":2237.384622657765}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.546875,"f1":0.6894860347985354,"seconds":4.2244791984558105e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":6.265625,"distances_sum":1102.5680357187264}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.546875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.546875,"f1":0.6894860347985354,"seconds":4.2244791984558105e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":6.265625,"distances_sum":1102.5680357187264}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.7840886544011552,"seconds":5.077570676803589e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.5703125,"distances_sum":1452.4120064586539}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.662109375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.662109375,"f1":0.7840886544011552,"seconds":5.077570676803589e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.5703125,"distances_sum":1452.4120064586539}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.914657738095239,"seconds":6.159767508506775e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.546875,"distances_sum":2037.2883852157884}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9455070970695977,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.640625,"distances_sum":2251.8190073116702}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9455070970695977,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.640625,"distances_sum":2251.8190073116702}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.904296875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9455070970695977,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.640625,"distances_sum":2251.8190073116702}}, n: 9
mean(cfft.distances) = 0.352993361791111
mean(cdnet.distances) = 0.48523453293735
mean(crand.distances) = 0.32841268695854725
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.888888888888889
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9511111111111111
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8622222222222223
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8755555555555556
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8688888888888888
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9022222222222224
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9488888888888889
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9466666666666667
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8711111111111111
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8777777777777778
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.86
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9266666666666667
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8644444444444445
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.931111111111111
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9333333333333332
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9088888888888889
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9133333333333332
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.88
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9044444444444445
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.931111111111111
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8888888888888888
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222224
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8222222222222223
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.851111111111111
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8622222222222221
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9133333333333334
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9066666666666666
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 8, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 8, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 8, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 8, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 8, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 8, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 1]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 8, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 1]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.536000010073185] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 32, 3]]
** centroid: 1, normalized-entropy: 0.4220005168831531, [(2, 32), (3, 3)]
*** center 2: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 14]]
** centroid: 10, normalized-entropy: 0.5435644431995963, [(2, 2), (3, 14)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
finished with 13 centroids; started with 12
acc = 0.92
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.35926321693682095] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35926321693682095, 0.3094978940452228] ***
*** starting iteration: 2; err: [Inf, 0.35926321693682095, 0.3094978940452228] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35926321693682095, 0.3094978940452228, 0.305254915355797] ***
*** starting iteration: 3; err: [Inf, 0.35926321693682095, 0.3094978940452228, 0.305254915355797] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35926321693682095, 0.3094978940452228, 0.305254915355797, 0.3046648984400181] ***
*** finished computation of 3 references, err: [Inf, 0.35926321693682095, 0.3094978940452228, 0.305254915355797, 0.3046648984400181] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [98, 81, 0]]
** centroid: 1, normalized-entropy: 0.9934838501304855, [(1, 98), (2, 81)]
*** center 2: selecting labels [1] (freq >= 1) [from [207, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [95, 164, 21]]
** centroid: 3, normalized-entropy: 0.7958407469233313, [(1, 95), (2, 164), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3150863230697576] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3150863230697576, 0.24078079376431152] ***
*** finished computation of 3 references, err: [Inf, 0.3150863230697576, 0.24078079376431152] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [92, 203, 20]]
** centroid: 1, normalized-entropy: 0.7442589036856249, [(1, 92), (2, 203), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [185, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [116, 51, 0]]
** centroid: 3, normalized-entropy: 0.8877792153761802, [(1, 116), (2, 51)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3713988988734279] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3713988988734279, 0.2357738177770975] ***
*** finished computation of 3 references, err: [Inf, 0.3713988988734279, 0.2357738177770975] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [246, 56, 0]]
** centroid: 1, normalized-entropy: 0.6918138653228311, [(1, 246), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [147, 28, 0]]
** centroid: 2, normalized-entropy: 0.634309554640566, [(1, 147), (2, 28)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 169, 21]]
** centroid: 3, normalized-entropy: 0.5015014472254578, [(2, 169), (3, 21)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3974680633790366] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3974680633790366, 0.304306639035375] ***
*** starting iteration: 2; err: [Inf, 0.3974680633790366, 0.304306639035375] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3974680633790366, 0.304306639035375, 0.3022469653924172] ***
*** starting iteration: 3; err: [Inf, 0.3974680633790366, 0.304306639035375, 0.3022469653924172] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3974680633790366, 0.304306639035375, 0.3022469653924172, 0.3017713479982974] ***
*** finished computation of 3 references, err: [Inf, 0.3974680633790366, 0.304306639035375, 0.3022469653924172, 0.3017713479982974] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [248, 20, 0]]
** centroid: 1, normalized-entropy: 0.3829576722723533, [(1, 248), (2, 20)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [2, 165, 21]]
** centroid: 2, normalized-entropy: 0.37111044085098355, [(1, 2), (2, 165), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [150, 60, 0]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(1, 150), (2, 60)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.46229318094424443] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46229318094424443, 0.2966824551832037] ***
*** starting iteration: 2; err: [Inf, 0.46229318094424443, 0.2966824551832037] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46229318094424443, 0.2966824551832037, 0.29563026932505204] ***
*** starting iteration: 3; err: [Inf, 0.46229318094424443, 0.2966824551832037, 0.29563026932505204] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46229318094424443, 0.2966824551832037, 0.29563026932505204, 0.2955594497287403] ***
*** finished computation of 3 references, err: [Inf, 0.46229318094424443, 0.2966824551832037, 0.29563026932505204, 0.2955594497287403] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [247, 7, 0]]
** centroid: 1, normalized-entropy: 0.18199889678862793, [(1, 247), (2, 7)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [3, 200, 20]]
** centroid: 2, normalized-entropy: 0.33848388293957965, [(1, 3), (2, 200), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [143, 47, 0]]
** centroid: 3, normalized-entropy: 0.8070804652353762, [(1, 143), (2, 47)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3696477690368131] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3696477690368131, 0.30262405687532595] ***
*** starting iteration: 2; err: [Inf, 0.3696477690368131, 0.30262405687532595] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3696477690368131, 0.30262405687532595, 0.2956581623153831] ***
*** starting iteration: 3; err: [Inf, 0.3696477690368131, 0.30262405687532595, 0.2956581623153831] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3696477690368131, 0.30262405687532595, 0.2956581623153831, 0.2946238311760217] ***
*** starting iteration: 4; err: [Inf, 0.3696477690368131, 0.30262405687532595, 0.2956581623153831, 0.2946238311760217] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3696477690368131, 0.30262405687532595, 0.2956581623153831, 0.2946238311760217, 0.2945431156985942] ***
*** finished computation of 3 references, err: [Inf, 0.3696477690368131, 0.30262405687532595, 0.2956581623153831, 0.2946238311760217, 0.2945431156985942] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [255, 26, 0]]
** centroid: 1, normalized-entropy: 0.4448478181900466, [(1, 255), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [138, 30, 0]]
** centroid: 2, normalized-entropy: 0.6769418697808861, [(1, 138), (2, 30)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 197, 21]]
** centroid: 3, normalized-entropy: 0.4572537086702287, [(2, 197), (3, 21)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3969387849443243] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3969387849443243, 0.23924718437682804] ***
*** starting iteration: 2; err: [Inf, 0.3969387849443243, 0.23924718437682804] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3969387849443243, 0.23924718437682804, 0.23788941259895852] ***
*** starting iteration: 3; err: [Inf, 0.3969387849443243, 0.23924718437682804, 0.23788941259895852] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3969387849443243, 0.23924718437682804, 0.23788941259895852, 0.2371224638818576] ***
*** finished computation of 3 references, err: [Inf, 0.3969387849443243, 0.23924718437682804, 0.23788941259895852, 0.2371224638818576] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [76, 142, 20]]
** centroid: 1, normalized-entropy: 0.80170887493644, [(1, 76), (2, 142), (3, 20)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [107, 103, 1]]
** centroid: 2, normalized-entropy: 0.6551664475226731, [(1, 107), (2, 103), (3, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [217, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3379730257991774] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3379730257991774, 0.23648907342364361] ***
*** starting iteration: 2; err: [Inf, 0.3379730257991774, 0.23648907342364361] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3379730257991774, 0.23648907342364361, 0.23451965406950356] ***
*** starting iteration: 3; err: [Inf, 0.3379730257991774, 0.23648907342364361, 0.23451965406950356] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3379730257991774, 0.23648907342364361, 0.23451965406950356, 0.23434043883568031] ***
*** finished computation of 3 references, err: [Inf, 0.3379730257991774, 0.23648907342364361, 0.23451965406950356, 0.23434043883568031] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [79, 166, 20]]
** centroid: 1, normalized-entropy: 0.7726296217041416, [(1, 79), (2, 166), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [114, 88, 0]]
** centroid: 2, normalized-entropy: 0.9880162151534644, [(1, 114), (2, 88)]
*** center 3: selecting labels [1] (freq >= 1) [from [200, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3634436271534576] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3634436271534576, 0.23906275897141618] ***
*** starting iteration: 2; err: [Inf, 0.3634436271534576, 0.23906275897141618] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3634436271534576, 0.23906275897141618, 0.23694304954902878] ***
*** starting iteration: 3; err: [Inf, 0.3634436271534576, 0.23906275897141618, 0.23694304954902878] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3634436271534576, 0.23906275897141618, 0.23694304954902878, 0.2362645995346592] ***
*** finished computation of 3 references, err: [Inf, 0.3634436271534576, 0.23906275897141618, 0.23694304954902878, 0.2362645995346592] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [46, 200, 21]]
** centroid: 1, normalized-entropy: 0.6548248827531239, [(1, 46), (2, 200), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [235, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [112, 53, 0]]
** centroid: 3, normalized-entropy: 0.9056947272015662, [(1, 112), (2, 53)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32282314835900977] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32282314835900977, 0.30164125572325945] ***
*** starting iteration: 2; err: [Inf, 0.32282314835900977, 0.30164125572325945] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32282314835900977, 0.30164125572325945, 0.2978376615317776] ***
*** starting iteration: 3; err: [Inf, 0.32282314835900977, 0.30164125572325945, 0.2978376615317776] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32282314835900977, 0.30164125572325945, 0.2978376615317776, 0.2972493933477457] ***
*** finished computation of 3 references, err: [Inf, 0.32282314835900977, 0.30164125572325945, 0.2978376615317776, 0.2972493933477457] ***
*** center 1: selecting labels [1] (freq >= 1) [from [204, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [84, 155, 20]]
** centroid: 2, normalized-entropy: 0.792099025360787, [(1, 84), (2, 155), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [105, 99, 0]]
** centroid: 3, normalized-entropy: 0.9993759069576513, [(1, 105), (2, 99)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37442695240544593] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37442695240544593, 0.2985640200695534] ***
*** starting iteration: 2; err: [Inf, 0.37442695240544593, 0.2985640200695534] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37442695240544593, 0.2985640200695534, 0.29680828086199657] ***
*** starting iteration: 3; err: [Inf, 0.37442695240544593, 0.2985640200695534, 0.29680828086199657] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37442695240544593, 0.2985640200695534, 0.29680828086199657, 0.2968439044601199] ***
*** finished computation of 3 references, err: [Inf, 0.37442695240544593, 0.2985640200695534, 0.29680828086199657, 0.2968439044601199] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [65, 161, 21]]
** centroid: 1, normalized-entropy: 0.7644633923952032, [(1, 65), (2, 161), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [122, 92, 0]]
** centroid: 2, normalized-entropy: 0.9857770091118137, [(1, 122), (2, 92)]
*** center 3: selecting labels [1] (freq >= 1) [from [206, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2628005353297602] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2628005353297602, 0.17139276678117366] ***
*** finished computation of 7 references, err: [Inf, 0.2628005353297602, 0.17139276678117366] ***
*** center 1: selecting labels [1] (freq >= 1) [from [133, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 30, 15]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(2, 30), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [46, 62, 0]]
** centroid: 3, normalized-entropy: 0.9841095278800533, [(1, 46), (2, 62)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [142, 1, 0]]
** centroid: 4, normalized-entropy: 0.060122448878635194, [(1, 142), (2, 1)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 31, 6]]
** centroid: 5, normalized-entropy: 0.6394571324851642, [(2, 31), (3, 6)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [21, 85, 0]]
** centroid: 6, normalized-entropy: 0.7181384220154764, [(1, 21), (2, 85)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [58, 36, 0]]
** centroid: 7, normalized-entropy: 0.9601186626422924, [(1, 58), (2, 36)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2515605522195405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2515605522195405, 0.16981270354460348] ***
*** finished computation of 7 references, err: [Inf, 0.2515605522195405, 0.16981270354460348] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [113, 23, 0]]
** centroid: 1, normalized-entropy: 0.6556823431457255, [(1, 113), (2, 23)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 59, 19]]
** centroid: 2, normalized-entropy: 0.8009591077369054, [(2, 59), (3, 19)]
*** center 3: selecting labels [1] (freq >= 1) [from [155, 0, 0]]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [4, 130, 1]]
** centroid: 4, normalized-entropy: 0.16106136355011458, [(1, 4), (2, 130), (3, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [92, 27, 0]]
** centroid: 5, normalized-entropy: 0.7725516917477853, [(1, 92), (2, 27)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [29, 15, 0]]
** centroid: 6, normalized-entropy: 0.9256859869821296, [(1, 29), (2, 15)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22769419677734284] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22769419677734284, 0.1699046845529703] ***
*** finished computation of 7 references, err: [Inf, 0.22769419677734284, 0.1699046845529703] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [24, 98, 0]]
** centroid: 1, normalized-entropy: 0.7153220528038851, [(1, 24), (2, 98)]
*** center 2: selecting labels [1] (freq >= 1) [from [146, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [59, 21, 0]]
** centroid: 3, normalized-entropy: 0.8304955225035798, [(1, 59), (2, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [137, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 54, 1]]
** centroid: 5, normalized-entropy: 0.13110652958234514, [(2, 54), (3, 1)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [27, 46, 0]]
** centroid: 6, normalized-entropy: 0.9505668528932193, [(1, 27), (2, 46)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 34, 20]]
** centroid: 7, normalized-entropy: 0.9509560484549724, [(2, 34), (3, 20)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2555049060376825] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2555049060376825, 0.24174480943999313] ***
*** starting iteration: 2; err: [Inf, 0.2555049060376825, 0.24174480943999313] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2555049060376825, 0.24174480943999313, 0.23878754669934646] ***
*** starting iteration: 3; err: [Inf, 0.2555049060376825, 0.24174480943999313, 0.23878754669934646] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2555049060376825, 0.24174480943999313, 0.23878754669934646, 0.23784941249364824] ***
*** finished computation of 3 references, err: [Inf, 0.2555049060376825, 0.24174480943999313, 0.23878754669934646, 0.23784941249364824] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [109, 112, 2]]
** centroid: 1, normalized-entropy: 0.671798256683243, [(1, 109), (2, 112), (3, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [213, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [78, 133, 19]]
** centroid: 3, normalized-entropy: 0.8096149630054396, [(1, 78), (2, 133), (3, 19)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.25517244731680655] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25517244731680655, 0.23876752603849372] ***
*** starting iteration: 2; err: [Inf, 0.25517244731680655, 0.23876752603849372] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25517244731680655, 0.23876752603849372, 0.23606663073568063] ***
*** starting iteration: 3; err: [Inf, 0.25517244731680655, 0.23876752603849372, 0.23606663073568063] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25517244731680655, 0.23876752603849372, 0.23606663073568063, 0.23528779265673264] ***
*** finished computation of 3 references, err: [Inf, 0.25517244731680655, 0.23876752603849372, 0.23606663073568063, 0.23528779265673264] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [105, 106, 1]]
** centroid: 1, normalized-entropy: 0.6552258727881395, [(1, 105), (2, 106), (3, 1)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [95, 148, 19]]
** centroid: 2, normalized-entropy: 0.8016921502077226, [(1, 95), (2, 148), (3, 19)]
*** center 3: selecting labels [1] (freq >= 1) [from [193, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.33714278015507754] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33714278015507754, 0.2675085001593006] ***
*** starting iteration: 2; err: [Inf, 0.33714278015507754, 0.2675085001593006] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33714278015507754, 0.2675085001593006, 0.2488103304477199] ***
*** starting iteration: 3; err: [Inf, 0.33714278015507754, 0.2675085001593006, 0.2488103304477199] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33714278015507754, 0.2675085001593006, 0.2488103304477199, 0.23952126149451178] ***
*** finished computation of 3 references, err: [Inf, 0.33714278015507754, 0.2675085001593006, 0.2488103304477199, 0.23952126149451178] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [47, 174, 21]]
** centroid: 1, normalized-entropy: 0.6986853343145831, [(1, 47), (2, 174), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [243, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [103, 79, 0]]
** centroid: 3, normalized-entropy: 0.9874197313752753, [(1, 103), (2, 79)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.412382358107604] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.412382358107604, 0.3495620135609452] ***
*** finished computation of 3 references, err: [Inf, 0.412382358107604, 0.3495620135609452] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [305, 34, 0]]
** centroid: 1, normalized-entropy: 0.4699299778860861, [(1, 305), (2, 34)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [53, 69, 12]]
** centroid: 2, normalized-entropy: 0.8417188166055766, [(1, 53), (2, 69), (3, 12)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [42, 142, 9]]
** centroid: 3, normalized-entropy: 0.637708032809255, [(1, 42), (2, 142), (3, 9)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3334271257346694] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3334271257346694, 0.31171374217184006] ***
*** finished computation of 3 references, err: [Inf, 0.3334271257346694, 0.31171374217184006] ***
*** center 1: selecting labels [1] (freq >= 2) [from [213, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [70, 172, 20]]
** centroid: 2, normalized-entropy: 0.7512179933176083, [(1, 70), (2, 172), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [110, 82, 0]]
** centroid: 3, normalized-entropy: 0.98460399620868, [(1, 110), (2, 82)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.38656575362319534] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38656575362319534, 0.3157953444653298] ***
*** finished computation of 3 references, err: [Inf, 0.38656575362319534, 0.3157953444653298] ***
*** center 1: selecting labels [1] (freq >= 2) [from [208, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [101, 188, 21]]
** centroid: 2, normalized-entropy: 0.7746552174153951, [(1, 101), (2, 188), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [84, 65, 0]]
** centroid: 3, normalized-entropy: 0.9882385113328634, [(1, 84), (2, 65)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3859019644849293] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3859019644849293, 0.3201817665892365] ***
*** starting iteration: 2; err: [Inf, 0.3859019644849293, 0.3201817665892365] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3859019644849293, 0.3201817665892365, 0.30547716016335796] ***
*** starting iteration: 3; err: [Inf, 0.3859019644849293, 0.3201817665892365, 0.30547716016335796] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3859019644849293, 0.3201817665892365, 0.30547716016335796, 0.30385154455217783] ***
*** finished computation of 3 references, err: [Inf, 0.3859019644849293, 0.3201817665892365, 0.30547716016335796, 0.30385154455217783] ***
*** center 1: selecting labels [1] (freq >= 2) [from [231, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [65, 145, 21]]
** centroid: 2, normalized-entropy: 0.7892757418967631, [(1, 65), (2, 145), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [104, 100, 0]]
** centroid: 3, normalized-entropy: 0.9997226475394071, [(1, 104), (2, 100)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3379130858992194] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3379130858992194, 0.3182361004692593] ***
*** starting iteration: 2; err: [Inf, 0.3379130858992194, 0.3182361004692593] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3379130858992194, 0.3182361004692593, 0.2992889449667783] ***
*** starting iteration: 3; err: [Inf, 0.3379130858992194, 0.3182361004692593, 0.2992889449667783] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3379130858992194, 0.3182361004692593, 0.2992889449667783, 0.29689194272639513] ***
*** finished computation of 3 references, err: [Inf, 0.3379130858992194, 0.3182361004692593, 0.2992889449667783, 0.29689194272639513] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [47, 185, 20]]
** centroid: 1, normalized-entropy: 0.6746560211723471, [(1, 47), (2, 185), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [129, 69, 0]]
** centroid: 2, normalized-entropy: 0.9327076126690367, [(1, 129), (2, 69)]
*** center 3: selecting labels [1] (freq >= 2) [from [217, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3785807314863627] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3785807314863627, 0.2960004175146078] ***
*** starting iteration: 2; err: [Inf, 0.3785807314863627, 0.2960004175146078] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3785807314863627, 0.2960004175146078, 0.2925553565245887] ***
*** starting iteration: 3; err: [Inf, 0.3785807314863627, 0.2960004175146078, 0.2925553565245887] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3785807314863627, 0.2960004175146078, 0.2925553565245887, 0.2922865440245198] ***
*** finished computation of 3 references, err: [Inf, 0.3785807314863627, 0.2960004175146078, 0.2925553565245887, 0.2922865440245198] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 172, 21]]
** centroid: 1, normalized-entropy: 0.4963109041742213, [(2, 172), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [153, 64, 0]]
** centroid: 2, normalized-entropy: 0.8750058871358356, [(1, 153), (2, 64)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [240, 17, 0]]
** centroid: 3, normalized-entropy: 0.351380925663527, [(1, 240), (2, 17)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3740225934378758] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3740225934378758, 0.26829287475506375] ***
*** finished computation of 3 references, err: [Inf, 0.3740225934378758, 0.26829287475506375] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [77, 178, 21]]
** centroid: 1, normalized-entropy: 0.7600668321385362, [(1, 77), (2, 178), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [130, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [193, 67, 0]]
** centroid: 3, normalized-entropy: 0.823244028592261, [(1, 193), (2, 67)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.26248011564678125] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26248011564678125, 0.2385429503868098] ***
*** finished computation of 3 references, err: [Inf, 0.26248011564678125, 0.2385429503868098] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [252, 6, 0]]
** centroid: 1, normalized-entropy: 0.15935006268563429, [(1, 252), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [101, 84, 0]]
** centroid: 2, normalized-entropy: 0.9939002536441656, [(1, 101), (2, 84)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [40, 164, 20]]
** centroid: 3, normalized-entropy: 0.6841455464239795, [(1, 40), (2, 164), (3, 20)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2999774659809278] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2999774659809278, 0.23941143492943254] ***
*** finished computation of 3 references, err: [Inf, 0.2999774659809278, 0.23941143492943254] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [107, 128, 5]]
** centroid: 1, normalized-entropy: 0.7063971934257736, [(1, 107), (2, 128), (3, 5)]
*** center 2: selecting labels [1] (freq >= 1) [from [207, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [79, 125, 16]]
** centroid: 3, normalized-entropy: 0.8006424647547516, [(1, 79), (2, 125), (3, 16)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2217473422649789] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2217473422649789, 0.19351008051290391] ***
*** starting iteration: 2; err: [Inf, 0.2217473422649789, 0.19351008051290391] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2217473422649789, 0.19351008051290391, 0.1879830146019624] ***
*** starting iteration: 3; err: [Inf, 0.2217473422649789, 0.19351008051290391, 0.1879830146019624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2217473422649789, 0.19351008051290391, 0.1879830146019624, 0.1856222083098493] ***
*** finished computation of 7 references, err: [Inf, 0.2217473422649789, 0.19351008051290391, 0.1879830146019624, 0.1856222083098493] ***
*** center 1: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [92, 16, 0]]
** centroid: 3, normalized-entropy: 0.6051865766334207, [(1, 92), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [99, 12, 0]]
** centroid: 4, normalized-entropy: 0.4941829348497886, [(1, 99), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [22, 76, 0]]
** centroid: 5, normalized-entropy: 0.7682814090975241, [(1, 22), (2, 76)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 94, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 47, 21]]
** centroid: 7, normalized-entropy: 0.8918107543797084, [(2, 47), (3, 21)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22973452528835325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22973452528835325, 0.19034843633685825] ***
*** starting iteration: 2; err: [Inf, 0.22973452528835325, 0.19034843633685825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22973452528835325, 0.19034843633685825, 0.183237188414711] ***
*** starting iteration: 3; err: [Inf, 0.22973452528835325, 0.19034843633685825, 0.183237188414711] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22973452528835325, 0.19034843633685825, 0.183237188414711, 0.18149195290540626] ***
*** finished computation of 7 references, err: [Inf, 0.22973452528835325, 0.19034843633685825, 0.183237188414711, 0.18149195290540626] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [63, 32, 0]]
** centroid: 1, normalized-entropy: 0.9217647116941611, [(1, 63), (2, 32)]
*** center 2: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [110, 1, 0]]
** centroid: 3, normalized-entropy: 0.07414948357792069, [(1, 110), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [25, 77, 0]]
** centroid: 4, normalized-entropy: 0.8034158480707552, [(1, 25), (2, 77)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [1, 62, 0]]
** centroid: 5, normalized-entropy: 0.11759466565886466, [(1, 1), (2, 62)]
*** center 6: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 82, 20]]
** centroid: 7, normalized-entropy: 0.7140152804378671, [(2, 82), (3, 20)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21765256430283525] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21765256430283525, 0.18811360528522256] ***
*** starting iteration: 2; err: [Inf, 0.21765256430283525, 0.18811360528522256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21765256430283525, 0.18811360528522256, 0.18423744689567068] ***
*** starting iteration: 3; err: [Inf, 0.21765256430283525, 0.18811360528522256, 0.18423744689567068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21765256430283525, 0.18811360528522256, 0.18423744689567068, 0.18242619570339103] ***
*** finished computation of 7 references, err: [Inf, 0.21765256430283525, 0.18811360528522256, 0.18423744689567068, 0.18242619570339103] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [85, 12, 0]]
** centroid: 1, normalized-entropy: 0.5399357331112666, [(1, 85), (2, 12)]
*** center 2: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [65, 43, 0]]
** centroid: 3, normalized-entropy: 0.9698570179131006, [(1, 65), (2, 43)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [32, 64, 0]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(1, 32), (2, 64)]
*** center 5: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 76, 5]]
** centroid: 6, normalized-entropy: 0.33426813256179383, [(2, 76), (3, 5)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 58, 16]]
** centroid: 7, normalized-entropy: 0.7531979910695015, [(2, 58), (3, 16)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3044321489556729] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3044321489556729, 0.24441926491757235] ***
*** finished computation of 3 references, err: [Inf, 0.3044321489556729, 0.24441926491757235] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [286, 39, 0]]
** centroid: 1, normalized-entropy: 0.5293608652873645, [(1, 286), (2, 39)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 147, 21]]
** centroid: 2, normalized-entropy: 0.5435644431995963, [(2, 147), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [114, 59, 0]]
** centroid: 3, normalized-entropy: 0.925810877768926, [(1, 114), (2, 59)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.230845277907338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.230845277907338, 0.19171335480690518] ***
*** starting iteration: 2; err: [Inf, 0.230845277907338, 0.19171335480690518] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.230845277907338, 0.19171335480690518, 0.18711344858732176] ***
*** starting iteration: 3; err: [Inf, 0.230845277907338, 0.19171335480690518, 0.18711344858732176] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.230845277907338, 0.19171335480690518, 0.18711344858732176, 0.1853396874165873] ***
*** finished computation of 7 references, err: [Inf, 0.230845277907338, 0.19171335480690518, 0.18711344858732176, 0.1853396874165873] ***
*** center 1: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [73, 8, 0]]
** centroid: 2, normalized-entropy: 0.46506984488164627, [(1, 73), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 45, 21]]
** centroid: 3, normalized-entropy: 0.9023932827949788, [(2, 45), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [93, 24, 0]]
** centroid: 5, normalized-entropy: 0.7320666900931937, [(1, 93), (2, 24)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 84, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [14, 84, 0]]
** centroid: 7, normalized-entropy: 0.5916727785823274, [(1, 14), (2, 84)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21274772933035016] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21274772933035016, 0.19270202906444847] ***
*** starting iteration: 2; err: [Inf, 0.21274772933035016, 0.19270202906444847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21274772933035016, 0.19270202906444847, 0.18987135337232827] ***
*** starting iteration: 3; err: [Inf, 0.21274772933035016, 0.19270202906444847, 0.18987135337232827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21274772933035016, 0.19270202906444847, 0.18987135337232827, 0.1889640708081145] ***
*** finished computation of 7 references, err: [Inf, 0.21274772933035016, 0.19270202906444847, 0.18987135337232827, 0.1889640708081145] ***
*** center 1: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 52, 20]]
** centroid: 2, normalized-entropy: 0.8524051786494784, [(2, 52), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [98, 6, 0]]
** centroid: 3, normalized-entropy: 0.3182152976832332, [(1, 98), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [10, 89, 0]]
** centroid: 4, normalized-entropy: 0.47218938467675087, [(1, 10), (2, 89)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [79, 5, 0]]
** centroid: 5, normalized-entropy: 0.3255517134879513, [(1, 79), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 102, 0]]
** centroid: 6, normalized-entropy: 0.40597703847557104, [(1, 9), (2, 102)]
*** center 7: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2446267627112601] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2446267627112601, 0.19334468089122286] ***
*** starting iteration: 2; err: [Inf, 0.2446267627112601, 0.19334468089122286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2446267627112601, 0.19334468089122286, 0.18997933598852407] ***
*** starting iteration: 3; err: [Inf, 0.2446267627112601, 0.19334468089122286, 0.18997933598852407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2446267627112601, 0.19334468089122286, 0.18997933598852407, 0.18949136236400485] ***
*** finished computation of 7 references, err: [Inf, 0.2446267627112601, 0.19334468089122286, 0.18997933598852407, 0.18949136236400485] ***
*** center 1: selecting labels [1] (freq >= 1) [from [129, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 84, 21]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 84), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 16, 0]]
** centroid: 3, normalized-entropy: 0.7372413771710565, [(1, 61), (2, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [11, 101, 0]]
** centroid: 5, normalized-entropy: 0.46330931881705484, [(1, 11), (2, 101)]
*** center 6: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [26, 52, 0]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(1, 26), (2, 52)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9379649110188032, 0.9310088531645418, 0.9150108192024359, 0.9100058141974309, 0.9079888271505038, 0.9050337762912614, 0.8780247313181445, 0.8669777561993132, 0.8649967332602063, 0.8449976923030814, 0.8429327531123939, 0.8140355924787063, 0.7759675843508179]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 1) => 0.9379649110188032
finished with 14
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.16116125977548487] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16116125977548487, 0.14748856976947133] ***
*** starting iteration: 2; err: [Inf, 0.16116125977548487, 0.14748856976947133] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16116125977548487, 0.14748856976947133, 0.1452783452627996] ***
*** starting iteration: 3; err: [Inf, 0.16116125977548487, 0.14748856976947133, 0.1452783452627996] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16116125977548487, 0.14748856976947133, 0.1452783452627996, 0.14444258672222998] ***
*** finished computation of 7 references, err: [Inf, 0.16116125977548487, 0.14748856976947133, 0.1452783452627996, 0.14444258672222998] ***
*** center 1: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [85, 29, 0]]
** centroid: 2, normalized-entropy: 0.8181559928454062, [(1, 85), (2, 29)]
*** center 3: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [81, 8, 0]]
** centroid: 4, normalized-entropy: 0.43609466429612137, [(1, 81), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [25, 79, 0]]
** centroid: 5, normalized-entropy: 0.7956792965030224, [(1, 25), (2, 79)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 45, 21]]
** centroid: 6, normalized-entropy: 0.9023932827949788, [(2, 45), (3, 21)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 84, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.39643720713565533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.39643720713565533, 0.21196660566991238] ***
*** starting iteration: 2; err: [Inf, 0.39643720713565533, 0.21196660566991238] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.39643720713565533, 0.21196660566991238, 0.17824835801459402] ***
*** starting iteration: 3; err: [Inf, 0.39643720713565533, 0.21196660566991238, 0.17824835801459402] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.39643720713565533, 0.21196660566991238, 0.17824835801459402, 0.16747568595548462] ***
*** finished computation of 7 references, err: [Inf, 0.39643720713565533, 0.21196660566991238, 0.17824835801459402, 0.16747568595548462] ***
*** center 1: selecting labels [1] (freq >= 1) [from [157, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [51, 1, 0]]
** centroid: 2, normalized-entropy: 0.13709947889981755, [(1, 51), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [108, 74, 0]]
** centroid: 4, normalized-entropy: 0.974677061681131, [(1, 108), (2, 74)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [10, 81, 0]]
** centroid: 5, normalized-entropy: 0.49958440742366095, [(1, 10), (2, 81)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 84, 20]]
** centroid: 6, normalized-entropy: 0.7062740891876008, [(2, 84), (3, 20)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [29, 14, 0]]
** centroid: 7, normalized-entropy: 0.9103480624345157, [(1, 29), (2, 14)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22162802752967495] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22162802752967495, 0.16725243248514596] ***
*** starting iteration: 2; err: [Inf, 0.22162802752967495, 0.16725243248514596] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22162802752967495, 0.16725243248514596, 0.15315569598350612] ***
*** starting iteration: 3; err: [Inf, 0.22162802752967495, 0.16725243248514596, 0.15315569598350612] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22162802752967495, 0.16725243248514596, 0.15315569598350612, 0.14665444582739826] ***
*** finished computation of 7 references, err: [Inf, 0.22162802752967495, 0.16725243248514596, 0.15315569598350612, 0.14665444582739826] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [101, 2, 0]]
** centroid: 1, normalized-entropy: 0.13815722856252646, [(1, 101), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [104, 3, 0]]
** centroid: 2, normalized-entropy: 0.18445186314098744, [(1, 104), (2, 3)]
*** center 3: selecting labels [1] (freq >= 1) [from [149, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [39, 61, 0]]
** centroid: 4, normalized-entropy: 0.9647995485050873, [(1, 39), (2, 61)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 71, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 61, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 55, 21]]
** centroid: 7, normalized-entropy: 0.8503821170987139, [(2, 55), (3, 21)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9400178621735508, 0.9379649110188032, 0.9310088531645418, 0.9150108192024359, 0.9100058141974309, 0.9079888271505038, 0.9050337762912614, 0.8780247313181445, 0.8669777561993132, 0.8649967332602063, 0.8449976923030814, 0.8429327531123939, 0.8140355924787063, 0.7759675843508179]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.9, 1) => 0.9400178621735508
finished with 15
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.19407841736484352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19407841736484352, 0.15166443759189532] ***
*** starting iteration: 2; err: [Inf, 0.19407841736484352, 0.15166443759189532] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19407841736484352, 0.15166443759189532, 0.14681481046451106] ***
*** starting iteration: 3; err: [Inf, 0.19407841736484352, 0.15166443759189532, 0.14681481046451106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19407841736484352, 0.15166443759189532, 0.14681481046451106, 0.1457419746650478] ***
*** finished computation of 7 references, err: [Inf, 0.19407841736484352, 0.15166443759189532, 0.14681481046451106, 0.1457419746650478] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [102, 12, 0]]
** centroid: 1, normalized-entropy: 0.48546076074591343, [(1, 102), (2, 12)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 49, 21]]
** centroid: 2, normalized-entropy: 0.8812908992306927, [(2, 49), (3, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [85, 5, 0]]
** centroid: 4, normalized-entropy: 0.3095434291503252, [(1, 85), (2, 5)]
*** center 5: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 87, 0]]
** centroid: 6, normalized-entropy: 0.26014536394771426, [(1, 4), (2, 87)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 92, 0]]
** centroid: 7, normalized-entropy: 0.14854949043034832, [(1, 2), (2, 92)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18563623595954865] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18563623595954865, 0.15420216631641362] ***
*** starting iteration: 2; err: [Inf, 0.18563623595954865, 0.15420216631641362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18563623595954865, 0.15420216631641362, 0.1508360106296938] ***
*** starting iteration: 3; err: [Inf, 0.18563623595954865, 0.15420216631641362, 0.1508360106296938] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18563623595954865, 0.15420216631641362, 0.1508360106296938, 0.1499353585819919] ***
*** finished computation of 7 references, err: [Inf, 0.18563623595954865, 0.15420216631641362, 0.1508360106296938, 0.1499353585819919] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 111, 20]]
** centroid: 1, normalized-entropy: 0.6164861842656257, [(2, 111), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [71, 4, 0]]
** centroid: 3, normalized-entropy: 0.3003914173647818, [(1, 71), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 33, 0]]
** centroid: 4, normalized-entropy: 0.951274087437692, [(1, 56), (2, 33)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [91, 15, 0]]
** centroid: 5, normalized-entropy: 0.5881782735046225, [(1, 91), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [83, 2, 0]]
** centroid: 6, normalized-entropy: 0.16082302082246946, [(1, 83), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 89, 0]]
** centroid: 7, normalized-entropy: 0.15240699892386778, [(1, 2), (2, 89)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1953858314240854] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1953858314240854, 0.15506255984965384] ***
*** starting iteration: 2; err: [Inf, 0.1953858314240854, 0.15506255984965384] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1953858314240854, 0.15506255984965384, 0.14924486689381244] ***
*** starting iteration: 3; err: [Inf, 0.1953858314240854, 0.15506255984965384, 0.14924486689381244] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1953858314240854, 0.15506255984965384, 0.14924486689381244, 0.14800605710265624] ***
*** finished computation of 7 references, err: [Inf, 0.1953858314240854, 0.15506255984965384, 0.14924486689381244, 0.14800605710265624] ***
*** center 1: selecting labels [1] (freq >= 1) [from [119, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [90, 5, 0]]
** centroid: 2, normalized-entropy: 0.2974722489192896, [(1, 90), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 72, 21]]
** centroid: 3, normalized-entropy: 0.7706290693639406, [(2, 72), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [18, 103, 0]]
** centroid: 5, normalized-entropy: 0.6067293172263869, [(1, 18), (2, 103)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [13, 70, 0]]
** centroid: 6, normalized-entropy: 0.6261776539736496, [(1, 13), (2, 70)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [72, 3, 0]]
** centroid: 7, normalized-entropy: 0.24229218908241482, [(1, 72), (2, 3)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9400178621735508, 0.9379649110188032, 0.9310088531645418, 0.9289708870547194, 0.9150108192024359, 0.9100058141974309, 0.9079888271505038, 0.9050337762912614, 0.8780247313181445, 0.8669777561993132, 0.8649967332602063, 0.8449976923030814, 0.8429327531123939, 0.8140355924787063, 0.7759675843508179]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.9, 1) => 0.9400178621735508
finished with 16
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.4267756790649873] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4267756790649873, 0.3062374498695135] ***
*** starting iteration: 2; err: [Inf, 0.4267756790649873, 0.3062374498695135] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4267756790649873, 0.3062374498695135, 0.30228252233461933] ***
*** starting iteration: 3; err: [Inf, 0.4267756790649873, 0.3062374498695135, 0.30228252233461933] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4267756790649873, 0.3062374498695135, 0.30228252233461933, 0.3019699723188494] ***
*** finished computation of 3 references, err: [Inf, 0.4267756790649873, 0.3062374498695135, 0.30228252233461933, 0.3019699723188494] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [247, 31, 0]]
** centroid: 1, normalized-entropy: 0.504456210049376, [(1, 247), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [153, 52, 0]]
** centroid: 2, normalized-entropy: 0.8170254396258728, [(1, 153), (2, 52)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 162, 21]]
** centroid: 3, normalized-entropy: 0.5140912790181233, [(2, 162), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39193997257479884] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39193997257479884, 0.30069862390034785] ***
*** starting iteration: 2; err: [Inf, 0.39193997257479884, 0.30069862390034785] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39193997257479884, 0.30069862390034785, 0.29783845839203743] ***
*** starting iteration: 3; err: [Inf, 0.39193997257479884, 0.30069862390034785, 0.29783845839203743] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39193997257479884, 0.30069862390034785, 0.29783845839203743, 0.29728576313631644] ***
*** finished computation of 3 references, err: [Inf, 0.39193997257479884, 0.30069862390034785, 0.29783845839203743, 0.29728576313631644] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [80, 165, 20]]
** centroid: 1, normalized-entropy: 0.7751481308291583, [(1, 80), (2, 165), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [111, 89, 0]]
** centroid: 2, normalized-entropy: 0.9912540071703689, [(1, 111), (2, 89)]
*** center 3: selecting labels [1] (freq >= 1) [from [202, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4617096058007838] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4617096058007838, 0.3048965558800651] ***
*** starting iteration: 2; err: [Inf, 0.4617096058007838, 0.3048965558800651] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4617096058007838, 0.3048965558800651, 0.29978361747868504] ***
*** starting iteration: 3; err: [Inf, 0.4617096058007838, 0.3048965558800651, 0.29978361747868504] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4617096058007838, 0.3048965558800651, 0.29978361747868504, 0.2983291406055977] ***
*** starting iteration: 4; err: [Inf, 0.4617096058007838, 0.3048965558800651, 0.29978361747868504, 0.2983291406055977] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4617096058007838, 0.3048965558800651, 0.29978361747868504, 0.2983291406055977, 0.2977370710113551] ***
*** finished computation of 3 references, err: [Inf, 0.4617096058007838, 0.3048965558800651, 0.29978361747868504, 0.2983291406055977, 0.2977370710113551] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [74, 165, 21]]
** centroid: 1, normalized-entropy: 0.7732147289506704, [(1, 74), (2, 165), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [203, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [116, 88, 0]]
** centroid: 3, normalized-entropy: 0.9863676072907089, [(1, 116), (2, 88)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 16)
[0.9400178621735508, 0.9379649110188032, 0.9310088531645418, 0.9289708870547194, 0.9150108192024359, 0.9149868431305558, 0.9100058141974309, 0.9079888271505038, 0.9050337762912614, 0.8780247313181445, 0.8669777561993132, 0.8649967332602063, 0.8449976923030814, 0.8429327531123939, 0.8140355924787063, 0.7759675843508179]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.9, 1) => 0.9400178621735508
finished with 17
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.22452171710557542] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22452171710557542, 0.19893265911587724] ***
*** finished computation of 7 references, err: [Inf, 0.22452171710557542, 0.19893265911587724] ***
*** center 1: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [114, 3, 0]]
** centroid: 2, normalized-entropy: 0.17203694935311387, [(1, 114), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [5, 73, 0]]
** centroid: 3, normalized-entropy: 0.34351974100740135, [(1, 5), (2, 73)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [50, 64, 0]]
** centroid: 4, normalized-entropy: 0.9890934397021431, [(1, 50), (2, 64)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [117, 7, 0]]
** centroid: 5, normalized-entropy: 0.3131950471154111, [(1, 117), (2, 7)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 48, 21]]
** centroid: 6, normalized-entropy: 0.8865408928220899, [(2, 48), (3, 21)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 50, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24343200786963573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24343200786963573, 0.19978361442821962] ***
*** finished computation of 7 references, err: [Inf, 0.24343200786963573, 0.19978361442821962] ***
*** center 1: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [5, 65, 0]]
** centroid: 2, normalized-entropy: 0.3712323266408756, [(1, 5), (2, 65)]
*** center 3: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [140, 6, 0]]
** centroid: 4, normalized-entropy: 0.24729443986205674, [(1, 140), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [14, 74, 0]]
** centroid: 5, normalized-entropy: 0.6321302781219708, [(1, 14), (2, 74)]
*** center 6: selecting labels [1, 2, 3] (freq >= 1) [from [1, 109, 20]]
** centroid: 6, normalized-entropy: 0.43066858463597013, [(1, 1), (2, 109), (3, 20)]
*** center 7: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3237723599424002] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3237723599424002, 0.24607452430177307] ***
*** finished computation of 7 references, err: [Inf, 0.3237723599424002, 0.24607452430177307] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [15, 114, 0]]
** centroid: 1, normalized-entropy: 0.5185697317883058, [(1, 15), (2, 114)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [197, 3, 0]]
** centroid: 2, normalized-entropy: 0.11236071009937666, [(1, 197), (2, 3)]
*** center 3: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 6: selecting labels [1, 2, 3] (freq >= 1) [from [6, 124, 21]]
** centroid: 6, normalized-entropy: 0.5136450612182065, [(1, 6), (2, 124), (3, 21)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [40, 12, 0]]
** centroid: 7, normalized-entropy: 0.7793498372920851, [(1, 40), (2, 12)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 17)
[0.9400178621735508, 0.9379649110188032, 0.9310088531645418, 0.9309908711106316, 0.9289708870547194, 0.9150108192024359, 0.9149868431305558, 0.9100058141974309, 0.9079888271505038, 0.9050337762912614, 0.8780247313181445, 0.8669777561993132, 0.8649967332602063, 0.8449976923030814, 0.8429327531123939, 0.8140355924787063, 0.7759675843508179]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.9, 1) => 0.9400178621735508
finished with 18
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.42062821703495923] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42062821703495923, 0.2649380809714173] ***
*** starting iteration: 2; err: [Inf, 0.42062821703495923, 0.2649380809714173] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42062821703495923, 0.2649380809714173, 0.24756781993693933] ***
*** starting iteration: 3; err: [Inf, 0.42062821703495923, 0.2649380809714173, 0.24756781993693933] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42062821703495923, 0.2649380809714173, 0.24756781993693933, 0.2432066439161519] ***
*** finished computation of 3 references, err: [Inf, 0.42062821703495923, 0.2649380809714173, 0.24756781993693933, 0.2432066439161519] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [270, 11, 0]]
** centroid: 1, normalized-entropy: 0.2383624091578136, [(1, 270), (2, 11)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [7, 175, 21]]
** centroid: 2, normalized-entropy: 0.4357800612176847, [(1, 7), (2, 175), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [123, 59, 0]]
** centroid: 3, normalized-entropy: 0.9088648376213604, [(1, 123), (2, 59)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31315298414770987] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31315298414770987, 0.24579592433868386] ***
*** starting iteration: 2; err: [Inf, 0.31315298414770987, 0.24579592433868386] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31315298414770987, 0.24579592433868386, 0.2332681228966638] ***
*** starting iteration: 3; err: [Inf, 0.31315298414770987, 0.24579592433868386, 0.2332681228966638] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31315298414770987, 0.24579592433868386, 0.2332681228966638, 0.2318169825118331] ***
*** finished computation of 3 references, err: [Inf, 0.31315298414770987, 0.24579592433868386, 0.2332681228966638, 0.2318169825118331] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [153, 34, 0]]
** centroid: 1, normalized-entropy: 0.6840384356390419, [(1, 153), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [240, 30, 0]]
** centroid: 2, normalized-entropy: 0.5032583347756457, [(1, 240), (2, 30)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 190, 20]]
** centroid: 3, normalized-entropy: 0.45371633918694493, [(2, 190), (3, 20)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30072123929578953] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30072123929578953, 0.2492520918000093] ***
*** starting iteration: 2; err: [Inf, 0.30072123929578953, 0.2492520918000093] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30072123929578953, 0.2492520918000093, 0.23464055989996002] ***
*** starting iteration: 3; err: [Inf, 0.30072123929578953, 0.2492520918000093, 0.23464055989996002] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30072123929578953, 0.2492520918000093, 0.23464055989996002, 0.2320565371334307] ***
*** finished computation of 3 references, err: [Inf, 0.30072123929578953, 0.2492520918000093, 0.23464055989996002, 0.2320565371334307] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 183, 21]]
** centroid: 1, normalized-entropy: 0.4782501641071144, [(2, 183), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [172, 59, 0]]
** centroid: 2, normalized-entropy: 0.8197426443549776, [(1, 172), (2, 59)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [221, 11, 0]]
** centroid: 3, normalized-entropy: 0.27530766137534524, [(1, 221), (2, 11)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 18)
[0.9400178621735508, 0.9379649110188032, 0.9310088531645418, 0.9309908711106316, 0.9289708870547194, 0.9150108192024359, 0.9149868431305558, 0.9100058141974309, 0.9079888271505038, 0.9050337762912614, 0.8869588151025276, 0.8780247313181445, 0.8669777561993132, 0.8649967332602063, 0.8449976923030814, 0.8429327531123939, 0.8140355924787063, 0.7759675843508179]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.9, 1) => 0.9400178621735508
finished with 18
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9400178621735508, 0.9379649110188032, 0.9310088531645418, 0.9309908711106316, 0.9289708870547194, 0.9150108192024359, 0.9149868431305558, 0.9100058141974309, 0.9079888271505038, 0.9050337762912614, 0.8869588151025276, 0.8780247313181445, 0.8669777561993132, 0.8649967332602063, 0.8449976923030814, 0.8429327531123939, 0.8140355924787063, 0.7759675843508179]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.9, 1) => 0.9400178621735508
finished with 18
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9400178621735508, 0.9379649110188032, 0.9310088531645418, 0.9309908711106316, 0.9289708870547194, 0.9150108192024359, 0.9149868431305558, 0.9100058141974309, 0.9079888271505038, 0.9050337762912614, 0.8869588151025276, 0.8780247313181445, 0.8669777561993132, 0.8649967332602063, 0.8449976923030814, 0.8429327531123939, 0.8140355924787063, 0.7759675843508179]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.9, 1) => 0.9400178621735508
finished with 18
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.2032875836379826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2032875836379826, 0.16992162986309267] ***
*** starting iteration: 2; err: [Inf, 0.2032875836379826, 0.16992162986309267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2032875836379826, 0.16992162986309267, 0.15525339252641424] ***
*** starting iteration: 3; err: [Inf, 0.2032875836379826, 0.16992162986309267, 0.15525339252641424] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2032875836379826, 0.16992162986309267, 0.15525339252641424, 0.14990433614631182] ***
*** finished computation of 7 references, err: [Inf, 0.2032875836379826, 0.16992162986309267, 0.15525339252641424, 0.14990433614631182] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 135, 31]]
** centroid: 1, normalized-entropy: 0.6946165926490012, [(2, 135), (3, 31)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [34, 137, 0]]
** centroid: 2, normalized-entropy: 0.7195827372946481, [(1, 34), (2, 137)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [35, 96, 0]]
** centroid: 3, normalized-entropy: 0.8373825002984822, [(1, 35), (2, 96)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [195, 1, 0]]
** centroid: 4, normalized-entropy: 0.046192440129626124, [(1, 195), (2, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [80, 7, 0]]
** centroid: 5, normalized-entropy: 0.40379715049939235, [(1, 80), (2, 7)]
*** center 6: selecting labels [1] (freq >= 1) [from [138, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21580379496328533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21580379496328533, 0.172033028928563] ***
*** starting iteration: 2; err: [Inf, 0.21580379496328533, 0.172033028928563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21580379496328533, 0.172033028928563, 0.1626790236569941] ***
*** starting iteration: 3; err: [Inf, 0.21580379496328533, 0.172033028928563, 0.1626790236569941] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21580379496328533, 0.172033028928563, 0.1626790236569941, 0.15626176540739833] ***
*** finished computation of 7 references, err: [Inf, 0.21580379496328533, 0.172033028928563, 0.1626790236569941, 0.15626176540739833] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 115, 12]]
** centroid: 1, normalized-entropy: 0.45127597915596884, [(2, 115), (3, 12)]
*** center 2: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [60, 29, 0]]
** centroid: 3, normalized-entropy: 0.9106223680988619, [(1, 60), (2, 29)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [21, 54, 0]]
** centroid: 4, normalized-entropy: 0.8554508105601307, [(1, 21), (2, 54)]
*** center 5: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [43, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25989679383207115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25989679383207115, 0.1583463556226343] ***
*** starting iteration: 2; err: [Inf, 0.25989679383207115, 0.1583463556226343] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25989679383207115, 0.1583463556226343, 0.14874541347287595] ***
*** starting iteration: 3; err: [Inf, 0.25989679383207115, 0.1583463556226343, 0.14874541347287595] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25989679383207115, 0.1583463556226343, 0.14874541347287595, 0.14651380573399364] ***
*** finished computation of 7 references, err: [Inf, 0.25989679383207115, 0.1583463556226343, 0.14874541347287595, 0.14651380573399364] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 88, 14]]
** centroid: 1, normalized-entropy: 0.577004250315725, [(2, 88), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [58, 1, 0]]
** centroid: 3, normalized-entropy: 0.12394986771100755, [(1, 58), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [6, 50, 0]]
** centroid: 4, normalized-entropy: 0.4912373418243334, [(1, 6), (2, 50)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [46, 28, 0]]
** centroid: 5, normalized-entropy: 0.9568886656798214, [(1, 46), (2, 28)]
*** center 6: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [39, 32, 0]]
** centroid: 7, normalized-entropy: 0.9929768866085175, [(1, 39), (2, 32)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23716429717093707] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23716429717093707, 0.19283710484486075] ***
*** starting iteration: 2; err: [Inf, 0.23716429717093707, 0.19283710484486075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23716429717093707, 0.19283710484486075, 0.17598502607923] ***
*** starting iteration: 3; err: [Inf, 0.23716429717093707, 0.19283710484486075, 0.17598502607923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23716429717093707, 0.19283710484486075, 0.17598502607923, 0.16687044145539404] ***
*** finished computation of 7 references, err: [Inf, 0.23716429717093707, 0.19283710484486075, 0.17598502607923, 0.16687044145539404] ***
*** center 1: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [66, 17, 0]]
** centroid: 3, normalized-entropy: 0.7314625617214586, [(1, 66), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 55, 0]]
** centroid: 4, normalized-entropy: 0.9940302114769566, [(1, 66), (2, 55)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [8, 25, 0]]
** centroid: 5, normalized-entropy: 0.7990485210442682, [(1, 8), (2, 25)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 70, 14]]
** centroid: 6, normalized-entropy: 0.6500224216483541, [(2, 70), (3, 14)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [8, 13, 0]]
** centroid: 7, normalized-entropy: 0.9587118829771317, [(1, 8), (2, 13)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23657329020276666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23657329020276666, 0.17094699099007993] ***
*** starting iteration: 2; err: [Inf, 0.23657329020276666, 0.17094699099007993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23657329020276666, 0.17094699099007993, 0.16284806143585592] ***
*** starting iteration: 3; err: [Inf, 0.23657329020276666, 0.17094699099007993, 0.16284806143585592] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23657329020276666, 0.17094699099007993, 0.16284806143585592, 0.16007781295664608] ***
*** finished computation of 7 references, err: [Inf, 0.23657329020276666, 0.17094699099007993, 0.16284806143585592, 0.16007781295664608] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 52, 7]]
** centroid: 1, normalized-entropy: 0.5254506799086205, [(2, 52), (3, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [111, 7, 0]]
** centroid: 2, normalized-entropy: 0.3247477475036634, [(1, 111), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [66, 10, 0]]
** centroid: 3, normalized-entropy: 0.5617526078313283, [(1, 66), (2, 10)]
*** center 4: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 82, 6]]
** centroid: 5, normalized-entropy: 0.3591016256485496, [(2, 82), (3, 6)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [37, 26, 0]]
** centroid: 6, normalized-entropy: 0.9778956822310348, [(1, 37), (2, 26)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 30, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2250231095161289] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2250231095161289, 0.1596181067135185] ***
*** starting iteration: 2; err: [Inf, 0.2250231095161289, 0.1596181067135185] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2250231095161289, 0.1596181067135185, 0.15540151115879416] ***
*** starting iteration: 3; err: [Inf, 0.2250231095161289, 0.1596181067135185, 0.15540151115879416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2250231095161289, 0.1596181067135185, 0.15540151115879416, 0.15317863410804422] ***
*** finished computation of 7 references, err: [Inf, 0.2250231095161289, 0.1596181067135185, 0.15540151115879416, 0.15317863410804422] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [69, 36, 0]]
** centroid: 1, normalized-entropy: 0.927526588431676, [(1, 69), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [28, 49, 0]]
** centroid: 2, normalized-entropy: 0.9456603046006401, [(1, 28), (2, 49)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [46, 21, 0]]
** centroid: 3, normalized-entropy: 0.8970964164730478, [(1, 46), (2, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 89, 16]]
** centroid: 5, normalized-entropy: 0.6157667047517474, [(2, 89), (3, 16)]
*** center 6: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [43, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1999362209304236] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1999362209304236, 0.16264736308902503] ***
*** starting iteration: 2; err: [Inf, 0.1999362209304236, 0.16264736308902503] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1999362209304236, 0.16264736308902503, 0.15430406811460853] ***
*** starting iteration: 3; err: [Inf, 0.1999362209304236, 0.16264736308902503, 0.15430406811460853] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1999362209304236, 0.16264736308902503, 0.15430406811460853, 0.14786056258622557] ***
*** finished computation of 7 references, err: [Inf, 0.1999362209304236, 0.16264736308902503, 0.15430406811460853, 0.14786056258622557] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [76, 2, 0]]
** centroid: 1, normalized-entropy: 0.17203694935311387, [(1, 76), (2, 2)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 53, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 69, 13]]
** centroid: 3, normalized-entropy: 0.6307970795750609, [(2, 69), (3, 13)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [42, 30, 0]]
** centroid: 4, normalized-entropy: 0.9798687566511527, [(1, 42), (2, 30)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [72, 26, 0]]
** centroid: 5, normalized-entropy: 0.834648285181383, [(1, 72), (2, 26)]
*** center 6: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25282273104041814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25282273104041814, 0.17363698805961758] ***
*** starting iteration: 2; err: [Inf, 0.25282273104041814, 0.17363698805961758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25282273104041814, 0.17363698805961758, 0.16473530720267446] ***
*** starting iteration: 3; err: [Inf, 0.25282273104041814, 0.17363698805961758, 0.16473530720267446] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25282273104041814, 0.17363698805961758, 0.16473530720267446, 0.15850432258285582] ***
*** finished computation of 7 references, err: [Inf, 0.25282273104041814, 0.17363698805961758, 0.16473530720267446, 0.15850432258285582] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [58, 14, 0]]
** centroid: 1, normalized-entropy: 0.710676853856123, [(1, 58), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [88, 15, 0]]
** centroid: 2, normalized-entropy: 0.5987981837442868, [(1, 88), (2, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 100, 14]]
** centroid: 4, normalized-entropy: 0.5373760853377334, [(2, 100), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [10, 55, 0]]
** centroid: 5, normalized-entropy: 0.6193821946787638, [(1, 10), (2, 55)]
*** center 6: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2090723033696413] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2090723033696413, 0.16631640889309346] ***
*** starting iteration: 2; err: [Inf, 0.2090723033696413, 0.16631640889309346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2090723033696413, 0.16631640889309346, 0.15573981603141873] ***
*** starting iteration: 3; err: [Inf, 0.2090723033696413, 0.16631640889309346, 0.15573981603141873] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2090723033696413, 0.16631640889309346, 0.15573981603141873, 0.1502702495958656] ***
*** finished computation of 7 references, err: [Inf, 0.2090723033696413, 0.16631640889309346, 0.15573981603141873, 0.1502702495958656] ***
*** center 1: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 44, 15]]
** centroid: 4, normalized-entropy: 0.8179252501386403, [(2, 44), (3, 15)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 75, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [13, 43, 0]]
** centroid: 6, normalized-entropy: 0.7817281222714539, [(1, 13), (2, 43)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [32, 28, 0]]
** centroid: 7, normalized-entropy: 0.9967916319816367, [(1, 32), (2, 28)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21544492028467357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21544492028467357, 0.17013448727317154] ***
*** starting iteration: 2; err: [Inf, 0.21544492028467357, 0.17013448727317154] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21544492028467357, 0.17013448727317154, 0.16258531277859584] ***
*** starting iteration: 3; err: [Inf, 0.21544492028467357, 0.17013448727317154, 0.16258531277859584] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21544492028467357, 0.17013448727317154, 0.16258531277859584, 0.15796145007945597] ***
*** finished computation of 7 references, err: [Inf, 0.21544492028467357, 0.17013448727317154, 0.16258531277859584, 0.15796145007945597] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [75, 21, 0]]
** centroid: 1, normalized-entropy: 0.7578784625383954, [(1, 75), (2, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [17, 57, 0]]
** centroid: 3, normalized-entropy: 0.77753986416076, [(1, 17), (2, 57)]
*** center 4: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [31, 40, 0]]
** centroid: 5, normalized-entropy: 0.9883779727795042, [(1, 31), (2, 40)]
*** center 6: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 73, 14]]
** centroid: 7, normalized-entropy: 0.6365048555378351, [(2, 73), (3, 14)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25127188354264945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25127188354264945, 0.17924406181648372] ***
*** starting iteration: 2; err: [Inf, 0.25127188354264945, 0.17924406181648372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25127188354264945, 0.17924406181648372, 0.16106270832475275] ***
*** starting iteration: 3; err: [Inf, 0.25127188354264945, 0.17924406181648372, 0.16106270832475275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25127188354264945, 0.17924406181648372, 0.16106270832475275, 0.15542134446185082] ***
*** finished computation of 7 references, err: [Inf, 0.25127188354264945, 0.17924406181648372, 0.16106270832475275, 0.15542134446185082] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [103, 11, 0]]
** centroid: 1, normalized-entropy: 0.4577733290341998, [(1, 103), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [86, 1, 0]]
** centroid: 2, normalized-entropy: 0.09054385326964301, [(1, 86), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 36, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 48, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 73, 0]]
** centroid: 6, normalized-entropy: 0.49917983618854633, [(1, 9), (2, 73)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 14, 18]]
** centroid: 7, normalized-entropy: 0.9886994082884974, [(2, 14), (3, 18)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23478827349469067] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23478827349469067, 0.16951097938790918] ***
*** starting iteration: 2; err: [Inf, 0.23478827349469067, 0.16951097938790918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23478827349469067, 0.16951097938790918, 0.1482510592713952] ***
*** starting iteration: 3; err: [Inf, 0.23478827349469067, 0.16951097938790918, 0.1482510592713952] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23478827349469067, 0.16951097938790918, 0.1482510592713952, 0.14445983933471143] ***
*** finished computation of 7 references, err: [Inf, 0.23478827349469067, 0.16951097938790918, 0.1482510592713952, 0.14445983933471143] ***
*** center 1: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 72, 1]]
** centroid: 2, normalized-entropy: 0.1044190780054077, [(2, 72), (3, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [56, 7, 0]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(1, 56), (2, 7)]
*** center 4: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [69, 6, 0]]
** centroid: 5, normalized-entropy: 0.4021791902022729, [(1, 69), (2, 6)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [20, 46, 0]]
** centroid: 6, normalized-entropy: 0.8849636363831529, [(1, 20), (2, 46)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 68, 11]]
** centroid: 7, normalized-entropy: 0.5822463050121238, [(2, 68), (3, 11)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26259939187392595] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26259939187392595, 0.17812981864996255] ***
*** starting iteration: 2; err: [Inf, 0.26259939187392595, 0.17812981864996255] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26259939187392595, 0.17812981864996255, 0.16406975095905363] ***
*** starting iteration: 3; err: [Inf, 0.26259939187392595, 0.17812981864996255, 0.16406975095905363] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26259939187392595, 0.17812981864996255, 0.16406975095905363, 0.15640398036316036] ***
*** finished computation of 7 references, err: [Inf, 0.26259939187392595, 0.17812981864996255, 0.16406975095905363, 0.15640398036316036] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 60, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 46, 15]]
** centroid: 2, normalized-entropy: 0.8047175193210769, [(2, 46), (3, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [112, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [23, 32, 0]]
** centroid: 5, normalized-entropy: 0.980597440991727, [(1, 23), (2, 32)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [80, 44, 0]]
** centroid: 6, normalized-entropy: 0.9383153522334071, [(1, 80), (2, 44)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [40, 6, 0]]
** centroid: 7, normalized-entropy: 0.5586293734521991, [(1, 40), (2, 6)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19979499352909624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19979499352909624, 0.17318234882876277] ***
*** starting iteration: 2; err: [Inf, 0.19979499352909624, 0.17318234882876277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19979499352909624, 0.17318234882876277, 0.16199457593262195] ***
*** starting iteration: 3; err: [Inf, 0.19979499352909624, 0.17318234882876277, 0.16199457593262195] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19979499352909624, 0.17318234882876277, 0.16199457593262195, 0.15398981015710161] ***
*** finished computation of 7 references, err: [Inf, 0.19979499352909624, 0.17318234882876277, 0.16199457593262195, 0.15398981015710161] ***
*** center 1: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [30, 50, 0]]
** centroid: 2, normalized-entropy: 0.954434002924965, [(1, 30), (2, 50)]
*** center 3: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 47, 13]]
** centroid: 4, normalized-entropy: 0.7540340561971327, [(2, 47), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 33, 0]]
** centroid: 5, normalized-entropy: 0.4138168503036336, [(1, 3), (2, 33)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [16, 56, 0]]
** centroid: 6, normalized-entropy: 0.7642045065086204, [(1, 16), (2, 56)]
*** center 7: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23451645073294639] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23451645073294639, 0.1772342487834394] ***
*** starting iteration: 2; err: [Inf, 0.23451645073294639, 0.1772342487834394] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23451645073294639, 0.1772342487834394, 0.1659484309934778] ***
*** starting iteration: 3; err: [Inf, 0.23451645073294639, 0.1772342487834394, 0.1659484309934778] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23451645073294639, 0.1772342487834394, 0.1659484309934778, 0.16153267793171108] ***
*** finished computation of 7 references, err: [Inf, 0.23451645073294639, 0.1772342487834394, 0.1659484309934778, 0.16153267793171108] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [41, 21, 0]]
** centroid: 1, normalized-entropy: 0.9235785996175947, [(1, 41), (2, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [112, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 73, 1]]
** centroid: 4, normalized-entropy: 0.10327508457163559, [(2, 73), (3, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [82, 21, 0]]
** centroid: 5, normalized-entropy: 0.7296274178915987, [(1, 82), (2, 21)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 29, 13]]
** centroid: 6, normalized-entropy: 0.8926230133850988, [(2, 29), (3, 13)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 50, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23589629550464453] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23589629550464453, 0.16838108775392174] ***
*** starting iteration: 2; err: [Inf, 0.23589629550464453, 0.16838108775392174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23589629550464453, 0.16838108775392174, 0.15609930350910872] ***
*** starting iteration: 3; err: [Inf, 0.23589629550464453, 0.16838108775392174, 0.15609930350910872] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23589629550464453, 0.16838108775392174, 0.15609930350910872, 0.15108065395709128] ***
*** finished computation of 7 references, err: [Inf, 0.23589629550464453, 0.16838108775392174, 0.15609930350910872, 0.15108065395709128] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [57, 12, 0]]
** centroid: 1, normalized-entropy: 0.6665783579949205, [(1, 57), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [29, 49, 0]]
** centroid: 2, normalized-entropy: 0.9520402801398793, [(1, 29), (2, 49)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [16, 51, 0]]
** centroid: 3, normalized-entropy: 0.7930490047779772, [(1, 16), (2, 51)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 72, 16]]
** centroid: 4, normalized-entropy: 0.6840384356390419, [(2, 72), (3, 16)]
*** center 5: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22132295675482602] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22132295675482602, 0.16760879613645374] ***
*** starting iteration: 2; err: [Inf, 0.22132295675482602, 0.16760879613645374] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22132295675482602, 0.16760879613645374, 0.15948915182054044] ***
*** starting iteration: 3; err: [Inf, 0.22132295675482602, 0.16760879613645374, 0.15948915182054044] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22132295675482602, 0.16760879613645374, 0.15948915182054044, 0.1515949717145413] ***
*** finished computation of 7 references, err: [Inf, 0.22132295675482602, 0.16760879613645374, 0.15948915182054044, 0.1515949717145413] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [29, 19, 0]]
** centroid: 1, normalized-entropy: 0.968461008760162, [(1, 29), (2, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [72, 44, 0]]
** centroid: 4, normalized-entropy: 0.9575534837147484, [(1, 72), (2, 44)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [37, 21, 0]]
** centroid: 5, normalized-entropy: 0.9443871950133461, [(1, 37), (2, 21)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 110, 18]]
** centroid: 6, normalized-entropy: 0.5858732928619204, [(2, 110), (3, 18)]
*** center 7: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20862645824812354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20862645824812354, 0.16183243363909422] ***
*** starting iteration: 2; err: [Inf, 0.20862645824812354, 0.16183243363909422] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20862645824812354, 0.16183243363909422, 0.15064307415951042] ***
*** starting iteration: 3; err: [Inf, 0.20862645824812354, 0.16183243363909422, 0.15064307415951042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20862645824812354, 0.16183243363909422, 0.15064307415951042, 0.14666379222273826] ***
*** finished computation of 7 references, err: [Inf, 0.20862645824812354, 0.16183243363909422, 0.15064307415951042, 0.14666379222273826] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 50, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [30, 5, 0]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(1, 30), (2, 5)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [75, 17, 0]]
** centroid: 3, normalized-entropy: 0.6904285855304167, [(1, 75), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [42, 44, 0]]
** centroid: 4, normalized-entropy: 0.9996098363678071, [(1, 42), (2, 44)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 77, 17]]
** centroid: 5, normalized-entropy: 0.6819353204567525, [(2, 77), (3, 17)]
*** center 6: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20169983156770468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20169983156770468, 0.1859524648860097] ***
*** starting iteration: 2; err: [Inf, 0.20169983156770468, 0.1859524648860097] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20169983156770468, 0.1859524648860097, 0.17451921161450445] ***
*** starting iteration: 3; err: [Inf, 0.20169983156770468, 0.1859524648860097, 0.17451921161450445] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20169983156770468, 0.1859524648860097, 0.17451921161450445, 0.15133594141993673] ***
*** finished computation of 7 references, err: [Inf, 0.20169983156770468, 0.1859524648860097, 0.17451921161450445, 0.15133594141993673] ***
*** center 1: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [38, 32, 0]]
** centroid: 2, normalized-entropy: 0.9946937953613056, [(1, 38), (2, 32)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 64, 10]]
** centroid: 3, normalized-entropy: 0.5713549744279549, [(2, 64), (3, 10)]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [7, 72, 1]]
** centroid: 4, normalized-entropy: 0.33019837230919735, [(1, 7), (2, 72), (3, 1)]
*** center 5: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [29, 26, 0]]
** centroid: 7, normalized-entropy: 0.9978527766088781, [(1, 29), (2, 26)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18743790364265442] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18743790364265442, 0.16529843259230256] ***
*** starting iteration: 2; err: [Inf, 0.18743790364265442, 0.16529843259230256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18743790364265442, 0.16529843259230256, 0.1535921097099781] ***
*** starting iteration: 3; err: [Inf, 0.18743790364265442, 0.16529843259230256, 0.1535921097099781] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18743790364265442, 0.16529843259230256, 0.1535921097099781, 0.14727857610350475] ***
*** finished computation of 7 references, err: [Inf, 0.18743790364265442, 0.16529843259230256, 0.1535921097099781, 0.14727857610350475] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [21, 76, 0]]
** centroid: 1, normalized-entropy: 0.7537153483720096, [(1, 21), (2, 76)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 64, 15]]
** centroid: 2, normalized-entropy: 0.7012065844539666, [(2, 64), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [60, 13, 0]]
** centroid: 3, normalized-entropy: 0.6758635715876156, [(1, 60), (2, 13)]
*** center 4: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [9, 34, 0]]
** centroid: 5, normalized-entropy: 0.7401470427139037, [(1, 9), (2, 34)]
*** center 6: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24707929430622608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24707929430622608, 0.16145962745696307] ***
*** starting iteration: 2; err: [Inf, 0.24707929430622608, 0.16145962745696307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24707929430622608, 0.16145962745696307, 0.15230081698019057] ***
*** starting iteration: 3; err: [Inf, 0.24707929430622608, 0.16145962745696307, 0.15230081698019057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24707929430622608, 0.16145962745696307, 0.15230081698019057, 0.15061027252860368] ***
*** finished computation of 7 references, err: [Inf, 0.24707929430622608, 0.16145962745696307, 0.15230081698019057, 0.15061027252860368] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [33, 16, 0]]
** centroid: 1, normalized-entropy: 0.9113423759758414, [(1, 33), (2, 16)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 94, 18]]
** centroid: 2, normalized-entropy: 0.6360156177392153, [(2, 94), (3, 18)]
*** center 3: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [52, 20, 0]]
** centroid: 4, normalized-entropy: 0.8524051786494784, [(1, 52), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [52, 49, 0]]
** centroid: 5, normalized-entropy: 0.999363485672765, [(1, 52), (2, 49)]
*** center 6: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21763077568402514] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21763077568402514, 0.18496257427427917] ***
*** starting iteration: 2; err: [Inf, 0.21763077568402514, 0.18496257427427917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21763077568402514, 0.18496257427427917, 0.17525480897538365] ***
*** starting iteration: 3; err: [Inf, 0.21763077568402514, 0.18496257427427917, 0.17525480897538365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21763077568402514, 0.18496257427427917, 0.17525480897538365, 0.16960117860883475] ***
*** finished computation of 7 references, err: [Inf, 0.21763077568402514, 0.18496257427427917, 0.17525480897538365, 0.16960117860883475] ***
*** center 1: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 29, 0]]
** centroid: 2, normalized-entropy: 0.9556222693531471, [(1, 48), (2, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [6, 72, 0]]
** centroid: 3, normalized-entropy: 0.3912435636292556, [(1, 6), (2, 72)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 16]]
** centroid: 4, normalized-entropy: 0.32275695889739825, [(2, 1), (3, 16)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 51, 1]]
** centroid: 5, normalized-entropy: 0.13709947889981755, [(2, 51), (3, 1)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [30, 49, 0]]
** centroid: 6, normalized-entropy: 0.9578630237479795, [(1, 30), (2, 49)]
*** center 7: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20170285940915347] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20170285940915347, 0.1532071020649746] ***
*** starting iteration: 2; err: [Inf, 0.20170285940915347, 0.1532071020649746] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20170285940915347, 0.1532071020649746, 0.14759473098535092] ***
*** starting iteration: 3; err: [Inf, 0.20170285940915347, 0.1532071020649746, 0.14759473098535092] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20170285940915347, 0.1532071020649746, 0.14759473098535092, 0.14585478773899377] ***
*** finished computation of 7 references, err: [Inf, 0.20170285940915347, 0.1532071020649746, 0.14759473098535092, 0.14585478773899377] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [70, 6, 0]]
** centroid: 1, normalized-entropy: 0.39845927409523557, [(1, 70), (2, 6)]
*** center 2: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [27, 53, 0]]
** centroid: 3, normalized-entropy: 0.9224062617590724, [(1, 27), (2, 53)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 49, 1]]
** centroid: 4, normalized-entropy: 0.14144054254182067, [(2, 49), (3, 1)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 45, 12]]
** centroid: 5, normalized-entropy: 0.7424875695421234, [(2, 45), (3, 12)]
*** center 6: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [39, 35, 0]]
** centroid: 7, normalized-entropy: 0.9978913098356861, [(1, 39), (2, 35)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1995577610200271] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1995577610200271, 0.170657266670838] ***
*** starting iteration: 2; err: [Inf, 0.1995577610200271, 0.170657266670838] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1995577610200271, 0.170657266670838, 0.15823268562369047] ***
*** starting iteration: 3; err: [Inf, 0.1995577610200271, 0.170657266670838, 0.15823268562369047] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1995577610200271, 0.170657266670838, 0.15823268562369047, 0.14952585702203214] ***
*** finished computation of 7 references, err: [Inf, 0.1995577610200271, 0.170657266670838, 0.15823268562369047, 0.14952585702203214] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [67, 10, 0]]
** centroid: 1, normalized-entropy: 0.557081908103416, [(1, 67), (2, 10)]
*** center 2: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [31, 50, 0]]
** centroid: 4, normalized-entropy: 0.9599377175669783, [(1, 31), (2, 50)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 46, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [6, 55, 0]]
** centroid: 6, normalized-entropy: 0.4637773498877517, [(1, 6), (2, 55)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 30, 22]]
** centroid: 7, normalized-entropy: 0.9828586897127057, [(2, 30), (3, 22)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19728717286884784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19728717286884784, 0.16350793405831793] ***
*** starting iteration: 2; err: [Inf, 0.19728717286884784, 0.16350793405831793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19728717286884784, 0.16350793405831793, 0.15125087706372142] ***
*** starting iteration: 3; err: [Inf, 0.19728717286884784, 0.16350793405831793, 0.15125087706372142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19728717286884784, 0.16350793405831793, 0.15125087706372142, 0.14536595554556697] ***
*** finished computation of 7 references, err: [Inf, 0.19728717286884784, 0.16350793405831793, 0.15125087706372142, 0.14536595554556697] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [32, 52, 0]]
** centroid: 1, normalized-entropy: 0.9587118829771317, [(1, 32), (2, 52)]
*** center 2: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [16, 51, 0]]
** centroid: 3, normalized-entropy: 0.7930490047779772, [(1, 16), (2, 51)]
*** center 4: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 63, 18]]
** centroid: 6, normalized-entropy: 0.7642045065086204, [(2, 63), (3, 18)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [48, 22, 0]]
** centroid: 7, normalized-entropy: 0.8980587934501658, [(1, 48), (2, 22)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24256160252541303] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24256160252541303, 0.16126688695140182] ***
*** starting iteration: 2; err: [Inf, 0.24256160252541303, 0.16126688695140182] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24256160252541303, 0.16126688695140182, 0.15783583113085478] ***
*** starting iteration: 3; err: [Inf, 0.24256160252541303, 0.16126688695140182, 0.15783583113085478] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24256160252541303, 0.16126688695140182, 0.15783583113085478, 0.15673399253189563] ***
*** finished computation of 7 references, err: [Inf, 0.24256160252541303, 0.16126688695140182, 0.15783583113085478, 0.15673399253189563] ***
*** center 1: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [61, 23, 0]]
** centroid: 2, normalized-entropy: 0.8468781063424823, [(1, 61), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 99, 14]]
** centroid: 3, normalized-entropy: 0.5404508712940567, [(2, 99), (3, 14)]
*** center 4: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [54, 1, 0]]
** centroid: 5, normalized-entropy: 0.13110652958234514, [(1, 54), (2, 1)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [60, 36, 0]]
** centroid: 6, normalized-entropy: 0.954434002924965, [(1, 60), (2, 36)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [34, 32, 0]]
** centroid: 7, normalized-entropy: 0.9993375041688846, [(1, 34), (2, 32)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.43085050461255014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.43085050461255014, 0.2243484166543931] ***
*** starting iteration: 2; err: [Inf, 0.43085050461255014, 0.2243484166543931] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.43085050461255014, 0.2243484166543931, 0.19990871516987682] ***
*** starting iteration: 3; err: [Inf, 0.43085050461255014, 0.2243484166543931, 0.19990871516987682] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.43085050461255014, 0.2243484166543931, 0.19990871516987682, 0.17529213860072196] ***
*** finished computation of 7 references, err: [Inf, 0.43085050461255014, 0.2243484166543931, 0.19990871516987682, 0.17529213860072196] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [27, 25, 0]]
** centroid: 1, normalized-entropy: 0.9989326546260583, [(1, 27), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [99, 33, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 99), (2, 33)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 44, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 45, 15]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(2, 45), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [46, 10, 0]]
** centroid: 5, normalized-entropy: 0.6769418697808861, [(1, 46), (2, 10)]
*** center 6: selecting labels [1] (freq >= 1) [from [125, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 27, 4]]
** centroid: 7, normalized-entropy: 0.5547781633412736, [(2, 27), (3, 4)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18702832316793502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18702832316793502, 0.16448236180562525] ***
*** starting iteration: 2; err: [Inf, 0.18702832316793502, 0.16448236180562525] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18702832316793502, 0.16448236180562525, 0.15751055522821844] ***
*** starting iteration: 3; err: [Inf, 0.18702832316793502, 0.16448236180562525, 0.15751055522821844] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18702832316793502, 0.16448236180562525, 0.15751055522821844, 0.15078493320941924] ***
*** finished computation of 7 references, err: [Inf, 0.18702832316793502, 0.16448236180562525, 0.15751055522821844, 0.15078493320941924] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [40, 31, 0]]
** centroid: 1, normalized-entropy: 0.9883779727795042, [(1, 40), (2, 31)]
*** center 2: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [53, 29, 0]]
** centroid: 3, normalized-entropy: 0.9372930661967526, [(1, 53), (2, 29)]
*** center 4: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [9, 41, 0]]
** centroid: 5, normalized-entropy: 0.6800770457282798, [(1, 9), (2, 41)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 67, 19]]
** centroid: 6, normalized-entropy: 0.7618624463753669, [(2, 67), (3, 19)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [25, 20, 0]]
** centroid: 7, normalized-entropy: 0.9910760598382222, [(1, 25), (2, 20)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18584341243840755] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18584341243840755, 0.1544955347320065] ***
*** starting iteration: 2; err: [Inf, 0.18584341243840755, 0.1544955347320065] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18584341243840755, 0.1544955347320065, 0.14966187203489245] ***
*** starting iteration: 3; err: [Inf, 0.18584341243840755, 0.1544955347320065, 0.14966187203489245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18584341243840755, 0.1544955347320065, 0.14966187203489245, 0.1452464854521677] ***
*** finished computation of 7 references, err: [Inf, 0.18584341243840755, 0.1544955347320065, 0.14966187203489245, 0.1452464854521677] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [58, 18, 0]]
** centroid: 1, normalized-entropy: 0.7897492536625221, [(1, 58), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [15, 46, 0]]
** centroid: 2, normalized-entropy: 0.8047175193210769, [(1, 15), (2, 46)]
*** center 3: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 65, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 66, 13]]
** centroid: 6, normalized-entropy: 0.6451006442088483, [(2, 66), (3, 13)]
*** center 7: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25012121194042264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25012121194042264, 0.1631373390275985] ***
*** starting iteration: 2; err: [Inf, 0.25012121194042264, 0.1631373390275985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25012121194042264, 0.1631373390275985, 0.15717054684832693] ***
*** starting iteration: 3; err: [Inf, 0.25012121194042264, 0.1631373390275985, 0.15717054684832693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25012121194042264, 0.1631373390275985, 0.15717054684832693, 0.15432215575128794] ***
*** finished computation of 7 references, err: [Inf, 0.25012121194042264, 0.1631373390275985, 0.15717054684832693, 0.15432215575128794] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [51, 57, 0]]
** centroid: 1, normalized-entropy: 0.9977724720899819, [(1, 51), (2, 57)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 86, 15]]
** centroid: 2, normalized-entropy: 0.6061112071230008, [(2, 86), (3, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [16, 39, 0]]
** centroid: 4, normalized-entropy: 0.8698926856041562, [(1, 16), (2, 39)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [56, 10, 0]]
** centroid: 5, normalized-entropy: 0.6136190195993708, [(1, 56), (2, 10)]
*** center 6: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3071993508450687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3071993508450687, 0.18653040700778364] ***
*** starting iteration: 2; err: [Inf, 0.3071993508450687, 0.18653040700778364] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3071993508450687, 0.18653040700778364, 0.16642289707250893] ***
*** starting iteration: 3; err: [Inf, 0.3071993508450687, 0.18653040700778364, 0.16642289707250893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3071993508450687, 0.18653040700778364, 0.16642289707250893, 0.15792464209906756] ***
*** finished computation of 7 references, err: [Inf, 0.3071993508450687, 0.18653040700778364, 0.16642289707250893, 0.15792464209906756] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 124, 12]]
** centroid: 1, normalized-entropy: 0.43055186701043935, [(2, 124), (3, 12)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [65, 23, 0]]
** centroid: 2, normalized-entropy: 0.828797154590015, [(1, 65), (2, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [65, 15, 0]]
** centroid: 3, normalized-entropy: 0.6962122601251459, [(1, 65), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [45, 21, 0]]
** centroid: 4, normalized-entropy: 0.9023932827949788, [(1, 45), (2, 21)]
*** center 5: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
finished with 8 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 376,3 => 31,1 => 593), Dict(2 => 387,3 => 41,1 => 572))
[ Info: ===== scores for single classifier: {"micro_f1":0.892,"precision":0.892,"recall":0.892,"macro_recall":0.6251151948826368,"macro_f1":0.6046042617960427,"accuracy":0.892,"class_f1":{"2":0.875,"3":0.0,"1":0.9388127853881278},"class_precision":{"2":0.7924528301886793,"3":0.0,"1":0.982791586998088},"class_recall":{"2":0.9767441860465116,"3":0.0,"1":0.8986013986013986}}
[ Info: ===== scores for 1: {"micro_f1":0.962,"precision":0.962,"recall":0.962,"macro_recall":0.8828302954791893,"macro_f1":0.9190815947337686,"accuracy":0.962,"class_f1":{"2":0.9512820512820513,"3":0.8285714285714285,"1":0.9773913043478261},"class_precision":{"2":0.9440203562340967,"3":1.0,"1":0.972318339100346},"class_recall":{"2":0.958656330749354,"3":0.7073170731707317,"1":0.9825174825174825}}
[ Info: ===== scores for 5: {"micro_f1":0.968,"precision":0.968,"recall":0.968,"macro_recall":0.8961027365735251,"macro_f1":0.9287089559282546,"accuracy":0.968,"class_f1":{"2":0.959493670886076,"3":0.8450704225352113,"1":0.9815627743634768},"class_precision":{"2":0.9404466501240695,"3":1.0,"1":0.9858906525573192},"class_recall":{"2":0.979328165374677,"3":0.7317073170731707,"1":0.9772727272727273}}
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ===== scores for 7: {"micro_f1":0.939,"precision":0.939,"recall":0.939,"macro_recall":0.6527830481318854,"macro_f1":0.6359916886232676,"accuracy":0.939,"class_f1":{"2":0.9255189255189256,"3":0.0,"1":0.9824561403508772},"class_precision":{"2":0.8773148148148148,"3":0.0,"1":0.9859154929577465},"class_recall":{"2":0.979328165374677,"3":0.0,"1":0.9790209790209791}}
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ===== scores for 9: {"micro_f1":0.94,"precision":0.94,"recall":0.94,"macro_recall":0.6536443745746071,"macro_f1":0.6367159896357524,"accuracy":0.94,"class_f1":{"2":0.926829268292683,"3":0.0,"1":0.9833187006145742},"class_precision":{"2":0.8775981524249422,"3":0.0,"1":0.9876543209876543},"class_recall":{"2":0.9819121447028424,"3":0.0,"1":0.9790209790209791}}
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ===== scores for 11: {"micro_f1":0.943,"precision":0.943,"recall":0.943,"macro_recall":0.6559497780428013,"macro_f1":0.6388375728800304,"accuracy":0.943,"class_f1":{"2":0.930572472594397,"3":0.0,"1":0.9859402460456942},"class_precision":{"2":0.880184331797235,"3":0.0,"1":0.991166077738516},"class_recall":{"2":0.9870801033591732,"3":0.0,"1":0.9807692307692307}}
(score = 0.966, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.962, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.962, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.968, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.968, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.939, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.939, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.939, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.939, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.968,"k":3,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.968,"precision":0.968,"recall":0.968,"macro_recall":0.8885554058554627,"macro_f1":0.9235070799361272,"accuracy":0.968,"class_f1":{"2":0.959493670886076,"3":0.8285714285714285,"1":0.9824561403508772},"class_precision":{"2":0.9404466501240695,"3":1.0,"1":0.9859154929577465},"class_recall":{"2":0.979328165374677,"3":0.7073170731707317,"1":0.9790209790209791}}
Test Summary: | Pass  Total
AKNC          |    8      8
[488, 2, 2, 7, 1, 1, 4, 8, 5, 1, 1, 7, 7, 13, 8, 2, 14, 4, 6, 5, 4, 9, 35, 2, 14, 8, 2, 12, 1, 8, 4, 1, 3, 2, 29, 17, 150, 4, 22, 8, 7, 11, 31, 6, 48, 3, 10, 6, 27, 10, 5, 28, 13, 8, 27, 1, 1, 6, 14, 16, 21, 10, 11, 4, 1, 99, 18, 13, 30, 5, 29, 109, 8, 3, 1, 21, 4, 4, 32, 45, 38, 18, 3, 9, 19, 14, 6, 8, 4, 6, 6, 57, 12, 9, 10, 22, 1, 10, 200, 15, 3, 46, 5, 3, 26, 2, 6, 3, 9, 40, 12, 79, 65, 14, 18, 11, 15, 1, 24, 22, 17, 27, 58, 21, 4, 43, 21, 6, 1, 7, 13, 58, 5, 45, 6, 13, 4, 14, 4, 16, 30, 51, 5, 6, 9, 8, 32, 44, 2, 16, 11, 2, 12, 54, 13, 17, 16, 6, 35, 32, 8, 37, 42, 4, 75, 18, 54, 36, 46, 43, 10, 49, 9, 133, 10, 27, 34, 21, 78, 7, 10, 25, 15, 110, 27, 38, 7, 9, 5, 13, 10, 67, 4, 46, 15, 15, 35, 16, 19, 24, 55, 72, 19, 71, 22, 88, 12, 985, 15, 31, 5, 18, 46, 12, 17, 9, 4, 19, 3, 172, 35, 10, 4, 142, 9, 7, 38, 9, 88, 12, 15, 18, 4, 124, 70, 23, 254, 4, 130, 30, 5, 8, 17, 99, 9, 46, 34, 3, 5, 5, 13, 8, 69, 153, 16, 216, 8, 475, 18, 5, 41, 3, 10, 26, 7, 11, 14, 40, 17, 119, 18, 11, 108, 29, 65, 5, 3, 83, 15, 12, 80, 94, 74, 17, 23, 24, 235, 18, 60, 26, 11, 27, 2, 22, 65, 11, 6, 68, 6, 8]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6250000000000001, speedup = 0.293694681105723, eval_ratio = 0.074396)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4020182291666667,"recall":0.3880208333333334,"f1":null,"seconds":0.00017969124019145966,"exhaustive_search_seconds":0.00037143006920814514,"evaluations":513.015625,"distances_sum":1731.3264707160745}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5772569444444443,"recall":0.5772569444444443,"f1":null,"seconds":0.000324442982673645,"exhaustive_search_seconds":0.00037143006920814514,"evaluations":713.0625,"distances_sum":1651.3665990021843}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6770833333333329,"recall":0.6770833333333329,"f1":null,"seconds":0.0004074927419424057,"exhaustive_search_seconds":0.00037143006920814514,"evaluations":812.921875,"distances_sum":1605.2819291458723}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7421874999999993,"recall":0.7421874999999993,"f1":null,"seconds":0.00047914497554302216,"exhaustive_search_seconds":0.00037143006920814514,"evaluations":936.53125,"distances_sum":1578.2745909571702}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7907986111111105,"recall":0.7907986111111105,"f1":null,"seconds":0.0007099322974681854,"exhaustive_search_seconds":0.00037143006920814514,"evaluations":1080.28125,"distances_sum":1562.9218030805387}
KCenters.DeloneInvIndex> reached performance {"precision":0.8237847222222215,"recall":0.8237847222222215,"f1":0.8237847222222215,"seconds":0.0006506554782390594,"exhaustive_search_seconds":0.00037143006920814514,"evaluations":1184.3125,"distances_sum":1553.5945258300512}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8, speedup = 0.7307760025473412, eval_ratio = 0.115201)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
