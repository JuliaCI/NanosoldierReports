Julia Version 1.5.0-DEV.343
Commit c934b94ffe (2020-02-25 17:15 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed OpenSpecFun_jll ────── v0.5.3+1
  Installed NaNMath ────────────── v0.3.3
  Installed DiffResults ────────── v1.0.2
  Installed CommonSubexpressions ─ v0.2.0
  Installed SpecialFunctions ───── v0.10.0
  Installed DiffRules ──────────── v1.0.1
  Installed StaticArrays ───────── v0.12.1
  Installed ForwardDiff ────────── v0.10.9
#=#=#                                                                         ######################################################################## 100.0%
   Updating `~/.julia/environments/v1.5/Project.toml`
  [f6369f11] + ForwardDiff v0.10.9
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [bbf7d656] + CommonSubexpressions v0.2.0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [f6369f11] + ForwardDiff v0.10.9
  [77ba4419] + NaNMath v0.3.3
  [efe28fd5] + OpenSpecFun_jll v0.5.3+1
  [276daf66] + SpecialFunctions v0.10.0
  [90137ffa] + StaticArrays v0.12.1
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing ForwardDiff
Status `/tmp/jl_1Z5zLb/Manifest.toml`
  [49dc2e85] Calculus v0.5.1
  [bbf7d656] CommonSubexpressions v0.2.0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [de460e47] DiffTests v0.1.0
  [f6369f11] ForwardDiff v0.10.9
  [77ba4419] NaNMath v0.3.3
  [efe28fd5] OpenSpecFun_jll v0.5.3+1
  [276daf66] SpecialFunctions v0.10.0
  [90137ffa] StaticArrays v0.12.1
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8ba89e20] Distributed 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Testing Partials...
  ...testing Partials{0,Int64}
  ...testing Partials{0,Float32}
  ...testing Partials{0,Float64}
  ...testing Partials{3,Int64}
  ...testing Partials{3,Float32}
  ...testing Partials{3,Float64}
done (took 7.35484956 seconds).
Testing Dual...
  ...testing Dual{TestTag(),Int64,0} and Dual{TestTag(),Dual{TestTag(),Int64,0},0}
  ...testing Dual{TestTag(),Float32,0} and Dual{TestTag(),Dual{TestTag(),Float32,0},0}
       ...auto-testing Base.asind with 1 arguments
       ...auto-testing Base.log1p with 1 arguments
       ...auto-testing Base.acsch with 1 arguments
       ...auto-testing SpecialFunctions.erfc with 1 arguments
       ...auto-testing SpecialFunctions.digamma with 1 arguments
       ...auto-testing NaNMath.acos with 1 arguments
       ...auto-testing Base.asec with 1 arguments
       ...auto-testing Base.acosh with 1 arguments
       ...auto-testing Base.\ with 2 arguments
       ...auto-testing NaNMath.log10 with 1 arguments
       ...auto-testing Base.mod2pi with 1 arguments
       ...auto-testing Base.acsc with 1 arguments
       ...auto-testing SpecialFunctions.airybiprime with 1 arguments
       ...auto-testing Base.cscd with 1 arguments
       ...auto-testing SpecialFunctions.logbeta with 2 arguments
       ...auto-testing Base.hypot with 2 arguments
       ...auto-testing NaNMath.log with 1 arguments
       ...auto-testing Base.tand with 1 arguments
       ...auto-testing NaNMath.atanh with 1 arguments
       ...auto-testing Base.deg2rad with 1 arguments
       ...auto-testing Base.log10 with 1 arguments
       ...auto-testing Base.csch with 1 arguments
       ...auto-testing Base.asinh with 1 arguments
       ...auto-testing SpecialFunctions.airyai with 1 arguments
       ...auto-testing Base.abs2 with 1 arguments
       ...auto-testing SpecialFunctions.gamma with 1 arguments
       ...auto-testing SpecialFunctions.erfcx with 1 arguments
       ...auto-testing NaNMath.log1p with 1 arguments
       ...auto-testing SpecialFunctions.bessely0 with 1 arguments
       ...auto-testing Base.cosh with 1 arguments
       ...auto-testing NaNMath.sin with 1 arguments
       ...auto-testing Base.cos with 1 arguments
       ...auto-testing Base.atan with 2 arguments
       ...auto-testing Base.cospi with 1 arguments
       ...auto-testing Base.cbrt with 1 arguments
       ...auto-testing Base.acosd with 1 arguments
       ...auto-testing SpecialFunctions.bessely1 with 1 arguments
       ...auto-testing Base.acoth with 1 arguments
       ...auto-testing NaNMath.cos with 1 arguments
       ...auto-testing NaNMath.max with 2 arguments
       ...auto-testing SpecialFunctions.erfcinv with 1 arguments
       ...auto-testing SpecialFunctions.besselk with 2 arguments
       ...auto-testing NaNMath.pow with 2 arguments
       ...auto-testing SpecialFunctions.erf with 1 arguments
       ...auto-testing Base.sin with 1 arguments
       ...auto-testing Base.+ with 2 arguments
       ...auto-testing SpecialFunctions.dawson with 1 arguments
       ...auto-testing Base.inv with 1 arguments
       ...auto-testing Base.acotd with 1 arguments
       ...auto-testing SpecialFunctions.airyaiprime with 1 arguments
       ...auto-testing Base.min with 2 arguments
       ...auto-testing Base.+ with 1 arguments
       ...auto-testing SpecialFunctions.erfinv with 1 arguments
       ...auto-testing SpecialFunctions.trigamma with 1 arguments
       ...auto-testing Base.asecd with 1 arguments
       ...auto-testing Base.log with 1 arguments
       ...auto-testing NaNMath.acosh with 1 arguments
       ...auto-testing Base.rad2deg with 1 arguments
       ...auto-testing Base.mod with 2 arguments
       ...auto-testing SpecialFunctions.besselj1 with 1 arguments
       ...auto-testing Base.exp with 1 arguments
       ...auto-testing Base.acot with 1 arguments
       ...auto-testing NaNMath.sqrt with 1 arguments
       ...auto-testing Base.* with 2 arguments
       ...auto-testing Base.sind with 1 arguments
       ...auto-testing Base.sinpi with 1 arguments
       ...auto-testing Base.max with 2 arguments
       ...auto-testing Base.asech with 1 arguments
       ...auto-testing SpecialFunctions.bessely with 2 arguments
       ...auto-testing NaNMath.log2 with 1 arguments
       ...auto-testing NaNMath.tan with 1 arguments
       ...auto-testing NaNMath.lgamma with 1 arguments
       ...auto-testing Base.sqrt with 1 arguments
       ...auto-testing Base.^ with 2 arguments
       ...auto-testing SpecialFunctions.invdigamma with 1 arguments
       ...auto-testing SpecialFunctions.airybi with 1 arguments
       ...auto-testing Base.exp10 with 1 arguments
       ...auto-testing Base.rem with 2 arguments
       ...auto-testing Base.sech with 1 arguments
       ...auto-testing SpecialFunctions.erfi with 1 arguments
       ...auto-testing Base.coth with 1 arguments
       ...auto-testing Base.asin with 1 arguments
       ...auto-testing Base.cotd with 1 arguments
       ...auto-testing Base.cosd with 1 arguments
       ...auto-testing Base.sinh with 1 arguments
       ...auto-testing Base.abs with 1 arguments
       ...auto-testing SpecialFunctions.loggamma with 1 arguments
       ...auto-testing SpecialFunctions.besselj0 with 1 arguments
       ...auto-testing Base.transpose with 1 arguments
       ...auto-testing NaNMath.min with 2 arguments
       ...auto-testing Base.csc with 1 arguments
       ...auto-testing Base.tanh with 1 arguments
       ...auto-testing SpecialFunctions.besselj with 2 arguments
       ...auto-testing Base.log2 with 1 arguments
       ...auto-testing Base.atan with 1 arguments
       ...auto-testing Base.secd with 1 arguments
       ...auto-testing Base.atand with 1 arguments
       ...auto-testing SpecialFunctions.besseli with 2 arguments
       ...auto-testing NaNMath.asin with 1 arguments
       ...auto-testing Base.sec with 1 arguments
       ...auto-testing Base.acscd with 1 arguments
       ...auto-testing Base.tan with 1 arguments
       ...auto-testing SpecialFunctions.polygamma with 2 arguments
       ...auto-testing Base.- with 1 arguments
       ...auto-testing Base.cot with 1 arguments
       ...auto-testing Base.- with 2 arguments
       ...auto-testing Base.exp2 with 1 arguments
       ...auto-testing Base.expm1 with 1 arguments
       ...auto-testing Base.acos with 1 arguments
       ...auto-testing Base.atanh with 1 arguments
       ...auto-testing SpecialFunctions.beta with 2 arguments
  ...testing Dual{TestTag(),Int64,0} and Dual{TestTag(),Dual{TestTag(),Int64,4},0}
  ...testing Dual{TestTag(),Float32,0} and Dual{TestTag(),Dual{TestTag(),Float32,4},0}
       ...auto-testing Base.asind with 1 arguments
       ...auto-testing Base.log1p with 1 arguments
       ...auto-testing Base.acsch with 1 arguments
       ...auto-testing SpecialFunctions.erfc with 1 arguments
       ...auto-testing SpecialFunctions.digamma with 1 arguments
       ...auto-testing NaNMath.acos with 1 arguments
       ...auto-testing Base.asec with 1 arguments
       ...auto-testing Base.acosh with 1 arguments
       ...auto-testing Base.\ with 2 arguments
       ...auto-testing NaNMath.log10 with 1 arguments
       ...auto-testing Base.mod2pi with 1 arguments
       ...auto-testing Base.acsc with 1 arguments
       ...auto-testing SpecialFunctions.airybiprime with 1 arguments
       ...auto-testing Base.cscd with 1 arguments
       ...auto-testing SpecialFunctions.logbeta with 2 arguments
       ...auto-testing Base.hypot with 2 arguments
       ...auto-testing NaNMath.log with 1 arguments
       ...auto-testing Base.tand with 1 arguments
       ...auto-testing NaNMath.atanh with 1 arguments
       ...auto-testing Base.deg2rad with 1 arguments
       ...auto-testing Base.log10 with 1 arguments
       ...auto-testing Base.csch with 1 arguments
       ...auto-testing Base.asinh with 1 arguments
       ...auto-testing SpecialFunctions.airyai with 1 arguments
       ...auto-testing Base.abs2 with 1 arguments
       ...auto-testing SpecialFunctions.gamma with 1 arguments
       ...auto-testing SpecialFunctions.erfcx with 1 arguments
       ...auto-testing NaNMath.log1p with 1 arguments
       ...auto-testing SpecialFunctions.bessely0 with 1 arguments
       ...auto-testing Base.cosh with 1 arguments
       ...auto-testing NaNMath.sin with 1 arguments
       ...auto-testing Base.cos with 1 arguments
       ...auto-testing Base.atan with 2 arguments
       ...auto-testing Base.cospi with 1 arguments
       ...auto-testing Base.cbrt with 1 arguments
       ...auto-testing Base.acosd with 1 arguments
       ...auto-testing SpecialFunctions.bessely1 with 1 arguments
       ...auto-testing Base.acoth with 1 arguments
       ...auto-testing NaNMath.cos with 1 arguments
       ...auto-testing NaNMath.max with 2 arguments
       ...auto-testing SpecialFunctions.erfcinv with 1 arguments
       ...auto-testing SpecialFunctions.besselk with 2 arguments
       ...auto-testing NaNMath.pow with 2 arguments
       ...auto-testing SpecialFunctions.erf with 1 arguments
       ...auto-testing Base.sin with 1 arguments
       ...auto-testing Base.+ with 2 arguments
       ...auto-testing SpecialFunctions.dawson with 1 arguments
       ...auto-testing Base.inv with 1 arguments
       ...auto-testing Base.acotd with 1 arguments
       ...auto-testing SpecialFunctions.airyaiprime with 1 arguments
       ...auto-testing Base.min with 2 arguments
       ...auto-testing Base.+ with 1 arguments
       ...auto-testing SpecialFunctions.erfinv with 1 arguments
       ...auto-testing SpecialFunctions.trigamma with 1 arguments
       ...auto-testing Base.asecd with 1 arguments
       ...auto-testing Base.log with 1 arguments
       ...auto-testing NaNMath.acosh with 1 arguments
       ...auto-testing Base.rad2deg with 1 arguments
       ...auto-testing Base.mod with 2 arguments
       ...auto-testing SpecialFunctions.besselj1 with 1 arguments
       ...auto-testing Base.exp with 1 arguments
       ...auto-testing Base.acot with 1 arguments
       ...auto-testing NaNMath.sqrt with 1 arguments
       ...auto-testing Base.* with 2 arguments
       ...auto-testing Base.sind with 1 arguments
       ...auto-testing Base.sinpi with 1 arguments
       ...auto-testing Base.max with 2 arguments
       ...auto-testing Base.asech with 1 arguments
       ...auto-testing SpecialFunctions.bessely with 2 arguments
       ...auto-testing NaNMath.log2 with 1 arguments
       ...auto-testing NaNMath.tan with 1 arguments
       ...auto-testing NaNMath.lgamma with 1 arguments
       ...auto-testing Base.sqrt with 1 arguments
       ...auto-testing Base.^ with 2 arguments
       ...auto-testing SpecialFunctions.invdigamma with 1 arguments
       ...auto-testing SpecialFunctions.airybi with 1 arguments
       ...auto-testing Base.exp10 with 1 arguments
       ...auto-testing Base.rem with 2 arguments
       ...auto-testing Base.sech with 1 arguments
       ...auto-testing SpecialFunctions.erfi with 1 arguments
       ...auto-testing Base.coth with 1 arguments
       ...auto-testing Base.asin with 1 arguments
       ...auto-testing Base.cotd with 1 arguments
       ...auto-testing Base.cosd with 1 arguments
       ...auto-testing Base.sinh with 1 arguments
       ...auto-testing Base.abs with 1 arguments
       ...auto-testing SpecialFunctions.loggamma with 1 arguments
       ...auto-testing SpecialFunctions.besselj0 with 1 arguments
       ...auto-testing Base.transpose with 1 arguments
       ...auto-testing NaNMath.min with 2 arguments
       ...auto-testing Base.csc with 1 arguments
       ...auto-testing Base.tanh with 1 arguments
       ...auto-testing SpecialFunctions.besselj with 2 arguments
       ...auto-testing Base.log2 with 1 arguments
       ...auto-testing Base.atan with 1 arguments
       ...auto-testing Base.secd with 1 arguments
       ...auto-testing Base.atand with 1 arguments
       ...auto-testing SpecialFunctions.besseli with 2 arguments
       ...auto-testing NaNMath.asin with 1 arguments
       ...auto-testing Base.sec with 1 arguments
       ...auto-testing Base.acscd with 1 arguments
       ...auto-testing Base.tan with 1 arguments
       ...auto-testing SpecialFunctions.polygamma with 2 arguments
       ...auto-testing Base.- with 1 arguments
       ...auto-testing Base.cot with 1 arguments
       ...auto-testing Base.- with 2 arguments
       ...auto-testing Base.exp2 with 1 arguments
       ...auto-testing Base.expm1 with 1 arguments
       ...auto-testing Base.acos with 1 arguments
       ...auto-testing Base.atanh with 1 arguments
       ...auto-testing SpecialFunctions.beta with 2 arguments
  ...testing Dual{TestTag(),Int64,3} and Dual{TestTag(),Dual{TestTag(),Int64,0},3}
  ...testing Dual{TestTag(),Float32,3} and Dual{TestTag(),Dual{TestTag(),Float32,0},3}
       ...auto-testing Base.asind with 1 arguments
       ...auto-testing Base.log1p with 1 arguments
       ...auto-testing Base.acsch with 1 arguments
       ...auto-testing SpecialFunctions.erfc with 1 arguments
       ...auto-testing SpecialFunctions.digamma with 1 arguments
       ...auto-testing NaNMath.acos with 1 arguments
       ...auto-testing Base.asec with 1 arguments
       ...auto-testing Base.acosh with 1 arguments
       ...auto-testing Base.\ with 2 arguments
       ...auto-testing NaNMath.log10 with 1 arguments
       ...auto-testing Base.mod2pi with 1 arguments
       ...auto-testing Base.acsc with 1 arguments
       ...auto-testing SpecialFunctions.airybiprime with 1 arguments
       ...auto-testing Base.cscd with 1 arguments
       ...auto-testing SpecialFunctions.logbeta with 2 arguments
       ...auto-testing Base.hypot with 2 arguments
       ...auto-testing NaNMath.log with 1 arguments
       ...auto-testing Base.tand with 1 arguments
       ...auto-testing NaNMath.atanh with 1 arguments
       ...auto-testing Base.deg2rad with 1 arguments
       ...auto-testing Base.log10 with 1 arguments
       ...auto-testing Base.csch with 1 arguments
       ...auto-testing Base.asinh with 1 arguments
       ...auto-testing SpecialFunctions.airyai with 1 arguments
       ...auto-testing Base.abs2 with 1 arguments
       ...auto-testing SpecialFunctions.gamma with 1 arguments
       ...auto-testing SpecialFunctions.erfcx with 1 arguments
       ...auto-testing NaNMath.log1p with 1 arguments
       ...auto-testing SpecialFunctions.bessely0 with 1 arguments
       ...auto-testing Base.cosh with 1 arguments
       ...auto-testing NaNMath.sin with 1 arguments
       ...auto-testing Base.cos with 1 arguments
       ...auto-testing Base.atan with 2 arguments
       ...auto-testing Base.cospi with 1 arguments
       ...auto-testing Base.cbrt with 1 arguments
       ...auto-testing Base.acosd with 1 arguments
       ...auto-testing SpecialFunctions.bessely1 with 1 arguments
       ...auto-testing Base.acoth with 1 arguments
       ...auto-testing NaNMath.cos with 1 arguments
       ...auto-testing NaNMath.max with 2 arguments
       ...auto-testing SpecialFunctions.erfcinv with 1 arguments
       ...auto-testing SpecialFunctions.besselk with 2 arguments
       ...auto-testing NaNMath.pow with 2 arguments
       ...auto-testing SpecialFunctions.erf with 1 arguments
       ...auto-testing Base.sin with 1 arguments
       ...auto-testing Base.+ with 2 arguments
       ...auto-testing SpecialFunctions.dawson with 1 arguments
       ...auto-testing Base.inv with 1 arguments
       ...auto-testing Base.acotd with 1 arguments
       ...auto-testing SpecialFunctions.airyaiprime with 1 arguments
       ...auto-testing Base.min with 2 arguments
       ...auto-testing Base.+ with 1 arguments
       ...auto-testing SpecialFunctions.erfinv with 1 arguments
       ...auto-testing SpecialFunctions.trigamma with 1 arguments
       ...auto-testing Base.asecd with 1 arguments
       ...auto-testing Base.log with 1 arguments
       ...auto-testing NaNMath.acosh with 1 arguments
       ...auto-testing Base.rad2deg with 1 arguments
       ...auto-testing Base.mod with 2 arguments
       ...auto-testing SpecialFunctions.besselj1 with 1 arguments
       ...auto-testing Base.exp with 1 arguments
       ...auto-testing Base.acot with 1 arguments
       ...auto-testing NaNMath.sqrt with 1 arguments
       ...auto-testing Base.* with 2 arguments
       ...auto-testing Base.sind with 1 arguments
       ...auto-testing Base.sinpi with 1 arguments
       ...auto-testing Base.max with 2 arguments
       ...auto-testing Base.asech with 1 arguments
       ...auto-testing SpecialFunctions.bessely with 2 arguments
       ...auto-testing NaNMath.log2 with 1 arguments
       ...auto-testing NaNMath.tan with 1 arguments
       ...auto-testing NaNMath.lgamma with 1 arguments
       ...auto-testing Base.sqrt with 1 arguments
       ...auto-testing Base.^ with 2 arguments
       ...auto-testing SpecialFunctions.invdigamma with 1 arguments
       ...auto-testing SpecialFunctions.airybi with 1 arguments
       ...auto-testing Base.exp10 with 1 arguments
       ...auto-testing Base.rem with 2 arguments
       ...auto-testing Base.sech with 1 arguments
       ...auto-testing SpecialFunctions.erfi with 1 arguments
       ...auto-testing Base.coth with 1 arguments
       ...auto-testing Base.asin with 1 arguments
       ...auto-testing Base.cotd with 1 arguments
       ...auto-testing Base.cosd with 1 arguments
       ...auto-testing Base.sinh with 1 arguments
       ...auto-testing Base.abs with 1 arguments
       ...auto-testing SpecialFunctions.loggamma with 1 arguments
       ...auto-testing SpecialFunctions.besselj0 with 1 arguments
       ...auto-testing Base.transpose with 1 arguments
       ...auto-testing NaNMath.min with 2 arguments
       ...auto-testing Base.csc with 1 arguments
       ...auto-testing Base.tanh with 1 arguments
       ...auto-testing SpecialFunctions.besselj with 2 arguments
       ...auto-testing Base.log2 with 1 arguments
       ...auto-testing Base.atan with 1 arguments
       ...auto-testing Base.secd with 1 arguments
       ...auto-testing Base.atand with 1 arguments
       ...auto-testing SpecialFunctions.besseli with 2 arguments
       ...auto-testing NaNMath.asin with 1 arguments
       ...auto-testing Base.sec with 1 arguments
       ...auto-testing Base.acscd with 1 arguments
       ...auto-testing Base.tan with 1 arguments
       ...auto-testing SpecialFunctions.polygamma with 2 arguments
       ...auto-testing Base.- with 1 arguments
       ...auto-testing Base.cot with 1 arguments
       ...auto-testing Base.- with 2 arguments
       ...auto-testing Base.exp2 with 1 arguments
       ...auto-testing Base.expm1 with 1 arguments
       ...auto-testing Base.acos with 1 arguments
       ...auto-testing Base.atanh with 1 arguments
       ...auto-testing SpecialFunctions.beta with 2 arguments
  ...testing Dual{TestTag(),Int64,3} and Dual{TestTag(),Dual{TestTag(),Int64,4},3}
  ...testing Dual{TestTag(),Float32,3} and Dual{TestTag(),Dual{TestTag(),Float32,4},3}
       ...auto-testing Base.asind with 1 arguments
       ...auto-testing Base.log1p with 1 arguments
       ...auto-testing Base.acsch with 1 arguments
       ...auto-testing SpecialFunctions.erfc with 1 arguments
       ...auto-testing SpecialFunctions.digamma with 1 arguments
       ...auto-testing NaNMath.acos with 1 arguments
       ...auto-testing Base.asec with 1 arguments
       ...auto-testing Base.acosh with 1 arguments
       ...auto-testing Base.\ with 2 arguments
       ...auto-testing NaNMath.log10 with 1 arguments
       ...auto-testing Base.mod2pi with 1 arguments
       ...auto-testing Base.acsc with 1 arguments
       ...auto-testing SpecialFunctions.airybiprime with 1 arguments
       ...auto-testing Base.cscd with 1 arguments
       ...auto-testing SpecialFunctions.logbeta with 2 arguments
       ...auto-testing Base.hypot with 2 arguments
       ...auto-testing NaNMath.log with 1 arguments
       ...auto-testing Base.tand with 1 arguments
       ...auto-testing NaNMath.atanh with 1 arguments
       ...auto-testing Base.deg2rad with 1 arguments
       ...auto-testing Base.log10 with 1 arguments
       ...auto-testing Base.csch with 1 arguments
       ...auto-testing Base.asinh with 1 arguments
       ...auto-testing SpecialFunctions.airyai with 1 arguments
       ...auto-testing Base.abs2 with 1 arguments
       ...auto-testing SpecialFunctions.gamma with 1 arguments
       ...auto-testing SpecialFunctions.erfcx with 1 arguments
       ...auto-testing NaNMath.log1p with 1 arguments
       ...auto-testing SpecialFunctions.bessely0 with 1 arguments
       ...auto-testing Base.cosh with 1 arguments
       ...auto-testing NaNMath.sin with 1 arguments
       ...auto-testing Base.cos with 1 arguments
       ...auto-testing Base.atan with 2 arguments
       ...auto-testing Base.cospi with 1 arguments
       ...auto-testing Base.cbrt with 1 arguments
       ...auto-testing Base.acosd with 1 arguments
       ...auto-testing SpecialFunctions.bessely1 with 1 arguments
       ...auto-testing Base.acoth with 1 arguments
       ...auto-testing NaNMath.cos with 1 arguments
       ...auto-testing NaNMath.max with 2 arguments
       ...auto-testing SpecialFunctions.erfcinv with 1 arguments
       ...auto-testing SpecialFunctions.besselk with 2 arguments
       ...auto-testing NaNMath.pow with 2 arguments
       ...auto-testing SpecialFunctions.erf with 1 arguments
       ...auto-testing Base.sin with 1 arguments
       ...auto-testing Base.+ with 2 arguments
       ...auto-testing SpecialFunctions.dawson with 1 arguments
       ...auto-testing Base.inv with 1 arguments
       ...auto-testing Base.acotd with 1 arguments
       ...auto-testing SpecialFunctions.airyaiprime with 1 arguments
       ...auto-testing Base.min with 2 arguments
       ...auto-testing Base.+ with 1 arguments
       ...auto-testing SpecialFunctions.erfinv with 1 arguments
       ...auto-testing SpecialFunctions.trigamma with 1 arguments
       ...auto-testing Base.asecd with 1 arguments
       ...auto-testing Base.log with 1 arguments
       ...auto-testing NaNMath.acosh with 1 arguments
       ...auto-testing Base.rad2deg with 1 arguments
       ...auto-testing Base.mod with 2 arguments
       ...auto-testing SpecialFunctions.besselj1 with 1 arguments
       ...auto-testing Base.exp with 1 arguments
       ...auto-testing Base.acot with 1 arguments
       ...auto-testing NaNMath.sqrt with 1 arguments
       ...auto-testing Base.* with 2 arguments
       ...auto-testing Base.sind with 1 arguments
       ...auto-testing Base.sinpi with 1 arguments
       ...auto-testing Base.max with 2 arguments
       ...auto-testing Base.asech with 1 arguments
       ...auto-testing SpecialFunctions.bessely with 2 arguments
       ...auto-testing NaNMath.log2 with 1 arguments
       ...auto-testing NaNMath.tan with 1 arguments
       ...auto-testing NaNMath.lgamma with 1 arguments
       ...auto-testing Base.sqrt with 1 arguments
       ...auto-testing Base.^ with 2 arguments
       ...auto-testing SpecialFunctions.invdigamma with 1 arguments
       ...auto-testing SpecialFunctions.airybi with 1 arguments
       ...auto-testing Base.exp10 with 1 arguments
       ...auto-testing Base.rem with 2 arguments
       ...auto-testing Base.sech with 1 arguments
       ...auto-testing SpecialFunctions.erfi with 1 arguments
       ...auto-testing Base.coth with 1 arguments
       ...auto-testing Base.asin with 1 arguments
       ...auto-testing Base.cotd with 1 arguments
       ...auto-testing Base.cosd with 1 arguments
       ...auto-testing Base.sinh with 1 arguments
       ...auto-testing Base.abs with 1 arguments
       ...auto-testing SpecialFunctions.loggamma with 1 arguments
       ...auto-testing SpecialFunctions.besselj0 with 1 arguments
       ...auto-testing Base.transpose with 1 arguments
       ...auto-testing NaNMath.min with 2 arguments
       ...auto-testing Base.csc with 1 arguments
       ...auto-testing Base.tanh with 1 arguments
       ...auto-testing SpecialFunctions.besselj with 2 arguments
       ...auto-testing Base.log2 with 1 arguments
       ...auto-testing Base.atan with 1 arguments
       ...auto-testing Base.secd with 1 arguments
       ...auto-testing Base.atand with 1 arguments
       ...auto-testing SpecialFunctions.besseli with 2 arguments
       ...auto-testing NaNMath.asin with 1 arguments
       ...auto-testing Base.sec with 1 arguments
       ...auto-testing Base.acscd with 1 arguments
       ...auto-testing Base.tan with 1 arguments
       ...auto-testing SpecialFunctions.polygamma with 2 arguments
       ...auto-testing Base.- with 1 arguments
       ...auto-testing Base.cot with 1 arguments
       ...auto-testing Base.- with 2 arguments
       ...auto-testing Base.exp2 with 1 arguments
       ...auto-testing Base.expm1 with 1 arguments
       ...auto-testing Base.acos with 1 arguments
       ...auto-testing Base.atanh with 1 arguments
       ...auto-testing SpecialFunctions.beta with 2 arguments
Test Summary:          | Pass  Total
Exponentiation of zero |    3      3
done (took 38.062276606 seconds).
Testing derivative functionality...
  ...testing num2num_1
  ...testing num2num_2
  ...testing num2num_3
  ...testing num2num_4
  ...testing num2num_5
  ...testing identity
  ...testing num2arr_1
  ...testing num2arr_1!
Test Summary:                     | Pass  Total
exponential function at base zero |    4      4
done (took 6.210378117 seconds).
Testing gradient functionality...
  ...running hardcoded test with chunk size = 1 and tag = nothing
  ...running hardcoded test with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_1),Float64}()
  ...running hardcoded test with chunk size = 2 and tag = nothing
  ...running hardcoded test with chunk size = 2 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_1),Float64}()
  ...running hardcoded test with chunk size = 3 and tag = nothing
  ...running hardcoded test with chunk size = 3 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_1),Float64}()
  ...testing vec2num_1 with chunk size = 1 and tag = nothing
  ...testing vec2num_1 with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_1),Float64}()
  ...testing vec2num_1 with chunk size = 4 and tag = nothing
  ...testing vec2num_1 with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_1),Float64}()
  ...testing vec2num_1 with chunk size = 6 and tag = nothing
  ...testing vec2num_1 with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_1),Float64}()
  ...testing vec2num_1 with chunk size = 12 and tag = nothing
  ...testing vec2num_1 with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_1),Float64}()
  ...testing vec2num_1 with chunk size = 13 and tag = nothing
  ...testing vec2num_1 with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_1),Float64}()
  ...testing vec2num_2 with chunk size = 1 and tag = nothing
  ...testing vec2num_2 with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_2),Float64}()
  ...testing vec2num_2 with chunk size = 4 and tag = nothing
  ...testing vec2num_2 with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_2),Float64}()
  ...testing vec2num_2 with chunk size = 6 and tag = nothing
  ...testing vec2num_2 with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_2),Float64}()
  ...testing vec2num_2 with chunk size = 12 and tag = nothing
  ...testing vec2num_2 with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_2),Float64}()
  ...testing vec2num_2 with chunk size = 13 and tag = nothing
  ...testing vec2num_2 with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_2),Float64}()
  ...testing vec2num_3 with chunk size = 1 and tag = nothing
  ...testing vec2num_3 with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_3),Float64}()
  ...testing vec2num_3 with chunk size = 4 and tag = nothing
  ...testing vec2num_3 with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_3),Float64}()
  ...testing vec2num_3 with chunk size = 6 and tag = nothing
  ...testing vec2num_3 with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_3),Float64}()
  ...testing vec2num_3 with chunk size = 12 and tag = nothing
  ...testing vec2num_3 with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_3),Float64}()
  ...testing vec2num_3 with chunk size = 13 and tag = nothing
  ...testing vec2num_3 with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_3),Float64}()
  ...testing vec2num_4 with chunk size = 1 and tag = nothing
  ...testing vec2num_4 with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_4),Float64}()
  ...testing vec2num_4 with chunk size = 4 and tag = nothing
  ...testing vec2num_4 with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_4),Float64}()
  ...testing vec2num_4 with chunk size = 6 and tag = nothing
  ...testing vec2num_4 with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_4),Float64}()
  ...testing vec2num_4 with chunk size = 12 and tag = nothing
  ...testing vec2num_4 with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_4),Float64}()
  ...testing vec2num_4 with chunk size = 13 and tag = nothing
  ...testing vec2num_4 with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_4),Float64}()
  ...testing vec2num_5 with chunk size = 1 and tag = nothing
  ...testing vec2num_5 with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_5),Float64}()
  ...testing vec2num_5 with chunk size = 4 and tag = nothing
  ...testing vec2num_5 with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_5),Float64}()
  ...testing vec2num_5 with chunk size = 6 and tag = nothing
  ...testing vec2num_5 with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_5),Float64}()
  ...testing vec2num_5 with chunk size = 12 and tag = nothing
  ...testing vec2num_5 with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_5),Float64}()
  ...testing vec2num_5 with chunk size = 13 and tag = nothing
  ...testing vec2num_5 with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_5),Float64}()
  ...testing vec2num_6 with chunk size = 1 and tag = nothing
  ...testing vec2num_6 with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_6),Float64}()
  ...testing vec2num_6 with chunk size = 4 and tag = nothing
  ...testing vec2num_6 with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_6),Float64}()
  ...testing vec2num_6 with chunk size = 6 and tag = nothing
  ...testing vec2num_6 with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_6),Float64}()
  ...testing vec2num_6 with chunk size = 12 and tag = nothing
  ...testing vec2num_6 with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_6),Float64}()
  ...testing vec2num_6 with chunk size = 13 and tag = nothing
  ...testing vec2num_6 with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_6),Float64}()
  ...testing vec2num_7 with chunk size = 1 and tag = nothing
  ...testing vec2num_7 with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_7),Float64}()
  ...testing vec2num_7 with chunk size = 4 and tag = nothing
  ...testing vec2num_7 with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_7),Float64}()
  ...testing vec2num_7 with chunk size = 6 and tag = nothing
  ...testing vec2num_7 with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_7),Float64}()
  ...testing vec2num_7 with chunk size = 12 and tag = nothing
  ...testing vec2num_7 with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_7),Float64}()
  ...testing vec2num_7 with chunk size = 13 and tag = nothing
  ...testing vec2num_7 with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.vec2num_7),Float64}()
  ...testing rosenbrock_1 with chunk size = 1 and tag = nothing
  ...testing rosenbrock_1 with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_1),Float64}()
  ...testing rosenbrock_1 with chunk size = 4 and tag = nothing
  ...testing rosenbrock_1 with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_1),Float64}()
  ...testing rosenbrock_1 with chunk size = 6 and tag = nothing
  ...testing rosenbrock_1 with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_1),Float64}()
  ...testing rosenbrock_1 with chunk size = 12 and tag = nothing
  ...testing rosenbrock_1 with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_1),Float64}()
  ...testing rosenbrock_1 with chunk size = 13 and tag = nothing
  ...testing rosenbrock_1 with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_1),Float64}()
  ...testing rosenbrock_2 with chunk size = 1 and tag = nothing
  ...testing rosenbrock_2 with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_2),Float64}()
  ...testing rosenbrock_2 with chunk size = 4 and tag = nothing
  ...testing rosenbrock_2 with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_2),Float64}()
  ...testing rosenbrock_2 with chunk size = 6 and tag = nothing
  ...testing rosenbrock_2 with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_2),Float64}()
  ...testing rosenbrock_2 with chunk size = 12 and tag = nothing
  ...testing rosenbrock_2 with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_2),Float64}()
  ...testing rosenbrock_2 with chunk size = 13 and tag = nothing
  ...testing rosenbrock_2 with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_2),Float64}()
  ...testing rosenbrock_3 with chunk size = 1 and tag = nothing
  ...testing rosenbrock_3 with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_3),Float64}()
  ...testing rosenbrock_3 with chunk size = 4 and tag = nothing
  ...testing rosenbrock_3 with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_3),Float64}()
  ...testing rosenbrock_3 with chunk size = 6 and tag = nothing
  ...testing rosenbrock_3 with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_3),Float64}()
  ...testing rosenbrock_3 with chunk size = 12 and tag = nothing
  ...testing rosenbrock_3 with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_3),Float64}()
  ...testing rosenbrock_3 with chunk size = 13 and tag = nothing
  ...testing rosenbrock_3 with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_3),Float64}()
  ...testing rosenbrock_4 with chunk size = 1 and tag = nothing
  ...testing rosenbrock_4 with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_4),Float64}()
  ...testing rosenbrock_4 with chunk size = 4 and tag = nothing
  ...testing rosenbrock_4 with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_4),Float64}()
  ...testing rosenbrock_4 with chunk size = 6 and tag = nothing
  ...testing rosenbrock_4 with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_4),Float64}()
  ...testing rosenbrock_4 with chunk size = 12 and tag = nothing
  ...testing rosenbrock_4 with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_4),Float64}()
  ...testing rosenbrock_4 with chunk size = 13 and tag = nothing
  ...testing rosenbrock_4 with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.rosenbrock_4),Float64}()
  ...testing ackley with chunk size = 1 and tag = nothing
  ...testing ackley with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.ackley),Float64}()
  ...testing ackley with chunk size = 4 and tag = nothing
  ...testing ackley with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.ackley),Float64}()
  ...testing ackley with chunk size = 6 and tag = nothing
  ...testing ackley with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.ackley),Float64}()
  ...testing ackley with chunk size = 12 and tag = nothing
  ...testing ackley with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.ackley),Float64}()
  ...testing ackley with chunk size = 13 and tag = nothing
  ...testing ackley with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.ackley),Float64}()
  ...testing self_weighted_logit with chunk size = 1 and tag = nothing
  ...testing self_weighted_logit with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.self_weighted_logit),Float64}()
  ...testing self_weighted_logit with chunk size = 4 and tag = nothing
  ...testing self_weighted_logit with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.self_weighted_logit),Float64}()
  ...testing self_weighted_logit with chunk size = 6 and tag = nothing
  ...testing self_weighted_logit with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.self_weighted_logit),Float64}()
  ...testing self_weighted_logit with chunk size = 12 and tag = nothing
  ...testing self_weighted_logit with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.self_weighted_logit),Float64}()
  ...testing self_weighted_logit with chunk size = 13 and tag = nothing
  ...testing self_weighted_logit with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.self_weighted_logit),Float64}()
  ...testing first with chunk size = 1 and tag = nothing
  ...testing first with chunk size = 1 and tag = ForwardDiff.Tag{typeof(first),Float64}()
  ...testing first with chunk size = 4 and tag = nothing
  ...testing first with chunk size = 4 and tag = ForwardDiff.Tag{typeof(first),Float64}()
  ...testing first with chunk size = 6 and tag = nothing
  ...testing first with chunk size = 6 and tag = ForwardDiff.Tag{typeof(first),Float64}()
  ...testing first with chunk size = 12 and tag = nothing
  ...testing first with chunk size = 12 and tag = ForwardDiff.Tag{typeof(first),Float64}()
  ...testing first with chunk size = 13 and tag = nothing
  ...testing first with chunk size = 13 and tag = ForwardDiff.Tag{typeof(first),Float64}()
  ...testing specialized StaticArray codepaths
Test Summary:                     | Pass  Total
exponential function at base zero |    4      4
done (took 157.546775408 seconds).
Testing jacobian functionality...
  ...running hardcoded test with chunk size = 1 and tag = (nothing, nothing)
  ...running hardcoded test with chunk size = 1 and tag = (ForwardDiff.Tag{Main.JacobianTest.var"#3#4",Int64}(), ForwardDiff.Tag{Main.JacobianTest.var"#1#2",Int64}())
  ...running hardcoded test with chunk size = 2 and tag = (nothing, nothing)
  ...running hardcoded test with chunk size = 2 and tag = (ForwardDiff.Tag{Main.JacobianTest.var"#3#4",Int64}(), ForwardDiff.Tag{Main.JacobianTest.var"#1#2",Int64}())
  ...running hardcoded test with chunk size = 3 and tag = (nothing, nothing)
  ...running hardcoded test with chunk size = 3 and tag = (ForwardDiff.Tag{Main.JacobianTest.var"#3#4",Int64}(), ForwardDiff.Tag{Main.JacobianTest.var"#1#2",Int64}())
  ...testing - with chunk size = 1 and tag = nothing
  ...testing - with chunk size = 1 and tag = ForwardDiff.Tag{typeof(-),Float64}()
  ...testing - with chunk size = 4 and tag = nothing
  ...testing - with chunk size = 4 and tag = ForwardDiff.Tag{typeof(-),Float64}()
  ...testing - with chunk size = 6 and tag = nothing
  ...testing - with chunk size = 6 and tag = ForwardDiff.Tag{typeof(-),Float64}()
  ...testing - with chunk size = 12 and tag = nothing
  ...testing - with chunk size = 12 and tag = ForwardDiff.Tag{typeof(-),Float64}()
  ...testing - with chunk size = 13 and tag = nothing
  ...testing - with chunk size = 13 and tag = ForwardDiff.Tag{typeof(-),Float64}()
  ...testing chebyquad with chunk size = 1 and tag = nothing
  ...testing chebyquad with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.chebyquad),Float64}()
  ...testing chebyquad with chunk size = 4 and tag = nothing
  ...testing chebyquad with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.chebyquad),Float64}()
  ...testing chebyquad with chunk size = 6 and tag = nothing
  ...testing chebyquad with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.chebyquad),Float64}()
  ...testing chebyquad with chunk size = 12 and tag = nothing
  ...testing chebyquad with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.chebyquad),Float64}()
  ...testing chebyquad with chunk size = 13 and tag = nothing
  ...testing chebyquad with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.chebyquad),Float64}()
  ...testing brown_almost_linear with chunk size = 1 and tag = nothing
  ...testing brown_almost_linear with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.brown_almost_linear),Float64}()
  ...testing brown_almost_linear with chunk size = 4 and tag = nothing
  ...testing brown_almost_linear with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.brown_almost_linear),Float64}()
  ...testing brown_almost_linear with chunk size = 6 and tag = nothing
  ...testing brown_almost_linear with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.brown_almost_linear),Float64}()
  ...testing brown_almost_linear with chunk size = 12 and tag = nothing
  ...testing brown_almost_linear with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.brown_almost_linear),Float64}()
  ...testing brown_almost_linear with chunk size = 13 and tag = nothing
  ...testing brown_almost_linear with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.brown_almost_linear),Float64}()
  ...testing trigonometric with chunk size = 1 and tag = nothing
  ...testing trigonometric with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.trigonometric),Float64}()
  ...testing trigonometric with chunk size = 4 and tag = nothing
  ...testing trigonometric with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.trigonometric),Float64}()
  ...testing trigonometric with chunk size = 6 and tag = nothing
  ...testing trigonometric with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.trigonometric),Float64}()
  ...testing trigonometric with chunk size = 12 and tag = nothing
  ...testing trigonometric with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.trigonometric),Float64}()
  ...testing trigonometric with chunk size = 13 and tag = nothing
  ...testing trigonometric with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.trigonometric),Float64}()
  ...testing arr2arr_1 with chunk size = 1 and tag = nothing
  ...testing arr2arr_1 with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.arr2arr_1),Float64}()
  ...testing arr2arr_1 with chunk size = 4 and tag = nothing
  ...testing arr2arr_1 with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.arr2arr_1),Float64}()
  ...testing arr2arr_1 with chunk size = 6 and tag = nothing
  ...testing arr2arr_1 with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.arr2arr_1),Float64}()
  ...testing arr2arr_1 with chunk size = 12 and tag = nothing
  ...testing arr2arr_1 with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.arr2arr_1),Float64}()
  ...testing arr2arr_1 with chunk size = 13 and tag = nothing
  ...testing arr2arr_1 with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.arr2arr_1),Float64}()
  ...testing arr2arr_2 with chunk size = 1 and tag = nothing
  ...testing arr2arr_2 with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.arr2arr_2),Float64}()
  ...testing arr2arr_2 with chunk size = 4 and tag = nothing
  ...testing arr2arr_2 with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.arr2arr_2),Float64}()
  ...testing arr2arr_2 with chunk size = 6 and tag = nothing
  ...testing arr2arr_2 with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.arr2arr_2),Float64}()
  ...testing arr2arr_2 with chunk size = 12 and tag = nothing
  ...testing arr2arr_2 with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.arr2arr_2),Float64}()
  ...testing arr2arr_2 with chunk size = 13 and tag = nothing
  ...testing arr2arr_2 with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.arr2arr_2),Float64}()
  ...testing mutation_test_1 with chunk size = 1 and tag = nothing
  ...testing mutation_test_1 with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.mutation_test_1),Float64}()
  ...testing mutation_test_1 with chunk size = 4 and tag = nothing
  ...testing mutation_test_1 with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.mutation_test_1),Float64}()
  ...testing mutation_test_1 with chunk size = 6 and tag = nothing
  ...testing mutation_test_1 with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.mutation_test_1),Float64}()
  ...testing mutation_test_1 with chunk size = 12 and tag = nothing
  ...testing mutation_test_1 with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.mutation_test_1),Float64}()
  ...testing mutation_test_1 with chunk size = 13 and tag = nothing
  ...testing mutation_test_1 with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.mutation_test_1),Float64}()
  ...testing mutation_test_2 with chunk size = 1 and tag = nothing
  ...testing mutation_test_2 with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.mutation_test_2),Float64}()
  ...testing mutation_test_2 with chunk size = 4 and tag = nothing
  ...testing mutation_test_2 with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.mutation_test_2),Float64}()
  ...testing mutation_test_2 with chunk size = 6 and tag = nothing
  ...testing mutation_test_2 with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.mutation_test_2),Float64}()
  ...testing mutation_test_2 with chunk size = 12 and tag = nothing
  ...testing mutation_test_2 with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.mutation_test_2),Float64}()
  ...testing mutation_test_2 with chunk size = 13 and tag = nothing
  ...testing mutation_test_2 with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.mutation_test_2),Float64}()
  ...testing identity with chunk size = 1 and tag = nothing
  ...testing identity with chunk size = 1 and tag = ForwardDiff.Tag{typeof(identity),Float64}()
  ...testing identity with chunk size = 4 and tag = nothing
  ...testing identity with chunk size = 4 and tag = ForwardDiff.Tag{typeof(identity),Float64}()
  ...testing identity with chunk size = 6 and tag = nothing
  ...testing identity with chunk size = 6 and tag = ForwardDiff.Tag{typeof(identity),Float64}()
  ...testing identity with chunk size = 12 and tag = nothing
  ...testing identity with chunk size = 12 and tag = ForwardDiff.Tag{typeof(identity),Float64}()
  ...testing identity with chunk size = 13 and tag = nothing
  ...testing identity with chunk size = 13 and tag = ForwardDiff.Tag{typeof(identity),Float64}()
  ...testing chebyquad! with chunk size = 1 and tag = nothing
  ...testing chebyquad! with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.chebyquad!),Float64}()
  ...testing chebyquad! with chunk size = 4 and tag = nothing
  ...testing chebyquad! with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.chebyquad!),Float64}()
  ...testing chebyquad! with chunk size = 6 and tag = nothing
  ...testing chebyquad! with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.chebyquad!),Float64}()
  ...testing chebyquad! with chunk size = 12 and tag = nothing
  ...testing chebyquad! with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.chebyquad!),Float64}()
  ...testing chebyquad! with chunk size = 13 and tag = nothing
  ...testing chebyquad! with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.chebyquad!),Float64}()
  ...testing brown_almost_linear! with chunk size = 1 and tag = nothing
  ...testing brown_almost_linear! with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.brown_almost_linear!),Float64}()
  ...testing brown_almost_linear! with chunk size = 4 and tag = nothing
  ...testing brown_almost_linear! with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.brown_almost_linear!),Float64}()
  ...testing brown_almost_linear! with chunk size = 6 and tag = nothing
  ...testing brown_almost_linear! with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.brown_almost_linear!),Float64}()
  ...testing brown_almost_linear! with chunk size = 12 and tag = nothing
  ...testing brown_almost_linear! with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.brown_almost_linear!),Float64}()
  ...testing brown_almost_linear! with chunk size = 13 and tag = nothing
  ...testing brown_almost_linear! with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.brown_almost_linear!),Float64}()
  ...testing trigonometric! with chunk size = 1 and tag = nothing
  ...testing trigonometric! with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.trigonometric!),Float64}()
  ...testing trigonometric! with chunk size = 4 and tag = nothing
  ...testing trigonometric! with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.trigonometric!),Float64}()
  ...testing trigonometric! with chunk size = 6 and tag = nothing
  ...testing trigonometric! with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.trigonometric!),Float64}()
  ...testing trigonometric! with chunk size = 12 and tag = nothing
  ...testing trigonometric! with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.trigonometric!),Float64}()
  ...testing trigonometric! with chunk size = 13 and tag = nothing
  ...testing trigonometric! with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.trigonometric!),Float64}()
  ...testing mutation_test_1! with chunk size = 1 and tag = nothing
  ...testing mutation_test_1! with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.mutation_test_1!),Float64}()
  ...testing mutation_test_1! with chunk size = 4 and tag = nothing
  ...testing mutation_test_1! with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.mutation_test_1!),Float64}()
  ...testing mutation_test_1! with chunk size = 6 and tag = nothing
  ...testing mutation_test_1! with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.mutation_test_1!),Float64}()
  ...testing mutation_test_1! with chunk size = 12 and tag = nothing
  ...testing mutation_test_1! with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.mutation_test_1!),Float64}()
  ...testing mutation_test_1! with chunk size = 13 and tag = nothing
  ...testing mutation_test_1! with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.mutation_test_1!),Float64}()
  ...testing mutation_test_2! with chunk size = 1 and tag = nothing
  ...testing mutation_test_2! with chunk size = 1 and tag = ForwardDiff.Tag{typeof(DiffTests.mutation_test_2!),Float64}()
  ...testing mutation_test_2! with chunk size = 4 and tag = nothing
  ...testing mutation_test_2! with chunk size = 4 and tag = ForwardDiff.Tag{typeof(DiffTests.mutation_test_2!),Float64}()
  ...testing mutation_test_2! with chunk size = 6 and tag = nothing
  ...testing mutation_test_2! with chunk size = 6 and tag = ForwardDiff.Tag{typeof(DiffTests.mutation_test_2!),Float64}()
  ...testing mutation_test_2! with chunk size = 12 and tag = nothing
  ...testing mutation_test_2! with chunk size = 12 and tag = ForwardDiff.Tag{typeof(DiffTests.mutation_test_2!),Float64}()
  ...testing mutation_test_2! with chunk size = 13 and tag = nothing
  ...testing mutation_test_2! with chunk size = 13 and tag = ForwardDiff.Tag{typeof(DiffTests.mutation_test_2!),Float64}()
  ...testing specialized StaticArray codepaths
done (took 118.651875014 seconds).
Testing hessian functionality...
  ...running hardcoded test with chunk size = 1 and tag = nothing
  ...running hardcoded test with chunk size = 1 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.rosenbrock_1),typeof(ForwardDiff.gradient)},Float64}()
  ...running hardcoded test with chunk size = 2 and tag = nothing
  ...running hardcoded test with chunk size = 2 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.rosenbrock_1),typeof(ForwardDiff.gradient)},Float64}()
  ...running hardcoded test with chunk size = 3 and tag = nothing
  ...running hardcoded test with chunk size = 3 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.rosenbrock_1),typeof(ForwardDiff.gradient)},Float64}()
  ...testing vec2num_1 with chunk size = 1 and tag = nothing
  ...testing vec2num_1 with chunk size = 1 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.vec2num_1),typeof(ForwardDiff.gradient)},Float64}()
  ...testing vec2num_1 with chunk size = 2 and tag = nothing
  ...testing vec2num_1 with chunk size = 2 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.vec2num_1),typeof(ForwardDiff.gradient)},Float64}()
  ...testing vec2num_1 with chunk size = 3 and tag = nothing
  ...testing vec2num_1 with chunk size = 3 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.vec2num_1),typeof(ForwardDiff.gradient)},Float64}()
  ...testing vec2num_2 with chunk size = 1 and tag = nothing
  ...testing vec2num_2 with chunk size = 1 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.vec2num_2),typeof(ForwardDiff.gradient)},Float64}()
  ...testing vec2num_2 with chunk size = 2 and tag = nothing
  ...testing vec2num_2 with chunk size = 2 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.vec2num_2),typeof(ForwardDiff.gradient)},Float64}()
  ...testing vec2num_2 with chunk size = 3 and tag = nothing
  ...testing vec2num_2 with chunk size = 3 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.vec2num_2),typeof(ForwardDiff.gradient)},Float64}()
  ...testing vec2num_3 with chunk size = 1 and tag = nothing
  ...testing vec2num_3 with chunk size = 1 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.vec2num_3),typeof(ForwardDiff.gradient)},Float64}()
  ...testing vec2num_3 with chunk size = 2 and tag = nothing
  ...testing vec2num_3 with chunk size = 2 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.vec2num_3),typeof(ForwardDiff.gradient)},Float64}()
  ...testing vec2num_3 with chunk size = 3 and tag = nothing
  ...testing vec2num_3 with chunk size = 3 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.vec2num_3),typeof(ForwardDiff.gradient)},Float64}()
  ...testing vec2num_4 with chunk size = 1 and tag = nothing
  ...testing vec2num_4 with chunk size = 1 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.vec2num_4),typeof(ForwardDiff.gradient)},Float64}()
  ...testing vec2num_4 with chunk size = 2 and tag = nothing
  ...testing vec2num_4 with chunk size = 2 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.vec2num_4),typeof(ForwardDiff.gradient)},Float64}()
  ...testing vec2num_4 with chunk size = 3 and tag = nothing
  ...testing vec2num_4 with chunk size = 3 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.vec2num_4),typeof(ForwardDiff.gradient)},Float64}()
  ...testing vec2num_5 with chunk size = 1 and tag = nothing
  ...testing vec2num_5 with chunk size = 1 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.vec2num_5),typeof(ForwardDiff.gradient)},Float64}()
  ...testing vec2num_5 with chunk size = 2 and tag = nothing
  ...testing vec2num_5 with chunk size = 2 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.vec2num_5),typeof(ForwardDiff.gradient)},Float64}()
  ...testing vec2num_5 with chunk size = 3 and tag = nothing
  ...testing vec2num_5 with chunk size = 3 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.vec2num_5),typeof(ForwardDiff.gradient)},Float64}()
  ...testing vec2num_6 with chunk size = 1 and tag = nothing
  ...testing vec2num_6 with chunk size = 1 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.vec2num_6),typeof(ForwardDiff.gradient)},Float64}()
  ...testing vec2num_6 with chunk size = 2 and tag = nothing
  ...testing vec2num_6 with chunk size = 2 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.vec2num_6),typeof(ForwardDiff.gradient)},Float64}()
  ...testing vec2num_6 with chunk size = 3 and tag = nothing
  ...testing vec2num_6 with chunk size = 3 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.vec2num_6),typeof(ForwardDiff.gradient)},Float64}()
  ...testing vec2num_7 with chunk size = 1 and tag = nothing
  ...testing vec2num_7 with chunk size = 1 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.vec2num_7),typeof(ForwardDiff.gradient)},Float64}()
  ...testing vec2num_7 with chunk size = 2 and tag = nothing
  ...testing vec2num_7 with chunk size = 2 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.vec2num_7),typeof(ForwardDiff.gradient)},Float64}()
  ...testing vec2num_7 with chunk size = 3 and tag = nothing
  ...testing vec2num_7 with chunk size = 3 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.vec2num_7),typeof(ForwardDiff.gradient)},Float64}()
  ...testing rosenbrock_1 with chunk size = 1 and tag = nothing
  ...testing rosenbrock_1 with chunk size = 1 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.rosenbrock_1),typeof(ForwardDiff.gradient)},Float64}()
  ...testing rosenbrock_1 with chunk size = 2 and tag = nothing
  ...testing rosenbrock_1 with chunk size = 2 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.rosenbrock_1),typeof(ForwardDiff.gradient)},Float64}()
  ...testing rosenbrock_1 with chunk size = 3 and tag = nothing
  ...testing rosenbrock_1 with chunk size = 3 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.rosenbrock_1),typeof(ForwardDiff.gradient)},Float64}()
  ...testing rosenbrock_2 with chunk size = 1 and tag = nothing
  ...testing rosenbrock_2 with chunk size = 1 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.rosenbrock_2),typeof(ForwardDiff.gradient)},Float64}()
  ...testing rosenbrock_2 with chunk size = 2 and tag = nothing
  ...testing rosenbrock_2 with chunk size = 2 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.rosenbrock_2),typeof(ForwardDiff.gradient)},Float64}()
  ...testing rosenbrock_2 with chunk size = 3 and tag = nothing
  ...testing rosenbrock_2 with chunk size = 3 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.rosenbrock_2),typeof(ForwardDiff.gradient)},Float64}()
  ...testing rosenbrock_3 with chunk size = 1 and tag = nothing
  ...testing rosenbrock_3 with chunk size = 1 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.rosenbrock_3),typeof(ForwardDiff.gradient)},Float64}()
  ...testing rosenbrock_3 with chunk size = 2 and tag = nothing
  ...testing rosenbrock_3 with chunk size = 2 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.rosenbrock_3),typeof(ForwardDiff.gradient)},Float64}()
  ...testing rosenbrock_3 with chunk size = 3 and tag = nothing
  ...testing rosenbrock_3 with chunk size = 3 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.rosenbrock_3),typeof(ForwardDiff.gradient)},Float64}()
  ...testing rosenbrock_4 with chunk size = 1 and tag = nothing
  ...testing rosenbrock_4 with chunk size = 1 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.rosenbrock_4),typeof(ForwardDiff.gradient)},Float64}()
  ...testing rosenbrock_4 with chunk size = 2 and tag = nothing
  ...testing rosenbrock_4 with chunk size = 2 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.rosenbrock_4),typeof(ForwardDiff.gradient)},Float64}()
  ...testing rosenbrock_4 with chunk size = 3 and tag = nothing
  ...testing rosenbrock_4 with chunk size = 3 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.rosenbrock_4),typeof(ForwardDiff.gradient)},Float64}()
  ...testing ackley with chunk size = 1 and tag = nothing
  ...testing ackley with chunk size = 1 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.ackley),typeof(ForwardDiff.gradient)},Float64}()
  ...testing ackley with chunk size = 2 and tag = nothing
  ...testing ackley with chunk size = 2 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.ackley),typeof(ForwardDiff.gradient)},Float64}()
  ...testing ackley with chunk size = 3 and tag = nothing
  ...testing ackley with chunk size = 3 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.ackley),typeof(ForwardDiff.gradient)},Float64}()
  ...testing self_weighted_logit with chunk size = 1 and tag = nothing
  ...testing self_weighted_logit with chunk size = 1 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.self_weighted_logit),typeof(ForwardDiff.gradient)},Float64}()
  ...testing self_weighted_logit with chunk size = 2 and tag = nothing
  ...testing self_weighted_logit with chunk size = 2 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.self_weighted_logit),typeof(ForwardDiff.gradient)},Float64}()
  ...testing self_weighted_logit with chunk size = 3 and tag = nothing
  ...testing self_weighted_logit with chunk size = 3 and tag = ForwardDiff.Tag{Tuple{typeof(DiffTests.self_weighted_logit),typeof(ForwardDiff.gradient)},Float64}()
  ...testing first with chunk size = 1 and tag = nothing
  ...testing first with chunk size = 1 and tag = ForwardDiff.Tag{Tuple{typeof(first),typeof(ForwardDiff.gradient)},Float64}()
  ...testing first with chunk size = 2 and tag = nothing
  ...testing first with chunk size = 2 and tag = ForwardDiff.Tag{Tuple{typeof(first),typeof(ForwardDiff.gradient)},Float64}()
  ...testing first with chunk size = 3 and tag = nothing
  ...testing first with chunk size = 3 and tag = ForwardDiff.Tag{Tuple{typeof(first),typeof(ForwardDiff.gradient)},Float64}()
  ...testing specialized StaticArray codepaths
done (took 253.379587703 seconds).
Testing perturbation confusion functionality...
done (took 12.428595932 seconds).
Testing miscellaneous functionality...
done (took 23.420723835 seconds).
Testing SIMD vectorization...
Test Summary:                            | Pass  Total
SIMD ForwardDiff.Dual{Nothing,Float64,3} |   10     10
Test Summary:                            | Pass  Total
SIMD ForwardDiff.Dual{Nothing,Float64,4} |   10     10
SIMD ForwardDiff.Dual{Nothing,ForwardDiff.Dual{Nothing,Float64,1},1}: Test Failed at /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/test/SIMDTest.jl:33
  Expression: occursin(r"fadd \<.*?x double\>", div_bitcode)
   Evaluated: occursin(r"fadd \<.*?x double\>", "\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:134 within `/'\ndefine void @\"julia_/_17388\"({ { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }* noalias nocapture sret, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* nocapture nonnull readonly dereferenceable(32), { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* nocapture nonnull readonly dereferenceable(32)) {\ntop:\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:424 within `/' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:423\n; ┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:81 within `value'\n; │┌ @ Base.jl:33 within `getproperty'\n    %3 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %1, i64 0, i32 0, i32 0\n    %4 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %2, i64 0, i32 0, i32 0\n; └└\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:424 within `/' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:424 @ float.jl:407\n  %5 = load double, double addrspace(11)* %3, align 8\n  %6 = load double, double addrspace(11)* %4, align 8\n  %7 = fdiv double %5, %6\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:424 within `/' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:424\n; ┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:87 within `_div_partials'\n; │┌ @ number.jl:199 within `inv'\n; ││┌ @ float.jl:407 within `/'\n     %8 = fdiv double 1.000000e+00, %6\n; │└└\n; │┌ @ float.jl:405 within `*'\n    %9 = fmul double %6, %6\n; │└\n; │┌ @ float.jl:407 within `/'\n    %10 = fdiv double %5, %9\n; │└\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:119 within `_mul_partials'\n; ││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:221 within `mul_tuples'\n; │││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; ││││┌ @ tuple.jl:24 within `getindex'\n       %11 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %1, i64 0, i32 0, i32 1, i64 0, i64 0\n; ││││└\n; ││││┌ @ float.jl:405 within `*'\n       %12 = load double, double addrspace(11)* %11, align 8\n       %13 = fmul double %8, %12\n; ││││└\n; ││││┌ @ tuple.jl:24 within `getindex'\n       %14 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %2, i64 0, i32 0, i32 1, i64 0, i64 0\n; ││││└\n; ││││┌ @ float.jl:405 within `*'\n       %15 = load double, double addrspace(11)* %14, align 8\n       %16 = fmul double %10, %15\n; ││││└\n; ││││┌ @ float.jl:401 within `+'\n       %17 = fsub double %13, %16\n; └└└└└\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:424 within `/'\n; ┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:87 within `_div_partials'\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:203 within `inv'\n; ││┌ @ number.jl:133 within `abs2'\n; │││┌ @ float.jl:405 within `*'\n      %18 = fmul double %8, %8\n; ││└└\n; ││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:204 within `inv'\n; ││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:84 within `*' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:111\n; │││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:201 within `scale_tuple'\n; ││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; │││││┌ @ float.jl:405 within `*'\n        %19 = fmul double %15, %18\n; │└└└└└\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:234 within `*'\n; ││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:119 within `_mul_partials'\n; │││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:221 within `mul_tuples'\n; ││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; │││││┌ @ float.jl:405 within `*'\n        %20 = fmul double %15, %6\n; │││││└\n; │││││┌ @ float.jl:401 within `+'\n        %21 = fadd double %20, %20\n; │└└└└└\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:424 within `/'\n; ││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:87 within `_div_partials'\n; │││┌ @ number.jl:199 within `inv'\n; ││││┌ @ float.jl:407 within `/'\n       %22 = fdiv double 1.000000e+00, %9\n; │││└└\n; │││┌ @ float.jl:405 within `*'\n      %23 = fmul double %9, %9\n; │││└\n; │││┌ @ float.jl:407 within `/'\n      %24 = fdiv double %5, %23\n; │││└\n; │││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:119 within `_mul_partials'\n; ││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:221 within `mul_tuples'\n; │││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; ││││││┌ @ float.jl:405 within `*'\n         %25 = fmul double %22, %12\n         %26 = fmul double %21, %24\n; ││││││└\n; ││││││┌ @ float.jl:401 within `+'\n         %27 = fsub double %25, %26\n; │└└└└└└\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:407 within `-' @ float.jl:393\n    %28 = fsub double -0.000000e+00, %10\n; │└\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:119 within `_mul_partials'\n; ││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:221 within `mul_tuples'\n; │││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; ││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:232 within `*'\n; │││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:81 within `value'\n; ││││││┌ @ Base.jl:33 within `getproperty'\n         %29 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %1, i64 0, i32 1, i64 0, i64 0, i32 0\n; │││││└└\n; │││││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:233 within `*' @ float.jl:405\n       %30 = load double, double addrspace(11)* %29, align 8\n       %31 = fmul double %8, %30\n; │││││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:234 within `*'\n; │││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:119 within `_mul_partials'\n; ││││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:221 within `mul_tuples'\n; │││││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; ││││││││┌ @ float.jl:405 within `*'\n           %32 = fmul double %19, %30\n; ││││││││└\n; ││││││││┌ @ tuple.jl:24 within `getindex'\n           %33 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %1, i64 0, i32 1, i64 0, i64 0, i32 1, i64 0, i64 0\n; ││││││││└\n; ││││││││┌ @ float.jl:405 within `*'\n           %34 = load double, double addrspace(11)* %33, align 8\n           %35 = fmul double %8, %34\n; ││││││││└\n; ││││││││┌ @ float.jl:401 within `+'\n           %36 = fsub double %35, %32\n; │││││└└└└\n; │││││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:232 within `*'\n; │││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:81 within `value'\n; ││││││┌ @ Base.jl:33 within `getproperty'\n         %37 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %2, i64 0, i32 1, i64 0, i64 0, i32 0\n; │││││└└\n; │││││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:233 within `*' @ float.jl:405\n       %38 = load double, double addrspace(11)* %37, align 8\n       %39 = fmul double %38, %28\n; │││││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:234 within `*'\n; │││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:119 within `_mul_partials'\n; ││││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:221 within `mul_tuples'\n; │││││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; ││││││││┌ @ float.jl:405 within `*'\n           %40 = fmul double %27, %38\n; ││││││││└\n; ││││││││┌ @ tuple.jl:24 within `getindex'\n           %41 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %2, i64 0, i32 1, i64 0, i64 0, i32 1, i64 0, i64 0\n; ││││││││└\n; ││││││││┌ @ float.jl:405 within `*'\n           %42 = load double, double addrspace(11)* %41, align 8\n           %43 = fmul double %42, %28\n; ││││││││└\n; ││││││││┌ @ float.jl:401 within `+'\n           %44 = fsub double %43, %40\n; ││││└└└└└\n; ││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:391 within `+' @ float.jl:401\n       %45 = fadd double %31, %39\n; │││││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:391 within `+' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:81\n; │││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:209 within `add_tuples'\n; ││││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; │││││││┌ @ float.jl:401 within `+'\n          %46 = fadd double %36, %44\n; └└└└└└└└\n  %.sroa.0.sroa.019.0..sroa.0.0..sroa_cast.sroa_idx = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }* %0, i64 0, i32 0, i32 0\n  store double %7, double* %.sroa.0.sroa.019.0..sroa.0.0..sroa_cast.sroa_idx, align 8\n  %.sroa.0.sroa.220.0..sroa.0.0..sroa_cast.sroa_idx21 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }* %0, i64 0, i32 0, i32 1, i64 0, i64 0\n  store double %17, double* %.sroa.0.sroa.220.0..sroa.0.0..sroa_cast.sroa_idx21, align 8\n  %.sroa.211.0..sroa_idx12 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }* %0, i64 0, i32 1, i64 0, i64 0, i32 0\n  store double %45, double* %.sroa.211.0..sroa_idx12, align 8\n  %.sroa.3.0..sroa_idx13 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }* %0, i64 0, i32 1, i64 0, i64 0, i32 1, i64 0, i64 0\n  store double %46, double* %.sroa.3.0..sroa_idx13, align 8\n  ret void\n}\n")
Stacktrace:
 [1] top-level scope at /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/test/SIMDTest.jl:33
 [2] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188
 [3] include(::Function, ::Module, ::String) at ./Base.jl:380
 [4] include(::Module, ::String) at ./Base.jl:368
 [5] exec_options(::Base.JLOptions) at ./client.jl:288
 [6] _start() at ./client.jl:490
SIMD ForwardDiff.Dual{Nothing,ForwardDiff.Dual{Nothing,Float64,1},1}: Test Failed at /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/test/SIMDTest.jl:34
  Expression: occursin(r"fmul \<.*?x double\>", div_bitcode)
   Evaluated: occursin(r"fmul \<.*?x double\>", "\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:134 within `/'\ndefine void @\"julia_/_17388\"({ { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }* noalias nocapture sret, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* nocapture nonnull readonly dereferenceable(32), { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* nocapture nonnull readonly dereferenceable(32)) {\ntop:\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:424 within `/' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:423\n; ┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:81 within `value'\n; │┌ @ Base.jl:33 within `getproperty'\n    %3 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %1, i64 0, i32 0, i32 0\n    %4 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %2, i64 0, i32 0, i32 0\n; └└\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:424 within `/' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:424 @ float.jl:407\n  %5 = load double, double addrspace(11)* %3, align 8\n  %6 = load double, double addrspace(11)* %4, align 8\n  %7 = fdiv double %5, %6\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:424 within `/' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:424\n; ┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:87 within `_div_partials'\n; │┌ @ number.jl:199 within `inv'\n; ││┌ @ float.jl:407 within `/'\n     %8 = fdiv double 1.000000e+00, %6\n; │└└\n; │┌ @ float.jl:405 within `*'\n    %9 = fmul double %6, %6\n; │└\n; │┌ @ float.jl:407 within `/'\n    %10 = fdiv double %5, %9\n; │└\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:119 within `_mul_partials'\n; ││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:221 within `mul_tuples'\n; │││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; ││││┌ @ tuple.jl:24 within `getindex'\n       %11 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %1, i64 0, i32 0, i32 1, i64 0, i64 0\n; ││││└\n; ││││┌ @ float.jl:405 within `*'\n       %12 = load double, double addrspace(11)* %11, align 8\n       %13 = fmul double %8, %12\n; ││││└\n; ││││┌ @ tuple.jl:24 within `getindex'\n       %14 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %2, i64 0, i32 0, i32 1, i64 0, i64 0\n; ││││└\n; ││││┌ @ float.jl:405 within `*'\n       %15 = load double, double addrspace(11)* %14, align 8\n       %16 = fmul double %10, %15\n; ││││└\n; ││││┌ @ float.jl:401 within `+'\n       %17 = fsub double %13, %16\n; └└└└└\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:424 within `/'\n; ┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:87 within `_div_partials'\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:203 within `inv'\n; ││┌ @ number.jl:133 within `abs2'\n; │││┌ @ float.jl:405 within `*'\n      %18 = fmul double %8, %8\n; ││└└\n; ││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:204 within `inv'\n; ││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:84 within `*' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:111\n; │││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:201 within `scale_tuple'\n; ││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; │││││┌ @ float.jl:405 within `*'\n        %19 = fmul double %15, %18\n; │└└└└└\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:234 within `*'\n; ││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:119 within `_mul_partials'\n; │││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:221 within `mul_tuples'\n; ││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; │││││┌ @ float.jl:405 within `*'\n        %20 = fmul double %15, %6\n; │││││└\n; │││││┌ @ float.jl:401 within `+'\n        %21 = fadd double %20, %20\n; │└└└└└\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:424 within `/'\n; ││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:87 within `_div_partials'\n; │││┌ @ number.jl:199 within `inv'\n; ││││┌ @ float.jl:407 within `/'\n       %22 = fdiv double 1.000000e+00, %9\n; │││└└\n; │││┌ @ float.jl:405 within `*'\n      %23 = fmul double %9, %9\n; │││└\n; │││┌ @ float.jl:407 within `/'\n      %24 = fdiv double %5, %23\n; │││└\n; │││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:119 within `_mul_partials'\n; ││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:221 within `mul_tuples'\n; │││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; ││││││┌ @ float.jl:405 within `*'\n         %25 = fmul double %22, %12\n         %26 = fmul double %21, %24\n; ││││││└\n; ││││││┌ @ float.jl:401 within `+'\n         %27 = fsub double %25, %26\n; │└└└└└└\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:407 within `-' @ float.jl:393\n    %28 = fsub double -0.000000e+00, %10\n; │└\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:119 within `_mul_partials'\n; ││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:221 within `mul_tuples'\n; │││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; ││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:232 within `*'\n; │││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:81 within `value'\n; ││││││┌ @ Base.jl:33 within `getproperty'\n         %29 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %1, i64 0, i32 1, i64 0, i64 0, i32 0\n; │││││└└\n; │││││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:233 within `*' @ float.jl:405\n       %30 = load double, double addrspace(11)* %29, align 8\n       %31 = fmul double %8, %30\n; │││││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:234 within `*'\n; │││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:119 within `_mul_partials'\n; ││││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:221 within `mul_tuples'\n; │││││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; ││││││││┌ @ float.jl:405 within `*'\n           %32 = fmul double %19, %30\n; ││││││││└\n; ││││││││┌ @ tuple.jl:24 within `getindex'\n           %33 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %1, i64 0, i32 1, i64 0, i64 0, i32 1, i64 0, i64 0\n; ││││││││└\n; ││││││││┌ @ float.jl:405 within `*'\n           %34 = load double, double addrspace(11)* %33, align 8\n           %35 = fmul double %8, %34\n; ││││││││└\n; ││││││││┌ @ float.jl:401 within `+'\n           %36 = fsub double %35, %32\n; │││││└└└└\n; │││││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:232 within `*'\n; │││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:81 within `value'\n; ││││││┌ @ Base.jl:33 within `getproperty'\n         %37 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %2, i64 0, i32 1, i64 0, i64 0, i32 0\n; │││││└└\n; │││││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:233 within `*' @ float.jl:405\n       %38 = load double, double addrspace(11)* %37, align 8\n       %39 = fmul double %38, %28\n; │││││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:234 within `*'\n; │││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:119 within `_mul_partials'\n; ││││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:221 within `mul_tuples'\n; │││││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; ││││││││┌ @ float.jl:405 within `*'\n           %40 = fmul double %27, %38\n; ││││││││└\n; ││││││││┌ @ tuple.jl:24 within `getindex'\n           %41 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %2, i64 0, i32 1, i64 0, i64 0, i32 1, i64 0, i64 0\n; ││││││││└\n; ││││││││┌ @ float.jl:405 within `*'\n           %42 = load double, double addrspace(11)* %41, align 8\n           %43 = fmul double %42, %28\n; ││││││││└\n; ││││││││┌ @ float.jl:401 within `+'\n           %44 = fsub double %43, %40\n; ││││└└└└└\n; ││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:391 within `+' @ float.jl:401\n       %45 = fadd double %31, %39\n; │││││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:391 within `+' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:81\n; │││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:209 within `add_tuples'\n; ││││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; │││││││┌ @ float.jl:401 within `+'\n          %46 = fadd double %36, %44\n; └└└└└└└└\n  %.sroa.0.sroa.019.0..sroa.0.0..sroa_cast.sroa_idx = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }* %0, i64 0, i32 0, i32 0\n  store double %7, double* %.sroa.0.sroa.019.0..sroa.0.0..sroa_cast.sroa_idx, align 8\n  %.sroa.0.sroa.220.0..sroa.0.0..sroa_cast.sroa_idx21 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }* %0, i64 0, i32 0, i32 1, i64 0, i64 0\n  store double %17, double* %.sroa.0.sroa.220.0..sroa.0.0..sroa_cast.sroa_idx21, align 8\n  %.sroa.211.0..sroa_idx12 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }* %0, i64 0, i32 1, i64 0, i64 0, i32 0\n  store double %45, double* %.sroa.211.0..sroa_idx12, align 8\n  %.sroa.3.0..sroa_idx13 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }* %0, i64 0, i32 1, i64 0, i64 0, i32 1, i64 0, i64 0\n  store double %46, double* %.sroa.3.0..sroa_idx13, align 8\n  ret void\n}\n")
Stacktrace:
 [1] top-level scope at /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/test/SIMDTest.jl:34
 [2] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188
 [3] include(::Function, ::Module, ::String) at ./Base.jl:380
 [4] include(::Module, ::String) at ./Base.jl:368
 [5] exec_options(::Base.JLOptions) at ./client.jl:288
 [6] _start() at ./client.jl:490
SIMD ForwardDiff.Dual{Nothing,ForwardDiff.Dual{Nothing,Float64,1},1}: Test Failed at /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/test/SIMDTest.jl:37
  Expression: occursin(r"fmul \<.*?x double\>", pow_bitcode)
   Evaluated: occursin(r"fmul \<.*?x double\>", "\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:139 within `^'\ndefine void @\"julia_^_17470\"({ { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }* noalias nocapture sret, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* nocapture nonnull readonly dereferenceable(32), i64) {\ntop:\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:457 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:456\n; ┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:81 within `value'\n; │┌ @ Base.jl:33 within `getproperty'\n    %3 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %1, i64 0, i32 0, i32 0\n; └└\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:457 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:457 @ math.jl:899\n; ┌ @ float.jl:60 within `Float64'\n   %4 = sitofp i64 %2 to double\n; └\n  %5 = load double, double addrspace(11)* %3, align 8\n  %6 = call double @llvm.pow.f64(double %5, double %4)\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:457 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:458\n; ┌ @ promotion.jl:398 within `=='\n   %7 = icmp eq i64 %2, 0\n; └\n  br i1 %7, label %L63, label %L25\n\nL25:                                              ; preds = %top\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:457 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:461\n; ┌ @ int.jl:52 within `-'\n   %8 = add i64 %2, -1\n; └\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:457 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:461 @ math.jl:899\n; ┌ @ float.jl:60 within `Float64'\n   %9 = sitofp i64 %8 to double\n; └\n  %10 = call double @llvm.pow.f64(double %5, double %9)\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:457 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:461\n; ┌ @ operators.jl:529 within `*' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:111\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:201 within `scale_tuple'\n; ││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; │││┌ @ tuple.jl:24 within `getindex'\n      %11 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %1, i64 0, i32 0, i32 1, i64 0, i64 0\n; │││└\n; │││┌ @ promotion.jl:312 within `*' @ float.jl:405\n      %12 = load double, double addrspace(11)* %11, align 8\n      %13 = fmul double %12, %4\n; │││└\n; │││┌ @ float.jl:405 within `*'\n      %14 = fmul double %10, %13\n; └└└└\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:461 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:457 @ math.jl:899\n  %15 = call double @llvm.pow.f64(double %5, double %9)\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:461 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:458\n; ┌ @ promotion.jl:398 within `=='\n   %16 = icmp eq i64 %8, 0\n; └\n  br i1 %16, label %L44, label %L33\n\nL33:                                              ; preds = %L25\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:461 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:461\n; ┌ @ int.jl:52 within `-'\n   %17 = add i64 %2, -2\n; └\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:461 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:461 @ math.jl:899\n; ┌ @ float.jl:60 within `Float64'\n   %18 = sitofp i64 %17 to double\n; └\n  %19 = call double @llvm.pow.f64(double %5, double %18)\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:461 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:461\n; ┌ @ operators.jl:529 within `*' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:111\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:201 within `scale_tuple'\n; ││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; │││┌ @ promotion.jl:312 within `*' @ float.jl:405\n      %20 = fmul double %12, %9\n; │││└\n; │││┌ @ float.jl:405 within `*'\n      %21 = fmul double %19, %20\n      br label %L44\n\nL44:                                              ; preds = %L25, %L33\n      %value_phi = phi double [ %21, %L33 ], [ 0.000000e+00, %L25 ]\n; └└└└\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:461 within `^'\n; ┌ @ operators.jl:529 within `*' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:111\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:201 within `scale_tuple'\n; ││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; │││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:237 within `*'\n; ││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:81 within `value'\n; │││││┌ @ Base.jl:33 within `getproperty'\n        %22 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %1, i64 0, i32 1, i64 0, i64 0, i32 0\n; ││││└└\n; ││││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:238 within `*' @ promotion.jl:312 @ float.jl:405\n      %23 = load double, double addrspace(11)* %22, align 8\n      %24 = fmul double %23, %4\n; ││││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:239 within `*' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:84 @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:111\n; ││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:201 within `scale_tuple'\n; │││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; ││││││┌ @ tuple.jl:24 within `getindex'\n         %25 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %1, i64 0, i32 1, i64 0, i64 0, i32 1, i64 0, i64 0\n; ││││││└\n; ││││││┌ @ promotion.jl:312 within `*' @ float.jl:405\n         %26 = load double, double addrspace(11)* %25, align 8\n         %27 = fmul double %26, %4\n; ││││└└└\n; ││││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:233 within `*' @ float.jl:405\n      %28 = fmul double %15, %24\n; ││││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:234 within `*'\n; ││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:119 within `_mul_partials'\n; │││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:221 within `mul_tuples'\n; ││││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; │││││││┌ @ float.jl:405 within `*'\n          %29 = fmul double %15, %27\n          %30 = fmul double %value_phi, %24\n; │││││││└\n; │││││││┌ @ float.jl:401 within `+'\n          %31 = fadd double %30, %29\n; │└└└└└└└\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:2 within `Partials' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:2\n    br label %L63\n\nL63:                                              ; preds = %top, %L44\n    %.sroa.034.038 = phi double [ %14, %L44 ], [ 0.000000e+00, %top ]\n    %.sroa.016.0 = phi double [ %28, %L44 ], [ 0.000000e+00, %top ]\n    %.sroa.6.0 = phi double [ %31, %L44 ], [ 0.000000e+00, %top ]\n; └└\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:463 within `^'\n  %.sroa.023.sroa.0.0..sroa.023.0..sroa_cast.sroa_idx = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }* %0, i64 0, i32 0, i32 0\n  store double %6, double* %.sroa.023.sroa.0.0..sroa.023.0..sroa_cast.sroa_idx, align 8\n  %.sroa.023.sroa.2.0..sroa.023.0..sroa_cast.sroa_idx32 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }* %0, i64 0, i32 0, i32 1, i64 0, i64 0\n  store double %.sroa.034.038, double* %.sroa.023.sroa.2.0..sroa.023.0..sroa_cast.sroa_idx32, align 8\n  %.sroa.226.0..sroa_idx27 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }* %0, i64 0, i32 1, i64 0, i64 0, i32 0\n  store double %.sroa.016.0, double* %.sroa.226.0..sroa_idx27, align 8\n  %.sroa.3.0..sroa_idx28 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }* %0, i64 0, i32 1, i64 0, i64 0, i32 1, i64 0, i64 0\n  store double %.sroa.6.0, double* %.sroa.3.0..sroa_idx28, align 8\n  ret void\n}\n")
Stacktrace:
 [1] top-level scope at /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/test/SIMDTest.jl:37
 [2] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188
 [3] include(::Function, ::Module, ::String) at ./Base.jl:380
 [4] include(::Module, ::String) at ./Base.jl:368
 [5] exec_options(::Base.JLOptions) at ./client.jl:288
 [6] _start() at ./client.jl:490
SIMD ForwardDiff.Dual{Nothing,ForwardDiff.Dual{Nothing,Float64,1},1}: Test Failed at /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/test/SIMDTest.jl:40
  Expression: occursin(r"fadd \<.*?x double\>", exp_bitcode)
   Evaluated: occursin(r"fadd \<.*?x double\>", "\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:134 within `^'\ndefine void @\"julia_^_17471\"({ { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }* noalias nocapture sret, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* nocapture nonnull readonly dereferenceable(32), { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* nocapture nonnull readonly dereferenceable(32)) {\ntop:\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:443 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:442\n; ┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:81 within `value'\n; │┌ @ Base.jl:33 within `getproperty'\n    %3 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %1, i64 0, i32 0, i32 0\n    %4 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %2, i64 0, i32 0, i32 0\n; └└\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:443 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:443 @ math.jl:886\n  %5 = load double, double addrspace(11)* %3, align 8\n  %6 = load double, double addrspace(11)* %4, align 8\n  %7 = call double @llvm.pow.f64(double %5, double %6)\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:443 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:443 @ math.jl:887\n; ┌ @ float.jl:536 within `isnan'\n; │┌ @ float.jl:456 within `!='\n    %8 = fcmp ord double %7, 0.000000e+00\n; └└\n; ┌ @ float.jl:401 within `+'\n   %9 = fadd double %5, %6\n; └\n; ┌ @ float.jl:536 within `isnan'\n; │┌ @ float.jl:456 within `!='\n    %10 = fcmp uno double %9, 0.000000e+00\n; └└\n  %11 = or i1 %8, %10\n  br i1 %11, label %L15, label %L12\n\nL12:                                              ; preds = %top\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:443 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:443 @ math.jl:888\n  %12 = call nonnull %jl_value_t addrspace(10)* @julia_throw_exp_domainerror_17336(double %5)\n  call void @llvm.trap()\n  unreachable\n\nL15:                                              ; preds = %top\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:443 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444\n; ┌ @ promotion.jl:313 within `-' @ float.jl:403\n   %13 = fadd double %6, -1.000000e+00\n; └\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:443 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444 @ math.jl:886\n  %14 = call double @llvm.pow.f64(double %5, double %13)\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:443 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444 @ math.jl:887\n; ┌ @ float.jl:536 within `isnan'\n; │┌ @ float.jl:456 within `!='\n    %15 = fcmp ord double %14, 0.000000e+00\n; └└\n; ┌ @ float.jl:401 within `+'\n   %16 = fadd double %13, %5\n; └\n; ┌ @ float.jl:536 within `isnan'\n; │┌ @ float.jl:456 within `!='\n    %17 = fcmp uno double %16, 0.000000e+00\n; └└\n  %18 = or i1 %15, %17\n  br i1 %18, label %L27, label %L24\n\nL24:                                              ; preds = %L15\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:443 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444 @ math.jl:888\n  %19 = call nonnull %jl_value_t addrspace(10)* @julia_throw_exp_domainerror_17336(double %5)\n  call void @llvm.trap()\n  unreachable\n\nL27:                                              ; preds = %L15\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:443 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444\n; ┌ @ float.jl:405 within `*'\n   %20 = fmul double %14, %6\n; └\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:443 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:445\n; ┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:305 within `isconstant'\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:37 within `iszero'\n; ││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:168 within `iszero_tuple'\n; │││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:172 within `macro expansion'\n; ││││┌ @ tuple.jl:24 within `getindex'\n       %21 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %2, i64 0, i32 0, i32 1, i64 0, i64 0\n; ││││└\n; ││││┌ @ float.jl:454 within `=='\n       %22 = load double, double addrspace(11)* %21, align 8\n       %23 = fcmp une double %22, 0.000000e+00\n; └└└└└\n  br i1 %23, label %L34, label %L52\n\nL34:                                              ; preds = %L27\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:443 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:447\n; ┌ @ number.jl:40 within `iszero'\n; │┌ @ float.jl:454 within `=='\n    %24 = fcmp une double %5, 0.000000e+00\n; └└\n  %25 = load double, double addrspace(11)* %4, align 8\n  %26 = fcmp ule double %25, 0.000000e+00\n  %value_phi9 = or i1 %24, %26\n  br i1 %value_phi9, label %L50, label %L52\n\nL50:                                              ; preds = %L34\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:443 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:450\n  %27 = call double @julia_log_13481(double %5)\n; ┌ @ float.jl:405 within `*'\n   %28 = fmul double %7, %27\n   br label %L52\n\nL52:                                              ; preds = %L34, %L27, %L50\n   %value_phi = phi double [ %28, %L50 ], [ 1.000000e+00, %L27 ], [ 0.000000e+00, %L34 ]\n; └\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:443 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:452\n; ┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:119 within `_mul_partials'\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:221 within `mul_tuples'\n; ││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; │││┌ @ tuple.jl:24 within `getindex'\n      %29 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %1, i64 0, i32 0, i32 1, i64 0, i64 0\n; │││└\n; │││┌ @ float.jl:405 within `*'\n      %30 = load double, double addrspace(11)* %29, align 8\n      %31 = fmul double %20, %30\n      %32 = fmul double %value_phi, %22\n; │││└\n; │││┌ @ float.jl:401 within `+'\n      %33 = fadd double %31, %32\n; └└└└\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:443 @ math.jl:886\n  %34 = call double @llvm.pow.f64(double %5, double %13)\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:443 @ math.jl:887\n; ┌ @ float.jl:536 within `isnan'\n; │┌ @ float.jl:456 within `!='\n    %35 = fcmp ord double %34, 0.000000e+00\n; └└\n  %36 = or i1 %35, %17\n  br i1 %36, label %L81, label %L78\n\nL78:                                              ; preds = %L52\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:443 @ math.jl:888\n  %37 = call nonnull %jl_value_t addrspace(10)* @julia_throw_exp_domainerror_17336(double %5)\n  call void @llvm.trap()\n  unreachable\n\nL81:                                              ; preds = %L52\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444\n; ┌ @ promotion.jl:313 within `-' @ float.jl:403\n   %38 = fadd double %13, -1.000000e+00\n; └\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444 @ math.jl:886\n  %39 = call double @llvm.pow.f64(double %5, double %38)\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444 @ math.jl:887\n; ┌ @ float.jl:536 within `isnan'\n; │┌ @ float.jl:456 within `!='\n    %40 = fcmp ord double %39, 0.000000e+00\n; └└\n; ┌ @ float.jl:401 within `+'\n   %41 = fadd double %38, %5\n; └\n; ┌ @ float.jl:536 within `isnan'\n; │┌ @ float.jl:456 within `!='\n    %42 = fcmp uno double %41, 0.000000e+00\n; └└\n  %43 = or i1 %40, %42\n  br i1 %43, label %L93, label %L90\n\nL90:                                              ; preds = %L81\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444 @ math.jl:888\n  %44 = call nonnull %jl_value_t addrspace(10)* @julia_throw_exp_domainerror_17336(double %5)\n  call void @llvm.trap()\n  unreachable\n\nL93:                                              ; preds = %L81\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444\n; ┌ @ float.jl:405 within `*'\n   %45 = fmul double %13, %39\n; └\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:445\n  br i1 %23, label %L99, label %L117\n\nL99:                                              ; preds = %L93\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:447\n; ┌ @ number.jl:40 within `iszero'\n; │┌ @ float.jl:454 within `=='\n    %46 = fcmp une double %5, 0.000000e+00\n; └└\n  %47 = fcmp ule double %13, 0.000000e+00\n  %value_phi8 = or i1 %47, %46\n  br i1 %value_phi8, label %L115, label %L117\n\nL115:                                             ; preds = %L99\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:450\n  %48 = call double @julia_log_13481(double %5)\n; ┌ @ float.jl:405 within `*'\n   %49 = fmul double %34, %48\n   br label %L117\n\nL117:                                             ; preds = %L99, %L93, %L115\n   %value_phi4 = phi double [ %49, %L115 ], [ 1.000000e+00, %L93 ], [ 0.000000e+00, %L99 ]\n; └\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444 within `^' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:452\n; ┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:119 within `_mul_partials'\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:221 within `mul_tuples'\n; ││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; │││┌ @ float.jl:405 within `*'\n      %50 = fmul double %45, %30\n      %51 = fmul double %value_phi4, %22\n; │││└\n; │││┌ @ float.jl:401 within `+'\n      %52 = fadd double %50, %51\n; └└└└\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:444 within `^'\n; ┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:233 within `*' @ float.jl:405\n   %53 = fmul double %34, %6\n; │ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:234 within `*'\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:119 within `_mul_partials'\n; ││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:221 within `mul_tuples'\n; │││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; ││││┌ @ float.jl:405 within `*'\n       %54 = fmul double %34, %22\n       %55 = fmul double %6, %52\n; ││││└\n; ││││┌ @ float.jl:401 within `+'\n       %56 = fadd double %54, %55\n; └└└└└\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:445 within `^'\n; ┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:305 within `isconstant'\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:37 within `iszero'\n; ││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:168 within `iszero_tuple'\n; │││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:172 within `macro expansion'\n; ││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:134 within `=='\n; │││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:81 within `value'\n; ││││││┌ @ Base.jl:33 within `getproperty'\n         %57 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %2, i64 0, i32 1, i64 0, i64 0, i32 0\n; │││││└└\n; │││││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:134 within `==' @ float.jl:454\n       %58 = load double, double addrspace(11)* %57, align 8\n       %59 = fcmp une double %58, 0.000000e+00\n; └└└└└\n  br i1 %59, label %L142, label %L171\n\nL142:                                             ; preds = %L117\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:447 within `^'\n; ┌ @ number.jl:40 within `iszero'\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:134 within `==' @ float.jl:454\n    %60 = fcmp une double %5, 0.000000e+00\n; └└\n  %61 = load double, double addrspace(11)* %4, align 8\n  %62 = fcmp ule double %61, 0.000000e+00\n  %value_phi7 = or i1 %60, %62\n  br i1 %value_phi7, label %L160, label %L171\n\nL160:                                             ; preds = %L142\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:450 within `^'\n; ┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:203 within `log'\n   %63 = call double @julia_log_13481(double %5)\n; │┌ @ number.jl:199 within `inv'\n; ││┌ @ float.jl:407 within `/'\n     %64 = fdiv double 1.000000e+00, %5\n; │└└\n; │ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:204 within `log'\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:84 within `*' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:111\n; ││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:201 within `scale_tuple'\n; │││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; ││││┌ @ float.jl:405 within `*'\n       %65 = fmul double %30, %64\n; └└└└└\n; ┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:233 within `*' @ float.jl:405\n   %66 = fmul double %7, %63\n; │ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:234 within `*'\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:119 within `_mul_partials'\n; ││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:221 within `mul_tuples'\n; │││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; ││││┌ @ float.jl:405 within `*'\n       %67 = fmul double %33, %63\n       %68 = fmul double %7, %65\n; ││││└\n; ││││┌ @ float.jl:401 within `+'\n       %69 = fadd double %67, %68\n       br label %L171\n\nL171:                                             ; preds = %L142, %L117, %L160\n       %value_phi5 = phi double [ %66, %L160 ], [ 1.000000e+00, %L117 ], [ 0.000000e+00, %L142 ]\n       %value_phi6 = phi double [ %69, %L160 ], [ 0.000000e+00, %L117 ], [ 0.000000e+00, %L142 ]\n; └└└└└\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:452 within `^'\n; ┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:119 within `_mul_partials'\n; │┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:221 within `mul_tuples'\n; ││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; │││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:232 within `*'\n; ││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:81 within `value'\n; │││││┌ @ Base.jl:33 within `getproperty'\n        %70 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %1, i64 0, i32 1, i64 0, i64 0, i32 0\n; ││││└└\n; ││││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:233 within `*' @ float.jl:405\n      %71 = load double, double addrspace(11)* %70, align 8\n      %72 = fmul double %53, %71\n; ││││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:234 within `*'\n; ││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:119 within `_mul_partials'\n; │││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:221 within `mul_tuples'\n; ││││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; │││││││┌ @ float.jl:405 within `*'\n          %73 = fmul double %56, %71\n; │││││││└\n; │││││││┌ @ tuple.jl:24 within `getindex'\n          %74 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %1, i64 0, i32 1, i64 0, i64 0, i32 1, i64 0, i64 0\n; │││││││└\n; │││││││┌ @ float.jl:405 within `*'\n          %75 = load double, double addrspace(11)* %74, align 8\n          %76 = fmul double %53, %75\n; │││││││└\n; │││││││┌ @ float.jl:401 within `+'\n          %77 = fadd double %73, %76\n; ││││└└└└\n; ││││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:233 within `*' @ float.jl:405\n      %78 = fmul double %value_phi5, %58\n; ││││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:234 within `*'\n; ││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:119 within `_mul_partials'\n; │││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:221 within `mul_tuples'\n; ││││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; │││││││┌ @ float.jl:405 within `*'\n          %79 = fmul double %value_phi6, %58\n; │││││││└\n; │││││││┌ @ tuple.jl:24 within `getindex'\n          %80 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] } addrspace(11)* %2, i64 0, i32 1, i64 0, i64 0, i32 1, i64 0, i64 0\n; │││││││└\n; │││││││┌ @ float.jl:405 within `*'\n          %81 = load double, double addrspace(11)* %80, align 8\n          %82 = fmul double %value_phi5, %81\n; │││││││└\n; │││││││┌ @ float.jl:401 within `+'\n          %83 = fadd double %79, %82\n; │││└└└└└\n; │││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:391 within `+' @ float.jl:401\n      %84 = fadd double %72, %78\n; ││││ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:391 within `+' @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:81\n; ││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:209 within `add_tuples'\n; │││││┌ @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/partials.jl:157 within `macro expansion'\n; ││││││┌ @ float.jl:401 within `+'\n         %85 = fadd double %77, %83\n; └└└└└└└\n;  @ /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/src/dual.jl:453 within `^'\n  %.sroa.0.sroa.028.0..sroa.0.0..sroa_cast.sroa_idx = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }* %0, i64 0, i32 0, i32 0\n  store double %7, double* %.sroa.0.sroa.028.0..sroa.0.0..sroa_cast.sroa_idx, align 8\n  %.sroa.0.sroa.229.0..sroa.0.0..sroa_cast.sroa_idx30 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }* %0, i64 0, i32 0, i32 1, i64 0, i64 0\n  store double %33, double* %.sroa.0.sroa.229.0..sroa.0.0..sroa_cast.sroa_idx30, align 8\n  %.sroa.220.0..sroa_idx21 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }* %0, i64 0, i32 1, i64 0, i64 0, i32 0\n  store double %84, double* %.sroa.220.0..sroa_idx21, align 8\n  %.sroa.3.0..sroa_idx22 = getelementptr inbounds { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }, { { double, [1 x [1 x double]] }, [1 x [1 x { double, [1 x [1 x double]] }]] }* %0, i64 0, i32 1, i64 0, i64 0, i32 1, i64 0, i64 0\n  store double %85, double* %.sroa.3.0..sroa_idx22, align 8\n  ret void\n}\n")
Stacktrace:
 [1] top-level scope at /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/test/SIMDTest.jl:40
 [2] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188
 [3] include(::Function, ::Module, ::String) at ./Base.jl:380
 [4] include(::Module, ::String) at ./Base.jl:368
 [5] exec_options(::Base.JLOptions) at ./client.jl:288
 [6] _start() at ./client.jl:490
Test Summary:                                                        | Pass  Fail  Total
SIMD ForwardDiff.Dual{Nothing,ForwardDiff.Dual{Nothing,Float64,1},1} |    4     4      8
ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/test/SIMDTest.jl:21
ERROR: LoadError: failed process: Process(`/opt/julia/bin/julia -Cnative -J/opt/julia/lib/julia/sys.so --check-bounds=yes -g1 --check-bounds=no --code-coverage=none -O2 --project=/tmp/jl_1Z5zLb/Project.toml /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/test/SIMDTest.jl`, ProcessExited(1)) [1]

Stacktrace:
 [1] pipeline_error at ./process.jl:525 [inlined]
 [2] run(::Cmd; wait::Bool) at ./process.jl:440
 [3] run(::Cmd) at ./process.jl:438
 [4] top-level scope at ./util.jl:234 [inlined]
 [5] top-level scope at /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/test/runtests.jl:0
 [6] include(::String) at ./client.jl:441
 [7] top-level scope at none:6
in expression starting at /home/pkgeval/.julia/packages/ForwardDiff/vt5F1/test/runtests.jl:40
ERROR: Package ForwardDiff errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:53
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1503
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:316
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:303
 [5] #test#68 at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [6] test at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [7] #test#67 at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [8] test at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [10] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [11] top-level scope at none:13
