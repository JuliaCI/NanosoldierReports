Julia Version 1.5.0-DEV.335
Commit 6f3c5ce0f5 (2020-02-24 18:44 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed InvertedIndices ───────────── v1.0.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Missings ──────────────────── v0.4.3
  Installed MappedArrays ──────────────── v0.2.2
  Installed Parsers ───────────────────── v0.3.11
  Installed KCenters ──────────────────── v0.2.1
  Installed StatsBase ─────────────────── v0.32.1
  Installed PooledArrays ──────────────── v0.5.3
  Installed DataAPI ───────────────────── v1.1.0
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed Tables ────────────────────── v1.0.2
  Installed OrderedCollections ────────── v1.1.0
  Installed DataStructures ────────────── v0.17.9
  Installed LearnBase ─────────────────── v0.2.2
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed Compat ────────────────────── v3.6.0
  Installed MLDataPattern ─────────────── v0.5.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed SimilaritySearch ──────────── v0.3.19
  Installed MLDataUtils ───────────────── v0.5.0
  Installed Reexport ──────────────────── v0.2.0
  Installed JSON ──────────────────────── v0.21.0
  Installed DataFrames ────────────────── v0.20.2
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.1
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.6.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.1
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.2
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_XAF28Q/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.6.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.1
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.2
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9323044313987097
[ Info: 0.8302954188982645
[ Info: 0.5552099955578645
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.32520933754742143
mean(cdnet.distances) = 0.4008764695872863
mean(crand.distances) = 0.34556018677850564
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.578125, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.578125,"f1":0.7190788378288385,"seconds":4.902482032775879e-6,"exhaustive_search_seconds":1.7508864402770996e-6,"evaluations":7.875,"distances_sum":1556.875527350998}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.8027108308358315,"seconds":5.427747964859009e-6,"exhaustive_search_seconds":1.7508864402770996e-6,"evaluations":8.1640625,"distances_sum":1901.4143425920383}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6865234375,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6865234375,"f1":0.8027108308358315,"seconds":5.427747964859009e-6,"exhaustive_search_seconds":1.7508864402770996e-6,"evaluations":8.1640625,"distances_sum":1901.4143425920383}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9302598443223449,"seconds":6.880611181259155e-6,"exhaustive_search_seconds":1.7508864402770996e-6,"evaluations":8.9609375,"distances_sum":2625.1426178371516}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9471611721611726,"seconds":6.031244993209839e-6,"exhaustive_search_seconds":1.7508864402770996e-6,"evaluations":9.0,"distances_sum":2745.4186226732263}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9476877289377296,"seconds":6.11133873462677e-6,"exhaustive_search_seconds":1.7508864402770996e-6,"evaluations":9.0,"distances_sum":2766.097095492665}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9072265625,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9476877289377296,"seconds":6.11133873462677e-6,"exhaustive_search_seconds":1.7508864402770996e-6,"evaluations":9.0,"distances_sum":2766.097095492665}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9552171786546791,"seconds":6.465241312980652e-6,"exhaustive_search_seconds":1.7508864402770996e-6,"evaluations":8.9765625,"distances_sum":2843.2456710702586}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9700148809523814,"seconds":6.1802566051483154e-6,"exhaustive_search_seconds":1.7508864402770996e-6,"evaluations":8.9765625,"distances_sum":2947.252001374415}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9538034881784887,"seconds":6.256625056266785e-6,"exhaustive_search_seconds":1.7508864402770996e-6,"evaluations":9.0,"distances_sum":2833.3614771873195}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.979464285714286,"seconds":6.726011633872986e-6,"exhaustive_search_seconds":1.7508864402770996e-6,"evaluations":9.0,"distances_sum":3026.356851179554}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.973717948717949,"seconds":6.232410669326782e-6,"exhaustive_search_seconds":1.7508864402770996e-6,"evaluations":9.0,"distances_sum":2983.6105998087096}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.979464285714286,"seconds":6.726011633872986e-6,"exhaustive_search_seconds":1.7508864402770996e-6,"evaluations":9.0,"distances_sum":3026.356851179554}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.979464285714286,"seconds":6.726011633872986e-6,"exhaustive_search_seconds":1.7508864402770996e-6,"evaluations":9.0,"distances_sum":3026.356851179554}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.201171875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.201171875,"f1":null,"seconds":3.4347176551818848e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":5.7265625,"distances_sum":475.8442905210824}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4189453125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4189453125,"f1":null,"seconds":4.04752790927887e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.5390625,"distances_sum":928.9712991991785}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5771484375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5771484375,"f1":0.7194088897213903,"seconds":5.15766441822052e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.0859375,"distances_sum":1311.1341748538964}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5771484375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5771484375,"f1":0.7194088897213903,"seconds":5.15766441822052e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.0859375,"distances_sum":1311.1341748538964}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.814453125,"f1":0.8906624625374633,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.4375,"distances_sum":2044.11760604926}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9515109890109896,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9375,"distances_sum":2380.437592991179}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8462443806193813,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.1875,"distances_sum":1823.3514220410977}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9515109890109896,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9375,"distances_sum":2380.437592991179}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9568509615384619,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9296875,"distances_sum":2398.813321490991}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9679174991674997,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.921875,"distances_sum":2507.5198334314236}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.961910485347986,"seconds":6.441026926040649e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9296875,"distances_sum":2454.062799367667}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9625572344322348,"seconds":6.143003702163696e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8828125,"distances_sum":2463.129974672426}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9679174991674997,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.921875,"distances_sum":2507.5198334314236}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9679174991674997,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.921875,"distances_sum":2507.5198334314236}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8732605935730943,"seconds":5.472451448440552e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.6484375,"distances_sum":1956.152047949307}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.71875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.71875,"f1":0.8263262778887787,"seconds":5.02169132232666e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.140625,"distances_sum":1765.509478049829}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5849609375, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5849609375,"f1":0.7243574134199141,"seconds":4.468485713005066e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.546875,"distances_sum":1365.9305352383788}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7880859375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7880859375,"f1":0.8732605935730943,"seconds":5.472451448440552e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.6484375,"distances_sum":1956.152047949307}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9594150641025645,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.96875,"distances_sum":2537.604192562489}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9027351121101129,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8984375,"distances_sum":2149.646584034256}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9594150641025645,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.96875,"distances_sum":2537.604192562489}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9760416666666669,"seconds":6.0480087995529175e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9921875,"distances_sum":2653.301830873774}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9760416666666669,"seconds":6.0480087995529175e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9921875,"distances_sum":2653.301830873774}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9760416666666669,"seconds":6.0480087995529175e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9921875,"distances_sum":2653.301830873774}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6953125,"f1":0.808826590076591,"seconds":4.6603381633758545e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.921875,"distances_sum":1664.3774488407046}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4658203125, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4658203125,"f1":null,"seconds":3.946945071220398e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.0390625,"distances_sum":1057.4584668529176}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6953125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6953125,"f1":0.808826590076591,"seconds":4.6603381633758545e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.921875,"distances_sum":1664.3774488407046}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8657222985347994,"seconds":5.276873707771301e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.3984375,"distances_sum":1882.9317146630426}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8973276723276733,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.6171875,"distances_sum":2064.3353984830587}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8620624167499176,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.296875,"distances_sum":1847.175630884418}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8251953125,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8251953125,"f1":0.8973276723276733,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.6171875,"distances_sum":2064.3353984830587}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.974776785714286,"seconds":5.939975380897522e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.90625,"distances_sum":2597.237877562291}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9312760156510164,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.75,"distances_sum":2270.129712160977}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9300340284715292,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.6640625,"distances_sum":2249.933884317093}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9374484890109896,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7421875,"distances_sum":2334.4513009010743}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9681604853479857,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.875,"distances_sum":2570.526212666823}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.974776785714286,"seconds":5.939975380897522e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.90625,"distances_sum":2597.237877562291}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.974776785714286,"seconds":5.939975380897522e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.90625,"distances_sum":2597.237877562291}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4072265625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4072265625,"f1":null,"seconds":3.634020686149597e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":6.0625,"distances_sum":900.4677455148773}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.7955018939393949,"seconds":4.775822162628174e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":7.546875,"distances_sum":1555.4846291667677}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.677734375,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.677734375,"f1":0.7955018939393949,"seconds":4.775822162628174e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":7.546875,"distances_sum":1555.4846291667677}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9473099816849821,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8125,"distances_sum":2434.3418248358525}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9473099816849821,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8125,"distances_sum":2434.3418248358525}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9614983974358979,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.84375,"distances_sum":2547.215508529892}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96875, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.96875,"f1":0.983184523809524,"seconds":6.020069122314453e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.921875,"distances_sum":2688.5671476760012}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96875,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.96875,"f1":0.983184523809524,"seconds":6.020069122314453e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.921875,"distances_sum":2688.5671476760012}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96875,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.96875,"f1":0.983184523809524,"seconds":6.020069122314453e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.921875,"distances_sum":2688.5671476760012}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3388671875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3388671875,"f1":null,"seconds":3.676861524581909e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":5.53125,"distances_sum":829.4170684685117}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3388671875,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3388671875,"f1":null,"seconds":3.676861524581909e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":5.53125,"distances_sum":829.4170684685117}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6552734375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6552734375,"f1":0.7771237443112452,"seconds":4.677101969718933e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":7.390625,"distances_sum":1650.2619707517497}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.53515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.53515625,"f1":0.6810987623487629,"seconds":4.291534423828125e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":6.6328125,"distances_sum":1324.924300321529}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8948379745254752,"seconds":5.247071385383606e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.2109375,"distances_sum":2167.400362587935}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8232421875,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.8232421875,"f1":0.8948379745254752,"seconds":5.247071385383606e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.2109375,"distances_sum":2167.400362587935}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.939592178654679,"seconds":6.018206477165222e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.6328125,"distances_sum":2477.302088816596}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9505666208791212,"seconds":5.595386028289795e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.7578125,"distances_sum":2529.336320188805}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9308379120879129,"seconds":6.550922989845276e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.6171875,"distances_sum":2386.135215835763}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9053030303030309,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.296875,"distances_sum":2206.3292900599026}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9505666208791212,"seconds":5.595386028289795e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.7578125,"distances_sum":2529.336320188805}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9130859375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9505666208791212,"seconds":5.595386028289795e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.7578125,"distances_sum":2529.336320188805}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.724609375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.724609375,"f1":0.8289229867354877,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.484375,"distances_sum":1738.9275034491136}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.724609375,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.724609375,"f1":0.8289229867354877,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.484375,"distances_sum":1738.9275034491136}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8614390817515827,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.5078125,"distances_sum":1871.1984265692959}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9261821511821519,"seconds":6.388872861862183e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.9140625,"distances_sum":2188.143310656083}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8716122419247428,"seconds":6.224960088729858e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.5625,"distances_sum":1926.6629938872513}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8627643190143199,"seconds":6.143003702163696e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.5859375,"distances_sum":1862.5472258359298}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8720703125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8720703125,"f1":0.9261821511821519,"seconds":6.388872861862183e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.9140625,"distances_sum":2188.143310656083}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.959249084249085,"seconds":6.737187504768372e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.953125,"distances_sum":2421.6879153069685}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9658367673992678,"seconds":7.074326276779175e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.953125,"distances_sum":2474.0055913637243}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9782222985347988,"seconds":7.0873647928237915e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.9765625,"distances_sum":2556.400548602376}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9450466200466204,"seconds":6.843358278274536e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.8671875,"distances_sum":2345.378297832454}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9697573260073264,"seconds":7.070600986480713e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.9921875,"distances_sum":2482.9039762483826}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9782222985347988,"seconds":7.0873647928237915e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.9765625,"distances_sum":2556.400548602376}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9782222985347988,"seconds":7.0873647928237915e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.9765625,"distances_sum":2556.400548602376}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.208984375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.208984375,"f1":null,"seconds":3.6619603633880615e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":5.7578125,"distances_sum":513.4697149516708}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.435546875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.435546875,"f1":null,"seconds":4.479661583900452e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":6.59375,"distances_sum":975.624521108824}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.435546875,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.435546875,"f1":null,"seconds":4.479661583900452e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":6.59375,"distances_sum":975.624521108824}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8487018190143197,"seconds":6.18956983089447e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.2421875,"distances_sum":1822.8626659466818}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8970581501831509,"seconds":6.467103958129883e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.6171875,"distances_sum":2031.350224591452}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8212890625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8212890625,"f1":0.8970581501831509,"seconds":6.467103958129883e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.6171875,"distances_sum":2031.350224591452}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9371368215118223,"seconds":6.616115570068359e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.7578125,"distances_sum":2343.7993364396452}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9600675366300372,"seconds":6.6533684730529785e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.875,"distances_sum":2522.288098544869}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9600675366300372,"seconds":6.6533684730529785e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.875,"distances_sum":2522.288098544869}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9600675366300372,"seconds":6.6533684730529785e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.875,"distances_sum":2522.288098544869}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3974609375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3974609375,"f1":null,"seconds":4.466623067855835e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":6.421875,"distances_sum":965.3820991903708}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.201171875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.201171875,"f1":null,"seconds":3.6619603633880615e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":5.4609375,"distances_sum":555.0730477786782}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3837890625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3837890625,"f1":null,"seconds":4.256144165992737e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":6.1796875,"distances_sum":927.7321951697669}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3974609375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3974609375,"f1":null,"seconds":4.466623067855835e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":6.421875,"distances_sum":965.3820991903708}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7138671875, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.7138671875,"f1":0.8181110556110563,"seconds":4.902482032775879e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":7.9921875,"distances_sum":1781.8425745052064}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8017578125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.8017578125,"f1":0.8812702922077928,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.3515625,"distances_sum":2070.1920359187666}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.794921875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.794921875,"f1":0.8748204920079927,"seconds":5.377456545829773e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.296875,"distances_sum":2060.9537011355374}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8017578125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.8017578125,"f1":0.8812702922077928,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.3515625,"distances_sum":2070.1920359187666}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9444654304029311,"seconds":5.792826414108276e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.7734375,"distances_sum":2471.4294167860644}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9481456043956049,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.765625,"distances_sum":2504.64068979928}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9397206959706965,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.765625,"distances_sum":2444.0530823416034}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9410084706959712,"seconds":5.668029189109802e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.7265625,"distances_sum":2425.6527631094086}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9481456043956049,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.765625,"distances_sum":2504.64068979928}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.908203125,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9481456043956049,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.765625,"distances_sum":2504.64068979928}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.697265625, conf: {"ssize":1,"bsize":4}, perf: {"precision":0.9921130952380952,"recall":0.697265625,"f1":0.809427031302032,"seconds":4.773959517478943e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.03125,"distances_sum":1331.1175363489979}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4130859375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4130859375,"f1":null,"seconds":3.7904828786849976e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.90625,"distances_sum":683.7600542400403}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.697265625,"state":{"ssize":1,"bsize":4},"perf":{"precision":0.9921130952380952,"recall":0.697265625,"f1":0.809427031302032,"seconds":4.773959517478943e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.03125,"distances_sum":1331.1175363489979}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":2,"bsize":5}, perf: {"precision":0.986830357142857,"recall":0.775390625,"f1":0.8606189383533142,"seconds":5.112960934638977e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.1171875,"distances_sum":1613.862495714913}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9907366071428572,"recall":0.7705078125,"f1":0.8579174731518491,"seconds":5.00120222568512e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.0859375,"distances_sum":1597.3908439783606}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.70703125, conf: {"ssize":4,"bsize":4}, perf: {"precision":0.9890438988095237,"recall":0.70703125,"f1":0.8135377643190153,"seconds":4.760921001434326e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.0234375,"distances_sum":1397.184988109318}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":2,"bsize":5},"perf":{"precision":0.986830357142857,"recall":0.775390625,"f1":0.8606189383533142,"seconds":5.112960934638977e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.1171875,"distances_sum":1613.862495714913}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":5,"bsize":7}, perf: {"precision":0.991303943452381,"recall":0.8759765625,"f1":0.92429673191392,"seconds":5.68293035030365e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8515625,"distances_sum":1926.1267936621844}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":2,"bsize":8}, perf: {"precision":0.9871186755952381,"recall":0.9091796875,"f1":0.9430598698176826,"seconds":5.997717380523682e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9140625,"distances_sum":2076.8050149817263}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":0.9896949404761904,"recall":0.91796875,"f1":0.9498254349816853,"seconds":5.833804607391357e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.90625,"distances_sum":2096.4638590405416}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":1,"bsize":6}, perf: {"precision":0.9953497023809524,"recall":0.8671875,"f1":0.9223302738927743,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.5859375,"distances_sum":1923.2032439212005}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":6,"bsize":6}, perf: {"precision":0.986328125,"recall":0.837890625,"f1":0.9012963598901104,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.5,"distances_sum":1823.321872069449}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":4,"bsize":6}, perf: {"precision":0.9920014880952381,"recall":0.841796875,"f1":0.9049398518148527,"seconds":5.610287189483643e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.4609375,"distances_sum":1818.1955845378068}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":0.9896949404761904,"recall":0.91796875,"f1":0.9498254349816853,"seconds":5.833804607391357e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.90625,"distances_sum":2096.4638590405416}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":0.9896949404761904,"recall":0.91796875,"f1":0.9498254349816853,"seconds":5.833804607391357e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.90625,"distances_sum":2096.4638590405416}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.65625,"f1":0.7791690947940955,"seconds":4.6584755182266235e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.8359375,"distances_sum":1408.2331471244468}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65234375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.65234375,"f1":0.7744359806859814,"seconds":4.621222615242004e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.796875,"distances_sum":1384.5646039954577}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.65625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.65625,"f1":0.7791690947940955,"seconds":4.6584755182266235e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.8359375,"distances_sum":1408.2331471244468}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9477964743589748,"seconds":5.539506673812866e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.7890625,"distances_sum":2246.848346088297}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.80518491924742,"seconds":4.61190938949585e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.0234375,"distances_sum":1498.9844884090387}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.949192994505495,"seconds":5.563721060752869e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8515625,"distances_sum":2237.1346223111354}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.949192994505495,"seconds":5.563721060752869e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8515625,"distances_sum":2237.1346223111354}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9495592948717954,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.859375,"distances_sum":2227.842011023138}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.956478937728938,"seconds":5.8747828006744385e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8359375,"distances_sum":2276.0186905228607}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.973031135531136,"seconds":6.32554292678833e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.90625,"distances_sum":2389.8004906129486}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9636020229770235,"seconds":5.3532421588897705e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.90625,"distances_sum":2313.863483347399}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.973031135531136,"seconds":6.32554292678833e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.90625,"distances_sum":2389.8004906129486}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.973031135531136,"seconds":6.32554292678833e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.90625,"distances_sum":2389.8004906129486}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5556640625, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5556640625,"f1":0.6935784701409705,"seconds":4.425644874572754e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.5703125,"distances_sum":1183.4540659513948}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.79296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.79296875,"f1":0.8731423090798098,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.34375,"distances_sum":1878.1481904694715}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.79296875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.79296875,"f1":0.8731423090798098,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.34375,"distances_sum":1878.1481904694715}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9644173534798539,"seconds":6.094574928283691e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8671875,"distances_sum":2442.0780078513976}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9665579212454215,"seconds":5.995854735374451e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8984375,"distances_sum":2435.63076547195}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9555460164835169,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.875,"distances_sum":2361.6701476342387}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9048196595071601,"seconds":5.4370611906051636e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.5625,"distances_sum":2079.6066598690136}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9665579212454215,"seconds":5.995854735374451e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8984375,"distances_sum":2435.63076547195}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.970703125, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.970703125,"f1":0.9840029761904766,"seconds":6.3925981521606445e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9765625,"distances_sum":2562.3049664862297}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9763221153846158,"seconds":6.334856152534485e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9765625,"distances_sum":2503.655560223782}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9748740842490845,"seconds":6.297603249549866e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9296875,"distances_sum":2506.9620204994535}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9709478021978024,"seconds":6.213784217834473e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.90625,"distances_sum":2460.840058821557}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.970703125,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.9840029761904766,"seconds":6.3925981521606445e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9765625,"distances_sum":2562.3049664862297}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.970703125,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.9840029761904766,"seconds":6.3925981521606445e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9765625,"distances_sum":2562.3049664862297}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2353515625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2353515625,"f1":null,"seconds":4.12575900554657e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":6.8984375,"distances_sum":526.2107742337666}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3896484375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3896484375,"f1":null,"seconds":3.976747393608093e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.0078125,"distances_sum":794.7216051016336}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.568359375,"f1":0.7103887432012438,"seconds":4.582107067108154e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.0546875,"distances_sum":1221.214166510372}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.568359375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.568359375,"f1":0.7103887432012438,"seconds":4.582107067108154e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.0546875,"distances_sum":1221.214166510372}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.689453125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.689453125,"f1":0.8062890234765243,"seconds":5.06080687046051e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.2265625,"distances_sum":1541.5958464199045}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7041015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7041015625,"f1":0.8148188616938625,"seconds":5.0496309995651245e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.2578125,"distances_sum":1607.0474754302857}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9094468031968039,"seconds":6.46151602268219e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.640625,"distances_sum":2120.410825039496}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8737215909090916,"seconds":5.476176738739014e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.4609375,"distances_sum":1905.4960578235214}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.845703125,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.845703125,"f1":0.9094468031968039,"seconds":6.46151602268219e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.640625,"distances_sum":2120.410825039496}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9328072968697975,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8125,"distances_sum":2261.3308026207606}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9344582500832509,"seconds":6.621703505516052e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.7890625,"distances_sum":2260.851072133696}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9553628663003672,"seconds":6.077811121940613e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.84375,"distances_sum":2407.2945445021705}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9557577838827844,"seconds":6.210058927536011e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8671875,"distances_sum":2403.2540150054833}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9258127289377294,"seconds":5.679205060005188e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.7421875,"distances_sum":2184.4630662662535}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9559237637362641,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.890625,"distances_sum":2394.918818261624}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9557577838827844,"seconds":6.210058927536011e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8671875,"distances_sum":2403.2540150054833}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.921875,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9557577838827844,"seconds":6.210058927536011e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8671875,"distances_sum":2403.2540150054833}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1533203125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1533203125,"f1":null,"seconds":2.9001384973526e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":4.53125,"distances_sum":354.55226680364353}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8433046120546128,"seconds":5.21540641784668e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":7.9140625,"distances_sum":1963.8632856741608}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.74609375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.74609375,"f1":0.8433046120546128,"seconds":5.21540641784668e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":7.9140625,"distances_sum":1963.8632856741608}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.8815684315684323,"seconds":5.446374416351318e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.3125,"distances_sum":2100.648112554688}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9472189269064273,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.7734375,"distances_sum":2475.5561314058928}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9279418498168506,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.6640625,"distances_sum":2343.7371885338075}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9472189269064273,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.7734375,"distances_sum":2475.5561314058928}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":4,"bsize":13}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9784626831501837,"seconds":6.122514605522156e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.953125,"distances_sum":2641.207071111303}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9646634615384619,"seconds":5.7015568017959595e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.828125,"distances_sum":2596.5703202679592}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9589202464202468,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.8203125,"distances_sum":2542.343593731117}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.962505723443224,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.8515625,"distances_sum":2557.9198240607525}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9784626831501837,"seconds":6.122514605522156e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.953125,"distances_sum":2641.207071111303}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9784626831501837,"seconds":6.122514605522156e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.953125,"distances_sum":2641.207071111303}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.150390625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.150390625,"f1":null,"seconds":2.9578804969787598e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":4.5703125,"distances_sum":375.049774406374}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6357421875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6357421875,"f1":0.7592581030081038,"seconds":4.708766937255859e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.640625,"distances_sum":1550.182129463615}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3359375,"f1":null,"seconds":3.6675482988357544e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":5.4453125,"distances_sum":822.8676970864636}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6357421875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6357421875,"f1":0.7592581030081038,"seconds":4.708766937255859e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.640625,"distances_sum":1550.182129463615}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9273502539127544,"seconds":6.113201379776001e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7109375,"distances_sum":2315.019684212755}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.650390625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.650390625,"f1":0.7740757506382514,"seconds":5.077570676803589e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.65625,"distances_sum":1594.4967751777217}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8501384032634041,"seconds":5.4817646741867065e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.3046875,"distances_sum":1880.7137507495386}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8462776806526815,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.28125,"distances_sum":1858.847635451955}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87890625,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.87890625,"f1":0.9273502539127544,"seconds":6.113201379776001e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7109375,"distances_sum":2315.019684212755}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9615613553113558,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.890625,"distances_sum":2489.3786900824666}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9660542582417588,"seconds":6.094574928283691e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.9453125,"distances_sum":2507.2327496066364}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9348505661005665,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.6328125,"distances_sum":2376.120329374789}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9331590284715289,"seconds":5.925074219703674e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.6953125,"distances_sum":2332.9316775716134}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9373054029304035,"seconds":6.977468729019165e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.828125,"distances_sum":2313.4346686154563}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9482600732600738,"seconds":7.169321179389954e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.796875,"distances_sum":2443.7398724490504}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9401156135531142,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8125,"distances_sum":2358.770145408529}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9660542582417588,"seconds":6.094574928283691e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.9453125,"distances_sum":2507.2327496066364}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9660542582417588,"seconds":6.094574928283691e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.9453125,"distances_sum":2507.2327496066364}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1884765625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1884765625,"f1":null,"seconds":3.3471733331680298e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":4.890625,"distances_sum":436.0969712344588}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1884765625,"state":{"ssize":4,"bsize":1},"perf":{"precision":null,"recall":0.1884765625,"f1":null,"seconds":3.3471733331680298e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":4.890625,"distances_sum":436.0969712344588}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5068359375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5068359375,"f1":0.6597721722721729,"seconds":4.28222119808197e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.3671875,"distances_sum":1206.070644857041}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5068359375,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.5068359375,"f1":0.6597721722721729,"seconds":4.28222119808197e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.3671875,"distances_sum":1206.070644857041}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8662831959706968,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.1015625,"distances_sum":1951.9610174601598}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5205078125, conf: {"ssize":9,"bsize":3}, perf: {"precision":1.0,"recall":0.5205078125,"f1":0.6683148448773454,"seconds":4.218891263008118e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.46875,"distances_sum":1252.47673394181}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.77734375,"state":{"ssize":6,"bsize":5},"perf":{"precision":1.0,"recall":0.77734375,"f1":0.8662831959706968,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.1015625,"distances_sum":1951.9610174601598}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.77734375,"state":{"ssize":6,"bsize":5},"perf":{"precision":1.0,"recall":0.77734375,"f1":0.8662831959706968,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.1015625,"distances_sum":1951.9610174601598}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8652222777222784,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.0546875,"distances_sum":1781.6970881903715}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4365234375, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.4365234375,"f1":0.5769320956820957,"seconds":3.98978590965271e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.390625,"distances_sum":939.5492534512418}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2763671875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2763671875,"f1":null,"seconds":3.8389116525650024e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.8203125,"distances_sum":638.6474510869838}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.7975170662670671,"seconds":4.893168807029724e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.640625,"distances_sum":1459.7883156291991}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7724609375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7724609375,"f1":0.8652222777222784,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.0546875,"distances_sum":1781.6970881903715}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9596211080586083,"seconds":6.800517439842224e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9140625,"distances_sum":2409.277159305916}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9344780219780225,"seconds":5.992129445075989e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.828125,"distances_sum":2217.944072540794}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.893080357142858,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.328125,"distances_sum":1925.689465223834}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9596211080586083,"seconds":6.800517439842224e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9140625,"distances_sum":2409.277159305916}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9703182234432238,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9296875,"distances_sum":2494.0278016208813}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9703182234432238,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9296875,"distances_sum":2494.0278016208813}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9703182234432238,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9296875,"distances_sum":2494.0278016208813}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.212890625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.212890625,"f1":null,"seconds":3.1478703022003174e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":5.1171875,"distances_sum":459.9219989160335}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7966016622266628,"seconds":6.640329957008362e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":7.796875,"distances_sum":1599.6846676978737}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6806640625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6806640625,"f1":0.7966016622266628,"seconds":6.640329957008362e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":7.796875,"distances_sum":1599.6846676978737}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9360436438561442,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.7109375,"distances_sum":2377.253218057641}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8896484375,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.8896484375,"f1":0.9360436438561442,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.7109375,"distances_sum":2377.253218057641}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9628376831501837,"seconds":7.899478077888489e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.875,"distances_sum":2577.756141989826}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9525932400932405,"seconds":5.427747964859009e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.7734375,"distances_sum":2525.2422518129174}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9625400641025643,"seconds":5.6978315114974976e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.8359375,"distances_sum":2595.3813661867707}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9628376831501837,"seconds":7.899478077888489e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.875,"distances_sum":2577.756141989826}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9628376831501837,"seconds":7.899478077888489e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.875,"distances_sum":2577.756141989826}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4951171875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.4951171875,"f1":0.6473061660561665,"seconds":3.9637088775634766e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":6.3828125,"distances_sum":1142.4362663848467}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.31640625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.31640625,"f1":null,"seconds":3.0621886253356934e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":4.703125,"distances_sum":823.096590561081}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4951171875,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.4951171875,"f1":0.6473061660561665,"seconds":3.9637088775634766e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":6.3828125,"distances_sum":1142.4362663848467}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9332334332334341,"seconds":5.448237061500549e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.734375,"distances_sum":2303.3523490975385}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8676635864135872,"seconds":5.513429641723633e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.28125,"distances_sum":1874.9440759182485}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5107421875, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5107421875,"f1":0.6589714105339111,"seconds":4.587695002555847e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":6.4609375,"distances_sum":1235.1826096540244}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9095371642246649,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.53125,"distances_sum":2123.913243321875}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8837890625,"state":{"ssize":8,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9332334332334341,"seconds":5.448237061500549e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.734375,"distances_sum":2303.3523490975385}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9668383699633705,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.859375,"distances_sum":2541.8150505150165}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9452667124542129,"seconds":5.401670932769775e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.6875,"distances_sum":2429.353249836274}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9338343947718954,"seconds":5.463138222694397e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.6875,"distances_sum":2332.5769347013816}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9485233516483526,"seconds":6.3050538301467896e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.7421875,"distances_sum":2441.067628071247}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9675423534798537,"seconds":5.8747828006744385e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.9296875,"distances_sum":2532.5411126365893}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9415064102564109,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.7734375,"distances_sum":2341.480557585679}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9675423534798537,"seconds":5.8747828006744385e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.9296875,"distances_sum":2532.5411126365893}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9675423534798537,"seconds":5.8747828006744385e-6,"exhaustive_search_seconds":1.125037670135498e-6,"evaluations":8.9296875,"distances_sum":2532.5411126365893}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.51953125, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.51953125,"f1":0.6670147560772565,"seconds":3.762543201446533e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":6.1171875,"distances_sum":1157.2541696867731}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5380859375, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.5380859375,"f1":null,"seconds":3.945082426071167e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":6.2265625,"distances_sum":1126.963355831465}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5380859375,"state":{"ssize":4,"bsize":3},"perf":{"precision":null,"recall":0.5380859375,"f1":null,"seconds":3.945082426071167e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":6.2265625,"distances_sum":1126.963355831465}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7911822552447562,"seconds":4.5746564865112305e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.296875,"distances_sum":1534.751523605163}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73046875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.73046875,"f1":0.8305425477300483,"seconds":4.82611358165741e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.515625,"distances_sum":1643.0495067095005}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8591497044622052,"seconds":5.0533562898635864e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.7578125,"distances_sum":1826.2764587057954}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7666015625,"state":{"ssize":7,"bsize":5},"perf":{"precision":1.0,"recall":0.7666015625,"f1":0.8591497044622052,"seconds":5.0533562898635864e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.7578125,"distances_sum":1826.2764587057954}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9248772061272065,"seconds":5.418434739112854e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.5390625,"distances_sum":2312.758131100296}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9320398351648361,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.5390625,"distances_sum":2314.9201701203087}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9216491841491847,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.4609375,"distances_sum":2259.442426748342}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9277644230769236,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.5078125,"distances_sum":2310.4475489007423}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.880859375,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.880859375,"f1":0.9320398351648361,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.5390625,"distances_sum":2314.9201701203087}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.880859375,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.880859375,"f1":0.9320398351648361,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.5390625,"distances_sum":2314.9201701203087}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.40625, conf: {"ssize":2,"bsize":2}, perf: {"precision":1.0,"recall":0.40625,"f1":0.5578532578532581,"seconds":3.509223461151123e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.046875,"distances_sum":918.5067640721257}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2353515625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2353515625,"f1":null,"seconds":3.026798367500305e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":5.546875,"distances_sum":541.7544935469153}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.40625,"state":{"ssize":2,"bsize":2},"perf":{"precision":1.0,"recall":0.40625,"f1":0.5578532578532581,"seconds":3.509223461151123e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.046875,"distances_sum":918.5067640721257}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9118818681318689,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.484375,"distances_sum":2128.536636005449}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8727371586746593,"seconds":4.986301064491272e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.2421875,"distances_sum":1902.5265967153014}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6689453125, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6689453125,"f1":0.7885602244977252,"seconds":4.7050416469573975e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.9453125,"distances_sum":1454.0555928408633}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8466796875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8466796875,"f1":0.9118818681318689,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.484375,"distances_sum":2128.536636005449}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9632097069597073,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.828125,"distances_sum":2505.8984903460682}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9605711996337002,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.796875,"distances_sum":2492.328087820956}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9146005036630046,"seconds":5.563721060752869e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.4765625,"distances_sum":2124.2353450477667}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9632097069597073,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.828125,"distances_sum":2505.8984903460682}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9345703125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9632097069597073,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.828125,"distances_sum":2505.8984903460682}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.275390625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.275390625,"f1":null,"seconds":3.3490359783172607e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":6.2734375,"distances_sum":541.9129517362024}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8526815198690207,"seconds":5.342066287994385e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.3125,"distances_sum":1849.9679332289988}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6064453125, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.6064453125,"f1":null,"seconds":4.263594746589661e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.171875,"distances_sum":1354.9743593884211}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7607421875,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7607421875,"f1":0.8526815198690207,"seconds":5.342066287994385e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.3125,"distances_sum":1849.9679332289988}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9510874542124547,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8046875,"distances_sum":2468.277472593575}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9418586621711627,"seconds":5.3960829973220825e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.7578125,"distances_sum":2371.560242702952}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9510874542124547,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8046875,"distances_sum":2468.277472593575}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9661687271062275,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8515625,"distances_sum":2581.2882715730966}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9622996794871798,"seconds":5.971640348434448e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8984375,"distances_sum":2502.6156136710074}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9575377747252753,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8828125,"distances_sum":2471.7042372229557}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9565736346986352,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.859375,"distances_sum":2513.478252671132}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":10,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9661687271062275,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8515625,"distances_sum":2581.2882715730966}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":10,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9661687271062275,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8515625,"distances_sum":2581.2882715730966}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8470872877122884,"seconds":1.0576099157333374e-5,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.390625,"distances_sum":1724.4381088074826}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6845703125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6845703125,"f1":0.800843774281275,"seconds":5.112960934638977e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.25,"distances_sum":1534.1662483084124}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5810546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5810546875,"f1":0.712464098401599,"seconds":4.481524229049683e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.1953125,"distances_sum":1260.2927285344658}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7470703125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7470703125,"f1":0.8470872877122884,"seconds":1.0576099157333374e-5,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.390625,"distances_sum":1724.4381088074826}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.9154137529137536,"seconds":6.303191184997559e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.671875,"distances_sum":2130.1931696489883}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.9028622419247428,"seconds":6.027519702911377e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.71875,"distances_sum":2041.108812240135}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9055777555777565,"seconds":6.0033053159713745e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.6328125,"distances_sum":2060.5472355923}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9451496420246427,"seconds":7.050111889839172e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.828125,"distances_sum":2352.321673076179}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9397626678876687,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7890625,"distances_sum":2318.269827521277}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9033203125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.9451496420246427,"seconds":7.050111889839172e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.828125,"distances_sum":2352.321673076179}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9693681318681322,"seconds":6.467103958129883e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8984375,"distances_sum":2565.133362125458}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9577812812187817,"seconds":6.366521120071411e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.859375,"distances_sum":2480.0266891313872}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9703869047619054,"seconds":6.575137376785278e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9296875,"distances_sum":2531.1632626360906}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9639194139194144,"seconds":6.502494215965271e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9140625,"distances_sum":2495.044790972657}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9625228937728944,"seconds":6.414949893951416e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.875,"distances_sum":2489.9461085153807}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9703869047619054,"seconds":6.575137376785278e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9296875,"distances_sum":2531.1632626360906}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9703869047619054,"seconds":6.575137376785278e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9296875,"distances_sum":2531.1632626360906}}, n: 9
mean(cfft.distances) = 0.32520933710523026
mean(cdnet.distances) = 0.4030187214157814
mean(crand.distances) = 0.33401383484441577
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.84
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.84
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8466666666666667
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333332
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8755555555555556
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9111111111111111
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.8844444444444445
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9444444444444445
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8466666666666667
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8888888888888888
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8911111111111111
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9044444444444445
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8933333333333332
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9177777777777778
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.931111111111111
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.928888888888889
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8444444444444444
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8755555555555556
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8888888888888888
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9111111111111111
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9177777777777778
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9444444444444443
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8888888888888888
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8888888888888888
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8977777777777778
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8733333333333334
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8577777777777778
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9066666666666667
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [28, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [28, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [28, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [28, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [28, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [28, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 1, 3]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [28, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 1, 3]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.5632636200884978] ***
*** center 1: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 17]]
** centroid: 8, normalized-entropy: 0.7024665512903904, [(2, 4), (3, 17)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 15 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.18603273126570782] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18603273126570782, 0.1515809900879681] ***
*** starting iteration: 2; err: [Inf, 0.18603273126570782, 0.1515809900879681] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18603273126570782, 0.1515809900879681, 0.14798705110902544] ***
*** starting iteration: 3; err: [Inf, 0.18603273126570782, 0.1515809900879681, 0.14798705110902544] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18603273126570782, 0.1515809900879681, 0.14798705110902544, 0.1464971637572847] ***
*** finished computation of 7 references, err: [Inf, 0.18603273126570782, 0.1515809900879681, 0.14798705110902544, 0.1464971637572847] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [89, 8, 0]]
** centroid: 1, normalized-entropy: 0.4108378385169277, [(1, 89), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 38, 0]]
** centroid: 2, normalized-entropy: 0.9414231081869789, [(1, 68), (2, 38)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [5, 73, 0]]
** centroid: 3, normalized-entropy: 0.34351974100740135, [(1, 5), (2, 73)]
*** center 4: selecting labels [1] (freq >= 2) [from [140, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 46, 29]]
** centroid: 7, normalized-entropy: 0.9626147059982517, [(2, 46), (3, 29)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23083377609411995] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23083377609411995, 0.1908821778956974] ***
*** starting iteration: 2; err: [Inf, 0.23083377609411995, 0.1908821778956974] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23083377609411995, 0.1908821778956974, 0.15422035047904528] ***
*** starting iteration: 3; err: [Inf, 0.23083377609411995, 0.1908821778956974, 0.15422035047904528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23083377609411995, 0.1908821778956974, 0.15422035047904528, 0.14819941992733232] ***
*** finished computation of 7 references, err: [Inf, 0.23083377609411995, 0.1908821778956974, 0.15422035047904528, 0.14819941992733232] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 72, 27]]
** centroid: 1, normalized-entropy: 0.8453509366224364, [(2, 72), (3, 27)]
*** center 2: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [1, 96, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [27, 67, 0]]
** centroid: 4, normalized-entropy: 0.8651214227512075, [(1, 27), (2, 67)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 13, 0]]
** centroid: 5, normalized-entropy: 0.7158259310602146, [(1, 53), (2, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [121, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [83, 10, 0]]
** centroid: 7, normalized-entropy: 0.49241092131589825, [(1, 83), (2, 10)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2655720837034475] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2655720837034475, 0.1781021239245771] ***
*** starting iteration: 2; err: [Inf, 0.2655720837034475, 0.1781021239245771] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2655720837034475, 0.1781021239245771, 0.15923874765338525] ***
*** starting iteration: 3; err: [Inf, 0.2655720837034475, 0.1781021239245771, 0.15923874765338525] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2655720837034475, 0.1781021239245771, 0.15923874765338525, 0.15321576203229367] ***
*** finished computation of 7 references, err: [Inf, 0.2655720837034475, 0.1781021239245771, 0.15923874765338525, 0.15321576203229367] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 13, 0]]
** centroid: 2, normalized-entropy: 0.6868088934028034, [(1, 58), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [99, 59, 0]]
** centroid: 3, normalized-entropy: 0.9532602083022296, [(1, 99), (2, 59)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [45, 41, 0]]
** centroid: 4, normalized-entropy: 0.9984389230256238, [(1, 45), (2, 41)]
*** center 5: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 80, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 63, 26]]
** centroid: 7, normalized-entropy: 0.8714630056611941, [(2, 63), (3, 26)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.41253418322406465] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41253418322406465, 0.3107387904782553] ***
*** starting iteration: 2; err: [Inf, 0.41253418322406465, 0.3107387904782553] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41253418322406465, 0.3107387904782553, 0.3088370964375769] ***
*** starting iteration: 3; err: [Inf, 0.41253418322406465, 0.3107387904782553, 0.3088370964375769] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41253418322406465, 0.3107387904782553, 0.3088370964375769, 0.3087530130766578] ***
*** finished computation of 3 references, err: [Inf, 0.41253418322406465, 0.3107387904782553, 0.3088370964375769, 0.3087530130766578] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [241, 15, 0]]
** centroid: 1, normalized-entropy: 0.32183715247832606, [(1, 241), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [155, 48, 0]]
** centroid: 2, normalized-entropy: 0.789092159292948, [(1, 155), (2, 48)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [1, 177, 29]]
** centroid: 3, normalized-entropy: 0.39594398706186773, [(1, 1), (2, 177), (3, 29)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4880701862108046] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4880701862108046, 0.36430104912120453] ***
*** starting iteration: 2; err: [Inf, 0.4880701862108046, 0.36430104912120453] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4880701862108046, 0.36430104912120453, 0.35223258738971497] ***
*** starting iteration: 3; err: [Inf, 0.4880701862108046, 0.36430104912120453, 0.35223258738971497] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4880701862108046, 0.36430104912120453, 0.35223258738971497, 0.34296191726410497] ***
*** starting iteration: 4; err: [Inf, 0.4880701862108046, 0.36430104912120453, 0.35223258738971497, 0.34296191726410497] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4880701862108046, 0.36430104912120453, 0.35223258738971497, 0.34296191726410497, 0.3385132337952482] ***
*** starting iteration: 5; err: [Inf, 0.4880701862108046, 0.36430104912120453, 0.35223258738971497, 0.34296191726410497, 0.3385132337952482] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4880701862108046, 0.36430104912120453, 0.35223258738971497, 0.34296191726410497, 0.3385132337952482, 0.3364056461550731] ***
*** starting iteration: 6; err: [Inf, 0.4880701862108046, 0.36430104912120453, 0.35223258738971497, 0.34296191726410497, 0.3385132337952482, 0.3364056461550731] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4880701862108046, 0.36430104912120453, 0.35223258738971497, 0.34296191726410497, 0.3385132337952482, 0.3364056461550731, 0.3348418492795914] ***
*** starting iteration: 7; err: [Inf, 0.4880701862108046, 0.36430104912120453, 0.35223258738971497, 0.34296191726410497, 0.3385132337952482, 0.3364056461550731, 0.3348418492795914] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4880701862108046, 0.36430104912120453, 0.35223258738971497, 0.34296191726410497, 0.3385132337952482, 0.3364056461550731, 0.3348418492795914, 0.33389261720431174] ***
*** finished computation of 3 references, err: [Inf, 0.4880701862108046, 0.36430104912120453, 0.35223258738971497, 0.34296191726410497, 0.3385132337952482, 0.3364056461550731, 0.3348418492795914, 0.33389261720431174] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [82, 137, 0]]
** centroid: 1, normalized-entropy: 0.9540123575725205, [(1, 82), (2, 137)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [246, 4, 0]]
** centroid: 2, normalized-entropy: 0.11835001140827515, [(1, 246), (2, 4)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [54, 117, 27]]
** centroid: 3, normalized-entropy: 0.8528196251894569, [(1, 54), (2, 117), (3, 27)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3311650429418062] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3311650429418062, 0.3198653142955126] ***
*** starting iteration: 2; err: [Inf, 0.3311650429418062, 0.3198653142955126] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3311650429418062, 0.3198653142955126, 0.31370864753126876] ***
*** starting iteration: 3; err: [Inf, 0.3311650429418062, 0.3198653142955126, 0.31370864753126876] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3311650429418062, 0.3198653142955126, 0.31370864753126876, 0.29015780950657677] ***
*** starting iteration: 4; err: [Inf, 0.3311650429418062, 0.3198653142955126, 0.31370864753126876, 0.29015780950657677] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3311650429418062, 0.3198653142955126, 0.31370864753126876, 0.29015780950657677, 0.2866695023810622] ***
*** starting iteration: 5; err: [Inf, 0.3311650429418062, 0.3198653142955126, 0.31370864753126876, 0.29015780950657677, 0.2866695023810622] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3311650429418062, 0.3198653142955126, 0.31370864753126876, 0.29015780950657677, 0.2866695023810622, 0.284977067353391] ***
*** starting iteration: 6; err: [Inf, 0.3311650429418062, 0.3198653142955126, 0.31370864753126876, 0.29015780950657677, 0.2866695023810622, 0.284977067353391] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3311650429418062, 0.3198653142955126, 0.31370864753126876, 0.29015780950657677, 0.2866695023810622, 0.284977067353391, 0.2844731777046306] ***
*** finished computation of 3 references, err: [Inf, 0.3311650429418062, 0.3198653142955126, 0.31370864753126876, 0.29015780950657677, 0.2866695023810622, 0.284977067353391, 0.2844731777046306] ***
*** center 1: selecting labels [1] (freq >= 1) [from [211, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [115, 101, 0]]
** centroid: 2, normalized-entropy: 0.9969675224572907, [(1, 115), (2, 101)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [59, 155, 26]]
** centroid: 3, normalized-entropy: 0.7901529936506458, [(1, 59), (2, 155), (3, 26)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37285500358756596] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37285500358756596, 0.317165666939439] ***
*** starting iteration: 2; err: [Inf, 0.37285500358756596, 0.317165666939439] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37285500358756596, 0.317165666939439, 0.3115193937281454] ***
*** starting iteration: 3; err: [Inf, 0.37285500358756596, 0.317165666939439, 0.3115193937281454] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37285500358756596, 0.317165666939439, 0.3115193937281454, 0.3103447938645566] ***
*** finished computation of 3 references, err: [Inf, 0.37285500358756596, 0.317165666939439, 0.3115193937281454, 0.3103447938645566] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [239, 11, 0]]
** centroid: 1, normalized-entropy: 0.2603406250124503, [(1, 239), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [154, 57, 0]]
** centroid: 2, normalized-entropy: 0.8416685817194832, [(1, 154), (2, 57)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [4, 172, 29]]
** centroid: 3, normalized-entropy: 0.4557911442892818, [(1, 4), (2, 172), (3, 29)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3557504395405571] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3557504395405571, 0.30393304472308846] ***
*** starting iteration: 2; err: [Inf, 0.3557504395405571, 0.30393304472308846] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3557504395405571, 0.30393304472308846, 0.2955899926187328] ***
*** starting iteration: 3; err: [Inf, 0.3557504395405571, 0.30393304472308846, 0.2955899926187328] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3557504395405571, 0.30393304472308846, 0.2955899926187328, 0.29420531896114727] ***
*** finished computation of 3 references, err: [Inf, 0.3557504395405571, 0.30393304472308846, 0.2955899926187328, 0.29420531896114727] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [130, 70, 0]]
** centroid: 1, normalized-entropy: 0.9340680553754911, [(1, 130), (2, 70)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [246, 2, 0]]
** centroid: 2, normalized-entropy: 0.06766982525198395, [(1, 246), (2, 2)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [6, 186, 27]]
** centroid: 3, normalized-entropy: 0.4508787934681739, [(1, 6), (2, 186), (3, 27)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6573012041254737] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6573012041254737, 0.3559228808575797] ***
*** starting iteration: 2; err: [Inf, 0.6573012041254737, 0.3559228808575797] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6573012041254737, 0.3559228808575797, 0.30996085448969696] ***
*** starting iteration: 3; err: [Inf, 0.6573012041254737, 0.3559228808575797, 0.30996085448969696] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6573012041254737, 0.3559228808575797, 0.30996085448969696, 0.29533012249441387] ***
*** finished computation of 3 references, err: [Inf, 0.6573012041254737, 0.3559228808575797, 0.30996085448969696, 0.29533012249441387] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [104, 152, 26]]
** centroid: 1, normalized-entropy: 0.8381327584808063, [(1, 104), (2, 152), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [205, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [76, 104, 0]]
** centroid: 3, normalized-entropy: 0.9824740868386409, [(1, 76), (2, 104)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.24030557127009416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24030557127009416, 0.20034259032631466] ***
*** starting iteration: 2; err: [Inf, 0.24030557127009416, 0.20034259032631466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24030557127009416, 0.20034259032631466, 0.19692030760065257] ***
*** starting iteration: 3; err: [Inf, 0.24030557127009416, 0.20034259032631466, 0.19692030760065257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24030557127009416, 0.20034259032631466, 0.19692030760065257, 0.19531955004896265] ***
*** finished computation of 7 references, err: [Inf, 0.24030557127009416, 0.20034259032631466, 0.19692030760065257, 0.19531955004896265] ***
*** center 1: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 51, 29]]
** centroid: 2, normalized-entropy: 0.9447388286467892, [(2, 51), (3, 29)]
*** center 3: selecting labels [1] (freq >= 2) [from [152, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [98, 3, 0]]
** centroid: 4, normalized-entropy: 0.192900074578984, [(1, 98), (2, 3)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [39, 81, 0]]
** centroid: 6, normalized-entropy: 0.9097361225311661, [(1, 39), (2, 81)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [40, 39, 0]]
** centroid: 7, normalized-entropy: 0.9998844148717589, [(1, 40), (2, 39)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2634968715098531] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2634968715098531, 0.21815972195622668] ***
*** starting iteration: 2; err: [Inf, 0.2634968715098531, 0.21815972195622668] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2634968715098531, 0.21815972195622668, 0.2006660150126673] ***
*** starting iteration: 3; err: [Inf, 0.2634968715098531, 0.21815972195622668, 0.2006660150126673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2634968715098531, 0.21815972195622668, 0.2006660150126673, 0.19271772598144019] ***
*** finished computation of 7 references, err: [Inf, 0.2634968715098531, 0.21815972195622668, 0.2006660150126673, 0.19271772598144019] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 98, 3]]
** centroid: 1, normalized-entropy: 0.192900074578984, [(2, 98), (3, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [122, 15, 0]]
** centroid: 2, normalized-entropy: 0.49837285583060054, [(1, 122), (2, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 12, 0]]
** centroid: 4, normalized-entropy: 0.6665783579949205, [(1, 57), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 41, 0]]
** centroid: 5, normalized-entropy: 0.9786961448300948, [(1, 29), (2, 41)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 92, 24]]
** centroid: 6, normalized-entropy: 0.7355085815538399, [(2, 92), (3, 24)]
*** center 7: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2463744110169484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2463744110169484, 0.20846599984685074] ***
*** starting iteration: 2; err: [Inf, 0.2463744110169484, 0.20846599984685074] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2463744110169484, 0.20846599984685074, 0.20279197539503072] ***
*** starting iteration: 3; err: [Inf, 0.2463744110169484, 0.20846599984685074, 0.20279197539503072] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2463744110169484, 0.20846599984685074, 0.20279197539503072, 0.2005670871334276] ***
*** finished computation of 7 references, err: [Inf, 0.2463744110169484, 0.20846599984685074, 0.20279197539503072, 0.2005670871334276] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [91, 54, 0]]
** centroid: 1, normalized-entropy: 0.952507452946599, [(1, 91), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [96, 27, 0]]
** centroid: 2, normalized-entropy: 0.7592757847892834, [(1, 96), (2, 27)]
*** center 3: selecting labels [1] (freq >= 2) [from [81, 1, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 75, 26]]
** centroid: 4, normalized-entropy: 0.8228368841492258, [(2, 75), (3, 26)]
*** center 5: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 99, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25909410709201974] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25909410709201974, 0.202314421193333] ***
*** starting iteration: 2; err: [Inf, 0.25909410709201974, 0.202314421193333] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25909410709201974, 0.202314421193333, 0.19781932941331687] ***
*** starting iteration: 3; err: [Inf, 0.25909410709201974, 0.202314421193333, 0.19781932941331687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25909410709201974, 0.202314421193333, 0.19781932941331687, 0.1965250112801544] ***
*** starting iteration: 4; err: [Inf, 0.25909410709201974, 0.202314421193333, 0.19781932941331687, 0.1965250112801544] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25909410709201974, 0.202314421193333, 0.19781932941331687, 0.1965250112801544, 0.1955311779204096] ***
*** finished computation of 7 references, err: [Inf, 0.25909410709201974, 0.202314421193333, 0.19781932941331687, 0.1965250112801544, 0.1955311779204096] ***
*** center 1: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [94, 10, 0]]
** centroid: 2, normalized-entropy: 0.45668363153944286, [(1, 94), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 82, 11]]
** centroid: 3, normalized-entropy: 0.5243952392403632, [(2, 82), (3, 11)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 78, 18]]
** centroid: 4, normalized-entropy: 0.6962122601251459, [(2, 78), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [79, 21, 0]]
** centroid: 5, normalized-entropy: 0.7414827399312738, [(1, 79), (2, 21)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [46, 45, 0]]
** centroid: 6, normalized-entropy: 0.999912889501356, [(1, 46), (2, 45)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [82, 4, 0]]
** centroid: 7, normalized-entropy: 0.2713895875081112, [(1, 82), (2, 4)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2903406729815581] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2903406729815581, 0.2167753558173061] ***
*** starting iteration: 2; err: [Inf, 0.2903406729815581, 0.2167753558173061] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2903406729815581, 0.2167753558173061, 0.20295130787626736] ***
*** starting iteration: 3; err: [Inf, 0.2903406729815581, 0.2167753558173061, 0.20295130787626736] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2903406729815581, 0.2167753558173061, 0.20295130787626736, 0.1975755890149964] ***
*** starting iteration: 4; err: [Inf, 0.2903406729815581, 0.2167753558173061, 0.20295130787626736, 0.1975755890149964] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2903406729815581, 0.2167753558173061, 0.20295130787626736, 0.1975755890149964, 0.1952979996258664] ***
*** starting iteration: 5; err: [Inf, 0.2903406729815581, 0.2167753558173061, 0.20295130787626736, 0.1975755890149964, 0.1952979996258664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2903406729815581, 0.2167753558173061, 0.20295130787626736, 0.1975755890149964, 0.1952979996258664, 0.19292888700029348] ***
*** starting iteration: 6; err: [Inf, 0.2903406729815581, 0.2167753558173061, 0.20295130787626736, 0.1975755890149964, 0.1952979996258664, 0.19292888700029348] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2903406729815581, 0.2167753558173061, 0.20295130787626736, 0.1975755890149964, 0.1952979996258664, 0.19292888700029348, 0.19071037955079478] ***
*** starting iteration: 7; err: [Inf, 0.2903406729815581, 0.2167753558173061, 0.20295130787626736, 0.1975755890149964, 0.1952979996258664, 0.19292888700029348, 0.19071037955079478] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2903406729815581, 0.2167753558173061, 0.20295130787626736, 0.1975755890149964, 0.1952979996258664, 0.19292888700029348, 0.19071037955079478, 0.18880180576243724] ***
*** starting iteration: 8; err: [Inf, 0.2903406729815581, 0.2167753558173061, 0.20295130787626736, 0.1975755890149964, 0.1952979996258664, 0.19292888700029348, 0.19071037955079478, 0.18880180576243724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2903406729815581, 0.2167753558173061, 0.20295130787626736, 0.1975755890149964, 0.1952979996258664, 0.19292888700029348, 0.19071037955079478, 0.18880180576243724, 0.18794967273928817] ***
*** finished computation of 7 references, err: [Inf, 0.2903406729815581, 0.2167753558173061, 0.20295130787626736, 0.1975755890149964, 0.1952979996258664, 0.19292888700029348, 0.19071037955079478, 0.18880180576243724, 0.18794967273928817] ***
*** center 1: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 86, 27]]
** centroid: 3, normalized-entropy: 0.7932698344258595, [(2, 86), (3, 27)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [69, 9, 0]]
** centroid: 4, normalized-entropy: 0.5159469300074472, [(1, 69), (2, 9)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 93, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [94, 42, 0]]
** centroid: 6, normalized-entropy: 0.8918107543797084, [(1, 94), (2, 42)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [71, 28, 0]]
** centroid: 7, normalized-entropy: 0.8592759806609698, [(1, 71), (2, 28)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23226590778516687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23226590778516687, 0.19822920198626315] ***
*** starting iteration: 2; err: [Inf, 0.23226590778516687, 0.19822920198626315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23226590778516687, 0.19822920198626315, 0.19155572183608918] ***
*** starting iteration: 3; err: [Inf, 0.23226590778516687, 0.19822920198626315, 0.19155572183608918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23226590778516687, 0.19822920198626315, 0.19155572183608918, 0.19052833179361012] ***
*** starting iteration: 4; err: [Inf, 0.23226590778516687, 0.19822920198626315, 0.19155572183608918, 0.19052833179361012] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23226590778516687, 0.19822920198626315, 0.19155572183608918, 0.19052833179361012, 0.1894014841783373] ***
*** starting iteration: 5; err: [Inf, 0.23226590778516687, 0.19822920198626315, 0.19155572183608918, 0.19052833179361012, 0.1894014841783373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23226590778516687, 0.19822920198626315, 0.19155572183608918, 0.19052833179361012, 0.1894014841783373, 0.18838477799895106] ***
*** starting iteration: 6; err: [Inf, 0.23226590778516687, 0.19822920198626315, 0.19155572183608918, 0.19052833179361012, 0.1894014841783373, 0.18838477799895106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23226590778516687, 0.19822920198626315, 0.19155572183608918, 0.19052833179361012, 0.1894014841783373, 0.18838477799895106, 0.18790977352020935] ***
*** finished computation of 7 references, err: [Inf, 0.23226590778516687, 0.19822920198626315, 0.19155572183608918, 0.19052833179361012, 0.1894014841783373, 0.18838477799895106, 0.18790977352020935] ***
*** center 1: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [36, 67, 0]]
** centroid: 2, normalized-entropy: 0.9336337717211408, [(1, 36), (2, 67)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 82, 26]]
** centroid: 3, normalized-entropy: 0.7962699368824384, [(2, 82), (3, 26)]
*** center 4: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [22, 66, 0]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(1, 22), (2, 66)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [76, 41, 0]]
** centroid: 7, normalized-entropy: 0.9344491365829435, [(1, 76), (2, 41)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5224063654902864] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5224063654902864, 0.33802406845317856] ***
*** starting iteration: 2; err: [Inf, 0.5224063654902864, 0.33802406845317856] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5224063654902864, 0.33802406845317856, 0.3016263207157811] ***
*** starting iteration: 3; err: [Inf, 0.5224063654902864, 0.33802406845317856, 0.3016263207157811] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5224063654902864, 0.33802406845317856, 0.3016263207157811, 0.2913331866205611] ***
*** starting iteration: 4; err: [Inf, 0.5224063654902864, 0.33802406845317856, 0.3016263207157811, 0.2913331866205611] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5224063654902864, 0.33802406845317856, 0.3016263207157811, 0.2913331866205611, 0.28933978501103214] ***
*** starting iteration: 5; err: [Inf, 0.5224063654902864, 0.33802406845317856, 0.3016263207157811, 0.2913331866205611, 0.28933978501103214] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5224063654902864, 0.33802406845317856, 0.3016263207157811, 0.2913331866205611, 0.28933978501103214, 0.28861073093270667] ***
*** finished computation of 3 references, err: [Inf, 0.5224063654902864, 0.33802406845317856, 0.3016263207157811, 0.2913331866205611, 0.28933978501103214, 0.28861073093270667] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [4, 162, 29]]
** centroid: 1, normalized-entropy: 0.4707456252247866, [(1, 4), (2, 162), (3, 29)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [150, 76, 0]]
** centroid: 2, normalized-entropy: 0.9212174819014947, [(1, 150), (2, 76)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [243, 2, 0]]
** centroid: 3, normalized-entropy: 0.06835451705887763, [(1, 243), (2, 2)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4049911771355004] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4049911771355004, 0.30352209692728754] ***
*** starting iteration: 2; err: [Inf, 0.4049911771355004, 0.30352209692728754] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4049911771355004, 0.30352209692728754, 0.3002194763039765] ***
*** starting iteration: 3; err: [Inf, 0.4049911771355004, 0.30352209692728754, 0.3002194763039765] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4049911771355004, 0.30352209692728754, 0.3002194763039765, 0.2995534856821867] ***
*** finished computation of 3 references, err: [Inf, 0.4049911771355004, 0.30352209692728754, 0.3002194763039765, 0.2995534856821867] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [71, 151, 27]]
** centroid: 1, normalized-entropy: 0.8210381556509077, [(1, 71), (2, 151), (3, 27)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [108, 107, 0]]
** centroid: 2, normalized-entropy: 0.9999843948053797, [(1, 108), (2, 107)]
*** center 3: selecting labels [1] (freq >= 1) [from [203, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.555616279033528] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.555616279033528, 0.3420338001174816] ***
*** starting iteration: 2; err: [Inf, 0.555616279033528, 0.3420338001174816] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.555616279033528, 0.3420338001174816, 0.3381841042005028] ***
*** starting iteration: 3; err: [Inf, 0.555616279033528, 0.3420338001174816, 0.3381841042005028] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.555616279033528, 0.3420338001174816, 0.3381841042005028, 0.3326547764230525] ***
*** starting iteration: 4; err: [Inf, 0.555616279033528, 0.3420338001174816, 0.3381841042005028, 0.3326547764230525] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.555616279033528, 0.3420338001174816, 0.3381841042005028, 0.3326547764230525, 0.32710582923808734] ***
*** starting iteration: 5; err: [Inf, 0.555616279033528, 0.3420338001174816, 0.3381841042005028, 0.3326547764230525, 0.32710582923808734] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.555616279033528, 0.3420338001174816, 0.3381841042005028, 0.3326547764230525, 0.32710582923808734, 0.3187298985041756] ***
*** starting iteration: 6; err: [Inf, 0.555616279033528, 0.3420338001174816, 0.3381841042005028, 0.3326547764230525, 0.32710582923808734, 0.3187298985041756] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.555616279033528, 0.3420338001174816, 0.3381841042005028, 0.3326547764230525, 0.32710582923808734, 0.3187298985041756, 0.3047912849819866] ***
*** starting iteration: 7; err: [Inf, 0.555616279033528, 0.3420338001174816, 0.3381841042005028, 0.3326547764230525, 0.32710582923808734, 0.3187298985041756, 0.3047912849819866] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.555616279033528, 0.3420338001174816, 0.3381841042005028, 0.3326547764230525, 0.32710582923808734, 0.3187298985041756, 0.3047912849819866, 0.289442621614097] ***
*** starting iteration: 8; err: [Inf, 0.555616279033528, 0.3420338001174816, 0.3381841042005028, 0.3326547764230525, 0.32710582923808734, 0.3187298985041756, 0.3047912849819866, 0.289442621614097] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.555616279033528, 0.3420338001174816, 0.3381841042005028, 0.3326547764230525, 0.32710582923808734, 0.3187298985041756, 0.3047912849819866, 0.289442621614097, 0.28903224809315875] ***
*** finished computation of 3 references, err: [Inf, 0.555616279033528, 0.3420338001174816, 0.3381841042005028, 0.3326547764230525, 0.32710582923808734, 0.3187298985041756, 0.3047912849819866, 0.289442621614097, 0.28903224809315875] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [103, 134, 26]]
** centroid: 1, normalized-entropy: 0.8551347334087729, [(1, 103), (2, 134), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [80, 122, 0]]
** centroid: 2, normalized-entropy: 0.9685867165455515, [(1, 80), (2, 122)]
*** center 3: selecting labels [1] (freq >= 1) [from [202, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4914112639845581] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4914112639845581, 0.37888698585474073] ***
*** starting iteration: 2; err: [Inf, 0.4914112639845581, 0.37888698585474073] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4914112639845581, 0.37888698585474073, 0.31870355738421996] ***
*** starting iteration: 3; err: [Inf, 0.4914112639845581, 0.37888698585474073, 0.31870355738421996] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4914112639845581, 0.37888698585474073, 0.31870355738421996, 0.3052593601906711] ***
*** starting iteration: 4; err: [Inf, 0.4914112639845581, 0.37888698585474073, 0.31870355738421996, 0.3052593601906711] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4914112639845581, 0.37888698585474073, 0.31870355738421996, 0.3052593601906711, 0.30077512667433276] ***
*** starting iteration: 5; err: [Inf, 0.4914112639845581, 0.37888698585474073, 0.31870355738421996, 0.3052593601906711, 0.30077512667433276] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4914112639845581, 0.37888698585474073, 0.31870355738421996, 0.3052593601906711, 0.30077512667433276, 0.29933759926149883] ***
*** starting iteration: 6; err: [Inf, 0.4914112639845581, 0.37888698585474073, 0.31870355738421996, 0.3052593601906711, 0.30077512667433276, 0.29933759926149883] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4914112639845581, 0.37888698585474073, 0.31870355738421996, 0.3052593601906711, 0.30077512667433276, 0.29933759926149883, 0.2990412896543786] ***
*** finished computation of 3 references, err: [Inf, 0.4914112639845581, 0.37888698585474073, 0.31870355738421996, 0.3052593601906711, 0.30077512667433276, 0.29933759926149883, 0.2990412896543786] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [102, 147, 29]]
** centroid: 1, normalized-entropy: 0.8561692921036278, [(1, 102), (2, 147), (3, 29)]
*** center 2: selecting labels [1] (freq >= 1) [from [206, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [89, 93, 0]]
** centroid: 3, normalized-entropy: 0.999651536962123, [(1, 89), (2, 93)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3582630658681425] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3582630658681425, 0.3085100747165975] ***
*** starting iteration: 2; err: [Inf, 0.3582630658681425, 0.3085100747165975] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3582630658681425, 0.3085100747165975, 0.2976421456563397] ***
*** starting iteration: 3; err: [Inf, 0.3582630658681425, 0.3085100747165975, 0.2976421456563397] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3582630658681425, 0.3085100747165975, 0.2976421456563397, 0.2946456947993638] ***
*** starting iteration: 4; err: [Inf, 0.3582630658681425, 0.3085100747165975, 0.2976421456563397, 0.2946456947993638] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3582630658681425, 0.3085100747165975, 0.2976421456563397, 0.2946456947993638, 0.2939861760805661] ***
*** finished computation of 3 references, err: [Inf, 0.3582630658681425, 0.3085100747165975, 0.2976421456563397, 0.2946456947993638, 0.2939861760805661] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [156, 47, 0]]
** centroid: 1, normalized-entropy: 0.7806638867843896, [(1, 156), (2, 47)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 201, 27]]
** centroid: 2, normalized-entropy: 0.524805134842907, [(2, 201), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [226, 10, 0]]
** centroid: 3, normalized-entropy: 0.2530679372656293, [(1, 226), (2, 10)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.42918942355923634] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42918942355923634, 0.31991724079723344] ***
*** starting iteration: 2; err: [Inf, 0.42918942355923634, 0.31991724079723344] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42918942355923634, 0.31991724079723344, 0.30701175948983334] ***
*** starting iteration: 3; err: [Inf, 0.42918942355923634, 0.31991724079723344, 0.30701175948983334] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42918942355923634, 0.31991724079723344, 0.30701175948983334, 0.30282979138471977] ***
*** starting iteration: 4; err: [Inf, 0.42918942355923634, 0.31991724079723344, 0.30701175948983334, 0.30282979138471977] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42918942355923634, 0.31991724079723344, 0.30701175948983334, 0.30282979138471977, 0.3018181529203276] ***
*** starting iteration: 5; err: [Inf, 0.42918942355923634, 0.31991724079723344, 0.30701175948983334, 0.30282979138471977, 0.3018181529203276] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42918942355923634, 0.31991724079723344, 0.30701175948983334, 0.30282979138471977, 0.3018181529203276, 0.30189319191335784] ***
*** finished computation of 3 references, err: [Inf, 0.42918942355923634, 0.31991724079723344, 0.30701175948983334, 0.30282979138471977, 0.3018181529203276, 0.30189319191335784] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 170, 26]]
** centroid: 1, normalized-entropy: 0.5646695797525669, [(2, 170), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [236, 24, 0]]
** centroid: 2, normalized-entropy: 0.4441260450795996, [(1, 236), (2, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [149, 62, 0]]
** centroid: 3, normalized-entropy: 0.873628663622596, [(1, 149), (2, 62)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.27904543926654096] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27904543926654096, 0.23343044504042235] ***
*** starting iteration: 2; err: [Inf, 0.27904543926654096, 0.23343044504042235] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27904543926654096, 0.23343044504042235, 0.22808896466619796] ***
*** starting iteration: 3; err: [Inf, 0.27904543926654096, 0.23343044504042235, 0.22808896466619796] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27904543926654096, 0.23343044504042235, 0.22808896466619796, 0.22725632880162727] ***
*** finished computation of 3 references, err: [Inf, 0.27904543926654096, 0.23343044504042235, 0.22808896466619796, 0.22725632880162727] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [134, 90, 0]]
** centroid: 1, normalized-entropy: 0.9719855908477281, [(1, 134), (2, 90)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [56, 150, 29]]
** centroid: 2, normalized-entropy: 0.8069601062451084, [(1, 56), (2, 150), (3, 29)]
*** center 3: selecting labels [1] (freq >= 2) [from [207, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2974084125206187] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2974084125206187, 0.24742650971754918] ***
*** starting iteration: 2; err: [Inf, 0.2974084125206187, 0.24742650971754918] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2974084125206187, 0.24742650971754918, 0.23934982266455798] ***
*** starting iteration: 3; err: [Inf, 0.2974084125206187, 0.24742650971754918, 0.23934982266455798] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2974084125206187, 0.24742650971754918, 0.23934982266455798, 0.23778746183891816] ***
*** starting iteration: 4; err: [Inf, 0.2974084125206187, 0.24742650971754918, 0.23934982266455798, 0.23778746183891816] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2974084125206187, 0.24742650971754918, 0.23934982266455798, 0.23778746183891816, 0.237133524965668] ***
*** finished computation of 3 references, err: [Inf, 0.2974084125206187, 0.24742650971754918, 0.23934982266455798, 0.23778746183891816, 0.237133524965668] ***
*** center 1: selecting labels [1] (freq >= 2) [from [190, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [103, 115, 1]]
** centroid: 2, normalized-entropy: 0.9978131772609874, [(1, 103), (2, 115)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [89, 143, 26]]
** centroid: 3, normalized-entropy: 0.8424216197995844, [(1, 89), (2, 143), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3257653799837921] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3257653799837921, 0.2823930956835885] ***
*** starting iteration: 2; err: [Inf, 0.3257653799837921, 0.2823930956835885] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3257653799837921, 0.2823930956835885, 0.26657877735949975] ***
*** starting iteration: 3; err: [Inf, 0.3257653799837921, 0.2823930956835885, 0.26657877735949975] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3257653799837921, 0.2823930956835885, 0.26657877735949975, 0.23722423103985668] ***
*** starting iteration: 4; err: [Inf, 0.3257653799837921, 0.2823930956835885, 0.26657877735949975, 0.23722423103985668] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3257653799837921, 0.2823930956835885, 0.26657877735949975, 0.23722423103985668, 0.23021137210047585] ***
*** starting iteration: 5; err: [Inf, 0.3257653799837921, 0.2823930956835885, 0.26657877735949975, 0.23722423103985668, 0.23021137210047585] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3257653799837921, 0.2823930956835885, 0.26657877735949975, 0.23722423103985668, 0.23021137210047585, 0.22895511758949738] ***
*** starting iteration: 6; err: [Inf, 0.3257653799837921, 0.2823930956835885, 0.26657877735949975, 0.23722423103985668, 0.23021137210047585, 0.22895511758949738] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3257653799837921, 0.2823930956835885, 0.26657877735949975, 0.23722423103985668, 0.23021137210047585, 0.22895511758949738, 0.22810715528950654] ***
*** finished computation of 3 references, err: [Inf, 0.3257653799837921, 0.2823930956835885, 0.26657877735949975, 0.23722423103985668, 0.23021137210047585, 0.22895511758949738, 0.22810715528950654] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [107, 126, 11]]
** centroid: 1, normalized-entropy: 0.7668690628624063, [(1, 107), (2, 126), (3, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [194, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [84, 130, 15]]
** centroid: 3, normalized-entropy: 0.7899346018649108, [(1, 84), (2, 130), (3, 15)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.19174925442896895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19174925442896895, 0.15673420827572904] ***
*** finished computation of 7 references, err: [Inf, 0.19174925442896895, 0.15673420827572904] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [56, 53, 0]]
** centroid: 1, normalized-entropy: 0.9994535015927487, [(1, 56), (2, 53)]
*** center 2: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 78, 29]]
** centroid: 4, normalized-entropy: 0.8429359403268015, [(2, 78), (3, 29)]
*** center 5: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [21, 87, 0]]
** centroid: 6, normalized-entropy: 0.710676853856123, [(1, 21), (2, 87)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [122, 22, 0]]
** centroid: 7, normalized-entropy: 0.6167482598263911, [(1, 122), (2, 22)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20209516650777887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20209516650777887, 0.16832723719175385] ***
*** finished computation of 7 references, err: [Inf, 0.20209516650777887, 0.16832723719175385] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 86, 9]]
** centroid: 1, normalized-entropy: 0.4520861986745138, [(2, 86), (3, 9)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [52, 2, 0]]
** centroid: 2, normalized-entropy: 0.22853814395352806, [(1, 52), (2, 2)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [15, 29, 0]]
** centroid: 3, normalized-entropy: 0.9256859869821296, [(1, 15), (2, 29)]
*** center 4: selecting labels [1] (freq >= 1) [from [128, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [88, 13, 0]]
** centroid: 5, normalized-entropy: 0.5538976334852961, [(1, 88), (2, 13)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 85, 18]]
** centroid: 6, normalized-entropy: 0.6684725699243225, [(2, 85), (3, 18)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [99, 43, 0]]
** centroid: 7, normalized-entropy: 0.8847070502084032, [(1, 99), (2, 43)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.26022969562325743] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26022969562325743, 0.18315935317486962] ***
*** finished computation of 7 references, err: [Inf, 0.26022969562325743, 0.18315935317486962] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [47, 25, 0]]
** centroid: 1, normalized-entropy: 0.9315627684809641, [(1, 47), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [136, 44, 0]]
** centroid: 2, normalized-entropy: 0.80235344282919, [(1, 136), (2, 44)]
*** center 3: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [33, 28, 0]]
** centroid: 4, normalized-entropy: 0.995148095654003, [(1, 33), (2, 28)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 159, 26]]
** centroid: 5, normalized-entropy: 0.5856526899115505, [(2, 159), (3, 26)]
*** center 6: selecting labels [1] (freq >= 1) [from [28, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [117, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2712273633739612] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2712273633739612, 0.25049570706489777] ***
*** finished computation of 3 references, err: [Inf, 0.2712273633739612, 0.25049570706489777] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [160, 68, 0]]
** centroid: 1, normalized-entropy: 0.8791357668533337, [(1, 160), (2, 68)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [38, 172, 29]]
** centroid: 2, normalized-entropy: 0.7145792516728826, [(1, 38), (2, 172), (3, 29)]
*** center 3: selecting labels [1] (freq >= 1) [from [199, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2963963425892784] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2963963425892784, 0.25284573376161984] ***
*** finished computation of 3 references, err: [Inf, 0.2963963425892784, 0.25284573376161984] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 179, 27]]
** centroid: 1, normalized-entropy: 0.560359815102075, [(2, 179), (3, 27)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [203, 72, 0]]
** centroid: 2, normalized-entropy: 0.8294776582577048, [(1, 203), (2, 72)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [179, 7, 0]]
** centroid: 3, normalized-entropy: 0.23133887248058435, [(1, 179), (2, 7)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2701406616583534] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2701406616583534, 0.24261280506670566] ***
*** finished computation of 3 references, err: [Inf, 0.2701406616583534, 0.24261280506670566] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [150, 83, 0]]
** centroid: 1, normalized-entropy: 0.939503413426053, [(1, 150), (2, 83)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 135, 26]]
** centroid: 2, normalized-entropy: 0.6378638453597688, [(2, 135), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [235, 38, 0]]
** centroid: 3, normalized-entropy: 0.5821244377929984, [(1, 235), (2, 38)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.35579576742955604] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35579576742955604, 0.3011208446388757] ***
*** starting iteration: 2; err: [Inf, 0.35579576742955604, 0.3011208446388757] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35579576742955604, 0.3011208446388757, 0.29882408516598985] ***
*** starting iteration: 3; err: [Inf, 0.35579576742955604, 0.3011208446388757, 0.29882408516598985] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35579576742955604, 0.3011208446388757, 0.29882408516598985, 0.29863202131798006] ***
*** finished computation of 3 references, err: [Inf, 0.35579576742955604, 0.3011208446388757, 0.29882408516598985, 0.29863202131798006] ***
*** center 1: selecting labels [1] (freq >= 1) [from [206, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [88, 94, 0]]
** centroid: 2, normalized-entropy: 0.9992158792218827, [(1, 88), (2, 94)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [103, 146, 29]]
** centroid: 3, normalized-entropy: 0.8573387355525477, [(1, 103), (2, 146), (3, 29)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3642333273481259] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3642333273481259, 0.31668968282003274] ***
*** starting iteration: 2; err: [Inf, 0.3642333273481259, 0.31668968282003274] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3642333273481259, 0.31668968282003274, 0.3051016517695615] ***
*** starting iteration: 3; err: [Inf, 0.3642333273481259, 0.31668968282003274, 0.3051016517695615] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3642333273481259, 0.31668968282003274, 0.3051016517695615, 0.3029304894477665] ***
*** finished computation of 3 references, err: [Inf, 0.3642333273481259, 0.31668968282003274, 0.3051016517695615, 0.3029304894477665] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [214, 12, 0]]
** centroid: 1, normalized-entropy: 0.2994113292359872, [(1, 214), (2, 12)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [4, 198, 27]]
** centroid: 2, normalized-entropy: 0.40826691296603185, [(1, 4), (2, 198), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [164, 48, 0]]
** centroid: 3, normalized-entropy: 0.7717094696953635, [(1, 164), (2, 48)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.43836401075660913] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43836401075660913, 0.31056778845858984] ***
*** starting iteration: 2; err: [Inf, 0.43836401075660913, 0.31056778845858984] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43836401075660913, 0.31056778845858984, 0.3035611394343191] ***
*** starting iteration: 3; err: [Inf, 0.43836401075660913, 0.31056778845858984, 0.3035611394343191] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43836401075660913, 0.31056778845858984, 0.3035611394343191, 0.3030025389637502] ***
*** finished computation of 3 references, err: [Inf, 0.43836401075660913, 0.31056778845858984, 0.3035611394343191, 0.3030025389637502] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [120, 72, 0]]
** centroid: 1, normalized-entropy: 0.954434002924965, [(1, 120), (2, 72)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 160, 26]]
** centroid: 2, normalized-entropy: 0.5836753280239112, [(2, 160), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [265, 24, 0]]
** centroid: 3, normalized-entropy: 0.41281853502072535, [(1, 265), (2, 24)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.9260008511505519, 0.9230098361834888, 0.9179568790347233, 0.9149808491125856, 0.9100327872782962, 0.908009806213399, 0.8760407113700527, 0.8719977462492432, 0.8700227173281064, 0.8620207033380686, 0.8589817362272453, 0.8450036863210516, 0.7720325115534696]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9260008511505519
finished with 14
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.49474834446381366] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49474834446381366, 0.27108466351130706] ***
*** starting iteration: 2; err: [Inf, 0.49474834446381366, 0.27108466351130706] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49474834446381366, 0.27108466351130706, 0.24556603783870246] ***
*** starting iteration: 3; err: [Inf, 0.49474834446381366, 0.27108466351130706, 0.24556603783870246] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49474834446381366, 0.27108466351130706, 0.24556603783870246, 0.23906467037762072] ***
*** finished computation of 3 references, err: [Inf, 0.49474834446381366, 0.27108466351130706, 0.24556603783870246, 0.23906467037762072] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [106, 152, 29]]
** centroid: 1, normalized-entropy: 0.8520899533120008, [(1, 106), (2, 152), (3, 29)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [78, 88, 0]]
** centroid: 2, normalized-entropy: 0.9973806632063373, [(1, 78), (2, 88)]
*** center 3: selecting labels [1] (freq >= 1) [from [213, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3010923870695361] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3010923870695361, 0.23811669663890547] ***
*** starting iteration: 2; err: [Inf, 0.3010923870695361, 0.23811669663890547] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3010923870695361, 0.23811669663890547, 0.23540626208519919] ***
*** starting iteration: 3; err: [Inf, 0.3010923870695361, 0.23811669663890547, 0.23540626208519919] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3010923870695361, 0.23811669663890547, 0.23540626208519919, 0.23521840952845036] ***
*** finished computation of 3 references, err: [Inf, 0.3010923870695361, 0.23811669663890547, 0.23540626208519919, 0.23521840952845036] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [201, 38, 0]]
** centroid: 1, normalized-entropy: 0.631901806148862, [(1, 201), (2, 38)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 193, 27]]
** centroid: 2, normalized-entropy: 0.5371498464739634, [(2, 193), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [181, 27, 0]]
** centroid: 3, normalized-entropy: 0.556910544484968, [(1, 181), (2, 27)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31043107212748733] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31043107212748733, 0.2843901966370341] ***
*** starting iteration: 2; err: [Inf, 0.31043107212748733, 0.2843901966370341] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31043107212748733, 0.2843901966370341, 0.2799623596218081] ***
*** starting iteration: 3; err: [Inf, 0.31043107212748733, 0.2843901966370341, 0.2799623596218081] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31043107212748733, 0.2843901966370341, 0.2799623596218081, 0.26987866555917256] ***
*** finished computation of 3 references, err: [Inf, 0.31043107212748733, 0.2843901966370341, 0.2799623596218081, 0.26987866555917256] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [116, 138, 22]]
** centroid: 1, normalized-entropy: 0.830594066826314, [(1, 116), (2, 138), (3, 22)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [71, 82, 4]]
** centroid: 2, normalized-entropy: 0.720562558793433, [(1, 71), (2, 82), (3, 4)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [198, 36, 0]]
** centroid: 3, normalized-entropy: 0.6193821946787638, [(1, 198), (2, 36)]
finished with 8 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 14)
[0.9260008511505519, 0.9230098361834888, 0.9179568790347233, 0.9149808491125856, 0.9100327872782962, 0.908009806213399, 0.8760407113700527, 0.8719977462492432, 0.8700227173281064, 0.8620207033380686, 0.8589817362272453, 0.8529697362032692, 0.8450036863210516, 0.7720325115534696]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9260008511505519
finished with 14
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9260008511505519, 0.9230098361834888, 0.9179568790347233, 0.9149808491125856, 0.9100327872782962, 0.908009806213399, 0.8760407113700527, 0.8719977462492432, 0.8700227173281064, 0.8620207033380686, 0.8589817362272453, 0.8529697362032692, 0.8450036863210516, 0.7720325115534696]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9260008511505519
finished with 15
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.33548159864780075] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33548159864780075, 0.30166250020097773] ***
*** starting iteration: 2; err: [Inf, 0.33548159864780075, 0.30166250020097773] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33548159864780075, 0.30166250020097773, 0.28943343602950117] ***
*** starting iteration: 3; err: [Inf, 0.33548159864780075, 0.30166250020097773, 0.28943343602950117] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33548159864780075, 0.30166250020097773, 0.28943343602950117, 0.2881004328310892] ***
*** starting iteration: 4; err: [Inf, 0.33548159864780075, 0.30166250020097773, 0.28943343602950117, 0.2881004328310892] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33548159864780075, 0.30166250020097773, 0.28943343602950117, 0.2881004328310892, 0.2879431157333737] ***
*** finished computation of 3 references, err: [Inf, 0.33548159864780075, 0.30166250020097773, 0.28943343602950117, 0.2881004328310892, 0.2879431157333737] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [145, 75, 0]]
** centroid: 1, normalized-entropy: 0.9256859869821296, [(1, 145), (2, 75)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [248, 2, 0]]
** centroid: 2, normalized-entropy: 0.06722154475830684, [(1, 248), (2, 2)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [4, 163, 29]]
** centroid: 3, normalized-entropy: 0.46920247222064704, [(1, 4), (2, 163), (3, 29)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.47547860489599686] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47547860489599686, 0.3137298273327558] ***
*** starting iteration: 2; err: [Inf, 0.47547860489599686, 0.3137298273327558] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47547860489599686, 0.3137298273327558, 0.2968079842839284] ***
*** starting iteration: 3; err: [Inf, 0.47547860489599686, 0.3137298273327558, 0.2968079842839284] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47547860489599686, 0.3137298273327558, 0.2968079842839284, 0.2940775431187145] ***
*** starting iteration: 4; err: [Inf, 0.47547860489599686, 0.3137298273327558, 0.2968079842839284, 0.2940775431187145] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47547860489599686, 0.3137298273327558, 0.2968079842839284, 0.2940775431187145, 0.29379752116079544] ***
*** finished computation of 3 references, err: [Inf, 0.47547860489599686, 0.3137298273327558, 0.2968079842839284, 0.2940775431187145, 0.29379752116079544] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [133, 70, 0]]
** centroid: 1, normalized-entropy: 0.9293636260137188, [(1, 133), (2, 70)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [248, 5, 0]]
** centroid: 2, normalized-entropy: 0.1401069128350934, [(1, 248), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [1, 183, 27]]
** centroid: 3, normalized-entropy: 0.5535072654547254, [(2, 183), (3, 27)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5153289371277617] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5153289371277617, 0.3228646728644396] ***
*** starting iteration: 2; err: [Inf, 0.5153289371277617, 0.3228646728644396] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5153289371277617, 0.3228646728644396, 0.29348562706004955] ***
*** starting iteration: 3; err: [Inf, 0.5153289371277617, 0.3228646728644396, 0.29348562706004955] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5153289371277617, 0.3228646728644396, 0.29348562706004955, 0.28792888440214087] ***
*** starting iteration: 4; err: [Inf, 0.5153289371277617, 0.3228646728644396, 0.29348562706004955, 0.28792888440214087] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5153289371277617, 0.3228646728644396, 0.29348562706004955, 0.28792888440214087, 0.28562054068766074] ***
*** starting iteration: 5; err: [Inf, 0.5153289371277617, 0.3228646728644396, 0.29348562706004955, 0.28792888440214087, 0.28562054068766074] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5153289371277617, 0.3228646728644396, 0.29348562706004955, 0.28792888440214087, 0.28562054068766074, 0.28474796046691386] ***
*** finished computation of 3 references, err: [Inf, 0.5153289371277617, 0.3228646728644396, 0.29348562706004955, 0.28792888440214087, 0.28562054068766074, 0.28474796046691386] ***
*** center 1: selecting labels [1] (freq >= 2) [from [221, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [47, 160, 26]]
** centroid: 2, normalized-entropy: 0.7516181339518918, [(1, 47), (2, 160), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [117, 96, 0]]
** centroid: 3, normalized-entropy: 0.9929768866085175, [(1, 117), (2, 96)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 15)
[0.9260008511505519, 0.9239928551305797, 0.9230098361834888, 0.9179568790347233, 0.9149808491125856, 0.9100327872782962, 0.908009806213399, 0.8760407113700527, 0.8719977462492432, 0.8700227173281064, 0.8620207033380686, 0.8589817362272453, 0.8529697362032692, 0.8450036863210516, 0.7720325115534696]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9260008511505519
finished with 15
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9260008511505519, 0.9239928551305797, 0.9230098361834888, 0.9179568790347233, 0.9149808491125856, 0.9100327872782962, 0.908009806213399, 0.8760407113700527, 0.8719977462492432, 0.8700227173281064, 0.8620207033380686, 0.8589817362272453, 0.8529697362032692, 0.8450036863210516, 0.7720325115534696]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9260008511505519
finished with 15
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9260008511505519, 0.9239928551305797, 0.9230098361834888, 0.9179568790347233, 0.9149808491125856, 0.9100327872782962, 0.908009806213399, 0.8760407113700527, 0.8719977462492432, 0.8700227173281064, 0.8620207033380686, 0.8589817362272453, 0.8529697362032692, 0.8450036863210516, 0.7720325115534696]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9260008511505519
finished with 15
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9260008511505519, 0.9239928551305797, 0.9230098361834888, 0.9179568790347233, 0.9149808491125856, 0.9100327872782962, 0.908009806213399, 0.8760407113700527, 0.8719977462492432, 0.8700227173281064, 0.8620207033380686, 0.8589817362272453, 0.8529697362032692, 0.8450036863210516, 0.7720325115534696]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9260008511505519
finished with 16
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.18455623386025027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18455623386025027, 0.1553921453947028] ***
*** starting iteration: 2; err: [Inf, 0.18455623386025027, 0.1553921453947028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18455623386025027, 0.1553921453947028, 0.14772136485156556] ***
*** starting iteration: 3; err: [Inf, 0.18455623386025027, 0.1553921453947028, 0.14772136485156556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18455623386025027, 0.1553921453947028, 0.14772136485156556, 0.14636128486830507] ***
*** finished computation of 7 references, err: [Inf, 0.18455623386025027, 0.1553921453947028, 0.14772136485156556, 0.14636128486830507] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 75, 0]]
** centroid: 1, normalized-entropy: 0.23519338181924157, [(1, 3), (2, 75)]
*** center 2: selecting labels [1] (freq >= 2) [from [119, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 54, 29]]
** centroid: 4, normalized-entropy: 0.9335289015212996, [(2, 54), (3, 29)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [69, 16, 0]]
** centroid: 5, normalized-entropy: 0.6977652006354232, [(1, 69), (2, 16)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [12, 94, 0]]
** centroid: 6, normalized-entropy: 0.5095157180881823, [(1, 12), (2, 94)]
*** center 7: selecting labels [1] (freq >= 2) [from [124, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20189240603041703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20189240603041703, 0.15848525921148116] ***
*** starting iteration: 2; err: [Inf, 0.20189240603041703, 0.15848525921148116] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20189240603041703, 0.15848525921148116, 0.15404480974562745] ***
*** starting iteration: 3; err: [Inf, 0.20189240603041703, 0.15848525921148116, 0.15404480974562745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20189240603041703, 0.15848525921148116, 0.15404480974562745, 0.15246767818514464] ***
*** finished computation of 7 references, err: [Inf, 0.20189240603041703, 0.15848525921148116, 0.15404480974562745, 0.15246767818514464] ***
*** center 1: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 7, 0]]
** centroid: 2, normalized-entropy: 0.49291577961610966, [(1, 58), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [19, 48, 0]]
** centroid: 3, normalized-entropy: 0.8602858652332406, [(1, 19), (2, 48)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [43, 71, 0]]
** centroid: 4, normalized-entropy: 0.9560353655943677, [(1, 43), (2, 71)]
*** center 5: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [47, 40, 0]]
** centroid: 6, normalized-entropy: 0.9953251070631713, [(1, 47), (2, 40)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 92, 27]]
** centroid: 7, normalized-entropy: 0.7725516917477853, [(2, 92), (3, 27)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21375633660994325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21375633660994325, 0.150443222197792] ***
*** starting iteration: 2; err: [Inf, 0.21375633660994325, 0.150443222197792] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21375633660994325, 0.150443222197792, 0.14597513349140356] ***
*** starting iteration: 3; err: [Inf, 0.21375633660994325, 0.150443222197792, 0.14597513349140356] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21375633660994325, 0.150443222197792, 0.14597513349140356, 0.14496315966710738] ***
*** finished computation of 7 references, err: [Inf, 0.21375633660994325, 0.150443222197792, 0.14597513349140356, 0.14496315966710738] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [87, 5, 0]]
** centroid: 2, normalized-entropy: 0.30458668852140236, [(1, 87), (2, 5)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 29, 0]]
** centroid: 3, normalized-entropy: 0.9556222693531471, [(1, 48), (2, 29)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [28, 83, 0]]
** centroid: 4, normalized-entropy: 0.8148283832923793, [(1, 28), (2, 83)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [23, 58, 0]]
** centroid: 5, normalized-entropy: 0.8607781176165941, [(1, 23), (2, 58)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 81, 26]]
** centroid: 6, normalized-entropy: 0.7999783611177544, [(2, 81), (3, 26)]
*** center 7: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9460178741615867, 0.9260008511505519, 0.9239928551305797, 0.9230098361834888, 0.9179568790347233, 0.9149808491125856, 0.9100327872782962, 0.908009806213399, 0.8760407113700527, 0.8719977462492432, 0.8700227173281064, 0.8620207033380686, 0.8589817362272453, 0.8529697362032692, 0.8450036863210516, 0.7720325115534696]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9460178741615867
finished with 16
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.18358990062261] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18358990062261, 0.15272470332402735] ***
*** starting iteration: 2; err: [Inf, 0.18358990062261, 0.15272470332402735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18358990062261, 0.15272470332402735, 0.1503807468758896] ***
*** starting iteration: 3; err: [Inf, 0.18358990062261, 0.15272470332402735, 0.1503807468758896] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18358990062261, 0.15272470332402735, 0.1503807468758896, 0.14878125218162314] ***
*** finished computation of 7 references, err: [Inf, 0.18358990062261, 0.15272470332402735, 0.1503807468758896, 0.14878125218162314] ***
*** center 1: selecting labels [1] (freq >= 2) [from [190, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [173, 15, 0]]
** centroid: 2, normalized-entropy: 0.40142905212826957, [(1, 173), (2, 15)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 122, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [141, 9, 0]]
** centroid: 4, normalized-entropy: 0.3274449191544762, [(1, 141), (2, 9)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [54, 55, 0]]
** centroid: 5, normalized-entropy: 0.9999392847706552, [(1, 54), (2, 55)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [24, 111, 0]]
** centroid: 6, normalized-entropy: 0.6751914401458716, [(1, 24), (2, 111)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 65, 41]]
** centroid: 7, normalized-entropy: 0.9626983787500768, [(2, 65), (3, 41)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18107928822003305] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18107928822003305, 0.155029651097022] ***
*** starting iteration: 2; err: [Inf, 0.18107928822003305, 0.155029651097022] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18107928822003305, 0.155029651097022, 0.15056931185349823] ***
*** starting iteration: 3; err: [Inf, 0.18107928822003305, 0.155029651097022, 0.15056931185349823] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18107928822003305, 0.155029651097022, 0.15056931185349823, 0.14863386585284025] ***
*** finished computation of 7 references, err: [Inf, 0.18107928822003305, 0.155029651097022, 0.15056931185349823, 0.14863386585284025] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [82, 56, 0]]
** centroid: 1, normalized-entropy: 0.9742408334889756, [(1, 82), (2, 56)]
*** center 2: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [38, 15, 0]]
** centroid: 3, normalized-entropy: 0.8595316914502928, [(1, 38), (2, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 68, 0]]
** centroid: 6, normalized-entropy: 0.44749925503686355, [(1, 7), (2, 68)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 48, 21]]
** centroid: 7, normalized-entropy: 0.8865408928220899, [(2, 48), (3, 21)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21737026518117636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21737026518117636, 0.17054521221946925] ***
*** starting iteration: 2; err: [Inf, 0.21737026518117636, 0.17054521221946925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21737026518117636, 0.17054521221946925, 0.15794423158094287] ***
*** starting iteration: 3; err: [Inf, 0.21737026518117636, 0.17054521221946925, 0.15794423158094287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21737026518117636, 0.17054521221946925, 0.15794423158094287, 0.15330323811993002] ***
*** finished computation of 7 references, err: [Inf, 0.21737026518117636, 0.17054521221946925, 0.15794423158094287, 0.15330323811993002] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 81, 18]]
** centroid: 1, normalized-entropy: 0.6840384356390419, [(2, 81), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [80, 51, 0]]
** centroid: 2, normalized-entropy: 0.964354757021914, [(1, 80), (2, 51)]
*** center 3: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [35, 23, 0]]
** centroid: 5, normalized-entropy: 0.9688977092243805, [(1, 35), (2, 23)]
*** center 6: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [12, 46, 0]]
** centroid: 7, normalized-entropy: 0.7355085815538399, [(1, 12), (2, 46)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2077261001560837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2077261001560837, 0.16252013747766614] ***
*** starting iteration: 2; err: [Inf, 0.2077261001560837, 0.16252013747766614] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2077261001560837, 0.16252013747766614, 0.15070444239955397] ***
*** starting iteration: 3; err: [Inf, 0.2077261001560837, 0.16252013747766614, 0.15070444239955397] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2077261001560837, 0.16252013747766614, 0.15070444239955397, 0.1481266067661345] ***
*** finished computation of 7 references, err: [Inf, 0.2077261001560837, 0.16252013747766614, 0.15070444239955397, 0.1481266067661345] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [54, 40, 0]]
** centroid: 1, normalized-entropy: 0.9839393951635759, [(1, 54), (2, 40)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 61, 25]]
** centroid: 2, normalized-entropy: 0.869620774054375, [(2, 61), (3, 25)]
*** center 3: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 57, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [36, 21, 0]]
** centroid: 6, normalized-entropy: 0.9494520153879484, [(1, 36), (2, 21)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [70, 9, 0]]
** centroid: 7, normalized-entropy: 0.511639783631173, [(1, 70), (2, 9)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23118209900520742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23118209900520742, 0.1686079768836498] ***
*** starting iteration: 2; err: [Inf, 0.23118209900520742, 0.1686079768836498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23118209900520742, 0.1686079768836498, 0.15667162544419988] ***
*** starting iteration: 3; err: [Inf, 0.23118209900520742, 0.1686079768836498, 0.15667162544419988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23118209900520742, 0.1686079768836498, 0.15667162544419988, 0.15137669817358254] ***
*** finished computation of 7 references, err: [Inf, 0.23118209900520742, 0.1686079768836498, 0.15667162544419988, 0.15137669817358254] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [75, 4, 0]]
** centroid: 1, normalized-entropy: 0.2890794597316462, [(1, 75), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 11, 0]]
** centroid: 2, normalized-entropy: 0.6167482598263911, [(1, 61), (2, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 83, 17]]
** centroid: 4, normalized-entropy: 0.6577047787442196, [(2, 83), (3, 17)]
*** center 5: selecting labels [1] (freq >= 2) [from [41, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 48, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [36, 44, 0]]
** centroid: 7, normalized-entropy: 0.9927744539878083, [(1, 36), (2, 44)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23605868247523903] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23605868247523903, 0.16055845626443624] ***
*** starting iteration: 2; err: [Inf, 0.23605868247523903, 0.16055845626443624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23605868247523903, 0.16055845626443624, 0.15277524773962795] ***
*** starting iteration: 3; err: [Inf, 0.23605868247523903, 0.16055845626443624, 0.15277524773962795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23605868247523903, 0.16055845626443624, 0.15277524773962795, 0.1485111390016973] ***
*** finished computation of 7 references, err: [Inf, 0.23605868247523903, 0.16055845626443624, 0.15277524773962795, 0.1485111390016973] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 56, 0]]
** centroid: 1, normalized-entropy: 0.45868581620054033, [(1, 6), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 21, 0]]
** centroid: 2, normalized-entropy: 0.8708644692353648, [(1, 51), (2, 21)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 16, 24]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 16), (3, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [94, 5, 0]]
** centroid: 5, normalized-entropy: 0.2885385136944103, [(1, 94), (2, 5)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [31, 27, 0]]
** centroid: 7, normalized-entropy: 0.9965663713274552, [(1, 31), (2, 27)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20636823975201696] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20636823975201696, 0.16212764126621187] ***
*** starting iteration: 2; err: [Inf, 0.20636823975201696, 0.16212764126621187] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20636823975201696, 0.16212764126621187, 0.15629451758787036] ***
*** starting iteration: 3; err: [Inf, 0.20636823975201696, 0.16212764126621187, 0.15629451758787036] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20636823975201696, 0.16212764126621187, 0.15629451758787036, 0.15382666460983455] ***
*** finished computation of 7 references, err: [Inf, 0.20636823975201696, 0.16212764126621187, 0.15629451758787036, 0.15382666460983455] ***
*** center 1: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [23, 43, 0]]
** centroid: 2, normalized-entropy: 0.9327076126690367, [(1, 23), (2, 43)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [25, 14, 0]]
** centroid: 3, normalized-entropy: 0.9418285354475157, [(1, 25), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 24, 0]]
** centroid: 4, normalized-entropy: 0.8541802051521676, [(1, 62), (2, 24)]
*** center 5: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 73, 22]]
** centroid: 6, normalized-entropy: 0.7807536250860868, [(2, 73), (3, 22)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [31, 36, 0]]
** centroid: 7, normalized-entropy: 0.995978956518722, [(1, 31), (2, 36)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23755668136663735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23755668136663735, 0.17262764136120676] ***
*** starting iteration: 2; err: [Inf, 0.23755668136663735, 0.17262764136120676] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23755668136663735, 0.17262764136120676, 0.1570723689608276] ***
*** starting iteration: 3; err: [Inf, 0.23755668136663735, 0.17262764136120676, 0.1570723689608276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23755668136663735, 0.17262764136120676, 0.1570723689608276, 0.15117535911593585] ***
*** finished computation of 7 references, err: [Inf, 0.23755668136663735, 0.17262764136120676, 0.1570723689608276, 0.15117535911593585] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 60, 2]]
** centroid: 1, normalized-entropy: 0.2055925081850832, [(2, 60), (3, 2)]
*** center 2: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 68, 22]]
** centroid: 3, normalized-entropy: 0.80235344282919, [(2, 68), (3, 22)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [80, 17, 0]]
** centroid: 4, normalized-entropy: 0.6695920597928519, [(1, 80), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [52, 18, 0]]
** centroid: 5, normalized-entropy: 0.8224042259549892, [(1, 52), (2, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [26, 32, 0]]
** centroid: 7, normalized-entropy: 0.9922666387194963, [(1, 26), (2, 32)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1749284195122309] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1749284195122309, 0.15273311642091722] ***
*** starting iteration: 2; err: [Inf, 0.1749284195122309, 0.15273311642091722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1749284195122309, 0.15273311642091722, 0.14894822697713972] ***
*** starting iteration: 3; err: [Inf, 0.1749284195122309, 0.15273311642091722, 0.14894822697713972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1749284195122309, 0.15273311642091722, 0.14894822697713972, 0.14769187320768834] ***
*** finished computation of 7 references, err: [Inf, 0.1749284195122309, 0.15273311642091722, 0.14894822697713972, 0.14769187320768834] ***
*** center 1: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [30, 37, 0]]
** centroid: 3, normalized-entropy: 0.9921116920021501, [(1, 30), (2, 37)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 44, 0]]
** centroid: 4, normalized-entropy: 0.9970590569034106, [(1, 50), (2, 44)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [40, 3, 0]]
** centroid: 5, normalized-entropy: 0.3650551896402848, [(1, 40), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [20, 45, 0]]
** centroid: 6, normalized-entropy: 0.8904916402194913, [(1, 20), (2, 45)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 65, 23]]
** centroid: 7, normalized-entropy: 0.828797154590015, [(2, 65), (3, 23)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23363410871848464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23363410871848464, 0.1573049759743735] ***
*** starting iteration: 2; err: [Inf, 0.23363410871848464, 0.1573049759743735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23363410871848464, 0.1573049759743735, 0.15132922742143273] ***
*** starting iteration: 3; err: [Inf, 0.23363410871848464, 0.1573049759743735, 0.15132922742143273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23363410871848464, 0.1573049759743735, 0.15132922742143273, 0.14958758207969367] ***
*** finished computation of 7 references, err: [Inf, 0.23363410871848464, 0.1573049759743735, 0.15132922742143273, 0.14958758207969367] ***
*** center 1: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [28, 14, 0]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(1, 28), (2, 14)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 52, 20]]
** centroid: 4, normalized-entropy: 0.8524051786494784, [(2, 52), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 9, 0]]
** centroid: 5, normalized-entropy: 0.5801954953637372, [(1, 56), (2, 9)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [85, 58, 0]]
** centroid: 7, normalized-entropy: 0.9741291879035374, [(1, 85), (2, 58)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17808047021273524] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17808047021273524, 0.1577771618142724] ***
*** starting iteration: 2; err: [Inf, 0.17808047021273524, 0.1577771618142724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17808047021273524, 0.1577771618142724, 0.15238172579929232] ***
*** starting iteration: 3; err: [Inf, 0.17808047021273524, 0.1577771618142724, 0.15238172579929232] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17808047021273524, 0.1577771618142724, 0.15238172579929232, 0.1506377451745793] ***
*** finished computation of 7 references, err: [Inf, 0.17808047021273524, 0.1577771618142724, 0.15238172579929232, 0.1506377451745793] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [61, 7, 0]]
** centroid: 1, normalized-entropy: 0.4782501641071144, [(1, 61), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [41, 28, 0]]
** centroid: 2, normalized-entropy: 0.9742408334889756, [(1, 41), (2, 28)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 58, 27]]
** centroid: 3, normalized-entropy: 0.9018043446575508, [(2, 58), (3, 27)]
*** center 4: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [67, 34, 0]]
** centroid: 6, normalized-entropy: 0.9215608652945444, [(1, 67), (2, 34)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19274198026396333] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19274198026396333, 0.15470342514663935] ***
*** starting iteration: 2; err: [Inf, 0.19274198026396333, 0.15470342514663935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19274198026396333, 0.15470342514663935, 0.15395383985154332] ***
*** finished computation of 7 references, err: [Inf, 0.19274198026396333, 0.15470342514663935, 0.15395383985154332] ***
*** center 1: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [38, 28, 0]]
** centroid: 2, normalized-entropy: 0.9833761901392238, [(1, 38), (2, 28)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 58, 2]]
** centroid: 3, normalized-entropy: 0.2108423003185322, [(2, 58), (3, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [65, 28, 0]]
** centroid: 4, normalized-entropy: 0.8826013308449944, [(1, 65), (2, 28)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 47, 18]]
** centroid: 5, normalized-entropy: 0.8512243352621381, [(2, 47), (3, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [66, 17, 0]]
** centroid: 7, normalized-entropy: 0.7314625617214586, [(1, 66), (2, 17)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18410055639687925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18410055639687925, 0.15590479908138513] ***
*** starting iteration: 2; err: [Inf, 0.18410055639687925, 0.15590479908138513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18410055639687925, 0.15590479908138513, 0.15085874679544942] ***
*** starting iteration: 3; err: [Inf, 0.18410055639687925, 0.15590479908138513, 0.15085874679544942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18410055639687925, 0.15590479908138513, 0.15085874679544942, 0.1493375876317732] ***
*** finished computation of 7 references, err: [Inf, 0.18410055639687925, 0.15590479908138513, 0.15085874679544942, 0.1493375876317732] ***
*** center 1: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [14, 43, 0]]
** centroid: 2, normalized-entropy: 0.8042522359016421, [(1, 14), (2, 43)]
*** center 3: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 80, 16]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 80), (3, 16)]
*** center 5: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [49, 22, 0]]
** centroid: 6, normalized-entropy: 0.893010810044601, [(1, 49), (2, 22)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [43, 48, 0]]
** centroid: 7, normalized-entropy: 0.9978211842997324, [(1, 43), (2, 48)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1797660565469414] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1797660565469414, 0.15534048349410295] ***
*** starting iteration: 2; err: [Inf, 0.1797660565469414, 0.15534048349410295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1797660565469414, 0.15534048349410295, 0.15216571209952234] ***
*** starting iteration: 3; err: [Inf, 0.1797660565469414, 0.15534048349410295, 0.15216571209952234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1797660565469414, 0.15534048349410295, 0.15216571209952234, 0.15049350699968636] ***
*** finished computation of 7 references, err: [Inf, 0.1797660565469414, 0.15534048349410295, 0.15216571209952234, 0.15049350699968636] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [45, 43, 0]]
** centroid: 1, normalized-entropy: 0.9996273710574612, [(1, 45), (2, 43)]
*** center 2: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [76, 20, 0]]
** centroid: 4, normalized-entropy: 0.7382848661434506, [(1, 76), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [4, 62, 0]]
** centroid: 5, normalized-entropy: 0.32984607020714635, [(1, 4), (2, 62)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 67, 22]]
** centroid: 6, normalized-entropy: 0.8067955503968327, [(2, 67), (3, 22)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [49, 3, 0]]
** centroid: 7, normalized-entropy: 0.3182152976832332, [(1, 49), (2, 3)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18111060277884827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18111060277884827, 0.15325854459404945] ***
*** starting iteration: 2; err: [Inf, 0.18111060277884827, 0.15325854459404945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18111060277884827, 0.15325854459404945, 0.15039490828104318] ***
*** starting iteration: 3; err: [Inf, 0.18111060277884827, 0.15325854459404945, 0.15039490828104318] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18111060277884827, 0.15325854459404945, 0.15039490828104318, 0.14897121042571962] ***
*** finished computation of 7 references, err: [Inf, 0.18111060277884827, 0.15325854459404945, 0.15039490828104318, 0.14897121042571962] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 59, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [17, 49, 0]]
** centroid: 2, normalized-entropy: 0.8230660790114689, [(1, 17), (2, 49)]
*** center 3: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [79, 9, 0]]
** centroid: 4, normalized-entropy: 0.4761588445580706, [(1, 79), (2, 9)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 28, 19]]
** centroid: 5, normalized-entropy: 0.9733854352299557, [(2, 28), (3, 19)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [21, 43, 0]]
** centroid: 6, normalized-entropy: 0.912999213585247, [(1, 21), (2, 43)]
*** center 7: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17576166663132609] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17576166663132609, 0.14506903990451248] ***
*** starting iteration: 2; err: [Inf, 0.17576166663132609, 0.14506903990451248] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17576166663132609, 0.14506903990451248, 0.1422580895796418] ***
*** starting iteration: 3; err: [Inf, 0.17576166663132609, 0.14506903990451248, 0.1422580895796418] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17576166663132609, 0.14506903990451248, 0.1422580895796418, 0.14163579244725405] ***
*** finished computation of 7 references, err: [Inf, 0.17576166663132609, 0.14506903990451248, 0.1422580895796418, 0.14163579244725405] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 72, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 2, 0]]
** centroid: 3, normalized-entropy: 0.2055925081850832, [(1, 60), (2, 2)]
*** center 4: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [12, 47, 0]]
** centroid: 5, normalized-entropy: 0.7286561673702678, [(1, 12), (2, 47)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 38, 25]]
** centroid: 6, normalized-entropy: 0.9690632527820694, [(2, 38), (3, 25)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [75, 16, 0]]
** centroid: 7, normalized-entropy: 0.6708561590207726, [(1, 75), (2, 16)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17403343946114183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17403343946114183, 0.15473613356426358] ***
*** starting iteration: 2; err: [Inf, 0.17403343946114183, 0.15473613356426358] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17403343946114183, 0.15473613356426358, 0.14986947029083966] ***
*** starting iteration: 3; err: [Inf, 0.17403343946114183, 0.15473613356426358, 0.14986947029083966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17403343946114183, 0.15473613356426358, 0.14986947029083966, 0.1477629163041711] ***
*** finished computation of 7 references, err: [Inf, 0.17403343946114183, 0.15473613356426358, 0.14986947029083966, 0.1477629163041711] ***
*** center 1: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 46, 20]]
** centroid: 2, normalized-entropy: 0.8849636363831529, [(2, 46), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [41, 3, 0]]
** centroid: 3, normalized-entropy: 0.3591016256485496, [(1, 41), (2, 3)]
*** center 4: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [69, 4, 0]]
** centroid: 5, normalized-entropy: 0.306424729870515, [(1, 69), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 76, 0]]
** centroid: 6, normalized-entropy: 0.48736957102366285, [(1, 9), (2, 76)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 57, 0]]
** centroid: 7, normalized-entropy: 0.5381411852224502, [(1, 8), (2, 57)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1712811674810946] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1712811674810946, 0.15642122108489276] ***
*** starting iteration: 2; err: [Inf, 0.1712811674810946, 0.15642122108489276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1712811674810946, 0.15642122108489276, 0.15091073776688427] ***
*** starting iteration: 3; err: [Inf, 0.1712811674810946, 0.15642122108489276, 0.15091073776688427] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1712811674810946, 0.15642122108489276, 0.15091073776688427, 0.1496696168333292] ***
*** finished computation of 7 references, err: [Inf, 0.1712811674810946, 0.15642122108489276, 0.15091073776688427, 0.1496696168333292] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 59, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 6, 0]]
** centroid: 2, normalized-entropy: 0.39845927409523557, [(1, 70), (2, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [53, 33, 0]]
** centroid: 4, normalized-entropy: 0.9606276613221153, [(1, 53), (2, 33)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 78, 21]]
** centroid: 5, normalized-entropy: 0.7455178428108284, [(2, 78), (3, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [60, 14, 0]]
** centroid: 7, normalized-entropy: 0.699772221773307, [(1, 60), (2, 14)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1992162188589573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1992162188589573, 0.1571016872562468] ***
*** starting iteration: 2; err: [Inf, 0.1992162188589573, 0.1571016872562468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1992162188589573, 0.1571016872562468, 0.15226388429664076] ***
*** starting iteration: 3; err: [Inf, 0.1992162188589573, 0.1571016872562468, 0.15226388429664076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1992162188589573, 0.1571016872562468, 0.15226388429664076, 0.15035270863026381] ***
*** finished computation of 7 references, err: [Inf, 0.1992162188589573, 0.1571016872562468, 0.15226388429664076, 0.15035270863026381] ***
*** center 1: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 57, 17]]
** centroid: 3, normalized-entropy: 0.77753986416076, [(2, 57), (3, 17)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [22, 55, 0]]
** centroid: 4, normalized-entropy: 0.8631205685666311, [(1, 22), (2, 55)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 11, 0]]
** centroid: 5, normalized-entropy: 0.5643364444932288, [(1, 72), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 71, 0]]
** centroid: 6, normalized-entropy: 0.35001059292688486, [(1, 5), (2, 71)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [76, 2, 0]]
** centroid: 7, normalized-entropy: 0.17203694935311387, [(1, 76), (2, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20943840223178267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20943840223178267, 0.16287411264330148] ***
*** starting iteration: 2; err: [Inf, 0.20943840223178267, 0.16287411264330148] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20943840223178267, 0.16287411264330148, 0.15662473281752318] ***
*** starting iteration: 3; err: [Inf, 0.20943840223178267, 0.16287411264330148, 0.15662473281752318] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20943840223178267, 0.16287411264330148, 0.15662473281752318, 0.15551734121795743] ***
*** finished computation of 7 references, err: [Inf, 0.20943840223178267, 0.16287411264330148, 0.15662473281752318, 0.15551734121795743] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [33, 37, 0]]
** centroid: 1, normalized-entropy: 0.9976432959863935, [(1, 33), (2, 37)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 37, 24]]
** centroid: 3, normalized-entropy: 0.9669852958320848, [(2, 37), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [29, 42, 0]]
** centroid: 4, normalized-entropy: 0.9756797868933086, [(1, 29), (2, 42)]
*** center 5: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [55, 23, 0]]
** centroid: 6, normalized-entropy: 0.8749315876677922, [(1, 55), (2, 23)]
*** center 7: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.210842844132334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.210842844132334, 0.16216116665070876] ***
*** starting iteration: 2; err: [Inf, 0.210842844132334, 0.16216116665070876] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.210842844132334, 0.16216116665070876, 0.15358936035679654] ***
*** starting iteration: 3; err: [Inf, 0.210842844132334, 0.16216116665070876, 0.15358936035679654] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.210842844132334, 0.16216116665070876, 0.15358936035679654, 0.15152804465033115] ***
*** finished computation of 7 references, err: [Inf, 0.210842844132334, 0.16216116665070876, 0.15358936035679654, 0.15152804465033115] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 83, 3]]
** centroid: 1, normalized-entropy: 0.21832103023746746, [(2, 83), (3, 3)]
*** center 2: selecting labels [1] (freq >= 2) [from [50, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [97, 10, 0]]
** centroid: 4, normalized-entropy: 0.447907858914932, [(1, 97), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 2, 0]]
** centroid: 5, normalized-entropy: 0.2538784402981617, [(1, 45), (2, 2)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 81, 18]]
** centroid: 6, normalized-entropy: 0.6840384356390419, [(2, 81), (3, 18)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [32, 14, 0]]
** centroid: 7, normalized-entropy: 0.8865408928220899, [(1, 32), (2, 14)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19896976998541505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19896976998541505, 0.15265625543892383] ***
*** starting iteration: 2; err: [Inf, 0.19896976998541505, 0.15265625543892383] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19896976998541505, 0.15265625543892383, 0.1477793708089739] ***
*** starting iteration: 3; err: [Inf, 0.19896976998541505, 0.15265625543892383, 0.1477793708089739] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19896976998541505, 0.15265625543892383, 0.1477793708089739, 0.14659361098986118] ***
*** finished computation of 7 references, err: [Inf, 0.19896976998541505, 0.15265625543892383, 0.1477793708089739, 0.14659361098986118] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [52, 13, 0]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(1, 52), (2, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [4, 46, 0]]
** centroid: 3, normalized-entropy: 0.4021791902022729, [(1, 4), (2, 46)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [77, 2, 0]]
** centroid: 4, normalized-entropy: 0.17033057560105982, [(1, 77), (2, 2)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 54, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 56, 16]]
** centroid: 6, normalized-entropy: 0.7642045065086204, [(2, 56), (3, 16)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [43, 30, 0]]
** centroid: 7, normalized-entropy: 0.9770012394218561, [(1, 43), (2, 30)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2199204583270475] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2199204583270475, 0.1682579758744687] ***
*** starting iteration: 2; err: [Inf, 0.2199204583270475, 0.1682579758744687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2199204583270475, 0.1682579758744687, 0.15609528380911797] ***
*** starting iteration: 3; err: [Inf, 0.2199204583270475, 0.1682579758744687, 0.15609528380911797] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2199204583270475, 0.1682579758744687, 0.15609528380911797, 0.15195083589293062] ***
*** finished computation of 7 references, err: [Inf, 0.2199204583270475, 0.1682579758744687, 0.15609528380911797, 0.15195083589293062] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 74, 23]]
** centroid: 1, normalized-entropy: 0.790206924188637, [(2, 74), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [15, 32, 0]]
** centroid: 2, normalized-entropy: 0.9034535552068337, [(1, 15), (2, 32)]
*** center 3: selecting labels [1] (freq >= 2) [from [37, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [84, 43, 0]]
** centroid: 5, normalized-entropy: 0.9234559626335354, [(1, 84), (2, 43)]
*** center 6: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [34, 30, 0]]
** centroid: 7, normalized-entropy: 0.9971803988942641, [(1, 34), (2, 30)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2726519634909928] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2726519634909928, 0.16584386980719865] ***
*** starting iteration: 2; err: [Inf, 0.2726519634909928, 0.16584386980719865] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2726519634909928, 0.16584386980719865, 0.15401642306894064] ***
*** starting iteration: 3; err: [Inf, 0.2726519634909928, 0.16584386980719865, 0.15401642306894064] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2726519634909928, 0.16584386980719865, 0.15401642306894064, 0.15195335408719257] ***
*** finished computation of 7 references, err: [Inf, 0.2726519634909928, 0.16584386980719865, 0.15401642306894064, 0.15195335408719257] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [89, 63, 0]]
** centroid: 3, normalized-entropy: 0.9787899441244793, [(1, 89), (2, 63)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 55, 21]]
** centroid: 4, normalized-entropy: 0.8503821170987139, [(2, 55), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [33, 2, 0]]
** centroid: 5, normalized-entropy: 0.3159971329784246, [(1, 33), (2, 2)]
*** center 6: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [45, 9, 0]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(1, 45), (2, 9)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18852912498638033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18852912498638033, 0.15572075880784542] ***
*** starting iteration: 2; err: [Inf, 0.18852912498638033, 0.15572075880784542] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18852912498638033, 0.15572075880784542, 0.1531748539339751] ***
*** starting iteration: 3; err: [Inf, 0.18852912498638033, 0.15572075880784542, 0.1531748539339751] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18852912498638033, 0.15572075880784542, 0.1531748539339751, 0.15236060922499747] ***
*** finished computation of 7 references, err: [Inf, 0.18852912498638033, 0.15572075880784542, 0.1531748539339751, 0.15236060922499747] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [54, 13, 0]]
** centroid: 1, normalized-entropy: 0.709825885194168, [(1, 54), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 40, 0]]
** centroid: 2, normalized-entropy: 0.9709505944546688, [(1, 60), (2, 40)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [12, 35, 0]]
** centroid: 3, normalized-entropy: 0.8196004346196011, [(1, 12), (2, 35)]
*** center 4: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 57, 20]]
** centroid: 5, normalized-entropy: 0.8263541679009075, [(2, 57), (3, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 48, 2]]
** centroid: 7, normalized-entropy: 0.24229218908241482, [(2, 48), (3, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18376040903106333] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18376040903106333, 0.15322175632975996] ***
*** starting iteration: 2; err: [Inf, 0.18376040903106333, 0.15322175632975996] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18376040903106333, 0.15322175632975996, 0.15034667223319412] ***
*** starting iteration: 3; err: [Inf, 0.18376040903106333, 0.15322175632975996, 0.15034667223319412] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18376040903106333, 0.15322175632975996, 0.15034667223319412, 0.1492385758049786] ***
*** finished computation of 7 references, err: [Inf, 0.18376040903106333, 0.15322175632975996, 0.15034667223319412, 0.1492385758049786] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 8, 0]]
** centroid: 1, normalized-entropy: 0.5079353563991225, [(1, 63), (2, 8)]
*** center 2: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [40, 24, 0]]
** centroid: 3, normalized-entropy: 0.954434002924965, [(1, 40), (2, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 25, 0]]
** centroid: 5, normalized-entropy: 0.9227346209530939, [(1, 49), (2, 25)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 74, 0]]
** centroid: 6, normalized-entropy: 0.5558227377664954, [(1, 11), (2, 74)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 62, 23]]
** centroid: 7, normalized-entropy: 0.8423074510400833, [(2, 62), (3, 23)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20734409096464515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20734409096464515, 0.16837327956221998] ***
*** starting iteration: 2; err: [Inf, 0.20734409096464515, 0.16837327956221998] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20734409096464515, 0.16837327956221998, 0.16018836219143123] ***
*** starting iteration: 3; err: [Inf, 0.20734409096464515, 0.16837327956221998, 0.16018836219143123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20734409096464515, 0.16837327956221998, 0.16018836219143123, 0.1550109636625275] ***
*** finished computation of 7 references, err: [Inf, 0.20734409096464515, 0.16837327956221998, 0.16018836219143123, 0.1550109636625275] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 93, 14]]
** centroid: 1, normalized-entropy: 0.5597404598417697, [(2, 93), (3, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [45, 10, 0]]
** centroid: 2, normalized-entropy: 0.6840384356390419, [(1, 45), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 57, 7]]
** centroid: 3, normalized-entropy: 0.49802788653447644, [(2, 57), (3, 7)]
*** center 4: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [77, 7, 0]]
** centroid: 5, normalized-entropy: 0.4138168503036336, [(1, 77), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [53, 15, 0]]
** centroid: 6, normalized-entropy: 0.7612401496918493, [(1, 53), (2, 15)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [39, 14, 0]]
** centroid: 7, normalized-entropy: 0.8329458235361399, [(1, 39), (2, 14)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22227466118149458] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22227466118149458, 0.1690999862831086] ***
*** starting iteration: 2; err: [Inf, 0.22227466118149458, 0.1690999862831086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22227466118149458, 0.1690999862831086, 0.16045930026099087] ***
*** starting iteration: 3; err: [Inf, 0.22227466118149458, 0.1690999862831086, 0.16045930026099087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22227466118149458, 0.1690999862831086, 0.16045930026099087, 0.15632792992703617] ***
*** finished computation of 7 references, err: [Inf, 0.22227466118149458, 0.1690999862831086, 0.16045930026099087, 0.15632792992703617] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [61, 15, 0]]
** centroid: 1, normalized-entropy: 0.7166336117927455, [(1, 61), (2, 15)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 79, 21]]
** centroid: 2, normalized-entropy: 0.7414827399312738, [(2, 79), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [33, 2, 0]]
** centroid: 3, normalized-entropy: 0.3159971329784246, [(1, 33), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [22, 4, 0]]
** centroid: 4, normalized-entropy: 0.6193821946787638, [(1, 22), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [82, 31, 0]]
** centroid: 5, normalized-entropy: 0.8476183429401788, [(1, 82), (2, 31)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 59, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20502477345988154] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20502477345988154, 0.17917490995372645] ***
*** starting iteration: 2; err: [Inf, 0.20502477345988154, 0.17917490995372645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20502477345988154, 0.17917490995372645, 0.16421319210343063] ***
*** starting iteration: 3; err: [Inf, 0.20502477345988154, 0.17917490995372645, 0.16421319210343063] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20502477345988154, 0.17917490995372645, 0.16421319210343063, 0.15558534029312432] ***
*** finished computation of 7 references, err: [Inf, 0.20502477345988154, 0.17917490995372645, 0.16421319210343063, 0.15558534029312432] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 41, 22]]
** centroid: 1, normalized-entropy: 0.9333572600179806, [(2, 41), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [40, 5, 0]]
** centroid: 2, normalized-entropy: 0.5032583347756457, [(1, 40), (2, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [1, 56, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [50, 44, 0]]
** centroid: 5, normalized-entropy: 0.9970590569034106, [(1, 50), (2, 44)]
*** center 6: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [14, 42, 0]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(1, 14), (2, 42)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19615280418097972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19615280418097972, 0.15923961282707752] ***
*** starting iteration: 2; err: [Inf, 0.19615280418097972, 0.15923961282707752] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19615280418097972, 0.15923961282707752, 0.15396282871626318] ***
*** starting iteration: 3; err: [Inf, 0.19615280418097972, 0.15923961282707752, 0.15396282871626318] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19615280418097972, 0.15923961282707752, 0.15396282871626318, 0.1521267389813438] ***
*** finished computation of 7 references, err: [Inf, 0.19615280418097972, 0.15923961282707752, 0.15396282871626318, 0.1521267389813438] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [23, 42, 0]]
** centroid: 1, normalized-entropy: 0.937456170782005, [(1, 23), (2, 42)]
*** center 2: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [80, 8, 0]]
** centroid: 3, normalized-entropy: 0.43949698692151346, [(1, 80), (2, 8)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 55, 20]]
** centroid: 4, normalized-entropy: 0.8366407419411671, [(2, 55), (3, 20)]
*** center 5: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [64, 25, 0]]
** centroid: 6, normalized-entropy: 0.8566727035015875, [(1, 64), (2, 25)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 49, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1834843320399523] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1834843320399523, 0.15933481705747546] ***
*** starting iteration: 2; err: [Inf, 0.1834843320399523, 0.15933481705747546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1834843320399523, 0.15933481705747546, 0.1559563740119338] ***
*** starting iteration: 3; err: [Inf, 0.1834843320399523, 0.15933481705747546, 0.1559563740119338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1834843320399523, 0.15933481705747546, 0.1559563740119338, 0.15521913328766823] ***
*** finished computation of 7 references, err: [Inf, 0.1834843320399523, 0.15933481705747546, 0.1559563740119338, 0.15521913328766823] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 70, 19]]
** centroid: 1, normalized-entropy: 0.748088105780153, [(2, 70), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [33, 29, 0]]
** centroid: 2, normalized-entropy: 0.9969954265557693, [(1, 33), (2, 29)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [66, 46, 0]]
** centroid: 3, normalized-entropy: 0.9768740126265281, [(1, 66), (2, 46)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [15, 35, 0]]
** centroid: 4, normalized-entropy: 0.8812908992306927, [(1, 15), (2, 35)]
*** center 5: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [37, 0, 0]]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 377,3 => 41,1 => 582), Dict(2 => 375,3 => 36,1 => 589))
[ Info: ===== scores for single classifier: {"micro_f1":0.946,"precision":0.946,"recall":0.946,"macro_recall":0.9207792240457775,"macro_f1":0.9106901596207012,"accuracy":0.946,"class_f1":{"2":0.9247910863509748,"3":0.8421052631578948,"1":0.9651741293532338},"class_precision":{"2":0.967930029154519,"3":0.8,"1":0.9432739059967585},"class_recall":{"2":0.8853333333333333,"3":0.8888888888888888,"1":0.9881154499151104}}
[ Info: ===== scores for 1: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9480088033704331,"macro_f1":0.962057899423694,"accuracy":0.973,"class_f1":{"2":0.9647058823529412,"3":0.9411764705882353,"1":0.9802913453299057},"class_precision":{"2":0.9461538461538461,"3":1.0,"1":0.9896193771626297},"class_recall":{"2":0.984,"3":0.8888888888888888,"1":0.9711375212224108}}
[ Info: ===== scores for 5: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9839969817015658,"macro_f1":0.967567630034769,"accuracy":0.978,"class_f1":{"2":0.9706666666666667,"3":0.9473684210526316,"1":0.9846678023850085},"class_precision":{"2":0.9706666666666667,"3":0.9,"1":0.9880341880341881},"class_recall":{"2":0.9706666666666667,"3":1.0,"1":0.9813242784380306}}
[ Info: ===== scores for 7: {"micro_f1":0.98,"precision":0.98,"recall":0.98,"macro_recall":0.9857747594793436,"macro_f1":0.9652198753030922,"accuracy":0.98,"class_f1":{"2":0.973404255319149,"3":0.9350649350649352,"1":0.9871904355251921},"class_precision":{"2":0.9708222811671088,"3":0.8780487804878049,"1":0.993127147766323},"class_recall":{"2":0.976,"3":1.0,"1":0.9813242784380306}}
[ Info: ===== scores for 9: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9843199396340313,"macro_f1":0.9600487967509244,"accuracy":0.978,"class_f1":{"2":0.9707446808510638,"3":0.923076923076923,"1":0.9863247863247864},"class_precision":{"2":0.9681697612732095,"3":0.8571428571428571,"1":0.9931153184165232},"class_recall":{"2":0.9733333333333334,"3":1.0,"1":0.9796264855687606}}
[ Info: ===== scores for 11: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.980521411054518,"macro_f1":0.9492649094050818,"accuracy":0.973,"class_f1":{"2":0.9640479360852198,"3":0.9,"1":0.9837467921300257},"class_precision":{"2":0.9627659574468085,"3":0.8181818181818182,"1":0.9913793103448276},"class_recall":{"2":0.9653333333333334,"3":1.0,"1":0.9762308998302207}}
(score = 0.978, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.977, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.976, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.98, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.98, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.98,"k":7,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.98,"precision":0.98,"recall":0.98,"macro_recall":0.9857747594793436,"macro_f1":0.9652198753030922,"accuracy":0.98,"class_f1":{"2":0.973404255319149,"3":0.9350649350649352,"1":0.9871904355251921},"class_precision":{"2":0.9708222811671088,"3":0.8780487804878049,"1":0.993127147766323},"class_recall":{"2":0.976,"3":1.0,"1":0.9813242784380306}}
Test Summary: | Pass  Total
AKNC          |    8      8
[388, 1, 1, 3, 6, 11, 1, 4, 1, 5, 3, 7, 1, 10, 1, 3, 1, 3, 11, 10, 13, 2, 3, 10, 10, 1, 4, 9, 1, 30, 10, 4, 4, 7, 16, 1, 3, 12, 8, 12, 48, 33, 9, 26, 6, 2, 4, 1, 30, 24, 17, 28, 10, 80, 26, 2, 4, 8, 3, 28, 7, 2, 1, 4, 10, 6, 18, 34, 13, 30, 50, 38, 34, 6, 9, 4, 2, 10, 15, 3, 13, 5, 3, 71, 9, 8, 16, 24, 52, 4, 1, 4, 1, 41, 16, 37, 24, 16, 11, 6, 33, 33, 2, 8, 15, 42, 89, 8, 8, 4, 22, 177, 9, 2, 9, 14, 67, 1367, 19, 56, 33, 26, 15, 150, 18, 13, 4, 62, 37, 22, 16, 3, 20, 17, 77, 55, 4, 21, 5, 56, 89, 3, 20, 9, 8, 25, 10, 8, 13, 6, 109, 32, 109, 93, 127, 20, 28, 5, 73, 29, 96, 2, 6, 27, 25, 6, 28, 59, 12, 72, 1, 5, 50, 26, 38, 48, 49, 20, 119, 28, 15, 3, 5, 25, 9, 1, 1, 27, 7, 23, 7, 22, 26, 61, 4, 25, 15, 6, 32, 31, 12, 21, 22, 9, 30, 15, 33, 40, 31, 33, 36, 13, 120, 15, 7, 25, 18, 49, 3, 14, 35, 26, 26, 67, 1, 17, 95, 133, 4, 13, 11, 17, 48, 11, 13, 20, 35, 51, 86, 33, 331, 16, 25, 37, 3, 24, 8, 128, 9, 16, 16, 13, 32, 43, 3, 2, 55, 5, 7, 2, 6, 12, 59, 4, 34, 65, 88, 4, 8, 22, 18, 28, 38, 327, 24, 60, 2, 11, 93, 9, 12, 38, 35, 22, 93, 7, 55, 41, 5, 24, 6, 224, 43, 29, 17, 36, 71, 10, 12, 51]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6989999999999997, speedup = 0.23414014957847387, eval_ratio = 0.10339000000000001)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.41402839781746037,"recall":0.41059027777777785,"f1":null,"seconds":0.00023139826953411102,"exhaustive_search_seconds":0.0003397110849618912,"evaluations":572.015625,"distances_sum":1769.129033694243}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5451388888888887,"recall":0.5451388888888887,"f1":0.5451388888888887,"seconds":0.00033930130302906036,"exhaustive_search_seconds":0.0003397110849618912,"evaluations":762.8046875,"distances_sum":1687.3927075599413}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6579861111111107,"recall":0.6579861111111107,"f1":0.6579861111111107,"seconds":0.0004601273685693741,"exhaustive_search_seconds":0.0003397110849618912,"evaluations":937.3125,"distances_sum":1632.629876318017}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7352430555555554,"recall":0.7352430555555554,"f1":0.7352430555555554,"seconds":0.0005425717681646347,"exhaustive_search_seconds":0.0003397110849618912,"evaluations":1076.1640625,"distances_sum":1606.6725494619968}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7934027777777772,"recall":0.7934027777777772,"f1":0.7934027777777772,"seconds":0.0006608739495277405,"exhaustive_search_seconds":0.0003397110849618912,"evaluations":1237.75,"distances_sum":1587.7607053690876}
KCenters.DeloneInvIndex> reached performance {"precision":0.8368055555555549,"recall":0.8368055555555549,"f1":0.8368055555555549,"seconds":0.001102682203054428,"exhaustive_search_seconds":0.0003397110849618912,"evaluations":1333.65625,"distances_sum":1576.850835547696}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.857, speedup = 0.45336410538281846, eval_ratio = 0.138943)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
