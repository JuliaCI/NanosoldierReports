Julia Version 1.5.0-DEV.299
Commit 6a9a92683d (2020-02-20 07:47 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed ZygoteRules ───────────────── v0.2.0
  Installed FunctionWrappers ──────────── v1.0.0
  Installed Compat ────────────────────── v2.2.0
  Installed DocStringExtensions ───────── v0.8.1
  Installed ForwardDiff ───────────────── v0.10.9
  Installed DiffEqBase ────────────────── v6.17.3
  Installed OrdinaryDiffEq ────────────── v5.29.0
  Installed LightGraphs ───────────────── v1.3.0
  Installed RecursiveFactorization ────── v0.1.0
  Installed OrderedCollections ────────── v1.1.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed GenericSVD ────────────────── v0.2.2
  Installed TreeViews ─────────────────── v0.3.0
  Installed Inflate ───────────────────── v0.1.1
  Installed TableTraits ───────────────── v1.0.0
  Installed DiffRules ─────────────────── v1.0.1
  Installed Roots ─────────────────────── v0.8.4
  Installed RecipesBase ───────────────── v0.8.0
  Installed IterativeSolvers ──────────── v0.8.1
  Installed VertexSafeGraphs ──────────── v0.1.1
  Installed Parameters ────────────────── v0.12.0
  Installed NaNMath ───────────────────── v0.3.3
  Installed Adapt ─────────────────────── v1.0.1
  Installed ArrayInterface ────────────── v2.4.1
  Installed MuladdMacro ───────────────── v0.2.2
  Installed DiffResults ───────────────── v1.0.2
  Installed OpenSpecFun_jll ───────────── v0.5.3+1
  Installed Reexport ──────────────────── v0.2.0
  Installed SimpleTraits ──────────────── v0.9.1
  Installed StaticArrays ──────────────── v0.12.1
  Installed FiniteDiff ────────────────── v2.2.1
  Installed SparseDiffTools ───────────── v1.3.3
  Installed RecursiveArrayTools ───────── v2.1.0
  Installed SpecialFunctions ──────────── v0.10.0
  Installed DataStructures ────────────── v0.17.9
  Installed ChainRulesCore ────────────── v0.6.1
  Installed Requires ──────────────────── v1.0.1
  Installed CommonSubexpressions ──────── v0.2.0
  Installed ExponentialUtilities ──────── v1.6.0
  Installed ArnoldiMethod ─────────────── v0.0.4
  Installed MacroTools ────────────────── v0.5.4
#=#=#                                                                         ######################################################################## 100.0%
   Updating `~/.julia/environments/v1.5/Project.toml`
  [1dea7af3] + OrdinaryDiffEq v5.29.0
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [79e6a3ab] + Adapt v1.0.1
  [ec485272] + ArnoldiMethod v0.0.4
  [4fba245c] + ArrayInterface v2.4.1
  [d360d2e6] + ChainRulesCore v0.6.1
  [bbf7d656] + CommonSubexpressions v0.2.0
  [34da2185] + Compat v2.2.0
  [864edb3b] + DataStructures v0.17.9
  [2b5f629d] + DiffEqBase v6.17.3
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [ffbed154] + DocStringExtensions v0.8.1
  [d4d017d3] + ExponentialUtilities v1.6.0
  [6a86dc24] + FiniteDiff v2.2.1
  [f6369f11] + ForwardDiff v0.10.9
  [069b7b12] + FunctionWrappers v1.0.0
  [01680d73] + GenericSVD v0.2.2
  [d25df0c9] + Inflate v0.1.1
  [42fd0dbc] + IterativeSolvers v0.8.1
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [093fc24a] + LightGraphs v1.3.0
  [1914dd2f] + MacroTools v0.5.4
  [46d2c3a1] + MuladdMacro v0.2.2
  [77ba4419] + NaNMath v0.3.3
  [efe28fd5] + OpenSpecFun_jll v0.5.3+1
  [bac558e1] + OrderedCollections v1.1.0
  [1dea7af3] + OrdinaryDiffEq v5.29.0
  [d96e819e] + Parameters v0.12.0
  [3cdcf5f2] + RecipesBase v0.8.0
  [731186ca] + RecursiveArrayTools v2.1.0
  [f2c3362d] + RecursiveFactorization v0.1.0
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.1
  [f2b01f46] + Roots v0.8.4
  [699a6c99] + SimpleTraits v0.9.1
  [47a9eef4] + SparseDiffTools v1.3.3
  [276daf66] + SpecialFunctions v0.10.0
  [90137ffa] + StaticArrays v0.12.1
  [3783bdb8] + TableTraits v1.0.0
  [a2a6695c] + TreeViews v0.3.0
  [19fa3120] + VertexSafeGraphs v0.1.1
  [700de1a5] + ZygoteRules v0.2.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [4607b0f0] + SuiteSparse 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing OrdinaryDiffEq
#                                                                          2.3%######################################################################## 100.0%
#=#=#                                                                         #########################                                                 34.9%######################################################################## 100.0%
#=#=#                                                                         ######                                                                     9.2%#######################################                                   54.4%######################################################################## 100.0%
#=#=#                                                                         ######################################################################## 100.0%
Status `/tmp/jl_11hiPG/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [79e6a3ab] Adapt v1.0.1
  [ec485272] ArnoldiMethod v0.0.4
  [7d9fca2a] Arpack v0.4.0
  [68821587] Arpack_jll v3.5.0+2
  [4fba245c] ArrayInterface v2.4.1
  [4c555306] ArrayLayouts v0.1.5
  [aae01518] BandedMatrices v0.14.3
  [b99e7846] BinaryProvider v0.5.8
  [8e7c35d0] BlockArrays v0.11.1
  [ffab5731] BlockBandedMatrices v0.7.1
  [49dc2e85] Calculus v0.5.1
  [a603d957] CanonicalTraits v0.1.0
  [d360d2e6] ChainRulesCore v0.6.1
  [bbf7d656] CommonSubexpressions v0.2.0
  [34da2185] Compat v2.2.0
  [187b0558] ConstructionBase v1.0.0
  [a8cc5b0e] Crayons v4.0.1
  [9a962f9c] DataAPI v1.1.0
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [bcd4f6db] DelayDiffEq v5.21.0
  [2b5f629d] DiffEqBase v6.17.3
  [eb300fae] DiffEqBiological v4.2.0
  [459566f4] DiffEqCallbacks v2.12.0
  [f3b72e0c] DiffEqDevTools v2.18.0
  [c894b116] DiffEqJump v6.5.0
  [77a26b50] DiffEqNoiseProcess v3.9.0
  [9fdde737] DiffEqOperators v4.8.1
  [a077e3f3] DiffEqProblemLibrary v4.6.4
  [41bf760c] DiffEqSensitivity v6.6.2
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [b4f34e82] Distances v0.8.2
  [31c24e10] Distributions v0.22.4
  [ffbed154] DocStringExtensions v0.8.1
  [497a8b3b] DoubleFloats v0.9.11
  [7c1d4256] DynamicPolynomials v0.3.8
  [fdbdab4c] ElasticArrays v1.0.0
  [d4d017d3] ExponentialUtilities v1.6.0
  [7a1cc6ca] FFTW v1.2.0
  [f5851436] FFTW_jll v3.3.9+4
  [1a297f60] FillArrays v0.8.5
  [6a86dc24] FiniteDiff v2.2.1
  [3dd14ad9] FixedPolynomials v0.4.0
  [59287772] Formatting v0.4.1
  [f6369f11] ForwardDiff v0.10.9
  [069b7b12] FunctionWrappers v1.0.0
  [6b9d7cbe] GeneralizedGenerated v0.2.1
  [01680d73] GenericSVD v0.2.2
  [c145ed77] GenericSchur v0.3.0
  [f213a82b] HomotopyContinuation v1.4.0
  [7869d1d1] IRTools v0.3.1
  [d25df0c9] Inflate v0.1.1
  [1d5cc7b8] IntelOpenMP_jll v2018.0.3+0
  [42fd0dbc] IterativeSolvers v0.8.1
  [82899510] IteratorInterfaceExtensions v1.0.0
  [b14d175d] JuliaVariables v0.2.0
  [b964fa9f] LaTeXStrings v1.0.3
  [23fbe1c1] Latexify v0.12.0
  [a5e1c1ea] LatinHypercubeSampling v1.4.0
  [5078a376] LazyArrays v0.15.0
  [093fc24a] LightGraphs v1.3.0
  [d3d80556] LineSearches v7.0.1
  [856f044c] MKL_jll v2019.0.117+2
  [d8e11817] MLStyle v0.3.1
  [1914dd2f] MacroTools v0.5.4
  [a3b82374] MatrixFactorizations v0.2.1
  [e1d29d7a] Missings v0.4.3
  [291d046c] MixedSubdivisions v1.0.0
  [961ee093] ModelingToolkit v1.2.7
  [46d2c3a1] MuladdMacro v0.2.2
  [102ac46a] MultivariatePolynomials v0.3.6
  [d8a4904e] MutableArithmetics v0.2.6
  [d41bc354] NLSolversBase v7.6.1
  [2774e3e8] NLsolve v4.3.0
  [872c559c] NNlib v0.6.4
  [77ba4419] NaNMath v0.3.3
  [71a1bf82] NameResolution v0.1.3
  [4536629a] OpenBLAS_jll v0.3.7+5
  [efe28fd5] OpenSpecFun_jll v0.5.3+1
  [bac558e1] OrderedCollections v1.1.0
  [1dea7af3] OrdinaryDiffEq v5.29.0
  [90014a1f] PDMats v0.9.11
  [d96e819e] Parameters v0.12.0
  [e409e4f3] PoissonRandom v0.4.0
  [f27b6e38] Polynomials v0.5.3
  [8162dcfd] PrettyPrint v0.1.0
  [08abe8d2] PrettyTables v0.8.4
  [92933f4c] ProgressMeter v1.2.0
  [01f381cc] ProjectiveVectors v1.1.2
  [1fd47b50] QuadGK v2.3.1
  [be4d8f0f] Quadmath v0.5.3
  [8a4e6c94] QuasiMonteCarlo v0.1.1
  [e6cf234a] RandomNumbers v1.4.0
  [3cdcf5f2] RecipesBase v0.8.0
  [731186ca] RecursiveArrayTools v2.1.0
  [f2c3362d] RecursiveFactorization v0.1.0
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [ae5879a3] ResettableStacks v1.0.0
  [79098fc4] Rmath v0.6.0
  [f2b01f46] Roots v0.8.4
  [1bc83da4] SafeTestsets v0.0.1
  [699a6c99] SimpleTraits v0.9.1
  [ed01d8cd] Sobol v1.3.0
  [a2af1166] SortingAlgorithms v0.3.1
  [47a9eef4] SparseDiffTools v1.3.3
  [276daf66] SpecialFunctions v0.10.0
  [90137ffa] StaticArrays v0.12.1
  [62e018b1] StaticPolynomials v1.3.3
  [2913bbd2] StatsBase v0.32.1
  [4c63d2b9] StatsFuns v0.9.4
  [123dc426] SymEngine v0.7.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.1
  [9f7883ad] Tracker v0.2.6
  [a2a6695c] TreeViews v0.3.0
  [1986cc42] Unitful v1.0.0
  [19fa3120] VertexSafeGraphs v0.1.1
  [e88e6eb3] Zygote v0.4.7
  [700de1a5] ZygoteRules v0.2.0
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [4607b0f0] SuiteSparse 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary:            | Pass  Total
Discrete Algorithm Tests |   12     12
647.930655 seconds (204.43 M allocations: 9.648 GiB, 0.89% gc time)
Test Summary: | Pass  Total
Tstops Tests  |   23     23
 13.149041 seconds (10.70 M allocations: 534.727 MiB, 1.76% gc time)
Test Summary:   | Pass  Total
Backwards Tests |    3      3
 16.071374 seconds (20.39 M allocations: 915.852 MiB, 3.72% gc time)
┌ Warning: Assignment to `sol` in soft scope is ambiguous because a global variable by the same name exists: `sol` will be treated as a new local. Disambiguate by using `local sol` to suppress this warning or `global sol` to assign to the existing global variable.
└ @ ~/.julia/packages/OrdinaryDiffEq/8Pn99/test/interface/ode_initdt_tests.jl:14
Test Summary: | Pass  Total
Initdt Tests  |    5      5
 95.190128 seconds (37.19 M allocations: 2.224 GiB, 2.79% gc time)
Test Summary: | Pass  Total
Linear Tests  |    3      3
 50.859309 seconds (53.24 M allocations: 3.975 GiB, 8.67% gc time)
Test Summary:     | Pass  Total
Mass Matrix Tests |   62     62
622.766050 seconds (513.93 M allocations: 32.730 GiB, 3.14% gc time)
Test Summary:               | Pass  Total
Differentiation Trait Tests |    5      5
 24.790166 seconds (24.20 M allocations: 1.110 GiB, 2.27% gc time)
┌ Warning: Instability detected. Aborting
└ @ DiffEqBase ~/.julia/packages/DiffEqBase/rcca4/src/integrator_interface.jl:339
Test Summary: | Pass  Total
Inf Tests     |    1      1
  2.736415 seconds (1.96 M allocations: 99.144 MiB)
Test Summary:  | Pass  Total
Jacobian Tests |   13     13
148.939701 seconds (126.29 M allocations: 5.943 GiB, 3.34% gc time)
tdir > 0 = true
tdir > 0 = false
Test Summary: | Pass  Total
saveat Tests  |   40     40
 65.309108 seconds (56.38 M allocations: 2.605 GiB, 2.47% gc time)
Test Summary:   | Pass  Total
save_idxs Tests |    4      4
 22.301509 seconds (18.58 M allocations: 870.201 MiB, 2.09% gc time)
Test Summary:         |
Scalar Handling Tests | No tests
  2.847811 seconds (2.45 M allocations: 128.975 MiB, 1.95% gc time)
┌ Warning: `a::StaticArray + b::Number` is deprecated, use `a .+ b` instead.
│   caller = _broadcast_getindex_evalf at broadcast.jl:631 [inlined]
└ @ Core ./broadcast.jl:631
Test Summary:      | Pass  Total
Static Array Tests |    1      1
 73.783176 seconds (68.93 M allocations: 3.240 GiB, 4.17% gc time)
Test Summary:    | Pass  Broken  Total
Data Array Tests |   10       4     14
118.194485 seconds (110.34 M allocations: 4.877 GiB, 4.35% gc time)
┌ Warning: Assignment to `dist` in soft scope is ambiguous because a global variable by the same name exists: `dist` will be treated as a new local. Disambiguate by using `local dist` to suppress this warning or `global dist` to assign to the existing global variable.
└ @ ~/.julia/packages/OrdinaryDiffEq/8Pn99/test/interface/umodified_test.jl:30
┌ Warning: Assignment to `dist` in soft scope is ambiguous because a global variable by the same name exists: `dist` will be treated as a new local. Disambiguate by using `local dist` to suppress this warning or `global dist` to assign to the existing global variable.
└ @ ~/.julia/packages/OrdinaryDiffEq/8Pn99/test/interface/umodified_test.jl:44
Test Summary:   | Pass  Total
u_modifed Tests |    1      1
  4.480264 seconds (3.48 M allocations: 178.264 MiB, 1.83% gc time)
  6.013024 seconds (4.22 M allocations: 209.077 MiB, 1.82% gc time)
  0.040574 seconds (26.64 k allocations: 1.313 MiB)
Test Summary:             | Pass  Total
Composite Algorithm Tests |    3      3
 45.469039 seconds (43.40 M allocations: 1.910 GiB, 2.32% gc time)
Complex Tests on Implicit Finite Diff Out-of-place Methods: Error During Test at /home/pkgeval/.julia/packages/OrdinaryDiffEq/8Pn99/test/interface/complex_tests.jl:53
  Got exception outside of a @test
  MethodError: Cannot `convert` an object of type StaticArrays.LU{LinearAlgebra.LowerTriangular{Complex{Float64},StaticArrays.SArray{Tuple{2,2},Complex{Float64},2,4}},LinearAlgebra.UpperTriangular{Complex{Float64},StaticArrays.SArray{Tuple{2,2},Complex{Float64},2,4}},StaticArrays.SArray{Tuple{2},Int64,1,2}} to an object of type LinearAlgebra.LU{Complex{Float64},Array{Complex{Float64},2}}
  Closest candidates are:
    convert(::Type{T}, !Matched::T) where T<:LinearAlgebra.Factorization at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/factorization.jl:52
    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:LinearAlgebra.Factorization at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/factorization.jl:53
    convert(::Type{T}, !Matched::T) where T at essentials.jl:171
    ...
  Stacktrace:
   [1] setproperty!(::OrdinaryDiffEq.NLNewtonConstantCache{Float64,Float64,Array{Complex{Float64},2},LinearAlgebra.LU{Complex{Float64},Array{Complex{Float64},2}},DiffEqBase.UDerivativeWrapper{DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Float64,DiffEqBase.NullParameters}}, ::Symbol, ::StaticArrays.LU{LinearAlgebra.LowerTriangular{Complex{Float64},StaticArrays.SArray{Tuple{2,2},Complex{Float64},2,4}},LinearAlgebra.UpperTriangular{Complex{Float64},StaticArrays.SArray{Tuple{2,2},Complex{Float64},2,4}},StaticArrays.SArray{Tuple{2},Int64,1,2}}) at ./Base.jl:34
   [2] update_W!(::OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},false,Array{Complex{Float64},1},Float64,OrdinaryDiffEq.NLNewtonConstantCache{Float64,Float64,Array{Complex{Float64},2},LinearAlgebra.LU{Complex{Float64},Array{Complex{Float64},2}},DiffEqBase.UDerivativeWrapper{DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Float64,DiffEqBase.NullParameters}}}, ::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{0,false,DiffEqBase.DefaultLinSolve,DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},DataType},false,Array{Complex{Float64},1},Float64,DiffEqBase.NullParameters,Float64,Float64,Float64,Array{Array{Complex{Float64},1},1},DiffEqBase.ODESolution{Complex{Float64},2,Array{Array{Complex{Float64},1},1},Nothing,Nothing,Array{Float64,1},Array{Array{Array{Complex{Float64},1},1},1},DiffEqBase.ODEProblem{Array{Complex{Float64},1},Tuple{Float64,Float64},false,DiffEqBase.NullParameters,DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.ImplicitEuler{0,false,DiffEqBase.DefaultLinSolve,DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},DataType},OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Array{Array{Complex{Float64},1},1},Array{Float64,1},Array{Array{Array{Complex{Float64},1},1},1},OrdinaryDiffEq.ImplicitEulerConstantCache{OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},false,Array{Complex{Float64},1},Float64,OrdinaryDiffEq.NLNewtonConstantCache{Float64,Float64,Array{Complex{Float64},2},LinearAlgebra.LU{Complex{Float64},Array{Complex{Float64},2}},DiffEqBase.UDerivativeWrapper{DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Float64,DiffEqBase.NullParameters}}}}},DiffEqBase.DEStats},DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},OrdinaryDiffEq.ImplicitEulerConstantCache{OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},false,Array{Complex{Float64},1},Float64,OrdinaryDiffEq.NLNewtonConstantCache{Float64,Float64,Array{Complex{Float64},2},LinearAlgebra.LU{Complex{Float64},Array{Complex{Float64},2}},DiffEqBase.UDerivativeWrapper{DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Float64,DiffEqBase.NullParameters}}}},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,typeof(DiffEqBase.ODE_DEFAULT_NORM),typeof(LinearAlgebra.opnorm),DiffEqBase.CallbackSet{Tuple{},Tuple{}},typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN),typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE),typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK),DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Nothing,Nothing,Int64,Array{Float64,1},Array{Float64,1},Array{Float64,1}},Array{Complex{Float64},1},Complex{Float64},Nothing}, ::OrdinaryDiffEq.ImplicitEulerConstantCache{OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},false,Array{Complex{Float64},1},Float64,OrdinaryDiffEq.NLNewtonConstantCache{Float64,Float64,Array{Complex{Float64},2},LinearAlgebra.LU{Complex{Float64},Array{Complex{Float64},2}},DiffEqBase.UDerivativeWrapper{DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Float64,DiffEqBase.NullParameters}}}}, ::Float64, ::Bool) at /home/pkgeval/.julia/packages/OrdinaryDiffEq/8Pn99/src/derivative_utils.jl:506
   [3] nlsolve!(::OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},false,Array{Complex{Float64},1},Float64,OrdinaryDiffEq.NLNewtonConstantCache{Float64,Float64,Array{Complex{Float64},2},LinearAlgebra.LU{Complex{Float64},Array{Complex{Float64},2}},DiffEqBase.UDerivativeWrapper{DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Float64,DiffEqBase.NullParameters}}}, ::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{0,false,DiffEqBase.DefaultLinSolve,DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},DataType},false,Array{Complex{Float64},1},Float64,DiffEqBase.NullParameters,Float64,Float64,Float64,Array{Array{Complex{Float64},1},1},DiffEqBase.ODESolution{Complex{Float64},2,Array{Array{Complex{Float64},1},1},Nothing,Nothing,Array{Float64,1},Array{Array{Array{Complex{Float64},1},1},1},DiffEqBase.ODEProblem{Array{Complex{Float64},1},Tuple{Float64,Float64},false,DiffEqBase.NullParameters,DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.ImplicitEuler{0,false,DiffEqBase.DefaultLinSolve,DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},DataType},OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Array{Array{Complex{Float64},1},1},Array{Float64,1},Array{Array{Array{Complex{Float64},1},1},1},OrdinaryDiffEq.ImplicitEulerConstantCache{OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},false,Array{Complex{Float64},1},Float64,OrdinaryDiffEq.NLNewtonConstantCache{Float64,Float64,Array{Complex{Float64},2},LinearAlgebra.LU{Complex{Float64},Array{Complex{Float64},2}},DiffEqBase.UDerivativeWrapper{DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Float64,DiffEqBase.NullParameters}}}}},DiffEqBase.DEStats},DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},OrdinaryDiffEq.ImplicitEulerConstantCache{OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},false,Array{Complex{Float64},1},Float64,OrdinaryDiffEq.NLNewtonConstantCache{Float64,Float64,Array{Complex{Float64},2},LinearAlgebra.LU{Complex{Float64},Array{Complex{Float64},2}},DiffEqBase.UDerivativeWrapper{DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Float64,DiffEqBase.NullParameters}}}},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,typeof(DiffEqBase.ODE_DEFAULT_NORM),typeof(LinearAlgebra.opnorm),DiffEqBase.CallbackSet{Tuple{},Tuple{}},typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN),typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE),typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK),DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Nothing,Nothing,Int64,Array{Float64,1},Array{Float64,1},Array{Float64,1}},Array{Complex{Float64},1},Complex{Float64},Nothing}, ::OrdinaryDiffEq.ImplicitEulerConstantCache{OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},false,Array{Complex{Float64},1},Float64,OrdinaryDiffEq.NLNewtonConstantCache{Float64,Float64,Array{Complex{Float64},2},LinearAlgebra.LU{Complex{Float64},Array{Complex{Float64},2}},DiffEqBase.UDerivativeWrapper{DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Float64,DiffEqBase.NullParameters}}}}, ::Bool) at /home/pkgeval/.julia/packages/OrdinaryDiffEq/8Pn99/src/nlsolve/nlsolve.jl:14
   [4] perform_step!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{0,false,DiffEqBase.DefaultLinSolve,DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},DataType},false,Array{Complex{Float64},1},Float64,DiffEqBase.NullParameters,Float64,Float64,Float64,Array{Array{Complex{Float64},1},1},DiffEqBase.ODESolution{Complex{Float64},2,Array{Array{Complex{Float64},1},1},Nothing,Nothing,Array{Float64,1},Array{Array{Array{Complex{Float64},1},1},1},DiffEqBase.ODEProblem{Array{Complex{Float64},1},Tuple{Float64,Float64},false,DiffEqBase.NullParameters,DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.ImplicitEuler{0,false,DiffEqBase.DefaultLinSolve,DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},DataType},OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Array{Array{Complex{Float64},1},1},Array{Float64,1},Array{Array{Array{Complex{Float64},1},1},1},OrdinaryDiffEq.ImplicitEulerConstantCache{OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},false,Array{Complex{Float64},1},Float64,OrdinaryDiffEq.NLNewtonConstantCache{Float64,Float64,Array{Complex{Float64},2},LinearAlgebra.LU{Complex{Float64},Array{Complex{Float64},2}},DiffEqBase.UDerivativeWrapper{DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Float64,DiffEqBase.NullParameters}}}}},DiffEqBase.DEStats},DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},OrdinaryDiffEq.ImplicitEulerConstantCache{OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},false,Array{Complex{Float64},1},Float64,OrdinaryDiffEq.NLNewtonConstantCache{Float64,Float64,Array{Complex{Float64},2},LinearAlgebra.LU{Complex{Float64},Array{Complex{Float64},2}},DiffEqBase.UDerivativeWrapper{DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Float64,DiffEqBase.NullParameters}}}},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,typeof(DiffEqBase.ODE_DEFAULT_NORM),typeof(LinearAlgebra.opnorm),DiffEqBase.CallbackSet{Tuple{},Tuple{}},typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN),typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE),typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK),DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Nothing,Nothing,Int64,Array{Float64,1},Array{Float64,1},Array{Float64,1}},Array{Complex{Float64},1},Complex{Float64},Nothing}, ::OrdinaryDiffEq.ImplicitEulerConstantCache{OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},false,Array{Complex{Float64},1},Float64,OrdinaryDiffEq.NLNewtonConstantCache{Float64,Float64,Array{Complex{Float64},2},LinearAlgebra.LU{Complex{Float64},Array{Complex{Float64},2}},DiffEqBase.UDerivativeWrapper{DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Float64,DiffEqBase.NullParameters}}}}, ::Bool) at /home/pkgeval/.julia/packages/OrdinaryDiffEq/8Pn99/src/perform_step/sdirk_perform_step.jl:57
   [5] perform_step! at /home/pkgeval/.julia/packages/OrdinaryDiffEq/8Pn99/src/perform_step/sdirk_perform_step.jl:43 [inlined]
   [6] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{0,false,DiffEqBase.DefaultLinSolve,DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},DataType},false,Array{Complex{Float64},1},Float64,DiffEqBase.NullParameters,Float64,Float64,Float64,Array{Array{Complex{Float64},1},1},DiffEqBase.ODESolution{Complex{Float64},2,Array{Array{Complex{Float64},1},1},Nothing,Nothing,Array{Float64,1},Array{Array{Array{Complex{Float64},1},1},1},DiffEqBase.ODEProblem{Array{Complex{Float64},1},Tuple{Float64,Float64},false,DiffEqBase.NullParameters,DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.ImplicitEuler{0,false,DiffEqBase.DefaultLinSolve,DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},DataType},OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Array{Array{Complex{Float64},1},1},Array{Float64,1},Array{Array{Array{Complex{Float64},1},1},1},OrdinaryDiffEq.ImplicitEulerConstantCache{OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},false,Array{Complex{Float64},1},Float64,OrdinaryDiffEq.NLNewtonConstantCache{Float64,Float64,Array{Complex{Float64},2},LinearAlgebra.LU{Complex{Float64},Array{Complex{Float64},2}},DiffEqBase.UDerivativeWrapper{DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Float64,DiffEqBase.NullParameters}}}}},DiffEqBase.DEStats},DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},OrdinaryDiffEq.ImplicitEulerConstantCache{OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},false,Array{Complex{Float64},1},Float64,OrdinaryDiffEq.NLNewtonConstantCache{Float64,Float64,Array{Complex{Float64},2},LinearAlgebra.LU{Complex{Float64},Array{Complex{Float64},2}},DiffEqBase.UDerivativeWrapper{DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Float64,DiffEqBase.NullParameters}}}},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,typeof(DiffEqBase.ODE_DEFAULT_NORM),typeof(LinearAlgebra.opnorm),DiffEqBase.CallbackSet{Tuple{},Tuple{}},typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN),typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE),typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK),DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Nothing,Nothing,Int64,Array{Float64,1},Array{Float64,1},Array{Float64,1}},Array{Complex{Float64},1},Complex{Float64},Nothing}) at /home/pkgeval/.julia/packages/OrdinaryDiffEq/8Pn99/src/solve.jl:402
   [7] solve_call(::DiffEqBase.ODEProblem{Array{Complex{Float64},1},Tuple{Float64,Float64},false,DiffEqBase.NullParameters,DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.ImplicitEuler{0,false,DiffEqBase.DefaultLinSolve,DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},DataType}; merge_callbacks::Bool, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/DiffEqBase/rcca4/src/solve.jl:0
   [8] solve_call at /home/pkgeval/.julia/packages/DiffEqBase/rcca4/src/solve.jl:37 [inlined]
   [9] #solve#442 at /home/pkgeval/.julia/packages/DiffEqBase/rcca4/src/solve.jl:63 [inlined]
   [10] solve(::DiffEqBase.ODEProblem{Array{Complex{Float64},1},Tuple{Float64,Float64},false,DiffEqBase.NullParameters,DiffEqBase.ODEFunction{false,typeof(Main.##270.fun),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.ImplicitEuler{0,false,DiffEqBase.DefaultLinSolve,DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},DataType}) at /home/pkgeval/.julia/packages/DiffEqBase/rcca4/src/solve.jl:51
   [11] macro expansion at /home/pkgeval/.julia/packages/OrdinaryDiffEq/8Pn99/test/interface/complex_tests.jl:57 [inlined]
   [12] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [13] top-level scope at /home/pkgeval/.julia/packages/OrdinaryDiffEq/8Pn99/test/interface/complex_tests.jl:54
   [14] include(::Function, ::Module, ::String) at ./Base.jl:380
   [15] include at ./Base.jl:368 [inlined]
   [16] include(::String) at /home/pkgeval/.julia/packages/SafeTestsets/A83XK/src/SafeTestsets.jl:23
   [17] top-level scope at /home/pkgeval/.julia/packages/OrdinaryDiffEq/8Pn99/test/runtests.jl:29
   [18] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [19] top-level scope at /home/pkgeval/.julia/packages/OrdinaryDiffEq/8Pn99/test/runtests.jl:29
   [20] eval(::Module, ::Any) at ./boot.jl:331
   [21] top-level scope at /home/pkgeval/.julia/packages/SafeTestsets/A83XK/src/SafeTestsets.jl:23
   [22] top-level scope at util.jl:175
   [23] top-level scope at /home/pkgeval/.julia/packages/OrdinaryDiffEq/8Pn99/test/runtests.jl:29
   [24] top-level scope at util.jl:175
   [25] include(::String) at ./client.jl:441
   [26] top-level scope at none:6
   [27] eval(::Module, ::Any) at ./boot.jl:331
   [28] exec_options(::Base.JLOptions) at ./client.jl:264
   [29] _start() at ./client.jl:490
  
Test Summary:                                                       | Pass  Error  Broken  Total
Complex Tests                                                       |   35      1       8     44
  Complex Tests on Explicit Methods                                 |    3                     3
  Complex Tests on Explicit Methods                                 |    3                     3
  Complex Tests on Explicit Methods                                 |    3                     3
  Complex Tests on Explicit Methods                                 |    3                     3
  Complex Tests on Explicit Methods                                 |    3                     3
  Complex Tests on Implicit Autodiff Methods                        |                   1      1
  Complex Tests on Implicit Autodiff Methods                        |                   1      1
  Complex Tests on Implicit Autodiff Methods                        |                   1      1
  Complex Tests on Implicit Autodiff Methods                        |                   1      1
  Complex Tests on Implicit Finite Diff Methods                     |    1                     1
  Complex Tests on Implicit Finite Diff Methods                     |    1                     1
  Complex Tests on Implicit Finite Diff Methods                     |    1                     1
  Complex Tests on Implicit Finite Diff Methods                     |    1                     1
  Complex Tests on Implicit Finite Diff Out-of-place Methods        |           1              1
  Complex Tests on Implicit Finite Diff Out-of-place Methods SArray |    4              1      5
  Complex Tests on Implicit Finite Diff Out-of-place Methods SArray |    4              1      5
  Complex Tests on Implicit Finite Diff Out-of-place Methods SArray |    4              1      5
  Complex Tests on Implicit Finite Diff Out-of-place Methods SArray |    4              1      5
ERROR: LoadError: Some tests did not pass: 35 passed, 0 failed, 1 errored, 8 broken.
in expression starting at /home/pkgeval/.julia/packages/OrdinaryDiffEq/8Pn99/test/runtests.jl:10
ERROR: Package OrdinaryDiffEq errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:53
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1503
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:316
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:303
 [5] #test#68 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [7] #test#67 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [8] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [10] test(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [11] top-level scope at none:13
