Julia Version 1.5.0-DEV.299
Commit 6a9a92683d (2020-02-20 07:47 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Compat ────────────────────── v3.6.0
  Installed OrderedCollections ────────── v1.1.0
  Installed KCenters ──────────────────── v0.2.1
  Installed Tables ────────────────────── v1.0.1
  Installed MLDataPattern ─────────────── v0.5.0
  Installed MLDataUtils ───────────────── v0.5.0
  Installed JSON ──────────────────────── v0.21.0
  Installed StatsBase ─────────────────── v0.32.1
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed PooledArrays ──────────────── v0.5.3
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed LearnBase ─────────────────── v0.2.2
  Installed Reexport ──────────────────── v0.2.0
  Installed Missings ──────────────────── v0.4.3
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed SimilaritySearch ──────────── v0.3.19
  Installed Parsers ───────────────────── v0.3.11
  Installed InvertedIndices ───────────── v1.0.0
  Installed DataAPI ───────────────────── v1.1.0
  Installed DataStructures ────────────── v0.17.9
  Installed DataFrames ────────────────── v0.20.2
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.1
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.6.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.1
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.1
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_rzCNcu/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.6.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.1
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.1
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9360659371813138
[ Info: 0.8302954188982645
[ Info: 0.5548521900673707
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3287201485782862
mean(cdnet.distances) = 0.36412468694150446
mean(crand.distances) = 0.3573076287905375
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.365234375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.365234375,"f1":null,"seconds":3.939494490623474e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":5.4921875,"distances_sum":1016.7765551120283}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1708984375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1708984375,"f1":null,"seconds":3.0510127544403076e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":4.84375,"distances_sum":500.563822587802}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.365234375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.365234375,"f1":null,"seconds":3.939494490623474e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":5.4921875,"distances_sum":1016.7765551120283}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5703125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5703125,"f1":0.712084443334444,"seconds":4.502013325691223e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":7.2578125,"distances_sum":1557.7547037436823}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6669921875,"f1":0.7837551337551344,"seconds":4.740431904792786e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":7.671875,"distances_sum":1915.6829991434233}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6669921875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6669921875,"f1":0.7837551337551344,"seconds":4.740431904792786e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":7.671875,"distances_sum":1915.6829991434233}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9034371878121886,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.6328125,"distances_sum":2464.0131241040376}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8927884615384626,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.5625,"distances_sum":2385.4495392744966}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8494675463425473,"seconds":5.578622221946716e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.21875,"distances_sum":2188.979007052453}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8539647852147861,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.2265625,"distances_sum":2183.9474964385254}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8349609375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8349609375,"f1":0.9034371878121886,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.6328125,"distances_sum":2464.0131241040376}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8349609375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8349609375,"f1":0.9034371878121886,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.6328125,"distances_sum":2464.0131241040376}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4931640625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.4931640625,"f1":0.6467199467199473,"seconds":4.330649971961975e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":6.7265625,"distances_sum":1213.5023807820924}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3251953125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3251953125,"f1":null,"seconds":3.4999102354049683e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":5.359375,"distances_sum":819.8897795910949}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.326171875, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.326171875,"f1":null,"seconds":3.505498170852661e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":5.484375,"distances_sum":831.0936298723421}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4931640625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.4931640625,"f1":0.6467199467199473,"seconds":4.330649971961975e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":6.7265625,"distances_sum":1213.5023807820924}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9341840451215457,"seconds":6.023794412612915e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.828125,"distances_sum":2367.167108067413}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8612023393273402,"seconds":5.550682544708252e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.5546875,"distances_sum":1912.54878124184}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.642578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.642578125,"f1":0.7691797785547791,"seconds":4.567205905914307e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":7.7421875,"distances_sum":1597.1346061838613}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9102714993339996,"seconds":5.8300793170928955e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.7578125,"distances_sum":2180.495525245039}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6171875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6171875,"f1":0.7479660964035972,"seconds":4.773959517478943e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":7.640625,"distances_sum":1511.149850579266}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7832958707958717,"seconds":4.941597580909729e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":7.84375,"distances_sum":1648.0927890991966}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.8820060148185157,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.6953125,"distances_sum":2022.3825314312126}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8636087870462877,"seconds":5.4836273193359375e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.5390625,"distances_sum":1953.898844176647}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8916015625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8916015625,"f1":0.9341840451215457,"seconds":6.023794412612915e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.828125,"distances_sum":2367.167108067413}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9452469405594413,"seconds":5.865469574928284e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.8515625,"distances_sum":2408.80504407409}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9436069139194145,"seconds":5.992129445075989e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.921875,"distances_sum":2363.31257199106}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9638455294705297,"seconds":5.943700671195984e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.90625,"distances_sum":2532.3232872230856}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9600737803862808,"seconds":6.102025508880615e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.921875,"distances_sum":2504.1934636708497}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9638455294705297,"seconds":5.943700671195984e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.90625,"distances_sum":2532.3232872230856}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9638455294705297,"seconds":5.943700671195984e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.90625,"distances_sum":2532.3232872230856}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3642578125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3642578125,"f1":null,"seconds":3.956258296966553e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":6.09375,"distances_sum":872.1702884850484}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.654296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.654296875,"f1":0.777705454267955,"seconds":4.999339580535889e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.1640625,"distances_sum":1606.2087232399037}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.654296875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.654296875,"f1":0.777705454267955,"seconds":4.999339580535889e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.1640625,"distances_sum":1606.2087232399037}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.8999666999667006,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.8828125,"distances_sum":2127.546385371963}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8468651140526148,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.4609375,"distances_sum":1865.6920940907703}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8520328629703636,"seconds":5.17629086971283e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.3984375,"distances_sum":1946.9047306557586}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8330078125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8330078125,"f1":0.8999666999667006,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.8828125,"distances_sum":2127.546385371963}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9407254204129211,"seconds":5.725771188735962e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.8828125,"distances_sum":2364.8562989726115}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9230602730602736,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.8828125,"distances_sum":2265.1390494022025}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9562156593406596,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.90625,"distances_sum":2499.0492279344103}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9415438727938734,"seconds":5.407258868217468e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.8203125,"distances_sum":2405.3218550281385}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9562156593406596,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.90625,"distances_sum":2499.0492279344103}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.923828125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9562156593406596,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.90625,"distances_sum":2499.0492279344103}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.134765625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.134765625,"f1":null,"seconds":2.5909394025802612e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":4.1640625,"distances_sum":367.70729753770445}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.134765625,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.134765625,"f1":null,"seconds":2.5909394025802612e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":4.1640625,"distances_sum":367.70729753770445}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.134765625,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.134765625,"f1":null,"seconds":2.5909394025802612e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":4.1640625,"distances_sum":367.70729753770445}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2060546875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2060546875,"f1":null,"seconds":3.4458935260772705e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":5.875,"distances_sum":497.08385527281837}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.529296875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.529296875,"f1":0.6765434218559223,"seconds":4.023313522338867e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.4375,"distances_sum":1069.5096228678387}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.529296875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.529296875,"f1":0.6765434218559223,"seconds":4.023313522338867e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.4375,"distances_sum":1069.5096228678387}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8594447219447229,"seconds":5.234032869338989e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.3125,"distances_sum":1781.4305594513603}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.8416925088800096,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.2265625,"distances_sum":1681.1668152374614}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7705078125,"state":{"ssize":7,"bsize":5},"perf":{"precision":1.0,"recall":0.7705078125,"f1":0.8594447219447229,"seconds":5.234032869338989e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.3125,"distances_sum":1781.4305594513603}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9337740384615391,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.7109375,"distances_sum":2239.1267117803536}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9440705128205135,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.734375,"distances_sum":2323.936101177857}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9254464285714292,"seconds":5.662441253662109e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.7265625,"distances_sum":2169.0261294134084}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9162982850482855,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.59375,"distances_sum":2172.6829894193565}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9440705128205135,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.734375,"distances_sum":2323.936101177857}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.90234375,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9440705128205135,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.734375,"distances_sum":2323.936101177857}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.67578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.67578125,"f1":0.7938087953712961,"seconds":4.850327968597412e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.265625,"distances_sum":1516.1404805041109}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3955078125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3955078125,"f1":null,"seconds":3.956258296966553e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":5.9375,"distances_sum":800.8587173056573}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.67578125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.67578125,"f1":0.7938087953712961,"seconds":4.850327968597412e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.265625,"distances_sum":1516.1404805041109}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9528388278388285,"seconds":5.8747828006744385e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.796875,"distances_sum":2476.6204372813027}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9528388278388285,"seconds":5.8747828006744385e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.796875,"distances_sum":2476.6204372813027}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.982217261904762,"seconds":6.237998604774475e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9296875,"distances_sum":2663.3113330276055}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.966796875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.982217261904762,"seconds":6.237998604774475e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9296875,"distances_sum":2663.3113330276055}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.966796875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.982217261904762,"seconds":6.237998604774475e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9296875,"distances_sum":2663.3113330276055}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.408203125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.408203125,"f1":null,"seconds":3.864988684654236e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":5.6875,"distances_sum":890.6569033438321}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7887810106560114,"seconds":4.556030035018921e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":6.921875,"distances_sum":1582.270441057846}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6728515625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6728515625,"f1":0.7887810106560114,"seconds":4.556030035018921e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":6.921875,"distances_sum":1582.270441057846}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7392578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7392578125,"f1":0.8417046495171504,"seconds":5.163252353668213e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":7.6171875,"distances_sum":1807.5064275829516}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9194597069597075,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.59375,"distances_sum":2384.909475544055}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8988756035631045,"seconds":5.83939254283905e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.5,"distances_sum":2181.7242630424344}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8903341450216458,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.3828125,"distances_sum":2173.2849290711792}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8642578125,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8642578125,"f1":0.9194597069597075,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.59375,"distances_sum":2384.909475544055}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9524038461538468,"seconds":6.258487701416016e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.8203125,"distances_sum":2560.8128229788613}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9345352564102573,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.734375,"distances_sum":2420.6107083959328}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9400927197802204,"seconds":6.0014426708221436e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.71875,"distances_sum":2479.1398851265308}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.947424450549451,"seconds":5.727633833885193e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.7421875,"distances_sum":2545.725667425078}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9610550907425911,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.84375,"distances_sum":2615.3666380800773}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9610550907425911,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.84375,"distances_sum":2615.3666380800773}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.931640625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9610550907425911,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.84375,"distances_sum":2615.3666380800773}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8695892649017656,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.296875,"distances_sum":1933.7996193721885}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3671875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3671875,"f1":null,"seconds":3.647059202194214e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":5.6328125,"distances_sum":813.1324783177467}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7841796875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7841796875,"f1":0.8695892649017656,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.296875,"distances_sum":1933.7996193721885}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9239213911088916,"seconds":6.18956983089447e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.671875,"distances_sum":2344.436230085979}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9399496336996345,"seconds":5.833804607391357e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.7265625,"distances_sum":2476.277979686663}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9638221153846157,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8828125,"distances_sum":2622.9583395602567}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9638221153846157,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8828125,"distances_sum":2622.9583395602567}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":2,"bsize":13}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9793727106227108,"seconds":6.271526217460632e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.96875,"distances_sum":2707.7875168348164}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.975875686813187,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9609375,"distances_sum":2682.6430689820413}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":2,"bsize":13},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9793727106227108,"seconds":6.271526217460632e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.96875,"distances_sum":2707.7875168348164}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":2,"bsize":13},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9793727106227108,"seconds":6.271526217460632e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.96875,"distances_sum":2707.7875168348164}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4365234375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4365234375,"f1":null,"seconds":3.891065716743469e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.125,"distances_sum":951.512692879147}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4365234375,"state":{"ssize":2,"bsize":2},"perf":{"precision":null,"recall":0.4365234375,"f1":null,"seconds":3.891065716743469e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.125,"distances_sum":951.512692879147}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.572265625, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.572265625,"f1":null,"seconds":4.459172487258911e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.6796875,"distances_sum":1256.5161428632432}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7373046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7373046875,"f1":0.8387742465867474,"seconds":5.245208740234375e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.7734375,"distances_sum":1761.833239445404}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7880997474747483,"seconds":4.647299647331238e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.0703125,"distances_sum":1528.302010497657}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8462662337662347,"seconds":4.90434467792511e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.796875,"distances_sum":1801.300652599433}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.576171875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.576171875,"f1":0.7147177475302483,"seconds":4.453584551811218e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.6875,"distances_sum":1275.8206126338691}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5751953125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5751953125,"f1":0.7154966561216569,"seconds":4.284083843231201e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.875,"distances_sum":1301.853257425766}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7470703125,"state":{"ssize":8,"bsize":5},"perf":{"precision":1.0,"recall":0.7470703125,"f1":0.8462662337662347,"seconds":4.90434467792511e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.796875,"distances_sum":1801.300652599433}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":10,"bsize":7}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.921034694472195,"seconds":5.619600415229797e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.671875,"distances_sum":2346.26455983653}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9268575174825181,"seconds":6.198883056640625e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.796875,"distances_sum":2332.7921469459448}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.897501977189478,"seconds":5.949288606643677e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.515625,"distances_sum":2121.9482126923194}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9441163003663007,"seconds":5.949288606643677e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.71875,"distances_sum":2497.5396560737418}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.931616300366301,"seconds":5.902722477912903e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.7421875,"distances_sum":2415.713878370977}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8980082417582426,"seconds":5.496665835380554e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.484375,"distances_sum":2115.5335726303274}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9049310064935072,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.5390625,"distances_sum":2190.010907064462}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9441163003663007,"seconds":5.949288606643677e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.71875,"distances_sum":2497.5396560737418}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.90234375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9441163003663007,"seconds":5.949288606643677e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.71875,"distances_sum":2497.5396560737418}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.728515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.728515625,"f1":0.8339035964035972,"seconds":4.988163709640503e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":7.6171875,"distances_sum":1835.019537203475}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.64453125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.64453125,"f1":0.770602661227662,"seconds":4.505738615989685e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":6.8203125,"distances_sum":1475.8276702651135}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.728515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.728515625,"f1":0.8339035964035972,"seconds":4.988163709640503e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":7.6171875,"distances_sum":1835.019537203475}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9507299991674997,"seconds":5.610287189483643e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.71875,"distances_sum":2669.0970805187094}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.8991014194139203,"seconds":5.474314093589783e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.5078125,"distances_sum":2222.4723644889596}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9314274267399276,"seconds":5.751848220825195e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.7734375,"distances_sum":2479.2811642176152}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9513278388278394,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.8046875,"distances_sum":2636.6591676129656}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9507299991674997,"seconds":5.610287189483643e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.71875,"distances_sum":2669.0970805187094}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9700148809523814,"seconds":6.064772605895996e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.9140625,"distances_sum":2756.763061560904}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9793898809523812,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.953125,"distances_sum":2830.102703587028}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9697265625, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.9697265625,"f1":0.9833905677655681,"seconds":6.0014426708221436e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.9921875,"distances_sum":2849.585257489011}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9556833791208795,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.7734375,"distances_sum":2691.1186705802684}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.971783424908425,"seconds":6.3944607973098755e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.9140625,"distances_sum":2785.398757994654}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9535428113553119,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.8125,"distances_sum":2653.687132448937}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9697265625,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.9833905677655681,"seconds":6.0014426708221436e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.9921875,"distances_sum":2849.585257489011}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9697265625,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.9833905677655681,"seconds":6.0014426708221436e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.9921875,"distances_sum":2849.585257489011}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2607421875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2607421875,"f1":null,"seconds":3.4831464290618896e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":6.0,"distances_sum":617.7897811544867}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.263671875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.263671875,"f1":null,"seconds":3.602355718612671e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":6.171875,"distances_sum":678.7330775308731}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.404296875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.404296875,"f1":null,"seconds":3.689900040626526e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":5.859375,"distances_sum":830.839573211114}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.404296875,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.404296875,"f1":null,"seconds":3.689900040626526e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":5.859375,"distances_sum":830.839573211114}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8628782675657685,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.90625,"distances_sum":1913.6068787349718}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.421875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.421875,"f1":null,"seconds":3.829598426818848e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":6.15625,"distances_sum":932.476091271015}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6640625,"f1":0.7858358655233663,"seconds":4.7907233238220215e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.296875,"distances_sum":1522.3361137283184}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7896523615273624,"seconds":4.716217517852783e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.3203125,"distances_sum":1583.1249708726205}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.871240218115219,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.0078125,"distances_sum":1960.9719383012246}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7841796875,"state":{"ssize":8,"bsize":5},"perf":{"precision":1.0,"recall":0.7841796875,"f1":0.871240218115219,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.0078125,"distances_sum":1960.9719383012246}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":10,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8946230852480862,"seconds":5.617737770080566e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.515625,"distances_sum":2092.641126670619}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9627232142857146,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8515625,"distances_sum":2617.530845479516}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9277644230769237,"seconds":5.6978315114974976e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.6484375,"distances_sum":2360.905339197062}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8046875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8046875,"f1":0.8866414835164843,"seconds":5.587935447692871e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.34375,"distances_sum":2072.8273823388795}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.904945054945056,"seconds":5.666166543960571e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.5234375,"distances_sum":2167.2325396685337}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9627232142857146,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8515625,"distances_sum":2617.530845479516}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9627232142857146,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8515625,"distances_sum":2617.530845479516}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6953125,"f1":0.8083166833166842,"seconds":4.9211084842681885e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.3203125,"distances_sum":1579.4828654373516}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.56640625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.56640625,"f1":0.705760385447886,"seconds":4.1425228118896484e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.7421875,"distances_sum":1214.6848933743297}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.24609375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.24609375,"f1":null,"seconds":3.67872416973114e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.0,"distances_sum":549.5732830001657}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6953125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6953125,"f1":0.8083166833166842,"seconds":4.9211084842681885e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.3203125,"distances_sum":1579.4828654373516}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8467777014652021,"seconds":5.284324288368225e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.7265625,"distances_sum":1754.0619031844915}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73828125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.73828125,"f1":0.8427119755244763,"seconds":5.170702934265137e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.734375,"distances_sum":1701.2357928739448}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9054461163836173,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.484375,"distances_sum":2115.978583489633}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.936338141025642,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.65625,"distances_sum":2349.3423475734426}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8485436438561447,"seconds":5.114823579788208e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.84375,"distances_sum":1744.1081818448422}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8549539002664011,"seconds":4.973262548446655e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.75,"distances_sum":1753.3110310577417}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.890625,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.890625,"f1":0.936338141025642,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.65625,"distances_sum":2349.3423475734426}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9423050907425913,"seconds":5.679205060005188e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.640625,"distances_sum":2401.94087861811}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9698489010989013,"seconds":5.995854735374451e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.875,"distances_sum":2612.7236139080683}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9653674450549455,"seconds":6.105750799179077e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.875,"distances_sum":2573.7838913108935}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9509558150183156,"seconds":5.8766454458236694e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.7890625,"distances_sum":2484.60445223587}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9589514652014659,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.84375,"distances_sum":2507.912889900967}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9649381868131874,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.875,"distances_sum":2556.9255905788455}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9416182775557782,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.6875,"distances_sum":2396.259211962426}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9481627747252754,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.7421875,"distances_sum":2484.9209179871896}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9698489010989013,"seconds":5.995854735374451e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.875,"distances_sum":2612.7236139080683}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9453125,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9698489010989013,"seconds":5.995854735374451e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.875,"distances_sum":2612.7236139080683}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.685546875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.685546875,"f1":0.799799506049507,"seconds":5.017966032028198e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.6796875,"distances_sum":1541.3477780919097}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6826171875,"f1":0.8001219266844274,"seconds":4.911795258522034e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.640625,"distances_sum":1510.4531816660447}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.685546875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.685546875,"f1":0.799799506049507,"seconds":5.017966032028198e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.6796875,"distances_sum":1541.3477780919097}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9155448717948727,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.6875,"distances_sum":2148.9739371689284}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9298649267399275,"seconds":5.6438148021698e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8125,"distances_sum":2281.5781633392903}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9558836996337,"seconds":5.9194862842559814e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.890625,"distances_sum":2448.463822126617}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.909538378288379,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.6171875,"distances_sum":2119.797646848296}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9558836996337,"seconds":5.9194862842559814e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.890625,"distances_sum":2448.463822126617}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9785542582417588,"seconds":6.321817636489868e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9453125,"distances_sum":2611.4820041477856}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9661858974358978,"seconds":5.986541509628296e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9296875,"distances_sum":2514.8101562785937}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9703525641025645,"seconds":6.195157766342163e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9375,"distances_sum":2549.039744770697}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.978239468864469,"seconds":6.528571248054504e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9375,"distances_sum":2609.0726293847583}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.965012591575092,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.890625,"distances_sum":2522.5329997159897}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9651442307692311,"seconds":6.016343832015991e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.921875,"distances_sum":2518.20854241032}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9785542582417588,"seconds":6.321817636489868e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9453125,"distances_sum":2611.4820041477856}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9785542582417588,"seconds":6.321817636489868e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9453125,"distances_sum":2611.4820041477856}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8674200799200805,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.1640625,"distances_sum":1913.0676910070167}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.19140625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.19140625,"f1":null,"seconds":3.291293978691101e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":5.578125,"distances_sum":473.1957838638346}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8534803737928747,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.09375,"distances_sum":1803.6872270193492}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7783203125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7783203125,"f1":0.8674200799200805,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.1640625,"distances_sum":1913.0676910070167}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.93892825924076,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7734375,"distances_sum":2439.495563727969}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9451381951381959,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8984375,"distances_sum":2437.464242864279}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9540636446886454,"seconds":5.980953574180603e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.890625,"distances_sum":2525.09761473021}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8486328125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8486328125,"f1":0.9096533674658682,"seconds":5.820766091346741e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7578125,"distances_sum":2231.8904536073755}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9540636446886454,"seconds":5.980953574180603e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.890625,"distances_sum":2525.09761473021}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9766369047619052,"seconds":6.388872861862183e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9609375,"distances_sum":2672.3909376306747}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9809523809523812,"seconds":6.036832928657532e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9921875,"distances_sum":2708.116779849395}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9612783050283055,"seconds":6.077811121940613e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.890625,"distances_sum":2579.0184185525914}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9676739926739927,"seconds":6.027519702911377e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.921875,"distances_sum":2619.6224888352986}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9654075091575096,"seconds":5.939975380897522e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.921875,"distances_sum":2615.054012775598}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9597527472527478,"seconds":6.103888154029846e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9609375,"distances_sum":2544.135288122444}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96484375,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9809523809523812,"seconds":6.036832928657532e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9921875,"distances_sum":2708.116779849395}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96484375,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9809523809523812,"seconds":6.036832928657532e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9921875,"distances_sum":2708.116779849395}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5439453125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5439453125,"f1":0.6871645715395722,"seconds":4.1853636503219604e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":6.8828125,"distances_sum":1245.852580591638}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8558670496170504,"seconds":5.200505256652832e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.1640625,"distances_sum":1870.2231544307947}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7626953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7626953125,"f1":0.8558670496170504,"seconds":5.200505256652832e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.1640625,"distances_sum":1870.2231544307947}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9526327838827845,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.7734375,"distances_sum":2517.835769461052}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9526327838827845,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.7734375,"distances_sum":2517.835769461052}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9676167582417583,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.859375,"distances_sum":2608.8839269322407}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9640682234432238,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.875,"distances_sum":2580.9383351587503}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9676167582417583,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.859375,"distances_sum":2608.8839269322407}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9676167582417583,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.859375,"distances_sum":2608.8839269322407}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.177734375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.177734375,"f1":null,"seconds":3.0938535928726196e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":5.796875,"distances_sum":401.7017837189096}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.18359375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.18359375,"f1":null,"seconds":3.3173710107803345e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":5.9453125,"distances_sum":439.75345614465095}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.18359375,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.18359375,"f1":null,"seconds":3.3173710107803345e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":5.9453125,"distances_sum":439.75345614465095}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.37890625, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.37890625,"f1":null,"seconds":3.6116689443588257e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":5.921875,"distances_sum":872.0028449672445}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.35546875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.35546875,"f1":null,"seconds":3.643333911895752e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":5.734375,"distances_sum":852.2261333717694}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.193359375, conf: {"ssize":6,"bsize":1}, perf: {"precision":null,"recall":0.193359375,"f1":null,"seconds":3.3490359783172607e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":6.015625,"distances_sum":456.18193217313353}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7109375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.7109375,"f1":0.8187281468531478,"seconds":4.855915904045105e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.6953125,"distances_sum":1747.811902635804}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7109375,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.7109375,"f1":0.8187281468531478,"seconds":4.855915904045105e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.6953125,"distances_sum":1747.811902635804}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9386275183150188,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.796875,"distances_sum":2437.600363558545}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8480124042624051,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.15625,"distances_sum":1880.2531944915372}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7998046875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7998046875,"f1":0.8802005286380296,"seconds":5.2656978368759155e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.34375,"distances_sum":2002.0402126660451}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8935546875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9386275183150188,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.796875,"distances_sum":2437.600363558545}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8935546875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9386275183150188,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.796875,"distances_sum":2437.600363558545}}, n: 9
mean(cfft.distances) = 0.89857461159352
mean(cdnet.distances) = 0.4151813332614532
mean(crand.distances) = 0.343776532273657
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.9
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9155555555555556
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8622222222222223
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.888888888888889
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.84
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8955555555555555
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.888888888888889
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8422222222222221
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9288888888888889
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8866666666666667
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8999999999999999
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9222222222222222
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9244444444444445
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8733333333333332
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9333333333333332
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8755555555555555
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8555555555555555
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9355555555555556
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9133333333333332
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9066666666666667
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8622222222222223
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9022222222222224
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8911111111111111
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9044444444444445
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 10, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 10, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 10, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 10, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 10, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 10, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 1]
acc = 0.9466666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 10, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 1]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5442572029431662] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 1, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 12, 1]]
** centroid: 5, normalized-entropy: 0.3912435636292556, [(2, 12), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 30, 1]]
** centroid: 7, normalized-entropy: 0.2055925081850832, [(2, 30), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 10: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 11, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 12: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
finished with 13 centroids; started with 12
acc = 0.96
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.37325451658988323] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37325451658988323, 0.3370142157060897] ***
*** starting iteration: 2; err: [Inf, 0.37325451658988323, 0.3370142157060897] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37325451658988323, 0.3370142157060897, 0.3365849950183015] ***
*** finished computation of 3 references, err: [Inf, 0.37325451658988323, 0.3370142157060897, 0.3365849950183015] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [99, 142, 22]]
** centroid: 1, normalized-entropy: 0.8265846739295004, [(1, 99), (2, 142), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [189, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [128, 85, 0]]
** centroid: 3, normalized-entropy: 0.9703986832694784, [(1, 128), (2, 85)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.42176978295115203] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42176978295115203, 0.30374326519024847] ***
*** finished computation of 3 references, err: [Inf, 0.42176978295115203, 0.30374326519024847] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [272, 31, 0]]
** centroid: 1, normalized-entropy: 0.476276364852207, [(1, 272), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [144, 41, 0]]
** centroid: 2, normalized-entropy: 0.7631175016134235, [(1, 144), (2, 41)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 156, 22]]
** centroid: 3, normalized-entropy: 0.5396084773004918, [(2, 156), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.41842584157044227] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41842584157044227, 0.30571172480796766] ***
*** finished computation of 3 references, err: [Inf, 0.41842584157044227, 0.30571172480796766] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [259, 21, 0]]
** centroid: 1, normalized-entropy: 0.3843115441264972, [(1, 259), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [152, 45, 0]]
** centroid: 2, normalized-entropy: 0.7752580561149532, [(1, 152), (2, 45)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 164, 26]]
** centroid: 3, normalized-entropy: 0.5759084429149787, [(2, 164), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4227190159311493] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4227190159311493, 0.3086507648796491] ***
*** finished computation of 3 references, err: [Inf, 0.4227190159311493, 0.3086507648796491] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [280, 37, 0]]
** centroid: 1, normalized-entropy: 0.5198563194994649, [(1, 280), (2, 37)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 158, 22]]
** centroid: 2, normalized-entropy: 0.5357150195407704, [(2, 158), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [115, 55, 0]]
** centroid: 3, normalized-entropy: 0.9081783472997053, [(1, 115), (2, 55)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4863753102680629] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4863753102680629, 0.30649546912504927] ***
*** starting iteration: 2; err: [Inf, 0.4863753102680629, 0.30649546912504927] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4863753102680629, 0.30649546912504927, 0.3040121411289404] ***
*** starting iteration: 3; err: [Inf, 0.4863753102680629, 0.30649546912504927, 0.3040121411289404] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4863753102680629, 0.30649546912504927, 0.3040121411289404, 0.30239317779829195] ***
*** starting iteration: 4; err: [Inf, 0.4863753102680629, 0.30649546912504927, 0.3040121411289404, 0.30239317779829195] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4863753102680629, 0.30649546912504927, 0.3040121411289404, 0.30239317779829195, 0.3017392090602859] ***
*** finished computation of 3 references, err: [Inf, 0.4863753102680629, 0.30649546912504927, 0.3040121411289404, 0.30239317779829195, 0.3017392090602859] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [259, 11, 0]]
** centroid: 1, normalized-entropy: 0.24567821069591328, [(1, 259), (2, 11)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [2, 151, 22]]
** centroid: 2, normalized-entropy: 0.39966816077301875, [(1, 2), (2, 151), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [155, 66, 0]]
** centroid: 3, normalized-entropy: 0.8796252078296002, [(1, 155), (2, 66)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4618790870060449] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4618790870060449, 0.3053494850480775] ***
*** starting iteration: 2; err: [Inf, 0.4618790870060449, 0.3053494850480775] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4618790870060449, 0.3053494850480775, 0.30372956367502774] ***
*** starting iteration: 3; err: [Inf, 0.4618790870060449, 0.3053494850480775, 0.30372956367502774] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4618790870060449, 0.3053494850480775, 0.30372956367502774, 0.30316045066283115] ***
*** finished computation of 3 references, err: [Inf, 0.4618790870060449, 0.3053494850480775, 0.30372956367502774, 0.30316045066283115] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [277, 6, 0]]
** centroid: 1, normalized-entropy: 0.1481340202172107, [(1, 277), (2, 6)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [6, 166, 26]]
** centroid: 2, normalized-entropy: 0.4736270404656171, [(1, 6), (2, 166), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [128, 58, 0]]
** centroid: 3, normalized-entropy: 0.8952722642402938, [(1, 128), (2, 58)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.44256609467708546] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44256609467708546, 0.30295127267478733] ***
*** starting iteration: 2; err: [Inf, 0.44256609467708546, 0.30295127267478733] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44256609467708546, 0.30295127267478733, 0.30072538172644653] ***
*** starting iteration: 3; err: [Inf, 0.44256609467708546, 0.30295127267478733, 0.30072538172644653] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44256609467708546, 0.30295127267478733, 0.30072538172644653, 0.3001656307220303] ***
*** finished computation of 3 references, err: [Inf, 0.44256609467708546, 0.30295127267478733, 0.30072538172644653, 0.3001656307220303] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [258, 9, 0]]
** centroid: 1, normalized-entropy: 0.21265863988163503, [(1, 258), (2, 9)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [3, 167, 22]]
** centroid: 2, normalized-entropy: 0.39555286576293275, [(1, 3), (2, 167), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [134, 74, 0]]
** centroid: 3, normalized-entropy: 0.9391151961320356, [(1, 134), (2, 74)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.43305024200093906] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43305024200093906, 0.30372634304648227] ***
*** starting iteration: 2; err: [Inf, 0.43305024200093906, 0.30372634304648227] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43305024200093906, 0.30372634304648227, 0.30231500276037165] ***
*** starting iteration: 3; err: [Inf, 0.43305024200093906, 0.30372634304648227, 0.30231500276037165] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43305024200093906, 0.30372634304648227, 0.30231500276037165, 0.3018431142336121] ***
*** finished computation of 3 references, err: [Inf, 0.43305024200093906, 0.30372634304648227, 0.30231500276037165, 0.3018431142336121] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [262, 19, 0]]
** centroid: 1, normalized-entropy: 0.3569620883410681, [(1, 262), (2, 19)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 165, 22]]
** centroid: 2, normalized-entropy: 0.5225593745369407, [(2, 165), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [154, 44, 0]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(1, 154), (2, 44)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39790681894796004] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39790681894796004, 0.3123826821672561] ***
*** starting iteration: 2; err: [Inf, 0.39790681894796004, 0.3123826821672561] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39790681894796004, 0.3123826821672561, 0.3061204905156744] ***
*** starting iteration: 3; err: [Inf, 0.39790681894796004, 0.3123826821672561, 0.3061204905156744] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39790681894796004, 0.3123826821672561, 0.3061204905156744, 0.3044262276515588] ***
*** finished computation of 3 references, err: [Inf, 0.39790681894796004, 0.3123826821672561, 0.3061204905156744, 0.3044262276515588] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [254, 23, 0]]
** centroid: 1, normalized-entropy: 0.41277525114145763, [(1, 254), (2, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [157, 47, 0]]
** centroid: 2, normalized-entropy: 0.7786942948889739, [(1, 157), (2, 47)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 160, 26]]
** centroid: 3, normalized-entropy: 0.5836753280239112, [(2, 160), (3, 26)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3912913234041504] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3912913234041504, 0.2961865568357608] ***
*** starting iteration: 2; err: [Inf, 0.3912913234041504, 0.2961865568357608] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3912913234041504, 0.2961865568357608, 0.2932545845627204] ***
*** starting iteration: 3; err: [Inf, 0.3912913234041504, 0.2961865568357608, 0.2932545845627204] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3912913234041504, 0.2961865568357608, 0.2932545845627204, 0.2923774585194852] ***
*** finished computation of 3 references, err: [Inf, 0.3912913234041504, 0.2961865568357608, 0.2932545845627204, 0.2923774585194852] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [90, 157, 22]]
** centroid: 1, normalized-entropy: 0.8058864421216688, [(1, 90), (2, 157), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [113, 93, 0]]
** centroid: 2, normalized-entropy: 0.9931898855037856, [(1, 113), (2, 93)]
*** center 3: selecting labels [1] (freq >= 1) [from [192, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.41193345373683515] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41193345373683515, 0.3108987532153927] ***
*** starting iteration: 2; err: [Inf, 0.41193345373683515, 0.3108987532153927] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41193345373683515, 0.3108987532153927, 0.302099645641846] ***
*** starting iteration: 3; err: [Inf, 0.41193345373683515, 0.3108987532153927, 0.302099645641846] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41193345373683515, 0.3108987532153927, 0.302099645641846, 0.29957792641541947] ***
*** finished computation of 3 references, err: [Inf, 0.41193345373683515, 0.3108987532153927, 0.302099645641846, 0.29957792641541947] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [114, 80, 0]]
** centroid: 1, normalized-entropy: 0.9777287741161507, [(1, 114), (2, 80)]
*** center 2: selecting labels [1] (freq >= 2) [from [220, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [77, 150, 26]]
** centroid: 3, normalized-entropy: 0.824499437179289, [(1, 77), (2, 150), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4207069956288412] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4207069956288412, 0.35711277854758716] ***
*** starting iteration: 2; err: [Inf, 0.4207069956288412, 0.35711277854758716] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4207069956288412, 0.35711277854758716, 0.3123026587504676] ***
*** starting iteration: 3; err: [Inf, 0.4207069956288412, 0.35711277854758716, 0.3123026587504676] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4207069956288412, 0.35711277854758716, 0.3123026587504676, 0.3051785733913821] ***
*** finished computation of 3 references, err: [Inf, 0.4207069956288412, 0.35711277854758716, 0.3123026587504676, 0.3051785733913821] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [145, 61, 0]]
** centroid: 1, normalized-entropy: 0.8764918104671914, [(1, 145), (2, 61)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 141, 22]]
** centroid: 2, normalized-entropy: 0.5709107536283142, [(2, 141), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [250, 48, 0]]
** centroid: 3, normalized-entropy: 0.636872308381164, [(1, 250), (2, 48)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.379430561541795] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.379430561541795, 0.24531004412935953] ***
*** starting iteration: 2; err: [Inf, 0.379430561541795, 0.24531004412935953] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.379430561541795, 0.24531004412935953, 0.23608457271775998] ***
*** starting iteration: 3; err: [Inf, 0.379430561541795, 0.24531004412935953, 0.23608457271775998] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.379430561541795, 0.24531004412935953, 0.23608457271775998, 0.23445790898133148] ***
*** starting iteration: 4; err: [Inf, 0.379430561541795, 0.24531004412935953, 0.23608457271775998, 0.23445790898133148] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.379430561541795, 0.24531004412935953, 0.23608457271775998, 0.23445790898133148, 0.23434496063643973] ***
*** finished computation of 3 references, err: [Inf, 0.379430561541795, 0.24531004412935953, 0.23608457271775998, 0.23445790898133148, 0.23434496063643973] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [131, 93, 2]]
** centroid: 1, normalized-entropy: 0.6584010572374656, [(1, 131), (2, 93), (3, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [197, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [88, 135, 20]]
** centroid: 3, normalized-entropy: 0.8191461950712514, [(1, 88), (2, 135), (3, 20)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29669440250335516] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29669440250335516, 0.2548718329859727] ***
*** starting iteration: 2; err: [Inf, 0.29669440250335516, 0.2548718329859727] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29669440250335516, 0.2548718329859727, 0.2442977636608517] ***
*** starting iteration: 3; err: [Inf, 0.29669440250335516, 0.2548718329859727, 0.2442977636608517] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29669440250335516, 0.2548718329859727, 0.2442977636608517, 0.2419368192397136] ***
*** starting iteration: 4; err: [Inf, 0.29669440250335516, 0.2548718329859727, 0.2442977636608517, 0.2419368192397136] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29669440250335516, 0.2548718329859727, 0.2442977636608517, 0.2419368192397136, 0.2414854758152406] ***
*** finished computation of 3 references, err: [Inf, 0.29669440250335516, 0.2548718329859727, 0.2442977636608517, 0.2419368192397136, 0.2414854758152406] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [156, 55, 0]]
** centroid: 1, normalized-entropy: 0.8277459641272469, [(1, 156), (2, 55)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [3, 170, 26]]
** centroid: 2, normalized-entropy: 0.42207463133430345, [(1, 3), (2, 170), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [252, 5, 0]]
** centroid: 3, normalized-entropy: 0.13837092586152097, [(1, 252), (2, 5)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2774641737341881] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2774641737341881, 0.23603519238601403] ***
*** starting iteration: 2; err: [Inf, 0.2774641737341881, 0.23603519238601403] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2774641737341881, 0.23603519238601403, 0.23344888246856976] ***
*** starting iteration: 3; err: [Inf, 0.2774641737341881, 0.23603519238601403, 0.23344888246856976] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2774641737341881, 0.23603519238601403, 0.23344888246856976, 0.23288086538008976] ***
*** finished computation of 3 references, err: [Inf, 0.2774641737341881, 0.23603519238601403, 0.23344888246856976, 0.23288086538008976] ***
*** center 1: selecting labels [1] (freq >= 1) [from [201, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [77, 151, 22]]
** centroid: 2, normalized-entropy: 0.8020300698327174, [(1, 77), (2, 151), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [117, 99, 0]]
** centroid: 3, normalized-entropy: 0.9949848281859699, [(1, 117), (2, 99)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2570192659729616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2570192659729616, 0.2033783623881571] ***
*** finished computation of 7 references, err: [Inf, 0.2570192659729616, 0.2033783623881571] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [41, 36, 0]]
** centroid: 1, normalized-entropy: 0.9969562518473082, [(1, 41), (2, 36)]
*** center 2: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [136, 46, 0]]
** centroid: 3, normalized-entropy: 0.8156034512499668, [(1, 136), (2, 46)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 69, 9]]
** centroid: 4, normalized-entropy: 0.5159469300074472, [(2, 69), (3, 9)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [58, 37, 0]]
** centroid: 5, normalized-entropy: 0.9644590583765235, [(1, 58), (2, 37)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 40, 13]]
** centroid: 7, normalized-entropy: 0.8037159237834126, [(2, 40), (3, 13)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2572602841547918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2572602841547918, 0.2184244360986991] ***
*** finished computation of 7 references, err: [Inf, 0.2572602841547918, 0.2184244360986991] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [83, 20, 0]]
** centroid: 1, normalized-entropy: 0.7101234912653349, [(1, 83), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [114, 14, 0]]
** centroid: 2, normalized-entropy: 0.49802788653447644, [(1, 114), (2, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 25, 0]]
** centroid: 3, normalized-entropy: 0.9093934226727598, [(1, 52), (2, 25)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 39, 26]]
** centroid: 4, normalized-entropy: 0.9709505944546688, [(2, 39), (3, 26)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 91, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 41, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [162, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25839590677234725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25839590677234725, 0.20485542364686593] ***
*** finished computation of 7 references, err: [Inf, 0.25839590677234725, 0.20485542364686593] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 69, 22]]
** centroid: 1, normalized-entropy: 0.7979519684655734, [(2, 69), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [151, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [45, 42, 0]]
** centroid: 4, normalized-entropy: 0.999142103991909, [(1, 45), (2, 42)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [10, 45, 0]]
** centroid: 5, normalized-entropy: 0.6840384356390419, [(1, 10), (2, 45)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [29, 94, 0]]
** centroid: 6, normalized-entropy: 0.7879388881327561, [(1, 29), (2, 94)]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3759716948237013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3759716948237013, 0.2390413033222226] ***
*** finished computation of 7 references, err: [Inf, 0.3759716948237013, 0.2390413033222226] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [30, 24, 0]]
** centroid: 2, normalized-entropy: 0.9910760598382222, [(1, 30), (2, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [104, 65, 0]]
** centroid: 3, normalized-entropy: 0.961236604722876, [(1, 104), (2, 65)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [208, 7, 0]]
** centroid: 4, normalized-entropy: 0.20706286899527251, [(1, 208), (2, 7)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 40, 4]]
** centroid: 5, normalized-entropy: 0.43949698692151346, [(2, 40), (3, 4)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [74, 37, 0]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(1, 74), (2, 37)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 55, 5]]
** centroid: 7, normalized-entropy: 0.4138168503036336, [(2, 55), (3, 5)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23691960261726955] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23691960261726955, 0.21139325223572697] ***
*** finished computation of 7 references, err: [Inf, 0.23691960261726955, 0.21139325223572697] ***
*** center 1: selecting labels [1] (freq >= 1) [from [134, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [17, 79, 0]]
** centroid: 3, normalized-entropy: 0.673654715229001, [(1, 17), (2, 79)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [85, 18, 0]]
** centroid: 4, normalized-entropy: 0.6684725699243225, [(1, 85), (2, 18)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 64, 26]]
** centroid: 5, normalized-entropy: 0.8672816222000259, [(2, 64), (3, 26)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [37, 51, 0]]
** centroid: 6, normalized-entropy: 0.9816649485370996, [(1, 37), (2, 51)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [66, 18, 0]]
** centroid: 7, normalized-entropy: 0.7495952572594798, [(1, 66), (2, 18)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26601652661896963] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26601652661896963, 0.21812595857441358] ***
*** finished computation of 7 references, err: [Inf, 0.26601652661896963, 0.21812595857441358] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [25, 45, 0]]
** centroid: 1, normalized-entropy: 0.940285958670631, [(1, 25), (2, 45)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [2, 94, 2]]
** centroid: 2, normalized-entropy: 0.18097519948921972, [(1, 2), (2, 94), (3, 2)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [88, 41, 0]]
** centroid: 3, normalized-entropy: 0.9020054365905131, [(1, 88), (2, 41)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 46, 20]]
** centroid: 4, normalized-entropy: 0.8849636363831529, [(2, 46), (3, 20)]
*** center 5: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [20, 24, 0]]
** centroid: 6, normalized-entropy: 0.9940302114769566, [(1, 20), (2, 24)]
*** center 7: selecting labels [1] (freq >= 1) [from [167, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.40086020940114875] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40086020940114875, 0.3574076647011636] ***
*** finished computation of 3 references, err: [Inf, 0.40086020940114875, 0.3574076647011636] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [104, 116, 1]]
** centroid: 1, normalized-entropy: 0.9978527766088781, [(1, 104), (2, 116)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [14, 57, 21]]
** centroid: 2, normalized-entropy: 0.8377055574769514, [(1, 14), (2, 57), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [298, 55, 0]]
** centroid: 3, normalized-entropy: 0.6241844204621705, [(1, 298), (2, 55)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4715142833652614] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4715142833652614, 0.3298136924171466] ***
*** finished computation of 3 references, err: [Inf, 0.4715142833652614, 0.3298136924171466] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [23, 131, 26]]
** centroid: 1, normalized-entropy: 0.7041939701887292, [(1, 23), (2, 131), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [172, 99, 0]]
** centroid: 2, normalized-entropy: 0.9470057085249335, [(1, 172), (2, 99)]
*** center 3: selecting labels [1] (freq >= 2) [from [216, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36508847768048475] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36508847768048475, 0.31573246157905466] ***
*** finished computation of 3 references, err: [Inf, 0.36508847768048475, 0.31573246157905466] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [255, 58, 0]]
** centroid: 1, normalized-entropy: 0.6915427315447336, [(1, 255), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [136, 11, 0]]
** centroid: 2, normalized-entropy: 0.3836948331693138, [(1, 136), (2, 11)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [4, 181, 22]]
** centroid: 3, normalized-entropy: 0.39310337078136853, [(1, 4), (2, 181), (3, 22)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28706686679335375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28706686679335375, 0.20860505464567883] ***
*** starting iteration: 2; err: [Inf, 0.28706686679335375, 0.20860505464567883] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28706686679335375, 0.20860505464567883, 0.19398105491299528] ***
*** starting iteration: 3; err: [Inf, 0.28706686679335375, 0.20860505464567883, 0.19398105491299528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28706686679335375, 0.20860505464567883, 0.19398105491299528, 0.19103869625755973] ***
*** finished computation of 7 references, err: [Inf, 0.28706686679335375, 0.20860505464567883, 0.19398105491299528, 0.19103869625755973] ***
*** center 1: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [43, 48, 0]]
** centroid: 2, normalized-entropy: 0.9978211842997324, [(1, 43), (2, 48)]
*** center 3: selecting labels [1] (freq >= 2) [from [126, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 61, 0]]
** centroid: 5, normalized-entropy: 0.6167482598263911, [(1, 11), (2, 61)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 71, 22]]
** centroid: 6, normalized-entropy: 0.7892712724536985, [(2, 71), (3, 22)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [48, 48, 0]]
** centroid: 7, normalized-entropy: 1.0, [(1, 48), (2, 48)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33833791935576246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33833791935576246, 0.25186931136457985] ***
*** starting iteration: 2; err: [Inf, 0.33833791935576246, 0.25186931136457985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33833791935576246, 0.25186931136457985, 0.23257806236720246] ***
*** starting iteration: 3; err: [Inf, 0.33833791935576246, 0.25186931136457985, 0.23257806236720246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33833791935576246, 0.25186931136457985, 0.23257806236720246, 0.21656242180811144] ***
*** finished computation of 7 references, err: [Inf, 0.33833791935576246, 0.25186931136457985, 0.23257806236720246, 0.21656242180811144] ***
*** center 1: selecting labels [1] (freq >= 2) [from [161, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 74, 0]]
** centroid: 2, normalized-entropy: 0.9823166080205502, [(1, 54), (2, 74)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 78, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [93, 16, 0]]
** centroid: 4, normalized-entropy: 0.601746073097597, [(1, 93), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 19, 0]]
** centroid: 5, normalized-entropy: 0.8325582396745668, [(1, 53), (2, 19)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [50, 14, 0]]
** centroid: 6, normalized-entropy: 0.7578784625383954, [(1, 50), (2, 14)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 29, 26]]
** centroid: 7, normalized-entropy: 0.9978527766088781, [(2, 29), (3, 26)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22900836411765826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22900836411765826, 0.19768145105646534] ***
*** starting iteration: 2; err: [Inf, 0.22900836411765826, 0.19768145105646534] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22900836411765826, 0.19768145105646534, 0.19437413141438584] ***
*** starting iteration: 3; err: [Inf, 0.22900836411765826, 0.19768145105646534, 0.19437413141438584] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22900836411765826, 0.19768145105646534, 0.19437413141438584, 0.19426318171058504] ***
*** finished computation of 7 references, err: [Inf, 0.22900836411765826, 0.19768145105646534, 0.19437413141438584, 0.19426318171058504] ***
*** center 1: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [35, 28, 0]]
** centroid: 2, normalized-entropy: 0.9910760598382222, [(1, 35), (2, 28)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [33, 30, 0]]
** centroid: 3, normalized-entropy: 0.998363672593813, [(1, 33), (2, 30)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 90, 22]]
** centroid: 4, normalized-entropy: 0.7147274731317893, [(2, 90), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 65, 0]]
** centroid: 5, normalized-entropy: 0.9698570179131006, [(1, 43), (2, 65)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [81, 21, 0]]
** centroid: 6, normalized-entropy: 0.7335379291086666, [(1, 81), (2, 21)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [95, 16, 0]]
** centroid: 7, normalized-entropy: 0.5949898952560516, [(1, 95), (2, 16)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3978786279304742] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3978786279304742, 0.31687462062493815] ***
*** starting iteration: 2; err: [Inf, 0.3978786279304742, 0.31687462062493815] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3978786279304742, 0.31687462062493815, 0.3064319614653808] ***
*** starting iteration: 3; err: [Inf, 0.3978786279304742, 0.31687462062493815, 0.3064319614653808] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3978786279304742, 0.31687462062493815, 0.3064319614653808, 0.30311268600621244] ***
*** starting iteration: 4; err: [Inf, 0.3978786279304742, 0.31687462062493815, 0.3064319614653808, 0.30311268600621244] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3978786279304742, 0.31687462062493815, 0.3064319614653808, 0.30311268600621244, 0.301996225783428] ***
*** starting iteration: 5; err: [Inf, 0.3978786279304742, 0.31687462062493815, 0.3064319614653808, 0.30311268600621244, 0.301996225783428] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3978786279304742, 0.31687462062493815, 0.3064319614653808, 0.30311268600621244, 0.301996225783428, 0.3016744949295557] ***
*** finished computation of 3 references, err: [Inf, 0.3978786279304742, 0.31687462062493815, 0.3064319614653808, 0.30311268600621244, 0.301996225783428, 0.3016744949295557] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [157, 66, 0]]
** centroid: 1, normalized-entropy: 0.8763013821909624, [(1, 157), (2, 66)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [2, 151, 22]]
** centroid: 2, normalized-entropy: 0.39966816077301875, [(1, 2), (2, 151), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [257, 11, 0]]
** centroid: 3, normalized-entropy: 0.24706211229420189, [(1, 257), (2, 11)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3854488902034118] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3854488902034118, 0.3438154636663029] ***
*** starting iteration: 2; err: [Inf, 0.3854488902034118, 0.3438154636663029] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3854488902034118, 0.3438154636663029, 0.3095259935032392] ***
*** starting iteration: 3; err: [Inf, 0.3854488902034118, 0.3438154636663029, 0.3095259935032392] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3854488902034118, 0.3438154636663029, 0.3095259935032392, 0.3040328748954245] ***
*** starting iteration: 4; err: [Inf, 0.3854488902034118, 0.3438154636663029, 0.3095259935032392, 0.3040328748954245] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3854488902034118, 0.3438154636663029, 0.3095259935032392, 0.3040328748954245, 0.3029475374708603] ***
*** starting iteration: 5; err: [Inf, 0.3854488902034118, 0.3438154636663029, 0.3095259935032392, 0.3040328748954245, 0.3029475374708603] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3854488902034118, 0.3438154636663029, 0.3095259935032392, 0.3040328748954245, 0.3029475374708603, 0.30277069652735117] ***
*** finished computation of 3 references, err: [Inf, 0.3854488902034118, 0.3438154636663029, 0.3095259935032392, 0.3040328748954245, 0.3029475374708603, 0.30277069652735117] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [140, 60, 0]]
** centroid: 1, normalized-entropy: 0.8812908992306927, [(1, 140), (2, 60)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [2, 161, 26]]
** centroid: 2, normalized-entropy: 0.41652970215863894, [(1, 2), (2, 161), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [269, 9, 0]]
** centroid: 3, normalized-entropy: 0.20616157437562002, [(1, 269), (2, 9)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3419678695499897] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3419678695499897, 0.3107045452142584] ***
*** starting iteration: 2; err: [Inf, 0.3419678695499897, 0.3107045452142584] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3419678695499897, 0.3107045452142584, 0.3032341186052141] ***
*** starting iteration: 3; err: [Inf, 0.3419678695499897, 0.3107045452142584, 0.3032341186052141] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3419678695499897, 0.3107045452142584, 0.3032341186052141, 0.30265041081042127] ***
*** finished computation of 3 references, err: [Inf, 0.3419678695499897, 0.3107045452142584, 0.3032341186052141, 0.30265041081042127] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [169, 63, 0]]
** centroid: 1, normalized-entropy: 0.8436824610233311, [(1, 169), (2, 63)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [225, 6, 0]]
** centroid: 2, normalized-entropy: 0.17378132267943294, [(1, 225), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [1, 181, 22]]
** centroid: 3, normalized-entropy: 0.4949930542685224, [(2, 181), (3, 22)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.41772643033157775] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41772643033157775, 0.30258416233153584] ***
*** finished computation of 3 references, err: [Inf, 0.41772643033157775, 0.30258416233153584] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [164, 59, 0]]
** centroid: 1, normalized-entropy: 0.8335704440023032, [(1, 164), (2, 59)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [252, 28, 0]]
** centroid: 2, normalized-entropy: 0.46899559358928133, [(1, 252), (2, 28)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 141, 22]]
** centroid: 3, normalized-entropy: 0.5709107536283142, [(2, 141), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4643618790879622] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4643618790879622, 0.3273408744397616] ***
*** finished computation of 3 references, err: [Inf, 0.4643618790879622, 0.3273408744397616] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [114, 18, 0]]
** centroid: 1, normalized-entropy: 0.5746356978376794, [(1, 114), (2, 18)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [2, 165, 26]]
** centroid: 2, normalized-entropy: 0.4108876413024527, [(1, 2), (2, 165), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [295, 47, 0]]
** centroid: 3, normalized-entropy: 0.5774602237093948, [(1, 295), (2, 47)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3943271384626135] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3943271384626135, 0.3010942654982991] ***
*** finished computation of 3 references, err: [Inf, 0.3943271384626135, 0.3010942654982991] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [237, 3, 0]]
** centroid: 1, normalized-entropy: 0.09694460606247329, [(1, 237), (2, 3)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [62, 142, 22]]
** centroid: 2, normalized-entropy: 0.7951632465902093, [(1, 62), (2, 142), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [96, 105, 0]]
** centroid: 3, normalized-entropy: 0.9985532860835362, [(1, 96), (2, 105)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3360280003489552] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3360280003489552, 0.24422633557023854] ***
*** finished computation of 3 references, err: [Inf, 0.3360280003489552, 0.24422633557023854] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [283, 47, 0]]
** centroid: 1, normalized-entropy: 0.5905526422752957, [(1, 283), (2, 47)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 138, 22]]
** centroid: 2, normalized-entropy: 0.5776539033535634, [(2, 138), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [133, 43, 0]]
** centroid: 3, normalized-entropy: 0.8021478210586129, [(1, 133), (2, 43)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3395626824642385] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3395626824642385, 0.23758959736971036] ***
*** finished computation of 3 references, err: [Inf, 0.3395626824642385, 0.23758959736971036] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [134, 146, 26]]
** centroid: 1, normalized-entropy: 0.8411961869138243, [(1, 134), (2, 146), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [108, 84, 0]]
** centroid: 2, normalized-entropy: 0.9886994082884974, [(1, 108), (2, 84)]
*** center 3: selecting labels [1] (freq >= 1) [from [169, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31644048972678057] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31644048972678057, 0.23636058540358537] ***
*** finished computation of 3 references, err: [Inf, 0.31644048972678057, 0.23636058540358537] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [124, 173, 22]]
** centroid: 1, normalized-entropy: 0.8042596107362744, [(1, 124), (2, 173), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [109, 77, 0]]
** centroid: 2, normalized-entropy: 0.9785423861930187, [(1, 109), (2, 77)]
*** center 3: selecting labels [1] (freq >= 1) [from [162, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2440048625172527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2440048625172527, 0.1924786061543535] ***
*** starting iteration: 2; err: [Inf, 0.2440048625172527, 0.1924786061543535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2440048625172527, 0.1924786061543535, 0.18836388103356277] ***
*** starting iteration: 3; err: [Inf, 0.2440048625172527, 0.1924786061543535, 0.18836388103356277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2440048625172527, 0.1924786061543535, 0.18836388103356277, 0.1878652384472513] ***
*** finished computation of 7 references, err: [Inf, 0.2440048625172527, 0.1924786061543535, 0.18836388103356277, 0.1878652384472513] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [56, 62, 0]]
** centroid: 1, normalized-entropy: 0.9981341775041118, [(1, 56), (2, 62)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [62, 14, 0]]
** centroid: 2, normalized-entropy: 0.6892019851173655, [(1, 62), (2, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 62, 22]]
** centroid: 4, normalized-entropy: 0.8296071030882032, [(2, 62), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [91, 2, 0]]
** centroid: 5, normalized-entropy: 0.14981136747274781, [(1, 91), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 88, 0]]
** centroid: 6, normalized-entropy: 0.08887969568457589, [(1, 1), (2, 88)]
*** center 7: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22573365075052945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22573365075052945, 0.18571744714842653] ***
*** starting iteration: 2; err: [Inf, 0.22573365075052945, 0.18571744714842653] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22573365075052945, 0.18571744714842653, 0.18462677690657092] ***
*** starting iteration: 3; err: [Inf, 0.22573365075052945, 0.18571744714842653, 0.18462677690657092] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22573365075052945, 0.18571744714842653, 0.18462677690657092, 0.18454835805455516] ***
*** finished computation of 7 references, err: [Inf, 0.22573365075052945, 0.18571744714842653, 0.18462677690657092, 0.18454835805455516] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [10, 79, 0]]
** centroid: 1, normalized-entropy: 0.5069923067544342, [(1, 10), (2, 79)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [73, 29, 0]]
** centroid: 2, normalized-entropy: 0.8612621884720756, [(1, 73), (2, 29)]
*** center 3: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [65, 46, 0]]
** centroid: 4, normalized-entropy: 0.9787603904449517, [(1, 65), (2, 46)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 76, 26]]
** centroid: 5, normalized-entropy: 0.8189555018403103, [(2, 76), (3, 26)]
*** center 6: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24067819397896528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24067819397896528, 0.19229994396465472] ***
*** starting iteration: 2; err: [Inf, 0.24067819397896528, 0.19229994396465472] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24067819397896528, 0.19229994396465472, 0.18912773508567368] ***
*** starting iteration: 3; err: [Inf, 0.24067819397896528, 0.19229994396465472, 0.18912773508567368] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24067819397896528, 0.19229994396465472, 0.18912773508567368, 0.18859883959403728] ***
*** finished computation of 7 references, err: [Inf, 0.24067819397896528, 0.19229994396465472, 0.18912773508567368, 0.18859883959403728] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 84, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 58, 0]]
** centroid: 3, normalized-entropy: 0.9920686248447117, [(1, 47), (2, 58)]
*** center 4: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [72, 36, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 72), (2, 36)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 72, 22]]
** centroid: 6, normalized-entropy: 0.7849920887641585, [(2, 72), (3, 22)]
*** center 7: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9440098781416147, 0.9220028411645177, 0.9189998381615148, 0.9109708510906115, 0.902006797216378, 0.9000017982053911, 0.8799877722033411, 0.879984775194356, 0.8770267273261285, 0.8570037102971234, 0.8500176823530117, 0.8280226334118549, 0.7931404458350567, 0.7779755803707898]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 1) => 0.9440098781416147
finished with 15
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.3112638852910024] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3112638852910024, 0.2856855063137036] ***
*** starting iteration: 2; err: [Inf, 0.3112638852910024, 0.2856855063137036] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3112638852910024, 0.2856855063137036, 0.26729738237979533] ***
*** starting iteration: 3; err: [Inf, 0.3112638852910024, 0.2856855063137036, 0.26729738237979533] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3112638852910024, 0.2856855063137036, 0.26729738237979533, 0.24321895829673196] ***
*** finished computation of 3 references, err: [Inf, 0.3112638852910024, 0.2856855063137036, 0.26729738237979533, 0.24321895829673196] ***
*** center 1: selecting labels [1] (freq >= 2) [from [207, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [164, 52, 0]]
** centroid: 2, normalized-entropy: 0.7962699368824384, [(1, 164), (2, 52)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [45, 176, 22]]
** centroid: 3, normalized-entropy: 0.6948758824003121, [(1, 45), (2, 176), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.47066882059167975] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47066882059167975, 0.2545797736781916] ***
*** starting iteration: 2; err: [Inf, 0.47066882059167975, 0.2545797736781916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47066882059167975, 0.2545797736781916, 0.24077928408064406] ***
*** starting iteration: 3; err: [Inf, 0.47066882059167975, 0.2545797736781916, 0.24077928408064406] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47066882059167975, 0.2545797736781916, 0.24077928408064406, 0.23809109485779387] ***
*** finished computation of 3 references, err: [Inf, 0.47066882059167975, 0.2545797736781916, 0.24077928408064406, 0.23809109485779387] ***
*** center 1: selecting labels [1] (freq >= 2) [from [223, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [111, 66, 0]]
** centroid: 2, normalized-entropy: 0.9528588097297789, [(1, 111), (2, 66)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [77, 164, 26]]
** centroid: 3, normalized-entropy: 0.8053529747270766, [(1, 77), (2, 164), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.28523657191474955] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28523657191474955, 0.27408726025523544] ***
*** starting iteration: 2; err: [Inf, 0.28523657191474955, 0.27408726025523544] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28523657191474955, 0.27408726025523544, 0.2670233819320954] ***
*** starting iteration: 3; err: [Inf, 0.28523657191474955, 0.27408726025523544, 0.2670233819320954] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28523657191474955, 0.27408726025523544, 0.2670233819320954, 0.24486900428854588] ***
*** finished computation of 3 references, err: [Inf, 0.28523657191474955, 0.27408726025523544, 0.2670233819320954, 0.24486900428854588] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [163, 57, 0]]
** centroid: 1, normalized-entropy: 0.8253714410380419, [(1, 163), (2, 57)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 135, 22]]
** centroid: 2, normalized-entropy: 0.5845723335293169, [(2, 135), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [232, 58, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 232), (2, 58)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 15)
[0.9440098781416147, 0.9220028411645177, 0.9189998381615148, 0.9109708510906115, 0.902006797216378, 0.9000017982053911, 0.889991788195381, 0.8799877722033411, 0.879984775194356, 0.8770267273261285, 0.8570037102971234, 0.8500176823530117, 0.8280226334118549, 0.7931404458350567, 0.7779755803707898]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 1) => 0.9440098781416147
finished with 15
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9440098781416147, 0.9220028411645177, 0.9189998381615148, 0.9109708510906115, 0.902006797216378, 0.9000017982053911, 0.889991788195381, 0.8799877722033411, 0.879984775194356, 0.8770267273261285, 0.8570037102971234, 0.8500176823530117, 0.8280226334118549, 0.7931404458350567, 0.7779755803707898]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 1) => 0.9440098781416147
finished with 16
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9440098781416147, 0.9220028411645177, 0.9189998381615148, 0.9109708510906115, 0.902006797216378, 0.9000017982053911, 0.889991788195381, 0.8799877722033411, 0.879984775194356, 0.8770267273261285, 0.8570037102971234, 0.8500176823530117, 0.8280226334118549, 0.7931404458350567, 0.7839905774037511, 0.7779755803707898]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 1) => 0.9440098781416147
finished with 17
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.29452221616739044] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29452221616739044, 0.2402211117527417] ***
*** finished computation of 3 references, err: [Inf, 0.29452221616739044, 0.2402211117527417] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [129, 146, 20]]
** centroid: 1, normalized-entropy: 0.8121824492439622, [(1, 129), (2, 146), (3, 20)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [103, 82, 2]]
** centroid: 2, normalized-entropy: 0.6722284762967308, [(1, 103), (2, 82), (3, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [184, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31868829889253697] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31868829889253697, 0.25559529287648436] ***
*** finished computation of 3 references, err: [Inf, 0.31868829889253697, 0.25559529287648436] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [270, 64, 0]]
** centroid: 1, normalized-entropy: 0.7048413846784704, [(1, 270), (2, 64)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [141, 42, 0]]
** centroid: 2, normalized-entropy: 0.7771529943226336, [(1, 141), (2, 42)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 124, 26]]
** centroid: 3, normalized-entropy: 0.6652735227649414, [(2, 124), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3782349318847817] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3782349318847817, 0.24552288543114598] ***
*** finished computation of 3 references, err: [Inf, 0.3782349318847817, 0.24552288543114598] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [199, 60, 0]]
** centroid: 1, normalized-entropy: 0.7808942520699623, [(1, 199), (2, 60)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 114, 22]]
** centroid: 2, normalized-entropy: 0.6385146263620961, [(2, 114), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [196, 76, 0]]
** centroid: 3, normalized-entropy: 0.8546480601169081, [(1, 196), (2, 76)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 17)
[0.9440098781416147, 0.9220028411645177, 0.9189998381615148, 0.9109708510906115, 0.902006797216378, 0.9000017982053911, 0.889991788195381, 0.8799877722033411, 0.879984775194356, 0.8789418160675645, 0.8770267273261285, 0.8570037102971234, 0.8500176823530117, 0.8280226334118549, 0.7931404458350567, 0.7839905774037511, 0.7779755803707898]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 1) => 0.9440098781416147
finished with 19
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.2182996512199095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2182996512199095, 0.16549157152685137] ***
*** finished computation of 7 references, err: [Inf, 0.2182996512199095, 0.16549157152685137] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [71, 58, 0]]
** centroid: 1, normalized-entropy: 0.9926618042431643, [(1, 71), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [20, 57, 0]]
** centroid: 2, normalized-entropy: 0.8263541679009075, [(1, 20), (2, 57)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 104, 22]]
** centroid: 3, normalized-entropy: 0.6681273338436138, [(2, 104), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [95, 9, 0]]
** centroid: 6, normalized-entropy: 0.42480887386781474, [(1, 95), (2, 9)]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18428273216613206] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18428273216613206, 0.15856629124991986] ***
*** finished computation of 7 references, err: [Inf, 0.18428273216613206, 0.15856629124991986] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [88, 13, 0]]
** centroid: 1, normalized-entropy: 0.5538976334852961, [(1, 88), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [24, 81, 0]]
** centroid: 2, normalized-entropy: 0.775512658133148, [(1, 24), (2, 81)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 102, 26]]
** centroid: 3, normalized-entropy: 0.7281342378690551, [(2, 102), (3, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [84, 12, 0]]
** centroid: 6, normalized-entropy: 0.5435644431995963, [(1, 84), (2, 12)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [80, 22, 0]]
** centroid: 7, normalized-entropy: 0.7522121733341471, [(1, 80), (2, 22)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24939145242468616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24939145242468616, 0.16067111194049982] ***
*** finished computation of 7 references, err: [Inf, 0.24939145242468616, 0.16067111194049982] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [24, 45, 0]]
** centroid: 1, normalized-entropy: 0.9321115676166747, [(1, 24), (2, 45)]
*** center 2: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 44, 0]]
** centroid: 3, normalized-entropy: 0.9996437496778561, [(1, 46), (2, 44)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 103, 22]]
** centroid: 4, normalized-entropy: 0.6712478853829507, [(2, 103), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [107, 58, 0]]
** centroid: 5, normalized-entropy: 0.9354139399287134, [(1, 107), (2, 58)]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3051549249353844] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3051549249353844, 0.21791962015389413] ***
*** finished computation of 7 references, err: [Inf, 0.3051549249353844, 0.21791962015389413] ***
*** center 1: selecting labels [1] (freq >= 2) [from [148, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [135, 35, 0]]
** centroid: 2, normalized-entropy: 0.7335379291086666, [(1, 135), (2, 35)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [34, 33, 0]]
** centroid: 4, normalized-entropy: 0.9998393017810486, [(1, 34), (2, 33)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [99, 39, 0]]
** centroid: 5, normalized-entropy: 0.8589810370425965, [(1, 99), (2, 39)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 33, 4]]
** centroid: 6, normalized-entropy: 0.4941829348497886, [(2, 33), (3, 4)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 28, 18]]
** centroid: 7, normalized-entropy: 0.9656361333706099, [(2, 28), (3, 18)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2681697273663227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2681697273663227, 0.22139504000913168] ***
*** finished computation of 7 references, err: [Inf, 0.2681697273663227, 0.22139504000913168] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [35, 13, 0]]
** centroid: 1, normalized-entropy: 0.842657877202239, [(1, 35), (2, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [151, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 84, 6]]
** centroid: 3, normalized-entropy: 0.3533593350214213, [(2, 84), (3, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [98, 79, 0]]
** centroid: 4, normalized-entropy: 0.9916719691266045, [(1, 98), (2, 79)]
*** center 5: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [80, 19, 0]]
** centroid: 6, normalized-entropy: 0.7054690408228712, [(1, 80), (2, 19)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 35, 20]]
** centroid: 7, normalized-entropy: 0.9456603046006401, [(2, 35), (3, 20)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25958979740875704] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25958979740875704, 0.22703502777645523] ***
*** finished computation of 7 references, err: [Inf, 0.25958979740875704, 0.22703502777645523] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [35, 17, 0]]
** centroid: 1, normalized-entropy: 0.9117517586347538, [(1, 35), (2, 17)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 78, 22]]
** centroid: 2, normalized-entropy: 0.7601675029619658, [(2, 78), (3, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [127, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [26, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 76, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [56, 45, 0]]
** centroid: 6, normalized-entropy: 0.9914266810680207, [(1, 56), (2, 45)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [151, 34, 0]]
** centroid: 7, normalized-entropy: 0.6882849619184828, [(1, 151), (2, 34)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 19)
[0.9440098781416147, 0.9220028411645177, 0.9189998381615148, 0.9109708510906115, 0.902006797216378, 0.9000017982053911, 0.8990097882313451, 0.8900037762313211, 0.889991788195381, 0.8799877722033411, 0.879984775194356, 0.8789418160675645, 0.8770267273261285, 0.8570037102971234, 0.8500176823530117, 0.8280226334118549, 0.7931404458350567, 0.7839905774037511, 0.7779755803707898]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 1) => 0.9440098781416147
finished with 19
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 19)
[0.9440098781416147, 0.9220028411645177, 0.9189998381615148, 0.9109708510906115, 0.902006797216378, 0.9000017982053911, 0.8990097882313451, 0.8900037762313211, 0.889991788195381, 0.8799877722033411, 0.879984775194356, 0.8789418160675645, 0.8770267273261285, 0.8570037102971234, 0.8500176823530117, 0.8280226334118549, 0.7931404458350567, 0.7839905774037511, 0.7779755803707898]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 1) => 0.9440098781416147
finished with 19
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 19)
[0.9440098781416147, 0.9220028411645177, 0.9189998381615148, 0.9109708510906115, 0.902006797216378, 0.9000017982053911, 0.8990097882313451, 0.8900037762313211, 0.889991788195381, 0.8799877722033411, 0.879984775194356, 0.8789418160675645, 0.8770267273261285, 0.8570037102971234, 0.8500176823530117, 0.8280226334118549, 0.7931404458350567, 0.7839905774037511, 0.7779755803707898]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 1) => 0.9440098781416147
finished with 21
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.2534536410000052] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2534536410000052, 0.2001528842095006] ***
*** finished computation of 7 references, err: [Inf, 0.2534536410000052, 0.2001528842095006] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 52, 22]]
** centroid: 1, normalized-entropy: 0.8779620013943914, [(2, 52), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [88, 16, 0]]
** centroid: 2, normalized-entropy: 0.6193821946787638, [(1, 88), (2, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [52, 23, 0]]
** centroid: 3, normalized-entropy: 0.8892881527272397, [(1, 52), (2, 23)]
*** center 4: selecting labels [1] (freq >= 1) [from [145, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [72, 44, 0]]
** centroid: 5, normalized-entropy: 0.9575534837147484, [(1, 72), (2, 44)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 68, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [59, 25, 0]]
** centroid: 7, normalized-entropy: 0.8783609387702275, [(1, 59), (2, 25)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2670039410739188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2670039410739188, 0.21267683596826387] ***
*** finished computation of 7 references, err: [Inf, 0.2670039410739188, 0.21267683596826387] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [46, 37, 0]]
** centroid: 1, normalized-entropy: 0.9915017866855546, [(1, 46), (2, 37)]
*** center 2: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [28, 40, 0]]
** centroid: 3, normalized-entropy: 0.9774178175281716, [(1, 28), (2, 40)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [86, 14, 0]]
** centroid: 4, normalized-entropy: 0.5842388116428561, [(1, 86), (2, 14)]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [15, 136, 26]]
** centroid: 5, normalized-entropy: 0.6311309536794196, [(1, 15), (2, 136), (3, 26)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [68, 3, 0]]
** centroid: 6, normalized-entropy: 0.25253077151613923, [(1, 68), (2, 3)]
*** center 7: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23615374878283474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23615374878283474, 0.20331727847669168] ***
*** finished computation of 7 references, err: [Inf, 0.23615374878283474, 0.20331727847669168] ***
*** center 1: selecting labels [1] (freq >= 1) [from [131, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [54, 44, 0]]
** centroid: 3, normalized-entropy: 0.9924760039430819, [(1, 54), (2, 44)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 66, 21]]
** centroid: 4, normalized-entropy: 0.7973265101474423, [(2, 66), (3, 21)]
*** center 5: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [44, 44, 0]]
** centroid: 6, normalized-entropy: 1.0, [(1, 44), (2, 44)]
*** center 7: selecting labels [1, 2, 3] (freq >= 1) [from [9, 96, 1]]
** centroid: 7, normalized-entropy: 0.31233310280159166, [(1, 9), (2, 96), (3, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18383460996082393] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18383460996082393, 0.15609359201225634] ***
*** finished computation of 7 references, err: [Inf, 0.18383460996082393, 0.15609359201225634] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [78, 26, 0]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(1, 78), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [3, 88, 0]]
** centroid: 2, normalized-entropy: 0.20905980566852464, [(1, 3), (2, 88)]
*** center 3: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 23, 0]]
** centroid: 4, normalized-entropy: 0.8243633538094403, [(1, 66), (2, 23)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 86, 22]]
** centroid: 5, normalized-entropy: 0.7292739418449411, [(2, 86), (3, 22)]
*** center 6: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [74, 5, 0]]
** centroid: 7, normalized-entropy: 0.340373285759646, [(1, 74), (2, 5)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19094704690555492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19094704690555492, 0.1553301671477987] ***
*** finished computation of 7 references, err: [Inf, 0.19094704690555492, 0.1553301671477987] ***
*** center 1: selecting labels [1] (freq >= 1) [from [143, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [70, 6, 0]]
** centroid: 2, normalized-entropy: 0.39845927409523557, [(1, 70), (2, 6)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [72, 23, 0]]
** centroid: 3, normalized-entropy: 0.7985237652450764, [(1, 72), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [126, 36, 0]]
** centroid: 4, normalized-entropy: 0.7642045065086204, [(1, 126), (2, 36)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 42, 23]]
** centroid: 5, normalized-entropy: 0.937456170782005, [(2, 42), (3, 23)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 54, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 69, 3]]
** centroid: 7, normalized-entropy: 0.24988229283318547, [(2, 69), (3, 3)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1853899924724043] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1853899924724043, 0.15473373435197518] ***
*** finished computation of 7 references, err: [Inf, 0.1853899924724043, 0.15473373435197518] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [25, 30, 0]]
** centroid: 1, normalized-entropy: 0.9940302114769566, [(1, 25), (2, 30)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 83, 16]]
** centroid: 2, normalized-entropy: 0.638161945314006, [(2, 83), (3, 16)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 113, 6]]
** centroid: 3, normalized-entropy: 0.28817912669245493, [(2, 113), (3, 6)]
*** center 4: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [117, 8, 0]]
** centroid: 5, normalized-entropy: 0.3431229071320204, [(1, 117), (2, 8)]
*** center 6: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [101, 16, 0]]
** centroid: 7, normalized-entropy: 0.5756693370369834, [(1, 101), (2, 16)]
finished with 9 centroids; started with 7
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.243672163836658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.243672163836658, 0.19430216056946664] ***
*** starting iteration: 2; err: [Inf, 0.243672163836658, 0.19430216056946664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.243672163836658, 0.19430216056946664, 0.18996942913532258] ***
*** starting iteration: 3; err: [Inf, 0.243672163836658, 0.19430216056946664, 0.18996942913532258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.243672163836658, 0.19430216056946664, 0.18996942913532258, 0.18992483063833787] ***
*** finished computation of 7 references, err: [Inf, 0.243672163836658, 0.19430216056946664, 0.18996942913532258, 0.18992483063833787] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [75, 102, 0]]
** centroid: 1, normalized-entropy: 0.9831491282282879, [(1, 75), (2, 102)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [100, 20, 0]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(1, 100), (2, 20)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 109, 35]]
** centroid: 3, normalized-entropy: 0.8000847445412095, [(2, 109), (3, 35)]
*** center 4: selecting labels [1] (freq >= 1) [from [157, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [126, 3, 0]]
** centroid: 5, normalized-entropy: 0.15935006268563429, [(1, 126), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [10, 120, 0]]
** centroid: 6, normalized-entropy: 0.3912435636292556, [(1, 10), (2, 120)]
*** center 7: selecting labels [1] (freq >= 1) [from [143, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24172978184279054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24172978184279054, 0.1966923104953021] ***
*** starting iteration: 2; err: [Inf, 0.24172978184279054, 0.1966923104953021] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24172978184279054, 0.1966923104953021, 0.19432011890411377] ***
*** starting iteration: 3; err: [Inf, 0.24172978184279054, 0.1966923104953021, 0.19432011890411377] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24172978184279054, 0.1966923104953021, 0.19432011890411377, 0.19321776763908566] ***
*** starting iteration: 4; err: [Inf, 0.24172978184279054, 0.1966923104953021, 0.19432011890411377, 0.19321776763908566] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24172978184279054, 0.1966923104953021, 0.19432011890411377, 0.19321776763908566, 0.19245207202620804] ***
*** finished computation of 7 references, err: [Inf, 0.24172978184279054, 0.1966923104953021, 0.19432011890411377, 0.19321776763908566, 0.19245207202620804] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [78, 30, 0]]
** centroid: 1, normalized-entropy: 0.8524051786494784, [(1, 78), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 7, 0]]
** centroid: 2, normalized-entropy: 0.5373760853377334, [(1, 50), (2, 7)]
*** center 3: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 48, 19]]
** centroid: 4, normalized-entropy: 0.8602858652332406, [(2, 48), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [35, 39, 0]]
** centroid: 5, normalized-entropy: 0.9978913098356861, [(1, 35), (2, 39)]
*** center 6: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 49, 3]]
** centroid: 7, normalized-entropy: 0.3182152976832332, [(2, 49), (3, 3)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24408046055957675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24408046055957675, 0.19074351293337533] ***
*** starting iteration: 2; err: [Inf, 0.24408046055957675, 0.19074351293337533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24408046055957675, 0.19074351293337533, 0.18741831596568226] ***
*** starting iteration: 3; err: [Inf, 0.24408046055957675, 0.19074351293337533, 0.18741831596568226] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24408046055957675, 0.19074351293337533, 0.18741831596568226, 0.1871947808265686] ***
*** finished computation of 7 references, err: [Inf, 0.24408046055957675, 0.19074351293337533, 0.18741831596568226, 0.1871947808265686] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [80, 7, 0]]
** centroid: 1, normalized-entropy: 0.40379715049939235, [(1, 80), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [72, 1, 0]]
** centroid: 2, normalized-entropy: 0.1044190780054077, [(1, 72), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 34, 17]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(2, 34), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [67, 18, 0]]
** centroid: 5, normalized-entropy: 0.7448423974714387, [(1, 67), (2, 18)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 55, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 63, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2442162667196244] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2442162667196244, 0.19716176436841487] ***
*** starting iteration: 2; err: [Inf, 0.2442162667196244, 0.19716176436841487] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2442162667196244, 0.19716176436841487, 0.19106354562658817] ***
*** starting iteration: 3; err: [Inf, 0.2442162667196244, 0.19716176436841487, 0.19106354562658817] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2442162667196244, 0.19716176436841487, 0.19106354562658817, 0.18938496909849345] ***
*** starting iteration: 4; err: [Inf, 0.2442162667196244, 0.19716176436841487, 0.19106354562658817, 0.18938496909849345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2442162667196244, 0.19716176436841487, 0.19106354562658817, 0.18938496909849345, 0.18801864489726722] ***
*** starting iteration: 5; err: [Inf, 0.2442162667196244, 0.19716176436841487, 0.19106354562658817, 0.18938496909849345, 0.18801864489726722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2442162667196244, 0.19716176436841487, 0.19106354562658817, 0.18938496909849345, 0.18801864489726722, 0.1868552883118391] ***
*** starting iteration: 6; err: [Inf, 0.2442162667196244, 0.19716176436841487, 0.19106354562658817, 0.18938496909849345, 0.18801864489726722, 0.1868552883118391] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2442162667196244, 0.19716176436841487, 0.19106354562658817, 0.18938496909849345, 0.18801864489726722, 0.1868552883118391, 0.1865363986901939] ***
*** finished computation of 7 references, err: [Inf, 0.2442162667196244, 0.19716176436841487, 0.19106354562658817, 0.18938496909849345, 0.18801864489726722, 0.1868552883118391, 0.1865363986901939] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 66, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [53, 39, 0]]
** centroid: 3, normalized-entropy: 0.9832307535844343, [(1, 53), (2, 39)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [64, 3, 0]]
** centroid: 4, normalized-entropy: 0.26377743669413856, [(1, 64), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [62, 15, 0]]
** centroid: 5, normalized-entropy: 0.7114160189012126, [(1, 62), (2, 15)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 43, 21]]
** centroid: 6, normalized-entropy: 0.912999213585247, [(2, 43), (3, 21)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [31, 13, 0]]
** centroid: 7, normalized-entropy: 0.8756633923230399, [(1, 31), (2, 13)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2527866487763822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2527866487763822, 0.19796895694267005] ***
*** starting iteration: 2; err: [Inf, 0.2527866487763822, 0.19796895694267005] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2527866487763822, 0.19796895694267005, 0.1940535942716524] ***
*** starting iteration: 3; err: [Inf, 0.2527866487763822, 0.19796895694267005, 0.1940535942716524] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2527866487763822, 0.19796895694267005, 0.1940535942716524, 0.19339747554436326] ***
*** finished computation of 7 references, err: [Inf, 0.2527866487763822, 0.19796895694267005, 0.1940535942716524, 0.19339747554436326] ***
*** center 1: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 41, 20]]
** centroid: 2, normalized-entropy: 0.9127341558073343, [(2, 41), (3, 20)]
*** center 3: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [16, 52, 0]]
** centroid: 4, normalized-entropy: 0.787126586201269, [(1, 16), (2, 52)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [36, 32, 0]]
** centroid: 5, normalized-entropy: 0.9975025463691153, [(1, 36), (2, 32)]
*** center 6: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [16, 46, 0]]
** centroid: 7, normalized-entropy: 0.8238116333123173, [(1, 16), (2, 46)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23340159985423087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23340159985423087, 0.19187400547321887] ***
*** starting iteration: 2; err: [Inf, 0.23340159985423087, 0.19187400547321887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23340159985423087, 0.19187400547321887, 0.18609920290112494] ***
*** starting iteration: 3; err: [Inf, 0.23340159985423087, 0.19187400547321887, 0.18609920290112494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23340159985423087, 0.19187400547321887, 0.18609920290112494, 0.18455946515500546] ***
*** starting iteration: 4; err: [Inf, 0.23340159985423087, 0.19187400547321887, 0.18609920290112494, 0.18455946515500546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23340159985423087, 0.19187400547321887, 0.18609920290112494, 0.18455946515500546, 0.18402823225595058] ***
*** finished computation of 7 references, err: [Inf, 0.23340159985423087, 0.19187400547321887, 0.18609920290112494, 0.18455946515500546, 0.18402823225595058] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 71, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [51, 38, 0]]
** centroid: 3, normalized-entropy: 0.9845543528607513, [(1, 51), (2, 38)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [53, 6, 0]]
** centroid: 4, normalized-entropy: 0.4743454375622396, [(1, 53), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [57, 8, 0]]
** centroid: 5, normalized-entropy: 0.5381411852224502, [(1, 57), (2, 8)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 38, 21]]
** centroid: 6, normalized-entropy: 0.9392547207311595, [(2, 38), (3, 21)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [60, 11, 0]]
** centroid: 7, normalized-entropy: 0.6220403090607189, [(1, 60), (2, 11)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24001054606586694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24001054606586694, 0.18874881279747932] ***
*** starting iteration: 2; err: [Inf, 0.24001054606586694, 0.18874881279747932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24001054606586694, 0.18874881279747932, 0.18399453462287785] ***
*** starting iteration: 3; err: [Inf, 0.24001054606586694, 0.18874881279747932, 0.18399453462287785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24001054606586694, 0.18874881279747932, 0.18399453462287785, 0.18316155482642352] ***
*** finished computation of 7 references, err: [Inf, 0.24001054606586694, 0.18874881279747932, 0.18399453462287785, 0.18316155482642352] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [44, 49, 0]]
** centroid: 1, normalized-entropy: 0.9979139338855983, [(1, 44), (2, 49)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [45, 11, 0]]
** centroid: 2, normalized-entropy: 0.7147274731317893, [(1, 45), (2, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 71, 19]]
** centroid: 4, normalized-entropy: 0.7436012269934466, [(2, 71), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [26, 45, 0]]
** centroid: 5, normalized-entropy: 0.9477073729342067, [(1, 26), (2, 45)]
*** center 6: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23093475368618965] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23093475368618965, 0.18620473141875118] ***
*** starting iteration: 2; err: [Inf, 0.23093475368618965, 0.18620473141875118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23093475368618965, 0.18620473141875118, 0.1847240518038161] ***
*** starting iteration: 3; err: [Inf, 0.23093475368618965, 0.18620473141875118, 0.1847240518038161] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23093475368618965, 0.18620473141875118, 0.1847240518038161, 0.18505246892292052] ***
*** finished computation of 7 references, err: [Inf, 0.23093475368618965, 0.18620473141875118, 0.1847240518038161, 0.18505246892292052] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 61, 2]]
** centroid: 1, normalized-entropy: 0.20307392998664567, [(2, 61), (3, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [42, 13, 0]]
** centroid: 3, normalized-entropy: 0.7889406572966208, [(1, 42), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [64, 12, 0]]
** centroid: 4, normalized-entropy: 0.6292492238560344, [(1, 64), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [48, 17, 0]]
** centroid: 5, normalized-entropy: 0.829059069399666, [(1, 48), (2, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [64, 21, 0]]
** centroid: 6, normalized-entropy: 0.806583102274714, [(1, 64), (2, 21)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 59, 10]]
** centroid: 7, normalized-entropy: 0.5969995167604553, [(2, 59), (3, 10)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23555046506132932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23555046506132932, 0.1916442900169641] ***
*** starting iteration: 2; err: [Inf, 0.23555046506132932, 0.1916442900169641] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23555046506132932, 0.1916442900169641, 0.1892373931258917] ***
*** starting iteration: 3; err: [Inf, 0.23555046506132932, 0.1916442900169641, 0.1892373931258917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23555046506132932, 0.1916442900169641, 0.1892373931258917, 0.18860507761780174] ***
*** finished computation of 7 references, err: [Inf, 0.23555046506132932, 0.1916442900169641, 0.1892373931258917, 0.18860507761780174] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [38, 40, 0]]
** centroid: 1, normalized-entropy: 0.9995256892936492, [(1, 38), (2, 40)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [47, 15, 0]]
** centroid: 2, normalized-entropy: 0.7982441335646697, [(1, 47), (2, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 46, 18]]
** centroid: 4, normalized-entropy: 0.8571484374283717, [(2, 46), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [55, 12, 0]]
** centroid: 5, normalized-entropy: 0.678114052360606, [(1, 55), (2, 12)]
*** center 6: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 56, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23815574932098388] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23815574932098388, 0.18906882313638926] ***
*** starting iteration: 2; err: [Inf, 0.23815574932098388, 0.18906882313638926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23815574932098388, 0.18906882313638926, 0.18555485650897027] ***
*** starting iteration: 3; err: [Inf, 0.23815574932098388, 0.18906882313638926, 0.18555485650897027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23815574932098388, 0.18906882313638926, 0.18555485650897027, 0.18450425977632404] ***
*** starting iteration: 4; err: [Inf, 0.23815574932098388, 0.18906882313638926, 0.18555485650897027, 0.18450425977632404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23815574932098388, 0.18906882313638926, 0.18555485650897027, 0.18450425977632404, 0.18412995575461535] ***
*** finished computation of 7 references, err: [Inf, 0.23815574932098388, 0.18906882313638926, 0.18555485650897027, 0.18450425977632404, 0.18412995575461535] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [53, 34, 0]]
** centroid: 1, normalized-entropy: 0.9653168212008997, [(1, 53), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [34, 30, 0]]
** centroid: 2, normalized-entropy: 0.9971803988942641, [(1, 34), (2, 30)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 53, 15]]
** centroid: 3, normalized-entropy: 0.7612401496918493, [(2, 53), (3, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [16, 61, 0]]
** centroid: 5, normalized-entropy: 0.7372413771710565, [(1, 16), (2, 61)]
*** center 6: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24538178370520472] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24538178370520472, 0.19608652763441206] ***
*** starting iteration: 2; err: [Inf, 0.24538178370520472, 0.19608652763441206] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24538178370520472, 0.19608652763441206, 0.19126988207176326] ***
*** starting iteration: 3; err: [Inf, 0.24538178370520472, 0.19608652763441206, 0.19126988207176326] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24538178370520472, 0.19608652763441206, 0.19126988207176326, 0.19019743021856994] ***
*** starting iteration: 4; err: [Inf, 0.24538178370520472, 0.19608652763441206, 0.19126988207176326, 0.19019743021856994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24538178370520472, 0.19608652763441206, 0.19126988207176326, 0.19019743021856994, 0.188649870371446] ***
*** starting iteration: 5; err: [Inf, 0.24538178370520472, 0.19608652763441206, 0.19126988207176326, 0.19019743021856994, 0.188649870371446] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24538178370520472, 0.19608652763441206, 0.19126988207176326, 0.19019743021856994, 0.188649870371446, 0.18720169225893915] ***
*** starting iteration: 6; err: [Inf, 0.24538178370520472, 0.19608652763441206, 0.19126988207176326, 0.19019743021856994, 0.188649870371446, 0.18720169225893915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24538178370520472, 0.19608652763441206, 0.19126988207176326, 0.19019743021856994, 0.188649870371446, 0.18720169225893915, 0.1866166448723525] ***
*** finished computation of 7 references, err: [Inf, 0.24538178370520472, 0.19608652763441206, 0.19126988207176326, 0.19019743021856994, 0.188649870371446, 0.18720169225893915, 0.1866166448723525] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [47, 12, 0]]
** centroid: 1, normalized-entropy: 0.7286561673702678, [(1, 47), (2, 12)]
*** center 2: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 37, 23]]
** centroid: 3, normalized-entropy: 0.9603622703154779, [(2, 37), (3, 23)]
*** center 4: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 74, 0]]
** centroid: 5, normalized-entropy: 0.7467366074830678, [(1, 20), (2, 74)]
*** center 6: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 57, 0]]
** centroid: 7, normalized-entropy: 0.21357981533827744, [(1, 2), (2, 57)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23171662444621324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23171662444621324, 0.19410867413971572] ***
*** starting iteration: 2; err: [Inf, 0.23171662444621324, 0.19410867413971572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23171662444621324, 0.19410867413971572, 0.19280783251672984] ***
*** starting iteration: 3; err: [Inf, 0.23171662444621324, 0.19410867413971572, 0.19280783251672984] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23171662444621324, 0.19410867413971572, 0.19280783251672984, 0.19175295044109225] ***
*** starting iteration: 4; err: [Inf, 0.23171662444621324, 0.19410867413971572, 0.19280783251672984, 0.19175295044109225] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23171662444621324, 0.19410867413971572, 0.19280783251672984, 0.19175295044109225, 0.19028951702732594] ***
*** starting iteration: 5; err: [Inf, 0.23171662444621324, 0.19410867413971572, 0.19280783251672984, 0.19175295044109225, 0.19028951702732594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23171662444621324, 0.19410867413971572, 0.19280783251672984, 0.19175295044109225, 0.19028951702732594, 0.18941032671090216] ***
*** finished computation of 7 references, err: [Inf, 0.23171662444621324, 0.19410867413971572, 0.19280783251672984, 0.19175295044109225, 0.19028951702732594, 0.18941032671090216] ***
*** center 1: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 58, 24]]
** centroid: 2, normalized-entropy: 0.8721617883411698, [(2, 58), (3, 24)]
*** center 3: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [28, 41, 0]]
** centroid: 4, normalized-entropy: 0.9742408334889756, [(1, 28), (2, 41)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [27, 66, 0]]
** centroid: 5, normalized-entropy: 0.8691375806126381, [(1, 27), (2, 66)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [45, 17, 0]]
** centroid: 6, normalized-entropy: 0.8474179614176633, [(1, 45), (2, 17)]
*** center 7: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23928243565559387] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23928243565559387, 0.1966648488258943] ***
*** starting iteration: 2; err: [Inf, 0.23928243565559387, 0.1966648488258943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23928243565559387, 0.1966648488258943, 0.19036143392883242] ***
*** starting iteration: 3; err: [Inf, 0.23928243565559387, 0.1966648488258943, 0.19036143392883242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23928243565559387, 0.1966648488258943, 0.19036143392883242, 0.18779160059057176] ***
*** starting iteration: 4; err: [Inf, 0.23928243565559387, 0.1966648488258943, 0.19036143392883242, 0.18779160059057176] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23928243565559387, 0.1966648488258943, 0.19036143392883242, 0.18779160059057176, 0.18678418777231126] ***
*** starting iteration: 5; err: [Inf, 0.23928243565559387, 0.1966648488258943, 0.19036143392883242, 0.18779160059057176, 0.18678418777231126] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23928243565559387, 0.1966648488258943, 0.19036143392883242, 0.18779160059057176, 0.18678418777231126, 0.18607710004970432] ***
*** finished computation of 7 references, err: [Inf, 0.23928243565559387, 0.1966648488258943, 0.19036143392883242, 0.18779160059057176, 0.18678418777231126, 0.18607710004970432] ***
*** center 1: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 44, 18]]
** centroid: 2, normalized-entropy: 0.8691375806126381, [(2, 44), (3, 18)]
*** center 3: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [57, 17, 0]]
** centroid: 5, normalized-entropy: 0.77753986416076, [(1, 57), (2, 17)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 56, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [14, 42, 0]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(1, 14), (2, 42)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24965670027956366] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24965670027956366, 0.19621103355288505] ***
*** starting iteration: 2; err: [Inf, 0.24965670027956366, 0.19621103355288505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24965670027956366, 0.19621103355288505, 0.19008461484499276] ***
*** starting iteration: 3; err: [Inf, 0.24965670027956366, 0.19621103355288505, 0.19008461484499276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24965670027956366, 0.19621103355288505, 0.19008461484499276, 0.1884965429175645] ***
*** starting iteration: 4; err: [Inf, 0.24965670027956366, 0.19621103355288505, 0.19008461484499276, 0.1884965429175645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24965670027956366, 0.19621103355288505, 0.19008461484499276, 0.1884965429175645, 0.18774060145020485] ***
*** finished computation of 7 references, err: [Inf, 0.24965670027956366, 0.19621103355288505, 0.19008461484499276, 0.1884965429175645, 0.18774060145020485] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [4, 70, 0]]
** centroid: 1, normalized-entropy: 0.30337483608641397, [(1, 4), (2, 70)]
*** center 2: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [59, 13, 0]]
** centroid: 3, normalized-entropy: 0.6812908868842175, [(1, 59), (2, 13)]
*** center 4: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [79, 6, 0]]
** centroid: 5, normalized-entropy: 0.3681150054280774, [(1, 79), (2, 6)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 39, 12]]
** centroid: 6, normalized-entropy: 0.787126586201269, [(2, 39), (3, 12)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 55, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2194395843949169] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2194395843949169, 0.1929919369025156] ***
*** starting iteration: 2; err: [Inf, 0.2194395843949169, 0.1929919369025156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2194395843949169, 0.1929919369025156, 0.1897239696951583] ***
*** starting iteration: 3; err: [Inf, 0.2194395843949169, 0.1929919369025156, 0.1897239696951583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2194395843949169, 0.1929919369025156, 0.1897239696951583, 0.18859856952354312] ***
*** starting iteration: 4; err: [Inf, 0.2194395843949169, 0.1929919369025156, 0.1897239696951583, 0.18859856952354312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2194395843949169, 0.1929919369025156, 0.1897239696951583, 0.18859856952354312, 0.1880387724544853] ***
*** finished computation of 7 references, err: [Inf, 0.2194395843949169, 0.1929919369025156, 0.1897239696951583, 0.18859856952354312, 0.1880387724544853] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [7, 76, 0]]
** centroid: 1, normalized-entropy: 0.4172806906708316, [(1, 7), (2, 76)]
*** center 2: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [57, 16, 0]]
** centroid: 3, normalized-entropy: 0.7586638628883696, [(1, 57), (2, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [79, 3, 0]]
** centroid: 5, normalized-entropy: 0.22641094842107634, [(1, 79), (2, 3)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 55, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 29, 20]]
** centroid: 7, normalized-entropy: 0.9755259511264975, [(2, 29), (3, 20)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23473925482481717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23473925482481717, 0.19191278244927526] ***
*** starting iteration: 2; err: [Inf, 0.23473925482481717, 0.19191278244927526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23473925482481717, 0.19191278244927526, 0.18885510082915424] ***
*** starting iteration: 3; err: [Inf, 0.23473925482481717, 0.19191278244927526, 0.18885510082915424] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23473925482481717, 0.19191278244927526, 0.18885510082915424, 0.18817586720362306] ***
*** finished computation of 7 references, err: [Inf, 0.23473925482481717, 0.19191278244927526, 0.18885510082915424, 0.18817586720362306] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [70, 14, 0]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(1, 70), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [44, 3, 0]]
** centroid: 2, normalized-entropy: 0.3424637724817958, [(1, 44), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 59, 19]]
** centroid: 3, normalized-entropy: 0.8009591077369054, [(2, 59), (3, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [59, 20, 0]]
** centroid: 5, normalized-entropy: 0.8162554088088008, [(1, 59), (2, 20)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [51, 22, 0]]
** centroid: 6, normalized-entropy: 0.8829589691462253, [(1, 51), (2, 22)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 63, 1]]
** centroid: 7, normalized-entropy: 0.11611507530476962, [(2, 63), (3, 1)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2194564341120422] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2194564341120422, 0.19156901981774718] ***
*** starting iteration: 2; err: [Inf, 0.2194564341120422, 0.19156901981774718] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2194564341120422, 0.19156901981774718, 0.18920774252153932] ***
*** starting iteration: 3; err: [Inf, 0.2194564341120422, 0.19156901981774718, 0.18920774252153932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2194564341120422, 0.19156901981774718, 0.18920774252153932, 0.1888139849640429] ***
*** finished computation of 7 references, err: [Inf, 0.2194564341120422, 0.19156901981774718, 0.18920774252153932, 0.1888139849640429] ***
*** center 1: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [39, 9, 0]]
** centroid: 2, normalized-entropy: 0.6962122601251459, [(1, 39), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 54, 17]]
** centroid: 3, normalized-entropy: 0.7941021417852022, [(2, 54), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 56, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 28), (2, 56)]
*** center 6: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [8, 58, 0]]
** centroid: 7, normalized-entropy: 0.5328350630342235, [(1, 8), (2, 58)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23544835935533046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23544835935533046, 0.19202870109584183] ***
*** starting iteration: 2; err: [Inf, 0.23544835935533046, 0.19202870109584183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23544835935533046, 0.19202870109584183, 0.18922557967156173] ***
*** starting iteration: 3; err: [Inf, 0.23544835935533046, 0.19202870109584183, 0.18922557967156173] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23544835935533046, 0.19202870109584183, 0.18922557967156173, 0.18858409287966788] ***
*** finished computation of 7 references, err: [Inf, 0.23544835935533046, 0.19202870109584183, 0.18922557967156173, 0.18858409287966788] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [67, 2, 0]]
** centroid: 1, normalized-entropy: 0.18927843126120178, [(1, 67), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 9, 0]]
** centroid: 2, normalized-entropy: 0.5638560041131417, [(1, 59), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 50, 18]]
** centroid: 3, normalized-entropy: 0.8337649072106652, [(2, 50), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [71, 14, 0]]
** centroid: 5, normalized-entropy: 0.6454495903301855, [(1, 71), (2, 14)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 62, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [37, 43, 0]]
** centroid: 7, normalized-entropy: 0.9959386076315955, [(1, 37), (2, 43)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2219141475223005] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2219141475223005, 0.19343410955742002] ***
*** starting iteration: 2; err: [Inf, 0.2219141475223005, 0.19343410955742002] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2219141475223005, 0.19343410955742002, 0.18994998953863979] ***
*** starting iteration: 3; err: [Inf, 0.2219141475223005, 0.19343410955742002, 0.18994998953863979] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2219141475223005, 0.19343410955742002, 0.18994998953863979, 0.18767900850437583] ***
*** starting iteration: 4; err: [Inf, 0.2219141475223005, 0.19343410955742002, 0.18994998953863979, 0.18767900850437583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2219141475223005, 0.19343410955742002, 0.18994998953863979, 0.18767900850437583, 0.18687309562973678] ***
*** finished computation of 7 references, err: [Inf, 0.2219141475223005, 0.19343410955742002, 0.18994998953863979, 0.18767900850437583, 0.18687309562973678] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 51, 13]]
** centroid: 1, normalized-entropy: 0.7281342378690551, [(2, 51), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [35, 9, 0]]
** centroid: 3, normalized-entropy: 0.7309263775906009, [(1, 35), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [72, 17, 0]]
** centroid: 4, normalized-entropy: 0.7035821005719904, [(1, 72), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [48, 31, 0]]
** centroid: 5, normalized-entropy: 0.966334094295981, [(1, 48), (2, 31)]
*** center 6: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 68, 1]]
** centroid: 7, normalized-entropy: 0.10928571467638523, [(2, 68), (3, 1)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23122031661402434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23122031661402434, 0.19072418233472854] ***
*** starting iteration: 2; err: [Inf, 0.23122031661402434, 0.19072418233472854] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23122031661402434, 0.19072418233472854, 0.18975444016419352] ***
*** finished computation of 7 references, err: [Inf, 0.23122031661402434, 0.19072418233472854, 0.18975444016419352] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [2, 76, 0]]
** centroid: 1, normalized-entropy: 0.17203694935311387, [(1, 2), (2, 76)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [46, 20, 0]]
** centroid: 2, normalized-entropy: 0.8849636363831529, [(1, 46), (2, 20)]
*** center 3: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 71, 19]]
** centroid: 4, normalized-entropy: 0.7436012269934466, [(2, 71), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [37, 22, 0]]
** centroid: 5, normalized-entropy: 0.9528588097297789, [(1, 37), (2, 22)]
*** center 6: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2320790645815432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2320790645815432, 0.19190955597441645] ***
*** starting iteration: 2; err: [Inf, 0.2320790645815432, 0.19190955597441645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2320790645815432, 0.19190955597441645, 0.18818542091920973] ***
*** starting iteration: 3; err: [Inf, 0.2320790645815432, 0.19190955597441645, 0.18818542091920973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2320790645815432, 0.19190955597441645, 0.18818542091920973, 0.1872857148423791] ***
*** finished computation of 7 references, err: [Inf, 0.2320790645815432, 0.19190955597441645, 0.18818542091920973, 0.1872857148423791] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [1, 63, 0]]
** centroid: 1, normalized-entropy: 0.11611507530476962, [(1, 1), (2, 63)]
*** center 2: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [70, 1, 0]]
** centroid: 4, normalized-entropy: 0.10679203237584184, [(1, 70), (2, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [71, 5, 0]]
** centroid: 5, normalized-entropy: 0.35001059292688486, [(1, 71), (2, 5)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 43, 14]]
** centroid: 6, normalized-entropy: 0.8042522359016421, [(2, 43), (3, 14)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 68, 0]]
** centroid: 7, normalized-entropy: 0.25253077151613923, [(1, 3), (2, 68)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22001764101721347] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22001764101721347, 0.1935613010842353] ***
*** starting iteration: 2; err: [Inf, 0.22001764101721347, 0.1935613010842353] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22001764101721347, 0.1935613010842353, 0.19163160558417439] ***
*** starting iteration: 3; err: [Inf, 0.22001764101721347, 0.1935613010842353, 0.19163160558417439] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22001764101721347, 0.1935613010842353, 0.19163160558417439, 0.19038564491458237] ***
*** starting iteration: 4; err: [Inf, 0.22001764101721347, 0.1935613010842353, 0.19163160558417439, 0.19038564491458237] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22001764101721347, 0.1935613010842353, 0.19163160558417439, 0.19038564491458237, 0.1897213405352086] ***
*** finished computation of 7 references, err: [Inf, 0.22001764101721347, 0.1935613010842353, 0.19163160558417439, 0.19038564491458237, 0.1897213405352086] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [62, 10, 0]]
** centroid: 1, normalized-entropy: 0.581321498763703, [(1, 62), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [55, 1, 0]]
** centroid: 2, normalized-entropy: 0.12923377484588472, [(1, 55), (2, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 44, 18]]
** centroid: 3, normalized-entropy: 0.8691375806126381, [(2, 44), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [9, 86, 0]]
** centroid: 5, normalized-entropy: 0.4520861986745138, [(1, 9), (2, 86)]
*** center 6: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [35, 39, 0]]
** centroid: 7, normalized-entropy: 0.9978913098356861, [(1, 35), (2, 39)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25450831177085637] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25450831177085637, 0.2000258292921353] ***
*** starting iteration: 2; err: [Inf, 0.25450831177085637, 0.2000258292921353] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25450831177085637, 0.2000258292921353, 0.1946142820864916] ***
*** starting iteration: 3; err: [Inf, 0.25450831177085637, 0.2000258292921353, 0.1946142820864916] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25450831177085637, 0.2000258292921353, 0.1946142820864916, 0.192010410413146] ***
*** starting iteration: 4; err: [Inf, 0.25450831177085637, 0.2000258292921353, 0.1946142820864916, 0.192010410413146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25450831177085637, 0.2000258292921353, 0.1946142820864916, 0.192010410413146, 0.19121887494809925] ***
*** finished computation of 7 references, err: [Inf, 0.25450831177085637, 0.2000258292921353, 0.1946142820864916, 0.192010410413146, 0.19121887494809925] ***
*** center 1: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 53, 17]]
** centroid: 2, normalized-entropy: 0.7997594113291759, [(2, 53), (3, 17)]
*** center 3: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [73, 9, 0]]
** centroid: 4, normalized-entropy: 0.49917983618854633, [(1, 73), (2, 9)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 60, 0]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(1, 20), (2, 60)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [13, 53, 0]]
** centroid: 6, normalized-entropy: 0.7158259310602146, [(1, 13), (2, 53)]
*** center 7: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25140812917798755] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25140812917798755, 0.194609387235716] ***
*** starting iteration: 2; err: [Inf, 0.25140812917798755, 0.194609387235716] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25140812917798755, 0.194609387235716, 0.19014101511985063] ***
*** starting iteration: 3; err: [Inf, 0.25140812917798755, 0.194609387235716, 0.19014101511985063] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25140812917798755, 0.194609387235716, 0.19014101511985063, 0.18961086432728916] ***
*** finished computation of 7 references, err: [Inf, 0.25140812917798755, 0.194609387235716, 0.19014101511985063, 0.18961086432728916] ***
*** center 1: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 34, 21]]
** centroid: 2, normalized-entropy: 0.9593160320543779, [(2, 34), (3, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [70, 19, 0]]
** centroid: 4, normalized-entropy: 0.748088105780153, [(1, 70), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [1, 58, 0]]
** centroid: 5, normalized-entropy: 0.12394986771100755, [(1, 1), (2, 58)]
*** center 6: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 68, 0]]
** centroid: 7, normalized-entropy: 0.10928571467638523, [(1, 1), (2, 68)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2551115534994751] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2551115534994751, 0.1932368777487427] ***
*** starting iteration: 2; err: [Inf, 0.2551115534994751, 0.1932368777487427] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2551115534994751, 0.1932368777487427, 0.18985655143135227] ***
*** starting iteration: 3; err: [Inf, 0.2551115534994751, 0.1932368777487427, 0.18985655143135227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2551115534994751, 0.1932368777487427, 0.18985655143135227, 0.1896582266641781] ***
*** finished computation of 7 references, err: [Inf, 0.2551115534994751, 0.1932368777487427, 0.18985655143135227, 0.1896582266641781] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 57, 19]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 57), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [45, 8, 0]]
** centroid: 3, normalized-entropy: 0.612196127490834, [(1, 45), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [65, 22, 0]]
** centroid: 4, normalized-entropy: 0.8158009273789572, [(1, 65), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [53, 29, 0]]
** centroid: 5, normalized-entropy: 0.9372930661967526, [(1, 53), (2, 29)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 60, 2]]
** centroid: 6, normalized-entropy: 0.2055925081850832, [(2, 60), (3, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [61, 1, 0]]
** centroid: 7, normalized-entropy: 0.11911602665564841, [(1, 61), (2, 1)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23055752796307205] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23055752796307205, 0.18812188149616121] ***
*** starting iteration: 2; err: [Inf, 0.23055752796307205, 0.18812188149616121] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23055752796307205, 0.18812188149616121, 0.18741794683225452] ***
*** finished computation of 7 references, err: [Inf, 0.23055752796307205, 0.18812188149616121, 0.18741794683225452] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 51, 3]]
** centroid: 1, normalized-entropy: 0.3095434291503252, [(2, 51), (3, 3)]
*** center 2: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [45, 30, 0]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(1, 45), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [62, 19, 0]]
** centroid: 4, normalized-entropy: 0.785889583138768, [(1, 62), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [60, 33, 0]]
** centroid: 5, normalized-entropy: 0.9383153522334071, [(1, 60), (2, 33)]
*** center 6: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 42, 18]]
** centroid: 7, normalized-entropy: 0.8812908992306927, [(2, 42), (3, 18)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2525848784185946] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2525848784185946, 0.1966032197829336] ***
*** starting iteration: 2; err: [Inf, 0.2525848784185946, 0.1966032197829336] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2525848784185946, 0.1966032197829336, 0.19087066397070884] ***
*** starting iteration: 3; err: [Inf, 0.2525848784185946, 0.1966032197829336, 0.19087066397070884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2525848784185946, 0.1966032197829336, 0.19087066397070884, 0.1892304088617675] ***
*** starting iteration: 4; err: [Inf, 0.2525848784185946, 0.1966032197829336, 0.19087066397070884, 0.1892304088617675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2525848784185946, 0.1966032197829336, 0.19087066397070884, 0.1892304088617675, 0.18856892030034214] ***
*** finished computation of 7 references, err: [Inf, 0.2525848784185946, 0.1966032197829336, 0.19087066397070884, 0.1892304088617675, 0.18856892030034214] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [92, 3, 0]]
** centroid: 1, normalized-entropy: 0.2022494245476988, [(1, 92), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [66, 4, 0]]
** centroid: 2, normalized-entropy: 0.3159971329784246, [(1, 66), (2, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 27, 18]]
** centroid: 4, normalized-entropy: 0.9709505944546688, [(2, 27), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [60, 7, 0]]
** centroid: 5, normalized-entropy: 0.4830306801456181, [(1, 60), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 71, 0]]
** centroid: 6, normalized-entropy: 0.18116640155354563, [(1, 2), (2, 71)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 66, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23078469848632813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23078469848632813, 0.19058257351070643] ***
*** starting iteration: 2; err: [Inf, 0.23078469848632813, 0.19058257351070643] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23078469848632813, 0.19058257351070643, 0.1887107374034822] ***
*** starting iteration: 3; err: [Inf, 0.23078469848632813, 0.19058257351070643, 0.1887107374034822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23078469848632813, 0.19058257351070643, 0.1887107374034822, 0.1880876791831106] ***
*** finished computation of 7 references, err: [Inf, 0.23078469848632813, 0.19058257351070643, 0.1887107374034822, 0.1880876791831106] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [33, 55, 0]]
** centroid: 1, normalized-entropy: 0.954434002924965, [(1, 33), (2, 55)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 14, 0]]
** centroid: 2, normalized-entropy: 0.7706290693639406, [(1, 48), (2, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 46, 16]]
** centroid: 4, normalized-entropy: 0.8238116333123173, [(2, 46), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [4, 64, 0]]
** centroid: 5, normalized-entropy: 0.32275695889739825, [(1, 4), (2, 64)]
*** center 6: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24603618472162633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24603618472162633, 0.1888632930610329] ***
*** starting iteration: 2; err: [Inf, 0.24603618472162633, 0.1888632930610329] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24603618472162633, 0.1888632930610329, 0.18519763236911968] ***
*** starting iteration: 3; err: [Inf, 0.24603618472162633, 0.1888632930610329, 0.18519763236911968] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24603618472162633, 0.1888632930610329, 0.18519763236911968, 0.18456756087206305] ***
*** finished computation of 7 references, err: [Inf, 0.24603618472162633, 0.1888632930610329, 0.18519763236911968, 0.18456756087206305] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [36, 46, 0]]
** centroid: 1, normalized-entropy: 0.9892452969285004, [(1, 36), (2, 46)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [53, 33, 0]]
** centroid: 2, normalized-entropy: 0.9606276613221153, [(1, 53), (2, 33)]
*** center 3: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [29, 40, 0]]
** centroid: 4, normalized-entropy: 0.9815886212101388, [(1, 29), (2, 40)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 57, 14]]
** centroid: 5, normalized-entropy: 0.7162583911075451, [(2, 57), (3, 14)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [75, 1, 0]]
** centroid: 6, normalized-entropy: 0.10106696361212422, [(1, 75), (2, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24272865989431738] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24272865989431738, 0.19595946333184838] ***
*** starting iteration: 2; err: [Inf, 0.24272865989431738, 0.19595946333184838] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24272865989431738, 0.19595946333184838, 0.1905085865003057] ***
*** starting iteration: 3; err: [Inf, 0.24272865989431738, 0.19595946333184838, 0.1905085865003057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24272865989431738, 0.19595946333184838, 0.1905085865003057, 0.18901993736531586] ***
*** starting iteration: 4; err: [Inf, 0.24272865989431738, 0.19595946333184838, 0.1905085865003057, 0.18901993736531586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24272865989431738, 0.19595946333184838, 0.1905085865003057, 0.18901993736531586, 0.188514143679291] ***
*** finished computation of 7 references, err: [Inf, 0.24272865989431738, 0.19595946333184838, 0.1905085865003057, 0.18901993736531586, 0.188514143679291] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [78, 1, 0]]
** centroid: 1, normalized-entropy: 0.09794058271817412, [(1, 78), (2, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 43, 22]]
** centroid: 2, normalized-entropy: 0.9233388889944429, [(2, 43), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [64, 8, 0]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(1, 64), (2, 8)]
*** center 4: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 60, 0]]
** centroid: 6, normalized-entropy: 0.12068101401352371, [(1, 1), (2, 60)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [4, 60, 0]]
** centroid: 7, normalized-entropy: 0.3372900666170139, [(1, 4), (2, 60)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2477479834370315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2477479834370315, 0.19480245445668698] ***
*** starting iteration: 2; err: [Inf, 0.2477479834370315, 0.19480245445668698] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2477479834370315, 0.19480245445668698, 0.19130865957029164] ***
*** starting iteration: 3; err: [Inf, 0.2477479834370315, 0.19480245445668698, 0.19130865957029164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2477479834370315, 0.19480245445668698, 0.19130865957029164, 0.19156230960972606] ***
*** finished computation of 7 references, err: [Inf, 0.2477479834370315, 0.19480245445668698, 0.19130865957029164, 0.19156230960972606] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [76, 8, 0]]
** centroid: 1, normalized-entropy: 0.45371633918694493, [(1, 76), (2, 8)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 32, 15]]
** centroid: 2, normalized-entropy: 0.9034535552068337, [(2, 32), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [74, 5, 0]]
** centroid: 3, normalized-entropy: 0.340373285759646, [(1, 74), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [80, 2, 0]]
** centroid: 4, normalized-entropy: 0.16542703399626665, [(1, 80), (2, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 68, 0]]
** centroid: 6, normalized-entropy: 0.10928571467638523, [(1, 1), (2, 68)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 54, 0]]
** centroid: 7, normalized-entropy: 0.2222848306856879, [(1, 2), (2, 54)]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 354,3 => 35,1 => 611), Dict(2 => 369,3 => 32,1 => 599))
[ Info: ===== scores for single classifier: {"micro_f1":0.911,"precision":0.911,"recall":0.911,"macro_recall":0.9237648414324989,"macro_f1":0.8357686639098963,"accuracy":0.911,"class_f1":{"2":0.8677563150074293,"3":0.6881720430107526,"1":0.9513776337115073},"class_precision":{"2":0.9605263157894737,"3":0.5245901639344263,"1":0.9244094488188976},"class_recall":{"2":0.7913279132791328,"3":1.0,"1":0.9799666110183639}}
[ Info: ===== scores for 1: {"micro_f1":0.941,"precision":0.941,"recall":0.941,"macro_recall":0.9532931278116342,"macro_f1":0.8718989053717087,"accuracy":0.941,"class_f1":{"2":0.9177126917712692,"3":0.7272727272727273,"1":0.9707112970711296},"class_precision":{"2":0.9454022988505747,"3":0.5714285714285714,"1":0.9731543624161074},"class_recall":{"2":0.8915989159891599,"3":1.0,"1":0.9682804674457429}}
[ Info: ===== scores for 5: {"micro_f1":0.949,"precision":0.949,"recall":0.949,"macro_recall":0.9351016279013654,"macro_f1":0.9128826582938133,"accuracy":0.949,"class_f1":{"2":0.931909212283044,"3":0.8405797101449275,"1":0.9661590524534687},"class_precision":{"2":0.9184210526315789,"3":0.7837837837837838,"1":0.9794168096054888},"class_recall":{"2":0.94579945799458,"3":0.90625,"1":0.9532554257095158}}
[ Info: ===== scores for 7: {"micro_f1":0.946,"precision":0.946,"recall":0.946,"macro_recall":0.9334321788195622,"macro_f1":0.9034195244194851,"accuracy":0.946,"class_f1":{"2":0.9281914893617021,"3":0.8169014084507042,"1":0.9651656754460493},"class_precision":{"2":0.9112271540469974,"3":0.7435897435897436,"1":0.9826989619377162},"class_recall":{"2":0.94579945799458,"3":0.90625,"1":0.9482470784641068}}
[ Info: ===== scores for 9: {"micro_f1":0.945,"precision":0.945,"recall":0.945,"macro_recall":0.9328756957922947,"macro_f1":0.8992069232918601,"accuracy":0.945,"class_f1":{"2":0.9269588313413014,"3":0.8055555555555555,"1":0.9651063829787234},"class_precision":{"2":0.9088541666666666,"3":0.725,"1":0.984375},"class_recall":{"2":0.94579945799458,"3":0.90625,"1":0.9465776293823038}}
[ Info: ===== scores for 11: {"micro_f1":0.9500000000000001,"precision":0.95,"recall":0.95,"macro_recall":0.9349643922496543,"macro_f1":0.9026486163582937,"accuracy":0.95,"class_f1":{"2":0.9327956989247311,"3":0.8055555555555555,"1":0.9695945945945946},"class_precision":{"2":0.9253333333333333,"3":0.725,"1":0.9811965811965812},"class_recall":{"2":0.940379403794038,"3":0.90625,"1":0.9582637729549248}}
(score = 0.941, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.941, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.944, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.944, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.954, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.954, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.953, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.953, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.949, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.949, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.954, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.954, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.946, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.946, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.95, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.95, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.954,"k":3,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.954,"precision":0.954,"recall":0.954,"macro_recall":0.9378840430377037,"macro_f1":0.9164218845818007,"accuracy":0.954,"class_f1":{"2":0.9381720430107526,"3":0.8405797101449275,"1":0.9705139005897221},"class_precision":{"2":0.9306666666666666,"3":0.7837837837837838,"1":0.9795918367346939},"class_recall":{"2":0.94579945799458,"3":0.90625,"1":0.9616026711185309}}
Test Summary: | Pass  Total
AKNC          |    8      8
[63, 4, 1, 6, 12, 1, 1, 1, 1, 2, 4, 6, 7, 12, 4, 3, 3, 3, 6, 4, 3, 1, 9, 14, 3, 14, 8, 63, 24, 17, 10, 7, 17, 3, 1, 24, 10, 11, 15, 1, 2, 76, 1, 42, 23, 7, 3, 4, 5, 1, 4, 58, 13, 17, 31, 35, 2, 2, 3, 8, 2, 2, 10, 25, 7, 14, 12, 4, 30, 7, 8, 14, 6, 13, 23, 28, 7, 17, 1150, 14, 7, 25, 1, 4, 34, 3, 3, 5, 6, 25, 43, 6, 9, 12, 23, 50, 249, 29, 13, 39, 6, 45, 6, 8, 88, 14, 3, 8, 12, 61, 82, 24, 23, 37, 5, 4, 21, 3, 33, 70, 7, 3, 1, 19, 2, 1, 1, 95, 31, 5, 26, 23, 12, 29, 14, 1, 5, 98, 13, 18, 14, 5, 134, 7, 9, 17, 48, 7, 2, 33, 14, 27, 46, 56, 24, 4, 19, 117, 17, 40, 22, 41, 47, 2, 172, 21, 26, 39, 7, 19, 2, 10, 57, 327, 16, 19, 17, 24, 16, 18, 9, 44, 14, 13, 32, 7, 11, 17, 15, 30, 7, 15, 152, 19, 15, 4, 7, 42, 11, 7, 2, 9, 22, 43, 29, 42, 4, 102, 83, 131, 93, 30, 75, 12, 44, 25, 66, 15, 1, 27, 16, 12, 9, 11, 55, 65, 78, 73, 21, 48, 5, 150, 7, 47, 23, 89, 5, 3, 7, 136, 23, 14, 12, 71, 2, 7, 12, 14, 75, 36, 213, 63, 30, 23, 111, 6, 16, 11, 43, 88, 10, 7, 6, 6, 52, 49, 38, 1, 4, 46, 6, 5, 50, 5, 56, 25, 12, 28, 97, 10, 11, 15, 59, 4, 73, 29, 18, 241, 55, 10, 17, 36, 10, 25, 5, 384, 15, 4, 65, 141]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6359999999999999, speedup = 0.29208156989401013, eval_ratio = 0.070689)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.39965277777777775,"recall":0.39583333333333337,"f1":null,"seconds":0.0001994781196117401,"exhaustive_search_seconds":0.0003797188401222229,"evaluations":543.875,"distances_sum":1700.7665566587023}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5425347222222223,"recall":0.5425347222222223,"f1":null,"seconds":0.00029879622161388397,"exhaustive_search_seconds":0.0003797188401222229,"evaluations":680.2734375,"distances_sum":1627.2618006371001}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6527777777777772,"recall":0.6527777777777772,"f1":0.6527777777777772,"seconds":0.00040365010499954224,"exhaustive_search_seconds":0.0003797188401222229,"evaluations":819.7109375,"distances_sum":1571.026047698515}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7213541666666659,"recall":0.7213541666666659,"f1":0.7213541666666659,"seconds":0.0005150511860847473,"exhaustive_search_seconds":0.0003797188401222229,"evaluations":957.9453125,"distances_sum":1542.3076310514316}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7847222222222218,"recall":0.7847222222222218,"f1":0.7847222222222218,"seconds":0.0007949527353048325,"exhaustive_search_seconds":0.0003797188401222229,"evaluations":1088.390625,"distances_sum":1523.9452298776214}
KCenters.DeloneInvIndex> reached performance {"precision":0.8446180555555545,"recall":0.8446180555555545,"f1":0.8446180555555545,"seconds":0.0008223019540309906,"exhaustive_search_seconds":0.0003797188401222229,"evaluations":1201.359375,"distances_sum":1508.843390707683}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8, speedup = 0.5633932962725605, eval_ratio = 0.11376900000000001)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
