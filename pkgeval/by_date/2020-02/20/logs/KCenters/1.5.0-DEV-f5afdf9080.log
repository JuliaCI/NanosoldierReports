Julia Version 1.5.0-DEV.295
Commit f5afdf9080 (2020-02-19 18:51 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed MappedArrays ──────────────── v0.2.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed OrderedCollections ────────── v1.1.0
  Installed KCenters ──────────────────── v0.2.1
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed MLDataPattern ─────────────── v0.5.0
  Installed JSON ──────────────────────── v0.21.0
  Installed SimilaritySearch ──────────── v0.3.19
  Installed Reexport ──────────────────── v0.2.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Tables ────────────────────── v1.0.1
  Installed Missings ──────────────────── v0.4.3
  Installed TableTraits ───────────────── v1.0.0
  Installed MLDataUtils ───────────────── v0.5.0
  Installed Parsers ───────────────────── v0.3.11
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed DataAPI ───────────────────── v1.1.0
  Installed StatsBase ─────────────────── v0.32.1
  Installed DataFrames ────────────────── v0.20.2
  Installed Compat ────────────────────── v3.5.0
  Installed DataStructures ────────────── v0.17.9
  Installed DataValueInterfaces ───────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed CategoricalArrays ─────────── v0.7.7
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.1
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.5.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.1
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.1
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_Gl52Nf/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.5.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.1
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.1
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9360659371813138
[ Info: 0.8302954188982645
[ Info: 0.5556568817794323
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33568480861683686
mean(cdnet.distances) = 0.3728444637854894
mean(crand.distances) = 0.32378575337429844
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.8760962995338003,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.703125,"distances_sum":2253.6562460878654}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8553217615717624,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.5390625,"distances_sum":2182.405702455174}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7919921875,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7919921875,"f1":0.8760962995338003,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.703125,"distances_sum":2253.6562460878654}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7919921875,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7919921875,"f1":0.8760962995338003,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.703125,"distances_sum":2253.6562460878654}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.7919921875,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7919921875,"f1":0.8760962995338003,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.703125,"distances_sum":2253.6562460878654}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4384765625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4384765625,"f1":null,"seconds":4.14624810218811e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":6.203125,"distances_sum":979.2086801915261}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7041015625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.7041015625,"f1":0.8167447136197143,"seconds":5.422160029411316e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.921875,"distances_sum":1741.107131658821}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7041015625,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.7041015625,"f1":0.8167447136197143,"seconds":5.422160029411316e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.921875,"distances_sum":1741.107131658821}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8957048160173169,"seconds":7.534399628639221e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.6484375,"distances_sum":2094.2177139033}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8714571886446895,"seconds":6.008893251419067e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.5078125,"distances_sum":1950.288704018516}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8626841908091915,"seconds":5.6158751249313354e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.4765625,"distances_sum":1905.2980943660498}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8740759240759248,"seconds":9.26293432712555e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.546875,"distances_sum":1958.8811769917288}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8568983100233112,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.4765625,"distances_sum":1903.7309559586065}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.822265625,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.822265625,"f1":0.8957048160173169,"seconds":7.534399628639221e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.6484375,"distances_sum":2094.2177139033}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9544700091575097,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.8828125,"distances_sum":2486.1192196571437}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.9193910256410264,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.6640625,"distances_sum":2250.145191287908}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9399527555777561,"seconds":6.20819628238678e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.8046875,"distances_sum":2404.4518432448185}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9374141483516492,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7265625,"distances_sum":2365.245352502951}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.964033882783883,"seconds":6.3963234424591064e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.9140625,"distances_sum":2576.244453512042}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9124401640026646,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.6796875,"distances_sum":2225.613830838548}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9504152097902104,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.859375,"distances_sum":2503.467396258996}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.9002268564768572,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.5859375,"distances_sum":2166.8373900155134}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9660771520146522,"seconds":6.120651960372925e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.9375,"distances_sum":2596.0870965545964}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9660771520146522,"seconds":6.120651960372925e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.9375,"distances_sum":2596.0870965545964}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9660771520146522,"seconds":6.120651960372925e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.9375,"distances_sum":2596.0870965545964}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.185546875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.185546875,"f1":null,"seconds":3.0547380447387695e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":5.015625,"distances_sum":478.19951781277166}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.185546875,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.185546875,"f1":null,"seconds":3.0547380447387695e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":5.015625,"distances_sum":478.19951781277166}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1953125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1953125,"f1":null,"seconds":3.382563591003418e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":5.2578125,"distances_sum":516.3856731010355}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.7961082320457327,"seconds":4.822388291358948e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":7.5390625,"distances_sum":1616.973862029167}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7833354145854153,"seconds":5.0533562898635864e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":7.5078125,"distances_sum":1509.1615448634855}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8491654179154189,"seconds":5.362555384635925e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":7.984375,"distances_sum":1810.4599194264088}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.751953125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.751953125,"f1":0.8491654179154189,"seconds":5.362555384635925e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":7.984375,"distances_sum":1810.4599194264088}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8546510780885789,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.0546875,"distances_sum":1827.9387755540768}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8571688727938737,"seconds":5.189329385757446e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.09375,"distances_sum":1865.0421534414206}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9418669871794878,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.6953125,"distances_sum":2365.335393899307}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.79296875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.79296875,"f1":0.8767747877122885,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.2578125,"distances_sum":1940.531297286906}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8602397602397609,"seconds":5.768612027168274e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.0859375,"distances_sum":1862.6921269289123}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8984375,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.8984375,"f1":0.9418669871794878,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.6953125,"distances_sum":2365.335393899307}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8984375,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.8984375,"f1":0.9418669871794878,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.6953125,"distances_sum":2365.335393899307}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80859375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.80859375,"f1":0.8888023434898444,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.390625,"distances_sum":1950.4445912823094}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6025390625, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.6025390625,"f1":0.7362113580863587,"seconds":4.526227712631226e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.2578125,"distances_sum":1320.4936661926718}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.80859375,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.80859375,"f1":0.8888023434898444,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.390625,"distances_sum":1950.4445912823094}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9446314102564106,"seconds":7.383525371551514e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.7421875,"distances_sum":2309.701150378929}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9540636446886452,"seconds":6.599351763725281e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8359375,"distances_sum":2398.23005590207}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9540636446886452,"seconds":6.599351763725281e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8359375,"distances_sum":2398.23005590207}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9621279761904765,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8828125,"distances_sum":2442.4229425532512}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9621279761904765,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8828125,"distances_sum":2442.4229425532512}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9621279761904765,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8828125,"distances_sum":2442.4229425532512}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1611328125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1611328125,"f1":null,"seconds":3.2335519790649414e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":4.84375,"distances_sum":409.5470308128464}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7021484375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.7021484375,"f1":0.8140227827727835,"seconds":5.07943332195282e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.6796875,"distances_sum":1760.5888627326879}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7021484375,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.7021484375,"f1":0.8140227827727835,"seconds":5.07943332195282e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.6796875,"distances_sum":1760.5888627326879}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.873766858141859,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.1328125,"distances_sum":2030.1538014757332}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7880859375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7880859375,"f1":0.873766858141859,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.1328125,"distances_sum":2030.1538014757332}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9046130952380961,"seconds":5.392357707023621e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.296875,"distances_sum":2185.997118504742}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8939393939393947,"seconds":5.727633833885193e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.265625,"distances_sum":2162.75919012397}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8359375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8359375,"f1":0.9046130952380961,"seconds":5.392357707023621e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.296875,"distances_sum":2185.997118504742}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8359375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8359375,"f1":0.9046130952380961,"seconds":5.392357707023621e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.296875,"distances_sum":2185.997118504742}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8573837620712629,"seconds":5.478039383888245e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.0,"distances_sum":1957.2463196943097}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6943359375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6943359375,"f1":0.8061173201798209,"seconds":4.9173831939697266e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.59375,"distances_sum":1719.1611009846015}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76171875,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.76171875,"f1":0.8573837620712629,"seconds":5.478039383888245e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.0,"distances_sum":1957.2463196943097}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9297421328671335,"seconds":5.992129445075989e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.59375,"distances_sum":2340.185842753422}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9429976273726278,"seconds":6.081536412239075e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.6875,"distances_sum":2409.8937904153404}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9196345321345328,"seconds":5.781650543212891e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.53125,"distances_sum":2218.8200154607216}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9070117382617391,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.53125,"distances_sum":2171.7643130217602}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9459535256410263,"seconds":5.9586018323898315e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7265625,"distances_sum":2403.8434262073056}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9459535256410263,"seconds":5.9586018323898315e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7265625,"distances_sum":2403.8434262073056}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9746852106227111,"seconds":6.167218089103699e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9375,"distances_sum":2597.7380790036254}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9713541666666671,"seconds":6.401911377906799e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.921875,"distances_sum":2577.6574904822564}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9711137820512824,"seconds":6.332993507385254e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.921875,"distances_sum":2558.9929135708776}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9663549991674995,"seconds":6.3516199588775635e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.90625,"distances_sum":2561.2295287258803}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9639194139194144,"seconds":6.161630153656006e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.90625,"distances_sum":2521.051696286652}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9669299450549454,"seconds":6.338581442832947e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.890625,"distances_sum":2545.530024739811}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9537290834165838,"seconds":6.375834345817566e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.859375,"distances_sum":2469.776624245256}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9746852106227111,"seconds":6.167218089103699e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9375,"distances_sum":2597.7380790036254}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9746852106227111,"seconds":6.167218089103699e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9375,"distances_sum":2597.7380790036254}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.359375,"f1":null,"seconds":3.725290298461914e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":5.3671875,"distances_sum":702.9438241440669}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3642578125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3642578125,"f1":null,"seconds":3.7867575883865356e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":5.5078125,"distances_sum":720.9299203021873}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3642578125,"state":{"ssize":2,"bsize":2},"perf":{"precision":null,"recall":0.3642578125,"f1":null,"seconds":3.7867575883865356e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":5.5078125,"distances_sum":720.9299203021873}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6455078125, conf: {"ssize":2,"bsize":4}, perf: {"precision":0.9839843749999999,"recall":0.6455078125,"f1":0.7666294642857148,"seconds":5.0049275159835815e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":7.2109375,"distances_sum":1326.2573918950704}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6455078125,"state":{"ssize":2,"bsize":4},"perf":{"precision":0.9839843749999999,"recall":0.6455078125,"f1":0.7666294642857148,"seconds":5.0049275159835815e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":7.2109375,"distances_sum":1326.2573918950704}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7392578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9848028273809524,"recall":0.7392578125,"f1":0.836091122419248,"seconds":5.414709448814392e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":7.78125,"distances_sum":1548.225122125956}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":0.9855561755952382,"recall":0.8984375,"f1":0.9368296417124544,"seconds":6.07222318649292e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.7109375,"distances_sum":2139.7309129496975}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8984375,"state":{"ssize":1,"bsize":8},"perf":{"precision":0.9855561755952382,"recall":0.8984375,"f1":0.9368296417124544,"seconds":6.07222318649292e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.7109375,"distances_sum":2139.7309129496975}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8984375,"state":{"ssize":1,"bsize":8},"perf":{"precision":0.9855561755952382,"recall":0.8984375,"f1":0.9368296417124544,"seconds":6.07222318649292e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.7109375,"distances_sum":2139.7309129496975}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.55859375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.55859375,"f1":null,"seconds":5.494803190231323e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":6.9140625,"distances_sum":1088.6540120011252}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.697265625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.697265625,"f1":0.8028955419580429,"seconds":5.057081580162048e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":7.59375,"distances_sum":1409.1678859026533}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.54296875, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.54296875,"f1":null,"seconds":4.5746564865112305e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":6.9375,"distances_sum":1001.8748173205706}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.697265625,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.697265625,"f1":0.8028955419580429,"seconds":5.057081580162048e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":7.59375,"distances_sum":1409.1678859026533}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9114359598734606,"seconds":9.308755397796631e-5,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.234375,"distances_sum":1814.3883245235759}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9300309065934073,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.4609375,"distances_sum":1903.1950174108683}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9303857600732607,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.5859375,"distances_sum":1892.1989555158038}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.9099478646353653,"seconds":5.727633833885193e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.25,"distances_sum":1800.1519801242523}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.81640625, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.81640625,"f1":0.8886075729825739,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.0703125,"distances_sum":1712.554945789368}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.876953125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.876953125,"f1":0.9300309065934073,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.4609375,"distances_sum":1903.1950174108683}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9632841117216122,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.828125,"distances_sum":2165.1408445539478}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9466575091575096,"seconds":5.597248673439026e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.703125,"distances_sum":2071.43515795697}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.977386675824176,"seconds":6.297603249549866e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.890625,"distances_sum":2254.322613403311}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9570913461538468,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.796875,"distances_sum":2102.992778665973}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9479452838827844,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.75,"distances_sum":2057.55701934072}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9629178113553121,"seconds":5.9194862842559814e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.8125,"distances_sum":2169.006375069295}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9523122710622713,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.7265625,"distances_sum":2096.6468209430864}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9530792124542131,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.7578125,"distances_sum":2088.0167866070715}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9610004578754584,"seconds":5.947425961494446e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.796875,"distances_sum":2133.759193395064}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.977386675824176,"seconds":6.297603249549866e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.890625,"distances_sum":2254.322613403311}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.977386675824176,"seconds":6.297603249549866e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.890625,"distances_sum":2254.322613403311}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.427734375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.427734375,"f1":null,"seconds":4.153698682785034e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":6.75,"distances_sum":775.5038404561084}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.427734375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.427734375,"f1":null,"seconds":4.153698682785034e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":6.75,"distances_sum":775.5038404561084}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.427734375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.427734375,"f1":null,"seconds":4.153698682785034e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":6.75,"distances_sum":775.5038404561084}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.427734375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.427734375,"f1":null,"seconds":4.153698682785034e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":6.75,"distances_sum":775.5038404561084}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5400390625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5400390625,"f1":0.6855670371295376,"seconds":4.328787326812744e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":6.8515625,"distances_sum":1348.2904617775453}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4033203125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4033203125,"f1":null,"seconds":3.993511199951172e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":5.9140625,"distances_sum":995.5503625112506}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5400390625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5400390625,"f1":0.6855670371295376,"seconds":4.328787326812744e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":6.8515625,"distances_sum":1348.2904617775453}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.942050137362638,"seconds":5.9157609939575195e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.65625,"distances_sum":2751.693012079316}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6513671875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6513671875,"f1":0.7793170371295379,"seconds":4.6510249376297e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":7.3359375,"distances_sum":1715.3372004689427}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8646062271062278,"seconds":5.168840289115906e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.1015625,"distances_sum":2151.3221260460764}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.740234375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.740234375,"f1":0.842781177156178,"seconds":5.168840289115906e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":7.8359375,"distances_sum":2038.2069562272418}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8984375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8984375,"f1":0.942050137362638,"seconds":5.9157609939575195e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.65625,"distances_sum":2751.693012079316}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9675824175824178,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.859375,"distances_sum":2944.417676631164}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9439961080586086,"seconds":5.8766454458236694e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.640625,"distances_sum":2800.2604070805373}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9675824175824178,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.859375,"distances_sum":2944.417676631164}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9675824175824178,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.859375,"distances_sum":2944.417676631164}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.53125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.53125,"f1":0.6788485819735824,"seconds":4.056841135025024e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.4765625,"distances_sum":1400.0624654538838}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.861607663170164,"seconds":5.19677996635437e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.15625,"distances_sum":2128.7451643852955}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7685546875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7685546875,"f1":0.861607663170164,"seconds":5.19677996635437e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.15625,"distances_sum":2128.7451643852955}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7685546875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7685546875,"f1":0.861607663170164,"seconds":5.19677996635437e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.15625,"distances_sum":2128.7451643852955}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.7685546875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7685546875,"f1":0.861607663170164,"seconds":5.19677996635437e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.15625,"distances_sum":2128.7451643852955}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3583984375, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3583984375,"f1":null,"seconds":3.5855919122695923e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":5.234375,"distances_sum":928.1397580313471}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.63671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.63671875,"f1":0.7651561979686987,"seconds":4.695728421211243e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.3203125,"distances_sum":1668.1035775332866}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2060546875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2060546875,"f1":null,"seconds":3.166496753692627e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":4.7265625,"distances_sum":614.416236431736}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.63671875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.63671875,"f1":0.7651561979686987,"seconds":4.695728421211243e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.3203125,"distances_sum":1668.1035775332866}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7314453125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7314453125,"f1":0.8356497668997677,"seconds":5.418434739112854e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.796875,"distances_sum":1958.5661895854912}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9340118215118222,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.46875,"distances_sum":2657.9593500919236}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.71875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.71875,"f1":0.8220532939282947,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.8359375,"distances_sum":1914.4324020076529}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8857421875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8857421875,"f1":0.9340118215118222,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.46875,"distances_sum":2657.9593500919236}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8857421875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8857421875,"f1":0.9340118215118222,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.46875,"distances_sum":2657.9593500919236}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8857421875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8857421875,"f1":0.9340118215118222,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.46875,"distances_sum":2657.9593500919236}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.65625,"f1":0.7818447177822186,"seconds":4.779547452926636e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.578125,"distances_sum":1664.9881243722393}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.65625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.65625,"f1":0.7818447177822186,"seconds":4.779547452926636e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.578125,"distances_sum":1664.9881243722393}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9347012362637368,"seconds":5.869194865226746e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.4921875,"distances_sum":2556.652443005985}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.88671875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.88671875,"f1":0.9347012362637368,"seconds":5.869194865226746e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.4921875,"distances_sum":2556.652443005985}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9479395604395611,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.703125,"distances_sum":2710.318046596669}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.955755182317683,"seconds":6.16908073425293e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7265625,"distances_sum":2777.375990008226}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.955755182317683,"seconds":6.16908073425293e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7265625,"distances_sum":2777.375990008226}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9228515625,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.955755182317683,"seconds":6.16908073425293e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7265625,"distances_sum":2777.375990008226}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6640625,"f1":0.7884063852813861,"seconds":4.934147000312805e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":7.796875,"distances_sum":1720.5266766848372}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.669921875,"f1":0.7919391372516381,"seconds":5.276873707771301e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":7.9296875,"distances_sum":1716.2534164442081}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8533466533466543,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.234375,"distances_sum":2026.8398272242916}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7587890625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7587890625,"f1":0.8533466533466543,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.234375,"distances_sum":2026.8398272242916}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9540235805860812,"seconds":6.109476089477539e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.78125,"distances_sum":2764.2319670888382}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9303659881784886,"seconds":5.83939254283905e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.5546875,"distances_sum":2587.4649806385564}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9072718947718954,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.6484375,"distances_sum":2398.0287676242665}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9540235805860812,"seconds":6.109476089477539e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.78125,"distances_sum":2764.2319670888382}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9556433150183156,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.828125,"distances_sum":2782.368042309858}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9556433150183156,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.828125,"distances_sum":2782.368042309858}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.921875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9556433150183156,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.828125,"distances_sum":2782.368042309858}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6435546875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6435546875,"f1":0.7699049214674222,"seconds":4.753470420837402e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.8125,"distances_sum":1618.5960787944273}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.65625,"f1":0.7812916250416259,"seconds":5.086883902549744e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.0390625,"distances_sum":1615.0190905735703}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.65625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.65625,"f1":0.7812916250416259,"seconds":5.086883902549744e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.0390625,"distances_sum":1615.0190905735703}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9110405219780229,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.453125,"distances_sum":2334.2045608737467}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9402071886446893,"seconds":5.602836608886719e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.546875,"distances_sum":2566.6651340824465}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9109692390942398,"seconds":5.671754479408264e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.515625,"distances_sum":2368.5328824489357}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9343864468864472,"seconds":5.7462602853775024e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.5625,"distances_sum":2526.0706745425778}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8935546875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9402071886446893,"seconds":5.602836608886719e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.546875,"distances_sum":2566.6651340824465}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9572229853479859,"seconds":5.869194865226746e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.765625,"distances_sum":2744.196575867351}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9711137820512824,"seconds":5.9604644775390625e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.84375,"distances_sum":2850.967519202757}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9711137820512824,"seconds":5.9604644775390625e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.84375,"distances_sum":2850.967519202757}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9711137820512824,"seconds":5.9604644775390625e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.84375,"distances_sum":2850.967519202757}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6201171875, conf: {"ssize":3,"bsize":4}, perf: {"precision":null,"recall":0.6201171875,"f1":null,"seconds":4.669651389122009e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.6640625,"distances_sum":1780.3011264652887}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6240234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6240234375,"f1":0.7504682817182825,"seconds":4.61190938949585e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.65625,"distances_sum":1822.4443697246834}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8708629911754918,"seconds":5.038455128669739e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.421875,"distances_sum":2374.6434743198656}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7841796875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7841796875,"f1":0.8708629911754918,"seconds":5.038455128669739e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.421875,"distances_sum":2374.6434743198656}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8985119047619055,"seconds":5.6158751249313354e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.65625,"distances_sum":2559.737023959746}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9228422619047626,"seconds":5.252659320831299e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.6796875,"distances_sum":2755.8670731950597}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9319742757242762,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.625,"distances_sum":2815.4958741607747}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9349816849816857,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.6484375,"distances_sum":2837.1075578940736}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.81640625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.81640625,"f1":0.8911661255411262,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.6328125,"distances_sum":2499.430011522923}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.88671875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.88671875,"f1":0.9349816849816857,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.6484375,"distances_sum":2837.1075578940736}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9725331959706963,"seconds":5.956739187240601e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.859375,"distances_sum":3130.3344089016223}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9667639652014658,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8359375,"distances_sum":3061.291446703406}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9668727106227113,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.875,"distances_sum":3041.982301478132}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9526842948717952,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.7890625,"distances_sum":2959.3016223212294}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":10,"bsize":11}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9612236721611729,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.859375,"distances_sum":2997.9296146911174}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":10,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9503033424908429,"seconds":5.776062607765198e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.7265625,"distances_sum":2944.805887855114}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9579269688644693,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8359375,"distances_sum":2976.440554966942}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.966895604395605,"seconds":5.511566996574402e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.859375,"distances_sum":3055.96558261067}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9725331959706963,"seconds":5.956739187240601e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.859375,"distances_sum":3130.3344089016223}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9725331959706963,"seconds":5.956739187240601e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.859375,"distances_sum":3130.3344089016223}}, n: 9
mean(cfft.distances) = 0.33568480907586823
mean(cdnet.distances) = 0.4378093516118913
mean(crand.distances) = 0.3702342825052819
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8844444444444445
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9466666666666667
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8733333333333334
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8911111111111111
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8666666666666667
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9044444444444445
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9311111111111111
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9288888888888889
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.888888888888889
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8622222222222223
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9044444444444445
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8933333333333332
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8866666666666667
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9022222222222221
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9266666666666667
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9266666666666667
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8755555555555556
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8733333333333334
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.92
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9222222222222222
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.888888888888889
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.88
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8955555555555555
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9266666666666666
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9066666666666666
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8911111111111111
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9022222222222224
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5346533413728078] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 26, 4]]
** centroid: 6, normalized-entropy: 0.5665095065529052, [(2, 26), (3, 4)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 2]]
** centroid: 8, normalized-entropy: 1.0, [(2, 2), (3, 2)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 9, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 11: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
finished with 15 centroids; started with 12
acc = 0.9666666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.3855838672657897] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3855838672657897, 0.2963338993117773] ***
*** finished computation of 3 references, err: [Inf, 0.3855838672657897, 0.2963338993117773] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [142, 229, 22]]
** centroid: 1, normalized-entropy: 0.768154965524189, [(1, 142), (2, 229), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [202, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3065982173117383] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3065982173117383, 0.25641391665648217] ***
*** finished computation of 3 references, err: [Inf, 0.3065982173117383, 0.25641391665648217] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [80, 101, 20]]
** centroid: 1, normalized-entropy: 0.8575283964288477, [(1, 80), (2, 101), (3, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [172, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [159, 126, 9]]
** centroid: 3, normalized-entropy: 0.7302661755562626, [(1, 159), (2, 126), (3, 9)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.33079613850073614] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33079613850073614, 0.2671213362790432] ***
*** finished computation of 3 references, err: [Inf, 0.33079613850073614, 0.2671213362790432] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 105, 29]]
** centroid: 1, normalized-entropy: 0.753572561997754, [(2, 105), (3, 29)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [159, 87, 0]]
** centroid: 2, normalized-entropy: 0.9372930661967526, [(1, 159), (2, 87)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [253, 34, 0]]
** centroid: 3, normalized-entropy: 0.5249378988005239, [(1, 253), (2, 34)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3036509731213923] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3036509731213923, 0.23767212573187174] ***
*** starting iteration: 2; err: [Inf, 0.3036509731213923, 0.23767212573187174] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3036509731213923, 0.23767212573187174, 0.23722583953956808] ***
*** finished computation of 3 references, err: [Inf, 0.3036509731213923, 0.23767212573187174, 0.23722583953956808] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [95, 107, 12]]
** centroid: 1, normalized-entropy: 0.7906703610143395, [(1, 95), (2, 107), (3, 12)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [102, 122, 10]]
** centroid: 2, normalized-entropy: 0.7611836464394448, [(1, 102), (2, 122), (3, 10)]
*** center 3: selecting labels [1] (freq >= 1) [from [218, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3811283184493287] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3811283184493287, 0.24600979895784758] ***
*** starting iteration: 2; err: [Inf, 0.3811283184493287, 0.24600979895784758] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3811283184493287, 0.24600979895784758, 0.2392738069012493] ***
*** starting iteration: 3; err: [Inf, 0.3811283184493287, 0.24600979895784758, 0.2392738069012493] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3811283184493287, 0.24600979895784758, 0.2392738069012493, 0.23793302415842205] ***
*** finished computation of 3 references, err: [Inf, 0.3811283184493287, 0.24600979895784758, 0.2392738069012493, 0.23793302415842205] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [3, 187, 29]]
** centroid: 1, normalized-entropy: 0.4199651832693689, [(1, 3), (2, 187), (3, 29)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [135, 32, 0]]
** centroid: 2, normalized-entropy: 0.7048413846784704, [(1, 135), (2, 32)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [273, 8, 0]]
** centroid: 3, normalized-entropy: 0.1866587064446992, [(1, 273), (2, 8)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28611542631744935] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28611542631744935, 0.24362257122644398] ***
*** starting iteration: 2; err: [Inf, 0.28611542631744935, 0.24362257122644398] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28611542631744935, 0.24362257122644398, 0.2377522060803991] ***
*** starting iteration: 3; err: [Inf, 0.28611542631744935, 0.24362257122644398, 0.2377522060803991] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28611542631744935, 0.24362257122644398, 0.2377522060803991, 0.2368707152151934] ***
*** finished computation of 3 references, err: [Inf, 0.28611542631744935, 0.24362257122644398, 0.2377522060803991, 0.2368707152151934] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [100, 115, 18]]
** centroid: 1, normalized-entropy: 0.8277358255238938, [(1, 100), (2, 115), (3, 18)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [87, 111, 11]]
** centroid: 2, normalized-entropy: 0.7790565596563437, [(1, 87), (2, 111), (3, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [225, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1875118816127391] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1875118816127391, 0.16089897770392667] ***
*** starting iteration: 2; err: [Inf, 0.1875118816127391, 0.16089897770392667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1875118816127391, 0.16089897770392667, 0.15773432884314978] ***
*** starting iteration: 3; err: [Inf, 0.1875118816127391, 0.16089897770392667, 0.15773432884314978] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1875118816127391, 0.16089897770392667, 0.15773432884314978, 0.1570425778816177] ***
*** finished computation of 7 references, err: [Inf, 0.1875118816127391, 0.16089897770392667, 0.15773432884314978, 0.1570425778816177] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [97, 3, 0]]
** centroid: 1, normalized-entropy: 0.19439185783157603, [(1, 97), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 131, 22]]
** centroid: 2, normalized-entropy: 0.5940812491539164, [(2, 131), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [103, 3, 0]]
** centroid: 3, normalized-entropy: 0.1858030790723033, [(1, 103), (2, 3)]
*** center 4: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [59, 33, 0]]
** centroid: 6, normalized-entropy: 0.9415951533268216, [(1, 59), (2, 33)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [40, 59, 0]]
** centroid: 7, normalized-entropy: 0.9732650674751335, [(1, 40), (2, 59)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1960596476962184] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1960596476962184, 0.16708317682610593] ***
*** starting iteration: 2; err: [Inf, 0.1960596476962184, 0.16708317682610593] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1960596476962184, 0.16708317682610593, 0.16131794013116493] ***
*** starting iteration: 3; err: [Inf, 0.1960596476962184, 0.16708317682610593, 0.16131794013116493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1960596476962184, 0.16708317682610593, 0.16131794013116493, 0.15782039296447484] ***
*** starting iteration: 4; err: [Inf, 0.1960596476962184, 0.16708317682610593, 0.16131794013116493, 0.15782039296447484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1960596476962184, 0.16708317682610593, 0.16131794013116493, 0.15782039296447484, 0.15578330297691878] ***
*** starting iteration: 5; err: [Inf, 0.1960596476962184, 0.16708317682610593, 0.16131794013116493, 0.15782039296447484, 0.15578330297691878] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1960596476962184, 0.16708317682610593, 0.16131794013116493, 0.15782039296447484, 0.15578330297691878, 0.15279747670128205] ***
*** starting iteration: 6; err: [Inf, 0.1960596476962184, 0.16708317682610593, 0.16131794013116493, 0.15782039296447484, 0.15578330297691878, 0.15279747670128205] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1960596476962184, 0.16708317682610593, 0.16131794013116493, 0.15782039296447484, 0.15578330297691878, 0.15279747670128205, 0.14874008117694648] ***
*** starting iteration: 7; err: [Inf, 0.1960596476962184, 0.16708317682610593, 0.16131794013116493, 0.15782039296447484, 0.15578330297691878, 0.15279747670128205, 0.14874008117694648] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1960596476962184, 0.16708317682610593, 0.16131794013116493, 0.15782039296447484, 0.15578330297691878, 0.15279747670128205, 0.14874008117694648, 0.14657562870198562] ***
*** starting iteration: 8; err: [Inf, 0.1960596476962184, 0.16708317682610593, 0.16131794013116493, 0.15782039296447484, 0.15578330297691878, 0.15279747670128205, 0.14874008117694648, 0.14657562870198562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1960596476962184, 0.16708317682610593, 0.16131794013116493, 0.15782039296447484, 0.15578330297691878, 0.15279747670128205, 0.14874008117694648, 0.14657562870198562, 0.1451177113533098] ***
*** starting iteration: 9; err: [Inf, 0.1960596476962184, 0.16708317682610593, 0.16131794013116493, 0.15782039296447484, 0.15578330297691878, 0.15279747670128205, 0.14874008117694648, 0.14657562870198562, 0.1451177113533098] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1960596476962184, 0.16708317682610593, 0.16131794013116493, 0.15782039296447484, 0.15578330297691878, 0.15279747670128205, 0.14874008117694648, 0.14657562870198562, 0.1451177113533098, 0.14442921073121512] ***
*** finished computation of 7 references, err: [Inf, 0.1960596476962184, 0.16708317682610593, 0.16131794013116493, 0.15782039296447484, 0.15578330297691878, 0.15279747670128205, 0.14874008117694648, 0.14657562870198562, 0.1451177113533098, 0.14442921073121512] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 92, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 25, 0]]
** centroid: 2, normalized-entropy: 0.8652817028791377, [(1, 62), (2, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [94, 3, 0]]
** centroid: 3, normalized-entropy: 0.19902377455969078, [(1, 94), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [85, 7, 0]]
** centroid: 4, normalized-entropy: 0.3882389775123619, [(1, 85), (2, 7)]
*** center 5: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 89, 29]]
** centroid: 6, normalized-entropy: 0.804492844152443, [(2, 89), (3, 29)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [76, 11, 0]]
** centroid: 7, normalized-entropy: 0.5475844288749033, [(1, 76), (2, 11)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2461487110466815] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2461487110466815, 0.19405933909084663] ***
*** starting iteration: 2; err: [Inf, 0.2461487110466815, 0.19405933909084663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2461487110466815, 0.19405933909084663, 0.1730428299003712] ***
*** starting iteration: 3; err: [Inf, 0.2461487110466815, 0.19405933909084663, 0.1730428299003712] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2461487110466815, 0.19405933909084663, 0.1730428299003712, 0.16167562334509245] ***
*** starting iteration: 4; err: [Inf, 0.2461487110466815, 0.19405933909084663, 0.1730428299003712, 0.16167562334509245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2461487110466815, 0.19405933909084663, 0.1730428299003712, 0.16167562334509245, 0.15752531408096315] ***
*** starting iteration: 5; err: [Inf, 0.2461487110466815, 0.19405933909084663, 0.1730428299003712, 0.16167562334509245, 0.15752531408096315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2461487110466815, 0.19405933909084663, 0.1730428299003712, 0.16167562334509245, 0.15752531408096315, 0.15520013089733675] ***
*** starting iteration: 6; err: [Inf, 0.2461487110466815, 0.19405933909084663, 0.1730428299003712, 0.16167562334509245, 0.15752531408096315, 0.15520013089733675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2461487110466815, 0.19405933909084663, 0.1730428299003712, 0.16167562334509245, 0.15752531408096315, 0.15520013089733675, 0.1532208564770834] ***
*** starting iteration: 7; err: [Inf, 0.2461487110466815, 0.19405933909084663, 0.1730428299003712, 0.16167562334509245, 0.15752531408096315, 0.15520013089733675, 0.1532208564770834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2461487110466815, 0.19405933909084663, 0.1730428299003712, 0.16167562334509245, 0.15752531408096315, 0.15520013089733675, 0.1532208564770834, 0.15201656658180068] ***
*** starting iteration: 8; err: [Inf, 0.2461487110466815, 0.19405933909084663, 0.1730428299003712, 0.16167562334509245, 0.15752531408096315, 0.15520013089733675, 0.1532208564770834, 0.15201656658180068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2461487110466815, 0.19405933909084663, 0.1730428299003712, 0.16167562334509245, 0.15752531408096315, 0.15520013089733675, 0.1532208564770834, 0.15201656658180068, 0.15105920101052034] ***
*** finished computation of 7 references, err: [Inf, 0.2461487110466815, 0.19405933909084663, 0.1730428299003712, 0.16167562334509245, 0.15752531408096315, 0.15520013089733675, 0.1532208564770834, 0.15201656658180068, 0.15105920101052034] ***
*** center 1: selecting labels [1] (freq >= 2) [from [110, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [44, 40, 0]]
** centroid: 2, normalized-entropy: 0.998363672593813, [(1, 44), (2, 40)]
*** center 3: selecting labels [1] (freq >= 2) [from [126, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 76, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 66, 29]]
** centroid: 5, normalized-entropy: 0.8876297058429742, [(2, 66), (3, 29)]
*** center 6: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [45, 43, 0]]
** centroid: 7, normalized-entropy: 0.9996273710574612, [(1, 45), (2, 43)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18897401182297002] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18897401182297002, 0.15318003996672505] ***
*** starting iteration: 2; err: [Inf, 0.18897401182297002, 0.15318003996672505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18897401182297002, 0.15318003996672505, 0.15028574390129912] ***
*** starting iteration: 3; err: [Inf, 0.18897401182297002, 0.15318003996672505, 0.15028574390129912] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18897401182297002, 0.15318003996672505, 0.15028574390129912, 0.14945271582756606] ***
*** finished computation of 7 references, err: [Inf, 0.18897401182297002, 0.15318003996672505, 0.15028574390129912, 0.14945271582756606] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [1, 69, 0]]
** centroid: 1, normalized-entropy: 0.10802319526362848, [(1, 1), (2, 69)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [24, 86, 0]]
** centroid: 2, normalized-entropy: 0.7568336324184036, [(1, 24), (2, 86)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [98, 1, 0]]
** centroid: 3, normalized-entropy: 0.08146202691505994, [(1, 98), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [103, 2, 0]]
** centroid: 4, normalized-entropy: 0.1360592862387751, [(1, 103), (2, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [124, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 68, 22]]
** centroid: 6, normalized-entropy: 0.80235344282919, [(2, 68), (3, 22)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [65, 3, 0]]
** centroid: 7, normalized-entropy: 0.260862909647207, [(1, 65), (2, 3)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2509318094454829] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2509318094454829, 0.17588521423295833] ***
*** starting iteration: 2; err: [Inf, 0.2509318094454829, 0.17588521423295833] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2509318094454829, 0.17588521423295833, 0.15596319406364542] ***
*** starting iteration: 3; err: [Inf, 0.2509318094454829, 0.17588521423295833, 0.15596319406364542] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2509318094454829, 0.17588521423295833, 0.15596319406364542, 0.14801718290222213] ***
*** starting iteration: 4; err: [Inf, 0.2509318094454829, 0.17588521423295833, 0.15596319406364542, 0.14801718290222213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2509318094454829, 0.17588521423295833, 0.15596319406364542, 0.14801718290222213, 0.14532945161501037] ***
*** starting iteration: 5; err: [Inf, 0.2509318094454829, 0.17588521423295833, 0.15596319406364542, 0.14801718290222213, 0.14532945161501037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2509318094454829, 0.17588521423295833, 0.15596319406364542, 0.14801718290222213, 0.14532945161501037, 0.14469984588052692] ***
*** finished computation of 7 references, err: [Inf, 0.2509318094454829, 0.17588521423295833, 0.15596319406364542, 0.14801718290222213, 0.14532945161501037, 0.14469984588052692] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [71, 22, 0]]
** centroid: 1, normalized-entropy: 0.7892712724536985, [(1, 71), (2, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 4, 0]]
** centroid: 3, normalized-entropy: 0.33352200393097675, [(1, 61), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [86, 33, 0]]
** centroid: 4, normalized-entropy: 0.8517608318524026, [(1, 86), (2, 33)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [1, 88, 0]]
** centroid: 5, normalized-entropy: 0.08887969568457589, [(1, 1), (2, 88)]
*** center 6: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 80, 29]]
** centroid: 7, normalized-entropy: 0.8357467426696918, [(2, 80), (3, 29)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19570335134168504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19570335134168504, 0.16363267799925948] ***
*** starting iteration: 2; err: [Inf, 0.19570335134168504, 0.16363267799925948] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19570335134168504, 0.16363267799925948, 0.15618099367477814] ***
*** starting iteration: 3; err: [Inf, 0.19570335134168504, 0.16363267799925948, 0.15618099367477814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19570335134168504, 0.16363267799925948, 0.15618099367477814, 0.1534550512318445] ***
*** starting iteration: 4; err: [Inf, 0.19570335134168504, 0.16363267799925948, 0.15618099367477814, 0.1534550512318445] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19570335134168504, 0.16363267799925948, 0.15618099367477814, 0.1534550512318445, 0.15169448776183178] ***
*** starting iteration: 5; err: [Inf, 0.19570335134168504, 0.16363267799925948, 0.15618099367477814, 0.1534550512318445, 0.15169448776183178] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19570335134168504, 0.16363267799925948, 0.15618099367477814, 0.1534550512318445, 0.15169448776183178, 0.15011610805351605] ***
*** starting iteration: 6; err: [Inf, 0.19570335134168504, 0.16363267799925948, 0.15618099367477814, 0.1534550512318445, 0.15169448776183178, 0.15011610805351605] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19570335134168504, 0.16363267799925948, 0.15618099367477814, 0.1534550512318445, 0.15169448776183178, 0.15011610805351605, 0.14929636653772427] ***
*** finished computation of 7 references, err: [Inf, 0.19570335134168504, 0.16363267799925948, 0.15618099367477814, 0.1534550512318445, 0.15169448776183178, 0.15011610805351605, 0.14929636653772427] ***
*** center 1: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [58, 33, 0]]
** centroid: 3, normalized-entropy: 0.9448506439764089, [(1, 58), (2, 33)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [41, 48, 0]]
** centroid: 4, normalized-entropy: 0.995533068899466, [(1, 41), (2, 48)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [69, 46, 0]]
** centroid: 5, normalized-entropy: 0.9709505944546688, [(1, 69), (2, 46)]
*** center 6: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 99, 29]]
** centroid: 7, normalized-entropy: 0.7719706699485864, [(2, 99), (3, 29)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27794956333946447] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27794956333946447, 0.16948819855597239] ***
*** finished computation of 7 references, err: [Inf, 0.27794956333946447, 0.16948819855597239] ***
*** center 1: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [127, 6, 0]]
** centroid: 2, normalized-entropy: 0.2652619074982421, [(1, 127), (2, 6)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 111, 0]]
** centroid: 3, normalized-entropy: 0.8725569836465037, [(1, 46), (2, 111)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 69, 22]]
** centroid: 4, normalized-entropy: 0.7979519684655734, [(2, 69), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 43, 0]]
** centroid: 5, normalized-entropy: 0.4820661480830933, [(1, 5), (2, 43)]
*** center 6: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.32545730241503135] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32545730241503135, 0.20722209766711006] ***
*** finished computation of 7 references, err: [Inf, 0.32545730241503135, 0.20722209766711006] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [147, 19, 0]]
** centroid: 3, normalized-entropy: 0.5132173985374446, [(1, 147), (2, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [57, 18, 0]]
** centroid: 5, normalized-entropy: 0.7950402793845225, [(1, 57), (2, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [21, 0, 0]]
*** center 7: selecting labels [1, 2, 3] (freq >= 2) [from [4, 190, 29]]
** centroid: 7, normalized-entropy: 0.4313145097363819, [(1, 4), (2, 190), (3, 29)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1947841753714021] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1947841753714021, 0.17092650793381092] ***
*** finished computation of 7 references, err: [Inf, 0.1947841753714021, 0.17092650793381092] ***
*** center 1: selecting labels [1] (freq >= 2) [from [139, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [37, 26, 0]]
** centroid: 2, normalized-entropy: 0.9778956822310348, [(1, 37), (2, 26)]
*** center 3: selecting labels [1] (freq >= 2) [from [156, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [1, 67, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 85, 0]]
** centroid: 5, normalized-entropy: 0.9208780154383215, [(1, 43), (2, 85)]
*** center 6: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 48, 29]]
** centroid: 7, normalized-entropy: 0.9556222693531471, [(2, 48), (3, 29)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29674253149402774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29674253149402774, 0.2067420623924544] ***
*** starting iteration: 2; err: [Inf, 0.29674253149402774, 0.2067420623924544] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29674253149402774, 0.2067420623924544, 0.20024237412100732] ***
*** starting iteration: 3; err: [Inf, 0.29674253149402774, 0.2067420623924544, 0.20024237412100732] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29674253149402774, 0.2067420623924544, 0.20024237412100732, 0.1966436191394858] ***
*** starting iteration: 4; err: [Inf, 0.29674253149402774, 0.2067420623924544, 0.20024237412100732, 0.1966436191394858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29674253149402774, 0.2067420623924544, 0.20024237412100732, 0.1966436191394858, 0.1944821707333799] ***
*** starting iteration: 5; err: [Inf, 0.29674253149402774, 0.2067420623924544, 0.20024237412100732, 0.1966436191394858, 0.1944821707333799] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29674253149402774, 0.2067420623924544, 0.20024237412100732, 0.1966436191394858, 0.1944821707333799, 0.1928200162611566] ***
*** starting iteration: 6; err: [Inf, 0.29674253149402774, 0.2067420623924544, 0.20024237412100732, 0.1966436191394858, 0.1944821707333799, 0.1928200162611566] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29674253149402774, 0.2067420623924544, 0.20024237412100732, 0.1966436191394858, 0.1944821707333799, 0.1928200162611566, 0.19134197612335016] ***
*** starting iteration: 7; err: [Inf, 0.29674253149402774, 0.2067420623924544, 0.20024237412100732, 0.1966436191394858, 0.1944821707333799, 0.1928200162611566, 0.19134197612335016] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29674253149402774, 0.2067420623924544, 0.20024237412100732, 0.1966436191394858, 0.1944821707333799, 0.1928200162611566, 0.19134197612335016, 0.18871292967402428] ***
*** starting iteration: 8; err: [Inf, 0.29674253149402774, 0.2067420623924544, 0.20024237412100732, 0.1966436191394858, 0.1944821707333799, 0.1928200162611566, 0.19134197612335016, 0.18871292967402428] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29674253149402774, 0.2067420623924544, 0.20024237412100732, 0.1966436191394858, 0.1944821707333799, 0.1928200162611566, 0.19134197612335016, 0.18871292967402428, 0.18720608283122359] ***
*** starting iteration: 9; err: [Inf, 0.29674253149402774, 0.2067420623924544, 0.20024237412100732, 0.1966436191394858, 0.1944821707333799, 0.1928200162611566, 0.19134197612335016, 0.18871292967402428, 0.18720608283122359] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29674253149402774, 0.2067420623924544, 0.20024237412100732, 0.1966436191394858, 0.1944821707333799, 0.1928200162611566, 0.19134197612335016, 0.18871292967402428, 0.18720608283122359, 0.18629825873161993] ***
*** finished computation of 7 references, err: [Inf, 0.29674253149402774, 0.2067420623924544, 0.20024237412100732, 0.1966436191394858, 0.1944821707333799, 0.1928200162611566, 0.19134197612335016, 0.18871292967402428, 0.18720608283122359, 0.18629825873161993] ***
*** center 1: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [88, 16, 0]]
** centroid: 3, normalized-entropy: 0.6193821946787638, [(1, 88), (2, 16)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 75, 15]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 75), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [65, 43, 0]]
** centroid: 5, normalized-entropy: 0.9698570179131006, [(1, 65), (2, 43)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 81, 7]]
** centroid: 6, normalized-entropy: 0.40057554263664, [(2, 81), (3, 7)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [77, 14, 0]]
** centroid: 7, normalized-entropy: 0.6193821946787638, [(1, 77), (2, 14)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29754856485745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29754856485745, 0.2144163113270329] ***
*** starting iteration: 2; err: [Inf, 0.29754856485745, 0.2144163113270329] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29754856485745, 0.2144163113270329, 0.1965019593121431] ***
*** starting iteration: 3; err: [Inf, 0.29754856485745, 0.2144163113270329, 0.1965019593121431] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29754856485745, 0.2144163113270329, 0.1965019593121431, 0.19169146526183212] ***
*** starting iteration: 4; err: [Inf, 0.29754856485745, 0.2144163113270329, 0.1965019593121431, 0.19169146526183212] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29754856485745, 0.2144163113270329, 0.1965019593121431, 0.19169146526183212, 0.1891207432980346] ***
*** starting iteration: 5; err: [Inf, 0.29754856485745, 0.2144163113270329, 0.1965019593121431, 0.19169146526183212, 0.1891207432980346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29754856485745, 0.2144163113270329, 0.1965019593121431, 0.19169146526183212, 0.1891207432980346, 0.18806904442664207] ***
*** starting iteration: 6; err: [Inf, 0.29754856485745, 0.2144163113270329, 0.1965019593121431, 0.19169146526183212, 0.1891207432980346, 0.18806904442664207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29754856485745, 0.2144163113270329, 0.1965019593121431, 0.19169146526183212, 0.1891207432980346, 0.18806904442664207, 0.187334094851416] ***
*** finished computation of 7 references, err: [Inf, 0.29754856485745, 0.2144163113270329, 0.1965019593121431, 0.19169146526183212, 0.1891207432980346, 0.18806904442664207, 0.187334094851416] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [95, 2, 0]]
** centroid: 1, normalized-entropy: 0.14489961753310668, [(1, 95), (2, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [9, 94, 0]]
** centroid: 3, normalized-entropy: 0.4276590022251725, [(1, 9), (2, 94)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [74, 20, 0]]
** centroid: 4, normalized-entropy: 0.7467366074830678, [(1, 74), (2, 20)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 89, 29]]
** centroid: 5, normalized-entropy: 0.804492844152443, [(2, 89), (3, 29)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [57, 22, 0]]
** centroid: 6, normalized-entropy: 0.8533728188427888, [(1, 57), (2, 22)]
*** center 7: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2577046335799092] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2577046335799092, 0.20790385343678955] ***
*** starting iteration: 2; err: [Inf, 0.2577046335799092, 0.20790385343678955] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2577046335799092, 0.20790385343678955, 0.2013077064580668] ***
*** starting iteration: 3; err: [Inf, 0.2577046335799092, 0.20790385343678955, 0.2013077064580668] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2577046335799092, 0.20790385343678955, 0.2013077064580668, 0.20086261643043746] ***
*** finished computation of 7 references, err: [Inf, 0.2577046335799092, 0.20790385343678955, 0.2013077064580668, 0.20086261643043746] ***
*** center 1: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 30, 0]]
** centroid: 2, normalized-entropy: 0.954434002924965, [(1, 50), (2, 30)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 83, 28]]
** centroid: 3, normalized-entropy: 0.8148283832923793, [(2, 83), (3, 28)]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [1, 96, 1]]
** centroid: 4, normalized-entropy: 0.10355723440144912, [(1, 1), (2, 96), (3, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [118, 17, 0]]
** centroid: 5, normalized-entropy: 0.5461582035252529, [(1, 118), (2, 17)]
*** center 6: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19481389433167898] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19481389433167898, 0.15674277909055306] ***
*** finished computation of 7 references, err: [Inf, 0.19481389433167898, 0.15674277909055306] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [53, 45, 0]]
** centroid: 1, normalized-entropy: 0.9951876662918929, [(1, 53), (2, 45)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [37, 70, 0]]
** centroid: 2, normalized-entropy: 0.9302559049579806, [(1, 37), (2, 70)]
*** center 3: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 99, 22]]
** centroid: 4, normalized-entropy: 0.6840384356390419, [(2, 99), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [104, 15, 0]]
** centroid: 5, normalized-entropy: 0.5465060858222177, [(1, 104), (2, 15)]
*** center 6: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.193924600148163] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.193924600148163, 0.17114193171208286] ***
*** finished computation of 7 references, err: [Inf, 0.193924600148163, 0.17114193171208286] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [44, 64, 0]]
** centroid: 1, normalized-entropy: 0.975119064940866, [(1, 44), (2, 64)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 64, 4]]
** centroid: 2, normalized-entropy: 0.32275695889739825, [(2, 64), (3, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [135, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 29, 25]]
** centroid: 4, normalized-entropy: 0.9960383613659186, [(2, 29), (3, 25)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [59, 48, 0]]
** centroid: 5, normalized-entropy: 0.9923628747472766, [(1, 59), (2, 48)]
*** center 6: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [60, 22, 0]]
** centroid: 7, normalized-entropy: 0.8390040613676978, [(1, 60), (2, 22)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2041920263957612] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2041920263957612, 0.17026055783502522] ***
*** finished computation of 7 references, err: [Inf, 0.2041920263957612, 0.17026055783502522] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [64, 58, 0]]
** centroid: 1, normalized-entropy: 0.9982545693874832, [(1, 64), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [56, 96, 0]]
** centroid: 2, normalized-entropy: 0.9494520153879484, [(1, 56), (2, 96)]
*** center 3: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 71, 29]]
** centroid: 4, normalized-entropy: 0.8687212463394044, [(2, 71), (3, 29)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [93, 1, 0]]
** centroid: 5, normalized-entropy: 0.0849955598367127, [(1, 93), (2, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [43, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2796673757672959] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2796673757672959, 0.19720005019086864] ***
*** starting iteration: 2; err: [Inf, 0.2796673757672959, 0.19720005019086864] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2796673757672959, 0.19720005019086864, 0.18633889961937392] ***
*** starting iteration: 3; err: [Inf, 0.2796673757672959, 0.19720005019086864, 0.18633889961937392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2796673757672959, 0.19720005019086864, 0.18633889961937392, 0.1851718443426284] ***
*** finished computation of 7 references, err: [Inf, 0.2796673757672959, 0.19720005019086864, 0.18633889961937392, 0.1851718443426284] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 81, 1]]
*** center 2: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [62, 45, 0]]
** centroid: 3, normalized-entropy: 0.9817140837953373, [(1, 62), (2, 45)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 66, 21]]
** centroid: 4, normalized-entropy: 0.7973265101474423, [(2, 66), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [87, 13, 0]]
** centroid: 5, normalized-entropy: 0.557438185027989, [(1, 87), (2, 13)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [72, 24, 0]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(1, 72), (2, 24)]
*** center 7: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26821805426719664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26821805426719664, 0.19182125490711727] ***
*** starting iteration: 2; err: [Inf, 0.26821805426719664, 0.19182125490711727] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26821805426719664, 0.19182125490711727, 0.18747392254413806] ***
*** starting iteration: 3; err: [Inf, 0.26821805426719664, 0.19182125490711727, 0.18747392254413806] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26821805426719664, 0.19182125490711727, 0.18747392254413806, 0.18597951536716104] ***
*** finished computation of 7 references, err: [Inf, 0.26821805426719664, 0.19182125490711727, 0.18747392254413806, 0.18597951536716104] ***
*** center 1: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [31, 52, 0]]
** centroid: 2, normalized-entropy: 0.9533171305598173, [(1, 31), (2, 52)]
*** center 3: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 22, 0]]
** centroid: 4, normalized-entropy: 0.8390040613676978, [(1, 60), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [90, 5, 0]]
** centroid: 5, normalized-entropy: 0.2974722489192896, [(1, 90), (2, 5)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 99, 29]]
** centroid: 6, normalized-entropy: 0.7719706699485864, [(2, 99), (3, 29)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [56, 49, 0]]
** centroid: 7, normalized-entropy: 0.9967916319816367, [(1, 56), (2, 49)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27134794313837585] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27134794313837585, 0.21306112612356087] ***
*** starting iteration: 2; err: [Inf, 0.27134794313837585, 0.21306112612356087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27134794313837585, 0.21306112612356087, 0.20476217794049156] ***
*** starting iteration: 3; err: [Inf, 0.27134794313837585, 0.21306112612356087, 0.20476217794049156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27134794313837585, 0.21306112612356087, 0.20476217794049156, 0.1992409200291673] ***
*** finished computation of 7 references, err: [Inf, 0.27134794313837585, 0.21306112612356087, 0.20476217794049156, 0.1992409200291673] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 73, 29]]
** centroid: 1, normalized-entropy: 0.8612621884720756, [(2, 73), (3, 29)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [110, 27, 0]]
** centroid: 2, normalized-entropy: 0.7160501045216493, [(1, 110), (2, 27)]
*** center 3: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [77, 21, 0]]
** centroid: 4, normalized-entropy: 0.7495952572594798, [(1, 77), (2, 21)]
*** center 5: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 105, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3578881554378269] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3578881554378269, 0.23883712140692248] ***
*** starting iteration: 2; err: [Inf, 0.3578881554378269, 0.23883712140692248] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3578881554378269, 0.23883712140692248, 0.23744440781562268] ***
*** starting iteration: 3; err: [Inf, 0.3578881554378269, 0.23883712140692248, 0.23744440781562268] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3578881554378269, 0.23883712140692248, 0.23744440781562268, 0.23690447054227237] ***
*** finished computation of 3 references, err: [Inf, 0.3578881554378269, 0.23883712140692248, 0.23744440781562268, 0.23690447054227237] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [99, 129, 18]]
** centroid: 1, normalized-entropy: 0.8157082960537844, [(1, 99), (2, 129), (3, 18)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [98, 100, 4]]
** centroid: 2, normalized-entropy: 0.7069272283033184, [(1, 98), (2, 100), (3, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [218, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3186746164625776] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3186746164625776, 0.24149975596998316] ***
*** starting iteration: 2; err: [Inf, 0.3186746164625776, 0.24149975596998316] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3186746164625776, 0.24149975596998316, 0.23735913853935975] ***
*** starting iteration: 3; err: [Inf, 0.3186746164625776, 0.24149975596998316, 0.23735913853935975] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3186746164625776, 0.24149975596998316, 0.23735913853935975, 0.23606122679578356] ***
*** finished computation of 3 references, err: [Inf, 0.3186746164625776, 0.24149975596998316, 0.23735913853935975, 0.23606122679578356] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [81, 146, 29]]
** centroid: 1, normalized-entropy: 0.8475070268684883, [(1, 81), (2, 146), (3, 29)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [121, 81, 0]]
** centroid: 2, normalized-entropy: 0.9715268196632771, [(1, 121), (2, 81)]
*** center 3: selecting labels [1] (freq >= 2) [from [209, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31210595758902704] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31210595758902704, 0.24551781428896863] ***
*** starting iteration: 2; err: [Inf, 0.31210595758902704, 0.24551781428896863] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31210595758902704, 0.24551781428896863, 0.23648008858195801] ***
*** starting iteration: 3; err: [Inf, 0.31210595758902704, 0.24551781428896863, 0.23648008858195801] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31210595758902704, 0.24551781428896863, 0.23648008858195801, 0.23488989914732536] ***
*** finished computation of 3 references, err: [Inf, 0.31210595758902704, 0.24551781428896863, 0.23648008858195801, 0.23488989914732536] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [74, 161, 29]]
** centroid: 1, normalized-entropy: 0.8198775185218364, [(1, 74), (2, 161), (3, 29)]
*** center 2: selecting labels [1] (freq >= 2) [from [217, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [121, 65, 0]]
** centroid: 3, normalized-entropy: 0.9335869855323569, [(1, 121), (2, 65)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 11)
[0.9410008811206415, 0.9370118621615627, 0.9350008691326058, 0.9310238382094669, 0.9149928371485258, 0.9100447753142364, 0.9020457583331835, 0.8980237722752693, 0.8849957742173311, 0.7959636282989576, 0.7280633927340513]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9410008811206415
finished with 12
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.3928299317746102] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3928299317746102, 0.30535530904762437] ***
*** finished computation of 3 references, err: [Inf, 0.3928299317746102, 0.30535530904762437] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [169, 3, 0]]
** centroid: 1, normalized-entropy: 0.1268257300866759, [(1, 169), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [236, 12, 0]]
** centroid: 2, normalized-entropy: 0.2795055456366802, [(1, 236), (2, 12)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [10, 214, 22]]
** centroid: 3, normalized-entropy: 0.42538478306242977, [(1, 10), (2, 214), (3, 22)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.40410874650507855] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40410874650507855, 0.31028633354360174] ***
*** finished computation of 3 references, err: [Inf, 0.40410874650507855, 0.31028633354360174] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [174, 47, 0]]
** centroid: 1, normalized-entropy: 0.7465548475971887, [(1, 174), (2, 47)]
*** center 2: selecting labels [1] (freq >= 2) [from [233, 1, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [4, 179, 29]]
** centroid: 3, normalized-entropy: 0.4459205058575195, [(1, 4), (2, 179), (3, 29)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33439097165463794] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33439097165463794, 0.30478339030154644] ***
*** finished computation of 3 references, err: [Inf, 0.33439097165463794, 0.30478339030154644] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [176, 60, 0]]
** centroid: 1, normalized-entropy: 0.8179252501386403, [(1, 176), (2, 60)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [236, 28, 0]]
** centroid: 2, normalized-entropy: 0.48791799258948565, [(1, 236), (2, 28)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 138, 29]]
** centroid: 3, normalized-entropy: 0.6659927721501786, [(2, 138), (3, 29)]
finished with 5 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 12)
[0.9410008811206415, 0.9370118621615627, 0.9350008691326058, 0.9310238382094669, 0.9230128331924737, 0.9149928371485258, 0.9100447753142364, 0.9020457583331835, 0.8980237722752693, 0.8849957742173311, 0.7959636282989576, 0.7280633927340513]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9410008811206415
finished with 13
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.23053300720373834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23053300720373834, 0.16872901900030962] ***
*** starting iteration: 2; err: [Inf, 0.23053300720373834, 0.16872901900030962] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23053300720373834, 0.16872901900030962, 0.16126436215207293] ***
*** starting iteration: 3; err: [Inf, 0.23053300720373834, 0.16872901900030962, 0.16126436215207293] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23053300720373834, 0.16872901900030962, 0.16126436215207293, 0.1583340265228785] ***
*** finished computation of 7 references, err: [Inf, 0.23053300720373834, 0.16872901900030962, 0.16126436215207293, 0.1583340265228785] ***
*** center 1: selecting labels [1] (freq >= 2) [from [137, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 106, 22]]
** centroid: 2, normalized-entropy: 0.6619760641115651, [(2, 106), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [111, 26, 0]]
** centroid: 3, normalized-entropy: 0.701013149847168, [(1, 111), (2, 26)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [5, 79, 0]]
** centroid: 4, normalized-entropy: 0.3255517134879513, [(1, 5), (2, 79)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [27, 14, 0]]
** centroid: 5, normalized-entropy: 0.9262122127346664, [(1, 27), (2, 14)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [52, 4, 0]]
** centroid: 6, normalized-entropy: 0.3712323266408756, [(1, 52), (2, 4)]
*** center 7: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1992967096855515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1992967096855515, 0.15431499902809645] ***
*** starting iteration: 2; err: [Inf, 0.1992967096855515, 0.15431499902809645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1992967096855515, 0.15431499902809645, 0.14654487421501544] ***
*** starting iteration: 3; err: [Inf, 0.1992967096855515, 0.15431499902809645, 0.14654487421501544] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1992967096855515, 0.15431499902809645, 0.14654487421501544, 0.14539021750872974] ***
*** finished computation of 7 references, err: [Inf, 0.1992967096855515, 0.15431499902809645, 0.14654487421501544, 0.14539021750872974] ***
*** center 1: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [96, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 95, 29]]
** centroid: 4, normalized-entropy: 0.7846984744986523, [(2, 95), (3, 29)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [61, 21, 0]]
** centroid: 5, normalized-entropy: 0.8208002549877175, [(1, 61), (2, 21)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [24, 64, 0]]
** centroid: 6, normalized-entropy: 0.8453509366224364, [(1, 24), (2, 64)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [50, 46, 0]]
** centroid: 7, normalized-entropy: 0.9987472979361685, [(1, 50), (2, 46)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.245672804839641] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.245672804839641, 0.16760353410178083] ***
*** starting iteration: 2; err: [Inf, 0.245672804839641, 0.16760353410178083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.245672804839641, 0.16760353410178083, 0.15692745537093578] ***
*** starting iteration: 3; err: [Inf, 0.245672804839641, 0.16760353410178083, 0.15692745537093578] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.245672804839641, 0.16760353410178083, 0.15692745537093578, 0.15419387568075998] ***
*** finished computation of 7 references, err: [Inf, 0.245672804839641, 0.16760353410178083, 0.15692745537093578, 0.15419387568075998] ***
*** center 1: selecting labels [1] (freq >= 2) [from [131, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [4, 94, 0]]
** centroid: 3, normalized-entropy: 0.2460225782203316, [(1, 4), (2, 94)]
*** center 4: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [37, 64, 0]]
** centroid: 6, normalized-entropy: 0.9478176755411893, [(1, 37), (2, 64)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 68, 29]]
** centroid: 7, normalized-entropy: 0.8800270477157599, [(2, 68), (3, 29)]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9490118861376348, 0.9410008811206415, 0.9370118621615627, 0.9350008691326058, 0.9310238382094669, 0.9230128331924737, 0.9149928371485258, 0.9100447753142364, 0.9020457583331835, 0.8980237722752693, 0.8849957742173311, 0.7959636282989576, 0.7280633927340513]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9490118861376348
finished with 15
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.29151509451405805] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29151509451405805, 0.19755011870296443] ***
*** starting iteration: 2; err: [Inf, 0.29151509451405805, 0.19755011870296443] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29151509451405805, 0.19755011870296443, 0.17793313902802765] ***
*** starting iteration: 3; err: [Inf, 0.29151509451405805, 0.19755011870296443, 0.17793313902802765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29151509451405805, 0.19755011870296443, 0.17793313902802765, 0.16826430927016758] ***
*** finished computation of 7 references, err: [Inf, 0.29151509451405805, 0.19755011870296443, 0.17793313902802765, 0.16826430927016758] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [41, 98, 1]]
** centroid: 1, normalized-entropy: 0.5867575749332661, [(1, 41), (2, 98), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [160, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 34, 0]]
** centroid: 3, normalized-entropy: 0.9788698505067782, [(1, 48), (2, 34)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 65, 21]]
** centroid: 4, normalized-entropy: 0.8019325020834525, [(2, 65), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [16, 32, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 16), (2, 32)]
*** center 6: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.25670867517026424] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25670867517026424, 0.20526939764970736] ***
*** starting iteration: 2; err: [Inf, 0.25670867517026424, 0.20526939764970736] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25670867517026424, 0.20526939764970736, 0.162848058903682] ***
*** starting iteration: 3; err: [Inf, 0.25670867517026424, 0.20526939764970736, 0.162848058903682] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25670867517026424, 0.20526939764970736, 0.162848058903682, 0.14975391516309774] ***
*** finished computation of 7 references, err: [Inf, 0.25670867517026424, 0.20526939764970736, 0.162848058903682, 0.14975391516309774] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 77, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 92, 29]]
** centroid: 3, normalized-entropy: 0.7944901065643072, [(2, 92), (3, 29)]
*** center 4: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [97, 7, 0]]
** centroid: 5, normalized-entropy: 0.3557951975011439, [(1, 97), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [53, 41, 0]]
** centroid: 6, normalized-entropy: 0.988212082728797, [(1, 53), (2, 41)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [88, 10, 0]]
** centroid: 7, normalized-entropy: 0.47543164626872053, [(1, 88), (2, 10)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19734470217071218] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19734470217071218, 0.15548171685670673] ***
*** starting iteration: 2; err: [Inf, 0.19734470217071218, 0.15548171685670673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19734470217071218, 0.15548171685670673, 0.15058533259565526] ***
*** starting iteration: 3; err: [Inf, 0.19734470217071218, 0.15548171685670673, 0.15058533259565526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19734470217071218, 0.15548171685670673, 0.15058533259565526, 0.14909974648303043] ***
*** finished computation of 7 references, err: [Inf, 0.19734470217071218, 0.15548171685670673, 0.15058533259565526, 0.14909974648303043] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [74, 31, 0]]
** centroid: 1, normalized-entropy: 0.8753918540610236, [(1, 74), (2, 31)]
*** center 2: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [58, 34, 0]]
** centroid: 3, normalized-entropy: 0.9503376699710269, [(1, 58), (2, 34)]
*** center 4: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [78, 12, 0]]
** centroid: 5, normalized-entropy: 0.5665095065529052, [(1, 78), (2, 12)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 76, 28]]
** centroid: 6, normalized-entropy: 0.8403586716091169, [(2, 76), (3, 28)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 73, 1]]
** centroid: 7, normalized-entropy: 0.10327508457163559, [(2, 73), (3, 1)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27842384146095756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27842384146095756, 0.21517236967495568] ***
*** starting iteration: 2; err: [Inf, 0.27842384146095756, 0.21517236967495568] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27842384146095756, 0.21517236967495568, 0.20245253633184768] ***
*** starting iteration: 3; err: [Inf, 0.27842384146095756, 0.21517236967495568, 0.20245253633184768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27842384146095756, 0.21517236967495568, 0.20245253633184768, 0.19535738056631866] ***
*** finished computation of 7 references, err: [Inf, 0.27842384146095756, 0.21517236967495568, 0.20245253633184768, 0.19535738056631866] ***
*** center 1: selecting labels [1] (freq >= 1) [from [136, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 58, 22]]
** centroid: 2, normalized-entropy: 0.8485481782946159, [(2, 58), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [8, 68, 0]]
** centroid: 3, normalized-entropy: 0.48546076074591343, [(1, 8), (2, 68)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [125, 6, 0]]
** centroid: 4, normalized-entropy: 0.2682870428573907, [(1, 125), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [50, 3, 0]]
** centroid: 5, normalized-entropy: 0.3138129641688652, [(1, 50), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [14, 94, 0]]
** centroid: 6, normalized-entropy: 0.5564215672884282, [(1, 14), (2, 94)]
*** center 7: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3420319994967403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3420319994967403, 0.2728873157965905] ***
*** starting iteration: 2; err: [Inf, 0.3420319994967403, 0.2728873157965905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3420319994967403, 0.2728873157965905, 0.23180978094832203] ***
*** starting iteration: 3; err: [Inf, 0.3420319994967403, 0.2728873157965905, 0.23180978094832203] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3420319994967403, 0.2728873157965905, 0.23180978094832203, 0.20611818382346156] ***
*** finished computation of 7 references, err: [Inf, 0.3420319994967403, 0.2728873157965905, 0.23180978094832203, 0.20611818382346156] ***
*** center 1: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [86, 2, 0]]
** centroid: 3, normalized-entropy: 0.1564910629057016, [(1, 86), (2, 2)]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [12, 127, 29]]
** centroid: 4, normalized-entropy: 0.6401134353932091, [(1, 12), (2, 127), (3, 29)]
*** center 5: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [25, 98, 0]]
** centroid: 7, normalized-entropy: 0.7283846722688453, [(1, 25), (2, 98)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28897768679330466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28897768679330466, 0.23195668195850444] ***
*** starting iteration: 2; err: [Inf, 0.28897768679330466, 0.23195668195850444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28897768679330466, 0.23195668195850444, 0.20025056818670509] ***
*** starting iteration: 3; err: [Inf, 0.28897768679330466, 0.23195668195850444, 0.20025056818670509] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28897768679330466, 0.23195668195850444, 0.20025056818670509, 0.1981534579534201] ***
*** finished computation of 7 references, err: [Inf, 0.28897768679330466, 0.23195668195850444, 0.20025056818670509, 0.1981534579534201] ***
*** center 1: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [98, 7, 0]]
** centroid: 2, normalized-entropy: 0.3533593350214213, [(1, 98), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [94, 4, 0]]
** centroid: 3, normalized-entropy: 0.2460225782203316, [(1, 94), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [4, 99, 0]]
** centroid: 4, normalized-entropy: 0.23692474671835093, [(1, 4), (2, 99)]
*** center 5: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [47, 39, 0]]
** centroid: 6, normalized-entropy: 0.9937489109291138, [(1, 47), (2, 39)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 77, 29]]
** centroid: 7, normalized-entropy: 0.8465618461461522, [(2, 77), (3, 29)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9490118861376348, 0.9410008811206415, 0.9370118621615627, 0.9350008691326058, 0.9310238382094669, 0.9230188272104439, 0.9230128331924737, 0.9149928371485258, 0.9110188032343721, 0.9100447753142364, 0.9020457583331835, 0.8980237722752693, 0.8849957742173311, 0.7959636282989576, 0.7280633927340513]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9490118861376348
finished with 16
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.2732253552627031] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2732253552627031, 0.21703499822259262] ***
*** finished computation of 7 references, err: [Inf, 0.2732253552627031, 0.21703499822259262] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 96, 21]]
** centroid: 1, normalized-entropy: 0.6789538995185759, [(2, 96), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [128, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [173, 18, 0]]
** centroid: 3, normalized-entropy: 0.4504689672655132, [(1, 173), (2, 18)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 51, 1]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 3, 0]]
** centroid: 5, normalized-entropy: 0.3591016256485496, [(1, 41), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [19, 61, 0]]
** centroid: 6, normalized-entropy: 0.79085809055281, [(1, 19), (2, 61)]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28134485061533154] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28134485061533154, 0.20154275612506284] ***
*** finished computation of 7 references, err: [Inf, 0.28134485061533154, 0.20154275612506284] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 67, 29]]
** centroid: 1, normalized-entropy: 0.8838226609360483, [(2, 67), (3, 29)]
*** center 2: selecting labels [1] (freq >= 2) [from [136, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 46, 0]]
** centroid: 3, normalized-entropy: 0.990374836448575, [(1, 58), (2, 46)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [36, 56, 0]]
** centroid: 4, normalized-entropy: 0.9656361333706099, [(1, 36), (2, 56)]
*** center 5: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 58, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3255816028457599] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3255816028457599, 0.2147264893381749] ***
*** finished computation of 7 references, err: [Inf, 0.3255816028457599, 0.2147264893381749] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [9, 26, 0]]
** centroid: 2, normalized-entropy: 0.8224042259549892, [(1, 9), (2, 26)]
*** center 3: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 2, 0]]
** centroid: 4, normalized-entropy: 0.1792560669283214, [(1, 72), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [134, 22, 0]]
** centroid: 5, normalized-entropy: 0.5869185834047994, [(1, 134), (2, 22)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 47, 22]]
** centroid: 6, normalized-entropy: 0.903116172156872, [(2, 47), (3, 22)]
*** center 7: selecting labels [1, 2, 3] (freq >= 2) [from [2, 129, 7]]
** centroid: 7, normalized-entropy: 0.2508932152827898, [(1, 2), (2, 129), (3, 7)]
finished with 8 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9490118861376348, 0.9410008811206415, 0.9370118621615627, 0.9350008691326058, 0.9310238382094669, 0.9230188272104439, 0.9230128331924737, 0.918031804259349, 0.9149928371485258, 0.9110188032343721, 0.9100447753142364, 0.9020457583331835, 0.8980237722752693, 0.8849957742173311, 0.7959636282989576, 0.7280633927340513]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9490118861376348
finished with 18
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.191456888390526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.191456888390526, 0.15829075374794346] ***
*** starting iteration: 2; err: [Inf, 0.191456888390526, 0.15829075374794346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.191456888390526, 0.15829075374794346, 0.15304356117595783] ***
*** starting iteration: 3; err: [Inf, 0.191456888390526, 0.15829075374794346, 0.15304356117595783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.191456888390526, 0.15829075374794346, 0.15304356117595783, 0.15060009615070694] ***
*** starting iteration: 4; err: [Inf, 0.191456888390526, 0.15829075374794346, 0.15304356117595783, 0.15060009615070694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.191456888390526, 0.15829075374794346, 0.15304356117595783, 0.15060009615070694, 0.14937185389779833] ***
*** starting iteration: 5; err: [Inf, 0.191456888390526, 0.15829075374794346, 0.15304356117595783, 0.15060009615070694, 0.14937185389779833] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.191456888390526, 0.15829075374794346, 0.15304356117595783, 0.15060009615070694, 0.14937185389779833, 0.14852258313430455] ***
*** finished computation of 7 references, err: [Inf, 0.191456888390526, 0.15829075374794346, 0.15304356117595783, 0.15060009615070694, 0.14937185389779833, 0.14852258313430455] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [83, 31, 0]]
** centroid: 1, normalized-entropy: 0.8442202034297602, [(1, 83), (2, 31)]
*** center 2: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 107, 22]]
** centroid: 4, normalized-entropy: 0.6589445953074149, [(2, 107), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 47, 0]]
** centroid: 5, normalized-entropy: 0.9996590716691399, [(1, 45), (2, 47)]
*** center 6: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [42, 44, 0]]
** centroid: 7, normalized-entropy: 0.9996098363678071, [(1, 42), (2, 44)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20853390036404937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20853390036404937, 0.17749253933414302] ***
*** starting iteration: 2; err: [Inf, 0.20853390036404937, 0.17749253933414302] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20853390036404937, 0.17749253933414302, 0.16535253400008182] ***
*** starting iteration: 3; err: [Inf, 0.20853390036404937, 0.17749253933414302, 0.16535253400008182] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20853390036404937, 0.17749253933414302, 0.16535253400008182, 0.16121845488712985] ***
*** starting iteration: 4; err: [Inf, 0.20853390036404937, 0.17749253933414302, 0.16535253400008182, 0.16121845488712985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20853390036404937, 0.17749253933414302, 0.16535253400008182, 0.16121845488712985, 0.1593540225162644] ***
*** starting iteration: 5; err: [Inf, 0.20853390036404937, 0.17749253933414302, 0.16535253400008182, 0.16121845488712985, 0.1593540225162644] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20853390036404937, 0.17749253933414302, 0.16535253400008182, 0.16121845488712985, 0.1593540225162644, 0.1585369205382978] ***
*** finished computation of 7 references, err: [Inf, 0.20853390036404937, 0.17749253933414302, 0.16535253400008182, 0.16121845488712985, 0.1593540225162644, 0.1585369205382978] ***
*** center 1: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 65, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [88, 46, 0]]
** centroid: 3, normalized-entropy: 0.9279262619599757, [(1, 88), (2, 46)]
*** center 4: selecting labels [1] (freq >= 2) [from [139, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 48, 0]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(1, 6), (2, 48)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [65, 25, 0]]
** centroid: 6, normalized-entropy: 0.8524051786494784, [(1, 65), (2, 25)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 43, 29]]
** centroid: 7, normalized-entropy: 0.9725523165688429, [(2, 43), (3, 29)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19231587472669165] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19231587472669165, 0.16298849038316168] ***
*** starting iteration: 2; err: [Inf, 0.19231587472669165, 0.16298849038316168] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19231587472669165, 0.16298849038316168, 0.15454091761202582] ***
*** starting iteration: 3; err: [Inf, 0.19231587472669165, 0.16298849038316168, 0.15454091761202582] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19231587472669165, 0.16298849038316168, 0.15454091761202582, 0.15115598072067485] ***
*** starting iteration: 4; err: [Inf, 0.19231587472669165, 0.16298849038316168, 0.15454091761202582, 0.15115598072067485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19231587472669165, 0.16298849038316168, 0.15454091761202582, 0.15115598072067485, 0.14886526237039463] ***
*** starting iteration: 5; err: [Inf, 0.19231587472669165, 0.16298849038316168, 0.15454091761202582, 0.15115598072067485, 0.14886526237039463] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19231587472669165, 0.16298849038316168, 0.15454091761202582, 0.15115598072067485, 0.14886526237039463, 0.14797399948159795] ***
*** finished computation of 7 references, err: [Inf, 0.19231587472669165, 0.16298849038316168, 0.15454091761202582, 0.15115598072067485, 0.14886526237039463, 0.14797399948159795] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 79, 29]]
** centroid: 1, normalized-entropy: 0.8393307617496655, [(2, 79), (3, 29)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 13, 0]]
** centroid: 2, normalized-entropy: 0.6705250693158382, [(1, 61), (2, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [77, 40, 0]]
** centroid: 5, normalized-entropy: 0.9266067073697131, [(1, 77), (2, 40)]
*** center 6: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 94, 0]]
** centroid: 7, normalized-entropy: 0.2885385136944103, [(1, 5), (2, 94)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24194292702317774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24194292702317774, 0.2030246398158584] ***
*** starting iteration: 2; err: [Inf, 0.24194292702317774, 0.2030246398158584] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24194292702317774, 0.2030246398158584, 0.19850444679033827] ***
*** starting iteration: 3; err: [Inf, 0.24194292702317774, 0.2030246398158584, 0.19850444679033827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24194292702317774, 0.2030246398158584, 0.19850444679033827, 0.1976188006795112] ***
*** finished computation of 7 references, err: [Inf, 0.24194292702317774, 0.2030246398158584, 0.19850444679033827, 0.1976188006795112] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [67, 21, 0]]
** centroid: 1, normalized-entropy: 0.7927652363756529, [(1, 67), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [19, 64, 0]]
** centroid: 2, normalized-entropy: 0.776116265618875, [(1, 19), (2, 64)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 49, 22]]
** centroid: 3, normalized-entropy: 0.893010810044601, [(2, 49), (3, 22)]
*** center 4: selecting labels [2] (freq >= 2) [from [1, 94, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [162, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [100, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2349230646881145] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2349230646881145, 0.20324362209974334] ***
*** starting iteration: 2; err: [Inf, 0.2349230646881145, 0.20324362209974334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2349230646881145, 0.20324362209974334, 0.19706209501701183] ***
*** starting iteration: 3; err: [Inf, 0.2349230646881145, 0.20324362209974334, 0.19706209501701183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2349230646881145, 0.20324362209974334, 0.19706209501701183, 0.19517346657812595] ***
*** starting iteration: 4; err: [Inf, 0.2349230646881145, 0.20324362209974334, 0.19706209501701183, 0.19517346657812595] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2349230646881145, 0.20324362209974334, 0.19706209501701183, 0.19517346657812595, 0.19332160477664717] ***
*** starting iteration: 5; err: [Inf, 0.2349230646881145, 0.20324362209974334, 0.19706209501701183, 0.19517346657812595, 0.19332160477664717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2349230646881145, 0.20324362209974334, 0.19706209501701183, 0.19517346657812595, 0.19332160477664717, 0.19257599815190107] ***
*** finished computation of 7 references, err: [Inf, 0.2349230646881145, 0.20324362209974334, 0.19706209501701183, 0.19517346657812595, 0.19332160477664717, 0.19257599815190107] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 42, 0]]
** centroid: 1, normalized-entropy: 0.9709505944546688, [(1, 63), (2, 42)]
*** center 2: selecting labels [2] (freq >= 2) [from [1, 77, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 18, 0]]
** centroid: 3, normalized-entropy: 0.7845191388986644, [(1, 59), (2, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [95, 22, 0]]
** centroid: 5, normalized-entropy: 0.6973409725623739, [(1, 95), (2, 22)]
*** center 6: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 68, 29]]
** centroid: 7, normalized-entropy: 0.8800270477157599, [(2, 68), (3, 29)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23427800921935482] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23427800921935482, 0.19969111694039768] ***
*** starting iteration: 2; err: [Inf, 0.23427800921935482, 0.19969111694039768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23427800921935482, 0.19969111694039768, 0.19626179378831582] ***
*** starting iteration: 3; err: [Inf, 0.23427800921935482, 0.19969111694039768, 0.19626179378831582] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23427800921935482, 0.19969111694039768, 0.19626179378831582, 0.19559457878731581] ***
*** finished computation of 7 references, err: [Inf, 0.23427800921935482, 0.19969111694039768, 0.19626179378831582, 0.19559457878731581] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [71, 26, 0]]
** centroid: 1, normalized-entropy: 0.8386398715015523, [(1, 71), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [40, 34, 0]]
** centroid: 2, normalized-entropy: 0.9952525494396791, [(1, 40), (2, 34)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 72, 28]]
** centroid: 3, normalized-entropy: 0.8554508105601307, [(2, 72), (3, 28)]
*** center 4: selecting labels [1] (freq >= 2) [from [137, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 84, 1]]
** centroid: 5, normalized-entropy: 0.3120895659343452, [(1, 5), (2, 84)]
*** center 6: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [65, 10, 0]]
** centroid: 7, normalized-entropy: 0.5665095065529052, [(1, 65), (2, 10)]
finished with 12 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 18)
[0.9490118861376348, 0.9410008811206415, 0.9379739020457584, 0.9370118621615627, 0.9350008691326058, 0.9310238382094669, 0.9280088471705238, 0.9230188272104439, 0.9230128331924737, 0.918031804259349, 0.9149928371485258, 0.9110188032343721, 0.9100447753142364, 0.9020457583331835, 0.8980237722752693, 0.8849957742173311, 0.7959636282989576, 0.7280633927340513]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9490118861376348
finished with 19
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.22116454279850106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22116454279850106, 0.19953642322544804] ***
*** starting iteration: 2; err: [Inf, 0.22116454279850106, 0.19953642322544804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22116454279850106, 0.19953642322544804, 0.19357166913695992] ***
*** starting iteration: 3; err: [Inf, 0.22116454279850106, 0.19953642322544804, 0.19357166913695992] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22116454279850106, 0.19953642322544804, 0.19357166913695992, 0.18884358193736533] ***
*** starting iteration: 4; err: [Inf, 0.22116454279850106, 0.19953642322544804, 0.19357166913695992, 0.18884358193736533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22116454279850106, 0.19953642322544804, 0.19357166913695992, 0.18884358193736533, 0.18716696313269124] ***
*** starting iteration: 5; err: [Inf, 0.22116454279850106, 0.19953642322544804, 0.19357166913695992, 0.18884358193736533, 0.18716696313269124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22116454279850106, 0.19953642322544804, 0.19357166913695992, 0.18884358193736533, 0.18716696313269124, 0.18659351710453853] ***
*** finished computation of 7 references, err: [Inf, 0.22116454279850106, 0.19953642322544804, 0.19357166913695992, 0.18884358193736533, 0.18716696313269124, 0.18659351710453853] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [70, 18, 0]]
** centroid: 1, normalized-entropy: 0.7309263775906009, [(1, 70), (2, 18)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 107, 1]]
** centroid: 2, normalized-entropy: 0.07584150637714687, [(2, 107), (3, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [102, 3, 0]]
** centroid: 3, normalized-entropy: 0.18717625687320805, [(1, 102), (2, 3)]
*** center 4: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 65, 21]]
** centroid: 5, normalized-entropy: 0.8019325020834525, [(2, 65), (3, 21)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [94, 1, 0]]
** centroid: 6, normalized-entropy: 0.08426242877623306, [(1, 94), (2, 1)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [63, 35, 0]]
** centroid: 7, normalized-entropy: 0.940285958670631, [(1, 63), (2, 35)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2567845233981365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2567845233981365, 0.19938480512502937] ***
*** starting iteration: 2; err: [Inf, 0.2567845233981365, 0.19938480512502937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2567845233981365, 0.19938480512502937, 0.18833141222790253] ***
*** starting iteration: 3; err: [Inf, 0.2567845233981365, 0.19938480512502937, 0.18833141222790253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2567845233981365, 0.19938480512502937, 0.18833141222790253, 0.1857005275864115] ***
*** starting iteration: 4; err: [Inf, 0.2567845233981365, 0.19938480512502937, 0.18833141222790253, 0.1857005275864115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2567845233981365, 0.19938480512502937, 0.18833141222790253, 0.1857005275864115, 0.18409024259687096] ***
*** starting iteration: 5; err: [Inf, 0.2567845233981365, 0.19938480512502937, 0.18833141222790253, 0.1857005275864115, 0.18409024259687096] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2567845233981365, 0.19938480512502937, 0.18833141222790253, 0.1857005275864115, 0.18409024259687096, 0.18313601225575452] ***
*** finished computation of 7 references, err: [Inf, 0.2567845233981365, 0.19938480512502937, 0.18833141222790253, 0.1857005275864115, 0.18409024259687096, 0.18313601225575452] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [73, 5, 0]]
** centroid: 1, normalized-entropy: 0.34351974100740135, [(1, 73), (2, 5)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 84, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 14, 0]]
** centroid: 4, normalized-entropy: 0.6690158350565576, [(1, 66), (2, 14)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 99, 29]]
** centroid: 5, normalized-entropy: 0.7719706699485864, [(2, 99), (3, 29)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [81, 21, 0]]
** centroid: 6, normalized-entropy: 0.7335379291086666, [(1, 81), (2, 21)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [97, 4, 0]]
** centroid: 7, normalized-entropy: 0.24047340659188013, [(1, 97), (2, 4)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20427869407717447] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20427869407717447, 0.1907783231210673] ***
*** starting iteration: 2; err: [Inf, 0.20427869407717447, 0.1907783231210673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20427869407717447, 0.1907783231210673, 0.1898181127311698] ***
*** finished computation of 7 references, err: [Inf, 0.20427869407717447, 0.1907783231210673, 0.1898181127311698] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 26, 29]]
** centroid: 1, normalized-entropy: 0.9978527766088781, [(2, 26), (3, 29)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 85, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [107, 16, 0]]
** centroid: 3, normalized-entropy: 0.5576611106650714, [(1, 107), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [8, 92, 0]]
** centroid: 4, normalized-entropy: 0.4021791902022729, [(1, 8), (2, 92)]
*** center 5: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [74, 7, 0]]
** centroid: 6, normalized-entropy: 0.42440514472480345, [(1, 74), (2, 7)]
*** center 7: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
finished with 8 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 19)
[0.9490118861376348, 0.9450048851246455, 0.9410008811206415, 0.9379739020457584, 0.9370118621615627, 0.9350008691326058, 0.9310238382094669, 0.9280088471705238, 0.9230188272104439, 0.9230128331924737, 0.918031804259349, 0.9149928371485258, 0.9110188032343721, 0.9100447753142364, 0.9020457583331835, 0.8980237722752693, 0.8849957742173311, 0.7959636282989576, 0.7280633927340513]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9490118861376348
finished with 21
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.3259632352308871] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3259632352308871, 0.25171213724416913] ***
*** finished computation of 3 references, err: [Inf, 0.3259632352308871, 0.25171213724416913] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [25, 128, 22]]
** centroid: 1, normalized-entropy: 0.6985583719420461, [(1, 25), (2, 128), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [118, 100, 0]]
** centroid: 2, normalized-entropy: 0.995076532106423, [(1, 118), (2, 100)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [272, 1, 0]]
** centroid: 3, normalized-entropy: 0.034918705681419034, [(1, 272), (2, 1)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.27818963194693225] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27818963194693225, 0.24059760982151154] ***
*** finished computation of 3 references, err: [Inf, 0.27818963194693225, 0.24059760982151154] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [115, 97, 4]]
** centroid: 1, normalized-entropy: 0.6999604757780576, [(1, 115), (2, 97), (3, 4)]
*** center 2: selecting labels [1] (freq >= 1) [from [216, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [80, 130, 25]]
** centroid: 3, normalized-entropy: 0.8489979087560467, [(1, 80), (2, 130), (3, 25)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2862101616030713] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2862101616030713, 0.2561017520854185] ***
*** finished computation of 3 references, err: [Inf, 0.2862101616030713, 0.2561017520854185] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [173, 48, 0]]
** centroid: 1, normalized-entropy: 0.7550116842069572, [(1, 173), (2, 48)]
*** center 2: selecting labels [1] (freq >= 1) [from [157, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [82, 178, 29]]
** centroid: 3, normalized-entropy: 0.8070492277757533, [(1, 82), (2, 178), (3, 29)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3769539574933079] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3769539574933079, 0.32203560240717755] ***
*** finished computation of 3 references, err: [Inf, 0.3769539574933079, 0.32203560240717755] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [201, 25, 0]]
** centroid: 1, normalized-entropy: 0.5017816408606179, [(1, 201), (2, 25)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [40, 182, 22]]
** centroid: 2, normalized-entropy: 0.6663462879323301, [(1, 40), (2, 182), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [174, 22, 0]]
** centroid: 3, normalized-entropy: 0.5066503344840895, [(1, 174), (2, 22)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4009112334870238] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4009112334870238, 0.3007631913093484] ***
*** finished computation of 3 references, err: [Inf, 0.4009112334870238, 0.3007631913093484] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [230, 25, 0]]
** centroid: 1, normalized-entropy: 0.462749058578174, [(1, 230), (2, 25)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 154, 29]]
** centroid: 2, normalized-entropy: 0.6306365807664774, [(2, 154), (3, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [181, 48, 0]]
** centroid: 3, normalized-entropy: 0.7407308378931201, [(1, 181), (2, 48)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3463475474923] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3463475474923, 0.30864607370172303] ***
*** finished computation of 3 references, err: [Inf, 0.3463475474923, 0.30864607370172303] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [265, 1, 0]]
** centroid: 1, normalized-entropy: 0.0356964745823971, [(1, 265), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [113, 101, 0]]
** centroid: 2, normalized-entropy: 0.997730619528028, [(1, 113), (2, 101)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [34, 124, 29]]
** centroid: 3, normalized-entropy: 0.7931958981395526, [(1, 34), (2, 124), (3, 29)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 21)
[0.9490118861376348, 0.9450048851246455, 0.9410008811206415, 0.9379739020457584, 0.9370118621615627, 0.9350008691326058, 0.9310238382094669, 0.9280088471705238, 0.9249818680956405, 0.9230188272104439, 0.9230128331924737, 0.918031804259349, 0.9149928371485258, 0.9110188032343721, 0.9100447753142364, 0.9020457583331835, 0.8980237722752693, 0.8849957742173311, 0.8820287353221484, 0.7959636282989576, 0.7280633927340513]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9490118861376348
finished with 22
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.2549655812277875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2549655812277875, 0.19804356070326268] ***
*** finished computation of 7 references, err: [Inf, 0.2549655812277875, 0.19804356070326268] ***
*** center 1: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 68, 22]]
** centroid: 2, normalized-entropy: 0.80235344282919, [(2, 68), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [57, 22, 0]]
** centroid: 3, normalized-entropy: 0.8533728188427888, [(1, 57), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [64, 44, 0]]
** centroid: 4, normalized-entropy: 0.975119064940866, [(1, 64), (2, 44)]
*** center 5: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [6, 95, 0]]
** centroid: 6, normalized-entropy: 0.3250821976451909, [(1, 6), (2, 95)]
*** center 7: selecting labels [1] (freq >= 1) [from [127, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2727135155570583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2727135155570583, 0.206936321651348] ***
*** finished computation of 7 references, err: [Inf, 0.2727135155570583, 0.206936321651348] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [73, 22, 0]]
** centroid: 1, normalized-entropy: 0.7807536250860868, [(1, 73), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [62, 31, 0]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(1, 62), (2, 31)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 38, 28]]
** centroid: 3, normalized-entropy: 0.9833761901392238, [(2, 38), (3, 28)]
*** center 4: selecting labels [1] (freq >= 1) [from [130, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [97, 16, 0]]
** centroid: 5, normalized-entropy: 0.5883953722191577, [(1, 97), (2, 16)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [49, 50, 0]]
** centroid: 6, normalized-entropy: 0.999926399368686, [(1, 49), (2, 50)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 70, 1]]
** centroid: 7, normalized-entropy: 0.10679203237584184, [(2, 70), (3, 1)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2348998905169307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2348998905169307, 0.2015181509491665] ***
*** finished computation of 7 references, err: [Inf, 0.2348998905169307, 0.2015181509491665] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [6, 68, 0]]
** centroid: 1, normalized-entropy: 0.40597703847557104, [(1, 6), (2, 68)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [49, 7, 0]]
** centroid: 2, normalized-entropy: 0.5435644431995963, [(1, 49), (2, 7)]
*** center 3: selecting labels [1] (freq >= 1) [from [116, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [27, 78, 0]]
** centroid: 4, normalized-entropy: 0.8224042259549892, [(1, 27), (2, 78)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 59, 29]]
** centroid: 5, normalized-entropy: 0.9144612916935675, [(2, 59), (3, 29)]
*** center 6: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [112, 14, 0]]
** centroid: 7, normalized-entropy: 0.5032583347756457, [(1, 112), (2, 14)]
finished with 12 centroids; started with 7
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.21736175877787173] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21736175877787173, 0.17293445810931735] ***
*** starting iteration: 2; err: [Inf, 0.21736175877787173, 0.17293445810931735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21736175877787173, 0.17293445810931735, 0.163212138495408] ***
*** starting iteration: 3; err: [Inf, 0.21736175877787173, 0.17293445810931735, 0.163212138495408] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21736175877787173, 0.17293445810931735, 0.163212138495408, 0.15740236554807052] ***
*** finished computation of 7 references, err: [Inf, 0.21736175877787173, 0.17293445810931735, 0.163212138495408, 0.15740236554807052] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 204, 40]]
** centroid: 1, normalized-entropy: 0.6436394131461666, [(2, 204), (3, 40)]
*** center 2: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [97, 48, 0]]
** centroid: 3, normalized-entropy: 0.9159798091406802, [(1, 97), (2, 48)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [100, 26, 0]]
** centroid: 4, normalized-entropy: 0.7344461802527668, [(1, 100), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [138, 63, 0]]
** centroid: 5, normalized-entropy: 0.8970964164730478, [(1, 138), (2, 63)]
*** center 6: selecting labels [1] (freq >= 2) [from [136, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20475985922012477] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20475985922012477, 0.16591506717912852] ***
*** starting iteration: 2; err: [Inf, 0.20475985922012477, 0.16591506717912852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20475985922012477, 0.16591506717912852, 0.15723691544681787] ***
*** starting iteration: 3; err: [Inf, 0.20475985922012477, 0.16591506717912852, 0.15723691544681787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20475985922012477, 0.16591506717912852, 0.15723691544681787, 0.15344108200352638] ***
*** finished computation of 7 references, err: [Inf, 0.20475985922012477, 0.16591506717912852, 0.15723691544681787, 0.15344108200352638] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [90, 2, 0]]
** centroid: 1, normalized-entropy: 0.1510969705171136, [(1, 90), (2, 2)]
*** center 2: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [57, 18, 0]]
** centroid: 3, normalized-entropy: 0.7950402793845225, [(1, 57), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [26, 24, 0]]
** centroid: 4, normalized-entropy: 0.998845535995202, [(1, 26), (2, 24)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 60, 14]]
** centroid: 5, normalized-entropy: 0.699772221773307, [(2, 60), (3, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 62, 1]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19053065973427147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19053065973427147, 0.16235265415348113] ***
*** starting iteration: 2; err: [Inf, 0.19053065973427147, 0.16235265415348113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19053065973427147, 0.16235265415348113, 0.15569802904874086] ***
*** starting iteration: 3; err: [Inf, 0.19053065973427147, 0.16235265415348113, 0.15569802904874086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19053065973427147, 0.16235265415348113, 0.15569802904874086, 0.15179519970528782] ***
*** finished computation of 7 references, err: [Inf, 0.19053065973427147, 0.16235265415348113, 0.15569802904874086, 0.15179519970528782] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 79, 19]]
** centroid: 2, normalized-entropy: 0.7095128863456239, [(2, 79), (3, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [9, 37, 0]]
** centroid: 4, normalized-entropy: 0.7131467486384921, [(1, 9), (2, 37)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [80, 5, 0]]
** centroid: 5, normalized-entropy: 0.32275695889739825, [(1, 80), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [67, 9, 0]]
** centroid: 6, normalized-entropy: 0.524805134842907, [(1, 67), (2, 9)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [24, 35, 0]]
** centroid: 7, normalized-entropy: 0.9747785474909672, [(1, 24), (2, 35)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20091927432175727] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20091927432175727, 0.1586157088764012] ***
*** starting iteration: 2; err: [Inf, 0.20091927432175727, 0.1586157088764012] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20091927432175727, 0.1586157088764012, 0.15022872072737664] ***
*** starting iteration: 3; err: [Inf, 0.20091927432175727, 0.1586157088764012, 0.15022872072737664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20091927432175727, 0.1586157088764012, 0.15022872072737664, 0.14814753569103778] ***
*** finished computation of 7 references, err: [Inf, 0.20091927432175727, 0.1586157088764012, 0.15022872072737664, 0.14814753569103778] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [36, 34, 0]]
** centroid: 1, normalized-entropy: 0.9994110647387552, [(1, 36), (2, 34)]
*** center 2: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [34, 31, 0]]
** centroid: 3, normalized-entropy: 0.9984628557283827, [(1, 34), (2, 31)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 89, 24]]
** centroid: 4, normalized-entropy: 0.7460251980495494, [(2, 89), (3, 24)]
*** center 5: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [60, 18, 0]]
** centroid: 7, normalized-entropy: 0.7793498372920851, [(1, 60), (2, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2385923226447776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2385923226447776, 0.16636844105646015] ***
*** starting iteration: 2; err: [Inf, 0.2385923226447776, 0.16636844105646015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2385923226447776, 0.16636844105646015, 0.15885634746961297] ***
*** starting iteration: 3; err: [Inf, 0.2385923226447776, 0.16636844105646015, 0.15885634746961297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2385923226447776, 0.16636844105646015, 0.15885634746961297, 0.1544935147780925] ***
*** finished computation of 7 references, err: [Inf, 0.2385923226447776, 0.16636844105646015, 0.15885634746961297, 0.1544935147780925] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [43, 32, 0]]
** centroid: 1, normalized-entropy: 0.9844268978000115, [(1, 43), (2, 32)]
*** center 2: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 91, 18]]
** centroid: 3, normalized-entropy: 0.6464599001526788, [(2, 91), (3, 18)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 4, 0]]
** centroid: 4, normalized-entropy: 0.34918437350730797, [(1, 57), (2, 4)]
*** center 5: selecting labels [1] (freq >= 2) [from [35, 1, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 46, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [88, 6, 0]]
** centroid: 7, normalized-entropy: 0.3424637724817958, [(1, 88), (2, 6)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.37416358195059] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37416358195059, 0.2046314103025943] ***
*** starting iteration: 2; err: [Inf, 0.37416358195059, 0.2046314103025943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37416358195059, 0.2046314103025943, 0.17450787919946015] ***
*** starting iteration: 3; err: [Inf, 0.37416358195059, 0.2046314103025943, 0.17450787919946015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37416358195059, 0.2046314103025943, 0.17450787919946015, 0.16152159521402792] ***
*** finished computation of 7 references, err: [Inf, 0.37416358195059, 0.2046314103025943, 0.17450787919946015, 0.16152159521402792] ***
*** center 1: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [95, 3, 0]]
** centroid: 2, normalized-entropy: 0.19745300438456026, [(1, 95), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [64, 1, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [37, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 92, 20]]
** centroid: 6, normalized-entropy: 0.6769418697808861, [(2, 92), (3, 20)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 76, 0]]
** centroid: 7, normalized-entropy: 0.45371633918694493, [(1, 8), (2, 76)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2591940054548904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2591940054548904, 0.18278355998639018] ***
*** starting iteration: 2; err: [Inf, 0.2591940054548904, 0.18278355998639018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2591940054548904, 0.18278355998639018, 0.16509597687097266] ***
*** starting iteration: 3; err: [Inf, 0.2591940054548904, 0.18278355998639018, 0.16509597687097266] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2591940054548904, 0.18278355998639018, 0.16509597687097266, 0.1583535712826997] ***
*** finished computation of 7 references, err: [Inf, 0.2591940054548904, 0.18278355998639018, 0.16509597687097266, 0.1583535712826997] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [65, 9, 0]]
** centroid: 1, normalized-entropy: 0.5340042729285396, [(1, 65), (2, 9)]
*** center 2: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 42, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [96, 3, 0]]
** centroid: 4, normalized-entropy: 0.19590927087360496, [(1, 96), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 19, 0]]
** centroid: 5, normalized-entropy: 0.9414231081869789, [(1, 34), (2, 19)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 64, 19]]
** centroid: 6, normalized-entropy: 0.776116265618875, [(2, 64), (3, 19)]
*** center 7: selecting labels [1, 2, 3] (freq >= 2) [from [4, 40, 3]]
** centroid: 7, normalized-entropy: 0.4756628373826378, [(1, 4), (2, 40), (3, 3)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.269182496432215] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.269182496432215, 0.179166520062834] ***
*** starting iteration: 2; err: [Inf, 0.269182496432215, 0.179166520062834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.269182496432215, 0.179166520062834, 0.16515320298448205] ***
*** starting iteration: 3; err: [Inf, 0.269182496432215, 0.179166520062834, 0.16515320298448205] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.269182496432215, 0.179166520062834, 0.16515320298448205, 0.1540817417539656] ***
*** finished computation of 7 references, err: [Inf, 0.269182496432215, 0.179166520062834, 0.16515320298448205, 0.1540817417539656] ***
*** center 1: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 68, 16]]
** centroid: 2, normalized-entropy: 0.7024665512903904, [(2, 68), (3, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 51, 4]]
** centroid: 3, normalized-entropy: 0.37601985096927276, [(2, 51), (3, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [73, 3, 0]]
** centroid: 4, normalized-entropy: 0.23987382528036535, [(1, 73), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [33, 34, 0]]
** centroid: 5, normalized-entropy: 0.9998393017810486, [(1, 33), (2, 34)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [92, 19, 0]]
** centroid: 6, normalized-entropy: 0.6603769229926888, [(1, 92), (2, 19)]
*** center 7: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20387696322984994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20387696322984994, 0.16012900882866232] ***
*** starting iteration: 2; err: [Inf, 0.20387696322984994, 0.16012900882866232] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20387696322984994, 0.16012900882866232, 0.15488296870386695] ***
*** starting iteration: 3; err: [Inf, 0.20387696322984994, 0.16012900882866232, 0.15488296870386695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20387696322984994, 0.16012900882866232, 0.15488296870386695, 0.1534574908055365] ***
*** finished computation of 7 references, err: [Inf, 0.20387696322984994, 0.16012900882866232, 0.15488296870386695, 0.1534574908055365] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [84, 3, 0]]
** centroid: 1, normalized-entropy: 0.21639693245126485, [(1, 84), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [36, 32, 0]]
** centroid: 2, normalized-entropy: 0.9975025463691153, [(1, 36), (2, 32)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [66, 4, 0]]
** centroid: 3, normalized-entropy: 0.3159971329784246, [(1, 66), (2, 4)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 98, 17]]
** centroid: 4, normalized-entropy: 0.6043732420352782, [(2, 98), (3, 17)]
*** center 5: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [54, 30, 0]]
** centroid: 7, normalized-entropy: 0.940285958670631, [(1, 54), (2, 30)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2721061323918402] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2721061323918402, 0.17584114381298424] ***
*** starting iteration: 2; err: [Inf, 0.2721061323918402, 0.17584114381298424] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2721061323918402, 0.17584114381298424, 0.1653117482867092] ***
*** starting iteration: 3; err: [Inf, 0.2721061323918402, 0.17584114381298424, 0.1653117482867092] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2721061323918402, 0.17584114381298424, 0.1653117482867092, 0.1599842492695898] ***
*** finished computation of 7 references, err: [Inf, 0.2721061323918402, 0.17584114381298424, 0.1653117482867092, 0.1599842492695898] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [31, 4, 0]]
** centroid: 1, normalized-entropy: 0.5127091420308771, [(1, 31), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [103, 22, 0]]
** centroid: 2, normalized-entropy: 0.6712478853829507, [(1, 103), (2, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 84, 20]]
** centroid: 4, normalized-entropy: 0.7062740891876008, [(2, 84), (3, 20)]
*** center 5: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [58, 1, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 63, 0]]
** centroid: 7, normalized-entropy: 0.2667649878030262, [(1, 3), (2, 63)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2568529110206291] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2568529110206291, 0.18039130320772528] ***
*** starting iteration: 2; err: [Inf, 0.2568529110206291, 0.18039130320772528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2568529110206291, 0.18039130320772528, 0.16336522604245693] ***
*** starting iteration: 3; err: [Inf, 0.2568529110206291, 0.18039130320772528, 0.16336522604245693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2568529110206291, 0.18039130320772528, 0.16336522604245693, 0.15805809746403246] ***
*** finished computation of 7 references, err: [Inf, 0.2568529110206291, 0.18039130320772528, 0.16336522604245693, 0.15805809746403246] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [35, 74, 0]]
** centroid: 1, normalized-entropy: 0.9055746490923751, [(1, 35), (2, 74)]
*** center 2: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [44, 12, 0]]
** centroid: 3, normalized-entropy: 0.7495952572594798, [(1, 44), (2, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 77, 22]]
** centroid: 6, normalized-entropy: 0.7642045065086204, [(2, 77), (3, 22)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [38, 20, 0]]
** centroid: 7, normalized-entropy: 0.9293636260137188, [(1, 38), (2, 20)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22386631932668388] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22386631932668388, 0.17313804244156927] ***
*** starting iteration: 2; err: [Inf, 0.22386631932668388, 0.17313804244156927] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22386631932668388, 0.17313804244156927, 0.16565827070828526] ***
*** starting iteration: 3; err: [Inf, 0.22386631932668388, 0.17313804244156927, 0.16565827070828526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22386631932668388, 0.17313804244156927, 0.16565827070828526, 0.16198071235977113] ***
*** finished computation of 7 references, err: [Inf, 0.22386631932668388, 0.17313804244156927, 0.16565827070828526, 0.16198071235977113] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 39, 20]]
** centroid: 1, normalized-entropy: 0.9238422284571813, [(2, 39), (3, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [12, 53, 0]]
** centroid: 3, normalized-entropy: 0.6900703653284017, [(1, 12), (2, 53)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [105, 7, 0]]
** centroid: 4, normalized-entropy: 0.3372900666170139, [(1, 105), (2, 7)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 66, 2]]
** centroid: 5, normalized-entropy: 0.1914332548141934, [(2, 66), (3, 2)]
*** center 6: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23944560624938457] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23944560624938457, 0.1911127765942365] ***
*** starting iteration: 2; err: [Inf, 0.23944560624938457, 0.1911127765942365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23944560624938457, 0.1911127765942365, 0.17317250606883317] ***
*** starting iteration: 3; err: [Inf, 0.23944560624938457, 0.1911127765942365, 0.17317250606883317] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23944560624938457, 0.1911127765942365, 0.17317250606883317, 0.16421375980973243] ***
*** finished computation of 7 references, err: [Inf, 0.23944560624938457, 0.1911127765942365, 0.17317250606883317, 0.16421375980973243] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 90, 21]]
** centroid: 1, normalized-entropy: 0.699772221773307, [(2, 90), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [75, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [29, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [76, 43, 0]]
** centroid: 4, normalized-entropy: 0.9437935996617022, [(1, 76), (2, 43)]
*** center 5: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 37, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [14, 3, 0]]
** centroid: 7, normalized-entropy: 0.6722948170756378, [(1, 14), (2, 3)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.38212193902768193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38212193902768193, 0.1969698280543089] ***
*** starting iteration: 2; err: [Inf, 0.38212193902768193, 0.1969698280543089] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38212193902768193, 0.1969698280543089, 0.17632343344949186] ***
*** starting iteration: 3; err: [Inf, 0.38212193902768193, 0.1969698280543089, 0.17632343344949186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38212193902768193, 0.1969698280543089, 0.17632343344949186, 0.16598914488218725] ***
*** finished computation of 7 references, err: [Inf, 0.38212193902768193, 0.1969698280543089, 0.17632343344949186, 0.16598914488218725] ***
*** center 1: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 60, 0]]
** centroid: 2, normalized-entropy: 0.9995256892936492, [(1, 57), (2, 60)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 50, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [2, 47, 0]]
** centroid: 4, normalized-entropy: 0.2460225782203316, [(1, 2), (2, 47)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 20, 18]]
** centroid: 5, normalized-entropy: 0.9980008838722993, [(2, 20), (3, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [144, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [33, 6, 0]]
** centroid: 7, normalized-entropy: 0.6193821946787638, [(1, 33), (2, 6)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18555709046497942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18555709046497942, 0.1533535929825157] ***
*** starting iteration: 2; err: [Inf, 0.18555709046497942, 0.1533535929825157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18555709046497942, 0.1533535929825157, 0.150237936520949] ***
*** starting iteration: 3; err: [Inf, 0.18555709046497942, 0.1533535929825157, 0.150237936520949] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18555709046497942, 0.1533535929825157, 0.150237936520949, 0.1492612812621519] ***
*** finished computation of 7 references, err: [Inf, 0.18555709046497942, 0.1533535929825157, 0.150237936520949, 0.1492612812621519] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 7, 0]]
** centroid: 1, normalized-entropy: 0.46899559358928133, [(1, 63), (2, 7)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 52, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [11, 76, 0]]
** centroid: 3, normalized-entropy: 0.5475844288749033, [(1, 11), (2, 76)]
*** center 4: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [80, 3, 0]]
** centroid: 5, normalized-entropy: 0.2243269603450881, [(1, 80), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [62, 10, 0]]
** centroid: 6, normalized-entropy: 0.581321498763703, [(1, 62), (2, 10)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 28, 18]]
** centroid: 7, normalized-entropy: 0.9656361333706099, [(2, 28), (3, 18)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20226705977320672] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20226705977320672, 0.1642138354666531] ***
*** starting iteration: 2; err: [Inf, 0.20226705977320672, 0.1642138354666531] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20226705977320672, 0.1642138354666531, 0.15319968021661043] ***
*** starting iteration: 3; err: [Inf, 0.20226705977320672, 0.1642138354666531, 0.15319968021661043] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20226705977320672, 0.1642138354666531, 0.15319968021661043, 0.1487847752738744] ***
*** finished computation of 7 references, err: [Inf, 0.20226705977320672, 0.1642138354666531, 0.15319968021661043, 0.1487847752738744] ***
*** center 1: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [21, 37, 0]]
** centroid: 2, normalized-entropy: 0.9443871950133461, [(1, 21), (2, 37)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 48, 22]]
** centroid: 3, normalized-entropy: 0.8980587934501658, [(2, 48), (3, 22)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 37, 0]]
** centroid: 4, normalized-entropy: 0.9670941140642181, [(1, 57), (2, 37)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [50, 5, 0]]
** centroid: 5, normalized-entropy: 0.43949698692151346, [(1, 50), (2, 5)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 52, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1958025448359549] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1958025448359549, 0.15967615532130003] ***
*** starting iteration: 2; err: [Inf, 0.1958025448359549, 0.15967615532130003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1958025448359549, 0.15967615532130003, 0.15270477340184152] ***
*** starting iteration: 3; err: [Inf, 0.1958025448359549, 0.15967615532130003, 0.15270477340184152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1958025448359549, 0.15967615532130003, 0.15270477340184152, 0.14980619001854212] ***
*** finished computation of 7 references, err: [Inf, 0.1958025448359549, 0.15967615532130003, 0.15270477340184152, 0.14980619001854212] ***
*** center 1: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 25, 22]]
** centroid: 2, normalized-entropy: 0.9970590569034106, [(2, 25), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [2, 51, 0]]
** centroid: 3, normalized-entropy: 0.23181305002459035, [(1, 2), (2, 51)]
*** center 4: selecting labels [2] (freq >= 2) [from [1, 74, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 14, 0]]
** centroid: 5, normalized-entropy: 0.7837769474847011, [(1, 46), (2, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23493032138142736] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23493032138142736, 0.18352723560482265] ***
*** starting iteration: 2; err: [Inf, 0.23493032138142736, 0.18352723560482265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23493032138142736, 0.18352723560482265, 0.1672670163232833] ***
*** starting iteration: 3; err: [Inf, 0.23493032138142736, 0.18352723560482265, 0.1672670163232833] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23493032138142736, 0.18352723560482265, 0.1672670163232833, 0.15765406350418926] ***
*** finished computation of 7 references, err: [Inf, 0.23493032138142736, 0.18352723560482265, 0.1672670163232833, 0.15765406350418926] ***
*** center 1: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 79, 21]]
** centroid: 2, normalized-entropy: 0.7414827399312738, [(2, 79), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [82, 33, 0]]
** centroid: 3, normalized-entropy: 0.8647572655747071, [(1, 82), (2, 33)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [31, 26, 0]]
** centroid: 4, normalized-entropy: 0.9944423248022589, [(1, 31), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [3, 35, 0]]
** centroid: 5, normalized-entropy: 0.39845927409523557, [(1, 3), (2, 35)]
*** center 6: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2196057370202616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2196057370202616, 0.16689345773682] ***
*** starting iteration: 2; err: [Inf, 0.2196057370202616, 0.16689345773682] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2196057370202616, 0.16689345773682, 0.15759734982997178] ***
*** starting iteration: 3; err: [Inf, 0.2196057370202616, 0.16689345773682, 0.15759734982997178] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2196057370202616, 0.16689345773682, 0.15759734982997178, 0.15210634857229888] ***
*** finished computation of 7 references, err: [Inf, 0.2196057370202616, 0.16689345773682, 0.15759734982997178, 0.15210634857229888] ***
*** center 1: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [74, 20, 0]]
** centroid: 2, normalized-entropy: 0.7467366074830678, [(1, 74), (2, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 7, 0]]
** centroid: 4, normalized-entropy: 0.5086113313826895, [(1, 55), (2, 7)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [2, 65, 0]]
** centroid: 5, normalized-entropy: 0.19364280468389852, [(1, 2), (2, 65)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 74, 23]]
** centroid: 6, normalized-entropy: 0.790206924188637, [(2, 74), (3, 23)]
*** center 7: selecting labels [1] (freq >= 2) [from [37, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20678047351818532] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20678047351818532, 0.162777500750497] ***
*** starting iteration: 2; err: [Inf, 0.20678047351818532, 0.162777500750497] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20678047351818532, 0.162777500750497, 0.1542581612356007] ***
*** starting iteration: 3; err: [Inf, 0.20678047351818532, 0.162777500750497, 0.1542581612356007] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20678047351818532, 0.162777500750497, 0.1542581612356007, 0.15024547249265016] ***
*** finished computation of 7 references, err: [Inf, 0.20678047351818532, 0.162777500750497, 0.1542581612356007, 0.15024547249265016] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [40, 53, 0]]
** centroid: 1, normalized-entropy: 0.9858587262978805, [(1, 40), (2, 53)]
*** center 2: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [64, 12, 0]]
** centroid: 3, normalized-entropy: 0.6292492238560344, [(1, 64), (2, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [48, 1, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 50, 23]]
** centroid: 6, normalized-entropy: 0.8989377852081333, [(2, 50), (3, 23)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 63, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20920481036417185] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20920481036417185, 0.1563331026881933] ***
*** starting iteration: 2; err: [Inf, 0.20920481036417185, 0.1563331026881933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20920481036417185, 0.1563331026881933, 0.1477425898760557] ***
*** starting iteration: 3; err: [Inf, 0.20920481036417185, 0.1563331026881933, 0.1477425898760557] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20920481036417185, 0.1563331026881933, 0.1477425898760557, 0.14517278865166008] ***
*** finished computation of 7 references, err: [Inf, 0.20920481036417185, 0.1563331026881933, 0.1477425898760557, 0.14517278865166008] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 62, 11]]
** centroid: 1, normalized-entropy: 0.6115516951951333, [(2, 62), (3, 11)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 57, 6]]
** centroid: 2, normalized-entropy: 0.45371633918694493, [(2, 57), (3, 6)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 18, 0]]
** centroid: 3, normalized-entropy: 0.7897492536625221, [(1, 58), (2, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [87, 12, 0]]
** centroid: 6, normalized-entropy: 0.5328350630342235, [(1, 87), (2, 12)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [43, 14, 0]]
** centroid: 7, normalized-entropy: 0.8042522359016421, [(1, 43), (2, 14)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20332937240041793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20332937240041793, 0.16919735670648514] ***
*** starting iteration: 2; err: [Inf, 0.20332937240041793, 0.16919735670648514] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20332937240041793, 0.16919735670648514, 0.1560258364379406] ***
*** starting iteration: 3; err: [Inf, 0.20332937240041793, 0.16919735670648514, 0.1560258364379406] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20332937240041793, 0.16919735670648514, 0.1560258364379406, 0.15098154390230775] ***
*** finished computation of 7 references, err: [Inf, 0.20332937240041793, 0.16919735670648514, 0.1560258364379406, 0.15098154390230775] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 22, 0]]
** centroid: 3, normalized-entropy: 0.9132401614300725, [(1, 45), (2, 22)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 51, 25]]
** centroid: 4, normalized-entropy: 0.9138472873262908, [(2, 51), (3, 25)]
*** center 5: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [18, 45, 0]]
** centroid: 6, normalized-entropy: 0.8631205685666311, [(1, 18), (2, 45)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [15, 46, 0]]
** centroid: 7, normalized-entropy: 0.8047175193210769, [(1, 15), (2, 46)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2920209203675622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2920209203675622, 0.23239550859108568] ***
*** starting iteration: 2; err: [Inf, 0.2920209203675622, 0.23239550859108568] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2920209203675622, 0.23239550859108568, 0.18969619161263107] ***
*** starting iteration: 3; err: [Inf, 0.2920209203675622, 0.23239550859108568, 0.18969619161263107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2920209203675622, 0.23239550859108568, 0.18969619161263107, 0.1712847461886704] ***
*** finished computation of 7 references, err: [Inf, 0.2920209203675622, 0.23239550859108568, 0.18969619161263107, 0.1712847461886704] ***
*** center 1: selecting labels [1] (freq >= 2) [from [144, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [88, 19, 0]]
** centroid: 2, normalized-entropy: 0.6747323584057238, [(1, 88), (2, 19)]
*** center 3: selecting labels [2] (freq >= 2) [from [1, 62, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 4, 16]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 16)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 19, 6]]
** centroid: 5, normalized-entropy: 0.7950402793845225, [(2, 19), (3, 6)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 47, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [67, 27, 0]]
** centroid: 7, normalized-entropy: 0.8651214227512075, [(1, 67), (2, 27)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21954343494959175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21954343494959175, 0.1923335644705221] ***
*** starting iteration: 2; err: [Inf, 0.21954343494959175, 0.1923335644705221] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21954343494959175, 0.1923335644705221, 0.18065207744017242] ***
*** starting iteration: 3; err: [Inf, 0.21954343494959175, 0.1923335644705221, 0.18065207744017242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21954343494959175, 0.1923335644705221, 0.18065207744017242, 0.1691834105104208] ***
*** finished computation of 7 references, err: [Inf, 0.21954343494959175, 0.1923335644705221, 0.18065207744017242, 0.1691834105104208] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 100, 25]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(2, 100), (3, 25)]
*** center 2: selecting labels [1] (freq >= 2) [from [28, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [71, 29, 0]]
** centroid: 3, normalized-entropy: 0.8687212463394044, [(1, 71), (2, 29)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 42, 0]]
** centroid: 4, normalized-entropy: 0.9833761901392238, [(1, 57), (2, 42)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [71, 3, 0]]
** centroid: 5, normalized-entropy: 0.2447650820208971, [(1, 71), (2, 3)]
*** center 6: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21919159046001732] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21919159046001732, 0.1654091856405139] ***
*** starting iteration: 2; err: [Inf, 0.21919159046001732, 0.1654091856405139] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21919159046001732, 0.1654091856405139, 0.16124914180487393] ***
*** starting iteration: 3; err: [Inf, 0.21919159046001732, 0.1654091856405139, 0.16124914180487393] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21919159046001732, 0.1654091856405139, 0.16124914180487393, 0.15870267028175294] ***
*** finished computation of 7 references, err: [Inf, 0.21919159046001732, 0.1654091856405139, 0.16124914180487393, 0.15870267028175294] ***
*** center 1: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [2, 77, 0]]
** centroid: 2, normalized-entropy: 0.17033057560105982, [(1, 2), (2, 77)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 71, 21]]
** centroid: 3, normalized-entropy: 0.7749672673267259, [(2, 71), (3, 21)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [45, 13, 0]]
** centroid: 4, normalized-entropy: 0.7676515870125797, [(1, 45), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [100, 15, 0]]
** centroid: 5, normalized-entropy: 0.5586293734521991, [(1, 100), (2, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19234539733175188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19234539733175188, 0.16851900692563504] ***
*** starting iteration: 2; err: [Inf, 0.19234539733175188, 0.16851900692563504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19234539733175188, 0.16851900692563504, 0.16068947400525213] ***
*** starting iteration: 3; err: [Inf, 0.19234539733175188, 0.16851900692563504, 0.16068947400525213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19234539733175188, 0.16851900692563504, 0.16068947400525213, 0.15578231251332908] ***
*** finished computation of 7 references, err: [Inf, 0.19234539733175188, 0.16851900692563504, 0.16068947400525213, 0.15578231251332908] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 92, 14]]
** centroid: 1, normalized-entropy: 0.5631028237513912, [(2, 92), (3, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [73, 22, 0]]
** centroid: 2, normalized-entropy: 0.7807536250860868, [(1, 73), (2, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [57, 4, 0]]
** centroid: 3, normalized-entropy: 0.34918437350730797, [(1, 57), (2, 4)]
*** center 4: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 60, 1]]
*** center 6: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21192429993115366] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21192429993115366, 0.16992545340023935] ***
*** starting iteration: 2; err: [Inf, 0.21192429993115366, 0.16992545340023935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21192429993115366, 0.16992545340023935, 0.16292874159291387] ***
*** starting iteration: 3; err: [Inf, 0.21192429993115366, 0.16992545340023935, 0.16292874159291387] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21192429993115366, 0.16992545340023935, 0.16292874159291387, 0.1592915034815669] ***
*** finished computation of 7 references, err: [Inf, 0.21192429993115366, 0.16992545340023935, 0.16292874159291387, 0.1592915034815669] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [65, 2, 0]]
** centroid: 1, normalized-entropy: 0.19364280468389852, [(1, 65), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [41, 3, 0]]
** centroid: 2, normalized-entropy: 0.3591016256485496, [(1, 41), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 82, 8]]
** centroid: 3, normalized-entropy: 0.43275015878875417, [(2, 82), (3, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [28, 6, 0]]
** centroid: 4, normalized-entropy: 0.6722948170756378, [(1, 28), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [91, 13, 0]]
** centroid: 5, normalized-entropy: 0.5435644431995963, [(1, 91), (2, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 72, 15]]
** centroid: 7, normalized-entropy: 0.6631968402398286, [(2, 72), (3, 15)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28747087009251115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28747087009251115, 0.19165892363432796] ***
*** starting iteration: 2; err: [Inf, 0.28747087009251115, 0.19165892363432796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28747087009251115, 0.19165892363432796, 0.178714666265063] ***
*** starting iteration: 3; err: [Inf, 0.28747087009251115, 0.19165892363432796, 0.178714666265063] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28747087009251115, 0.19165892363432796, 0.178714666265063, 0.1750990698542446] ***
*** finished computation of 7 references, err: [Inf, 0.28747087009251115, 0.19165892363432796, 0.178714666265063, 0.1750990698542446] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [47, 21, 0]]
** centroid: 1, normalized-entropy: 0.8918107543797084, [(1, 47), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [110, 18, 0]]
** centroid: 2, normalized-entropy: 0.5858732928619204, [(1, 110), (2, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [40, 26, 0]]
** centroid: 3, normalized-entropy: 0.9672947789468944, [(1, 40), (2, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 88, 21]]
** centroid: 5, normalized-entropy: 0.70700406497476, [(2, 88), (3, 21)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [15, 3, 0]]
** centroid: 6, normalized-entropy: 0.6500224216483541, [(1, 15), (2, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30310182432830335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30310182432830335, 0.18872434181533754] ***
*** starting iteration: 2; err: [Inf, 0.30310182432830335, 0.18872434181533754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30310182432830335, 0.18872434181533754, 0.17170382081437857] ***
*** starting iteration: 3; err: [Inf, 0.30310182432830335, 0.18872434181533754, 0.17170382081437857] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30310182432830335, 0.18872434181533754, 0.17170382081437857, 0.16246197592327372] ***
*** finished computation of 7 references, err: [Inf, 0.30310182432830335, 0.18872434181533754, 0.17170382081437857, 0.16246197592327372] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [20, 66, 1]]
** centroid: 1, normalized-entropy: 0.7824441294066888, [(1, 20), (2, 66)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 51, 18]]
** centroid: 2, normalized-entropy: 0.828055725379504, [(2, 51), (3, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [42, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 36, 0]]
** centroid: 5, normalized-entropy: 0.9940302114769566, [(1, 30), (2, 36)]
*** center 6: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [25, 14, 0]]
** centroid: 7, normalized-entropy: 0.9418285354475157, [(1, 25), (2, 14)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26811360905691983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26811360905691983, 0.16947887827828526] ***
*** starting iteration: 2; err: [Inf, 0.26811360905691983, 0.16947887827828526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26811360905691983, 0.16947887827828526, 0.1586908767707646] ***
*** starting iteration: 3; err: [Inf, 0.26811360905691983, 0.16947887827828526, 0.1586908767707646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26811360905691983, 0.16947887827828526, 0.1586908767707646, 0.154686695384793] ***
*** finished computation of 7 references, err: [Inf, 0.26811360905691983, 0.16947887827828526, 0.1586908767707646, 0.154686695384793] ***
*** center 1: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [71, 9, 0]]
** centroid: 3, normalized-entropy: 0.5074109636646968, [(1, 71), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [2, 75, 0]]
** centroid: 4, normalized-entropy: 0.17378132267943294, [(1, 2), (2, 75)]
*** center 5: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [23, 32, 0]]
** centroid: 6, normalized-entropy: 0.980597440991727, [(1, 23), (2, 32)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 52, 16]]
** centroid: 7, normalized-entropy: 0.787126586201269, [(2, 52), (3, 16)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24557050837576389] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24557050837576389, 0.16352291738893837] ***
*** starting iteration: 2; err: [Inf, 0.24557050837576389, 0.16352291738893837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24557050837576389, 0.16352291738893837, 0.15468369917571545] ***
*** starting iteration: 3; err: [Inf, 0.24557050837576389, 0.16352291738893837, 0.15468369917571545] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24557050837576389, 0.16352291738893837, 0.15468369917571545, 0.150191913286224] ***
*** finished computation of 7 references, err: [Inf, 0.24557050837576389, 0.16352291738893837, 0.15468369917571545, 0.150191913286224] ***
*** center 1: selecting labels [1] (freq >= 2) [from [79, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 5, 0]]
** centroid: 2, normalized-entropy: 0.3829576722723533, [(1, 62), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 45, 2]]
** centroid: 3, normalized-entropy: 0.2538784402981617, [(2, 45), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 60, 17]]
** centroid: 4, normalized-entropy: 0.7615877869576693, [(2, 60), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 30, 0]]
** centroid: 5, normalized-entropy: 0.9438767571287909, [(1, 53), (2, 30)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [25, 33, 0]]
** centroid: 6, normalized-entropy: 0.9862325350724501, [(1, 25), (2, 33)]
*** center 7: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 341,3 => 40,1 => 619), Dict(2 => 377,3 => 37,1 => 586))
[ Info: ===== scores for single classifier: {"micro_f1":0.926,"precision":0.926,"recall":0.926,"macro_recall":0.9465542891457921,"macro_f1":0.8471113248891026,"accuracy":0.926,"class_f1":{"2":0.9021164021164021,"3":0.6727272727272727,"1":0.9664902998236331},"class_precision":{"2":0.899736147757256,"3":0.5068493150684932,"1":1.0},"class_recall":{"2":0.9045092838196287,"3":1.0,"1":0.9351535836177475}}
[ Info: ===== scores for 1: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9200697470086666,"macro_f1":0.9297811768182368,"accuracy":0.97,"class_f1":{"2":0.9605263157894738,"3":0.8450704225352113,"1":0.9837467921300256},"class_precision":{"2":0.9530026109660574,"3":0.8823529411764706,"1":0.9862778730703259},"class_recall":{"2":0.9681697612732095,"3":0.8108108108108109,"1":0.9812286689419796}}
[ Info: ===== scores for 5: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9673901049092293,"macro_f1":0.9563942667404263,"accuracy":0.979,"class_f1":{"2":0.9720372836218375,"3":0.9090909090909091,"1":0.9880546075085325},"class_precision":{"2":0.9759358288770054,"3":0.875,"1":0.9880546075085325},"class_recall":{"2":0.9681697612732095,"3":0.9459459459459459,"1":0.9880546075085325}}
[ Info: ===== scores for 7: {"micro_f1":0.972,"precision":0.972,"recall":0.972,"macro_recall":0.9774505632455498,"macro_f1":0.933316383673558,"accuracy":0.972,"class_f1":{"2":0.9621621621621622,"3":0.8505747126436781,"1":0.9872122762148339},"class_precision":{"2":0.9807162534435262,"3":0.74,"1":0.9863713798977853},"class_recall":{"2":0.9442970822281167,"3":1.0,"1":0.9880546075085325}}
[ Info: ===== scores for 9: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9792807717957771,"macro_f1":0.9312019047708587,"accuracy":0.973,"class_f1":{"2":0.963855421686747,"3":0.8409090909090908,"1":0.9888412017167382},"class_precision":{"2":0.972972972972973,"3":0.7254901960784313,"1":0.9948186528497409},"class_recall":{"2":0.9549071618037135,"3":1.0,"1":0.9829351535836177}}
[ Info: ===== scores for 11: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9795961168798643,"macro_f1":0.9312276796204922,"accuracy":0.973,"class_f1":{"2":0.9639519359145527,"3":0.8409090909090908,"1":0.9888220120378333},"class_precision":{"2":0.9704301075268817,"3":0.7254901960784313,"1":0.9965337954939342},"class_recall":{"2":0.9575596816976127,"3":1.0,"1":0.9812286689419796}}
(score = 0.973, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.977, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.972, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.979,"k":5,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9673901049092293,"macro_f1":0.9563942667404263,"accuracy":0.979,"class_f1":{"2":0.9720372836218375,"3":0.9090909090909091,"1":0.9880546075085325},"class_precision":{"2":0.9759358288770054,"3":0.875,"1":0.9880546075085325},"class_recall":{"2":0.9681697612732095,"3":0.9459459459459459,"1":0.9880546075085325}}
Test Summary: | Pass  Total
AKNC          |    8      8
[191, 1, 2, 1, 3, 1, 3, 2, 3, 1, 2, 6, 4, 2, 3, 8, 11, 5, 2, 3, 13, 31, 1, 24, 19, 6, 2, 3, 9, 32, 3, 15, 5, 4, 22, 22, 2, 2, 11, 9, 6, 38, 24, 12, 11, 14, 10, 2, 1, 19, 8, 19, 7, 14, 5, 11, 2, 5, 3, 2, 13, 2, 1, 2, 14, 4, 44, 7, 3, 3, 9, 1, 4, 14, 3, 1, 4, 3, 8, 8, 28, 1, 2, 109, 63, 19, 23, 47, 2, 15, 35, 2, 199, 14, 6, 14, 9, 7, 3, 8, 4, 3, 9, 20, 4, 19, 3, 10, 5, 19, 2, 188, 15, 3, 95, 26, 57, 25, 81, 76, 568, 65, 3, 8, 3, 7, 6, 4, 30, 14, 4, 1, 12, 24, 2, 14, 3, 13, 25, 4, 103, 129, 8, 166, 15, 11, 11, 15, 13, 12, 96, 16, 23, 4, 87, 29, 3, 33, 16, 70, 22, 26, 4, 6, 4, 18, 28, 23, 31, 13, 10, 33, 164, 60, 95, 98, 3, 14, 30, 18, 214, 8, 16, 3, 27, 344, 209, 24, 30, 22, 62, 11, 53, 2, 1, 4, 54, 129, 24, 2, 42, 10, 1, 17, 98, 10, 12, 116, 67, 16, 22, 21, 10, 10, 56, 15, 1, 49, 9, 75, 95, 9, 46, 70, 60, 3, 31, 5, 17, 55, 10, 24, 142, 40, 6, 68, 7, 24, 7, 10, 88, 89, 23, 20, 10, 8, 8, 66, 33, 55, 81, 8, 2, 7, 12, 35, 440, 15, 48, 4, 1, 125, 15, 80, 29, 18, 6, 13, 15, 33, 107, 73, 6, 124, 141, 8, 10, 169, 2, 362, 51, 22, 4, 5, 39, 10, 4, 71, 11, 114, 3, 4, 12, 31, 8, 9, 4, 19, 72, 3]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.649, speedup = 0.3511464422640295, eval_ratio = 0.068428)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.409396701388889,"recall":0.40104166666666663,"f1":null,"seconds":0.0001582317054271698,"exhaustive_search_seconds":0.00037546083331108093,"evaluations":449.078125,"distances_sum":1643.7968203076273}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5833333333333331,"recall":0.5833333333333331,"f1":null,"seconds":0.0002560168504714966,"exhaustive_search_seconds":0.00037546083331108093,"evaluations":594.484375,"distances_sum":1575.9941491833556}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.675347222222222,"recall":0.675347222222222,"f1":0.675347222222222,"seconds":0.00034517422318458557,"exhaustive_search_seconds":0.00037546083331108093,"evaluations":708.578125,"distances_sum":1533.632088244486}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7578124999999994,"recall":0.7578124999999994,"f1":0.7578124999999994,"seconds":0.0004343278706073761,"exhaustive_search_seconds":0.00037546083331108093,"evaluations":819.1328125,"distances_sum":1506.5588208377267}
KCenters.DeloneInvIndex> reached performance {"precision":0.8133680555555546,"recall":0.8133680555555546,"f1":0.8133680555555546,"seconds":0.0006368681788444519,"exhaustive_search_seconds":0.00037546083331108093,"evaluations":932.7421875,"distances_sum":1491.5947752584214}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.79, speedup = 0.6268448433315433, eval_ratio = 0.089783)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
