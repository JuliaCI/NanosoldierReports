Julia Version 1.5.0-DEV.299
Commit 6a9a92683d (2020-02-20 07:47 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed OrderedCollections ────────── v1.1.0
  Installed Compat ────────────────────── v3.5.0
  Installed KCenters ──────────────────── v0.2.1
  Installed Tables ────────────────────── v1.0.1
  Installed MLDataUtils ───────────────── v0.5.0
  Installed MLDataPattern ─────────────── v0.5.0
  Installed JSON ──────────────────────── v0.21.0
  Installed StatsBase ─────────────────── v0.32.1
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed MappedArrays ──────────────── v0.2.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed Reexport ──────────────────── v0.2.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed Missings ──────────────────── v0.4.3
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed DataStructures ────────────── v0.17.9
  Installed CategoricalArrays ─────────── v0.7.7
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataFrames ────────────────── v0.20.2
  Installed DataAPI ───────────────────── v1.1.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed Parsers ───────────────────── v0.3.11
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.1
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.5.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.1
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.1
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_KGh3sS/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.5.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.1
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.1
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9367083616058032
[ Info: 0.8326150393486023
[ Info: 0.5576448714236418
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.32531724544862906
mean(cdnet.distances) = 0.3792278552552064
mean(crand.distances) = 0.3396108350654443
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8603254384504394,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.4296875,"distances_sum":2140.1309571867537}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.7893941128316134,"seconds":4.7497451305389404e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.171875,"distances_sum":1846.0703824307739}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7734375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7734375,"f1":0.8603254384504394,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.4296875,"distances_sum":2140.1309571867537}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9729739010989014,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8671875,"distances_sum":2904.29788715087}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9554945054945062,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8671875,"distances_sum":2766.0477157102896}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9072895854145862,"seconds":5.368143320083618e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.5390625,"distances_sum":2422.5861545304374}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9729739010989014,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8671875,"distances_sum":2904.29788715087}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9740155677655682,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.921875,"distances_sum":2896.4832145376467}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9740155677655682,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.921875,"distances_sum":2896.4832145376467}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9740155677655682,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.921875,"distances_sum":2896.4832145376467}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.40625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.40625,"f1":null,"seconds":4.837289452552795e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.8046875,"distances_sum":872.939550555228}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.40625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.40625,"f1":null,"seconds":4.837289452552795e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.8046875,"distances_sum":872.939550555228}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.40625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.40625,"f1":null,"seconds":4.837289452552795e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.8046875,"distances_sum":872.939550555228}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.40625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.40625,"f1":null,"seconds":4.837289452552795e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.8046875,"distances_sum":872.939550555228}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1630859375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1630859375,"f1":null,"seconds":2.9169023036956787e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":4.765625,"distances_sum":413.1069642638108}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1533203125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1533203125,"f1":null,"seconds":2.93925404548645e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":4.640625,"distances_sum":387.176203381992}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.646484375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.646484375,"f1":0.7704011266511275,"seconds":4.8317015171051025e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.6171875,"distances_sum":1527.341709142043}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.646484375,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.646484375,"f1":0.7704011266511275,"seconds":4.8317015171051025e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.6171875,"distances_sum":1527.341709142043}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9021410880785887,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.5859375,"distances_sum":2140.2075329131876}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.955082417582418,"seconds":6.0033053159713745e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8125,"distances_sum":2479.717232809489}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6494140625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6494140625,"f1":0.7746954434454443,"seconds":4.863366484642029e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.59375,"distances_sum":1576.0147913187398}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.955082417582418,"seconds":6.0033053159713745e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8125,"distances_sum":2479.717232809489}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9737179487179491,"seconds":5.926936864852905e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.90625,"distances_sum":2612.0710486392427}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.9825892857142862,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9453125,"distances_sum":2652.5966599102817}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9671932234432237,"seconds":6.11133873462677e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8671875,"distances_sum":2554.464180999923}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9677734375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9825892857142862,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9453125,"distances_sum":2652.5966599102817}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9677734375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9825892857142862,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9453125,"distances_sum":2652.5966599102817}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.8824873043623053,"seconds":5.329027771949768e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.375,"distances_sum":1968.6316631450272}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7265625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7265625,"f1":0.8311365717615724,"seconds":4.630535840988159e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.875,"distances_sum":1711.0993311733419}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.802734375,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.802734375,"f1":0.8824873043623053,"seconds":5.329027771949768e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.375,"distances_sum":1968.6316631450272}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.90465315934066,"seconds":5.329027771949768e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.5546875,"distances_sum":2091.227787145892}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.932698031135532,"seconds":5.418434739112854e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.6796875,"distances_sum":2242.925755612589}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8828125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8828125,"f1":0.932698031135532,"seconds":5.418434739112854e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.6796875,"distances_sum":2242.925755612589}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9670272435897441,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.859375,"distances_sum":2498.92268670829}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9767113095238098,"seconds":5.6438148021698e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.921875,"distances_sum":2533.1042845278084}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9666895604395608,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.859375,"distances_sum":2492.229532164379}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9553399725274728,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8359375,"distances_sum":2408.1155200993044}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.947979624542125,"seconds":5.45009970664978e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.765625,"distances_sum":2362.6073034978467}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9767113095238098,"seconds":5.6438148021698e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.921875,"distances_sum":2533.1042845278084}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9767113095238098,"seconds":5.6438148021698e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.921875,"distances_sum":2533.1042845278084}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.669921875,"f1":0.7888986013986024,"seconds":4.326924681663513e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.4453125,"distances_sum":1556.9345236108693}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.490234375, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.490234375,"f1":null,"seconds":3.520399332046509e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":6.265625,"distances_sum":1153.038680874865}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8418959512709521,"seconds":4.837289452552795e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.09375,"distances_sum":1815.330530339487}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.74609375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.74609375,"f1":0.8418959512709521,"seconds":4.837289452552795e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.09375,"distances_sum":1815.330530339487}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9279309232434239,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.546875,"distances_sum":2277.4505203990507}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8486328125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8486328125,"f1":0.9112179487179496,"seconds":5.200505256652832e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.484375,"distances_sum":2150.3242278146404}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9406765109890116,"seconds":5.23589551448822e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.6796875,"distances_sum":2345.510925913207}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9479598526473532,"seconds":5.2694231271743774e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.6015625,"distances_sum":2443.4717368883257}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.860488990176491,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.2265625,"distances_sum":1870.2716624841123}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9479598526473532,"seconds":5.2694231271743774e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.6015625,"distances_sum":2443.4717368883257}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9667067307692312,"seconds":5.476176738739014e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.828125,"distances_sum":2527.7582460650947}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9699404761904764,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.859375,"distances_sum":2535.8028810866044}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9649413086913089,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.7734375,"distances_sum":2526.431470721819}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9699404761904764,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.859375,"distances_sum":2535.8028810866044}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9453125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9699404761904764,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.859375,"distances_sum":2535.8028810866044}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5703125, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.5703125,"f1":null,"seconds":4.405155777931213e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.5078125,"distances_sum":1324.0897165963747}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5703125,"state":{"ssize":3,"bsize":3},"perf":{"precision":null,"recall":0.5703125,"f1":null,"seconds":4.405155777931213e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.5078125,"distances_sum":1324.0897165963747}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8583984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8583984375,"f1":0.9190590659340666,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.546875,"distances_sum":2195.020157959508}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5712890625, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5712890625,"f1":0.7106339840714847,"seconds":4.179775714874268e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.421875,"distances_sum":1304.0956063224476}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.587890625, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.587890625,"f1":0.7231959013209021,"seconds":4.252418875694275e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.5,"distances_sum":1366.4002547836722}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.8004287379287387,"seconds":4.634261131286621e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.5390625,"distances_sum":1623.3345287407014}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8583984375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8583984375,"f1":0.9190590659340666,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.546875,"distances_sum":2195.020157959508}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9624713827838833,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8359375,"distances_sum":2553.8287036582396}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":10,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9582646520146524,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.84375,"distances_sum":2527.0225667081895}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9521665834165839,"seconds":6.254762411117554e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8359375,"distances_sum":2480.3570604801566}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9329670329670336,"seconds":6.027519702911377e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6640625,"distances_sum":2339.8496952899977}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9373974983349991,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.7265625,"distances_sum":2347.946218870699}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9624713827838833,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8359375,"distances_sum":2553.8287036582396}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9624713827838833,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8359375,"distances_sum":2553.8287036582396}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5,"f1":0.6513944388944393,"seconds":4.317611455917358e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.3828125,"distances_sum":1228.594811049735}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1533203125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1533203125,"f1":null,"seconds":3.0063092708587646e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":4.6796875,"distances_sum":372.9665893427839}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3369140625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3369140625,"f1":null,"seconds":3.5651028156280518e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":5.6328125,"distances_sum":806.8286139166554}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5,"f1":0.6513944388944393,"seconds":4.317611455917358e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.3828125,"distances_sum":1228.594811049735}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8608469655344663,"seconds":4.896894097328186e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.2109375,"distances_sum":1863.4611237402999}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.792996413308914,"seconds":4.868954420089722e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.6640625,"distances_sum":1609.8458733380153}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5048828125, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.5048828125,"f1":null,"seconds":4.215165972709656e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.3515625,"distances_sum":1241.0696979411284}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.897009761072262,"seconds":5.383044481277466e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.4609375,"distances_sum":2051.082761720087}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6904296875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6904296875,"f1":0.801516192141193,"seconds":4.997476935386658e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.859375,"distances_sum":1646.1944456356214}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.7864363067488074,"seconds":5.146488547325134e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.7421875,"distances_sum":1579.3201622565039}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.830078125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.830078125,"f1":0.897009761072262,"seconds":5.383044481277466e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.4609375,"distances_sum":2051.082761720087}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9229171869796875,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.5,"distances_sum":2221.9313708165137}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9533195970695976,"seconds":6.105750799179077e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.71875,"distances_sum":2403.9084205355107}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9448546245421252,"seconds":6.05359673500061e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.7421875,"distances_sum":2347.676870888324}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9515911172161177,"seconds":6.059184670448303e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.703125,"distances_sum":2407.8299793944298}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9550080128205133,"seconds":6.018206477165222e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.7421875,"distances_sum":2417.364193804887}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9275641025641032,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.5859375,"distances_sum":2208.6148191367865}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9462511446886452,"seconds":6.161630153656006e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.6875,"distances_sum":2356.0211793567146}, best_list's length: 15, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9550080128205133,"seconds":6.018206477165222e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.7421875,"distances_sum":2417.364193804887}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.919921875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9550080128205133,"seconds":6.018206477165222e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.7421875,"distances_sum":2417.364193804887}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.162109375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.162109375,"f1":null,"seconds":2.944841980934143e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":5.09375,"distances_sum":439.62518193385904}}, beam: 1, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.162109375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.162109375,"f1":null,"seconds":2.944841980934143e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":5.09375,"distances_sum":439.62518193385904}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.521484375, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.521484375,"f1":0.6688178141303146,"seconds":4.295259714126587e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.875,"distances_sum":880.4488610403877}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.21875,"f1":null,"seconds":3.0640512704849243e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":6.6015625,"distances_sum":338.6372560248149}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.521484375,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.521484375,"f1":0.6688178141303146,"seconds":4.295259714126587e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.875,"distances_sum":880.4488610403877}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.8018890831390839,"seconds":4.677101969718933e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.1875,"distances_sum":1170.032732105077}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.68359375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.68359375,"f1":0.8018890831390839,"seconds":4.677101969718933e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.1875,"distances_sum":1170.032732105077}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9390885156510163,"seconds":5.418434739112854e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.734375,"distances_sum":1881.0849486714926}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9329358141858147,"seconds":5.370005965232849e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.6875,"distances_sum":1804.690448204611}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":11,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8643403471528481,"seconds":5.010515451431274e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.3984375,"distances_sum":1441.0363239854162}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.9020489926739936,"seconds":5.142763257026672e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.421875,"distances_sum":1633.5383470315785}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.89453125,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.9390885156510163,"seconds":5.418434739112854e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.734375,"distances_sum":1881.0849486714926}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.89453125,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.9390885156510163,"seconds":5.418434739112854e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.734375,"distances_sum":1881.0849486714926}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.517578125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.517578125,"f1":0.6638512529137534,"seconds":4.019588232040405e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.328125,"distances_sum":1020.8907258253223}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.400390625, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.400390625,"f1":null,"seconds":3.3266842365264893e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.21875,"distances_sum":831.8335460902929}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3779296875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3779296875,"f1":null,"seconds":3.334134817123413e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":5.9375,"distances_sum":767.3077156398757}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.517578125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.517578125,"f1":0.6638512529137534,"seconds":4.019588232040405e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.328125,"distances_sum":1020.8907258253223}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.792666708291709,"seconds":4.392117261886597e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.0859375,"distances_sum":1478.986306523494}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.525390625, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.525390625,"f1":null,"seconds":3.933906555175781e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.2734375,"distances_sum":1084.0915131411605}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9129979395604402,"seconds":5.345791578292847e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.609375,"distances_sum":2043.673639912549}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.937196657509158,"seconds":5.276873707771301e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.7265625,"distances_sum":2164.694660915202}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7998046875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7998046875,"f1":0.8802203005328014,"seconds":4.913657903671265e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.4921875,"distances_sum":1842.6592960659489}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5283203125, conf: {"ssize":9,"bsize":3}, perf: {"precision":null,"recall":0.5283203125,"f1":null,"seconds":4.027038812637329e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.2734375,"distances_sum":1063.8390143618878}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5390625, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5390625,"f1":0.6869300838050844,"seconds":3.905966877937317e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.3125,"distances_sum":1145.3027663481796}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.890625,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.890625,"f1":0.937196657509158,"seconds":5.276873707771301e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.7265625,"distances_sum":2164.694660915202}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9692536630036636,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8671875,"distances_sum":2369.1301512509517}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9625057234432238,"seconds":5.545094609260559e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8984375,"distances_sum":2336.3742961577436}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9637133699633705,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.859375,"distances_sum":2357.494055597977}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9632841117216122,"seconds":5.662441253662109e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.875,"distances_sum":2334.896538930942}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9674679487179492,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8984375,"distances_sum":2390.9257568368616}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9692536630036636,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8671875,"distances_sum":2369.1301512509517}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9692536630036636,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8671875,"distances_sum":2369.1301512509517}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.236328125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.236328125,"f1":null,"seconds":2.8926879167556763e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":5.703125,"distances_sum":485.77614920751404}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7794497169497175,"seconds":4.351139068603516e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.6015625,"distances_sum":1516.8453480797016}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6572265625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6572265625,"f1":0.7794497169497175,"seconds":4.351139068603516e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.6015625,"distances_sum":1516.8453480797016}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7353515625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7353515625,"f1":0.8369292166167173,"seconds":4.652887582778931e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.9765625,"distances_sum":1791.0306411873776}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8935533216783226,"seconds":4.906207323074341e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.2890625,"distances_sum":2106.0368816957866}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.943486721611722,"seconds":5.243346095085144e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.6796875,"distances_sum":2469.7971950543}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8547821969696978,"seconds":4.712492227554321e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.1484375,"distances_sum":1844.8811929316926}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.943486721611722,"seconds":5.243346095085144e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.6796875,"distances_sum":2469.7971950543}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9684924450549456,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8515625,"distances_sum":2615.1327938888135}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9543956043956048,"seconds":5.37186861038208e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.78125,"distances_sum":2525.390154771676}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9684924450549456,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8515625,"distances_sum":2615.1327938888135}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9684924450549456,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8515625,"distances_sum":2615.1327938888135}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.65625,"f1":0.7785925879675888,"seconds":4.159286618232727e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":7.2265625,"distances_sum":1642.2076185868414}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1875,"f1":null,"seconds":2.678483724594116e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":4.6015625,"distances_sum":463.9923557574346}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4853515625, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.4853515625,"f1":0.6371926684426689,"seconds":3.7942081689834595e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":6.2578125,"distances_sum":1197.7314007578336}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.65625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.65625,"f1":0.7785925879675888,"seconds":4.159286618232727e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":7.2265625,"distances_sum":1642.2076185868414}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9525183150183154,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.71875,"distances_sum":2649.4179111047206}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9259443681318686,"seconds":4.973262548446655e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.375,"distances_sum":2395.69811689436}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":9,"bsize":4}, perf: {"precision":1.0,"recall":0.6669921875,"f1":0.7879968989343997,"seconds":4.179775714874268e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":7.328125,"distances_sum":1694.7023970826588}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9181412337662347,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.34375,"distances_sum":2361.0938095874526}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9525183150183154,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.71875,"distances_sum":2649.4179111047206}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.95604967948718,"seconds":5.288049578666687e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.7265625,"distances_sum":2660.113251762751}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9646806318681324,"seconds":5.370005965232849e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.8203125,"distances_sum":2684.8388578051417}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":9,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9646806318681324,"seconds":5.370005965232849e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.8203125,"distances_sum":2684.8388578051417}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":9,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9646806318681324,"seconds":5.370005965232849e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.8203125,"distances_sum":2684.8388578051417}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.7839192057942066,"seconds":4.375353455543518e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.7890625,"distances_sum":1682.0534624108204}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7871491355866364,"seconds":4.500150680541992e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.0,"distances_sum":1670.4947238401244}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3271484375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3271484375,"f1":null,"seconds":3.0510127544403076e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":5.7109375,"distances_sum":797.8499334243232}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6708984375,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6708984375,"f1":0.7871491355866364,"seconds":4.500150680541992e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.0,"distances_sum":1670.4947238401244}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9356341575091581,"seconds":5.258247256278992e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.484375,"distances_sum":2514.095959123382}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9434065934065938,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.65625,"distances_sum":2574.751221770027}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9209680944055952,"seconds":5.319714546203613e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.453125,"distances_sum":2422.8046896798055}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8671427530802536,"seconds":4.902482032775879e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.21875,"distances_sum":2111.0560081113063}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9016582375957385,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.390625,"distances_sum":2278.6352714523096}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.900390625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.900390625,"f1":0.9434065934065938,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.65625,"distances_sum":2574.751221770027}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9797447344322345,"seconds":6.167218089103699e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.921875,"distances_sum":2821.0544544912595}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.945449862637363,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.65625,"distances_sum":2589.750465994573}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9504922161172167,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.7265625,"distances_sum":2618.258524948413}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9483173076923085,"seconds":6.062909960746765e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.7109375,"distances_sum":2593.6185320340996}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9615930944055948,"seconds":6.0927122831344604e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.7578125,"distances_sum":2705.4343487778783}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9570226648351655,"seconds":6.185844540596008e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8125,"distances_sum":2649.2737928716915}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9797447344322345,"seconds":6.167218089103699e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.921875,"distances_sum":2821.0544544912595}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9797447344322345,"seconds":6.167218089103699e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.921875,"distances_sum":2821.0544544912595}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.248046875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.248046875,"f1":null,"seconds":3.606081008911133e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":6.171875,"distances_sum":527.1631127384718}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6845703125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6845703125,"f1":0.8015817515817524,"seconds":5.016103386878967e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.0703125,"distances_sum":1745.903551480866}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6845703125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6845703125,"f1":0.8015817515817524,"seconds":5.016103386878967e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.0703125,"distances_sum":1745.903551480866}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8800626456876464,"seconds":5.651265382766724e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.3203125,"distances_sum":2165.053126147774}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8583984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8583984375,"f1":0.9158659049284056,"seconds":6.1746686697006226e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.4609375,"distances_sum":2393.9519462849867}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8095703125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.8095703125,"f1":0.8841611513486521,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.390625,"distances_sum":2164.3012718349514}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8583984375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8583984375,"f1":0.9158659049284056,"seconds":6.1746686697006226e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.4609375,"distances_sum":2393.9519462849867}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9650526556776562,"seconds":6.316229701042175e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8359375,"distances_sum":2748.95225156783}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9510473901098908,"seconds":5.649402737617493e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8046875,"distances_sum":2606.890896272245}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9650526556776562,"seconds":6.316229701042175e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8359375,"distances_sum":2748.95225156783}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9650526556776562,"seconds":6.316229701042175e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8359375,"distances_sum":2748.95225156783}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.7939284673659681,"seconds":4.451721906661987e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.7890625,"distances_sum":1658.163886698373}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.671875,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.671875,"f1":0.7939284673659681,"seconds":4.451721906661987e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.7890625,"distances_sum":1658.163886698373}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.942141712454213,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.640625,"distances_sum":2562.6893710174513}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8974609375,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.8974609375,"f1":0.942141712454213,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.640625,"distances_sum":2562.6893710174513}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9676339285714292,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.84375,"distances_sum":2719.1272347077384}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9690132783882788,"seconds":6.020069122314453e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.890625,"distances_sum":2730.0610138146785}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9690132783882788,"seconds":6.020069122314453e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.890625,"distances_sum":2730.0610138146785}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9690132783882788,"seconds":6.020069122314453e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.890625,"distances_sum":2730.0610138146785}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5322265625, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.5322265625,"f1":null,"seconds":4.0940940380096436e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":6.859375,"distances_sum":1408.2914050954178}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3017578125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3017578125,"f1":null,"seconds":3.3993273973464966e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":5.359375,"distances_sum":769.6860807468684}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5322265625,"state":{"ssize":5,"bsize":3},"perf":{"precision":null,"recall":0.5322265625,"f1":null,"seconds":4.0940940380096436e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":6.859375,"distances_sum":1408.2914050954178}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6337890625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6337890625,"f1":0.7633892149517156,"seconds":4.332512617111206e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":7.40625,"distances_sum":1654.7155931289333}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8644641816516825,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.1953125,"distances_sum":2055.2192446728673}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7822265625,"state":{"ssize":6,"bsize":5},"perf":{"precision":1.0,"recall":0.7822265625,"f1":0.8644641816516825,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.1953125,"distances_sum":2055.2192446728673}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9353708791208798,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.5078125,"distances_sum":2507.9496337639125}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.896668956043957,"seconds":5.248934030532837e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.3671875,"distances_sum":2259.453939526185}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9575950091575096,"seconds":5.6158751249313354e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.78125,"distances_sum":2680.7334554559707}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9352314352314356,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.609375,"distances_sum":2519.537978656869}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9181896228771235,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.5703125,"distances_sum":2346.9920766725204}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9575950091575096,"seconds":5.6158751249313354e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.78125,"distances_sum":2680.7334554559707}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.923828125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9575950091575096,"seconds":5.6158751249313354e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.78125,"distances_sum":2680.7334554559707}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.578125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.578125,"f1":0.717860091297592,"seconds":4.2729079723358154e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":7.3203125,"distances_sum":965.8634552775102}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.248046875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.248046875,"f1":null,"seconds":3.3620744943618774e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":5.8828125,"distances_sum":429.26082050301505}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.578125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.578125,"f1":0.717860091297592,"seconds":4.2729079723358154e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":7.3203125,"distances_sum":965.8634552775102}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8705112595737603,"seconds":5.243346095085144e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.3203125,"distances_sum":1362.356171096835}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.818359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.818359375,"f1":0.8947802197802209,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.5234375,"distances_sum":1435.7311381759043}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.818359375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.818359375,"f1":0.8947802197802209,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.5234375,"distances_sum":1435.7311381759043}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9427744130869137,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.6171875,"distances_sum":1671.552026376969}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8994140625,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8994140625,"f1":0.9427744130869137,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.6171875,"distances_sum":1671.552026376969}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8994140625,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8994140625,"f1":0.9427744130869137,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.6171875,"distances_sum":1671.552026376969}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21484375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.21484375,"f1":null,"seconds":2.9634684324264526e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":4.9765625,"distances_sum":340.12985472435014}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2177734375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2177734375,"f1":null,"seconds":3.1851232051849365e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":5.0234375,"distances_sum":306.45663743030985}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.21875,"f1":null,"seconds":2.989545464515686e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":4.84375,"distances_sum":296.52536525987654}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.21875,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.21875,"f1":null,"seconds":2.989545464515686e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":4.84375,"distances_sum":296.52536525987654}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8716065184815194,"seconds":5.0924718379974365e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.1015625,"distances_sum":1304.763156704449}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8632440476190485,"seconds":5.038455128669739e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.0703125,"distances_sum":1255.4589770730686}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6689453125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6689453125,"f1":0.7907524766899774,"seconds":4.770234227180481e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":7.703125,"distances_sum":1035.3682998468767}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.220703125, conf: {"ssize":6,"bsize":1}, perf: {"precision":null,"recall":0.220703125,"f1":null,"seconds":3.127381205558777e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":5.015625,"distances_sum":319.712537723777}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.568359375,"f1":0.7060377122877128,"seconds":4.159286618232727e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":6.8828125,"distances_sum":855.7459200794596}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78515625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.78515625,"f1":0.8716065184815194,"seconds":5.0924718379974365e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.1015625,"distances_sum":1304.763156704449}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9276447510822518,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.421875,"distances_sum":1523.1245365028428}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9175912629037636,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.546875,"distances_sum":1468.601601725509}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9316334706959711,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.453125,"distances_sum":1564.2637627969657}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9505494505494511,"seconds":5.662441253662109e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.7265625,"distances_sum":1634.379526569076}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9382898351648357,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.46875,"distances_sum":1565.4686999250578}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9505494505494511,"seconds":5.662441253662109e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.7265625,"distances_sum":1634.379526569076}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9130859375,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9505494505494511,"seconds":5.662441253662109e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.7265625,"distances_sum":1634.379526569076}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5654296875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5654296875,"f1":0.7053767413142419,"seconds":4.040077328681946e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.7109375,"distances_sum":966.6240658086157}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5654296875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5654296875,"f1":0.7053767413142419,"seconds":4.040077328681946e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.7109375,"distances_sum":966.6240658086157}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.880801490176491,"seconds":5.29363751411438e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.1328125,"distances_sum":1447.6733905157296}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9067713536463544,"seconds":5.386769771575928e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.2578125,"distances_sum":1550.5918980196657}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.666015625,"f1":0.7878288378288386,"seconds":4.777684807777405e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.375,"distances_sum":1126.8897070320468}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8527451714951725,"seconds":5.202367901802063e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.921875,"distances_sum":1322.0816379650757}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8422119547119555,"seconds":5.0924718379974365e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.734375,"distances_sum":1323.871269564205}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7275390625, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7275390625,"f1":0.8320929070929081,"seconds":4.978850483894348e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.71875,"distances_sum":1253.3347068956955}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6591796875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6591796875,"f1":0.7828067765567774,"seconds":4.51505184173584e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.3046875,"distances_sum":1127.912230414838}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.83984375,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.83984375,"f1":0.9067713536463544,"seconds":5.386769771575928e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.2578125,"distances_sum":1550.5918980196657}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9531822344322349,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7265625,"distances_sum":1811.5858285280658}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9429201007326015,"seconds":5.474314093589783e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.6796875,"distances_sum":1744.0380311768267}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.949339202464203,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7421875,"distances_sum":1771.0194327771299}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9531822344322349,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7265625,"distances_sum":1811.5858285280658}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9169921875,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9531822344322349,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7265625,"distances_sum":1811.5858285280658}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5546875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5546875,"f1":0.697137931512932,"seconds":4.108995199203491e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.0390625,"distances_sum":880.1048792518385}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.7981077949827958,"seconds":4.639849066734314e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.5390625,"distances_sum":1180.8270105135043}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6865234375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6865234375,"f1":0.7981077949827958,"seconds":4.639849066734314e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.5390625,"distances_sum":1180.8270105135043}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9527586996337001,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8203125,"distances_sum":1727.878182404698}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9070772977022983,"seconds":5.425885319709778e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.4765625,"distances_sum":1546.0285935267887}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9527586996337001,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8203125,"distances_sum":1727.878182404698}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9640682234432237,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8671875,"distances_sum":1823.1347080345583}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9624484890109894,"seconds":5.956739187240601e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.84375,"distances_sum":1796.3839550173302}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9688103563103567,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8984375,"distances_sum":1836.8097706209237}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9688103563103567,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8984375,"distances_sum":1836.8097706209237}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9453125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9688103563103567,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8984375,"distances_sum":1836.8097706209237}}, n: 9
mean(cfft.distances) = 1.1661038500649843
mean(cdnet.distances) = 0.36672570699813534
mean(crand.distances) = 0.3525027021678378
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8911111111111111
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8555555555555555
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.9022222222222221
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8644444444444445
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9111111111111111
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8644444444444445
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9066666666666667
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8555555555555555
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9333333333333332
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9222222222222222
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.928888888888889
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9288888888888889
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8488888888888889
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8711111111111111
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9066666666666666
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8688888888888888
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9266666666666667
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9222222222222222
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8911111111111111
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9111111111111111
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9155555555555556
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8911111111111111
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8844444444444445
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9066666666666667
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9088888888888889
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 1, 3]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 1, 3]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.5988057625293731] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 30, 3]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(2, 30), (3, 3)]
*** center 2: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 11, 2]]
** centroid: 7, normalized-entropy: 0.6193821946787638, [(2, 11), (3, 2)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 10, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
finished with 14 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.21045862014234826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21045862014234826, 0.19794034691493925] ***
*** starting iteration: 2; err: [Inf, 0.21045862014234826, 0.19794034691493925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21045862014234826, 0.19794034691493925, 0.19389920920279022] ***
*** starting iteration: 3; err: [Inf, 0.21045862014234826, 0.19794034691493925, 0.19389920920279022] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21045862014234826, 0.19794034691493925, 0.19389920920279022, 0.19080454533410682] ***
*** finished computation of 7 references, err: [Inf, 0.21045862014234826, 0.19794034691493925, 0.19389920920279022, 0.19080454533410682] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 57, 20]]
** centroid: 1, normalized-entropy: 0.8263541679009075, [(2, 57), (3, 20)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 54, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [64, 25, 0]]
** centroid: 4, normalized-entropy: 0.8566727035015875, [(1, 64), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [91, 37, 0]]
** centroid: 5, normalized-entropy: 0.8675071344816212, [(1, 91), (2, 37)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [38, 55, 0]]
** centroid: 6, normalized-entropy: 0.9757606417025202, [(1, 38), (2, 55)]
*** center 7: selecting labels [1] (freq >= 1) [from [141, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.35437392347144603] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35437392347144603, 0.22020016192574463] ***
*** starting iteration: 2; err: [Inf, 0.35437392347144603, 0.22020016192574463] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35437392347144603, 0.22020016192574463, 0.20220255806156875] ***
*** starting iteration: 3; err: [Inf, 0.35437392347144603, 0.22020016192574463, 0.20220255806156875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35437392347144603, 0.22020016192574463, 0.20220255806156875, 0.1989890429242954] ***
*** finished computation of 7 references, err: [Inf, 0.35437392347144603, 0.22020016192574463, 0.20220255806156875, 0.1989890429242954] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [63, 33, 0]]
** centroid: 1, normalized-entropy: 0.9283620723948678, [(1, 63), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [78, 21, 0]]
** centroid: 2, normalized-entropy: 0.7455178428108284, [(1, 78), (2, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [107, 3, 0]]
** centroid: 4, normalized-entropy: 0.1805246676420577, [(1, 107), (2, 3)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 69, 20]]
** centroid: 5, normalized-entropy: 0.7686913027030167, [(2, 69), (3, 20)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 83, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [29, 39, 0]]
** centroid: 7, normalized-entropy: 0.9843432030984676, [(1, 29), (2, 39)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2898039563190376] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2898039563190376, 0.22404015973081876] ***
*** starting iteration: 2; err: [Inf, 0.2898039563190376, 0.22404015973081876] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2898039563190376, 0.22404015973081876, 0.20361281210218726] ***
*** starting iteration: 3; err: [Inf, 0.2898039563190376, 0.22404015973081876, 0.20361281210218726] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2898039563190376, 0.22404015973081876, 0.20361281210218726, 0.1978602616885758] ***
*** finished computation of 7 references, err: [Inf, 0.2898039563190376, 0.22404015973081876, 0.20361281210218726, 0.1978602616885758] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 70, 17]]
** centroid: 1, normalized-entropy: 0.7126368350739763, [(2, 70), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [15, 67, 0]]
** centroid: 3, normalized-entropy: 0.6864381668766382, [(1, 15), (2, 67)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [78, 22, 0]]
** centroid: 4, normalized-entropy: 0.7601675029619658, [(1, 78), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [95, 2, 0]]
** centroid: 5, normalized-entropy: 0.14489961753310668, [(1, 95), (2, 2)]
*** center 6: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 95, 5]]
** centroid: 7, normalized-entropy: 0.2863969571159561, [(2, 95), (3, 5)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28008421681619977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28008421681619977, 0.22293161535244044] ***
*** starting iteration: 2; err: [Inf, 0.28008421681619977, 0.22293161535244044] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28008421681619977, 0.22293161535244044, 0.20685510974455704] ***
*** starting iteration: 3; err: [Inf, 0.28008421681619977, 0.22293161535244044, 0.20685510974455704] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28008421681619977, 0.22293161535244044, 0.20685510974455704, 0.19982659095456382] ***
*** finished computation of 7 references, err: [Inf, 0.28008421681619977, 0.22293161535244044, 0.20685510974455704, 0.19982659095456382] ***
*** center 1: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 95, 20]]
** centroid: 2, normalized-entropy: 0.6665783579949205, [(2, 95), (3, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [20, 65, 0]]
** centroid: 4, normalized-entropy: 0.787126586201269, [(1, 20), (2, 65)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [110, 39, 0]]
** centroid: 5, normalized-entropy: 0.8293681511779988, [(1, 110), (2, 39)]
*** center 6: selecting labels [1] (freq >= 2) [from [146, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [31, 29, 0]]
** centroid: 7, normalized-entropy: 0.99919835426364, [(1, 31), (2, 29)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25814697308733925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25814697308733925, 0.20827405778565508] ***
*** starting iteration: 2; err: [Inf, 0.25814697308733925, 0.20827405778565508] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25814697308733925, 0.20827405778565508, 0.20021668377275142] ***
*** starting iteration: 3; err: [Inf, 0.25814697308733925, 0.20827405778565508, 0.20021668377275142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25814697308733925, 0.20827405778565508, 0.20021668377275142, 0.19681588145087417] ***
*** finished computation of 7 references, err: [Inf, 0.25814697308733925, 0.20827405778565508, 0.20021668377275142, 0.19681588145087417] ***
*** center 1: selecting labels [1] (freq >= 2) [from [112, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [8, 89, 0]]
** centroid: 2, normalized-entropy: 0.4108378385169277, [(1, 8), (2, 89)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [24, 59, 0]]
** centroid: 3, normalized-entropy: 0.8676293117125105, [(1, 24), (2, 59)]
*** center 4: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 2, 0]]
** centroid: 5, normalized-entropy: 0.1914332548141934, [(1, 66), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [101, 34, 0]]
** centroid: 6, normalized-entropy: 0.8142000684549584, [(1, 101), (2, 34)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 64, 20]]
** centroid: 7, normalized-entropy: 0.7918583525674836, [(2, 64), (3, 20)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2647689846899316] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2647689846899316, 0.1978485512587687] ***
*** starting iteration: 2; err: [Inf, 0.2647689846899316, 0.1978485512587687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2647689846899316, 0.1978485512587687, 0.1936305868544098] ***
*** starting iteration: 3; err: [Inf, 0.2647689846899316, 0.1978485512587687, 0.1936305868544098] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2647689846899316, 0.1978485512587687, 0.1936305868544098, 0.19146102711256743] ***
*** finished computation of 7 references, err: [Inf, 0.2647689846899316, 0.1978485512587687, 0.1936305868544098, 0.19146102711256743] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [102, 27, 0]]
** centroid: 1, normalized-entropy: 0.7401470427139037, [(1, 102), (2, 27)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 65, 1]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 44, 0]]
** centroid: 3, normalized-entropy: 0.984646826868755, [(1, 59), (2, 44)]
*** center 4: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 54, 21]]
** centroid: 6, normalized-entropy: 0.8554508105601307, [(2, 54), (3, 21)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [37, 66, 0]]
** centroid: 7, normalized-entropy: 0.9420365814945866, [(1, 37), (2, 66)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3717898259403648] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3717898259403648, 0.33877833670581337] ***
*** starting iteration: 2; err: [Inf, 0.3717898259403648, 0.33877833670581337] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3717898259403648, 0.33877833670581337, 0.32993292388179013] ***
*** starting iteration: 3; err: [Inf, 0.3717898259403648, 0.33877833670581337, 0.32993292388179013] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3717898259403648, 0.33877833670581337, 0.32993292388179013, 0.32809439840986654] ***
*** finished computation of 3 references, err: [Inf, 0.3717898259403648, 0.33877833670581337, 0.32993292388179013, 0.32809439840986654] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [159, 44, 0]]
** centroid: 1, normalized-entropy: 0.754186256543533, [(1, 159), (2, 44)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [67, 156, 20]]
** centroid: 2, normalized-entropy: 0.769423130450644, [(1, 67), (2, 156), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [192, 28, 0]]
** centroid: 3, normalized-entropy: 0.54991090463341, [(1, 192), (2, 28)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4083306485482644] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4083306485482644, 0.3006492147761128] ***
*** starting iteration: 2; err: [Inf, 0.4083306485482644, 0.3006492147761128] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4083306485482644, 0.3006492147761128, 0.29916777781795884] ***
*** starting iteration: 3; err: [Inf, 0.4083306485482644, 0.3006492147761128, 0.29916777781795884] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4083306485482644, 0.3006492147761128, 0.29916777781795884, 0.29911022943010307] ***
*** finished computation of 3 references, err: [Inf, 0.4083306485482644, 0.3006492147761128, 0.29916777781795884, 0.29911022943010307] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [118, 93, 0]]
** centroid: 1, normalized-entropy: 0.9898496661586345, [(1, 118), (2, 93)]
*** center 2: selecting labels [1] (freq >= 2) [from [194, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [87, 155, 20]]
** centroid: 3, normalized-entropy: 0.7946413291343833, [(1, 87), (2, 155), (3, 20)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.47954138182103634] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47954138182103634, 0.3389067134025438] ***
*** starting iteration: 2; err: [Inf, 0.47954138182103634, 0.3389067134025438] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47954138182103634, 0.3389067134025438, 0.3045249094403275] ***
*** starting iteration: 3; err: [Inf, 0.47954138182103634, 0.3389067134025438, 0.3045249094403275] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47954138182103634, 0.3389067134025438, 0.3045249094403275, 0.2953137072945374] ***
*** finished computation of 3 references, err: [Inf, 0.47954138182103634, 0.3389067134025438, 0.3045249094403275, 0.2953137072945374] ***
*** center 1: selecting labels [1] (freq >= 2) [from [213, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [58, 169, 22]]
** centroid: 2, normalized-entropy: 0.7434872745360314, [(1, 58), (2, 169), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [118, 87, 0]]
** centroid: 3, normalized-entropy: 0.9834412509028283, [(1, 118), (2, 87)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4641328477622331] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4641328477622331, 0.30816490367871596] ***
*** finished computation of 3 references, err: [Inf, 0.4641328477622331, 0.30816490367871596] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [108, 80, 0]]
** centroid: 1, normalized-entropy: 0.9839393951635759, [(1, 108), (2, 80)]
*** center 2: selecting labels [1] (freq >= 2) [from [170, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [140, 148, 20]]
** centroid: 3, normalized-entropy: 0.8083950775011064, [(1, 140), (2, 148), (3, 20)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3306962053292896] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3306962053292896, 0.30541066167878916] ***
*** finished computation of 3 references, err: [Inf, 0.3306962053292896, 0.30541066167878916] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [82, 160, 20]]
** centroid: 1, normalized-entropy: 0.7838230689863435, [(1, 82), (2, 160), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [144, 88, 0]]
** centroid: 2, normalized-entropy: 0.9575534837147484, [(1, 144), (2, 88)]
*** center 3: selecting labels [1] (freq >= 2) [from [173, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.45178647194688826] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45178647194688826, 0.3628467606643084] ***
*** finished computation of 3 references, err: [Inf, 0.45178647194688826, 0.3628467606643084] ***
*** center 1: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [127, 239, 22]]
** centroid: 2, normalized-entropy: 0.7525440081561536, [(1, 127), (2, 239), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [147, 17, 0]]
** centroid: 3, normalized-entropy: 0.4804867424705144, [(1, 147), (2, 17)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.29504603962204207] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29504603962204207, 0.23830560852379143] ***
*** starting iteration: 2; err: [Inf, 0.29504603962204207, 0.23830560852379143] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29504603962204207, 0.23830560852379143, 0.23628658491995064] ***
*** starting iteration: 3; err: [Inf, 0.29504603962204207, 0.23830560852379143, 0.23628658491995064] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29504603962204207, 0.23830560852379143, 0.23628658491995064, 0.23592617743097627] ***
*** finished computation of 3 references, err: [Inf, 0.29504603962204207, 0.23830560852379143, 0.23628658491995064, 0.23592617743097627] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [108, 94, 0]]
** centroid: 1, normalized-entropy: 0.9965322634876737, [(1, 108), (2, 94)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [85, 134, 20]]
** centroid: 2, normalized-entropy: 0.8189268207623492, [(1, 85), (2, 134), (3, 20)]
*** center 3: selecting labels [1] (freq >= 1) [from [225, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.32142535373819864] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32142535373819864, 0.24405313716332863] ***
*** starting iteration: 2; err: [Inf, 0.32142535373819864, 0.24405313716332863] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32142535373819864, 0.24405313716332863, 0.23932057986317992] ***
*** starting iteration: 3; err: [Inf, 0.32142535373819864, 0.24405313716332863, 0.23932057986317992] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32142535373819864, 0.24405313716332863, 0.23932057986317992, 0.2379277976553725] ***
*** finished computation of 3 references, err: [Inf, 0.32142535373819864, 0.24405313716332863, 0.23932057986317992, 0.2379277976553725] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [102, 145, 15]]
** centroid: 1, normalized-entropy: 0.7813878718029931, [(1, 102), (2, 145), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [197, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [100, 103, 5]]
** centroid: 3, normalized-entropy: 0.7188554191519265, [(1, 100), (2, 103), (3, 5)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31665832657545717] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31665832657545717, 0.2330984732832877] ***
*** starting iteration: 2; err: [Inf, 0.31665832657545717, 0.2330984732832877] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31665832657545717, 0.2330984732832877, 0.23033612387986488] ***
*** starting iteration: 3; err: [Inf, 0.31665832657545717, 0.2330984732832877, 0.23033612387986488] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31665832657545717, 0.2330984732832877, 0.23033612387986488, 0.22963516050223623] ***
*** finished computation of 3 references, err: [Inf, 0.31665832657545717, 0.2330984732832877, 0.23033612387986488, 0.22963516050223623] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [76, 184, 22]]
** centroid: 1, normalized-entropy: 0.7563731197220324, [(1, 76), (2, 184), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [194, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [119, 72, 0]]
** centroid: 3, normalized-entropy: 0.9558690692007135, [(1, 119), (2, 72)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2118656167693369] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2118656167693369, 0.16864705796132576] ***
*** starting iteration: 2; err: [Inf, 0.2118656167693369, 0.16864705796132576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2118656167693369, 0.16864705796132576, 0.15866298978174995] ***
*** starting iteration: 3; err: [Inf, 0.2118656167693369, 0.16864705796132576, 0.15866298978174995] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2118656167693369, 0.16864705796132576, 0.15866298978174995, 0.15511704083705494] ***
*** starting iteration: 4; err: [Inf, 0.2118656167693369, 0.16864705796132576, 0.15866298978174995, 0.15511704083705494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2118656167693369, 0.16864705796132576, 0.15866298978174995, 0.15511704083705494, 0.1518966786440339] ***
*** starting iteration: 5; err: [Inf, 0.2118656167693369, 0.16864705796132576, 0.15866298978174995, 0.15511704083705494, 0.1518966786440339] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2118656167693369, 0.16864705796132576, 0.15866298978174995, 0.15511704083705494, 0.1518966786440339, 0.1495157064500827] ***
*** starting iteration: 6; err: [Inf, 0.2118656167693369, 0.16864705796132576, 0.15866298978174995, 0.15511704083705494, 0.1518966786440339, 0.1495157064500827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2118656167693369, 0.16864705796132576, 0.15866298978174995, 0.15511704083705494, 0.1518966786440339, 0.1495157064500827, 0.14775629024868747] ***
*** starting iteration: 7; err: [Inf, 0.2118656167693369, 0.16864705796132576, 0.15866298978174995, 0.15511704083705494, 0.1518966786440339, 0.1495157064500827, 0.14775629024868747] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2118656167693369, 0.16864705796132576, 0.15866298978174995, 0.15511704083705494, 0.1518966786440339, 0.1495157064500827, 0.14775629024868747, 0.14668154180247067] ***
*** starting iteration: 8; err: [Inf, 0.2118656167693369, 0.16864705796132576, 0.15866298978174995, 0.15511704083705494, 0.1518966786440339, 0.1495157064500827, 0.14775629024868747, 0.14668154180247067] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2118656167693369, 0.16864705796132576, 0.15866298978174995, 0.15511704083705494, 0.1518966786440339, 0.1495157064500827, 0.14775629024868747, 0.14668154180247067, 0.14641418530222577] ***
*** finished computation of 7 references, err: [Inf, 0.2118656167693369, 0.16864705796132576, 0.15866298978174995, 0.15511704083705494, 0.1518966786440339, 0.1495157064500827, 0.14775629024868747, 0.14668154180247067, 0.14641418530222577] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [60, 31, 0]]
** centroid: 1, normalized-entropy: 0.9254482516437047, [(1, 60), (2, 31)]
*** center 2: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [36, 55, 0]]
** centroid: 3, normalized-entropy: 0.9683211863989214, [(1, 36), (2, 55)]
*** center 4: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [23, 63, 0]]
** centroid: 5, normalized-entropy: 0.8377698690066789, [(1, 23), (2, 63)]
*** center 6: selecting labels [1] (freq >= 2) [from [112, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 79, 20]]
** centroid: 7, normalized-entropy: 0.7259501452943735, [(2, 79), (3, 20)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.192288584397712] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.192288584397712, 0.17013022228810137] ***
*** starting iteration: 2; err: [Inf, 0.192288584397712, 0.17013022228810137] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.192288584397712, 0.17013022228810137, 0.16185862641094595] ***
*** starting iteration: 3; err: [Inf, 0.192288584397712, 0.17013022228810137, 0.16185862641094595] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.192288584397712, 0.17013022228810137, 0.16185862641094595, 0.15639704006278646] ***
*** starting iteration: 4; err: [Inf, 0.192288584397712, 0.17013022228810137, 0.16185862641094595, 0.15639704006278646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.192288584397712, 0.17013022228810137, 0.16185862641094595, 0.15639704006278646, 0.1534932831461462] ***
*** starting iteration: 5; err: [Inf, 0.192288584397712, 0.17013022228810137, 0.16185862641094595, 0.15639704006278646, 0.1534932831461462] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.192288584397712, 0.17013022228810137, 0.16185862641094595, 0.15639704006278646, 0.1534932831461462, 0.15236541219446612] ***
*** starting iteration: 6; err: [Inf, 0.192288584397712, 0.17013022228810137, 0.16185862641094595, 0.15639704006278646, 0.1534932831461462, 0.15236541219446612] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.192288584397712, 0.17013022228810137, 0.16185862641094595, 0.15639704006278646, 0.1534932831461462, 0.15236541219446612, 0.15177755906613827] ***
*** finished computation of 7 references, err: [Inf, 0.192288584397712, 0.17013022228810137, 0.16185862641094595, 0.15639704006278646, 0.1534932831461462, 0.15236541219446612, 0.15177755906613827] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [44, 65, 0]]
** centroid: 1, normalized-entropy: 0.973056810401783, [(1, 44), (2, 65)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [69, 7, 0]]
** centroid: 2, normalized-entropy: 0.4434581453896789, [(1, 69), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [88, 3, 0]]
** centroid: 3, normalized-entropy: 0.20905980566852464, [(1, 88), (2, 3)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 88, 20]]
** centroid: 4, normalized-entropy: 0.6912898694057888, [(2, 88), (3, 20)]
*** center 5: selecting labels [1] (freq >= 2) [from [84, 1, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [112, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 84, 0]]
** centroid: 7, normalized-entropy: 0.15935006268563429, [(1, 2), (2, 84)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.25593366972038123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25593366972038123, 0.1669247471699505] ***
*** starting iteration: 2; err: [Inf, 0.25593366972038123, 0.1669247471699505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25593366972038123, 0.1669247471699505, 0.15572900840987464] ***
*** starting iteration: 3; err: [Inf, 0.25593366972038123, 0.1669247471699505, 0.15572900840987464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25593366972038123, 0.1669247471699505, 0.15572900840987464, 0.15207835391716756] ***
*** starting iteration: 4; err: [Inf, 0.25593366972038123, 0.1669247471699505, 0.15572900840987464, 0.15207835391716756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25593366972038123, 0.1669247471699505, 0.15572900840987464, 0.15207835391716756, 0.15062003437013574] ***
*** starting iteration: 5; err: [Inf, 0.25593366972038123, 0.1669247471699505, 0.15572900840987464, 0.15207835391716756, 0.15062003437013574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25593366972038123, 0.1669247471699505, 0.15572900840987464, 0.15207835391716756, 0.15062003437013574, 0.14953916411737966] ***
*** starting iteration: 6; err: [Inf, 0.25593366972038123, 0.1669247471699505, 0.15572900840987464, 0.15207835391716756, 0.15062003437013574, 0.14953916411737966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25593366972038123, 0.1669247471699505, 0.15572900840987464, 0.15207835391716756, 0.15062003437013574, 0.14953916411737966, 0.14846605081055342] ***
*** starting iteration: 7; err: [Inf, 0.25593366972038123, 0.1669247471699505, 0.15572900840987464, 0.15207835391716756, 0.15062003437013574, 0.14953916411737966, 0.14846605081055342] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25593366972038123, 0.1669247471699505, 0.15572900840987464, 0.15207835391716756, 0.15062003437013574, 0.14953916411737966, 0.14846605081055342, 0.1472867842082275] ***
*** starting iteration: 8; err: [Inf, 0.25593366972038123, 0.1669247471699505, 0.15572900840987464, 0.15207835391716756, 0.15062003437013574, 0.14953916411737966, 0.14846605081055342, 0.1472867842082275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25593366972038123, 0.1669247471699505, 0.15572900840987464, 0.15207835391716756, 0.15062003437013574, 0.14953916411737966, 0.14846605081055342, 0.1472867842082275, 0.14642972634152984] ***
*** finished computation of 7 references, err: [Inf, 0.25593366972038123, 0.1669247471699505, 0.15572900840987464, 0.15207835391716756, 0.15062003437013574, 0.14953916411737966, 0.14846605081055342, 0.1472867842082275, 0.14642972634152984] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [78, 13, 0]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(1, 78), (2, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [31, 83, 0]]
** centroid: 3, normalized-entropy: 0.8442202034297602, [(1, 31), (2, 83)]
*** center 4: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [4, 67, 0]]
** centroid: 5, normalized-entropy: 0.3127333763966432, [(1, 4), (2, 67)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 67, 22]]
** centroid: 6, normalized-entropy: 0.8067955503968327, [(2, 67), (3, 22)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [78, 26, 0]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(1, 78), (2, 26)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3906655014728898] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3906655014728898, 0.3148231146907484] ***
*** starting iteration: 2; err: [Inf, 0.3906655014728898, 0.3148231146907484] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3906655014728898, 0.3148231146907484, 0.29451110537300956] ***
*** starting iteration: 3; err: [Inf, 0.3906655014728898, 0.3148231146907484, 0.29451110537300956] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3906655014728898, 0.3148231146907484, 0.29451110537300956, 0.2915367120597232] ***
*** starting iteration: 4; err: [Inf, 0.3906655014728898, 0.3148231146907484, 0.29451110537300956, 0.2915367120597232] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3906655014728898, 0.3148231146907484, 0.29451110537300956, 0.2915367120597232, 0.2909303804154734] ***
*** finished computation of 3 references, err: [Inf, 0.3906655014728898, 0.3148231146907484, 0.29451110537300956, 0.2915367120597232, 0.2909303804154734] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [83, 155, 20]]
** centroid: 1, normalized-entropy: 0.7911822779534001, [(1, 83), (2, 155), (3, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [195, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [140, 73, 0]]
** centroid: 3, normalized-entropy: 0.9274006288148685, [(1, 140), (2, 73)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.41640994296795963] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41640994296795963, 0.3057540241109467] ***
*** starting iteration: 2; err: [Inf, 0.41640994296795963, 0.3057540241109467] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41640994296795963, 0.3057540241109467, 0.2979077335692819] ***
*** starting iteration: 3; err: [Inf, 0.41640994296795963, 0.3057540241109467, 0.2979077335692819] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41640994296795963, 0.3057540241109467, 0.2979077335692819, 0.29645983017897276] ***
*** starting iteration: 4; err: [Inf, 0.41640994296795963, 0.3057540241109467, 0.2979077335692819, 0.29645983017897276] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41640994296795963, 0.3057540241109467, 0.2979077335692819, 0.29645983017897276, 0.2963136409784945] ***
*** finished computation of 3 references, err: [Inf, 0.41640994296795963, 0.3057540241109467, 0.2979077335692819, 0.29645983017897276, 0.2963136409784945] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [84, 181, 20]]
** centroid: 1, normalized-entropy: 0.7599002742478841, [(1, 84), (2, 181), (3, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [199, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [116, 67, 0]]
** centroid: 3, normalized-entropy: 0.9476464437732824, [(1, 116), (2, 67)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.38398903777133087] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38398903777133087, 0.2988361155940988] ***
*** starting iteration: 2; err: [Inf, 0.38398903777133087, 0.2988361155940988] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38398903777133087, 0.2988361155940988, 0.29100308898763766] ***
*** starting iteration: 3; err: [Inf, 0.38398903777133087, 0.2988361155940988, 0.29100308898763766] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38398903777133087, 0.2988361155940988, 0.29100308898763766, 0.2899212575038669] ***
*** starting iteration: 4; err: [Inf, 0.38398903777133087, 0.2988361155940988, 0.29100308898763766, 0.2899212575038669] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38398903777133087, 0.2988361155940988, 0.29100308898763766, 0.2899212575038669, 0.2898830512896001] ***
*** finished computation of 3 references, err: [Inf, 0.38398903777133087, 0.2988361155940988, 0.29100308898763766, 0.2899212575038669, 0.2898830512896001] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [73, 186, 22]]
** centroid: 1, normalized-entropy: 0.748865497774181, [(1, 73), (2, 186), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [197, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [119, 70, 0]]
** centroid: 3, normalized-entropy: 0.9509560484549724, [(1, 119), (2, 70)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.33535207765157315] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33535207765157315, 0.24054041685181315] ***
*** starting iteration: 2; err: [Inf, 0.33535207765157315, 0.24054041685181315] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33535207765157315, 0.24054041685181315, 0.23613330625366788] ***
*** starting iteration: 3; err: [Inf, 0.33535207765157315, 0.24054041685181315, 0.23613330625366788] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33535207765157315, 0.24054041685181315, 0.23613330625366788, 0.2352216970629979] ***
*** finished computation of 3 references, err: [Inf, 0.33535207765157315, 0.24054041685181315, 0.23613330625366788, 0.2352216970629979] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [116, 130, 20]]
** centroid: 1, normalized-entropy: 0.8250306784464922, [(1, 116), (2, 130), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [100, 98, 0]]
** centroid: 2, normalized-entropy: 0.999926399368686, [(1, 100), (2, 98)]
*** center 3: selecting labels [1] (freq >= 2) [from [202, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31942741991184104] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31942741991184104, 0.25019557679957266] ***
*** starting iteration: 2; err: [Inf, 0.31942741991184104, 0.25019557679957266] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31942741991184104, 0.25019557679957266, 0.24049705386195316] ***
*** starting iteration: 3; err: [Inf, 0.31942741991184104, 0.25019557679957266, 0.24049705386195316] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31942741991184104, 0.25019557679957266, 0.24049705386195316, 0.2393041256790062] ***
*** starting iteration: 4; err: [Inf, 0.31942741991184104, 0.25019557679957266, 0.24049705386195316, 0.2393041256790062] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31942741991184104, 0.25019557679957266, 0.24049705386195316, 0.2393041256790062, 0.2391253012152894] ***
*** finished computation of 3 references, err: [Inf, 0.31942741991184104, 0.25019557679957266, 0.24049705386195316, 0.2393041256790062, 0.2391253012152894] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [101, 146, 20]]
** centroid: 1, normalized-entropy: 0.8118754599065032, [(1, 101), (2, 146), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [115, 102, 0]]
** centroid: 2, normalized-entropy: 0.9974095700495683, [(1, 115), (2, 102)]
*** center 3: selecting labels [1] (freq >= 2) [from [183, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3090263618326661] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3090263618326661, 0.2429512519713329] ***
*** starting iteration: 2; err: [Inf, 0.3090263618326661, 0.2429512519713329] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3090263618326661, 0.2429512519713329, 0.23244596919745789] ***
*** starting iteration: 3; err: [Inf, 0.3090263618326661, 0.2429512519713329, 0.23244596919745789] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3090263618326661, 0.2429512519713329, 0.23244596919745789, 0.23024134112262296] ***
*** starting iteration: 4; err: [Inf, 0.3090263618326661, 0.2429512519713329, 0.23244596919745789, 0.23024134112262296] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3090263618326661, 0.2429512519713329, 0.23244596919745789, 0.23024134112262296, 0.22960402681024514] ***
*** finished computation of 3 references, err: [Inf, 0.3090263618326661, 0.2429512519713329, 0.23244596919745789, 0.23024134112262296, 0.22960402681024514] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [75, 184, 22]]
** centroid: 1, normalized-entropy: 0.7548019179869827, [(1, 75), (2, 184), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [119, 72, 0]]
** centroid: 2, normalized-entropy: 0.9558690692007135, [(1, 119), (2, 72)]
*** center 3: selecting labels [1] (freq >= 2) [from [195, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2051189277288238] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2051189277288238, 0.15957774908362968] ***
*** finished computation of 7 references, err: [Inf, 0.2051189277288238, 0.15957774908362968] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [17, 90, 0]]
** centroid: 1, normalized-entropy: 0.6316198184485629, [(1, 17), (2, 90)]
*** center 2: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [74, 14, 0]]
** centroid: 3, normalized-entropy: 0.6321302781219708, [(1, 74), (2, 14)]
*** center 4: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [128, 15, 0]]
** centroid: 5, normalized-entropy: 0.48432337220406935, [(1, 128), (2, 15)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 71, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 38, 20]]
** centroid: 7, normalized-entropy: 0.9293636260137188, [(2, 38), (3, 20)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19898415065330008] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19898415065330008, 0.1503331554883245] ***
*** finished computation of 7 references, err: [Inf, 0.19898415065330008, 0.1503331554883245] ***
*** center 1: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 80, 20]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 80), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [72, 21, 0]]
** centroid: 3, normalized-entropy: 0.7706290693639406, [(1, 72), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [37, 55, 0]]
** centroid: 4, normalized-entropy: 0.9722080563599758, [(1, 37), (2, 55)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [26, 91, 0]]
** centroid: 5, normalized-entropy: 0.7642045065086204, [(1, 26), (2, 91)]
*** center 6: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [86, 1, 0]]
** centroid: 7, normalized-entropy: 0.09054385326964301, [(1, 86), (2, 1)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18295402183285406] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18295402183285406, 0.15057014003591515] ***
*** finished computation of 7 references, err: [Inf, 0.18295402183285406, 0.15057014003591515] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [132, 2, 0]]
** centroid: 1, normalized-entropy: 0.11190990870168394, [(1, 132), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 50, 22]]
** centroid: 2, normalized-entropy: 0.887976319515135, [(2, 50), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [65, 5, 0]]
** centroid: 3, normalized-entropy: 0.3712323266408756, [(1, 65), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [64, 11, 0]]
** centroid: 4, normalized-entropy: 0.6014353864290773, [(1, 64), (2, 11)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 87, 0]]
** centroid: 5, normalized-entropy: 0.6949749673676271, [(1, 20), (2, 87)]
*** center 6: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 101, 0]]
** centroid: 7, normalized-entropy: 0.07949044238393414, [(1, 1), (2, 101)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23374911186469904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23374911186469904, 0.18641396942296745] ***
*** starting iteration: 2; err: [Inf, 0.23374911186469904, 0.18641396942296745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23374911186469904, 0.18641396942296745, 0.18268599709658115] ***
*** starting iteration: 3; err: [Inf, 0.23374911186469904, 0.18641396942296745, 0.18268599709658115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23374911186469904, 0.18641396942296745, 0.18268599709658115, 0.18169972433305875] ***
*** finished computation of 7 references, err: [Inf, 0.23374911186469904, 0.18641396942296745, 0.18268599709658115, 0.18169972433305875] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [75, 44, 0]]
** centroid: 1, normalized-entropy: 0.9504783262723793, [(1, 75), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [70, 20, 0]]
** centroid: 2, normalized-entropy: 0.7642045065086204, [(1, 70), (2, 20)]
*** center 3: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 66, 20]]
** centroid: 4, normalized-entropy: 0.7824441294066888, [(2, 66), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [101, 10, 0]]
** centroid: 5, normalized-entropy: 0.436770454577089, [(1, 101), (2, 10)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 88, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24940420736138452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24940420736138452, 0.19248834329432454] ***
*** starting iteration: 2; err: [Inf, 0.24940420736138452, 0.19248834329432454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24940420736138452, 0.19248834329432454, 0.18695381333432937] ***
*** starting iteration: 3; err: [Inf, 0.24940420736138452, 0.19248834329432454, 0.18695381333432937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24940420736138452, 0.19248834329432454, 0.18695381333432937, 0.18589888382256253] ***
*** finished computation of 7 references, err: [Inf, 0.24940420736138452, 0.19248834329432454, 0.18695381333432937, 0.18589888382256253] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [32, 65, 0]]
** centroid: 1, normalized-entropy: 0.9148210087144519, [(1, 32), (2, 65)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [69, 5, 0]]
** centroid: 2, normalized-entropy: 0.35678001438394347, [(1, 69), (2, 5)]
*** center 3: selecting labels [1] (freq >= 1) [from [119, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 76, 20]]
** centroid: 4, normalized-entropy: 0.7382848661434506, [(2, 76), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [92, 14, 0]]
** centroid: 5, normalized-entropy: 0.5631028237513912, [(1, 92), (2, 14)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [87, 4, 0]]
** centroid: 6, normalized-entropy: 0.26014536394771426, [(1, 87), (2, 4)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 84, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24052618755477256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24052618755477256, 0.1929172618765624] ***
*** starting iteration: 2; err: [Inf, 0.24052618755477256, 0.1929172618765624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24052618755477256, 0.1929172618765624, 0.18986201302233574] ***
*** starting iteration: 3; err: [Inf, 0.24052618755477256, 0.1929172618765624, 0.18986201302233574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24052618755477256, 0.1929172618765624, 0.18986201302233574, 0.18949992568657986] ***
*** finished computation of 7 references, err: [Inf, 0.24052618755477256, 0.1929172618765624, 0.18986201302233574, 0.18949992568657986] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [108, 7, 0]]
** centroid: 1, normalized-entropy: 0.33088714061343766, [(1, 108), (2, 7)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 55, 22]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(2, 55), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [92, 10, 0]]
** centroid: 3, normalized-entropy: 0.462749058578174, [(1, 92), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [102, 3, 0]]
** centroid: 4, normalized-entropy: 0.18717625687320805, [(1, 102), (2, 3)]
*** center 5: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 105, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 76, 0]]
** centroid: 7, normalized-entropy: 0.17203694935311387, [(1, 2), (2, 76)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24121858381985073] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24121858381985073, 0.1939248671855179] ***
*** starting iteration: 2; err: [Inf, 0.24121858381985073, 0.1939248671855179] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24121858381985073, 0.1939248671855179, 0.18858134178388808] ***
*** starting iteration: 3; err: [Inf, 0.24121858381985073, 0.1939248671855179, 0.18858134178388808] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24121858381985073, 0.1939248671855179, 0.18858134178388808, 0.18744570847395137] ***
*** starting iteration: 4; err: [Inf, 0.24121858381985073, 0.1939248671855179, 0.18858134178388808, 0.18744570847395137] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24121858381985073, 0.1939248671855179, 0.18858134178388808, 0.18744570847395137, 0.18627895933629066] ***
*** starting iteration: 5; err: [Inf, 0.24121858381985073, 0.1939248671855179, 0.18858134178388808, 0.18744570847395137, 0.18627895933629066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24121858381985073, 0.1939248671855179, 0.18858134178388808, 0.18744570847395137, 0.18627895933629066, 0.18543303695538113] ***
*** finished computation of 7 references, err: [Inf, 0.24121858381985073, 0.1939248671855179, 0.18858134178388808, 0.18744570847395137, 0.18627895933629066, 0.18543303695538113] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [7, 72, 0]]
** centroid: 1, normalized-entropy: 0.43180499427520785, [(1, 7), (2, 72)]
*** center 2: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [64, 43, 0]]
** centroid: 3, normalized-entropy: 0.9720334868479672, [(1, 64), (2, 43)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [72, 28, 0]]
** centroid: 4, normalized-entropy: 0.8554508105601307, [(1, 72), (2, 28)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 84, 20]]
** centroid: 5, normalized-entropy: 0.7062740891876008, [(2, 84), (3, 20)]
*** center 6: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [106, 1, 0]]
** centroid: 7, normalized-entropy: 0.07642429309554791, [(1, 106), (2, 1)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24560686571431392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24560686571431392, 0.1989127394632957] ***
*** starting iteration: 2; err: [Inf, 0.24560686571431392, 0.1989127394632957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24560686571431392, 0.1989127394632957, 0.190222369897217] ***
*** starting iteration: 3; err: [Inf, 0.24560686571431392, 0.1989127394632957, 0.190222369897217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24560686571431392, 0.1989127394632957, 0.190222369897217, 0.18810653810513608] ***
*** starting iteration: 4; err: [Inf, 0.24560686571431392, 0.1989127394632957, 0.190222369897217, 0.18810653810513608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24560686571431392, 0.1989127394632957, 0.190222369897217, 0.18810653810513608, 0.187200919755021] ***
*** finished computation of 7 references, err: [Inf, 0.24560686571431392, 0.1989127394632957, 0.190222369897217, 0.18810653810513608, 0.187200919755021] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [85, 16, 0]]
** centroid: 1, normalized-entropy: 0.6305062394675903, [(1, 85), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [72, 12, 0]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(1, 72), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 104, 20]]
** centroid: 3, normalized-entropy: 0.6373874992221911, [(2, 104), (3, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [66, 31, 0]]
** centroid: 5, normalized-entropy: 0.9039324555927869, [(1, 66), (2, 31)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [88, 1, 0]]
** centroid: 6, normalized-entropy: 0.08887969568457589, [(1, 88), (2, 1)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 84, 0]]
** centroid: 7, normalized-entropy: 0.15935006268563429, [(1, 2), (2, 84)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2366234859649924] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2366234859649924, 0.19050670658814897] ***
*** starting iteration: 2; err: [Inf, 0.2366234859649924, 0.19050670658814897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2366234859649924, 0.19050670658814897, 0.18481083839749177] ***
*** starting iteration: 3; err: [Inf, 0.2366234859649924, 0.19050670658814897, 0.18481083839749177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2366234859649924, 0.19050670658814897, 0.18481083839749177, 0.18388099483922235] ***
*** finished computation of 7 references, err: [Inf, 0.2366234859649924, 0.19050670658814897, 0.18481083839749177, 0.18388099483922235] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [82, 29, 0]]
** centroid: 1, normalized-entropy: 0.8286436750223362, [(1, 82), (2, 29)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 5, 0]]
** centroid: 2, normalized-entropy: 0.378958787501346, [(1, 63), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 113, 22]]
** centroid: 3, normalized-entropy: 0.6413510165846328, [(2, 113), (3, 22)]
*** center 4: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [22, 71, 0]]
** centroid: 5, normalized-entropy: 0.7892712724536985, [(1, 22), (2, 71)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [59, 38, 0]]
** centroid: 6, normalized-entropy: 0.9659212398860464, [(1, 59), (2, 38)]
*** center 7: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.912013810217403, 0.9110307912703123, 0.9050008091924259, 0.902000803198408, 0.900004795214376, 0.8949997902093711, 0.892002781224338, 0.8910017802233371, 0.8860267453081824, 0.8750576924229619, 0.8560266853680027, 0.7810265355175535, 0.7809516102929276]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.3, 1) => 0.912013810217403
finished with 14
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.351055542769207] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.351055542769207, 0.23256752669934305] ***
*** starting iteration: 2; err: [Inf, 0.351055542769207, 0.23256752669934305] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.351055542769207, 0.23256752669934305, 0.2318504878317003] ***
*** finished computation of 3 references, err: [Inf, 0.351055542769207, 0.23256752669934305, 0.2318504878317003] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [266, 17, 0]]
** centroid: 1, normalized-entropy: 0.32772539426448927, [(1, 266), (2, 17)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 163, 20]]
** centroid: 2, normalized-entropy: 0.4977695047462671, [(2, 163), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [152, 48, 0]]
** centroid: 3, normalized-entropy: 0.7950402793845225, [(1, 152), (2, 48)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3172992461904146] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3172992461904146, 0.2445262512499313] ***
*** starting iteration: 2; err: [Inf, 0.3172992461904146, 0.2445262512499313] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3172992461904146, 0.2445262512499313, 0.2399086052373141] ***
*** starting iteration: 3; err: [Inf, 0.3172992461904146, 0.2445262512499313, 0.2399086052373141] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3172992461904146, 0.2445262512499313, 0.2399086052373141, 0.2385142375749984] ***
*** starting iteration: 4; err: [Inf, 0.3172992461904146, 0.2445262512499313, 0.2399086052373141, 0.2385142375749984] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3172992461904146, 0.2445262512499313, 0.2399086052373141, 0.2385142375749984, 0.2382530524986035] ***
*** finished computation of 3 references, err: [Inf, 0.3172992461904146, 0.2445262512499313, 0.2399086052373141, 0.2385142375749984, 0.2382530524986035] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [236, 30, 0]]
** centroid: 1, normalized-entropy: 0.5082505651340841, [(1, 236), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [163, 43, 0]]
** centroid: 2, normalized-entropy: 0.7390632767373162, [(1, 163), (2, 43)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 175, 20]]
** centroid: 3, normalized-entropy: 0.4770713062193298, [(2, 175), (3, 20)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.34159088026693113] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34159088026693113, 0.2429703063871907] ***
*** starting iteration: 2; err: [Inf, 0.34159088026693113, 0.2429703063871907] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34159088026693113, 0.2429703063871907, 0.23794843097576227] ***
*** starting iteration: 3; err: [Inf, 0.34159088026693113, 0.2429703063871907, 0.23794843097576227] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34159088026693113, 0.2429703063871907, 0.23794843097576227, 0.23684358410257986] ***
*** starting iteration: 4; err: [Inf, 0.34159088026693113, 0.2429703063871907, 0.23794843097576227, 0.23684358410257986] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34159088026693113, 0.2429703063871907, 0.23794843097576227, 0.23684358410257986, 0.23663686440958792] ***
*** finished computation of 3 references, err: [Inf, 0.34159088026693113, 0.2429703063871907, 0.23794843097576227, 0.23684358410257986, 0.23663686440958792] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [86, 142, 22]]
** centroid: 1, normalized-entropy: 0.8212578292127217, [(1, 86), (2, 142), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [104, 114, 0]]
** centroid: 2, normalized-entropy: 0.9984816077977791, [(1, 104), (2, 114)]
*** center 3: selecting labels [1] (freq >= 2) [from [199, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 14)
[0.912013810217403, 0.9110307912703123, 0.9050008091924259, 0.902000803198408, 0.900004795214376, 0.8949997902093711, 0.8949997902093711, 0.892002781224338, 0.8910017802233371, 0.8860267453081824, 0.8750576924229619, 0.8560266853680027, 0.7810265355175535, 0.7809516102929276]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.3, 1) => 0.912013810217403
finished with 15
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.17354658038345622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17354658038345622, 0.15561560619071507] ***
*** starting iteration: 2; err: [Inf, 0.17354658038345622, 0.15561560619071507] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17354658038345622, 0.15561560619071507, 0.152582386746309] ***
*** starting iteration: 3; err: [Inf, 0.17354658038345622, 0.15561560619071507, 0.152582386746309] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17354658038345622, 0.15561560619071507, 0.152582386746309, 0.15153272758872882] ***
*** finished computation of 7 references, err: [Inf, 0.17354658038345622, 0.15561560619071507, 0.152582386746309, 0.15153272758872882] ***
*** center 1: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 125, 20]]
** centroid: 2, normalized-entropy: 0.5787946246321198, [(2, 125), (3, 20)]
*** center 3: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [65, 51, 0]]
** centroid: 4, normalized-entropy: 0.9894671995465737, [(1, 65), (2, 51)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [106, 3, 0]]
** centroid: 5, normalized-entropy: 0.18181317169561842, [(1, 106), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [65, 41, 0]]
** centroid: 6, normalized-entropy: 0.9626983787500768, [(1, 65), (2, 41)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [78, 8, 0]]
** centroid: 7, normalized-entropy: 0.446481346896803, [(1, 78), (2, 8)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1746910341555948] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1746910341555948, 0.15543791351489433] ***
*** starting iteration: 2; err: [Inf, 0.1746910341555948, 0.15543791351489433] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1746910341555948, 0.15543791351489433, 0.15082749939974638] ***
*** starting iteration: 3; err: [Inf, 0.1746910341555948, 0.15543791351489433, 0.15082749939974638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1746910341555948, 0.15543791351489433, 0.15082749939974638, 0.1488157899783592] ***
*** finished computation of 7 references, err: [Inf, 0.1746910341555948, 0.15543791351489433, 0.15082749939974638, 0.1488157899783592] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [70, 34, 0]]
** centroid: 1, normalized-entropy: 0.9117517586347538, [(1, 70), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [2, 63, 0]]
** centroid: 2, normalized-entropy: 0.19823496409776642, [(1, 2), (2, 63)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [93, 4, 0]]
** centroid: 3, normalized-entropy: 0.24793583772272637, [(1, 93), (2, 4)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 103, 20]]
** centroid: 4, normalized-entropy: 0.6404973004805509, [(2, 103), (3, 20)]
*** center 5: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [50, 44, 0]]
** centroid: 6, normalized-entropy: 0.9970590569034106, [(1, 50), (2, 44)]
*** center 7: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21971139240370452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21971139240370452, 0.1827024658632254] ***
*** starting iteration: 2; err: [Inf, 0.21971139240370452, 0.1827024658632254] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21971139240370452, 0.1827024658632254, 0.16759609556414823] ***
*** starting iteration: 3; err: [Inf, 0.21971139240370452, 0.1827024658632254, 0.16759609556414823] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21971139240370452, 0.1827024658632254, 0.16759609556414823, 0.1550702421026754] ***
*** finished computation of 7 references, err: [Inf, 0.21971139240370452, 0.1827024658632254, 0.16759609556414823, 0.1550702421026754] ***
*** center 1: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [52, 34, 0]]
** centroid: 2, normalized-entropy: 0.9681647320759545, [(1, 52), (2, 34)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [49, 26, 0]]
** centroid: 3, normalized-entropy: 0.9310558233850329, [(1, 49), (2, 26)]
*** center 4: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 94, 22]]
** centroid: 5, normalized-entropy: 0.7007495497162061, [(2, 94), (3, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [20, 102, 0]]
** centroid: 6, normalized-entropy: 0.6436394131461666, [(1, 20), (2, 102)]
*** center 7: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.933022843202484, 0.912013810217403, 0.9110307912703123, 0.9050008091924259, 0.902000803198408, 0.900004795214376, 0.8949997902093711, 0.8949997902093711, 0.892002781224338, 0.8910017802233371, 0.8860267453081824, 0.8750576924229619, 0.8560266853680027, 0.7810265355175535, 0.7809516102929276]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 1) => 0.933022843202484
finished with 16
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.19732640074445745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19732640074445745, 0.1490364051962344] ***
*** starting iteration: 2; err: [Inf, 0.19732640074445745, 0.1490364051962344] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19732640074445745, 0.1490364051962344, 0.14489523279928118] ***
*** starting iteration: 3; err: [Inf, 0.19732640074445745, 0.1490364051962344, 0.14489523279928118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19732640074445745, 0.1490364051962344, 0.14489523279928118, 0.14463167907474367] ***
*** finished computation of 7 references, err: [Inf, 0.19732640074445745, 0.1490364051962344, 0.14489523279928118, 0.14463167907474367] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 88, 20]]
** centroid: 1, normalized-entropy: 0.6912898694057888, [(2, 88), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [77, 2, 0]]
** centroid: 3, normalized-entropy: 0.17033057560105982, [(1, 77), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [75, 41, 0]]
** centroid: 4, normalized-entropy: 0.9371100125712575, [(1, 75), (2, 41)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [85, 22, 0]]
** centroid: 5, normalized-entropy: 0.7330022650766125, [(1, 85), (2, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [5, 75, 0]]
** centroid: 6, normalized-entropy: 0.3372900666170139, [(1, 5), (2, 75)]
*** center 7: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21591732299829397] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21591732299829397, 0.1484013412683934] ***
*** starting iteration: 2; err: [Inf, 0.21591732299829397, 0.1484013412683934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21591732299829397, 0.1484013412683934, 0.14448440402402016] ***
*** starting iteration: 3; err: [Inf, 0.21591732299829397, 0.1484013412683934, 0.14448440402402016] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21591732299829397, 0.1484013412683934, 0.14448440402402016, 0.1440461227339392] ***
*** finished computation of 7 references, err: [Inf, 0.21591732299829397, 0.1484013412683934, 0.14448440402402016, 0.1440461227339392] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [22, 77, 0]]
** centroid: 1, normalized-entropy: 0.7642045065086204, [(1, 22), (2, 77)]
*** center 2: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [64, 34, 0]]
** centroid: 3, normalized-entropy: 0.9313043685793762, [(1, 64), (2, 34)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 100, 20]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 100), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [73, 37, 0]]
** centroid: 5, normalized-entropy: 0.9212963741927287, [(1, 73), (2, 37)]
*** center 6: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1990850101751478] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1990850101751478, 0.1511218277877127] ***
*** starting iteration: 2; err: [Inf, 0.1990850101751478, 0.1511218277877127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1990850101751478, 0.1511218277877127, 0.14609924020424395] ***
*** starting iteration: 3; err: [Inf, 0.1990850101751478, 0.1511218277877127, 0.14609924020424395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1990850101751478, 0.1511218277877127, 0.14609924020424395, 0.1450400706422494] ***
*** starting iteration: 4; err: [Inf, 0.1990850101751478, 0.1511218277877127, 0.14609924020424395, 0.1450400706422494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1990850101751478, 0.1511218277877127, 0.14609924020424395, 0.1450400706422494, 0.14477889863648516] ***
*** finished computation of 7 references, err: [Inf, 0.1990850101751478, 0.1511218277877127, 0.14609924020424395, 0.1450400706422494, 0.14477889863648516] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [91, 7, 0]]
** centroid: 1, normalized-entropy: 0.3712323266408756, [(1, 91), (2, 7)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 83, 22]]
** centroid: 2, normalized-entropy: 0.7405715327916912, [(2, 83), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [58, 26, 0]]
** centroid: 3, normalized-entropy: 0.8926230133850988, [(1, 58), (2, 26)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [73, 42, 0]]
** centroid: 4, normalized-entropy: 0.9469289678578606, [(1, 73), (2, 42)]
*** center 5: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [8, 98, 0]]
** centroid: 6, normalized-entropy: 0.3860189005698936, [(1, 8), (2, 98)]
*** center 7: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 16)
[0.933022843202484, 0.9170038301774829, 0.912013810217403, 0.9110307912703123, 0.9050008091924259, 0.902000803198408, 0.900004795214376, 0.8949997902093711, 0.8949997902093711, 0.892002781224338, 0.8910017802233371, 0.8860267453081824, 0.8750576924229619, 0.8560266853680027, 0.7810265355175535, 0.7809516102929276]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 1) => 0.933022843202484
finished with 17
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.297461059819851] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.297461059819851, 0.16309607294653808] ***
*** finished computation of 7 references, err: [Inf, 0.297461059819851, 0.16309607294653808] ***
*** center 1: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [60, 5, 0]]
** centroid: 4, normalized-entropy: 0.3912435636292556, [(1, 60), (2, 5)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 78, 20]]
** centroid: 5, normalized-entropy: 0.7300166301457938, [(2, 78), (3, 20)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [16, 65, 0]]
** centroid: 6, normalized-entropy: 0.7169622516889513, [(1, 16), (2, 65)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [68, 80, 0]]
** centroid: 7, normalized-entropy: 0.9952525494396791, [(1, 68), (2, 80)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1830872490714448] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1830872490714448, 0.16361170916956314] ***
*** finished computation of 7 references, err: [Inf, 0.1830872490714448, 0.16361170916956314] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [2, 83, 0]]
** centroid: 1, normalized-entropy: 0.16082302082246946, [(1, 2), (2, 83)]
*** center 2: selecting labels [1] (freq >= 1) [from [169, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [28, 48, 0]]
** centroid: 3, normalized-entropy: 0.9494520153879484, [(1, 28), (2, 48)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 32, 20]]
** centroid: 4, normalized-entropy: 0.961236604722876, [(2, 32), (3, 20)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 48, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [111, 1, 0]]
** centroid: 6, normalized-entropy: 0.07360348308562395, [(1, 111), (2, 1)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [89, 36, 0]]
** centroid: 7, normalized-entropy: 0.866123681398626, [(1, 89), (2, 36)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20362332909098496] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20362332909098496, 0.17247475232614654] ***
*** finished computation of 7 references, err: [Inf, 0.20362332909098496, 0.17247475232614654] ***
*** center 1: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [95, 104, 0]]
** centroid: 2, normalized-entropy: 0.9985240503018717, [(1, 95), (2, 104)]
*** center 3: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [32, 1, 0]]
** centroid: 4, normalized-entropy: 0.19590927087360496, [(1, 32), (2, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [81, 16, 0]]
** centroid: 5, normalized-entropy: 0.6460174789535751, [(1, 81), (2, 16)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [42, 25, 0]]
** centroid: 6, normalized-entropy: 0.9530483471581301, [(1, 42), (2, 25)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 110, 22]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 110), (3, 22)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 17)
[0.933022843202484, 0.9230338122553691, 0.9170038301774829, 0.912013810217403, 0.9110307912703123, 0.9050008091924259, 0.902000803198408, 0.900004795214376, 0.8949997902093711, 0.8949997902093711, 0.892002781224338, 0.8910017802233371, 0.8860267453081824, 0.8750576924229619, 0.8560266853680027, 0.7810265355175535, 0.7809516102929276]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 1) => 0.933022843202484
finished with 18
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.19321077988992022] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19321077988992022, 0.15960452777358727] ***
*** starting iteration: 2; err: [Inf, 0.19321077988992022, 0.15960452777358727] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19321077988992022, 0.15960452777358727, 0.15292857892184822] ***
*** starting iteration: 3; err: [Inf, 0.19321077988992022, 0.15960452777358727, 0.15292857892184822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19321077988992022, 0.15960452777358727, 0.15292857892184822, 0.14874893694265826] ***
*** finished computation of 7 references, err: [Inf, 0.19321077988992022, 0.15960452777358727, 0.15292857892184822, 0.14874893694265826] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [64, 31, 0]]
** centroid: 1, normalized-entropy: 0.9111178649415465, [(1, 64), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [97, 3, 0]]
** centroid: 2, normalized-entropy: 0.19439185783157603, [(1, 97), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 86, 20]]
** centroid: 3, normalized-entropy: 0.6987003526563345, [(2, 86), (3, 20)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 59, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 39, 0]]
** centroid: 5, normalized-entropy: 0.9352691398683568, [(1, 72), (2, 39)]
*** center 6: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [76, 10, 0]]
** centroid: 7, normalized-entropy: 0.5185697317883058, [(1, 76), (2, 10)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.16914357472213915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16914357472213915, 0.1512480732067481] ***
*** starting iteration: 2; err: [Inf, 0.16914357472213915, 0.1512480732067481] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16914357472213915, 0.1512480732067481, 0.14875165636566046] ***
*** starting iteration: 3; err: [Inf, 0.16914357472213915, 0.1512480732067481, 0.14875165636566046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16914357472213915, 0.1512480732067481, 0.14875165636566046, 0.14678389433425093] ***
*** finished computation of 7 references, err: [Inf, 0.16914357472213915, 0.1512480732067481, 0.14875165636566046, 0.14678389433425093] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [42, 48, 0]]
** centroid: 1, normalized-entropy: 0.9967916319816367, [(1, 42), (2, 48)]
*** center 2: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [65, 47, 0]]
** centroid: 3, normalized-entropy: 0.9812872088817248, [(1, 65), (2, 47)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 108, 20]]
** centroid: 4, normalized-entropy: 0.625262405223423, [(2, 108), (3, 20)]
*** center 5: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [56, 45, 0]]
** centroid: 7, normalized-entropy: 0.9914266810680207, [(1, 56), (2, 45)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1992419488990548] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1992419488990548, 0.15124016441335006] ***
*** starting iteration: 2; err: [Inf, 0.1992419488990548, 0.15124016441335006] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1992419488990548, 0.15124016441335006, 0.14809768881810748] ***
*** starting iteration: 3; err: [Inf, 0.1992419488990548, 0.15124016441335006, 0.14809768881810748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1992419488990548, 0.15124016441335006, 0.14809768881810748, 0.14730904733404696] ***
*** finished computation of 7 references, err: [Inf, 0.1992419488990548, 0.15124016441335006, 0.14809768881810748, 0.14730904733404696] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [72, 20, 0]]
** centroid: 3, normalized-entropy: 0.7553754125614286, [(1, 72), (2, 20)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [21, 86, 0]]
** centroid: 4, normalized-entropy: 0.7143881566559658, [(1, 21), (2, 86)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 32, 0]]
** centroid: 5, normalized-entropy: 0.9456603046006401, [(1, 56), (2, 32)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [61, 25, 0]]
** centroid: 6, normalized-entropy: 0.869620774054375, [(1, 61), (2, 25)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 93, 22]]
** centroid: 7, normalized-entropy: 0.7041920940481365, [(2, 93), (3, 22)]
finished with 12 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 18)
[0.9370028711346077, 0.933022843202484, 0.9230338122553691, 0.9170038301774829, 0.912013810217403, 0.9110307912703123, 0.9050008091924259, 0.902000803198408, 0.900004795214376, 0.8949997902093711, 0.8949997902093711, 0.892002781224338, 0.8910017802233371, 0.8860267453081824, 0.8750576924229619, 0.8560266853680027, 0.7810265355175535, 0.7809516102929276]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9370028711346077
finished with 18
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9370028711346077, 0.933022843202484, 0.9230338122553691, 0.9170038301774829, 0.912013810217403, 0.9110307912703123, 0.9050008091924259, 0.902000803198408, 0.900004795214376, 0.8949997902093711, 0.8949997902093711, 0.892002781224338, 0.8910017802233371, 0.8860267453081824, 0.8750576924229619, 0.8560266853680027, 0.7810265355175535, 0.7809516102929276]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9370028711346077
finished with 18
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9370028711346077, 0.933022843202484, 0.9230338122553691, 0.9170038301774829, 0.912013810217403, 0.9110307912703123, 0.9050008091924259, 0.902000803198408, 0.900004795214376, 0.8949997902093711, 0.8949997902093711, 0.892002781224338, 0.8910017802233371, 0.8860267453081824, 0.8750576924229619, 0.8560266853680027, 0.7810265355175535, 0.7809516102929276]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9370028711346077
finished with 18
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.24539757223194464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24539757223194464, 0.19055644508311526] ***
*** starting iteration: 2; err: [Inf, 0.24539757223194464, 0.19055644508311526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24539757223194464, 0.19055644508311526, 0.16773541799280792] ***
*** starting iteration: 3; err: [Inf, 0.24539757223194464, 0.19055644508311526, 0.16773541799280792] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24539757223194464, 0.19055644508311526, 0.16773541799280792, 0.1572105610840954] ***
*** finished computation of 7 references, err: [Inf, 0.24539757223194464, 0.19055644508311526, 0.16773541799280792, 0.1572105610840954] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [78, 129, 0]]
** centroid: 1, normalized-entropy: 0.9557589912150007, [(1, 78), (2, 129)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 100, 31]]
** centroid: 2, normalized-entropy: 0.7894099893277894, [(2, 100), (3, 31)]
*** center 3: selecting labels [1] (freq >= 2) [from [161, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [65, 57, 0]]
** centroid: 4, normalized-entropy: 0.9968960371182977, [(1, 65), (2, 57)]
*** center 5: selecting labels [2] (freq >= 2) [from [1, 74, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [105, 6, 0]]
** centroid: 6, normalized-entropy: 0.30337483608641397, [(1, 105), (2, 6)]
*** center 7: selecting labels [1] (freq >= 2) [from [193, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20485504102613777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20485504102613777, 0.15838062256667762] ***
*** starting iteration: 2; err: [Inf, 0.20485504102613777, 0.15838062256667762] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20485504102613777, 0.15838062256667762, 0.15173076243698597] ***
*** starting iteration: 3; err: [Inf, 0.20485504102613777, 0.15838062256667762, 0.15173076243698597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20485504102613777, 0.15838062256667762, 0.15173076243698597, 0.14724179880227894] ***
*** finished computation of 7 references, err: [Inf, 0.20485504102613777, 0.15838062256667762, 0.15173076243698597, 0.14724179880227894] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [38, 45, 0]]
** centroid: 1, normalized-entropy: 0.9948631079048572, [(1, 38), (2, 45)]
*** center 2: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 59, 11]]
** centroid: 3, normalized-entropy: 0.6274303352684106, [(2, 59), (3, 11)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [31, 46, 0]]
** centroid: 4, normalized-entropy: 0.9724497147128791, [(1, 31), (2, 46)]
*** center 5: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 34, 0]]
** centroid: 6, normalized-entropy: 0.80235344282919, [(1, 11), (2, 34)]
*** center 7: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1810971043817699] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1810971043817699, 0.15566368222841992] ***
*** starting iteration: 2; err: [Inf, 0.1810971043817699, 0.15566368222841992] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1810971043817699, 0.15566368222841992, 0.1501100488435477] ***
*** starting iteration: 3; err: [Inf, 0.1810971043817699, 0.15566368222841992, 0.1501100488435477] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1810971043817699, 0.15566368222841992, 0.1501100488435477, 0.14695443084370344] ***
*** finished computation of 7 references, err: [Inf, 0.1810971043817699, 0.15566368222841992, 0.1501100488435477, 0.14695443084370344] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [69, 4, 0]]
** centroid: 1, normalized-entropy: 0.306424729870515, [(1, 69), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [75, 34, 0]]
** centroid: 2, normalized-entropy: 0.8953848900090126, [(1, 75), (2, 34)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 2, 0]]
** centroid: 3, normalized-entropy: 0.23181305002459035, [(1, 51), (2, 2)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 84, 13]]
** centroid: 4, normalized-entropy: 0.5683625344629001, [(2, 84), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 60, 0]]
** centroid: 5, normalized-entropy: 0.3912435636292556, [(1, 5), (2, 60)]
*** center 6: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23524280760250985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23524280760250985, 0.17274520930554718] ***
*** starting iteration: 2; err: [Inf, 0.23524280760250985, 0.17274520930554718] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23524280760250985, 0.17274520930554718, 0.15965113823860883] ***
*** starting iteration: 3; err: [Inf, 0.23524280760250985, 0.17274520930554718, 0.15965113823860883] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23524280760250985, 0.17274520930554718, 0.15965113823860883, 0.1549251910317689] ***
*** finished computation of 7 references, err: [Inf, 0.23524280760250985, 0.17274520930554718, 0.15965113823860883, 0.1549251910317689] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [31, 42, 0]]
** centroid: 1, normalized-entropy: 0.9835585673909616, [(1, 31), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 17, 0]]
** centroid: 2, normalized-entropy: 0.7462343013654809, [(1, 63), (2, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 49, 15]]
** centroid: 4, normalized-entropy: 0.7855602922535471, [(2, 49), (3, 15)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 56, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [50, 19, 0]]
** centroid: 6, normalized-entropy: 0.849054424254048, [(1, 50), (2, 19)]
*** center 7: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24609005860611796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24609005860611796, 0.16233644681051373] ***
*** starting iteration: 2; err: [Inf, 0.24609005860611796, 0.16233644681051373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24609005860611796, 0.16233644681051373, 0.15377456484455615] ***
*** starting iteration: 3; err: [Inf, 0.24609005860611796, 0.16233644681051373, 0.15377456484455615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24609005860611796, 0.16233644681051373, 0.15377456484455615, 0.15162734025344252] ***
*** finished computation of 7 references, err: [Inf, 0.24609005860611796, 0.16233644681051373, 0.15377456484455615, 0.15162734025344252] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [96, 5, 0]]
** centroid: 1, normalized-entropy: 0.2842902892501332, [(1, 96), (2, 5)]
*** center 2: selecting labels [2] (freq >= 2) [from [1, 64, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 37, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 38, 21]]
** centroid: 5, normalized-entropy: 0.9392547207311595, [(2, 38), (3, 21)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [49, 23, 0]]
** centroid: 6, normalized-entropy: 0.9037762882345833, [(1, 49), (2, 23)]
*** center 7: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20797118976525963] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20797118976525963, 0.1657552639329806] ***
*** starting iteration: 2; err: [Inf, 0.20797118976525963, 0.1657552639329806] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20797118976525963, 0.1657552639329806, 0.1529815206285566] ***
*** starting iteration: 3; err: [Inf, 0.20797118976525963, 0.1657552639329806, 0.1529815206285566] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20797118976525963, 0.1657552639329806, 0.1529815206285566, 0.14765132654458285] ***
*** finished computation of 7 references, err: [Inf, 0.20797118976525963, 0.1657552639329806, 0.1529815206285566, 0.14765132654458285] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [65, 13, 0]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(1, 65), (2, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 84, 21]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 84), (3, 21)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [41, 27, 0]]
** centroid: 4, normalized-entropy: 0.9692040949598235, [(1, 41), (2, 27)]
*** center 5: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 50, 0]]
** centroid: 7, normalized-entropy: 0.5787946246321198, [(1, 8), (2, 50)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1790844502914697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1790844502914697, 0.15391834672540428] ***
*** starting iteration: 2; err: [Inf, 0.1790844502914697, 0.15391834672540428] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1790844502914697, 0.15391834672540428, 0.15009009519405664] ***
*** starting iteration: 3; err: [Inf, 0.1790844502914697, 0.15391834672540428, 0.15009009519405664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1790844502914697, 0.15391834672540428, 0.15009009519405664, 0.14779282243642955] ***
*** finished computation of 7 references, err: [Inf, 0.1790844502914697, 0.15391834672540428, 0.15009009519405664, 0.14779282243642955] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [50, 30, 0]]
** centroid: 1, normalized-entropy: 0.954434002924965, [(1, 50), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [28, 55, 0]]
** centroid: 2, normalized-entropy: 0.9222596474738021, [(1, 28), (2, 55)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [37, 31, 0]]
** centroid: 3, normalized-entropy: 0.9943766625699823, [(1, 37), (2, 31)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 68, 18]]
** centroid: 4, normalized-entropy: 0.7401470427139037, [(2, 68), (3, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1869050195068121] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1869050195068121, 0.1636696303570643] ***
*** starting iteration: 2; err: [Inf, 0.1869050195068121, 0.1636696303570643] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1869050195068121, 0.1636696303570643, 0.15408888517692684] ***
*** starting iteration: 3; err: [Inf, 0.1869050195068121, 0.1636696303570643, 0.15408888517692684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1869050195068121, 0.1636696303570643, 0.15408888517692684, 0.1521188420318067] ***
*** finished computation of 7 references, err: [Inf, 0.1869050195068121, 0.1636696303570643, 0.15408888517692684, 0.1521188420318067] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 6, 0]]
** centroid: 2, normalized-entropy: 0.4912373418243334, [(1, 50), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 42, 11]]
** centroid: 3, normalized-entropy: 0.7367680100024784, [(2, 42), (3, 11)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [44, 52, 0]]
** centroid: 4, normalized-entropy: 0.9949848281859699, [(1, 44), (2, 52)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 21, 0]]
** centroid: 5, normalized-entropy: 0.8605553930586318, [(1, 53), (2, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2450860074069351] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2450860074069351, 0.17030097780376674] ***
*** starting iteration: 2; err: [Inf, 0.2450860074069351, 0.17030097780376674] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2450860074069351, 0.17030097780376674, 0.15596504689659924] ***
*** starting iteration: 3; err: [Inf, 0.2450860074069351, 0.17030097780376674, 0.15596504689659924] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2450860074069351, 0.17030097780376674, 0.15596504689659924, 0.15079544682614504] ***
*** finished computation of 7 references, err: [Inf, 0.2450860074069351, 0.17030097780376674, 0.15596504689659924, 0.15079544682614504] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 41, 12]]
** centroid: 1, normalized-entropy: 0.7717094696953635, [(2, 41), (3, 12)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [69, 11, 0]]
** centroid: 4, normalized-entropy: 0.5776539033535634, [(1, 69), (2, 11)]
*** center 5: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [28, 34, 0]]
** centroid: 6, normalized-entropy: 0.9932338197397066, [(1, 28), (2, 34)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 44, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1756410434693098] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1756410434693098, 0.15948376432061195] ***
*** starting iteration: 2; err: [Inf, 0.1756410434693098, 0.15948376432061195] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1756410434693098, 0.15948376432061195, 0.15632850538752974] ***
*** starting iteration: 3; err: [Inf, 0.1756410434693098, 0.15948376432061195, 0.15632850538752974] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1756410434693098, 0.15948376432061195, 0.15632850538752974, 0.1550364440307021] ***
*** finished computation of 7 references, err: [Inf, 0.1756410434693098, 0.15948376432061195, 0.15632850538752974, 0.1550364440307021] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [32, 17, 0]]
** centroid: 1, normalized-entropy: 0.9313043685793762, [(1, 32), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [28, 34, 0]]
** centroid: 2, normalized-entropy: 0.9932338197397066, [(1, 28), (2, 34)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [8, 58, 0]]
** centroid: 3, normalized-entropy: 0.5328350630342235, [(1, 8), (2, 58)]
*** center 4: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 54, 15]]
** centroid: 6, normalized-entropy: 0.7553754125614286, [(2, 54), (3, 15)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [89, 12, 0]]
** centroid: 7, normalized-entropy: 0.5259359840917625, [(1, 89), (2, 12)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22467446938343347] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22467446938343347, 0.1656891864258796] ***
*** starting iteration: 2; err: [Inf, 0.22467446938343347, 0.1656891864258796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22467446938343347, 0.1656891864258796, 0.15265920617152007] ***
*** starting iteration: 3; err: [Inf, 0.22467446938343347, 0.1656891864258796, 0.15265920617152007] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22467446938343347, 0.1656891864258796, 0.15265920617152007, 0.1490261917198077] ***
*** finished computation of 7 references, err: [Inf, 0.22467446938343347, 0.1656891864258796, 0.15265920617152007, 0.1490261917198077] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [29, 44, 0]]
** centroid: 1, normalized-entropy: 0.9693253797191861, [(1, 29), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [27, 39, 0]]
** centroid: 2, normalized-entropy: 0.976020648236615, [(1, 27), (2, 39)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [12, 60, 0]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(1, 12), (2, 60)]
*** center 4: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 41, 17]]
** centroid: 6, normalized-entropy: 0.8726965039103788, [(2, 41), (3, 17)]
*** center 7: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19527925876528024] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19527925876528024, 0.16088690292090177] ***
*** starting iteration: 2; err: [Inf, 0.19527925876528024, 0.16088690292090177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19527925876528024, 0.16088690292090177, 0.15105307605862617] ***
*** starting iteration: 3; err: [Inf, 0.19527925876528024, 0.16088690292090177, 0.15105307605862617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19527925876528024, 0.16088690292090177, 0.15105307605862617, 0.14941899025440217] ***
*** finished computation of 7 references, err: [Inf, 0.19527925876528024, 0.16088690292090177, 0.15105307605862617, 0.14941899025440217] ***
*** center 1: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [45, 29, 0]]
** centroid: 2, normalized-entropy: 0.966009606256856, [(1, 45), (2, 29)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [55, 18, 0]]
** centroid: 3, normalized-entropy: 0.8058049113482652, [(1, 55), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [15, 68, 0]]
** centroid: 4, normalized-entropy: 0.6816559115981193, [(1, 15), (2, 68)]
*** center 5: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 65, 15]]
** centroid: 6, normalized-entropy: 0.6962122601251459, [(2, 65), (3, 15)]
*** center 7: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18762121622730046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18762121622730046, 0.15262622362282127] ***
*** starting iteration: 2; err: [Inf, 0.18762121622730046, 0.15262622362282127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18762121622730046, 0.15262622362282127, 0.14664057578518988] ***
*** starting iteration: 3; err: [Inf, 0.18762121622730046, 0.15262622362282127, 0.14664057578518988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18762121622730046, 0.15262622362282127, 0.14664057578518988, 0.14451232637465] ***
*** finished computation of 7 references, err: [Inf, 0.18762121622730046, 0.15262622362282127, 0.14664057578518988, 0.14451232637465] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [11, 66, 0]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(1, 11), (2, 66)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [66, 29, 0]]
** centroid: 3, normalized-entropy: 0.8876297058429742, [(1, 66), (2, 29)]
*** center 4: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [33, 21, 0]]
** centroid: 6, normalized-entropy: 0.9640787648082293, [(1, 33), (2, 21)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 64, 17]]
** centroid: 7, normalized-entropy: 0.7412466905234424, [(2, 64), (3, 17)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2140344857685268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2140344857685268, 0.16439846964925528] ***
*** starting iteration: 2; err: [Inf, 0.2140344857685268, 0.16439846964925528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2140344857685268, 0.16439846964925528, 0.15679000844433905] ***
*** starting iteration: 3; err: [Inf, 0.2140344857685268, 0.16439846964925528, 0.15679000844433905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2140344857685268, 0.16439846964925528, 0.15679000844433905, 0.14948057539900764] ***
*** finished computation of 7 references, err: [Inf, 0.2140344857685268, 0.16439846964925528, 0.15679000844433905, 0.14948057539900764] ***
*** center 1: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [6, 63, 0]]
** centroid: 2, normalized-entropy: 0.42622865699814483, [(1, 6), (2, 63)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 65, 13]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(2, 65), (3, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [56, 8, 0]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(1, 56), (2, 8)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 53, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [92, 2, 0]]
** centroid: 7, normalized-entropy: 0.14854949043034832, [(1, 92), (2, 2)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1796052957419306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1796052957419306, 0.14808598628453912] ***
*** starting iteration: 2; err: [Inf, 0.1796052957419306, 0.14808598628453912] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1796052957419306, 0.14808598628453912, 0.14569983349926768] ***
*** starting iteration: 3; err: [Inf, 0.1796052957419306, 0.14808598628453912, 0.14569983349926768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1796052957419306, 0.14808598628453912, 0.14569983349926768, 0.14445956975966692] ***
*** finished computation of 7 references, err: [Inf, 0.1796052957419306, 0.14808598628453912, 0.14569983349926768, 0.14445956975966692] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [62, 15, 0]]
** centroid: 1, normalized-entropy: 0.7114160189012126, [(1, 62), (2, 15)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 54, 19]]
** centroid: 2, normalized-entropy: 0.8271595195340525, [(2, 54), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [64, 22, 0]]
** centroid: 3, normalized-entropy: 0.8203636429576731, [(1, 64), (2, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [40, 27, 0]]
** centroid: 7, normalized-entropy: 0.9726699911457106, [(1, 40), (2, 27)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24293402871862055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24293402871862055, 0.18164962210133673] ***
*** starting iteration: 2; err: [Inf, 0.24293402871862055, 0.18164962210133673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24293402871862055, 0.18164962210133673, 0.15737819615006446] ***
*** starting iteration: 3; err: [Inf, 0.24293402871862055, 0.18164962210133673, 0.15737819615006446] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24293402871862055, 0.18164962210133673, 0.15737819615006446, 0.15350640758685768] ***
*** finished computation of 7 references, err: [Inf, 0.24293402871862055, 0.18164962210133673, 0.15737819615006446, 0.15350640758685768] ***
*** center 1: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [29, 37, 0]]
** centroid: 2, normalized-entropy: 0.9893755831922303, [(1, 29), (2, 37)]
*** center 3: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [35, 22, 0]]
** centroid: 4, normalized-entropy: 0.9621461334087003, [(1, 35), (2, 22)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 88, 16]]
** centroid: 5, normalized-entropy: 0.6193821946787638, [(2, 88), (3, 16)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [55, 2, 0]]
** centroid: 6, normalized-entropy: 0.2192973081321754, [(1, 55), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [35, 37, 0]]
** centroid: 7, normalized-entropy: 0.9994433330902989, [(1, 35), (2, 37)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21557680129352957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21557680129352957, 0.1559837288055569] ***
*** starting iteration: 2; err: [Inf, 0.21557680129352957, 0.1559837288055569] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21557680129352957, 0.1559837288055569, 0.15262000050768257] ***
*** starting iteration: 3; err: [Inf, 0.21557680129352957, 0.1559837288055569, 0.15262000050768257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21557680129352957, 0.1559837288055569, 0.15262000050768257, 0.14960208418918775] ***
*** finished computation of 7 references, err: [Inf, 0.21557680129352957, 0.1559837288055569, 0.15262000050768257, 0.14960208418918775] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [80, 35, 0]]
** centroid: 1, normalized-entropy: 0.8865408928220899, [(1, 80), (2, 35)]
*** center 2: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 9, 0]]
** centroid: 4, normalized-entropy: 0.5858732928619204, [(1, 55), (2, 9)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 71, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 50, 16]]
** centroid: 6, normalized-entropy: 0.7990485210442682, [(2, 50), (3, 16)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [35, 20, 0]]
** centroid: 7, normalized-entropy: 0.9456603046006401, [(1, 35), (2, 20)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17965453740488738] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17965453740488738, 0.1512213895842433] ***
*** starting iteration: 2; err: [Inf, 0.17965453740488738, 0.1512213895842433] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17965453740488738, 0.1512213895842433, 0.1452554053943604] ***
*** starting iteration: 3; err: [Inf, 0.17965453740488738, 0.1512213895842433, 0.1452554053943604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17965453740488738, 0.1512213895842433, 0.1452554053943604, 0.14456636125035585] ***
*** finished computation of 7 references, err: [Inf, 0.17965453740488738, 0.1512213895842433, 0.1452554053943604, 0.14456636125035585] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 44, 14]]
** centroid: 1, normalized-entropy: 0.7973265101474423, [(2, 44), (3, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 65, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [80, 4, 0]]
** centroid: 4, normalized-entropy: 0.2761954276479391, [(1, 80), (2, 4)]
*** center 5: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [10, 60, 0]]
** centroid: 6, normalized-entropy: 0.5916727785823274, [(1, 10), (2, 60)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [52, 7, 0]]
** centroid: 7, normalized-entropy: 0.5254506799086205, [(1, 52), (2, 7)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22372213320992887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22372213320992887, 0.17353373862802982] ***
*** starting iteration: 2; err: [Inf, 0.22372213320992887, 0.17353373862802982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22372213320992887, 0.17353373862802982, 0.16081894771568478] ***
*** starting iteration: 3; err: [Inf, 0.22372213320992887, 0.17353373862802982, 0.16081894771568478] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22372213320992887, 0.17353373862802982, 0.16081894771568478, 0.15200283485813998] ***
*** finished computation of 7 references, err: [Inf, 0.22372213320992887, 0.17353373862802982, 0.16081894771568478, 0.15200283485813998] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [29, 27, 0]]
** centroid: 1, normalized-entropy: 0.9990797181805819, [(1, 29), (2, 27)]
*** center 2: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [45, 30, 0]]
** centroid: 4, normalized-entropy: 0.9709505944546688, [(1, 45), (2, 30)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [16, 55, 0]]
** centroid: 5, normalized-entropy: 0.7698205808588191, [(1, 16), (2, 55)]
*** center 6: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 86, 10]]
** centroid: 7, normalized-entropy: 0.4820661480830933, [(2, 86), (3, 10)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2035873168129474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2035873168129474, 0.1488808186482638] ***
*** starting iteration: 2; err: [Inf, 0.2035873168129474, 0.1488808186482638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2035873168129474, 0.1488808186482638, 0.1459574643690139] ***
*** starting iteration: 3; err: [Inf, 0.2035873168129474, 0.1488808186482638, 0.1459574643690139] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2035873168129474, 0.1488808186482638, 0.1459574643690139, 0.14481380732171237] ***
*** finished computation of 7 references, err: [Inf, 0.2035873168129474, 0.1488808186482638, 0.1459574643690139, 0.14481380732171237] ***
*** center 1: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 33, 0]]
** centroid: 2, normalized-entropy: 0.9666186325481027, [(1, 51), (2, 33)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 68, 21]]
** centroid: 3, normalized-entropy: 0.7882487221644084, [(2, 68), (3, 21)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [22, 49, 0]]
** centroid: 4, normalized-entropy: 0.893010810044601, [(1, 22), (2, 49)]
*** center 5: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [39, 28, 0]]
** centroid: 7, normalized-entropy: 0.9804679314541813, [(1, 39), (2, 28)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1838981164507568] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1838981164507568, 0.15843934740684926] ***
*** starting iteration: 2; err: [Inf, 0.1838981164507568, 0.15843934740684926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1838981164507568, 0.15843934740684926, 0.1524702062867582] ***
*** starting iteration: 3; err: [Inf, 0.1838981164507568, 0.15843934740684926, 0.1524702062867582] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1838981164507568, 0.15843934740684926, 0.1524702062867582, 0.14962714109010994] ***
*** finished computation of 7 references, err: [Inf, 0.1838981164507568, 0.15843934740684926, 0.1524702062867582, 0.14962714109010994] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [77, 39, 0]]
** centroid: 1, normalized-entropy: 0.9211426316005454, [(1, 77), (2, 39)]
*** center 2: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [42, 26, 0]]
** centroid: 3, normalized-entropy: 0.9596868937742168, [(1, 42), (2, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [16, 38, 0]]
** centroid: 5, normalized-entropy: 0.876716288999464, [(1, 16), (2, 38)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 77, 16]]
** centroid: 6, normalized-entropy: 0.6623570516079519, [(2, 77), (3, 16)]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2032384858452715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2032384858452715, 0.15776392427273095] ***
*** starting iteration: 2; err: [Inf, 0.2032384858452715, 0.15776392427273095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2032384858452715, 0.15776392427273095, 0.14893694706447422] ***
*** starting iteration: 3; err: [Inf, 0.2032384858452715, 0.15776392427273095, 0.14893694706447422] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2032384858452715, 0.15776392427273095, 0.14893694706447422, 0.14725653802976013] ***
*** finished computation of 7 references, err: [Inf, 0.2032384858452715, 0.15776392427273095, 0.14893694706447422, 0.14725653802976013] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [30, 52, 0]]
** centroid: 1, normalized-entropy: 0.9474351361840305, [(1, 30), (2, 52)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 56, 16]]
** centroid: 2, normalized-entropy: 0.7642045065086204, [(2, 56), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 16, 0]]
** centroid: 3, normalized-entropy: 0.7424875695421234, [(1, 60), (2, 16)]
*** center 4: selecting labels [2] (freq >= 2) [from [1, 48, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [67, 5, 0]]
** centroid: 7, normalized-entropy: 0.3638469981769295, [(1, 67), (2, 5)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23611961752735078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23611961752735078, 0.16585018086433412] ***
*** starting iteration: 2; err: [Inf, 0.23611961752735078, 0.16585018086433412] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23611961752735078, 0.16585018086433412, 0.1536115948725492] ***
*** starting iteration: 3; err: [Inf, 0.23611961752735078, 0.16585018086433412, 0.1536115948725492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23611961752735078, 0.16585018086433412, 0.1536115948725492, 0.1479376262780279] ***
*** finished computation of 7 references, err: [Inf, 0.23611961752735078, 0.16585018086433412, 0.1536115948725492, 0.1479376262780279] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [47, 29, 0]]
** centroid: 1, normalized-entropy: 0.9591495543968941, [(1, 47), (2, 29)]
*** center 2: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 74, 20]]
** centroid: 4, normalized-entropy: 0.7467366074830678, [(2, 74), (3, 20)]
*** center 5: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [25, 42, 0]]
** centroid: 6, normalized-entropy: 0.9530483471581301, [(1, 25), (2, 42)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [67, 36, 0]]
** centroid: 7, normalized-entropy: 0.9336337717211408, [(1, 67), (2, 36)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20126270199753343] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20126270199753343, 0.1664244127497077] ***
*** starting iteration: 2; err: [Inf, 0.20126270199753343, 0.1664244127497077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20126270199753343, 0.1664244127497077, 0.15734058120287955] ***
*** starting iteration: 3; err: [Inf, 0.20126270199753343, 0.1664244127497077, 0.15734058120287955] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20126270199753343, 0.1664244127497077, 0.15734058120287955, 0.15189287756569683] ***
*** finished computation of 7 references, err: [Inf, 0.20126270199753343, 0.1664244127497077, 0.15734058120287955, 0.15189287756569683] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 77, 17]]
** centroid: 1, normalized-entropy: 0.6819353204567525, [(2, 77), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [74, 23, 0]]
** centroid: 3, normalized-entropy: 0.790206924188637, [(1, 74), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [14, 44, 0]]
** centroid: 4, normalized-entropy: 0.7973265101474423, [(1, 14), (2, 44)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 23, 0]]
** centroid: 5, normalized-entropy: 0.9279262619599757, [(1, 44), (2, 23)]
*** center 6: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [68, 5, 0]]
** centroid: 7, normalized-entropy: 0.3602750564216625, [(1, 68), (2, 5)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21793130245432257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21793130245432257, 0.16621287044230848] ***
*** starting iteration: 2; err: [Inf, 0.21793130245432257, 0.16621287044230848] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21793130245432257, 0.16621287044230848, 0.15766303483396768] ***
*** starting iteration: 3; err: [Inf, 0.21793130245432257, 0.16621287044230848, 0.15766303483396768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21793130245432257, 0.16621287044230848, 0.15766303483396768, 0.15595977747626602] ***
*** finished computation of 7 references, err: [Inf, 0.21793130245432257, 0.16621287044230848, 0.15766303483396768, 0.15595977747626602] ***
*** center 1: selecting labels [1] (freq >= 2) [from [28, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 83, 13]]
** centroid: 3, normalized-entropy: 0.572108447204188, [(2, 83), (3, 13)]
*** center 4: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 41, 0]]
** centroid: 5, normalized-entropy: 0.9577800211448372, [(1, 67), (2, 41)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [38, 32, 0]]
** centroid: 6, normalized-entropy: 0.9946937953613056, [(1, 38), (2, 32)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [40, 34, 0]]
** centroid: 7, normalized-entropy: 0.9952525494396791, [(1, 40), (2, 34)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19072680545970797] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19072680545970797, 0.14693521490786224] ***
*** starting iteration: 2; err: [Inf, 0.19072680545970797, 0.14693521490786224] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19072680545970797, 0.14693521490786224, 0.14366525081265719] ***
*** starting iteration: 3; err: [Inf, 0.19072680545970797, 0.14693521490786224, 0.14366525081265719] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19072680545970797, 0.14693521490786224, 0.14366525081265719, 0.1427216649930924] ***
*** finished computation of 7 references, err: [Inf, 0.19072680545970797, 0.14693521490786224, 0.14366525081265719, 0.1427216649930924] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [41, 32, 0]]
** centroid: 1, normalized-entropy: 0.9890076795739703, [(1, 41), (2, 32)]
*** center 2: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 61, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 25, 0]]
** centroid: 4, normalized-entropy: 0.8827586787955116, [(1, 58), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [69, 6, 0]]
** centroid: 5, normalized-entropy: 0.4021791902022729, [(1, 69), (2, 6)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 53, 15]]
** centroid: 6, normalized-entropy: 0.7612401496918493, [(2, 53), (3, 15)]
*** center 7: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20138080143555998] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20138080143555998, 0.1582445714492351] ***
*** starting iteration: 2; err: [Inf, 0.20138080143555998, 0.1582445714492351] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20138080143555998, 0.1582445714492351, 0.15015923990216107] ***
*** starting iteration: 3; err: [Inf, 0.20138080143555998, 0.1582445714492351, 0.15015923990216107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20138080143555998, 0.1582445714492351, 0.15015923990216107, 0.14508835789561272] ***
*** finished computation of 7 references, err: [Inf, 0.20138080143555998, 0.1582445714492351, 0.15015923990216107, 0.14508835789561272] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 81, 14]]
** centroid: 1, normalized-entropy: 0.6032154068313579, [(2, 81), (3, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 28, 0]]
** centroid: 2, normalized-entropy: 0.9531971725430559, [(1, 47), (2, 28)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 31, 0]]
** centroid: 3, normalized-entropy: 0.9465202215633438, [(1, 54), (2, 31)]
*** center 4: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 48, 0]]
** centroid: 5, normalized-entropy: 0.8865408928220899, [(1, 21), (2, 48)]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2839920652061701] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2839920652061701, 0.1846763915186748] ***
*** starting iteration: 2; err: [Inf, 0.2839920652061701, 0.1846763915186748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2839920652061701, 0.1846763915186748, 0.17188496612012386] ***
*** starting iteration: 3; err: [Inf, 0.2839920652061701, 0.1846763915186748, 0.17188496612012386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2839920652061701, 0.1846763915186748, 0.17188496612012386, 0.16432112387940287] ***
*** finished computation of 7 references, err: [Inf, 0.2839920652061701, 0.1846763915186748, 0.17188496612012386, 0.16432112387940287] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [70, 3, 0]]
** centroid: 1, normalized-entropy: 0.24729443986205674, [(1, 70), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [7, 67, 0]]
** centroid: 2, normalized-entropy: 0.45162282218200417, [(1, 7), (2, 67)]
*** center 3: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [56, 2, 0]]
** centroid: 4, normalized-entropy: 0.21639693245126485, [(1, 56), (2, 2)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 99, 17]]
** centroid: 5, normalized-entropy: 0.6011432909108727, [(2, 99), (3, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [41, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [82, 25, 0]]
** centroid: 7, normalized-entropy: 0.7843112002044088, [(1, 82), (2, 25)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.265286937173456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.265286937173456, 0.18338456967659295] ***
*** starting iteration: 2; err: [Inf, 0.265286937173456, 0.18338456967659295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.265286937173456, 0.18338456967659295, 0.16676942082773893] ***
*** starting iteration: 3; err: [Inf, 0.265286937173456, 0.18338456967659295, 0.16676942082773893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.265286937173456, 0.18338456967659295, 0.16676942082773893, 0.1588978536427021] ***
*** finished computation of 7 references, err: [Inf, 0.265286937173456, 0.18338456967659295, 0.16676942082773893, 0.1588978536427021] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 40, 0]]
** centroid: 1, normalized-entropy: 0.9637261681930318, [(1, 63), (2, 40)]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [31, 36, 0]]
** centroid: 3, normalized-entropy: 0.995978956518722, [(1, 31), (2, 36)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 24, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 52, 14]]
** centroid: 5, normalized-entropy: 0.7455178428108284, [(2, 52), (3, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [119, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [15, 33, 0]]
** centroid: 7, normalized-entropy: 0.8960382325345574, [(1, 15), (2, 33)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18050284495018423] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18050284495018423, 0.15573995508253574] ***
*** starting iteration: 2; err: [Inf, 0.18050284495018423, 0.15573995508253574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18050284495018423, 0.15573995508253574, 0.14973845710535533] ***
*** starting iteration: 3; err: [Inf, 0.18050284495018423, 0.15573995508253574, 0.14973845710535533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18050284495018423, 0.15573995508253574, 0.14973845710535533, 0.14737136419303715] ***
*** finished computation of 7 references, err: [Inf, 0.18050284495018423, 0.15573995508253574, 0.14973845710535533, 0.14737136419303715] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [72, 3, 0]]
** centroid: 1, normalized-entropy: 0.24229218908241482, [(1, 72), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 75, 17]]
** centroid: 2, normalized-entropy: 0.6904285855304167, [(2, 75), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [21, 48, 0]]
** centroid: 3, normalized-entropy: 0.8865408928220899, [(1, 21), (2, 48)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [75, 12, 0]]
** centroid: 4, normalized-entropy: 0.5787946246321198, [(1, 75), (2, 12)]
*** center 5: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [44, 41, 0]]
** centroid: 6, normalized-entropy: 0.999101248968496, [(1, 44), (2, 41)]
*** center 7: selecting labels [1] (freq >= 2) [from [39, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18312065563956276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18312065563956276, 0.16637933450425044] ***
*** starting iteration: 2; err: [Inf, 0.18312065563956276, 0.16637933450425044] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18312065563956276, 0.16637933450425044, 0.1599195236666128] ***
*** starting iteration: 3; err: [Inf, 0.18312065563956276, 0.16637933450425044, 0.1599195236666128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18312065563956276, 0.16637933450425044, 0.1599195236666128, 0.15540539012663065] ***
*** finished computation of 7 references, err: [Inf, 0.18312065563956276, 0.16637933450425044, 0.1599195236666128, 0.15540539012663065] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [30, 35, 0]]
** centroid: 1, normalized-entropy: 0.9957274520849256, [(1, 30), (2, 35)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 61, 6]]
** centroid: 2, normalized-entropy: 0.43497348007474274, [(2, 61), (3, 6)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [67, 7, 0]]
** centroid: 3, normalized-entropy: 0.45162282218200417, [(1, 67), (2, 7)]
*** center 4: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [75, 2, 0]]
** centroid: 5, normalized-entropy: 0.17378132267943294, [(1, 75), (2, 2)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 78, 10]]
** centroid: 6, normalized-entropy: 0.5107878229540133, [(2, 78), (3, 10)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [55, 8, 0]]
** centroid: 7, normalized-entropy: 0.5491087450260074, [(1, 55), (2, 8)]
finished with 8 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 366,3 => 31,1 => 603), Dict(2 => 383,3 => 24,1 => 593))
[ Info: ===== scores for single classifier: {"micro_f1":0.958,"precision":0.958,"recall":0.958,"macro_recall":0.9668367683901392,"macro_f1":0.9241539848852304,"accuracy":0.958,"class_f1":{"2":0.9436997319034852,"3":0.8571428571428571,"1":0.971619365609349},"class_precision":{"2":0.9696969696969697,"3":0.75,"1":0.9619834710743802},"class_recall":{"2":0.9190600522193212,"3":1.0,"1":0.9814502529510961}}
[ Info: ===== scores for 1: {"micro_f1":0.975,"precision":0.975,"recall":0.975,"macro_recall":0.9810158257712184,"macro_f1":0.9692501402149852,"accuracy":0.975,"class_f1":{"2":0.9670619235836627,"3":0.9600000000000001,"1":0.9806884970612931},"class_precision":{"2":0.976063829787234,"3":0.9230769230769231,"1":0.9765886287625418},"class_recall":{"2":0.95822454308094,"3":1.0,"1":0.984822934232715}}
[ Info: ===== scores for 5: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9778427461668405,"macro_f1":0.9603517583746592,"accuracy":0.971,"class_f1":{"2":0.9616908850726551,"3":0.9411764705882353,"1":0.9781879194630873},"class_precision":{"2":0.9732620320855615,"3":0.8888888888888888,"1":0.9732888146911519},"class_recall":{"2":0.9503916449086162,"3":1.0,"1":0.9831365935919055}}
[ Info: ===== scores for 7: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9807619206964925,"macro_f1":0.9568021470399609,"accuracy":0.974,"class_f1":{"2":0.9658792650918636,"3":0.923076923076923,"1":0.9814502529510961},"class_precision":{"2":0.9709762532981531,"3":0.8571428571428571,"1":0.9814502529510961},"class_recall":{"2":0.9608355091383812,"3":1.0,"1":0.9814502529510961}}
[ Info: ===== scores for 9: {"micro_f1":0.982,"precision":0.982,"recall":0.982,"macro_recall":0.9861834544886161,"macro_f1":0.9625360669220319,"accuracy":0.982,"class_f1":{"2":0.9763157894736841,"3":0.923076923076923,"1":0.9882154882154882},"class_precision":{"2":0.9840848806366048,"3":0.8571428571428571,"1":0.9865546218487395},"class_recall":{"2":0.9686684073107049,"3":1.0,"1":0.9898819561551433}}
[ Info: ===== scores for 11: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.984188905375596,"macro_f1":0.9548581276165411,"accuracy":0.979,"class_f1":{"2":0.9724047306176086,"3":0.9056603773584906,"1":0.9865092748735245},"class_precision":{"2":0.9788359788359788,"3":0.8275862068965517,"1":0.9865092748735245},"class_recall":{"2":0.9660574412532638,"3":1.0,"1":0.9865092748735245}}
(score = 0.971, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.975, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.975, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.972, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.975,"k":1,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.975,"precision":0.975,"recall":0.975,"macro_recall":0.9810158257712184,"macro_f1":0.9692501402149852,"accuracy":0.975,"class_f1":{"2":0.9670619235836627,"3":0.9600000000000001,"1":0.9806884970612931},"class_precision":{"2":0.976063829787234,"3":0.9230769230769231,"1":0.9765886287625418},"class_recall":{"2":0.95822454308094,"3":1.0,"1":0.984822934232715}}
Test Summary: | Pass  Total
AKNC          |    8      8
[440, 2, 2, 2, 1, 2, 1, 1, 17, 2, 1, 4, 4, 2, 1, 2, 3, 10, 8, 5, 13, 6, 4, 49, 13, 1, 30, 11, 32, 4, 4, 10, 26, 2, 12, 36, 3, 9, 15, 22, 2, 9, 2, 21, 5, 6, 22, 2, 5, 3, 7, 48, 2, 8, 7, 25, 16, 52, 13, 38, 1, 9, 2, 1, 6, 39, 42, 10, 23, 5, 4, 42, 9, 13, 20, 14, 4, 9, 9, 14, 14, 6, 25, 13, 13, 60, 25, 16, 62, 7, 4, 14, 1, 7, 13, 2, 21, 21, 4, 23, 74, 8, 18, 9, 5, 3, 6, 184, 6, 43, 97, 67, 10, 27, 10, 12, 8, 49, 13, 11, 20, 4, 15, 26, 9, 10, 9, 11, 17, 13, 19, 1, 10, 56, 3, 8, 79, 28, 8, 9, 27, 3, 45, 5, 24, 6, 9, 564, 3, 214, 64, 7, 8, 96, 7, 49, 12, 39, 217, 15, 91, 14, 50, 68, 18, 38, 3, 8, 4, 43, 12, 14, 105, 62, 23, 97, 1, 8, 32, 86, 18, 7, 13, 50, 45, 29, 79, 9, 3, 16, 12, 47, 36, 12, 12, 2, 22, 6, 19, 1, 48, 10, 29, 14, 34, 13, 12, 11, 24, 9, 123, 69, 25, 1, 32, 25, 151, 82, 4, 22, 2, 8, 47, 41, 2, 5, 10, 10, 10, 6, 4, 35, 4, 30, 119, 17, 34, 31, 21, 7, 11, 28, 60, 887, 441, 18, 16, 83, 3, 6, 12, 8, 31, 65, 230, 17, 30, 9, 3, 66, 3, 64, 156, 97, 8, 6, 79, 21, 15, 43, 29, 60, 11, 44, 6, 6, 19, 58, 15, 230, 12, 49, 28, 4, 18, 14, 58, 30, 4, 7, 79, 40, 7, 2, 50, 3, 9, 9, 22, 4]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6349999999999997, speedup = 0.24443953337858532, eval_ratio = 0.076175)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.393926711309524,"recall":0.3862847222222224,"f1":null,"seconds":0.0001751333475112915,"exhaustive_search_seconds":0.00036950036883354187,"evaluations":496.5859375,"distances_sum":1659.2232584548876}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5607638888888886,"recall":0.5607638888888886,"f1":null,"seconds":0.00028153322637081146,"exhaustive_search_seconds":0.00036950036883354187,"evaluations":663.4609375,"distances_sum":1621.5905122496379}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6684027777777772,"recall":0.6684027777777772,"f1":0.6684027777777772,"seconds":0.0003855079412460327,"exhaustive_search_seconds":0.00036950036883354187,"evaluations":823.5625,"distances_sum":1575.9520715764143}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7526041666666662,"recall":0.7526041666666662,"f1":0.7526041666666662,"seconds":0.000493241474032402,"exhaustive_search_seconds":0.00036950036883354187,"evaluations":973.2265625,"distances_sum":1547.1268468489131}
KCenters.DeloneInvIndex> reached performance {"precision":0.8081597222222217,"recall":0.8081597222222217,"f1":0.8081597222222217,"seconds":0.0007172655314207077,"exhaustive_search_seconds":0.00036950036883354187,"evaluations":1115.6875,"distances_sum":1528.4701806937312}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7939999999999998, speedup = 0.6677763930156239, eval_ratio = 0.10745899999999999)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
