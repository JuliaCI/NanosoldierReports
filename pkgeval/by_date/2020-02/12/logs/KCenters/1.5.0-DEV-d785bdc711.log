Julia Version 1.5.0-DEV.263
Commit d785bdc711 (2020-02-12 15:14 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed MappedArrays ──────────────── v0.2.2
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed DataAPI ───────────────────── v1.1.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed KCenters ──────────────────── v0.1.13
  Installed Tables ────────────────────── v1.0.0
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataStructures ────────────── v0.17.9
  Installed Missings ──────────────────── v0.4.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Parsers ───────────────────── v0.3.11
  Installed MLDataUtils ───────────────── v0.5.0
  Installed StatsBase ─────────────────── v0.32.0
  Installed MLDataPattern ─────────────── v0.5.0
  Installed JSON ──────────────────────── v0.21.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed TableTraits ───────────────── v1.0.0
  Installed Compat ────────────────────── v3.5.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed Reexport ──────────────────── v0.2.0
  Installed OrderedCollections ────────── v1.1.0
  Installed DataFrames ────────────────── v0.18.4
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.1.13
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.5.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.18.4
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.1.13
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_oFHlgd/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.5.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.18.4
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.1.13
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.0
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9364293802777927
[ Info: 0.8321307849884033
[ Info: 0.5544053038458029
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3297847175846497
mean(cdnet.distances) = 0.34124510750174525
mean(crand.distances) = 0.3572680462896824
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4423828125, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4423828125,"f1":null,"seconds":3.9655715227127075e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":6.53125,"distances_sum":1173.0728301540073}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1787109375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1787109375,"f1":null,"seconds":3.166496753692627e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":5.6484375,"distances_sum":488.53927299207373}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4423828125,"state":{"ssize":5,"bsize":2},"perf":{"precision":null,"recall":0.4423828125,"f1":null,"seconds":3.9655715227127075e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":6.53125,"distances_sum":1173.0728301540073}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6748046875, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6748046875,"f1":0.7955419580419589,"seconds":4.8335641622543335e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":7.703125,"distances_sum":1984.908694864547}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8537920412920421,"seconds":5.301088094711304e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.1796875,"distances_sum":2318.485105932109}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7548828125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.8537920412920421,"seconds":5.301088094711304e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.1796875,"distances_sum":2318.485105932109}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.950303342490843,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.7109375,"distances_sum":3107.927272520218}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9076928280053289,"seconds":5.539506673812866e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.359375,"distances_sum":2740.0451983060743}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9021062271062279,"seconds":5.5301934480667114e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.328125,"distances_sum":2710.6586079541607}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9594322344322348,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.8125,"distances_sum":3168.809865960508}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9594322344322348,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.8125,"distances_sum":3168.809865960508}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9267578125,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9594322344322348,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.8125,"distances_sum":3168.809865960508}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.732421875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.732421875,"f1":0.8376612970362979,"seconds":4.92483377456665e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.15625,"distances_sum":2112.366846338516}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6611328125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6611328125,"f1":0.7880962787212796,"seconds":4.686415195465088e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":7.7734375,"distances_sum":1862.8114322750337}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.732421875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.732421875,"f1":0.8376612970362979,"seconds":4.92483377456665e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.15625,"distances_sum":2112.366846338516}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8503730644355653,"seconds":5.1818788051605225e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.171875,"distances_sum":2165.83538179078}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9422905219780224,"seconds":6.0033053159713745e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.7890625,"distances_sum":2793.7090063986834}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8984375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8984375,"f1":0.9422905219780224,"seconds":6.0033053159713745e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.7890625,"distances_sum":2793.7090063986834}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9579269688644696,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.8515625,"distances_sum":2918.4412217232334}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9579269688644696,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.8515625,"distances_sum":2918.4412217232334}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9248046875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9579269688644696,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.8515625,"distances_sum":2918.4412217232334}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2509765625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2509765625,"f1":null,"seconds":3.5800039768218994e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.796875,"distances_sum":646.5455524293652}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.568359375,"f1":0.7083147755022762,"seconds":4.468485713005066e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.9765625,"distances_sum":1501.2371590831167}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.568359375,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.568359375,"f1":0.7083147755022762,"seconds":4.468485713005066e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.9765625,"distances_sum":1501.2371590831167}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8529767107892117,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.4453125,"distances_sum":2097.337520901239}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.755859375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.755859375,"f1":0.8529767107892117,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.4453125,"distances_sum":2097.337520901239}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9394803113553121,"seconds":0.0002300255000591278,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.734375,"distances_sum":2693.1946792382532}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8587771603396612,"seconds":4.976987838745117e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.359375,"distances_sum":2168.7388711799645}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9571485805860812,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8671875,"distances_sum":2881.3228950073244}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.944560127372628,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.7578125,"distances_sum":2738.534303335295}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9571485805860812,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8671875,"distances_sum":2881.3228950073244}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9267578125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9571485805860812,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8671875,"distances_sum":2881.3228950073244}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8466268106893117,"seconds":4.857778549194336e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.3984375,"distances_sum":2128.2678874190265}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.744140625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.744140625,"f1":0.8466268106893117,"seconds":4.857778549194336e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.3984375,"distances_sum":2128.2678874190265}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.973328754578755,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.9296875,"distances_sum":3064.2426069728467}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.973328754578755,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.9296875,"distances_sum":3064.2426069728467}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.973328754578755,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.9296875,"distances_sum":3064.2426069728467}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.973328754578755,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.9296875,"distances_sum":3064.2426069728467}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2626953125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2626953125,"f1":null,"seconds":3.155320882797241e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":6.4453125,"distances_sum":506.92382173243396}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5537109375, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5537109375,"f1":0.6951005591630598,"seconds":4.297122359275818e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.78125,"distances_sum":1077.0177358900478}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5537109375,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.5537109375,"f1":0.6951005591630598,"seconds":4.297122359275818e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.78125,"distances_sum":1077.0177358900478}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.900686813186814,"seconds":5.299225449562073e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.765625,"distances_sum":1874.5318426358788}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9374141483516489,"seconds":5.494803190231323e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8984375,"distances_sum":2081.9944618149502}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5703125, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.5703125,"f1":0.7113154206904213,"seconds":4.148110747337341e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.875,"distances_sum":1120.2122394815997}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.7976721195471203,"seconds":4.567205905914307e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.375,"distances_sum":1403.5349022183862}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5673828125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5673828125,"f1":0.7033520299145304,"seconds":4.116445779800415e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.7109375,"distances_sum":1125.938918319042}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.890625,"f1":0.9374141483516489,"seconds":5.494803190231323e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8984375,"distances_sum":2081.9944618149502}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9677655677655683,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.984375,"distances_sum":2258.9905217631517}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9681204212454216,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.90625,"distances_sum":2274.393734088745}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9410974442224448,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.9453125,"distances_sum":2108.024501545656}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9721554487179489,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.96875,"distances_sum":2293.886255681851}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.945100732600733,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8828125,"distances_sum":2150.8975532411428}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.952237866300367,"seconds":6.025657057762146e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.9609375,"distances_sum":2148.177855228882}, best_list's length: 15, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":9,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9721554487179489,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.96875,"distances_sum":2293.886255681851}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":9,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9721554487179489,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.96875,"distances_sum":2293.886255681851}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.740234375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.740234375,"f1":0.8407316641691651,"seconds":4.986301064491272e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.84375,"distances_sum":1645.339595796938}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.734375,"f1":0.8383449883449892,"seconds":5.0906091928482056e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.796875,"distances_sum":1617.3126578117813}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8508559149184158,"seconds":5.031004548072815e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.9296875,"distances_sum":1663.984254151643}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7509765625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7509765625,"f1":0.8508559149184158,"seconds":5.031004548072815e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.9296875,"distances_sum":1663.984254151643}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9681375915750919,"seconds":5.898997187614441e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.859375,"distances_sum":2292.992571818537}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9200325715950725,"seconds":5.7015568017959595e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.765625,"distances_sum":2019.2841321205804}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.91045412920413,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.6953125,"distances_sum":1914.8961066269449}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9443712537462542,"seconds":6.034970283508301e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.7578125,"distances_sum":2154.981148470787}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.948946886446887,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.765625,"distances_sum":2181.6796104845544}, best_list's length: 16, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9681375915750919,"seconds":5.898997187614441e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.859375,"distances_sum":2292.992571818537}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9764880952380957,"seconds":6.161630153656006e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.9453125,"distances_sum":2326.540076945998}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9792410714285715,"seconds":6.159767508506775e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.9609375,"distances_sum":2343.003150150385}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9779017857142861,"seconds":6.452202796936035e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.953125,"distances_sum":2329.591791097357}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9737179487179491,"seconds":6.3050538301467896e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.9296875,"distances_sum":2318.3094347726683}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9792410714285715,"seconds":6.159767508506775e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.9609375,"distances_sum":2343.003150150385}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9792410714285715,"seconds":6.159767508506775e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.9609375,"distances_sum":2343.003150150385}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8618912337662344,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.2421875,"distances_sum":1713.0122519502802}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5478515625, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5478515625,"f1":0.6907918470418477,"seconds":4.708766937255859e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":7.609375,"distances_sum":1071.1590829749582}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.8036271020646029,"seconds":5.187466740608215e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.03125,"distances_sum":1440.4436168744462}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.771484375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.771484375,"f1":0.8618912337662344,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.2421875,"distances_sum":1713.0122519502802}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9431235431235435,"seconds":6.288290023803711e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.8359375,"distances_sum":2150.7757012924435}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.902344530469531,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.4765625,"distances_sum":1928.9327756192436}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9411229395604404,"seconds":6.0442835092544556e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.84375,"distances_sum":2142.723515142109}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9278247793872798,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.75,"distances_sum":2077.0594727755683}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8675485972360981,"seconds":5.4836273193359375e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.3359375,"distances_sum":1713.9894823820605}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9431235431235435,"seconds":6.288290023803711e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.8359375,"distances_sum":2150.7757012924435}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9566849816849821,"seconds":6.085261702537537e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.84375,"distances_sum":2261.9205462936434}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9794299450549453,"seconds":6.224960088729858e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.9453125,"distances_sum":2386.786352177878}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9603823260073265,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.828125,"distances_sum":2275.0364430726195}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9591231684981687,"seconds":6.258487701416016e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.84375,"distances_sum":2273.4080074087465}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9641197344322348,"seconds":6.230548024177551e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.9453125,"distances_sum":2270.0033502026054}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9560496794871798,"seconds":6.346032023429871e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.84375,"distances_sum":2253.2276158016416}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9794299450549453,"seconds":6.224960088729858e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.9453125,"distances_sum":2386.786352177878}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9794299450549453,"seconds":6.224960088729858e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.9453125,"distances_sum":2386.786352177878}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3779296875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3779296875,"f1":null,"seconds":3.254041075706482e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":5.734375,"distances_sum":784.7989570829303}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.19140625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.19140625,"f1":null,"seconds":2.8051435947418213e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":5.546875,"distances_sum":433.50109124101266}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3779296875,"state":{"ssize":4,"bsize":2},"perf":{"precision":null,"recall":0.3779296875,"f1":null,"seconds":3.254041075706482e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":5.734375,"distances_sum":784.7989570829303}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.71875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.71875,"f1":0.8245353604728614,"seconds":4.569068551063538e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.7890625,"distances_sum":1577.9448264526984}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.57421875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.57421875,"f1":0.7129774739149745,"seconds":4.237517714500427e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.453125,"distances_sum":1214.6798984801494}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6826171875,"f1":0.7986258533133541,"seconds":4.367902874946594e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.5859375,"distances_sum":1466.3166112397132}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.396484375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.396484375,"f1":null,"seconds":3.507360816001892e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":5.71875,"distances_sum":842.5182246076756}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8025989635364643,"seconds":4.623085260391235e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.671875,"distances_sum":1524.9856068479505}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69921875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.69921875,"f1":0.8109206765456773,"seconds":4.4014304876327515e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.6953125,"distances_sum":1492.562986825507}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.71875,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.71875,"f1":0.8245353604728614,"seconds":4.569068551063538e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.7890625,"distances_sum":1577.9448264526984}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7998046875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.7998046875,"f1":0.8802572427572438,"seconds":5.152076482772827e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.2890625,"distances_sum":1860.9151155006168}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9212168040293046,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.609375,"distances_sum":2123.2694718836906}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8095703125, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8095703125,"f1":0.8878954378954388,"seconds":5.023553967475891e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.40625,"distances_sum":1878.7568372358826}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.79296875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.79296875,"f1":0.8769662629037637,"seconds":5.11854887008667e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.296875,"distances_sum":1851.1204187714645}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7978515625, conf: {"ssize":10,"bsize":6}, perf: {"precision":1.0,"recall":0.7978515625,"f1":0.8787837162837171,"seconds":5.00120222568512e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.2578125,"distances_sum":1888.5643956492424}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8671875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8671875,"f1":0.9212168040293046,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.609375,"distances_sum":2123.2694718836906}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8671875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8671875,"f1":0.9212168040293046,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.609375,"distances_sum":2123.2694718836906}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8669080919080929,"seconds":5.114823579788208e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.921875,"distances_sum":1807.6473500580648}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.400390625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.400390625,"f1":null,"seconds":3.3266842365264893e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":5.8203125,"distances_sum":816.2419389993978}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.384765625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.384765625,"f1":null,"seconds":3.285706043243408e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":5.859375,"distances_sum":779.4161019853952}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.779296875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.779296875,"f1":0.8669080919080929,"seconds":5.114823579788208e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.921875,"distances_sum":1807.6473500580648}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80078125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.80078125,"f1":0.8809039918414925,"seconds":4.976987838745117e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.0234375,"distances_sum":1924.350198350377}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8898695054945063,"seconds":4.764646291732788e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.109375,"distances_sum":1910.135044681187}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.8125,"f1":0.8898695054945063,"seconds":4.764646291732788e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.109375,"distances_sum":1910.135044681187}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9484432234432238,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7265625,"distances_sum":2308.179826908433}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9182265651015659,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.6015625,"distances_sum":2141.844347120344}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9222990551115557,"seconds":5.185604095458984e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.625,"distances_sum":2149.923842476119}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9250889735264743,"seconds":5.207955837249756e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.5859375,"distances_sum":2202.243466472704}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9091796875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9484432234432238,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7265625,"distances_sum":2308.179826908433}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9091796875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9484432234432238,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7265625,"distances_sum":2308.179826908433}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1767578125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1767578125,"f1":null,"seconds":2.982094883918762e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":5.7421875,"distances_sum":402.74768282329916}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8554783757908766,"seconds":4.859641194343567e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.9375,"distances_sum":1727.3827407467932}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.166015625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.166015625,"f1":null,"seconds":2.946704626083374e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":5.6953125,"distances_sum":333.7349641425233}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.8554783757908766,"seconds":4.859641194343567e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.9375,"distances_sum":1727.3827407467932}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9476648351648356,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.6796875,"distances_sum":2281.046904712843}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9476648351648356,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.6796875,"distances_sum":2281.046904712843}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":6,"bsize":13}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.976842948717949,"seconds":6.077811121940613e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9609375,"distances_sum":2441.753429428289}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9716796875, conf: {"ssize":3,"bsize":13}, perf: {"precision":1.0,"recall":0.9716796875,"f1":0.9845982142857145,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9375,"distances_sum":2508.515546044667}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9716796875,"state":{"ssize":3,"bsize":13},"perf":{"precision":1.0,"recall":0.9716796875,"f1":0.9845982142857145,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9375,"distances_sum":2508.515546044667}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9716796875,"state":{"ssize":3,"bsize":13},"perf":{"precision":1.0,"recall":0.9716796875,"f1":0.9845982142857145,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9375,"distances_sum":2508.515546044667}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1552734375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1552734375,"f1":null,"seconds":3.1851232051849365e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":6.9140625,"distances_sum":315.9432957002906}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1552734375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1552734375,"f1":null,"seconds":3.1851232051849365e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":6.9140625,"distances_sum":315.9432957002906}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.790216901154402,"seconds":4.395842552185059e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.5625,"distances_sum":1393.6213122041308}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6708984375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6708984375,"f1":0.790216901154402,"seconds":4.395842552185059e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.5625,"distances_sum":1393.6213122041308}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9510073260073264,"seconds":5.4836273193359375e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.7265625,"distances_sum":2254.460458382076}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73828125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.73828125,"f1":0.8430808774558783,"seconds":4.805624485015869e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.1484375,"distances_sum":1572.5171509511345}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9510073260073264,"seconds":5.4836273193359375e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.7265625,"distances_sum":2254.460458382076}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9666494963369967,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8515625,"distances_sum":2332.1001403429786}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.976247710622711,"seconds":5.476176738739014e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8984375,"distances_sum":2387.339769954599}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.976247710622711,"seconds":5.476176738739014e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8984375,"distances_sum":2387.339769954599}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.976247710622711,"seconds":5.476176738739014e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8984375,"distances_sum":2387.339769954599}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3759765625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3759765625,"f1":null,"seconds":3.1050294637680054e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":5.4296875,"distances_sum":779.1849003175221}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3759765625,"state":{"ssize":2,"bsize":2},"perf":{"precision":null,"recall":0.3759765625,"f1":null,"seconds":3.1050294637680054e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":5.4296875,"distances_sum":779.1849003175221}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9075637903762914,"seconds":5.109235644340515e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.4921875,"distances_sum":1941.8672130667169}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8388671875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8388671875,"f1":0.9075637903762914,"seconds":5.109235644340515e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.4921875,"distances_sum":1941.8672130667169}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9613896520146527,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8359375,"distances_sum":2293.492188981684}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9336595695970701,"seconds":5.321577191352844e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.7734375,"distances_sum":2137.399357185891}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9429601648351655,"seconds":5.379319190979004e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8203125,"distances_sum":2169.74947827662}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9613896520146527,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8359375,"distances_sum":2293.492188981684}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9306640625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9613896520146527,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8359375,"distances_sum":2293.492188981684}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3916015625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3916015625,"f1":null,"seconds":3.205612301826477e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":5.640625,"distances_sum":832.2076759559266}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3916015625,"state":{"ssize":4,"bsize":2},"perf":{"precision":null,"recall":0.3916015625,"f1":null,"seconds":3.205612301826477e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":5.640625,"distances_sum":832.2076759559266}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.544921875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.544921875,"f1":null,"seconds":4.0549784898757935e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":7.2890625,"distances_sum":1124.247951357685}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.564453125, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.564453125,"f1":0.7039007867132872,"seconds":4.103407263755798e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":7.359375,"distances_sum":1169.4856791939742}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8568972693972703,"seconds":4.8782676458358765e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.3828125,"distances_sum":1694.2444331694173}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":9,"bsize":3}, perf: {"precision":1.0,"recall":0.568359375,"f1":0.7093821109446115,"seconds":3.95067036151886e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":7.3203125,"distances_sum":1155.3072681384317}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76171875,"state":{"ssize":9,"bsize":5},"perf":{"precision":1.0,"recall":0.76171875,"f1":0.8568972693972703,"seconds":4.8782676458358765e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.3828125,"distances_sum":1694.2444331694173}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9096211080586089,"seconds":5.209818482398987e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.9453125,"distances_sum":1938.2322552525693}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9057291666666676,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.765625,"distances_sum":1980.8605226886818}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8953270687645695,"seconds":5.112960934638977e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.734375,"distances_sum":1904.8212812809184}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.926685814185815,"seconds":5.230307579040527e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.8046875,"distances_sum":2145.879413394663}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8740234375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8740234375,"f1":0.926685814185815,"seconds":5.230307579040527e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.8046875,"distances_sum":2145.879413394663}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8740234375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8740234375,"f1":0.926685814185815,"seconds":5.230307579040527e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.8046875,"distances_sum":2145.879413394663}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.517578125, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.517578125,"f1":0.6700015262515269,"seconds":3.850087523460388e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.0234375,"distances_sum":1120.9117022120142}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.642578125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.642578125,"f1":0.7686147186147192,"seconds":4.3120235204696655e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.5078125,"distances_sum":1470.7971219682022}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.84401483932734,"seconds":4.751607775688171e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.1484375,"distances_sum":1804.8358577991748}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.748046875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.748046875,"f1":0.84401483932734,"seconds":4.751607775688171e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.1484375,"distances_sum":1804.8358577991748}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9496336996337004,"seconds":5.2638351917266846e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.796875,"distances_sum":2287.2554795465994}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9286172161172166,"seconds":5.144625902175903e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.6875,"distances_sum":2181.8678398226157}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9391998626373632,"seconds":6.197020411491394e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.6796875,"distances_sum":2272.045893722434}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9422879204129211,"seconds":5.1353126764297485e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.765625,"distances_sum":2247.6775921321428}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9227621336996344,"seconds":4.980713129043579e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.5625,"distances_sum":2193.9093169410144}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9072935744810753,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7890625,"distances_sum":2031.3165284672414}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9496336996337004,"seconds":5.2638351917266846e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.796875,"distances_sum":2287.2554795465994}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9643601190476194,"seconds":5.381181836128235e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8828125,"distances_sum":2383.9156044525243}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9557723526473532,"seconds":5.068257451057434e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7421875,"distances_sum":2374.3897421212832}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9658310439560446,"seconds":5.302950739860535e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8984375,"distances_sum":2386.5574531730135}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9728250915750918,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.890625,"distances_sum":2456.8147175643703}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9580815018315021,"seconds":5.142763257026672e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7109375,"distances_sum":2392.1277696397533}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9527586996337002,"seconds":5.191192030906677e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.890625,"distances_sum":2288.1352795209264}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9728250915750918,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.890625,"distances_sum":2456.8147175643703}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9728250915750918,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.890625,"distances_sum":2456.8147175643703}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.873278284215785,"seconds":5.014240741729736e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.609375,"distances_sum":1757.4811227311593}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73046875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.73046875,"f1":0.8348753676878685,"seconds":4.98257577419281e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.515625,"distances_sum":1581.7685476934532}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7861328125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7861328125,"f1":0.873278284215785,"seconds":5.014240741729736e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.609375,"distances_sum":1757.4811227311593}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9660542582417588,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.953125,"distances_sum":2357.020529646505}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9590862262737265,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.90625,"distances_sum":2347.758877184347}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9054658882783893,"seconds":5.401670932769775e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.9609375,"distances_sum":1912.2037889243609}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9637737262737264,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.9921875,"distances_sum":2350.7239371342334}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9339400183150192,"seconds":5.9157609939575195e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.9453125,"distances_sum":2127.4714440731577}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9660542582417588,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.953125,"distances_sum":2357.020529646505}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9787774725274729,"seconds":5.977228283882141e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":9.0,"distances_sum":2464.4861040011338}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9739583333333338,"seconds":5.690380930900574e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.984375,"distances_sum":2413.4384619397133}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9721211080586083,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.984375,"distances_sum":2404.083553612087}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.974573863636364,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.9765625,"distances_sum":2417.781091854717}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9736435439560442,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.953125,"distances_sum":2428.7347380430733}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.982125686813187,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":9.0,"distances_sum":2468.804965827876}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9677734375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.982125686813187,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":9.0,"distances_sum":2468.804965827876}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9677734375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.982125686813187,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":9.0,"distances_sum":2468.804965827876}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8525677447552455,"seconds":4.988163709640503e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.5078125,"distances_sum":1697.3773033163695}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5322265625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5322265625,"f1":null,"seconds":3.824010491371155e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.828125,"distances_sum":1140.9267337474319}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8586944305694315,"seconds":4.8857182264328e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.5078125,"distances_sum":1725.2272092151554}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7626953125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7626953125,"f1":0.8586944305694315,"seconds":4.8857182264328e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.5078125,"distances_sum":1725.2272092151554}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.957858287545788,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.890625,"distances_sum":2341.8453585563966}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9165324259074266,"seconds":5.25452196598053e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.7265625,"distances_sum":2078.011764301433}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.8995707417582427,"seconds":5.319714546203613e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8046875,"distances_sum":1965.8331255708374}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9733459249084253,"seconds":5.502253770828247e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.921875,"distances_sum":2444.761255920198}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9442250457875463,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.84375,"distances_sum":2250.134588021692}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9733459249084253,"seconds":5.502253770828247e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.921875,"distances_sum":2444.761255920198}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9742387820512823,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.96875,"distances_sum":2446.823751768732}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9760817307692311,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9609375,"distances_sum":2454.9117882469914}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9741472069597074,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.921875,"distances_sum":2454.7772868979728}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9760817307692311,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9609375,"distances_sum":2454.9117882469914}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9760817307692311,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9609375,"distances_sum":2454.9117882469914}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.162109375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.162109375,"f1":null,"seconds":2.4437904357910156e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":4.1015625,"distances_sum":397.4029987741771}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6103515625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6103515625,"f1":0.7431814713064719,"seconds":4.278495907783508e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":7.1953125,"distances_sum":1378.4843387815647}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.32421875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.32421875,"f1":null,"seconds":3.129243850708008e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":4.8203125,"distances_sum":715.9235337198253}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6103515625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6103515625,"f1":0.7431814713064719,"seconds":4.278495907783508e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":7.1953125,"distances_sum":1378.4843387815647}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9052889818514827,"seconds":5.058944225311279e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.40625,"distances_sum":2033.1113325679144}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8530368936618946,"seconds":4.8782676458358765e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.1171875,"distances_sum":1751.2883907743164}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6484375, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6484375,"f1":0.7756431068931077,"seconds":4.209578037261963e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":7.4609375,"distances_sum":1451.8903266518519}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.837890625,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.837890625,"f1":0.9052889818514827,"seconds":5.058944225311279e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.40625,"distances_sum":2033.1113325679144}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9270006035631044,"seconds":5.321577191352844e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.734375,"distances_sum":2158.798103864159}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9666895604395608,"seconds":5.8766454458236694e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.875,"distances_sum":2419.6481755513796}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9506009615384623,"seconds":5.260109901428223e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.78125,"distances_sum":2339.9350367475336}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9666895604395608,"seconds":5.8766454458236694e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.875,"distances_sum":2419.6481755513796}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9666895604395608,"seconds":5.8766454458236694e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.875,"distances_sum":2419.6481755513796}}, n: 9
mean(cfft.distances) = 0.33994764342840444
mean(cdnet.distances) = 0.4261690496972041
mean(crand.distances) = 0.34172333153883716
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8622222222222221
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9022222222222224
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.9044444444444445
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8888888888888888
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9311111111111111
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9400000000000001
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9066666666666667
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9066666666666667
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9266666666666667
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9444444444444443
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8755555555555555
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9288888888888889
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9177777777777778
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9266666666666667
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9288888888888889
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8488888888888889
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8733333333333334
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9066666666666666
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9199999999999999
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9133333333333332
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9177777777777777
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8911111111111111
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8688888888888888
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8999999999999999
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8844444444444445
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8999999999999999
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX===== rocchio like>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX==== clustering>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
nc.class_map = [2, 1, 3, 1, 2, 3, 3, 3, 3, 3, 1, 2, 3, 3, 3, 2, 2, 3, 1, 3, 2]
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 10]]
** centroid: 8, normalized-entropy: 0.7793498372920851, [(2, 3), (3, 10)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 11, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 2, 2, 3, 3, 3, 3, 1]
acc = 0.9066666666666666
*** finished computation of 12 references, err: [Inf, 0.6261491636435191] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 7]]
** centroid: 9, normalized-entropy: 0.8812908992306927, [(2, 3), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 15 centroids; started with 12
acc = 0.9333333333333333
Test Summary:   | Pass  Total
NearestCentroid |   10     10
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.41045206746047325] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41045206746047325, 0.30025341362460284] ***
*** starting iteration: 2; err: [Inf, 0.41045206746047325, 0.30025341362460284] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41045206746047325, 0.30025341362460284, 0.2940663757367625] ***
*** starting iteration: 3; err: [Inf, 0.41045206746047325, 0.30025341362460284, 0.2940663757367625] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41045206746047325, 0.30025341362460284, 0.2940663757367625, 0.2929304608440323] ***
*** finished computation of 3 references, err: [Inf, 0.41045206746047325, 0.30025341362460284, 0.2940663757367625, 0.2929304608440323] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [69, 170, 21]]
** centroid: 1, normalized-entropy: 0.7583103912450186, [(1, 69), (2, 170), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [194, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [125, 87, 0]]
** centroid: 3, normalized-entropy: 0.9766981917254624, [(1, 125), (2, 87)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.40918514940460426] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40918514940460426, 0.29165459879167166] ***
*** starting iteration: 2; err: [Inf, 0.40918514940460426, 0.29165459879167166] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40918514940460426, 0.29165459879167166, 0.2883294742118785] ***
*** starting iteration: 3; err: [Inf, 0.40918514940460426, 0.29165459879167166, 0.2883294742118785] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40918514940460426, 0.29165459879167166, 0.2883294742118785, 0.28754133813507643] ***
*** finished computation of 3 references, err: [Inf, 0.40918514940460426, 0.29165459879167166, 0.2883294742118785, 0.28754133813507643] ***
*** center 1: selecting labels [1] (freq >= 2) [from [209, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [126, 89, 0]]
** centroid: 2, normalized-entropy: 0.9785298462545818, [(1, 126), (2, 89)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [65, 156, 22]]
** centroid: 3, normalized-entropy: 0.7780046428263774, [(1, 65), (2, 156), (3, 22)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33253191850417624] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33253191850417624, 0.30535432951513686] ***
*** starting iteration: 2; err: [Inf, 0.33253191850417624, 0.30535432951513686] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33253191850417624, 0.30535432951513686, 0.3012432776631667] ***
*** starting iteration: 3; err: [Inf, 0.33253191850417624, 0.30535432951513686, 0.3012432776631667] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33253191850417624, 0.30535432951513686, 0.3012432776631667, 0.300636751835571] ***
*** finished computation of 3 references, err: [Inf, 0.33253191850417624, 0.30535432951513686, 0.3012432776631667, 0.300636751835571] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [237, 6, 0]]
** centroid: 1, normalized-entropy: 0.16702680404522793, [(1, 237), (2, 6)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 175, 25]]
** centroid: 2, normalized-entropy: 0.5435644431995963, [(2, 175), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [149, 75, 0]]
** centroid: 3, normalized-entropy: 0.9197767464502239, [(1, 149), (2, 75)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1953885388076753] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1953885388076753, 0.16105491333912397] ***
*** finished computation of 7 references, err: [Inf, 0.1953885388076753, 0.16105491333912397] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [111, 40, 0]]
** centroid: 1, normalized-entropy: 0.8340518587929184, [(1, 111), (2, 40)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 52, 21]]
** centroid: 2, normalized-entropy: 0.8656939941993219, [(2, 52), (3, 21)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 87, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [115, 1, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [53, 42, 0]]
** centroid: 6, normalized-entropy: 0.9903070204513952, [(1, 53), (2, 42)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 35, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1921430835737728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1921430835737728, 0.16243822326551358] ***
*** finished computation of 7 references, err: [Inf, 0.1921430835737728, 0.16243822326551358] ***
*** center 1: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [119, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [31, 34, 0]]
** centroid: 5, normalized-entropy: 0.9984628557283827, [(1, 31), (2, 34)]
*** center 6: selecting labels [1, 2, 3] (freq >= 2) [from [10, 122, 22]]
** centroid: 6, normalized-entropy: 0.5826201814588544, [(1, 10), (2, 122), (3, 22)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [36, 88, 0]]
** centroid: 7, normalized-entropy: 0.8691375806126381, [(1, 36), (2, 88)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22370697781750778] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22370697781750778, 0.18899343869854127] ***
*** finished computation of 7 references, err: [Inf, 0.22370697781750778, 0.18899343869854127] ***
*** center 1: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [38, 23, 0]]
** centroid: 2, normalized-entropy: 0.9559312637896479, [(1, 38), (2, 23)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [58, 152, 23]]
** centroid: 3, normalized-entropy: 0.7767897917022334, [(1, 58), (2, 152), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 2) [from [7, 71, 2]]
** centroid: 5, normalized-entropy: 0.37438360237351204, [(1, 7), (2, 71), (3, 2)]
*** center 6: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [55, 10, 0]]
** centroid: 7, normalized-entropy: 0.6193821946787638, [(1, 55), (2, 10)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.35958806915885516] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35958806915885516, 0.30297529572962195] ***
*** starting iteration: 2; err: [Inf, 0.35958806915885516, 0.30297529572962195] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35958806915885516, 0.30297529572962195, 0.2935827380751033] ***
*** starting iteration: 3; err: [Inf, 0.35958806915885516, 0.30297529572962195, 0.2935827380751033] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35958806915885516, 0.30297529572962195, 0.2935827380751033, 0.2922551752859587] ***
*** starting iteration: 4; err: [Inf, 0.35958806915885516, 0.30297529572962195, 0.2935827380751033, 0.2922551752859587] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35958806915885516, 0.30297529572962195, 0.2935827380751033, 0.2922551752859587, 0.29199960860969115] ***
*** finished computation of 3 references, err: [Inf, 0.35958806915885516, 0.30297529572962195, 0.2935827380751033, 0.2922551752859587, 0.29199960860969115] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [109, 86, 0]]
** centroid: 1, normalized-entropy: 0.9899412865441471, [(1, 109), (2, 86)]
*** center 2: selecting labels [1] (freq >= 1) [from [212, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [67, 171, 21]]
** centroid: 3, normalized-entropy: 0.7533007103729524, [(1, 67), (2, 171), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.412084276378825] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.412084276378825, 0.3268210368734998] ***
*** starting iteration: 2; err: [Inf, 0.412084276378825, 0.3268210368734998] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.412084276378825, 0.3268210368734998, 0.32598677176124846] ***
*** finished computation of 3 references, err: [Inf, 0.412084276378825, 0.3268210368734998, 0.32598677176124846] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [65, 145, 22]]
** centroid: 1, normalized-entropy: 0.7951982145436323, [(1, 65), (2, 145), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [201, 2, 0]]
** centroid: 2, normalized-entropy: 0.07981182887500547, [(1, 201), (2, 2)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [134, 98, 0]]
** centroid: 3, normalized-entropy: 0.9825606664869173, [(1, 134), (2, 98)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3466314535275258] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3466314535275258, 0.3098642199483143] ***
*** starting iteration: 2; err: [Inf, 0.3466314535275258, 0.3098642199483143] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3466314535275258, 0.3098642199483143, 0.3024407423211672] ***
*** starting iteration: 3; err: [Inf, 0.3466314535275258, 0.3098642199483143, 0.3024407423211672] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3466314535275258, 0.3098642199483143, 0.3024407423211672, 0.3011642008129021] ***
*** starting iteration: 4; err: [Inf, 0.3466314535275258, 0.3098642199483143, 0.3024407423211672, 0.3011642008129021] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3466314535275258, 0.3098642199483143, 0.3024407423211672, 0.3011642008129021, 0.3008832149291369] ***
*** finished computation of 3 references, err: [Inf, 0.3466314535275258, 0.3098642199483143, 0.3024407423211672, 0.3011642008129021, 0.3008832149291369] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [147, 76, 0]]
** centroid: 1, normalized-entropy: 0.9255890222850666, [(1, 147), (2, 76)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [3, 176, 25]]
** centroid: 2, normalized-entropy: 0.4065894197585656, [(1, 3), (2, 176), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [236, 4, 0]]
** centroid: 3, normalized-entropy: 0.12229159706937456, [(1, 236), (2, 4)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23026370424175965] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23026370424175965, 0.200658543445114] ***
*** starting iteration: 2; err: [Inf, 0.23026370424175965, 0.200658543445114] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23026370424175965, 0.200658543445114, 0.1967477070058587] ***
*** starting iteration: 3; err: [Inf, 0.23026370424175965, 0.200658543445114, 0.1967477070058587] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23026370424175965, 0.200658543445114, 0.1967477070058587, 0.19509211835918483] ***
*** finished computation of 7 references, err: [Inf, 0.23026370424175965, 0.200658543445114, 0.1967477070058587, 0.19509211835918483] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [102, 43, 0]]
** centroid: 1, normalized-entropy: 0.8770348187509154, [(1, 102), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 34, 0]]
** centroid: 2, normalized-entropy: 0.9788698505067782, [(1, 48), (2, 34)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 90, 21]]
** centroid: 3, normalized-entropy: 0.699772221773307, [(2, 90), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [14, 90, 0]]
** centroid: 7, normalized-entropy: 0.5699613760403499, [(1, 14), (2, 90)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2939496000319708] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2939496000319708, 0.22824451195095655] ***
*** starting iteration: 2; err: [Inf, 0.2939496000319708, 0.22824451195095655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2939496000319708, 0.22824451195095655, 0.20401472737105086] ***
*** starting iteration: 3; err: [Inf, 0.2939496000319708, 0.22824451195095655, 0.20401472737105086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2939496000319708, 0.22824451195095655, 0.20401472737105086, 0.19518524175579624] ***
*** finished computation of 7 references, err: [Inf, 0.2939496000319708, 0.22824451195095655, 0.20401472737105086, 0.19518524175579624] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [23, 36, 0]]
** centroid: 1, normalized-entropy: 0.9646900825612559, [(1, 23), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [31, 9, 0]]
** centroid: 2, normalized-entropy: 0.7691928290130138, [(1, 31), (2, 9)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [81, 69, 0]]
** centroid: 3, normalized-entropy: 0.9953784388202258, [(1, 81), (2, 69)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 77, 22]]
** centroid: 4, normalized-entropy: 0.7642045065086204, [(2, 77), (3, 22)]
*** center 5: selecting labels [1] (freq >= 1) [from [159, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [34, 54, 0]]
** centroid: 7, normalized-entropy: 0.9624127354629922, [(1, 34), (2, 54)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24030247740615077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24030247740615077, 0.20083362639866312] ***
*** starting iteration: 2; err: [Inf, 0.24030247740615077, 0.20083362639866312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24030247740615077, 0.20083362639866312, 0.19409203782783768] ***
*** starting iteration: 3; err: [Inf, 0.24030247740615077, 0.20083362639866312, 0.19409203782783768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24030247740615077, 0.20083362639866312, 0.19409203782783768, 0.19043803398778056] ***
*** finished computation of 7 references, err: [Inf, 0.24030247740615077, 0.20083362639866312, 0.19409203782783768, 0.19043803398778056] ***
*** center 1: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [41, 45, 0]]
** centroid: 2, normalized-entropy: 0.9984389230256238, [(1, 41), (2, 45)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [40, 47, 0]]
** centroid: 3, normalized-entropy: 0.9953251070631713, [(1, 40), (2, 47)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [69, 22, 0]]
** centroid: 4, normalized-entropy: 0.7979519684655734, [(1, 69), (2, 22)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 93, 25]]
** centroid: 5, normalized-entropy: 0.7450314037905273, [(2, 93), (3, 25)]
*** center 6: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [61, 49, 0]]
** centroid: 7, normalized-entropy: 0.9913982594066482, [(1, 61), (2, 49)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29762273537716616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29762273537716616, 0.20875146798300068] ***
*** starting iteration: 2; err: [Inf, 0.29762273537716616, 0.20875146798300068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29762273537716616, 0.20875146798300068, 0.19670898349278862] ***
*** starting iteration: 3; err: [Inf, 0.29762273537716616, 0.20875146798300068, 0.19670898349278862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29762273537716616, 0.20875146798300068, 0.19670898349278862, 0.1921178658049576] ***
*** finished computation of 7 references, err: [Inf, 0.29762273537716616, 0.20875146798300068, 0.19670898349278862, 0.1921178658049576] ***
*** center 1: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [119, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 53, 0]]
** centroid: 3, normalized-entropy: 0.9951876662918929, [(1, 45), (2, 53)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [54, 4, 0]]
** centroid: 4, normalized-entropy: 0.36205125173399805, [(1, 54), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 47, 0]]
** centroid: 5, normalized-entropy: 0.9531971725430559, [(1, 28), (2, 47)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 99, 21]]
** centroid: 6, normalized-entropy: 0.6690158350565576, [(2, 99), (3, 21)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [75, 54, 0]]
** centroid: 7, normalized-entropy: 0.9807983646944296, [(1, 75), (2, 54)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33011373240330344] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33011373240330344, 0.21473467686929848] ***
*** starting iteration: 2; err: [Inf, 0.33011373240330344, 0.21473467686929848] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33011373240330344, 0.21473467686929848, 0.19201816898258192] ***
*** starting iteration: 3; err: [Inf, 0.33011373240330344, 0.21473467686929848, 0.19201816898258192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33011373240330344, 0.21473467686929848, 0.19201816898258192, 0.18266757706953757] ***
*** finished computation of 7 references, err: [Inf, 0.33011373240330344, 0.21473467686929848, 0.19201816898258192, 0.18266757706953757] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 76, 22]]
** centroid: 1, normalized-entropy: 0.7682814090975241, [(2, 76), (3, 22)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 73, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [81, 10, 0]]
** centroid: 3, normalized-entropy: 0.49958440742366095, [(1, 81), (2, 10)]
*** center 4: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [65, 50, 0]]
** centroid: 5, normalized-entropy: 0.9876925088958032, [(1, 65), (2, 50)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [48, 36, 0]]
** centroid: 6, normalized-entropy: 0.9852281360342514, [(1, 48), (2, 36)]
*** center 7: selecting labels [1] (freq >= 2) [from [118, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2530607034841823] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2530607034841823, 0.2090965392021951] ***
*** starting iteration: 2; err: [Inf, 0.2530607034841823, 0.2090965392021951] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2530607034841823, 0.2090965392021951, 0.19766974333300907] ***
*** starting iteration: 3; err: [Inf, 0.2530607034841823, 0.2090965392021951, 0.19766974333300907] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2530607034841823, 0.2090965392021951, 0.19766974333300907, 0.19208712671147563] ***
*** finished computation of 7 references, err: [Inf, 0.2530607034841823, 0.2090965392021951, 0.19766974333300907, 0.19208712671147563] ***
*** center 1: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [4, 88, 0]]
** centroid: 2, normalized-entropy: 0.2580186686648155, [(1, 4), (2, 88)]
*** center 3: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [29, 86, 0]]
** centroid: 4, normalized-entropy: 0.814705548656723, [(1, 29), (2, 86)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 74, 25]]
** centroid: 5, normalized-entropy: 0.8152560766360704, [(2, 74), (3, 25)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [72, 8, 0]]
** centroid: 6, normalized-entropy: 0.46899559358928133, [(1, 72), (2, 8)]
*** center 7: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.44278857195903704] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44278857195903704, 0.3298403322850508] ***
*** finished computation of 3 references, err: [Inf, 0.44278857195903704, 0.3298403322850508] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [93, 148, 1]]
** centroid: 1, normalized-entropy: 0.6289067004532948, [(1, 93), (2, 148), (3, 1)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [66, 94, 20]]
** centroid: 2, normalized-entropy: 0.8658937125005176, [(1, 66), (2, 94), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [229, 15, 0]]
** centroid: 3, normalized-entropy: 0.33327411457793576, [(1, 229), (2, 15)]
finished with 8 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4444222342100056] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4444222342100056, 0.3552964529500104] ***
*** finished computation of 3 references, err: [Inf, 0.4444222342100056, 0.3552964529500104] ***
*** center 1: selecting labels [1] (freq >= 1) [from [204, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [119, 167, 22]]
** centroid: 2, normalized-entropy: 0.8081243842524022, [(1, 119), (2, 167), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [77, 78, 0]]
** centroid: 3, normalized-entropy: 0.9999699749209293, [(1, 77), (2, 78)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3614573654854137] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3614573654854137, 0.30815532073836543] ***
*** finished computation of 3 references, err: [Inf, 0.3614573654854137, 0.30815532073836543] ***
*** center 1: selecting labels [1] (freq >= 1) [from [182, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [65, 115, 24]]
** centroid: 2, normalized-entropy: 0.8550038556724684, [(1, 65), (2, 115), (3, 24)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [139, 141, 1]]
** centroid: 3, normalized-entropy: 0.6501590693551079, [(1, 139), (2, 141), (3, 1)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.20631829818414227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20631829818414227, 0.160727873915812] ***
*** starting iteration: 2; err: [Inf, 0.20631829818414227, 0.160727873915812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20631829818414227, 0.160727873915812, 0.14915271026890603] ***
*** starting iteration: 3; err: [Inf, 0.20631829818414227, 0.160727873915812, 0.14915271026890603] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20631829818414227, 0.160727873915812, 0.14915271026890603, 0.14656930763411471] ***
*** finished computation of 7 references, err: [Inf, 0.20631829818414227, 0.160727873915812, 0.14915271026890603, 0.14656930763411471] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 74, 0]]
** centroid: 1, normalized-entropy: 0.340373285759646, [(1, 5), (2, 74)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 5, 0]]
** centroid: 2, normalized-entropy: 0.43949698692151346, [(1, 50), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 70, 21]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(2, 70), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [88, 5, 0]]
** centroid: 6, normalized-entropy: 0.30217361847879526, [(1, 88), (2, 5)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [16, 103, 0]]
** centroid: 7, normalized-entropy: 0.5695273910401157, [(1, 16), (2, 103)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17456809316888855] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17456809316888855, 0.1531199875303071] ***
*** starting iteration: 2; err: [Inf, 0.17456809316888855, 0.1531199875303071] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17456809316888855, 0.1531199875303071, 0.1479784584195092] ***
*** starting iteration: 3; err: [Inf, 0.17456809316888855, 0.1531199875303071, 0.1479784584195092] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17456809316888855, 0.1531199875303071, 0.1479784584195092, 0.14471562062229576] ***
*** finished computation of 7 references, err: [Inf, 0.17456809316888855, 0.1531199875303071, 0.1479784584195092, 0.14471562062229576] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [70, 42, 0]]
** centroid: 1, normalized-entropy: 0.954434002924965, [(1, 70), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [30, 63, 0]]
** centroid: 2, normalized-entropy: 0.9071657675730821, [(1, 30), (2, 63)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 75, 22]]
** centroid: 3, normalized-entropy: 0.772398436030307, [(2, 75), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [32, 65, 0]]
** centroid: 5, normalized-entropy: 0.9148210087144519, [(1, 32), (2, 65)]
*** center 6: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20740996227869163] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20740996227869163, 0.16320855418398886] ***
*** starting iteration: 2; err: [Inf, 0.20740996227869163, 0.16320855418398886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20740996227869163, 0.16320855418398886, 0.1560411704599444] ***
*** starting iteration: 3; err: [Inf, 0.20740996227869163, 0.16320855418398886, 0.1560411704599444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20740996227869163, 0.16320855418398886, 0.1560411704599444, 0.15167248944124986] ***
*** finished computation of 7 references, err: [Inf, 0.20740996227869163, 0.16320855418398886, 0.1560411704599444, 0.15167248944124986] ***
*** center 1: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 91, 25]]
** centroid: 2, normalized-entropy: 0.7518972278650765, [(2, 91), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [4, 77, 0]]
** centroid: 3, normalized-entropy: 0.2837689703721877, [(1, 4), (2, 77)]
*** center 4: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [40, 55, 0]]
** centroid: 5, normalized-entropy: 0.9819407868640977, [(1, 40), (2, 55)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [98, 33, 0]]
** centroid: 6, normalized-entropy: 0.8142888743456995, [(1, 98), (2, 33)]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1760470391888809] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1760470391888809, 0.15668895028918903] ***
*** starting iteration: 2; err: [Inf, 0.1760470391888809, 0.15668895028918903] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1760470391888809, 0.15668895028918903, 0.14700646487598842] ***
*** starting iteration: 3; err: [Inf, 0.1760470391888809, 0.15668895028918903, 0.14700646487598842] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1760470391888809, 0.15668895028918903, 0.14700646487598842, 0.14338291342532425] ***
*** finished computation of 7 references, err: [Inf, 0.1760470391888809, 0.15668895028918903, 0.14700646487598842, 0.14338291342532425] ***
*** center 1: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 86, 21]]
** centroid: 3, normalized-entropy: 0.7143881566559658, [(2, 86), (3, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [33, 69, 0]]
** centroid: 4, normalized-entropy: 0.9081783472997053, [(1, 33), (2, 69)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 67, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [66, 35, 0]]
** centroid: 7, normalized-entropy: 0.9309350721504903, [(1, 66), (2, 35)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18273188747679242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18273188747679242, 0.14672518265887402] ***
*** starting iteration: 2; err: [Inf, 0.18273188747679242, 0.14672518265887402] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18273188747679242, 0.14672518265887402, 0.14261029582858822] ***
*** starting iteration: 3; err: [Inf, 0.18273188747679242, 0.14672518265887402, 0.14261029582858822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18273188747679242, 0.14672518265887402, 0.14261029582858822, 0.14117852005426182] ***
*** finished computation of 7 references, err: [Inf, 0.18273188747679242, 0.14672518265887402, 0.14261029582858822, 0.14117852005426182] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 72, 22]]
** centroid: 1, normalized-entropy: 0.7849920887641585, [(2, 72), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [47, 51, 0]]
** centroid: 4, normalized-entropy: 0.9987979209581141, [(1, 47), (2, 51)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [26, 67, 0]]
** centroid: 5, normalized-entropy: 0.8548640967818041, [(1, 26), (2, 67)]
*** center 6: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [65, 55, 0]]
** centroid: 7, normalized-entropy: 0.9949848281859699, [(1, 65), (2, 55)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28501578531544963] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28501578531544963, 0.17588509781833464] ***
*** starting iteration: 2; err: [Inf, 0.28501578531544963, 0.17588509781833464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28501578531544963, 0.17588509781833464, 0.16148115212175956] ***
*** starting iteration: 3; err: [Inf, 0.28501578531544963, 0.17588509781833464, 0.16148115212175956] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28501578531544963, 0.17588509781833464, 0.16148115212175956, 0.15814588602068186] ***
*** finished computation of 7 references, err: [Inf, 0.28501578531544963, 0.17588509781833464, 0.16148115212175956, 0.15814588602068186] ***
*** center 1: selecting labels [1] (freq >= 1) [from [161, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 21, 19]]
** centroid: 2, normalized-entropy: 0.99819587904281, [(2, 21), (3, 19)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 51, 6]]
** centroid: 3, normalized-entropy: 0.48546076074591343, [(2, 51), (3, 6)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 80, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [90, 2, 0]]
** centroid: 5, normalized-entropy: 0.1510969705171136, [(1, 90), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [23, 92, 0]]
** centroid: 6, normalized-entropy: 0.7219280948873623, [(1, 23), (2, 92)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [112, 10, 0]]
** centroid: 7, normalized-entropy: 0.4090731390438265, [(1, 112), (2, 10)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.47604439939671495] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47604439939671495, 0.29469988317796597] ***
*** finished computation of 3 references, err: [Inf, 0.47604439939671495, 0.29469988317796597] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [235, 50, 0]]
** centroid: 1, normalized-entropy: 0.6699960320994334, [(1, 235), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [153, 46, 0]]
** centroid: 2, normalized-entropy: 0.7800206511436575, [(1, 153), (2, 46)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 161, 21]]
** centroid: 3, normalized-entropy: 0.5159469300074472, [(2, 161), (3, 21)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.41023910355319954] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41023910355319954, 0.2957667327465732] ***
*** finished computation of 3 references, err: [Inf, 0.41023910355319954, 0.2957667327465732] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [259, 27, 0]]
** centroid: 1, normalized-entropy: 0.4510066197531059, [(1, 259), (2, 27)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 165, 22]]
** centroid: 2, normalized-entropy: 0.5225593745369407, [(2, 165), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [141, 53, 0]]
** centroid: 3, normalized-entropy: 0.8460132299186768, [(1, 141), (2, 53)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.44426164092744574] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44426164092744574, 0.2948542455507294] ***
*** finished computation of 3 references, err: [Inf, 0.44426164092744574, 0.2948542455507294] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [73, 173, 25]]
** centroid: 1, normalized-entropy: 0.7825347448742196, [(1, 73), (2, 173), (3, 25)]
*** center 2: selecting labels [1] (freq >= 2) [from [187, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [126, 83, 0]]
** centroid: 3, normalized-entropy: 0.9692464853689966, [(1, 126), (2, 83)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.304248360250643] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.304248360250643, 0.24659240112972777] ***
*** finished computation of 3 references, err: [Inf, 0.304248360250643, 0.24659240112972777] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [140, 180, 21]]
** centroid: 1, normalized-entropy: 0.7959248746974624, [(1, 140), (2, 180), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [95, 77, 0]]
** centroid: 2, normalized-entropy: 0.9920854150221711, [(1, 95), (2, 77)]
*** center 3: selecting labels [1] (freq >= 2) [from [153, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37375350207693575] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37375350207693575, 0.229707270459938] ***
*** finished computation of 3 references, err: [Inf, 0.37375350207693575, 0.229707270459938] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [102, 147, 19]]
** centroid: 1, normalized-entropy: 0.8052878047507337, [(1, 102), (2, 147), (3, 19)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [89, 98, 3]]
** centroid: 2, normalized-entropy: 0.6938096672762097, [(1, 89), (2, 98), (3, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [209, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3178966313159314] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3178966313159314, 0.2383188739177426] ***
*** finished computation of 3 references, err: [Inf, 0.3178966313159314, 0.2383188739177426] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [240, 59, 0]]
** centroid: 1, normalized-entropy: 0.7165445408924426, [(1, 240), (2, 59)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [146, 44, 0]]
** centroid: 2, normalized-entropy: 0.7807536250860868, [(1, 146), (2, 44)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 153, 25]]
** centroid: 3, normalized-entropy: 0.5854146406498594, [(2, 153), (3, 25)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18957707118634526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18957707118634526, 0.14823802916595974] ***
*** finished computation of 7 references, err: [Inf, 0.18957707118634526, 0.14823802916595974] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [55, 66, 0]]
** centroid: 1, normalized-entropy: 0.9940302114769566, [(1, 55), (2, 66)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 22, 0]]
** centroid: 2, normalized-entropy: 0.8437582063121657, [(1, 59), (2, 22)]
*** center 3: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 103, 21]]
** centroid: 4, normalized-entropy: 0.6562267928205406, [(2, 103), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [47, 66, 0]]
** centroid: 5, normalized-entropy: 0.9795091579328259, [(1, 47), (2, 66)]
*** center 6: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1883159327366832] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1883159327366832, 0.15103704359024941] ***
*** finished computation of 7 references, err: [Inf, 0.1883159327366832, 0.15103704359024941] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [54, 69, 0]]
** centroid: 1, normalized-entropy: 0.9892452969285004, [(1, 54), (2, 69)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [65, 22, 0]]
** centroid: 2, normalized-entropy: 0.8158009273789572, [(1, 65), (2, 22)]
*** center 3: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 77, 1]]
** centroid: 4, normalized-entropy: 0.098959095355743, [(2, 77), (3, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [99, 24, 0]]
** centroid: 5, normalized-entropy: 0.7120640548905481, [(1, 99), (2, 24)]
*** center 6: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 53, 21]]
** centroid: 7, normalized-entropy: 0.8605553930586318, [(2, 53), (3, 21)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18937029800974] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18937029800974, 0.15195537483140917] ***
*** finished computation of 7 references, err: [Inf, 0.18937029800974, 0.15195537483140917] ***
*** center 1: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [69, 10, 0]]
** centroid: 2, normalized-entropy: 0.5479900080939728, [(1, 69), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 47, 25]]
** centroid: 3, normalized-entropy: 0.9315627684809641, [(2, 47), (3, 25)]
*** center 4: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [69, 41, 0]]
** centroid: 5, normalized-entropy: 0.9527431707334316, [(1, 69), (2, 41)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [25, 74, 0]]
** centroid: 6, normalized-entropy: 0.8152560766360704, [(1, 25), (2, 74)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 84, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9530128931326537, 0.9509929090767413, 0.9390108671545797, 0.9349768930607255, 0.9229978481475487, 0.8760257263251275, 0.8750307193420966, 0.8709967452482422, 0.8690067312821803, 0.8480246713779648, 0.8450186713659767, 0.7870325415235594, 0.7209754664844485]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9530128931326537
finished with 14
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.23129736540864246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23129736540864246, 0.20924246278885114] ***
*** starting iteration: 2; err: [Inf, 0.23129736540864246, 0.20924246278885114] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23129736540864246, 0.20924246278885114, 0.19864222226250502] ***
*** starting iteration: 3; err: [Inf, 0.23129736540864246, 0.20924246278885114, 0.19864222226250502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23129736540864246, 0.20924246278885114, 0.19864222226250502, 0.18904831146299783] ***
*** finished computation of 7 references, err: [Inf, 0.23129736540864246, 0.20924246278885114, 0.19864222226250502, 0.18904831146299783] ***
*** center 1: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 43, 0]]
** centroid: 3, normalized-entropy: 0.9996273710574612, [(1, 45), (2, 43)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [28, 88, 0]]
** centroid: 4, normalized-entropy: 0.7973265101474423, [(1, 28), (2, 88)]
*** center 5: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 85, 21]]
** centroid: 6, normalized-entropy: 0.7181384220154764, [(2, 85), (3, 21)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [29, 41, 0]]
** centroid: 7, normalized-entropy: 0.9786961448300948, [(1, 29), (2, 41)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24958549148362616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24958549148362616, 0.20829662533317772] ***
*** starting iteration: 2; err: [Inf, 0.24958549148362616, 0.20829662533317772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24958549148362616, 0.20829662533317772, 0.19295371344070072] ***
*** starting iteration: 3; err: [Inf, 0.24958549148362616, 0.20829662533317772, 0.19295371344070072] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24958549148362616, 0.20829662533317772, 0.19295371344070072, 0.19167437006033833] ***
*** finished computation of 7 references, err: [Inf, 0.24958549148362616, 0.20829662533317772, 0.19295371344070072, 0.19167437006033833] ***
*** center 1: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [103, 55, 0]]
** centroid: 2, normalized-entropy: 0.9323608839762941, [(1, 103), (2, 55)]
*** center 3: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [3, 79, 0]]
** centroid: 4, normalized-entropy: 0.22641094842107634, [(1, 3), (2, 79)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 94, 22]]
** centroid: 5, normalized-entropy: 0.7007495497162061, [(2, 94), (3, 22)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [50, 15, 0]]
** centroid: 6, normalized-entropy: 0.7793498372920851, [(1, 50), (2, 15)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [48, 2, 0]]
** centroid: 7, normalized-entropy: 0.24229218908241482, [(1, 48), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27928768821351085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27928768821351085, 0.2310547612459473] ***
*** starting iteration: 2; err: [Inf, 0.27928768821351085, 0.2310547612459473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27928768821351085, 0.2310547612459473, 0.20772380795681672] ***
*** starting iteration: 3; err: [Inf, 0.27928768821351085, 0.2310547612459473, 0.20772380795681672] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27928768821351085, 0.2310547612459473, 0.20772380795681672, 0.1967566480268089] ***
*** finished computation of 7 references, err: [Inf, 0.27928768821351085, 0.2310547612459473, 0.20772380795681672, 0.1967566480268089] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 117, 3]]
** centroid: 1, normalized-entropy: 0.1686609314966701, [(2, 117), (3, 3)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 98, 22]]
** centroid: 2, normalized-entropy: 0.6873150928309273, [(2, 98), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [84, 18, 0]]
** centroid: 3, normalized-entropy: 0.6722948170756378, [(1, 84), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [91, 15, 0]]
** centroid: 4, normalized-entropy: 0.5881782735046225, [(1, 91), (2, 15)]
*** center 5: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [95, 8, 0]]
** centroid: 6, normalized-entropy: 0.3939152573634121, [(1, 95), (2, 8)]
*** center 7: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9530128931326537, 0.9509929090767413, 0.9390108671545797, 0.9349768930607255, 0.9229978481475487, 0.9149718580856305, 0.8760257263251275, 0.8750307193420966, 0.8709967452482422, 0.8690067312821803, 0.8480246713779648, 0.8450186713659767, 0.7870325415235594, 0.7209754664844485]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9530128931326537
finished with 16
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.2720147654198826] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2720147654198826, 0.23390395262533123] ***
*** finished computation of 3 references, err: [Inf, 0.2720147654198826, 0.23390395262533123] ***
*** center 1: selecting labels [1] (freq >= 2) [from [228, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [47, 180, 21]]
** centroid: 2, normalized-entropy: 0.688941672849657, [(1, 47), (2, 180), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [113, 77, 0]]
** centroid: 3, normalized-entropy: 0.9739462062971395, [(1, 113), (2, 77)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.27153919798727294] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27153919798727294, 0.26313290157043995] ***
*** finished computation of 3 references, err: [Inf, 0.27153919798727294, 0.26313290157043995] ***
*** center 1: selecting labels [1] (freq >= 2) [from [264, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [132, 112, 0]]
** centroid: 2, normalized-entropy: 0.995148095654003, [(1, 132), (2, 112)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [4, 133, 22]]
** centroid: 3, normalized-entropy: 0.46938130266345185, [(1, 4), (2, 133), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3442441700026393] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3442441700026393, 0.23908228944914453] ***
*** finished computation of 3 references, err: [Inf, 0.3442441700026393, 0.23908228944914453] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [87, 85, 0]]
** centroid: 1, normalized-entropy: 0.9999024656873071, [(1, 87), (2, 85)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [85, 170, 25]]
** centroid: 2, normalized-entropy: 0.8015244865488291, [(1, 85), (2, 170), (3, 25)]
*** center 3: selecting labels [1] (freq >= 2) [from [214, 1, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4125354662020173] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4125354662020173, 0.32701518132096835] ***
*** finished computation of 3 references, err: [Inf, 0.4125354662020173, 0.32701518132096835] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [33, 113, 21]]
** centroid: 1, normalized-entropy: 0.7695632390871435, [(1, 33), (2, 113), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [240, 41, 0]]
** centroid: 2, normalized-entropy: 0.5995032770344996, [(1, 240), (2, 41)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [115, 103, 0]]
** centroid: 3, normalized-entropy: 0.9978131772609874, [(1, 115), (2, 103)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3293154196963105] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3293154196963105, 0.29998619777235624] ***
*** finished computation of 3 references, err: [Inf, 0.3293154196963105, 0.29998619777235624] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [261, 3, 0]]
** centroid: 1, normalized-entropy: 0.08970338978685011, [(1, 261), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [105, 87, 0]]
** centroid: 2, normalized-entropy: 0.9936507116910402, [(1, 105), (2, 87)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [34, 155, 22]]
** centroid: 3, normalized-entropy: 0.6885549116364682, [(1, 34), (2, 155), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.373951350397401] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.373951350397401, 0.3462291737345384] ***
*** finished computation of 3 references, err: [Inf, 0.373951350397401, 0.3462291737345384] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [246, 67, 0]]
** centroid: 1, normalized-entropy: 0.7491672684210409, [(1, 246), (2, 67)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [98, 113, 3]]
** centroid: 2, normalized-entropy: 0.6869388032941959, [(1, 98), (2, 113), (3, 3)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [42, 76, 22]]
** centroid: 3, normalized-entropy: 0.8953447699571918, [(1, 42), (2, 76), (3, 22)]
finished with 8 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 16)
[0.9530128931326537, 0.9509929090767413, 0.9390108671545797, 0.9349768930607255, 0.9229978481475487, 0.9149718580856305, 0.893989798181415, 0.8760257263251275, 0.8750307193420966, 0.8709967452482422, 0.8690067312821803, 0.8530416644189099, 0.8480246713779648, 0.8450186713659767, 0.7870325415235594, 0.7209754664844485]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9530128931326537
finished with 18
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.3519951800337514] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3519951800337514, 0.29562525061594025] ***
*** starting iteration: 2; err: [Inf, 0.3519951800337514, 0.29562525061594025] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3519951800337514, 0.29562525061594025, 0.2927537390937072] ***
*** starting iteration: 3; err: [Inf, 0.3519951800337514, 0.29562525061594025, 0.2927537390937072] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3519951800337514, 0.29562525061594025, 0.2927537390937072, 0.2920861305255029] ***
*** finished computation of 3 references, err: [Inf, 0.3519951800337514, 0.29562525061594025, 0.2927537390937072, 0.2920861305255029] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [71, 174, 21]]
** centroid: 1, normalized-entropy: 0.7560773936325427, [(1, 71), (2, 174), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [111, 83, 0]]
** centroid: 2, normalized-entropy: 0.9849209145239498, [(1, 111), (2, 83)]
*** center 3: selecting labels [1] (freq >= 2) [from [206, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3821130154886167] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3821130154886167, 0.32338422764444547] ***
*** starting iteration: 2; err: [Inf, 0.3821130154886167, 0.32338422764444547] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3821130154886167, 0.32338422764444547, 0.3227119760760951] ***
*** finished computation of 3 references, err: [Inf, 0.3821130154886167, 0.32338422764444547, 0.3227119760760951] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [202, 23, 0]]
** centroid: 1, normalized-entropy: 0.47600054897182015, [(1, 202), (2, 23)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [50, 152, 22]]
** centroid: 2, normalized-entropy: 0.7516576419600383, [(1, 50), (2, 152), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [148, 70, 0]]
** centroid: 3, normalized-entropy: 0.9055746490923751, [(1, 148), (2, 70)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3740614833997219] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3740614833997219, 0.30924170620382013] ***
*** starting iteration: 2; err: [Inf, 0.3740614833997219, 0.30924170620382013] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3740614833997219, 0.30924170620382013, 0.2965322252156316] ***
*** starting iteration: 3; err: [Inf, 0.3740614833997219, 0.30924170620382013, 0.2965322252156316] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3740614833997219, 0.30924170620382013, 0.2965322252156316, 0.29465384892295526] ***
*** finished computation of 3 references, err: [Inf, 0.3740614833997219, 0.30924170620382013, 0.2965322252156316, 0.29465384892295526] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 178, 25]]
** centroid: 1, normalized-entropy: 0.5383558410453393, [(2, 178), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [168, 56, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 168), (2, 56)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [218, 22, 0]]
** centroid: 3, normalized-entropy: 0.44200860222772487, [(1, 218), (2, 22)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3101281929459121] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3101281929459121, 0.24399337026237458] ***
*** starting iteration: 2; err: [Inf, 0.3101281929459121, 0.24399337026237458] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3101281929459121, 0.24399337026237458, 0.23385975091625844] ***
*** starting iteration: 3; err: [Inf, 0.3101281929459121, 0.24399337026237458, 0.23385975091625844] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3101281929459121, 0.24399337026237458, 0.23385975091625844, 0.23180998386969012] ***
*** finished computation of 3 references, err: [Inf, 0.3101281929459121, 0.24399337026237458, 0.23385975091625844, 0.23180998386969012] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [172, 43, 0]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(1, 172), (2, 43)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 174, 21]]
** centroid: 2, normalized-entropy: 0.49291577961610966, [(2, 174), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [216, 40, 0]]
** centroid: 3, normalized-entropy: 0.625262405223423, [(1, 216), (2, 40)]
finished with 5 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24604421387520106] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.24604421387520106, 0.2347337533531339] ***
*** starting iteration: 2; err: [Inf, 0.24604421387520106, 0.2347337533531339] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.24604421387520106, 0.2347337533531339, 0.2333523778948581] ***
*** starting iteration: 3; err: [Inf, 0.24604421387520106, 0.2347337533531339, 0.2333523778948581] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.24604421387520106, 0.2347337533531339, 0.2333523778948581, 0.23294741101004462] ***
*** finished computation of 3 references, err: [Inf, 0.24604421387520106, 0.2347337533531339, 0.2333523778948581, 0.23294741101004462] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [237, 6, 0]]
** centroid: 1, normalized-entropy: 0.16702680404522793, [(1, 237), (2, 6)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [4, 182, 22]]
** centroid: 2, normalized-entropy: 0.3917993121300304, [(1, 4), (2, 182), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [159, 57, 0]]
** centroid: 3, normalized-entropy: 0.8325582396745668, [(1, 159), (2, 57)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.42835515727445406] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42835515727445406, 0.233225393350581] ***
*** starting iteration: 2; err: [Inf, 0.42835515727445406, 0.233225393350581] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42835515727445406, 0.233225393350581, 0.2303206675142787] ***
*** starting iteration: 3; err: [Inf, 0.42835515727445406, 0.233225393350581, 0.2303206675142787] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42835515727445406, 0.233225393350581, 0.2303206675142787, 0.22989544369325018] ***
*** finished computation of 3 references, err: [Inf, 0.42835515727445406, 0.233225393350581, 0.2303206675142787, 0.22989544369325018] ***
*** center 1: selecting labels [1] (freq >= 2) [from [218, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [128, 82, 0]]
** centroid: 2, normalized-entropy: 0.9651061634819187, [(1, 128), (2, 82)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [40, 173, 25]]
** centroid: 3, normalized-entropy: 0.6993310636905554, [(1, 40), (2, 173), (3, 25)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 18)
[0.9530128931326537, 0.9509929090767413, 0.9390108671545797, 0.9349768930607255, 0.9229978481475487, 0.9149718580856305, 0.8980057902213591, 0.893989798181415, 0.8770477063890239, 0.8760257263251275, 0.8750307193420966, 0.8709967452482422, 0.8690067312821803, 0.8530416644189099, 0.8480246713779648, 0.8450186713659767, 0.7870325415235594, 0.7209754664844485]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9530128931326537
finished with 18
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9530128931326537, 0.9509929090767413, 0.9390108671545797, 0.9349768930607255, 0.9229978481475487, 0.9149718580856305, 0.8980057902213591, 0.893989798181415, 0.8770477063890239, 0.8760257263251275, 0.8750307193420966, 0.8709967452482422, 0.8690067312821803, 0.8530416644189099, 0.8480246713779648, 0.8450186713659767, 0.7870325415235594, 0.7209754664844485]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9530128931326537
finished with 18
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9530128931326537, 0.9509929090767413, 0.9390108671545797, 0.9349768930607255, 0.9229978481475487, 0.9149718580856305, 0.8980057902213591, 0.893989798181415, 0.8770477063890239, 0.8760257263251275, 0.8750307193420966, 0.8709967452482422, 0.8690067312821803, 0.8530416644189099, 0.8480246713779648, 0.8450186713659767, 0.7870325415235594, 0.7209754664844485]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9530128931326537
finished with 18
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9530128931326537, 0.9509929090767413, 0.9390108671545797, 0.9349768930607255, 0.9229978481475487, 0.9149718580856305, 0.8980057902213591, 0.893989798181415, 0.8770477063890239, 0.8760257263251275, 0.8750307193420966, 0.8709967452482422, 0.8690067312821803, 0.8530416644189099, 0.8480246713779648, 0.8450186713659767, 0.7870325415235594, 0.7209754664844485]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9530128931326537
finished with 18
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9530128931326537, 0.9509929090767413, 0.9390108671545797, 0.9349768930607255, 0.9229978481475487, 0.9149718580856305, 0.8980057902213591, 0.893989798181415, 0.8770477063890239, 0.8760257263251275, 0.8750307193420966, 0.8709967452482422, 0.8690067312821803, 0.8530416644189099, 0.8480246713779648, 0.8450186713659767, 0.7870325415235594, 0.7209754664844485]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9530128931326537
finished with 19
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.2038599796161089] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2038599796161089, 0.15803821010210248] ***
*** starting iteration: 2; err: [Inf, 0.2038599796161089, 0.15803821010210248] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2038599796161089, 0.15803821010210248, 0.14922088744012532] ***
*** starting iteration: 3; err: [Inf, 0.2038599796161089, 0.15803821010210248, 0.14922088744012532] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2038599796161089, 0.15803821010210248, 0.14922088744012532, 0.1454763783027653] ***
*** finished computation of 7 references, err: [Inf, 0.2038599796161089, 0.15803821010210248, 0.14922088744012532, 0.1454763783027653] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 63, 21]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 63), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 70, 0]]
** centroid: 5, normalized-entropy: 0.5731393980555147, [(1, 11), (2, 70)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [16, 80, 0]]
** centroid: 6, normalized-entropy: 0.6500224216483541, [(1, 16), (2, 80)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [55, 44, 0]]
** centroid: 7, normalized-entropy: 0.9910760598382222, [(1, 55), (2, 44)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20729309433967857] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20729309433967857, 0.16907485088995328] ***
*** starting iteration: 2; err: [Inf, 0.20729309433967857, 0.16907485088995328] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20729309433967857, 0.16907485088995328, 0.15565279810766186] ***
*** starting iteration: 3; err: [Inf, 0.20729309433967857, 0.16907485088995328, 0.15565279810766186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20729309433967857, 0.16907485088995328, 0.15565279810766186, 0.15055439040564683] ***
*** finished computation of 7 references, err: [Inf, 0.20729309433967857, 0.16907485088995328, 0.15565279810766186, 0.15055439040564683] ***
*** center 1: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [103, 6, 0]]
** centroid: 2, normalized-entropy: 0.30745653299528936, [(1, 103), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 100, 22]]
** centroid: 3, normalized-entropy: 0.6807937753703207, [(2, 100), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [9, 76, 0]]
** centroid: 5, normalized-entropy: 0.48736957102366285, [(1, 9), (2, 76)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [102, 63, 0]]
** centroid: 6, normalized-entropy: 0.9593160320543779, [(1, 102), (2, 63)]
*** center 7: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22136840029344565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22136840029344565, 0.16866232395748784] ***
*** starting iteration: 2; err: [Inf, 0.22136840029344565, 0.16866232395748784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22136840029344565, 0.16866232395748784, 0.15988242065860728] ***
*** starting iteration: 3; err: [Inf, 0.22136840029344565, 0.16866232395748784, 0.15988242065860728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22136840029344565, 0.16866232395748784, 0.15988242065860728, 0.15475461715650835] ***
*** finished computation of 7 references, err: [Inf, 0.22136840029344565, 0.16866232395748784, 0.15988242065860728, 0.15475461715650835] ***
*** center 1: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 122, 25]]
** centroid: 3, normalized-entropy: 0.6578603725435735, [(2, 122), (3, 25)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [76, 34, 0]]
** centroid: 4, normalized-entropy: 0.8921212805771683, [(1, 76), (2, 34)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [95, 15, 0]]
** centroid: 5, normalized-entropy: 0.5746356978376794, [(1, 95), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [21, 85, 0]]
** centroid: 6, normalized-entropy: 0.7181384220154764, [(1, 21), (2, 85)]
*** center 7: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.21881025603134185] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21881025603134185, 0.15754401940666138] ***
*** starting iteration: 2; err: [Inf, 0.21881025603134185, 0.15754401940666138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21881025603134185, 0.15754401940666138, 0.1554154980555177] ***
*** starting iteration: 3; err: [Inf, 0.21881025603134185, 0.15754401940666138, 0.1554154980555177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21881025603134185, 0.15754401940666138, 0.1554154980555177, 0.15483233645698055] ***
*** finished computation of 7 references, err: [Inf, 0.21881025603134185, 0.15754401940666138, 0.1554154980555177, 0.15483233645698055] ***
*** center 1: selecting labels [1] (freq >= 2) [from [135, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 114, 0]]
** centroid: 2, normalized-entropy: 0.9059282160429994, [(1, 54), (2, 114)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [2, 90, 0]]
** centroid: 3, normalized-entropy: 0.1510969705171136, [(1, 2), (2, 90)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [20, 119, 0]]
** centroid: 4, normalized-entropy: 0.5943232617062951, [(1, 20), (2, 119)]
*** center 5: selecting labels [1] (freq >= 2) [from [161, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 56, 34]]
** centroid: 6, normalized-entropy: 0.9564574047992596, [(2, 56), (3, 34)]
*** center 7: selecting labels [1] (freq >= 2) [from [215, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1977115126736462] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1977115126736462, 0.1669355473984033] ***
*** starting iteration: 2; err: [Inf, 0.1977115126736462, 0.1669355473984033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1977115126736462, 0.1669355473984033, 0.1586354497782886] ***
*** starting iteration: 3; err: [Inf, 0.1977115126736462, 0.1669355473984033, 0.1586354497782886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1977115126736462, 0.1669355473984033, 0.1586354497782886, 0.15379506844980642] ***
*** finished computation of 7 references, err: [Inf, 0.1977115126736462, 0.1669355473984033, 0.1586354497782886, 0.15379506844980642] ***
*** center 1: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [26, 59, 0]]
** centroid: 2, normalized-entropy: 0.8883630233845602, [(1, 26), (2, 59)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 91, 14]]
** centroid: 3, normalized-entropy: 0.5665095065529052, [(2, 91), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 23, 0]]
** centroid: 5, normalized-entropy: 0.9279262619599757, [(1, 44), (2, 23)]
*** center 6: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [72, 27, 0]]
** centroid: 7, normalized-entropy: 0.8453509366224364, [(1, 72), (2, 27)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1951804116666317] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1951804116666317, 0.16570925772562622] ***
*** starting iteration: 2; err: [Inf, 0.1951804116666317, 0.16570925772562622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1951804116666317, 0.16570925772562622, 0.15725755733111874] ***
*** starting iteration: 3; err: [Inf, 0.1951804116666317, 0.16570925772562622, 0.15725755733111874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1951804116666317, 0.16570925772562622, 0.15725755733111874, 0.1508510260693729] ***
*** finished computation of 7 references, err: [Inf, 0.1951804116666317, 0.16570925772562622, 0.15725755733111874, 0.1508510260693729] ***
*** center 1: selecting labels [1] (freq >= 2) [from [102, 1, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 67, 1]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [6, 42, 0]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(1, 6), (2, 42)]
*** center 4: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 46, 14]]
** centroid: 5, normalized-entropy: 0.7837769474847011, [(2, 46), (3, 14)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [38, 30, 0]]
** centroid: 6, normalized-entropy: 0.9899927915575186, [(1, 38), (2, 30)]
*** center 7: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23657929784432052] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23657929784432052, 0.1681944690234959] ***
*** starting iteration: 2; err: [Inf, 0.23657929784432052, 0.1681944690234959] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23657929784432052, 0.1681944690234959, 0.15685930714011193] ***
*** starting iteration: 3; err: [Inf, 0.23657929784432052, 0.1681944690234959, 0.15685930714011193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23657929784432052, 0.1681944690234959, 0.15685930714011193, 0.15149835025239736] ***
*** finished computation of 7 references, err: [Inf, 0.23657929784432052, 0.1681944690234959, 0.15685930714011193, 0.15149835025239736] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [30, 3, 0]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(1, 30), (2, 3)]
*** center 2: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [82, 28, 0]]
** centroid: 3, normalized-entropy: 0.8184033299219708, [(1, 82), (2, 28)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 80, 20]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(2, 80), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [47, 20, 0]]
** centroid: 5, normalized-entropy: 0.8794587736429037, [(1, 47), (2, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 67, 0]]
** centroid: 7, normalized-entropy: 0.3127333763966432, [(1, 4), (2, 67)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.221593205308076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.221593205308076, 0.18538528213091193] ***
*** starting iteration: 2; err: [Inf, 0.221593205308076, 0.18538528213091193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.221593205308076, 0.18538528213091193, 0.1656688046362251] ***
*** starting iteration: 3; err: [Inf, 0.221593205308076, 0.18538528213091193, 0.1656688046362251] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.221593205308076, 0.18538528213091193, 0.1656688046362251, 0.15066957634687422] ***
*** finished computation of 7 references, err: [Inf, 0.221593205308076, 0.18538528213091193, 0.1656688046362251, 0.15066957634687422] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [35, 36, 0]]
** centroid: 1, normalized-entropy: 0.9998568991526107, [(1, 35), (2, 36)]
*** center 2: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [16, 36, 0]]
** centroid: 3, normalized-entropy: 0.8904916402194913, [(1, 16), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 54, 0]]
** centroid: 4, normalized-entropy: 0.9994730201859837, [(1, 57), (2, 54)]
*** center 5: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 67, 20]]
** centroid: 7, normalized-entropy: 0.7778108790853029, [(2, 67), (3, 20)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23713388580270112] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23713388580270112, 0.19195664161629974] ***
*** starting iteration: 2; err: [Inf, 0.23713388580270112, 0.19195664161629974] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23713388580270112, 0.19195664161629974, 0.17417795311659576] ***
*** starting iteration: 3; err: [Inf, 0.23713388580270112, 0.19195664161629974, 0.17417795311659576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23713388580270112, 0.19195664161629974, 0.17417795311659576, 0.16232099138386546] ***
*** finished computation of 7 references, err: [Inf, 0.23713388580270112, 0.19195664161629974, 0.17417795311659576, 0.16232099138386546] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 33, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 36, 0]]
** centroid: 2, normalized-entropy: 0.9892452969285004, [(1, 46), (2, 36)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [97, 2, 0]]
** centroid: 3, normalized-entropy: 0.14257333025989857, [(1, 97), (2, 2)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 22, 18]]
** centroid: 4, normalized-entropy: 0.9927744539878083, [(2, 22), (3, 18)]
*** center 5: selecting labels [2] (freq >= 2) [from [1, 56, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 44, 0]]
** centroid: 6, normalized-entropy: 0.7219280948873623, [(1, 11), (2, 44)]
*** center 7: selecting labels [1] (freq >= 2) [from [134, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20903009980730713] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20903009980730713, 0.1710580014148727] ***
*** starting iteration: 2; err: [Inf, 0.20903009980730713, 0.1710580014148727] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20903009980730713, 0.1710580014148727, 0.15949640279542654] ***
*** starting iteration: 3; err: [Inf, 0.20903009980730713, 0.1710580014148727, 0.15949640279542654] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20903009980730713, 0.1710580014148727, 0.15949640279542654, 0.1539228159924969] ***
*** finished computation of 7 references, err: [Inf, 0.20903009980730713, 0.1710580014148727, 0.15949640279542654, 0.1539228159924969] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [33, 53, 0]]
** centroid: 1, normalized-entropy: 0.9606276613221153, [(1, 33), (2, 53)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 90, 18]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(2, 90), (3, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 18, 0]]
** centroid: 4, normalized-entropy: 0.7897492536625221, [(1, 58), (2, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [30, 25, 0]]
** centroid: 7, normalized-entropy: 0.9940302114769566, [(1, 30), (2, 25)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2068252576701343] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2068252576701343, 0.17281203347444535] ***
*** starting iteration: 2; err: [Inf, 0.2068252576701343, 0.17281203347444535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2068252576701343, 0.17281203347444535, 0.15522139454074205] ***
*** starting iteration: 3; err: [Inf, 0.2068252576701343, 0.17281203347444535, 0.15522139454074205] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2068252576701343, 0.17281203347444535, 0.15522139454074205, 0.1474824852887541] ***
*** finished computation of 7 references, err: [Inf, 0.2068252576701343, 0.17281203347444535, 0.15522139454074205, 0.1474824852887541] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [85, 34, 0]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(1, 85), (2, 34)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 73, 16]]
** centroid: 2, normalized-entropy: 0.6795851972782937, [(2, 73), (3, 16)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 54, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [56, 12, 0]]
** centroid: 4, normalized-entropy: 0.6722948170756378, [(1, 56), (2, 12)]
*** center 5: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [44, 17, 0]]
** centroid: 6, normalized-entropy: 0.8536576732793314, [(1, 44), (2, 17)]
*** center 7: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20999522070959212] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20999522070959212, 0.14769123585149646] ***
*** starting iteration: 2; err: [Inf, 0.20999522070959212, 0.14769123585149646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20999522070959212, 0.14769123585149646, 0.14286021586880088] ***
*** starting iteration: 3; err: [Inf, 0.20999522070959212, 0.14769123585149646, 0.14286021586880088] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20999522070959212, 0.14769123585149646, 0.14286021586880088, 0.1421913271099329] ***
*** finished computation of 7 references, err: [Inf, 0.20999522070959212, 0.14769123585149646, 0.14286021586880088, 0.1421913271099329] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [33, 54, 0]]
** centroid: 1, normalized-entropy: 0.9575534837147484, [(1, 33), (2, 54)]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [32, 30, 0]]
** centroid: 3, normalized-entropy: 0.9992492479956566, [(1, 32), (2, 30)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 79, 13]]
** centroid: 4, normalized-entropy: 0.5876446142980418, [(2, 79), (3, 13)]
*** center 5: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [33, 41, 0]]
** centroid: 6, normalized-entropy: 0.9915528503834039, [(1, 33), (2, 41)]
*** center 7: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20679657316766678] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20679657316766678, 0.16122045762091874] ***
*** starting iteration: 2; err: [Inf, 0.20679657316766678, 0.16122045762091874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20679657316766678, 0.16122045762091874, 0.15036499536037445] ***
*** starting iteration: 3; err: [Inf, 0.20679657316766678, 0.16122045762091874, 0.15036499536037445] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20679657316766678, 0.16122045762091874, 0.15036499536037445, 0.14559786946326495] ***
*** finished computation of 7 references, err: [Inf, 0.20679657316766678, 0.16122045762091874, 0.15036499536037445, 0.14559786946326495] ***
*** center 1: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 15, 0]]
** centroid: 2, normalized-entropy: 0.7918583525674836, [(1, 48), (2, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 47, 0]]
** centroid: 5, normalized-entropy: 0.9992158792218827, [(1, 44), (2, 47)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 93, 12]]
** centroid: 6, normalized-entropy: 0.5127091420308771, [(2, 93), (3, 12)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [31, 37, 0]]
** centroid: 7, normalized-entropy: 0.9943766625699823, [(1, 31), (2, 37)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2011170980744064] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2011170980744064, 0.15672570207249373] ***
*** starting iteration: 2; err: [Inf, 0.2011170980744064, 0.15672570207249373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2011170980744064, 0.15672570207249373, 0.1511825144889299] ***
*** starting iteration: 3; err: [Inf, 0.2011170980744064, 0.15672570207249373, 0.1511825144889299] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2011170980744064, 0.15672570207249373, 0.1511825144889299, 0.1486951603339985] ***
*** finished computation of 7 references, err: [Inf, 0.2011170980744064, 0.15672570207249373, 0.1511825144889299, 0.1486951603339985] ***
*** center 1: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 20, 0]]
** centroid: 2, normalized-entropy: 0.847107490529376, [(1, 53), (2, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [56, 24, 0]]
** centroid: 3, normalized-entropy: 0.8812908992306927, [(1, 56), (2, 24)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 50, 12]]
** centroid: 4, normalized-entropy: 0.708835673332196, [(2, 50), (3, 12)]
*** center 5: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 54, 0]]
** centroid: 6, normalized-entropy: 0.36205125173399805, [(1, 4), (2, 54)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 44, 2]]
** centroid: 7, normalized-entropy: 0.2580186686648155, [(2, 44), (3, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19908558208867908] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19908558208867908, 0.15636361374193802] ***
*** starting iteration: 2; err: [Inf, 0.19908558208867908, 0.15636361374193802] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19908558208867908, 0.15636361374193802, 0.1502162024853751] ***
*** starting iteration: 3; err: [Inf, 0.19908558208867908, 0.15636361374193802, 0.1502162024853751] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19908558208867908, 0.15636361374193802, 0.1502162024853751, 0.14748211760260166] ***
*** finished computation of 7 references, err: [Inf, 0.19908558208867908, 0.15636361374193802, 0.1502162024853751, 0.14748211760260166] ***
*** center 1: selecting labels [1] (freq >= 2) [from [77, 1, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [41, 7, 0]]
** centroid: 3, normalized-entropy: 0.5993142373098089, [(1, 41), (2, 7)]
*** center 4: selecting labels [2] (freq >= 2) [from [1, 72, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 65, 15]]
** centroid: 5, normalized-entropy: 0.6962122601251459, [(2, 65), (3, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [46, 42, 0]]
** centroid: 7, normalized-entropy: 0.9985090989176322, [(1, 46), (2, 42)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21313863409264014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21313863409264014, 0.16114315452706068] ***
*** starting iteration: 2; err: [Inf, 0.21313863409264014, 0.16114315452706068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21313863409264014, 0.16114315452706068, 0.1514834245648235] ***
*** starting iteration: 3; err: [Inf, 0.21313863409264014, 0.16114315452706068, 0.1514834245648235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21313863409264014, 0.16114315452706068, 0.1514834245648235, 0.14852197788283228] ***
*** finished computation of 7 references, err: [Inf, 0.21313863409264014, 0.16114315452706068, 0.1514834245648235, 0.14852197788283228] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [71, 27, 0]]
** centroid: 1, normalized-entropy: 0.8492607824494318, [(1, 71), (2, 27)]
*** center 2: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 82, 13]]
** centroid: 4, normalized-entropy: 0.5759084429149787, [(2, 82), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 3, 0]]
** centroid: 5, normalized-entropy: 0.3424637724817958, [(1, 44), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [51, 27, 0]]
** centroid: 6, normalized-entropy: 0.9305861291319927, [(1, 51), (2, 27)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 52, 0]]
** centroid: 7, normalized-entropy: 0.3712323266408756, [(1, 4), (2, 52)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25926235993765295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25926235993765295, 0.19977423715405165] ***
*** starting iteration: 2; err: [Inf, 0.25926235993765295, 0.19977423715405165] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25926235993765295, 0.19977423715405165, 0.17099426609463989] ***
*** starting iteration: 3; err: [Inf, 0.25926235993765295, 0.19977423715405165, 0.17099426609463989] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25926235993765295, 0.19977423715405165, 0.17099426609463989, 0.15920949410181492] ***
*** finished computation of 7 references, err: [Inf, 0.25926235993765295, 0.19977423715405165, 0.17099426609463989, 0.15920949410181492] ***
*** center 1: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [28, 53, 0]]
** centroid: 3, normalized-entropy: 0.9301497323974339, [(1, 28), (2, 53)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 83, 14]]
** centroid: 4, normalized-entropy: 0.5954670513561874, [(2, 83), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 46, 0]]
** centroid: 5, normalized-entropy: 0.9823817086382354, [(1, 63), (2, 46)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [21, 5, 0]]
** centroid: 6, normalized-entropy: 0.7062740891876008, [(1, 21), (2, 5)]
*** center 7: selecting labels [1] (freq >= 2) [from [26, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17566586757451297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17566586757451297, 0.1544595704358071] ***
*** starting iteration: 2; err: [Inf, 0.17566586757451297, 0.1544595704358071] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17566586757451297, 0.1544595704358071, 0.14991072020796128] ***
*** starting iteration: 3; err: [Inf, 0.17566586757451297, 0.1544595704358071, 0.14991072020796128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17566586757451297, 0.1544595704358071, 0.14991072020796128, 0.14766918925009667] ***
*** finished computation of 7 references, err: [Inf, 0.17566586757451297, 0.1544595704358071, 0.14991072020796128, 0.14766918925009667] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [88, 9, 0]]
** centroid: 1, normalized-entropy: 0.44569317772256106, [(1, 88), (2, 9)]
*** center 2: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 50, 22]]
** centroid: 4, normalized-entropy: 0.887976319515135, [(2, 50), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [23, 55, 0]]
** centroid: 5, normalized-entropy: 0.8749315876677922, [(1, 23), (2, 55)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [37, 16, 0]]
** centroid: 6, normalized-entropy: 0.8835850861052531, [(1, 37), (2, 16)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20034747220389545] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20034747220389545, 0.17041982995159924] ***
*** starting iteration: 2; err: [Inf, 0.20034747220389545, 0.17041982995159924] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20034747220389545, 0.17041982995159924, 0.15558681433089078] ***
*** starting iteration: 3; err: [Inf, 0.20034747220389545, 0.17041982995159924, 0.15558681433089078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20034747220389545, 0.17041982995159924, 0.15558681433089078, 0.14842811268754302] ***
*** finished computation of 7 references, err: [Inf, 0.20034747220389545, 0.17041982995159924, 0.15558681433089078, 0.14842811268754302] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [13, 54, 0]]
** centroid: 1, normalized-entropy: 0.709825885194168, [(1, 13), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [18, 47, 0]]
** centroid: 2, normalized-entropy: 0.8512243352621381, [(1, 18), (2, 47)]
*** center 3: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [71, 2, 0]]
** centroid: 4, normalized-entropy: 0.18116640155354563, [(1, 71), (2, 2)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 52, 16]]
** centroid: 5, normalized-entropy: 0.787126586201269, [(2, 52), (3, 16)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 27, 0]]
** centroid: 6, normalized-entropy: 0.9726699911457106, [(1, 40), (2, 27)]
*** center 7: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20997715618833898] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20997715618833898, 0.1749231213517487] ***
*** starting iteration: 2; err: [Inf, 0.20997715618833898, 0.1749231213517487] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20997715618833898, 0.1749231213517487, 0.16680140637047589] ***
*** starting iteration: 3; err: [Inf, 0.20997715618833898, 0.1749231213517487, 0.16680140637047589] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20997715618833898, 0.1749231213517487, 0.16680140637047589, 0.16267430968023835] ***
*** finished computation of 7 references, err: [Inf, 0.20997715618833898, 0.1749231213517487, 0.16680140637047589, 0.16267430968023835] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [89, 11, 0]]
** centroid: 1, normalized-entropy: 0.49991595816452816, [(1, 89), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [2, 69, 0]]
** centroid: 2, normalized-entropy: 0.18512476010054582, [(1, 2), (2, 69)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [3, 65, 0]]
** centroid: 3, normalized-entropy: 0.260862909647207, [(1, 3), (2, 65)]
*** center 4: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [100, 5, 0]]
** centroid: 5, normalized-entropy: 0.2761954276479391, [(1, 100), (2, 5)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 19, 11]]
** centroid: 6, normalized-entropy: 0.9480782435939054, [(2, 19), (3, 11)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 17, 6]]
** centroid: 7, normalized-entropy: 0.828055725379504, [(2, 17), (3, 6)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18481938718445598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18481938718445598, 0.16078199021099135] ***
*** starting iteration: 2; err: [Inf, 0.18481938718445598, 0.16078199021099135] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18481938718445598, 0.16078199021099135, 0.15355470417719336] ***
*** starting iteration: 3; err: [Inf, 0.18481938718445598, 0.16078199021099135, 0.15355470417719336] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18481938718445598, 0.16078199021099135, 0.15355470417719336, 0.1498604605384171] ***
*** finished computation of 7 references, err: [Inf, 0.18481938718445598, 0.16078199021099135, 0.15355470417719336, 0.1498604605384171] ***
*** center 1: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [23, 57, 0]]
** centroid: 2, normalized-entropy: 0.8654698974285927, [(1, 23), (2, 57)]
*** center 3: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [25, 23, 0]]
** centroid: 4, normalized-entropy: 0.9987472979361685, [(1, 25), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 49, 0]]
** centroid: 5, normalized-entropy: 0.44506485705083854, [(1, 5), (2, 49)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 49, 20]]
** centroid: 6, normalized-entropy: 0.868533960265235, [(2, 49), (3, 20)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2220811794246547] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2220811794246547, 0.17501068304851652] ***
*** starting iteration: 2; err: [Inf, 0.2220811794246547, 0.17501068304851652] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2220811794246547, 0.17501068304851652, 0.15643469462078063] ***
*** starting iteration: 3; err: [Inf, 0.2220811794246547, 0.17501068304851652, 0.15643469462078063] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2220811794246547, 0.17501068304851652, 0.15643469462078063, 0.14816160290688277] ***
*** finished computation of 7 references, err: [Inf, 0.2220811794246547, 0.17501068304851652, 0.15643469462078063, 0.14816160290688277] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 91, 15]]
** centroid: 1, normalized-entropy: 0.5881782735046225, [(2, 91), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 47, 0]]
** centroid: 2, normalized-entropy: 1.0, [(1, 47), (2, 47)]
*** center 3: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 24, 0]]
** centroid: 5, normalized-entropy: 0.9411864371816836, [(1, 43), (2, 24)]
*** center 6: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 40, 0]]
** centroid: 7, normalized-entropy: 0.5032583347756457, [(1, 5), (2, 40)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2269253966892138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2269253966892138, 0.16152441639825701] ***
*** starting iteration: 2; err: [Inf, 0.2269253966892138, 0.16152441639825701] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2269253966892138, 0.16152441639825701, 0.1486196763040498] ***
*** starting iteration: 3; err: [Inf, 0.2269253966892138, 0.16152441639825701, 0.1486196763040498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2269253966892138, 0.16152441639825701, 0.1486196763040498, 0.14627520377747716] ***
*** finished computation of 7 references, err: [Inf, 0.2269253966892138, 0.16152441639825701, 0.1486196763040498, 0.14627520377747716] ***
*** center 1: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 61, 19]]
** centroid: 2, normalized-entropy: 0.79085809055281, [(2, 61), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 16, 0]]
** centroid: 3, normalized-entropy: 0.7478061583312324, [(1, 59), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [17, 53, 0]]
** centroid: 4, normalized-entropy: 0.7997594113291759, [(1, 17), (2, 53)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 31, 0]]
** centroid: 5, normalized-entropy: 0.9631672450918831, [(1, 49), (2, 31)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [29, 25, 0]]
** centroid: 6, normalized-entropy: 0.9960383613659186, [(1, 29), (2, 25)]
*** center 7: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22694432155042887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22694432155042887, 0.17164045193232597] ***
*** starting iteration: 2; err: [Inf, 0.22694432155042887, 0.17164045193232597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22694432155042887, 0.17164045193232597, 0.1599435413987376] ***
*** starting iteration: 3; err: [Inf, 0.22694432155042887, 0.17164045193232597, 0.1599435413987376] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22694432155042887, 0.17164045193232597, 0.1599435413987376, 0.1571397102200426] ***
*** finished computation of 7 references, err: [Inf, 0.22694432155042887, 0.17164045193232597, 0.1599435413987376, 0.1571397102200426] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [69, 21, 0]]
** centroid: 2, normalized-entropy: 0.7837769474847011, [(1, 69), (2, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [79, 19, 0]]
** centroid: 3, normalized-entropy: 0.7095128863456239, [(1, 79), (2, 19)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [69, 31, 0]]
** centroid: 5, normalized-entropy: 0.8931734583778567, [(1, 69), (2, 31)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 18, 10]]
** centroid: 6, normalized-entropy: 0.940285958670631, [(2, 18), (3, 10)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 35, 8]]
** centroid: 7, normalized-entropy: 0.6931274153282881, [(2, 35), (3, 8)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21892449780739845] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21892449780739845, 0.16091034893831238] ***
*** starting iteration: 2; err: [Inf, 0.21892449780739845, 0.16091034893831238] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21892449780739845, 0.16091034893831238, 0.15231512898020447] ***
*** starting iteration: 3; err: [Inf, 0.21892449780739845, 0.16091034893831238, 0.15231512898020447] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21892449780739845, 0.16091034893831238, 0.15231512898020447, 0.14989599342271687] ***
*** finished computation of 7 references, err: [Inf, 0.21892449780739845, 0.16091034893831238, 0.15231512898020447, 0.14989599342271687] ***
*** center 1: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [10, 81, 0]]
** centroid: 2, normalized-entropy: 0.49958440742366095, [(1, 10), (2, 81)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [50, 5, 0]]
** centroid: 3, normalized-entropy: 0.43949698692151346, [(1, 50), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [26, 32, 0]]
** centroid: 4, normalized-entropy: 0.9922666387194963, [(1, 26), (2, 32)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 73, 18]]
** centroid: 5, normalized-entropy: 0.7175106531195438, [(2, 73), (3, 18)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [69, 3, 0]]
** centroid: 6, normalized-entropy: 0.24988229283318547, [(1, 69), (2, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27779936769604685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27779936769604685, 0.19580724258348345] ***
*** starting iteration: 2; err: [Inf, 0.27779936769604685, 0.19580724258348345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27779936769604685, 0.19580724258348345, 0.17992963405605406] ***
*** starting iteration: 3; err: [Inf, 0.27779936769604685, 0.19580724258348345, 0.17992963405605406] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27779936769604685, 0.19580724258348345, 0.17992963405605406, 0.16382615988515317] ***
*** finished computation of 7 references, err: [Inf, 0.27779936769604685, 0.19580724258348345, 0.17992963405605406, 0.16382615988515317] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 49, 0]]
** centroid: 1, normalized-entropy: 0.9886994082884974, [(1, 63), (2, 49)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [66, 12, 0]]
** centroid: 2, normalized-entropy: 0.6193821946787638, [(1, 66), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 103, 19]]
** centroid: 4, normalized-entropy: 0.6240145748145288, [(2, 103), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 26, 0]]
** centroid: 5, normalized-entropy: 0.9635359835770286, [(1, 41), (2, 26)]
*** center 6: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23105848692916334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23105848692916334, 0.15347083972021938] ***
*** starting iteration: 2; err: [Inf, 0.23105848692916334, 0.15347083972021938] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23105848692916334, 0.15347083972021938, 0.1458218818055466] ***
*** starting iteration: 3; err: [Inf, 0.23105848692916334, 0.15347083972021938, 0.1458218818055466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23105848692916334, 0.15347083972021938, 0.1458218818055466, 0.14484546102862805] ***
*** finished computation of 7 references, err: [Inf, 0.23105848692916334, 0.15347083972021938, 0.1458218818055466, 0.14484546102862805] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 76, 13]]
** centroid: 1, normalized-entropy: 0.5999108763872215, [(2, 76), (3, 13)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 19, 0]]
** centroid: 2, normalized-entropy: 0.785889583138768, [(1, 62), (2, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 25, 0]]
** centroid: 3, normalized-entropy: 0.935940714955517, [(1, 46), (2, 25)]
*** center 4: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 65, 0]]
** centroid: 6, normalized-entropy: 0.260862909647207, [(1, 3), (2, 65)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [56, 2, 0]]
** centroid: 7, normalized-entropy: 0.21639693245126485, [(1, 56), (2, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24934072641842067] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24934072641842067, 0.17009724606201052] ***
*** starting iteration: 2; err: [Inf, 0.24934072641842067, 0.17009724606201052] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24934072641842067, 0.17009724606201052, 0.15724135971069336] ***
*** starting iteration: 3; err: [Inf, 0.24934072641842067, 0.17009724606201052, 0.15724135971069336] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24934072641842067, 0.17009724606201052, 0.15724135971069336, 0.14969185226131232] ***
*** finished computation of 7 references, err: [Inf, 0.24934072641842067, 0.17009724606201052, 0.15724135971069336, 0.14969185226131232] ***
*** center 1: selecting labels [1] (freq >= 2) [from [78, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [3, 58, 0]]
** centroid: 2, normalized-entropy: 0.28290479297989196, [(1, 3), (2, 58)]
*** center 3: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 41, 0]]
** centroid: 4, normalized-entropy: 0.9786239947589973, [(1, 58), (2, 41)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 75, 14]]
** centroid: 5, normalized-entropy: 0.6278191534832795, [(2, 75), (3, 14)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [56, 3, 0]]
** centroid: 6, normalized-entropy: 0.2899860470332091, [(1, 56), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [45, 2, 0]]
** centroid: 7, normalized-entropy: 0.2538784402981617, [(1, 45), (2, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2081205790610984] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2081205790610984, 0.16384872724674643] ***
*** starting iteration: 2; err: [Inf, 0.2081205790610984, 0.16384872724674643] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2081205790610984, 0.16384872724674643, 0.15216309313243254] ***
*** starting iteration: 3; err: [Inf, 0.2081205790610984, 0.16384872724674643, 0.15216309313243254] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2081205790610984, 0.16384872724674643, 0.15216309313243254, 0.14697785565257074] ***
*** finished computation of 7 references, err: [Inf, 0.2081205790610984, 0.16384872724674643, 0.15216309313243254, 0.14697785565257074] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 54, 0]]
** centroid: 1, normalized-entropy: 0.46899559358928133, [(1, 6), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [86, 7, 0]]
** centroid: 2, normalized-entropy: 0.3852851190780996, [(1, 86), (2, 7)]
*** center 3: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 46, 18]]
** centroid: 4, normalized-entropy: 0.8571484374283717, [(2, 46), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [42, 25, 0]]
** centroid: 5, normalized-entropy: 0.9530483471581301, [(1, 42), (2, 25)]
*** center 6: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1894186168401502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1894186168401502, 0.15294202043861152] ***
*** starting iteration: 2; err: [Inf, 0.1894186168401502, 0.15294202043861152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1894186168401502, 0.15294202043861152, 0.14758196903951465] ***
*** starting iteration: 3; err: [Inf, 0.1894186168401502, 0.15294202043861152, 0.14758196903951465] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1894186168401502, 0.15294202043861152, 0.14758196903951465, 0.14483696389291437] ***
*** finished computation of 7 references, err: [Inf, 0.1894186168401502, 0.15294202043861152, 0.14758196903951465, 0.14483696389291437] ***
*** center 1: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 87, 15]]
** centroid: 2, normalized-entropy: 0.6024308020404452, [(2, 87), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [39, 48, 0]]
** centroid: 3, normalized-entropy: 0.9922666387194963, [(1, 39), (2, 48)]
*** center 4: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 23, 0]]
** centroid: 5, normalized-entropy: 0.9327076126690367, [(1, 43), (2, 23)]
*** center 6: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [33, 36, 0]]
** centroid: 7, normalized-entropy: 0.9986359641585719, [(1, 33), (2, 36)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17338175065908581] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17338175065908581, 0.14813265086710453] ***
*** starting iteration: 2; err: [Inf, 0.17338175065908581, 0.14813265086710453] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17338175065908581, 0.14813265086710453, 0.14542781944572925] ***
*** starting iteration: 3; err: [Inf, 0.17338175065908581, 0.14813265086710453, 0.14542781944572925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17338175065908581, 0.14813265086710453, 0.14542781944572925, 0.14295346806477754] ***
*** finished computation of 7 references, err: [Inf, 0.17338175065908581, 0.14813265086710453, 0.14542781944572925, 0.14295346806477754] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [72, 17, 0]]
** centroid: 1, normalized-entropy: 0.7035821005719904, [(1, 72), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 8, 0]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(1, 48), (2, 8)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [3, 72, 0]]
** centroid: 3, normalized-entropy: 0.24229218908241482, [(1, 3), (2, 72)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [44, 28, 0]]
** centroid: 4, normalized-entropy: 0.9640787648082293, [(1, 44), (2, 28)]
*** center 5: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 67, 15]]
** centroid: 7, normalized-entropy: 0.6864381668766382, [(2, 67), (3, 15)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26954701002314685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26954701002314685, 0.17938661648891865] ***
*** starting iteration: 2; err: [Inf, 0.26954701002314685, 0.17938661648891865] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26954701002314685, 0.17938661648891865, 0.16116414771415294] ***
*** starting iteration: 3; err: [Inf, 0.26954701002314685, 0.17938661648891865, 0.16116414771415294] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26954701002314685, 0.17938661648891865, 0.16116414771415294, 0.1507711839582771] ***
*** finished computation of 7 references, err: [Inf, 0.26954701002314685, 0.17938661648891865, 0.16116414771415294, 0.1507711839582771] ***
*** center 1: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [49, 13, 0]]
** centroid: 4, normalized-entropy: 0.7408656862339816, [(1, 49), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [47, 29, 0]]
** centroid: 5, normalized-entropy: 0.9591495543968941, [(1, 47), (2, 29)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [22, 61, 0]]
** centroid: 6, normalized-entropy: 0.8342867421739538, [(1, 22), (2, 61)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 97, 15]]
** centroid: 7, normalized-entropy: 0.5681147021801115, [(2, 97), (3, 15)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21646151935122906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21646151935122906, 0.17557024181308226] ***
*** starting iteration: 2; err: [Inf, 0.21646151935122906, 0.17557024181308226] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21646151935122906, 0.17557024181308226, 0.16745333896018566] ***
*** starting iteration: 3; err: [Inf, 0.21646151935122906, 0.17557024181308226, 0.16745333896018566] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21646151935122906, 0.17557024181308226, 0.16745333896018566, 0.16302502121962606] ***
*** finished computation of 7 references, err: [Inf, 0.21646151935122906, 0.17557024181308226, 0.16745333896018566, 0.16302502121962606] ***
*** center 1: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [78, 22, 0]]
** centroid: 2, normalized-entropy: 0.7601675029619658, [(1, 78), (2, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [9, 72, 0]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(1, 9), (2, 72)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [17, 19, 0]]
** centroid: 4, normalized-entropy: 0.9977724720899819, [(1, 17), (2, 19)]
*** center 5: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 85, 15]]
** centroid: 6, normalized-entropy: 0.6098403047164005, [(2, 85), (3, 15)]
*** center 7: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2456158650368452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2456158650368452, 0.18011573365144432] ***
*** starting iteration: 2; err: [Inf, 0.2456158650368452, 0.18011573365144432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2456158650368452, 0.18011573365144432, 0.16709299470297992] ***
*** starting iteration: 3; err: [Inf, 0.2456158650368452, 0.18011573365144432, 0.16709299470297992] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2456158650368452, 0.18011573365144432, 0.16709299470297992, 0.15920636910572647] ***
*** finished computation of 7 references, err: [Inf, 0.2456158650368452, 0.18011573365144432, 0.16709299470297992, 0.15920636910572647] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [20, 60, 0]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(1, 20), (2, 60)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 37, 17]]
** centroid: 2, normalized-entropy: 0.8986533756907481, [(2, 37), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [96, 22, 0]]
** centroid: 3, normalized-entropy: 0.693965967334286, [(1, 96), (2, 22)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 38, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [23, 27, 0]]
** centroid: 7, normalized-entropy: 0.9953784388202258, [(1, 23), (2, 27)]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 379,3 => 34,1 => 587), Dict(2 => 381,3 => 35,1 => 584))
[ Info: (AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.6, 2), 0.9530128931326537)
[ Info: ===== scores for single classifier: {"micro_f1":0.9500000000000001,"precision":0.95,"recall":0.95,"macro_recall":0.9435193460406489,"macro_f1":0.9297581809555272,"accuracy":0.95,"class_f1":{"2":0.932975871313673,"3":0.8918918918918919,"1":0.964406779661017},"class_precision":{"2":0.9534246575342465,"3":0.8461538461538461,"1":0.9546979865771812},"class_recall":{"2":0.9133858267716536,"3":0.9428571428571428,"1":0.9743150684931506}}
[ Info: ===== scores for 1: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9816647490981435,"macro_f1":0.9556186757960705,"accuracy":0.978,"class_f1":{"2":0.9705093833780162,"3":0.9090909090909091,"1":0.9872557349192864},"class_precision":{"2":0.9917808219178083,"3":0.8333333333333334,"1":0.9797639123102867},"class_recall":{"2":0.9501312335958005,"3":1.0,"1":0.9948630136986302}}
[ Info: ===== scores for 5: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9846684404175505,"macro_f1":0.9528811280993742,"accuracy":0.979,"class_f1":{"2":0.9724047306176085,"3":0.8974358974358974,"1":0.9888027562446168},"class_precision":{"2":0.9736842105263158,"3":0.813953488372093,"1":0.9948006932409013},"class_recall":{"2":0.9711286089238845,"3":1.0,"1":0.9828767123287672}}
[ Info: ===== scores for 7: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9681455057843796,"macro_f1":0.925244929935695,"accuracy":0.97,"class_f1":{"2":0.960212201591512,"3":0.8292682926829269,"1":0.9862542955326461},"class_precision":{"2":0.9705093833780161,"3":0.723404255319149,"1":0.9896551724137931},"class_recall":{"2":0.9501312335958005,"3":0.9714285714285714,"1":0.9828767123287672}}
[ Info: ===== scores for 9: {"micro_f1":0.975,"precision":0.975,"recall":0.975,"macro_recall":0.9808647634799076,"macro_f1":0.9333112962730773,"accuracy":0.975,"class_f1":{"2":0.9668874172185431,"3":0.8433734939759037,"1":0.9896729776247848},"class_precision":{"2":0.9759358288770054,"3":0.7291666666666666,"1":0.9948096885813149},"class_recall":{"2":0.958005249343832,"3":1.0,"1":0.9845890410958904}}
[ Info: ===== scores for 11: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.978277544074114,"macro_f1":0.92437682894003,"accuracy":0.971,"class_f1":{"2":0.9616908850726553,"3":0.8235294117647058,"1":0.9879101899827288},"class_precision":{"2":0.9680851063829787,"3":0.7,"1":0.9965156794425087},"class_recall":{"2":0.9553805774278216,"3":1.0,"1":0.9794520547945206}}
(score = 0.982, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.976, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.968, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: ("config: ", "{\"score\":0.982,\"k\":1,\"kernel\":\"direct_kernel\",\"dist\":\"l1_distance\",\"kernel_fun\":\"fun\"}")
[ Info: ===== scores optimized! B: {"micro_f1":0.982,"precision":0.982,"recall":0.982,"macro_recall":0.9845560828868994,"macro_f1":0.9585388094571027,"accuracy":0.982,"class_f1":{"2":0.9758713136729223,"3":0.9090909090909091,"1":0.9906542056074766},"class_precision":{"2":0.9972602739726028,"3":0.8333333333333334,"1":0.9831365935919055},"class_recall":{"2":0.9553805774278216,"3":1.0,"1":0.9982876712328768}}
Test Summary: | Pass  Total
AKNC          |    8      8
    Testing KCenters tests passed 
