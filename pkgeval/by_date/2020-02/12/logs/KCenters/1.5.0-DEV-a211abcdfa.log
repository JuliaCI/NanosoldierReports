Julia Version 1.5.0-DEV.260
Commit a211abcdfa (2020-02-10 22:01 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Reexport ──────────────────── v0.2.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataValueInterfaces ───────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed KCenters ──────────────────── v0.1.13
  Installed MLDataPattern ─────────────── v0.5.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed Missings ──────────────────── v0.4.3
  Installed Parsers ───────────────────── v0.3.11
  Installed OrderedCollections ────────── v1.1.0
  Installed TableTraits ───────────────── v1.0.0
  Installed Tables ────────────────────── v1.0.0
  Installed JSON ──────────────────────── v0.21.0
  Installed StatsBase ─────────────────── v0.32.0
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataFrames ────────────────── v0.18.4
  Installed Compat ────────────────────── v3.5.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed DataAPI ───────────────────── v1.1.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed DataStructures ────────────── v0.17.9
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed MLDataUtils ───────────────── v0.5.0
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.1.13
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.5.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.18.4
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.1.13
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_S5Nm4j/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.5.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.18.4
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.1.13
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.0
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9316620069742203
[ Info: 0.8307796732584636
[ Info: 0.5541281573474407
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33956977538764477
mean(cdnet.distances) = 0.367946391304334
mean(crand.distances) = 0.34455659359693525
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.58984375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.58984375,"f1":0.7268755550005556,"seconds":5.17629086971283e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.875,"distances_sum":1519.903779615543}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.435546875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.435546875,"f1":null,"seconds":3.5241246223449707e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":6.8125,"distances_sum":1118.3566282485476}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6943359375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6943359375,"f1":0.811344905094906,"seconds":4.306435585021973e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.2734375,"distances_sum":1835.8776962265347}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6943359375,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6943359375,"f1":0.811344905094906,"seconds":4.306435585021973e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.2734375,"distances_sum":1835.8776962265347}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9487751831501838,"seconds":5.323439836502075e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9296875,"distances_sum":2668.7369618166754}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9401499542124546,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9609375,"distances_sum":2609.830031797887}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":7,"bsize":5}, perf: {"precision":null,"recall":0.7861328125,"f1":null,"seconds":4.533678293228149e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.78125,"distances_sum":2127.1610493567728}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8684102355977366,"seconds":4.3567270040512085e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.734375,"distances_sum":2128.8430939583986}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.701171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.701171875,"f1":0.8157061688311696,"seconds":4.08664345741272e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.2578125,"distances_sum":1837.4514592722544}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9107829670329678,"seconds":4.813075065612793e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9296875,"distances_sum":2369.1926256675324}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7041015625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.7041015625,"f1":0.8156102577977585,"seconds":4.1835010051727295e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.15625,"distances_sum":1893.4023711945279}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":9,"bsize":7},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9487751831501838,"seconds":5.323439836502075e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9296875,"distances_sum":2668.7369618166754}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":12,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9614068223443228,"seconds":5.401670932769775e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.96875,"distances_sum":2735.200442207101}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":12,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9545844780219783,"seconds":5.250796675682068e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9453125,"distances_sum":2690.4594856028266}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":11,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9675480769230775,"seconds":5.166977643966675e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9765625,"distances_sum":2790.6658997397603}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":11,"bsize":11}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9790750915750919,"seconds":5.261972546577454e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.984375,"distances_sum":2882.1250674709772}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9753720238095243,"seconds":5.193054676055908e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9765625,"distances_sum":2848.466985092824}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9706330128205132,"seconds":5.146488547325134e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.96875,"distances_sum":2824.6350781171927}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":11,"bsize":11},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9790750915750919,"seconds":5.261972546577454e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.984375,"distances_sum":2882.1250674709772}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":11,"bsize":11},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9790750915750919,"seconds":5.261972546577454e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.984375,"distances_sum":2882.1250674709772}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.712890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.712890625,"f1":0.8215071386946396,"seconds":5.973502993583679e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.9609375,"distances_sum":1737.879489172448}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.712890625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.712890625,"f1":0.8215071386946396,"seconds":5.973502993583679e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.9609375,"distances_sum":1737.879489172448}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7353515625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7353515625,"f1":0.8393606393606404,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.0625,"distances_sum":1835.5132610560345}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9533940018315024,"seconds":6.502494215965271e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.828125,"distances_sum":2486.920007853973}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9377148892773899,"seconds":6.301328539848328e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.8125,"distances_sum":2368.592732340784}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9533940018315024,"seconds":6.502494215965271e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.828125,"distances_sum":2486.920007853973}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9749828296703297,"seconds":6.8675726652145386e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9609375,"distances_sum":2619.3476562617925}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9675251831501835,"seconds":6.709247827529907e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9453125,"distances_sum":2570.338518524664}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9598843864468869,"seconds":6.496906280517578e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.890625,"distances_sum":2515.0750097050905}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9575065559440563,"seconds":6.51925802230835e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.890625,"distances_sum":2512.945949097486}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9592147435897442,"seconds":6.413087248802185e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.875,"distances_sum":2505.4185177983145}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9749828296703297,"seconds":6.8675726652145386e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9609375,"distances_sum":2619.3476562617925}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9749828296703297,"seconds":6.8675726652145386e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9609375,"distances_sum":2619.3476562617925}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.408203125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.408203125,"f1":null,"seconds":3.734603524208069e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":6.234375,"distances_sum":902.6762708535363}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.408203125,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.408203125,"f1":null,"seconds":3.734603524208069e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":6.234375,"distances_sum":902.6762708535363}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.58984375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.58984375,"f1":0.7265793234543243,"seconds":4.567205905914307e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.1171875,"distances_sum":1432.3610532990274}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.58984375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.58984375,"f1":0.7265793234543243,"seconds":4.567205905914307e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.1171875,"distances_sum":1432.3610532990274}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9118048618048626,"seconds":5.763024091720581e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.6328125,"distances_sum":2200.2855479654727}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.8708572677322686,"seconds":6.077811121940613e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.390625,"distances_sum":2007.9065198993917}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9393517940392945,"seconds":6.886199116706848e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7109375,"distances_sum":2450.9555689520325}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.896484375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.896484375,"f1":0.9393517940392945,"seconds":6.886199116706848e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7109375,"distances_sum":2450.9555689520325}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.896484375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.896484375,"f1":0.9393517940392945,"seconds":6.886199116706848e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7109375,"distances_sum":2450.9555689520325}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.7963335275835285,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":7.8125,"distances_sum":1547.039592392401}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5693359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5693359375,"f1":0.7116283022533029,"seconds":4.667788743972778e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":6.96875,"distances_sum":1301.605760660842}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.677734375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.677734375,"f1":0.7963335275835285,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":7.8125,"distances_sum":1547.039592392401}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8631222943722952,"seconds":6.159767508506775e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.3125,"distances_sum":1881.484638444178}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9520375457875463,"seconds":6.284564733505249e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.8515625,"distances_sum":2406.32104605455}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.917144834332335,"seconds":6.2622129917144775e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.6328125,"distances_sum":2135.5222104894087}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7900390625,"f1":0.8769605394605403,"seconds":5.997717380523682e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.46875,"distances_sum":1918.8384155864167}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9520375457875463,"seconds":6.284564733505249e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.8515625,"distances_sum":2406.32104605455}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9781994047619051,"seconds":6.9607049226760864e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.953125,"distances_sum":2567.329948049428}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9797619047619051,"seconds":7.109716534614563e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.9375,"distances_sum":2601.7164833722773}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9594010156510161,"seconds":7.098540663719177e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.8984375,"distances_sum":2428.6914360668843}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9547161172161175,"seconds":6.556510925292969e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.75,"distances_sum":2457.9893377517096}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9797619047619051,"seconds":7.109716534614563e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.9375,"distances_sum":2601.7164833722773}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9797619047619051,"seconds":7.109716534614563e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.9375,"distances_sum":2601.7164833722773}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5791015625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5791015625,"f1":0.7181001290376298,"seconds":4.950910806655884e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":7.3046875,"distances_sum":1382.454191522643}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.8040761322011329,"seconds":6.16908073425293e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":7.8125,"distances_sum":1684.757291840549}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.203125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.203125,"f1":null,"seconds":3.637745976448059e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":5.78125,"distances_sum":523.0412496956931}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.68359375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.68359375,"f1":0.8040761322011329,"seconds":6.16908073425293e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":7.8125,"distances_sum":1684.757291840549}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9588427197802202,"seconds":7.031485438346863e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.8984375,"distances_sum":2573.9752064438126}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.9034543581418589,"seconds":6.414949893951416e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.609375,"distances_sum":2167.2925291499137}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8732174075924084,"seconds":6.152316927909851e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.484375,"distances_sum":1994.8678594524204}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9588427197802202,"seconds":7.031485438346863e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.8984375,"distances_sum":2573.9752064438126}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9734031593406597,"seconds":7.3034316301345825e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.921875,"distances_sum":2682.081947685551}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9744448260073262,"seconds":7.323920726776123e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.921875,"distances_sum":2719.489990816133}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9744448260073262,"seconds":7.323920726776123e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.921875,"distances_sum":2719.489990816133}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9744448260073262,"seconds":7.323920726776123e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.921875,"distances_sum":2719.489990816133}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1455078125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1455078125,"f1":null,"seconds":3.460794687271118e-6,"exhaustive_search_seconds":1.6577541828155518e-6,"evaluations":4.6328125,"distances_sum":421.38043446987325}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.658203125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.658203125,"f1":0.7757183788433796,"seconds":5.448237061500549e-6,"exhaustive_search_seconds":1.6577541828155518e-6,"evaluations":7.6484375,"distances_sum":1722.584291177372}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.658203125,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.658203125,"f1":0.7757183788433796,"seconds":5.448237061500549e-6,"exhaustive_search_seconds":1.6577541828155518e-6,"evaluations":7.6484375,"distances_sum":1722.584291177372}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7314453125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7314453125,"f1":0.8344873876123884,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.6577541828155518e-6,"evaluations":8.03125,"distances_sum":1936.195768920379}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7314453125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7314453125,"f1":0.8344873876123884,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.6577541828155518e-6,"evaluations":8.03125,"distances_sum":1936.195768920379}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9116217116217122,"seconds":6.577000021934509e-6,"exhaustive_search_seconds":1.6577541828155518e-6,"evaluations":8.625,"distances_sum":2369.062374384988}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9382783882783889,"seconds":6.804242730140686e-6,"exhaustive_search_seconds":1.6577541828155518e-6,"evaluations":8.671875,"distances_sum":2535.3246671890947}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9382783882783889,"seconds":6.804242730140686e-6,"exhaustive_search_seconds":1.6577541828155518e-6,"evaluations":8.671875,"distances_sum":2535.3246671890947}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.892578125,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9382783882783889,"seconds":6.804242730140686e-6,"exhaustive_search_seconds":1.6577541828155518e-6,"evaluations":8.671875,"distances_sum":2535.3246671890947}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.71484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.71484375,"f1":0.8257247960372969,"seconds":9.233132004737854e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.0859375,"distances_sum":1736.1619694818698}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3857421875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3857421875,"f1":null,"seconds":4.015862941741943e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":5.71875,"distances_sum":857.5525857759984}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.7904198232323241,"seconds":7.236376404762268e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":7.8671875,"distances_sum":1655.6623814708087}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.71484375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.71484375,"f1":0.8257247960372969,"seconds":9.233132004737854e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.0859375,"distances_sum":1736.1619694818698}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9502174908424914,"seconds":6.2212347984313965e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8828125,"distances_sum":2470.9546139375557}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8949524433899442,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.6328125,"distances_sum":2161.086388061398}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9408367673992678,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.7734375,"distances_sum":2390.9402618882864}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9502174908424914,"seconds":6.2212347984313965e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8828125,"distances_sum":2470.9546139375557}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9591778013653017,"seconds":6.761401891708374e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8984375,"distances_sum":2496.723204404697}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9708905677655681,"seconds":6.925314664840698e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.9453125,"distances_sum":2568.721026284113}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9632841117216123,"seconds":6.727874279022217e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.9296875,"distances_sum":2522.885217030688}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9739583333333337,"seconds":7.62939453125e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.921875,"distances_sum":2630.6141024420936}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9618589743589746,"seconds":5.986541509628296e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.875,"distances_sum":2539.0577746925296}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.967542353479854,"seconds":6.036832928657532e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8984375,"distances_sum":2571.47619750004}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9719894688644691,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8984375,"distances_sum":2630.5948873409984}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9739583333333337,"seconds":7.62939453125e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.921875,"distances_sum":2630.6141024420936}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9739583333333337,"seconds":7.62939453125e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.921875,"distances_sum":2630.6141024420936}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.857249521312022,"seconds":8.91461968421936e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.2265625,"distances_sum":1878.0963629609753}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.857249521312022,"seconds":8.91461968421936e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.2265625,"distances_sum":1878.0963629609753}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.857249521312022,"seconds":8.91461968421936e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.2265625,"distances_sum":1878.0963629609753}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.857249521312022,"seconds":8.91461968421936e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.2265625,"distances_sum":1878.0963629609753}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7940434565434572,"seconds":5.012378096580505e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.1796875,"distances_sum":1611.6949275527231}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.673828125,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.673828125,"f1":0.7940434565434572,"seconds":5.012378096580505e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.1796875,"distances_sum":1611.6949275527231}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9083505036630044,"seconds":5.651265382766724e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.453125,"distances_sum":2208.324438002551}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9342948717948723,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.78125,"distances_sum":2377.3005355599435}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.8426412129537139,"seconds":5.977228283882141e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.1953125,"distances_sum":1882.7892224626114}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8876953125,"state":{"ssize":8,"bsize":7},"perf":{"precision":1.0,"recall":0.8876953125,"f1":0.9342948717948723,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.78125,"distances_sum":2377.3005355599435}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":10,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.967027243589744,"seconds":6.8675726652145386e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.859375,"distances_sum":2615.9043931458073}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9512305402930407,"seconds":6.562098860740662e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.78125,"distances_sum":2519.596143528211}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9476991758241763,"seconds":6.332993507385254e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.65625,"distances_sum":2513.658298261488}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.969013278388279,"seconds":6.757676601409912e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8984375,"distances_sum":2627.5431760148704}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9415464743589748,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8046875,"distances_sum":2424.73649193629}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9469379578754586,"seconds":6.429851055145264e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.7265625,"distances_sum":2498.47264105226}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9581730769230774,"seconds":6.4838677644729614e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8203125,"distances_sum":2549.8547455370594}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.969013278388279,"seconds":6.757676601409912e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8984375,"distances_sum":2627.5431760148704}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.969013278388279,"seconds":6.757676601409912e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8984375,"distances_sum":2627.5431760148704}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.177734375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.177734375,"f1":null,"seconds":3.6116689443588257e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":5.1484375,"distances_sum":407.119734039687}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.177734375,"state":{"ssize":4,"bsize":1},"perf":{"precision":null,"recall":0.177734375,"f1":null,"seconds":3.6116689443588257e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":5.1484375,"distances_sum":407.119734039687}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.796238657176158,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.1484375,"distances_sum":1597.6586353326177}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.181640625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.181640625,"f1":null,"seconds":3.4868717193603516e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":5.3125,"distances_sum":408.0427671334944}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3701171875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3701171875,"f1":null,"seconds":3.825873136520386e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":6.2421875,"distances_sum":818.4923665785469}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6767578125,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6767578125,"f1":0.796238657176158,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.1484375,"distances_sum":1597.6586353326177}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9344036172161176,"seconds":5.93625009059906e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.6953125,"distances_sum":2313.6560613454953}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7900390625,"f1":0.8738334582084589,"seconds":5.997717380523682e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.3984375,"distances_sum":1925.0795595368922}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8857421875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8857421875,"f1":0.9344036172161176,"seconds":5.93625009059906e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.6953125,"distances_sum":2313.6560613454953}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8857421875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8857421875,"f1":0.9344036172161176,"seconds":5.93625009059906e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.6953125,"distances_sum":2313.6560613454953}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.642578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.642578125,"f1":0.7734218906093914,"seconds":4.937872290611267e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":7.75,"distances_sum":1401.9027226239566}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4208984375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4208984375,"f1":null,"seconds":4.159286618232727e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":6.3984375,"distances_sum":916.9882512731504}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.642578125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.642578125,"f1":0.7734218906093914,"seconds":4.937872290611267e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":7.75,"distances_sum":1401.9027226239566}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.947968177655678,"seconds":6.198883056640625e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.8359375,"distances_sum":2382.980766569276}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9091796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.947968177655678,"seconds":6.198883056640625e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.8359375,"distances_sum":2382.980766569276}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9584706959706965,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.9375,"distances_sum":2436.6614347752216}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9697265625, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9697265625,"f1":0.9836309523809526,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.9921875,"distances_sum":2607.1369779933602}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9697265625,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.9836309523809526,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.9921875,"distances_sum":2607.1369779933602}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9697265625,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.9836309523809526,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.9921875,"distances_sum":2607.1369779933602}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8631524725274734,"seconds":6.018206477165222e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.53125,"distances_sum":1876.4392287082164}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2158203125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2158203125,"f1":null,"seconds":4.1406601667404175e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":6.0078125,"distances_sum":482.86505420141106}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7685546875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7685546875,"f1":0.8631524725274734,"seconds":6.018206477165222e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.53125,"distances_sum":1876.4392287082164}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9558092948717954,"seconds":6.577000021934509e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.9140625,"distances_sum":2490.192410016364}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9558092948717954,"seconds":6.577000021934509e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.9140625,"distances_sum":2490.192410016364}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9543987262737268,"seconds":6.61797821521759e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.8515625,"distances_sum":2517.9149757313326}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9582703754578759,"seconds":6.7427754402160645e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.921875,"distances_sum":2489.3612316094723}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9582703754578759,"seconds":6.7427754402160645e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.921875,"distances_sum":2489.3612316094723}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9267578125,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9582703754578759,"seconds":6.7427754402160645e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.921875,"distances_sum":2489.3612316094723}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73828125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.73828125,"f1":0.8412665459540469,"seconds":6.3516199588775635e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.9921875,"distances_sum":1875.3634679958382}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8573062354312363,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.09375,"distances_sum":1943.4427175717599}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7607421875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7607421875,"f1":0.8573062354312363,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.09375,"distances_sum":1943.4427175717599}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8917072510822519,"seconds":6.07222318649292e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.5546875,"distances_sum":2156.128187610426}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9200091575091582,"seconds":6.884336471557617e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.640625,"distances_sum":2361.920236386646}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.963710768398269,"seconds":6.701797246932983e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.90625,"distances_sum":2612.984734102761}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.963710768398269,"seconds":6.701797246932983e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.90625,"distances_sum":2612.984734102761}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9784054487179489,"seconds":6.876885890960693e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.953125,"distances_sum":2734.080130375627}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9667410714285718,"seconds":6.977468729019165e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.96875,"distances_sum":2613.0642613431114}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9784054487179489,"seconds":6.876885890960693e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.953125,"distances_sum":2734.080130375627}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9784054487179489,"seconds":6.876885890960693e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.953125,"distances_sum":2734.080130375627}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.7975571303696313,"seconds":4.800036549568176e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":7.421875,"distances_sum":1333.6807464183373}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.421875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.421875,"f1":null,"seconds":3.7904828786849976e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":6.203125,"distances_sum":732.9232274568374}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8488563519813526,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.40625,"distances_sum":1524.7873522931734}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7509765625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7509765625,"f1":0.8488563519813526,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.40625,"distances_sum":1524.7873522931734}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9368761446886453,"seconds":5.6549906730651855e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.6953125,"distances_sum":2047.6173627803983}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9053316475191485,"seconds":5.597248673439026e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.796875,"distances_sum":1785.8142913463882}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8916015625,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.8916015625,"f1":0.9368761446886453,"seconds":5.6549906730651855e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.6953125,"distances_sum":2047.6173627803983}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9474587912087916,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.8125,"distances_sum":2073.68676991998}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9465086996337002,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.84375,"distances_sum":2031.6978605678835}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9474587912087916,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.8125,"distances_sum":2073.68676991998}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.908203125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9474587912087916,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.8125,"distances_sum":2073.68676991998}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3935546875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3935546875,"f1":null,"seconds":3.7383288145065308e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.0546875,"distances_sum":758.7200790469655}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.70703125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.70703125,"f1":0.8191750957375965,"seconds":5.319714546203613e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.453125,"distances_sum":1434.7156973327621}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.792782044344545,"seconds":4.727393388748169e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.75,"distances_sum":1365.2610859987594}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.70703125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.70703125,"f1":0.8191750957375965,"seconds":5.319714546203613e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.453125,"distances_sum":1434.7156973327621}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8534975441225449,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.5078125,"distances_sum":1615.827706626851}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9416208791208796,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.765625,"distances_sum":2101.651121372529}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9032196969696978,"seconds":5.453824996948242e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8359375,"distances_sum":1841.0898814050588}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8956595487845495,"seconds":5.152076482772827e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.6953125,"distances_sum":1819.808529445091}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8984375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8984375,"f1":0.9416208791208796,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.765625,"distances_sum":2101.651121372529}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.965293040293041,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8671875,"distances_sum":2254.475455424843}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9669700091575096,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9375,"distances_sum":2233.804838329587}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9669700091575096,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9375,"distances_sum":2233.804838329587}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9669700091575096,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9375,"distances_sum":2233.804838329587}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.26171875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.26171875,"f1":null,"seconds":3.155320882797241e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":6.265625,"distances_sum":582.1176077115758}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.248046875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.248046875,"f1":null,"seconds":3.1385570764541626e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":6.2734375,"distances_sum":612.2098082295383}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.26171875,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.26171875,"f1":null,"seconds":3.155320882797241e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":6.265625,"distances_sum":582.1176077115758}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7830275627150634,"seconds":4.498288035392761e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":7.6640625,"distances_sum":1449.3998031635974}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.578125, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.578125,"f1":0.7169351481851487,"seconds":4.32133674621582e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":7.09375,"distances_sum":1268.395452547636}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7431640625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7431640625,"f1":0.8438082750582758,"seconds":5.064532160758972e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.2734375,"distances_sum":1706.6118299113036}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5361328125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5361328125,"f1":0.6800600441225446,"seconds":3.956258296966553e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":6.875,"distances_sum":1107.2260847883376}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3876953125, conf: {"ssize":4,"bsize":2}, perf: {"precision":1.0,"recall":0.3876953125,"f1":0.5394085081585079,"seconds":3.380700945854187e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":5.984375,"distances_sum":771.65390856468}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7431640625,"state":{"ssize":6,"bsize":5},"perf":{"precision":1.0,"recall":0.7431640625,"f1":0.8438082750582758,"seconds":5.064532160758972e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.2734375,"distances_sum":1706.6118299113036}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9476304945054951,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.84375,"distances_sum":2325.512068291733}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9561069139194145,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.9140625,"distances_sum":2330.7851327356625}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8533034673659682,"seconds":5.06080687046051e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.359375,"distances_sum":1730.7064337418167}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9561069139194145,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.9140625,"distances_sum":2330.7851327356625}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9208984375,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9561069139194145,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.9140625,"distances_sum":2330.7851327356625}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.64453125, conf: {"ssize":2,"bsize":4}, perf: {"precision":null,"recall":0.64453125,"f1":null,"seconds":4.7050416469573975e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.6484375,"distances_sum":1475.0342898874082}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.248046875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.248046875,"f1":null,"seconds":3.1366944313049316e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":5.546875,"distances_sum":605.1430437217386}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3818359375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3818359375,"f1":null,"seconds":3.676861524581909e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":6.078125,"distances_sum":902.9255605600945}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.64453125,"state":{"ssize":2,"bsize":4},"perf":{"precision":null,"recall":0.64453125,"f1":null,"seconds":4.7050416469573975e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.6484375,"distances_sum":1475.0342898874082}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9335112803862808,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.734375,"distances_sum":2359.6784934802968}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8947807400932408,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.53125,"distances_sum":2121.0100114191737}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7275390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7275390625,"f1":0.8310874888999898,"seconds":5.1800161600112915e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.3359375,"distances_sum":1755.7702512847475}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7909033674658682,"seconds":4.816800355911255e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.75,"distances_sum":1623.3326465567768}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.88671875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.88671875,"f1":0.9335112803862808,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.734375,"distances_sum":2359.6784934802968}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9369880119880127,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.7265625,"distances_sum":2401.9318108149487}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9523325632700638,"seconds":5.95487654209137e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.7734375,"distances_sum":2513.570152477382}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9679143772893776,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.859375,"distances_sum":2606.98730541751}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9379724442224447,"seconds":5.951151251792908e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.640625,"distances_sum":2446.2598266635437}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9679143772893776,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.859375,"distances_sum":2606.98730541751}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9679143772893776,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.859375,"distances_sum":2606.98730541751}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.220703125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.220703125,"f1":null,"seconds":3.0491501092910767e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":4.9921875,"distances_sum":546.3554296469433}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.220703125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.220703125,"f1":null,"seconds":3.0491501092910767e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":4.9921875,"distances_sum":546.3554296469433}}, n: 9
mean(cfft.distances) = 0.33956977540149863
mean(cdnet.distances) = 0.4121913694146843
mean(crand.distances) = 0.9828258779085519
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8422222222222221
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8444444444444444
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.88
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9266666666666666
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8866666666666667
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9444444444444443
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8355555555555556
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8711111111111111
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.888888888888889
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8622222222222223
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9066666666666666
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8866666666666667
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8866666666666667
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9244444444444445
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9244444444444445
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8688888888888889
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.88
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8822222222222221
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9066666666666667
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8955555555555555
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8933333333333334
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8688888888888888
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9222222222222222
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX===== rocchio like>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX==== clustering>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
nc.class_map = [1, 3, 3, 2, 3, 1, 2, 2, 3, 3, 3, 3, 2, 3, 3, 1, 2, 1, 3, 3, 2]
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 10, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 11, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 2, 3, 3, 3, 2, 3, 3, 2]
acc = 0.9266666666666666
*** finished computation of 12 references, err: [Inf, 0.576930806140105] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 22]]
** centroid: 4, normalized-entropy: 0.2580186686648155, [(2, 1), (3, 22)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 9, 12]]
** centroid: 5, normalized-entropy: 0.9852281360342514, [(2, 9), (3, 12)]
*** center 6: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 10, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
finished with 14 centroids; started with 12
acc = 0.9333333333333333
Test Summary:   | Pass  Total
NearestCentroid |   10     10
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.3828171223441178] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3828171223441178, 0.31829564418579387] ***
*** starting iteration: 2; err: [Inf, 0.3828171223441178, 0.31829564418579387] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3828171223441178, 0.31829564418579387, 0.3068253133143928] ***
*** starting iteration: 3; err: [Inf, 0.3828171223441178, 0.31829564418579387, 0.3068253133143928] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3828171223441178, 0.31829564418579387, 0.3068253133143928, 0.30393660906457565] ***
*** starting iteration: 4; err: [Inf, 0.3828171223441178, 0.31829564418579387, 0.3068253133143928, 0.30393660906457565] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3828171223441178, 0.31829564418579387, 0.3068253133143928, 0.30393660906457565, 0.30351288784463126] ***
*** finished computation of 3 references, err: [Inf, 0.3828171223441178, 0.31829564418579387, 0.3068253133143928, 0.30393660906457565, 0.30351288784463126] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [7, 161, 20]]
** centroid: 1, normalized-entropy: 0.4493530044451012, [(1, 7), (2, 161), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [135, 69, 0]]
** centroid: 2, normalized-entropy: 0.9231199835423002, [(1, 135), (2, 69)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [270, 4, 0]]
** centroid: 3, normalized-entropy: 0.10992912236299265, [(1, 270), (2, 4)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23700358215775397] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23700358215775397, 0.19431293852258105] ***
*** finished computation of 7 references, err: [Inf, 0.23700358215775397, 0.19431293852258105] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [9, 76, 0]]
** centroid: 1, normalized-entropy: 0.48736957102366285, [(1, 9), (2, 76)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 23, 0]]
** centroid: 2, normalized-entropy: 0.8377698690066789, [(1, 63), (2, 23)]
*** center 3: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 77, 0]]
** centroid: 4, normalized-entropy: 0.98566403148856, [(1, 58), (2, 77)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 58, 20]]
** centroid: 5, normalized-entropy: 0.8212809417449864, [(2, 58), (3, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2331617499018895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2331617499018895, 0.19446813921280753] ***
*** finished computation of 7 references, err: [Inf, 0.2331617499018895, 0.19446813921280753] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 93, 24]]
** centroid: 1, normalized-entropy: 0.7320666900931937, [(2, 93), (3, 24)]
*** center 2: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [83, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [40, 42, 0]]
** centroid: 4, normalized-entropy: 0.9995708393473225, [(1, 40), (2, 42)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [92, 11, 0]]
** centroid: 5, normalized-entropy: 0.4901757916273403, [(1, 92), (2, 11)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 88, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [90, 10, 0]]
** centroid: 7, normalized-entropy: 0.46899559358928133, [(1, 90), (2, 10)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22445129676592135] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22445129676592135, 0.19174873280706167] ***
*** finished computation of 7 references, err: [Inf, 0.22445129676592135, 0.19174873280706167] ***
*** center 1: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 54, 16]]
** centroid: 2, normalized-entropy: 0.775512658133148, [(2, 54), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [70, 4, 0]]
** centroid: 3, normalized-entropy: 0.30337483608641397, [(1, 70), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [78, 13, 0]]
** centroid: 4, normalized-entropy: 0.5916727785823274, [(1, 78), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 78, 0]]
** centroid: 5, normalized-entropy: 0.8524051786494784, [(1, 30), (2, 78)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [26, 92, 0]]
** centroid: 6, normalized-entropy: 0.7607859931846075, [(1, 26), (2, 92)]
*** center 7: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24071581283019292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24071581283019292, 0.1908039354555611] ***
*** starting iteration: 2; err: [Inf, 0.24071581283019292, 0.1908039354555611] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24071581283019292, 0.1908039354555611, 0.1879878669135362] ***
*** starting iteration: 3; err: [Inf, 0.24071581283019292, 0.1908039354555611, 0.1879878669135362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24071581283019292, 0.1908039354555611, 0.1879878669135362, 0.18742430020492892] ***
*** finished computation of 7 references, err: [Inf, 0.24071581283019292, 0.1908039354555611, 0.1879878669135362, 0.18742430020492892] ***
*** center 1: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 72, 20]]
** centroid: 2, normalized-entropy: 0.7553754125614286, [(2, 72), (3, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [93, 37, 0]]
** centroid: 4, normalized-entropy: 0.8616636287106234, [(1, 93), (2, 37)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [58, 47, 0]]
** centroid: 5, normalized-entropy: 0.9920686248447117, [(1, 58), (2, 47)]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 78, 0]]
** centroid: 7, normalized-entropy: 0.446481346896803, [(1, 8), (2, 78)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2254040474093043] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2254040474093043, 0.18817451627955756] ***
*** starting iteration: 2; err: [Inf, 0.2254040474093043, 0.18817451627955756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2254040474093043, 0.18817451627955756, 0.18677907931650506] ***
*** starting iteration: 3; err: [Inf, 0.2254040474093043, 0.18817451627955756, 0.18677907931650506] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2254040474093043, 0.18817451627955756, 0.18677907931650506, 0.186767636020242] ***
*** finished computation of 7 references, err: [Inf, 0.2254040474093043, 0.18817451627955756, 0.18677907931650506, 0.186767636020242] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [29, 84, 0]]
** centroid: 1, normalized-entropy: 0.8216292954053165, [(1, 29), (2, 84)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 19, 0]]
** centroid: 2, normalized-entropy: 0.7572182549240017, [(1, 68), (2, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [16, 80, 0]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(1, 16), (2, 80)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 62, 24]]
** centroid: 5, normalized-entropy: 0.8541802051521676, [(2, 62), (3, 24)]
*** center 6: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22692750653774216] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22692750653774216, 0.1930414531477678] ***
*** starting iteration: 2; err: [Inf, 0.22692750653774216, 0.1930414531477678] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22692750653774216, 0.1930414531477678, 0.18873941094574073] ***
*** starting iteration: 3; err: [Inf, 0.22692750653774216, 0.1930414531477678, 0.18873941094574073] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22692750653774216, 0.1930414531477678, 0.18873941094574073, 0.18723954230329132] ***
*** finished computation of 7 references, err: [Inf, 0.22692750653774216, 0.1930414531477678, 0.18873941094574073, 0.18723954230329132] ***
*** center 1: selecting labels [1] (freq >= 2) [from [93, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [101, 11, 0]]
** centroid: 2, normalized-entropy: 0.46330931881705484, [(1, 101), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 51, 16]]
** centroid: 3, normalized-entropy: 0.7930490047779772, [(2, 51), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [125, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 80, 0]]
** centroid: 5, normalized-entropy: 0.5836753280239112, [(1, 13), (2, 80)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 94, 0]]
** centroid: 6, normalized-entropy: 0.3966277727783787, [(1, 8), (2, 94)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [70, 4, 0]]
** centroid: 7, normalized-entropy: 0.30337483608641397, [(1, 70), (2, 4)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39915811894293707] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39915811894293707, 0.2952987611609827] ***
*** starting iteration: 2; err: [Inf, 0.39915811894293707, 0.2952987611609827] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39915811894293707, 0.2952987611609827, 0.28964204448009573] ***
*** starting iteration: 3; err: [Inf, 0.39915811894293707, 0.2952987611609827, 0.28964204448009573] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39915811894293707, 0.2952987611609827, 0.28964204448009573, 0.2880375846869427] ***
*** starting iteration: 4; err: [Inf, 0.39915811894293707, 0.2952987611609827, 0.28964204448009573, 0.2880375846869427] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39915811894293707, 0.2952987611609827, 0.28964204448009573, 0.2880375846869427, 0.28776997605942795] ***
*** finished computation of 3 references, err: [Inf, 0.39915811894293707, 0.2952987611609827, 0.28964204448009573, 0.2880375846869427, 0.28776997605942795] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [89, 148, 20]]
** centroid: 1, normalized-entropy: 0.8044172045752523, [(1, 89), (2, 148), (3, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [197, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [126, 86, 0]]
** centroid: 3, normalized-entropy: 0.9741655523680581, [(1, 126), (2, 86)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.46596103555046725] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46596103555046725, 0.2981499829992786] ***
*** starting iteration: 2; err: [Inf, 0.46596103555046725, 0.2981499829992786] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46596103555046725, 0.2981499829992786, 0.2966616505413488] ***
*** starting iteration: 3; err: [Inf, 0.46596103555046725, 0.2981499829992786, 0.2966616505413488] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46596103555046725, 0.2981499829992786, 0.2966616505413488, 0.29643699124098005] ***
*** finished computation of 3 references, err: [Inf, 0.46596103555046725, 0.2981499829992786, 0.2966616505413488, 0.29643699124098005] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [90, 149, 24]]
** centroid: 1, normalized-entropy: 0.8259031348096049, [(1, 90), (2, 149), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [109, 96, 0]]
** centroid: 2, normalized-entropy: 0.9970972142863438, [(1, 109), (2, 96)]
*** center 3: selecting labels [1] (freq >= 2) [from [199, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4522009115118807] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4522009115118807, 0.28481212515814014] ***
*** starting iteration: 2; err: [Inf, 0.4522009115118807, 0.28481212515814014] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4522009115118807, 0.28481212515814014, 0.2830806450396106] ***
*** starting iteration: 3; err: [Inf, 0.4522009115118807, 0.28481212515814014, 0.2830806450396106] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4522009115118807, 0.28481212515814014, 0.2830806450396106, 0.28296843348727235] ***
*** finished computation of 3 references, err: [Inf, 0.4522009115118807, 0.28481212515814014, 0.2830806450396106, 0.28296843348727235] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [100, 129, 16]]
** centroid: 1, normalized-entropy: 0.8025487244013804, [(1, 100), (2, 129), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [108, 112, 0]]
** centroid: 2, normalized-entropy: 0.9997615248696311, [(1, 108), (2, 112)]
*** center 3: selecting labels [1] (freq >= 2) [from [202, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3909892868948751] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3909892868948751, 0.30397094158397087] ***
*** starting iteration: 2; err: [Inf, 0.3909892868948751, 0.30397094158397087] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3909892868948751, 0.30397094158397087, 0.2994160230342729] ***
*** starting iteration: 3; err: [Inf, 0.3909892868948751, 0.30397094158397087, 0.2994160230342729] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3909892868948751, 0.30397094158397087, 0.2994160230342729, 0.29813880065939147] ***
*** starting iteration: 4; err: [Inf, 0.3909892868948751, 0.30397094158397087, 0.2994160230342729, 0.29813880065939147] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3909892868948751, 0.30397094158397087, 0.2994160230342729, 0.29813880065939147, 0.2975619075655088] ***
*** finished computation of 3 references, err: [Inf, 0.3909892868948751, 0.30397094158397087, 0.2994160230342729, 0.29813880065939147, 0.2975619075655088] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [80, 155, 24]]
** centroid: 1, normalized-entropy: 0.8106124965165233, [(1, 80), (2, 155), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [204, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [114, 90, 0]]
** centroid: 3, normalized-entropy: 0.9899927915575186, [(1, 114), (2, 90)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3742118721312635] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3742118721312635, 0.297499295553078] ***
*** starting iteration: 2; err: [Inf, 0.3742118721312635, 0.297499295553078] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3742118721312635, 0.297499295553078, 0.28729721419569076] ***
*** starting iteration: 3; err: [Inf, 0.3742118721312635, 0.297499295553078, 0.28729721419569076] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3742118721312635, 0.297499295553078, 0.28729721419569076, 0.2853853863788241] ***
*** starting iteration: 4; err: [Inf, 0.3742118721312635, 0.297499295553078, 0.28729721419569076, 0.2853853863788241] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3742118721312635, 0.297499295553078, 0.28729721419569076, 0.2853853863788241, 0.2840667256633046] ***
*** starting iteration: 5; err: [Inf, 0.3742118721312635, 0.297499295553078, 0.28729721419569076, 0.2853853863788241, 0.2840667256633046] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3742118721312635, 0.297499295553078, 0.28729721419569076, 0.2853853863788241, 0.2840667256633046, 0.2830028063184798] ***
*** starting iteration: 6; err: [Inf, 0.3742118721312635, 0.297499295553078, 0.28729721419569076, 0.2853853863788241, 0.2840667256633046, 0.2830028063184798] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3742118721312635, 0.297499295553078, 0.28729721419569076, 0.2853853863788241, 0.2840667256633046, 0.2830028063184798, 0.28233637877724604] ***
*** finished computation of 3 references, err: [Inf, 0.3742118721312635, 0.297499295553078, 0.28729721419569076, 0.2853853863788241, 0.2840667256633046, 0.2830028063184798, 0.28233637877724604] ***
*** center 1: selecting labels [1] (freq >= 1) [from [194, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [113, 110, 0]]
** centroid: 2, normalized-entropy: 0.9998694459264538, [(1, 113), (2, 110)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [103, 131, 16]]
** centroid: 3, normalized-entropy: 0.8009226805551467, [(1, 103), (2, 131), (3, 16)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2836666061296813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2836666061296813, 0.22248818279263582] ***
*** starting iteration: 2; err: [Inf, 0.2836666061296813, 0.22248818279263582] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2836666061296813, 0.22248818279263582, 0.20752239779096554] ***
*** starting iteration: 3; err: [Inf, 0.2836666061296813, 0.22248818279263582, 0.20752239779096554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2836666061296813, 0.22248818279263582, 0.20752239779096554, 0.19713361997313955] ***
*** finished computation of 7 references, err: [Inf, 0.2836666061296813, 0.22248818279263582, 0.20752239779096554, 0.19713361997313955] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [88, 29, 0]]
** centroid: 1, normalized-entropy: 0.8078738537818512, [(1, 88), (2, 29)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [86, 32, 0]]
** centroid: 2, normalized-entropy: 0.8431619569518377, [(1, 86), (2, 32)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 40, 20]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 40), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [1, 78, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [21, 55, 0]]
** centroid: 6, normalized-entropy: 0.8503821170987139, [(1, 21), (2, 55)]
*** center 7: selecting labels [1] (freq >= 2) [from [112, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2799091124942043] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2799091124942043, 0.2112457449136042] ***
*** starting iteration: 2; err: [Inf, 0.2799091124942043, 0.2112457449136042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2799091124942043, 0.2112457449136042, 0.1993771364948694] ***
*** starting iteration: 3; err: [Inf, 0.2799091124942043, 0.2112457449136042, 0.1993771364948694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2799091124942043, 0.2112457449136042, 0.1993771364948694, 0.19363508717962605] ***
*** finished computation of 7 references, err: [Inf, 0.2799091124942043, 0.2112457449136042, 0.1993771364948694, 0.19363508717962605] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [33, 34, 0]]
** centroid: 1, normalized-entropy: 0.9998393017810486, [(1, 33), (2, 34)]
*** center 2: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 81, 24]]
** centroid: 3, normalized-entropy: 0.775512658133148, [(2, 81), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [97, 47, 0]]
** centroid: 4, normalized-entropy: 0.9111942950464768, [(1, 97), (2, 47)]
*** center 5: selecting labels [1] (freq >= 2) [from [132, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 51, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [56, 32, 0]]
** centroid: 7, normalized-entropy: 0.9456603046006401, [(1, 56), (2, 32)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23198013446074556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23198013446074556, 0.19345012959372113] ***
*** starting iteration: 2; err: [Inf, 0.23198013446074556, 0.19345012959372113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23198013446074556, 0.19345012959372113, 0.18834368940414875] ***
*** starting iteration: 3; err: [Inf, 0.23198013446074556, 0.19345012959372113, 0.18834368940414875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23198013446074556, 0.19345012959372113, 0.18834368940414875, 0.1865116364875532] ***
*** finished computation of 7 references, err: [Inf, 0.23198013446074556, 0.19345012959372113, 0.18834368940414875, 0.1865116364875532] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [64, 26, 0]]
** centroid: 1, normalized-entropy: 0.8672816222000259, [(1, 64), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [95, 37, 0]]
** centroid: 2, normalized-entropy: 0.8558633820879142, [(1, 95), (2, 37)]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 1, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 88, 16]]
** centroid: 6, normalized-entropy: 0.6193821946787638, [(2, 88), (3, 16)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [9, 89, 0]]
** centroid: 7, normalized-entropy: 0.442571064839798, [(1, 9), (2, 89)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23958606142466804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23958606142466804, 0.17093266823256315] ***
*** starting iteration: 2; err: [Inf, 0.23958606142466804, 0.17093266823256315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23958606142466804, 0.17093266823256315, 0.15817948564811535] ***
*** starting iteration: 3; err: [Inf, 0.23958606142466804, 0.17093266823256315, 0.15817948564811535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23958606142466804, 0.17093266823256315, 0.15817948564811535, 0.15262234180832882] ***
*** finished computation of 7 references, err: [Inf, 0.23958606142466804, 0.17093266823256315, 0.15817948564811535, 0.15262234180832882] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [12, 43, 0]]
** centroid: 1, normalized-entropy: 0.7568336324184036, [(1, 12), (2, 43)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 99, 20]]
** centroid: 2, normalized-entropy: 0.6532642567060226, [(2, 99), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [108, 60, 0]]
** centroid: 3, normalized-entropy: 0.940285958670631, [(1, 108), (2, 60)]
*** center 4: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [98, 2, 0]]
** centroid: 5, normalized-entropy: 0.14144054254182067, [(1, 98), (2, 2)]
*** center 6: selecting labels [1] (freq >= 1) [from [118, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [10, 30, 0]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(1, 10), (2, 30)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1886820194780592] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1886820194780592, 0.15655505257718702] ***
*** starting iteration: 2; err: [Inf, 0.1886820194780592, 0.15655505257718702] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1886820194780592, 0.15655505257718702, 0.14814892035072622] ***
*** starting iteration: 3; err: [Inf, 0.1886820194780592, 0.15655505257718702, 0.14814892035072622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1886820194780592, 0.15655505257718702, 0.14814892035072622, 0.14657317908938744] ***
*** finished computation of 7 references, err: [Inf, 0.1886820194780592, 0.15655505257718702, 0.14814892035072622, 0.14657317908938744] ***
*** center 1: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 66, 0]]
** centroid: 4, normalized-entropy: 0.995148095654003, [(1, 56), (2, 66)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [48, 50, 0]]
** centroid: 5, normalized-entropy: 0.9996995428565171, [(1, 48), (2, 50)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [44, 31, 0]]
** centroid: 6, normalized-entropy: 0.9782176659354249, [(1, 44), (2, 31)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 98, 24]]
** centroid: 7, normalized-entropy: 0.7153220528038851, [(2, 98), (3, 24)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21564167901954573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21564167901954573, 0.1738055865294293] ***
*** starting iteration: 2; err: [Inf, 0.21564167901954573, 0.1738055865294293] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21564167901954573, 0.1738055865294293, 0.16465105934171886] ***
*** starting iteration: 3; err: [Inf, 0.21564167901954573, 0.1738055865294293, 0.16465105934171886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21564167901954573, 0.1738055865294293, 0.16465105934171886, 0.1590765087859708] ***
*** finished computation of 7 references, err: [Inf, 0.21564167901954573, 0.1738055865294293, 0.16465105934171886, 0.1590765087859708] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [88, 28, 0]]
** centroid: 1, normalized-entropy: 0.7973265101474423, [(1, 88), (2, 28)]
*** center 2: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 69, 16]]
** centroid: 4, normalized-entropy: 0.6977652006354232, [(2, 69), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [6, 96, 0]]
** centroid: 5, normalized-entropy: 0.32275695889739825, [(1, 6), (2, 96)]
*** center 6: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [103, 48, 0]]
** centroid: 7, normalized-entropy: 0.9020619953880791, [(1, 103), (2, 48)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4610163677629229] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4610163677629229, 0.32386123209313544] ***
*** finished computation of 3 references, err: [Inf, 0.4610163677629229, 0.32386123209313544] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [234, 18, 0]]
** centroid: 1, normalized-entropy: 0.3712323266408756, [(1, 234), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [156, 95, 0]]
** centroid: 2, normalized-entropy: 0.9569657494330398, [(1, 156), (2, 95)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [22, 121, 20]]
** centroid: 3, normalized-entropy: 0.6816912646528821, [(1, 22), (2, 121), (3, 20)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4957165284196789] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4957165284196789, 0.3217307944520973] ***
*** finished computation of 3 references, err: [Inf, 0.4957165284196789, 0.3217307944520973] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [126, 197, 24]]
** centroid: 1, normalized-entropy: 0.7955536795364099, [(1, 126), (2, 197), (3, 24)]
*** center 2: selecting labels [1] (freq >= 2) [from [135, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [137, 48, 0]]
** centroid: 3, normalized-entropy: 0.8259295934881627, [(1, 137), (2, 48)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.390215323711543] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.390215323711543, 0.3201270568752843] ***
*** finished computation of 3 references, err: [Inf, 0.390215323711543, 0.3201270568752843] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [184, 6, 0]]
** centroid: 1, normalized-entropy: 0.2022494245476988, [(1, 184), (2, 6)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [6, 213, 16]]
** centroid: 2, normalized-entropy: 0.33285855853407986, [(1, 6), (2, 213), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [220, 22, 0]]
** centroid: 3, normalized-entropy: 0.43949698692151346, [(1, 220), (2, 22)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24152558165750615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24152558165750615, 0.1687107268964184] ***
*** finished computation of 7 references, err: [Inf, 0.24152558165750615, 0.1687107268964184] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [118, 59, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 118), (2, 59)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 62, 20]]
** centroid: 2, normalized-entropy: 0.8014698931335286, [(2, 62), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [27, 29, 0]]
** centroid: 3, normalized-entropy: 0.9990797181805819, [(1, 27), (2, 29)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [37, 41, 0]]
** centroid: 4, normalized-entropy: 0.9981021327390103, [(1, 37), (2, 41)]
*** center 5: selecting labels [1] (freq >= 1) [from [176, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 43, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22508265797783253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22508265797783253, 0.1744578022752767] ***
*** finished computation of 7 references, err: [Inf, 0.22508265797783253, 0.1744578022752767] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [34, 18, 0]]
** centroid: 1, normalized-entropy: 0.9305861291319927, [(1, 34), (2, 18)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 96, 23]]
** centroid: 2, normalized-entropy: 0.7082772165975041, [(2, 96), (3, 23)]
*** center 3: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [75, 18, 0]]
** centroid: 5, normalized-entropy: 0.708835673332196, [(1, 75), (2, 18)]
*** center 6: selecting labels [1, 2, 3] (freq >= 1) [from [49, 99, 1]]
** centroid: 6, normalized-entropy: 0.6107273904812558, [(1, 49), (2, 99), (3, 1)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [110, 14, 0]]
** centroid: 7, normalized-entropy: 0.5086113313826895, [(1, 110), (2, 14)]
finished with 13 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2658743156536274] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2658743156536274, 0.17436297513307888] ***
*** finished computation of 7 references, err: [Inf, 0.2658743156536274, 0.17436297513307888] ***
*** center 1: selecting labels [1] (freq >= 1) [from [43, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [116, 88, 0]]
** centroid: 2, normalized-entropy: 0.9863676072907089, [(1, 116), (2, 88)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 57, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [30, 30, 0]]
** centroid: 4, normalized-entropy: 1.0, [(1, 30), (2, 30)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 66, 16]]
** centroid: 5, normalized-entropy: 0.7120640548905481, [(2, 66), (3, 16)]
*** center 6: selecting labels [1] (freq >= 1) [from [176, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26440723363293317] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26440723363293317, 0.20452763658651785] ***
*** finished computation of 7 references, err: [Inf, 0.26440723363293317, 0.20452763658651785] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [115, 4, 0]]
** centroid: 1, normalized-entropy: 0.21220132752136248, [(1, 115), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [95, 52, 0]]
** centroid: 2, normalized-entropy: 0.9373652146678144, [(1, 95), (2, 52)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 119, 20]]
** centroid: 3, normalized-entropy: 0.5943232617062951, [(2, 119), (3, 20)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [18, 39, 0]]
** centroid: 4, normalized-entropy: 0.8997437586982626, [(1, 18), (2, 39)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [73, 10, 0]]
** centroid: 5, normalized-entropy: 0.530744566923854, [(1, 73), (2, 10)]
*** center 6: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [20, 10, 0]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(1, 20), (2, 10)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28505268633977204] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28505268633977204, 0.21202591306360988] ***
*** finished computation of 7 references, err: [Inf, 0.28505268633977204, 0.21202591306360988] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [89, 27, 0]]
** centroid: 1, normalized-entropy: 0.7827892889687528, [(1, 89), (2, 27)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 36, 20]]
** centroid: 2, normalized-entropy: 0.940285958670631, [(2, 36), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [103, 37, 0]]
** centroid: 3, normalized-entropy: 0.8331449538868049, [(1, 103), (2, 37)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [28, 39, 0]]
** centroid: 4, normalized-entropy: 0.9804679314541813, [(1, 28), (2, 39)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 25, 4]]
** centroid: 5, normalized-entropy: 0.5787946246321198, [(2, 25), (3, 4)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 81, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [177, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2910731746068132] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2910731746068132, 0.22974613799683533] ***
*** finished computation of 7 references, err: [Inf, 0.2910731746068132, 0.22974613799683533] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [125, 15, 0]]
** centroid: 2, normalized-entropy: 0.4912373418243334, [(1, 125), (2, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [115, 89, 0]]
** centroid: 3, normalized-entropy: 0.9882506791547674, [(1, 115), (2, 89)]
*** center 4: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 137, 16]]
** centroid: 5, normalized-entropy: 0.4833329710221149, [(2, 137), (3, 16)]
*** center 6: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 11)
[0.9300018581455708, 0.9179838521155886, 0.9179808551066037, 0.9109918301535068, 0.9089898281515048, 0.9059868251485018, 0.8849987712263161, 0.8820197442951935, 0.8810217403031774, 0.8700197203191214, 0.7650165135195075]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :rand, 0.3, 1) => 0.9300018581455708
finished with 12
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.26861768611357195] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26861768611357195, 0.203568153275602] ***
*** finished computation of 7 references, err: [Inf, 0.26861768611357195, 0.203568153275602] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [104, 43, 0]]
** centroid: 1, normalized-entropy: 0.8719504731434136, [(1, 104), (2, 43)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 65, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [3, 94, 0]]
** centroid: 3, normalized-entropy: 0.19902377455969078, [(1, 3), (2, 94)]
*** center 4: selecting labels [1] (freq >= 1) [from [142, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [98, 8, 0]]
** centroid: 5, normalized-entropy: 0.3860189005698936, [(1, 98), (2, 8)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 24, 20]]
** centroid: 6, normalized-entropy: 0.9940302114769566, [(2, 24), (3, 20)]
*** center 7: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2379069676234581] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2379069676234581, 0.1969524424640403] ***
*** finished computation of 7 references, err: [Inf, 0.2379069676234581, 0.1969524424640403] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [35, 65, 0]]
** centroid: 1, normalized-entropy: 0.9340680553754911, [(1, 35), (2, 65)]
*** center 2: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [89, 29, 0]]
** centroid: 3, normalized-entropy: 0.804492844152443, [(1, 89), (2, 29)]
*** center 4: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 80, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 66, 24]]
** centroid: 6, normalized-entropy: 0.8366407419411671, [(2, 66), (3, 24)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [105, 5, 0]]
** centroid: 7, normalized-entropy: 0.2667649878030262, [(1, 105), (2, 5)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.38682459571330374] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38682459571330374, 0.2283158653745263] ***
*** finished computation of 7 references, err: [Inf, 0.38682459571330374, 0.2283158653745263] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 24, 12]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(2, 24), (3, 12)]
*** center 2: selecting labels [1] (freq >= 1) [from [132, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 43, 4]]
** centroid: 3, normalized-entropy: 0.4199210973757179, [(2, 43), (3, 4)]
*** center 4: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [82, 79, 0]]
** centroid: 5, normalized-entropy: 0.9997495272781326, [(1, 82), (2, 79)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [89, 95, 0]]
** centroid: 6, normalized-entropy: 0.9992328356904397, [(1, 89), (2, 95)]
*** center 7: selecting labels [1] (freq >= 1) [from [43, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 12)
[0.9400178621735509, 0.9300018581455708, 0.9179838521155886, 0.9179808551066037, 0.9109918301535068, 0.9089898281515048, 0.9059868251485018, 0.8849987712263161, 0.8820197442951935, 0.8810217403031774, 0.8700197203191214, 0.7650165135195075]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, 1, 7, 1, 1.0, :dnet, 0.3, 1) => 0.9400178621735509
finished with 12
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9400178621735509, 0.9300018581455708, 0.9179838521155886, 0.9179808551066037, 0.9109918301535068, 0.9089898281515048, 0.9059868251485018, 0.8849987712263161, 0.8820197442951935, 0.8810217403031774, 0.8700197203191214, 0.7650165135195075]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, 1, 7, 1, 1.0, :dnet, 0.3, 1) => 0.9400178621735509
finished with 13
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.2730361205517306] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2730361205517306, 0.245147228036803] ***
*** starting iteration: 2; err: [Inf, 0.2730361205517306, 0.245147228036803] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2730361205517306, 0.245147228036803, 0.23512402436956092] ***
*** starting iteration: 3; err: [Inf, 0.2730361205517306, 0.245147228036803, 0.23512402436956092] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2730361205517306, 0.245147228036803, 0.23512402436956092, 0.23339891951676603] ***
*** starting iteration: 4; err: [Inf, 0.2730361205517306, 0.245147228036803, 0.23512402436956092, 0.23339891951676603] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2730361205517306, 0.245147228036803, 0.23512402436956092, 0.23339891951676603, 0.2317634076872902] ***
*** starting iteration: 5; err: [Inf, 0.2730361205517306, 0.245147228036803, 0.23512402436956092, 0.23339891951676603, 0.2317634076872902] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2730361205517306, 0.245147228036803, 0.23512402436956092, 0.23339891951676603, 0.2317634076872902, 0.230303906397922] ***
*** starting iteration: 6; err: [Inf, 0.2730361205517306, 0.245147228036803, 0.23512402436956092, 0.23339891951676603, 0.2317634076872902, 0.230303906397922] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2730361205517306, 0.245147228036803, 0.23512402436956092, 0.23339891951676603, 0.2317634076872902, 0.230303906397922, 0.22943531025855526] ***
*** finished computation of 3 references, err: [Inf, 0.2730361205517306, 0.245147228036803, 0.23512402436956092, 0.23339891951676603, 0.2317634076872902, 0.230303906397922, 0.22943531025855526] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [116, 109, 7]]
** centroid: 1, normalized-entropy: 0.7346584656408323, [(1, 116), (2, 109), (3, 7)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [103, 125, 13]]
** centroid: 2, normalized-entropy: 0.7839970392814877, [(1, 103), (2, 125), (3, 13)]
*** center 3: selecting labels [1] (freq >= 1) [from [193, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3067619957188996] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3067619957188996, 0.2346321546124934] ***
*** starting iteration: 2; err: [Inf, 0.3067619957188996, 0.2346321546124934] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3067619957188996, 0.2346321546124934, 0.23437640669642537] ***
*** finished computation of 3 references, err: [Inf, 0.3067619957188996, 0.2346321546124934, 0.23437640669642537] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [251, 5, 0]]
** centroid: 1, normalized-entropy: 0.13880049798406022, [(1, 251), (2, 5)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [4, 169, 24]]
** centroid: 2, normalized-entropy: 0.42517774383605095, [(1, 4), (2, 169), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [143, 71, 0]]
** centroid: 3, normalized-entropy: 0.9167303198397352, [(1, 143), (2, 71)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3227420783946584] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3227420783946584, 0.23242181200447534] ***
*** starting iteration: 2; err: [Inf, 0.3227420783946584, 0.23242181200447534] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3227420783946584, 0.23242181200447534, 0.2256056613734235] ***
*** starting iteration: 3; err: [Inf, 0.3227420783946584, 0.23242181200447534, 0.2256056613734235] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3227420783946584, 0.23242181200447534, 0.2256056613734235, 0.22389730645240336] ***
*** starting iteration: 4; err: [Inf, 0.3227420783946584, 0.23242181200447534, 0.2256056613734235, 0.22389730645240336] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3227420783946584, 0.23242181200447534, 0.2256056613734235, 0.22389730645240336, 0.223613779194586] ***
*** finished computation of 3 references, err: [Inf, 0.3227420783946584, 0.23242181200447534, 0.2256056613734235, 0.22389730645240336, 0.223613779194586] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [105, 116, 6]]
** centroid: 1, normalized-entropy: 0.7243050135461215, [(1, 105), (2, 116), (3, 6)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [106, 125, 10]]
** centroid: 2, normalized-entropy: 0.7589599180188751, [(1, 106), (2, 125), (3, 10)]
*** center 3: selecting labels [1] (freq >= 1) [from [199, 0, 0]]
finished with 7 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 13)
[0.9400178621735509, 0.9300018581455708, 0.9179838521155886, 0.9179808551066037, 0.9109918301535068, 0.9100118082154011, 0.9089898281515048, 0.9059868251485018, 0.8849987712263161, 0.8820197442951935, 0.8810217403031774, 0.8700197203191214, 0.7650165135195075]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, 1, 7, 1, 1.0, :dnet, 0.3, 1) => 0.9400178621735509
finished with 14
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.18374232048282046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18374232048282046, 0.15482799606411732] ***
*** starting iteration: 2; err: [Inf, 0.18374232048282046, 0.15482799606411732] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18374232048282046, 0.15482799606411732, 0.14995888650330627] ***
*** starting iteration: 3; err: [Inf, 0.18374232048282046, 0.15482799606411732, 0.14995888650330627] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18374232048282046, 0.15482799606411732, 0.14995888650330627, 0.14914180605298932] ***
*** finished computation of 7 references, err: [Inf, 0.18374232048282046, 0.15482799606411732, 0.14995888650330627, 0.14914180605298932] ***
*** center 1: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 58, 20]]
** centroid: 2, normalized-entropy: 0.8212809417449864, [(2, 58), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [91, 13, 0]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(1, 91), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [77, 4, 0]]
** centroid: 4, normalized-entropy: 0.2837689703721877, [(1, 77), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 68, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 34), (2, 68)]
*** center 6: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [12, 91, 0]]
** centroid: 7, normalized-entropy: 0.519230019739187, [(1, 12), (2, 91)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1933878725757641] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1933878725757641, 0.15017724863213042] ***
*** starting iteration: 2; err: [Inf, 0.1933878725757641, 0.15017724863213042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1933878725757641, 0.15017724863213042, 0.14711067264947086] ***
*** starting iteration: 3; err: [Inf, 0.1933878725757641, 0.15017724863213042, 0.14711067264947086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1933878725757641, 0.15017724863213042, 0.14711067264947086, 0.1462758313738804] ***
*** finished computation of 7 references, err: [Inf, 0.1933878725757641, 0.15017724863213042, 0.14711067264947086, 0.1462758313738804] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [50, 68, 0]]
** centroid: 1, normalized-entropy: 0.9831491282282879, [(1, 50), (2, 68)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 30, 0]]
** centroid: 2, normalized-entropy: 0.9219957030944405, [(1, 59), (2, 30)]
*** center 3: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 97, 24]]
** centroid: 4, normalized-entropy: 0.718609966948486, [(2, 97), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 50, 0]]
** centroid: 5, normalized-entropy: 0.999926399368686, [(1, 49), (2, 50)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19862530023876068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19862530023876068, 0.14682367426794263] ***
*** starting iteration: 2; err: [Inf, 0.19862530023876068, 0.14682367426794263] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19862530023876068, 0.14682367426794263, 0.14277427535465007] ***
*** starting iteration: 3; err: [Inf, 0.19862530023876068, 0.14682367426794263, 0.14277427535465007] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19862530023876068, 0.14682367426794263, 0.14277427535465007, 0.1422194010323972] ***
*** finished computation of 7 references, err: [Inf, 0.19862530023876068, 0.14682367426794263, 0.14277427535465007, 0.1422194010323972] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 92, 16]]
** centroid: 1, normalized-entropy: 0.6051865766334207, [(2, 92), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [63, 4, 0]]
** centroid: 3, normalized-entropy: 0.32625881462949274, [(1, 63), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [79, 32, 0]]
** centroid: 4, normalized-entropy: 0.8664998383682039, [(1, 79), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [82, 13, 0]]
** centroid: 5, normalized-entropy: 0.5759084429149787, [(1, 82), (2, 13)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 100, 0]]
** centroid: 6, normalized-entropy: 0.3138129641688652, [(1, 6), (2, 100)]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9400178621735509, 0.9300018581455708, 0.9179838521155886, 0.9179808551066037, 0.9110038181894469, 0.9109918301535068, 0.9100118082154011, 0.9089898281515048, 0.9059868251485018, 0.8849987712263161, 0.8820197442951935, 0.8810217403031774, 0.8700197203191214, 0.7650165135195075]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, 1, 7, 1, 1.0, :dnet, 0.3, 1) => 0.9400178621735509
finished with 15
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.3021191701323756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3021191701323756, 0.1844042475298942] ***
*** finished computation of 7 references, err: [Inf, 0.3021191701323756, 0.1844042475298942] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [7, 68, 0]]
** centroid: 1, normalized-entropy: 0.44749925503686355, [(1, 7), (2, 68)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [83, 5, 0]]
** centroid: 2, normalized-entropy: 0.314682604134666, [(1, 83), (2, 5)]
*** center 3: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [34, 57, 0]]
** centroid: 4, normalized-entropy: 0.9534158774525225, [(1, 34), (2, 57)]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [8, 104, 20]]
** centroid: 5, normalized-entropy: 0.5858839080416213, [(1, 8), (2, 104), (3, 20)]
*** center 6: selecting labels [1] (freq >= 1) [from [152, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1949340222515808] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1949340222515808, 0.1543782333071264] ***
*** finished computation of 7 references, err: [Inf, 0.1949340222515808, 0.1543782333071264] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [6, 99, 0]]
** centroid: 1, normalized-entropy: 0.3159971329784246, [(1, 6), (2, 99)]
*** center 2: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [104, 18, 0]]
** centroid: 3, normalized-entropy: 0.603652249754401, [(1, 104), (2, 18)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 49, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [44, 36, 0]]
** centroid: 5, normalized-entropy: 0.9927744539878083, [(1, 44), (2, 36)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 43, 24]]
** centroid: 6, normalized-entropy: 0.9411864371816836, [(2, 43), (3, 24)]
*** center 7: selecting labels [1] (freq >= 1) [from [172, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1903869450171555] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1903869450171555, 0.15688586575879732] ***
*** finished computation of 7 references, err: [Inf, 0.1903869450171555, 0.15688586575879732] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [35, 29, 0]]
** centroid: 1, normalized-entropy: 0.9936507116910402, [(1, 35), (2, 29)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [82, 30, 0]]
** centroid: 2, normalized-entropy: 0.8383729377099398, [(1, 82), (2, 30)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [106, 65, 0]]
** centroid: 3, normalized-entropy: 0.9581245848826893, [(1, 106), (2, 65)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 65, 6]]
** centroid: 4, normalized-entropy: 0.4178642624458583, [(2, 65), (3, 6)]
*** center 5: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 52, 10]]
** centroid: 6, normalized-entropy: 0.6373874992221911, [(2, 52), (3, 10)]
*** center 7: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
finished with 12 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9400178621735509, 0.9300018581455708, 0.9179838521155886, 0.9179808551066037, 0.9110038181894469, 0.9109918301535068, 0.9100118082154011, 0.9089898281515048, 0.9070807334280389, 0.9059868251485018, 0.8849987712263161, 0.8820197442951935, 0.8810217403031774, 0.8700197203191214, 0.7650165135195075]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, 1, 7, 1, 1.0, :dnet, 0.3, 1) => 0.9400178621735509
finished with 15
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9400178621735509, 0.9300018581455708, 0.9179838521155886, 0.9179808551066037, 0.9110038181894469, 0.9109918301535068, 0.9100118082154011, 0.9089898281515048, 0.9070807334280389, 0.9059868251485018, 0.8849987712263161, 0.8820197442951935, 0.8810217403031774, 0.8700197203191214, 0.7650165135195075]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, 1, 7, 1, 1.0, :dnet, 0.3, 1) => 0.9400178621735509
finished with 16
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.25569275300775013] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25569275300775013, 0.23197305163818863] ***
*** finished computation of 3 references, err: [Inf, 0.25569275300775013, 0.23197305163818863] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [108, 117, 16]]
** centroid: 1, normalized-entropy: 0.8106421289942277, [(1, 108), (2, 117), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [190, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [114, 117, 4]]
** centroid: 3, normalized-entropy: 0.6985851528290622, [(1, 114), (2, 117), (3, 4)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30897850265539345] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30897850265539345, 0.24003823758193713] ***
*** finished computation of 3 references, err: [Inf, 0.30897850265539345, 0.24003823758193713] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [107, 139, 17]]
** centroid: 1, normalized-entropy: 0.800966639744514, [(1, 107), (2, 139), (3, 17)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [84, 106, 7]]
** centroid: 2, normalized-entropy: 0.7423144518693402, [(1, 84), (2, 106), (3, 7)]
*** center 3: selecting labels [1] (freq >= 2) [from [207, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2389589964706769] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2389589964706769, 0.22481005733924872] ***
*** finished computation of 3 references, err: [Inf, 0.2389589964706769, 0.22481005733924872] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [90, 125, 12]]
** centroid: 1, normalized-entropy: 0.7743957928024788, [(1, 90), (2, 125), (3, 12)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [107, 115, 4]]
** centroid: 2, normalized-entropy: 0.7001425300693414, [(1, 107), (2, 115), (3, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [213, 1, 0]]
finished with 7 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 16)
[0.9400178621735509, 0.9300018581455708, 0.9179838521155886, 0.9179808551066037, 0.9110038181894469, 0.9109918301535068, 0.9100118082154011, 0.9089898281515048, 0.9070807334280389, 0.9059868251485018, 0.8990187792583001, 0.8849987712263161, 0.8820197442951935, 0.8810217403031774, 0.8700197203191214, 0.7650165135195075]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, 1, 7, 1, 1.0, :dnet, 0.3, 1) => 0.9400178621735509
finished with 17
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.2962432524564119] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2962432524564119, 0.2337100607295473] ***
*** starting iteration: 2; err: [Inf, 0.2962432524564119, 0.2337100607295473] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2962432524564119, 0.2337100607295473, 0.228680739762379] ***
*** starting iteration: 3; err: [Inf, 0.2962432524564119, 0.2337100607295473, 0.228680739762379] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2962432524564119, 0.2337100607295473, 0.228680739762379, 0.2278042838338192] ***
*** finished computation of 3 references, err: [Inf, 0.2962432524564119, 0.2337100607295473, 0.228680739762379, 0.2278042838338192] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [99, 147, 19]]
** centroid: 1, normalized-entropy: 0.8043547310078347, [(1, 99), (2, 147), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [121, 87, 1]]
** centroid: 2, normalized-entropy: 0.980639065020586, [(1, 121), (2, 87)]
*** center 3: selecting labels [1] (freq >= 2) [from [192, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3125646064432151] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3125646064432151, 0.2407222340491529] ***
*** starting iteration: 2; err: [Inf, 0.3125646064432151, 0.2407222340491529] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3125646064432151, 0.2407222340491529, 0.23514815876742118] ***
*** starting iteration: 3; err: [Inf, 0.3125646064432151, 0.2407222340491529, 0.23514815876742118] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3125646064432151, 0.2407222340491529, 0.23514815876742118, 0.23465699271328266] ***
*** finished computation of 3 references, err: [Inf, 0.3125646064432151, 0.2407222340491529, 0.23514815876742118, 0.23465699271328266] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [89, 161, 24]]
** centroid: 1, normalized-entropy: 0.8110067717786307, [(1, 89), (2, 161), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [113, 84, 0]]
** centroid: 2, normalized-entropy: 0.984311280033371, [(1, 113), (2, 84)]
*** center 3: selecting labels [1] (freq >= 2) [from [196, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30778347508146847] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30778347508146847, 0.23314217007069707] ***
*** starting iteration: 2; err: [Inf, 0.30778347508146847, 0.23314217007069707] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30778347508146847, 0.23314217007069707, 0.22585131363549465] ***
*** starting iteration: 3; err: [Inf, 0.30778347508146847, 0.23314217007069707, 0.22585131363549465] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30778347508146847, 0.23314217007069707, 0.22585131363549465, 0.22459394136803976] ***
*** starting iteration: 4; err: [Inf, 0.30778347508146847, 0.23314217007069707, 0.22585131363549465, 0.22459394136803976] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30778347508146847, 0.23314217007069707, 0.22585131363549465, 0.22459394136803976, 0.22434601120405023] ***
*** finished computation of 3 references, err: [Inf, 0.30778347508146847, 0.23314217007069707, 0.22585131363549465, 0.22459394136803976, 0.22434601120405023] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [105, 133, 13]]
** centroid: 1, normalized-entropy: 0.7777362291670851, [(1, 105), (2, 133), (3, 13)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [110, 108, 3]]
** centroid: 2, normalized-entropy: 0.6877253060103707, [(1, 110), (2, 108), (3, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [195, 0, 0]]
finished with 7 centroids; started with 3
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.2224027991620824] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2224027991620824, 0.20157495878078044] ***
*** finished computation of 7 references, err: [Inf, 0.2224027991620824, 0.20157495878078044] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [144, 38, 0]]
** centroid: 1, normalized-entropy: 0.7391658175693049, [(1, 144), (2, 38)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 87, 30]]
** centroid: 2, normalized-entropy: 0.8212809417449864, [(2, 87), (3, 30)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [46, 84, 0]]
** centroid: 3, normalized-entropy: 0.937456170782005, [(1, 46), (2, 84)]
*** center 4: selecting labels [1] (freq >= 1) [from [157, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [164, 26, 0]]
** centroid: 6, normalized-entropy: 0.5759084429149787, [(1, 164), (2, 26)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 125, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3391202327869833] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3391202327869833, 0.24310312457568944] ***
*** finished computation of 7 references, err: [Inf, 0.3391202327869833, 0.24310312457568944] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [41, 89, 0]]
** centroid: 1, normalized-entropy: 0.8992916011411405, [(1, 41), (2, 89)]
*** center 2: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [51, 20, 0]]
** centroid: 3, normalized-entropy: 0.8577435372751958, [(1, 51), (2, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 6: selecting labels [1, 2, 3] (freq >= 1) [from [50, 74, 15]]
** centroid: 6, normalized-entropy: 0.858959076173856, [(1, 50), (2, 74), (3, 15)]
*** center 7: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22588840677123517] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22588840677123517, 0.20436963481642306] ***
*** finished computation of 7 references, err: [Inf, 0.22588840677123517, 0.20436963481642306] ***
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 57, 14]]
** centroid: 2, normalized-entropy: 0.7162583911075451, [(2, 57), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [92, 48, 0]]
** centroid: 3, normalized-entropy: 0.927526588431676, [(1, 92), (2, 48)]
*** center 4: selecting labels [1] (freq >= 1) [from [112, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [29, 35, 0]]
** centroid: 5, normalized-entropy: 0.9936507116910402, [(1, 29), (2, 35)]
*** center 6: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [4, 46, 0]]
** centroid: 7, normalized-entropy: 0.4021791902022729, [(1, 4), (2, 46)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23393144481815398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23393144481815398, 0.2042416262011975] ***
*** finished computation of 7 references, err: [Inf, 0.23393144481815398, 0.2042416262011975] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [51, 55, 0]]
** centroid: 1, normalized-entropy: 0.9989725613141186, [(1, 51), (2, 55)]
*** center 2: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 31, 14]]
** centroid: 3, normalized-entropy: 0.8944518845341284, [(2, 31), (3, 14)]
*** center 4: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [15, 62, 0]]
** centroid: 5, normalized-entropy: 0.7114160189012126, [(1, 15), (2, 62)]
*** center 6: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [25, 36, 0]]
** centroid: 7, normalized-entropy: 0.9764143081154868, [(1, 25), (2, 36)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24882870463840664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24882870463840664, 0.21304680724069477] ***
*** finished computation of 7 references, err: [Inf, 0.24882870463840664, 0.21304680724069477] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [80, 8, 0]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(1, 80), (2, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [22, 63, 2]]
** centroid: 3, normalized-entropy: 0.608157927592782, [(1, 22), (2, 63), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 36, 13]]
** centroid: 4, normalized-entropy: 0.834648285181383, [(2, 36), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [22, 51, 0]]
** centroid: 5, normalized-entropy: 0.8829589691462253, [(1, 22), (2, 51)]
*** center 6: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [10, 18, 0]]
** centroid: 7, normalized-entropy: 0.940285958670631, [(1, 10), (2, 18)]
finished with 13 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.316726209834218] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.316726209834218, 0.24184862267971038] ***
*** finished computation of 7 references, err: [Inf, 0.316726209834218, 0.24184862267971038] ***
*** center 1: selecting labels [1] (freq >= 1) [from [158, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [13, 52, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 13), (2, 52)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [13, 19, 0]]
** centroid: 4, normalized-entropy: 0.9744894033980525, [(1, 13), (2, 19)]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [26, 72, 10]]
** centroid: 5, normalized-entropy: 0.7586494273884782, [(1, 26), (2, 72), (3, 10)]
*** center 6: selecting labels [1] (freq >= 1) [from [26, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 27, 4]]
** centroid: 7, normalized-entropy: 0.5547781633412736, [(2, 27), (3, 4)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24788267719140275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24788267719140275, 0.20933760159835219] ***
*** finished computation of 7 references, err: [Inf, 0.24788267719140275, 0.20933760159835219] ***
*** center 1: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [40, 62, 0]]
** centroid: 2, normalized-entropy: 0.9661773513883509, [(1, 40), (2, 62)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [46, 22, 0]]
** centroid: 3, normalized-entropy: 0.9081783472997053, [(1, 46), (2, 22)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 41, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 49, 15]]
** centroid: 5, normalized-entropy: 0.7855602922535471, [(2, 49), (3, 15)]
*** center 6: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [62, 2, 0]]
** centroid: 7, normalized-entropy: 0.2006223243127146, [(1, 62), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.33005451925843954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33005451925843954, 0.21422143632359802] ***
*** finished computation of 7 references, err: [Inf, 0.33005451925843954, 0.21422143632359802] ***
*** center 1: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [70, 71, 0]]
** centroid: 2, normalized-entropy: 0.9999637164343957, [(1, 70), (2, 71)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [18, 45, 0]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(1, 18), (2, 45)]
*** center 4: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [91, 1, 0]]
** centroid: 5, normalized-entropy: 0.08650421412134586, [(1, 91), (2, 1)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 32, 11]]
** centroid: 6, normalized-entropy: 0.8203636429576731, [(2, 32), (3, 11)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 24, 0]]
** centroid: 7, normalized-entropy: 0.24229218908241482, [(1, 1), (2, 24)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26635683842003344] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26635683842003344, 0.20492695287615062] ***
*** finished computation of 7 references, err: [Inf, 0.26635683842003344, 0.20492695287615062] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [65, 1, 0]]
** centroid: 1, normalized-entropy: 0.11327430349709665, [(1, 65), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [54, 32, 0]]
** centroid: 2, normalized-entropy: 0.9522656254366643, [(1, 54), (2, 32)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [46, 54, 0]]
** centroid: 3, normalized-entropy: 0.9953784388202258, [(1, 46), (2, 54)]
*** center 4: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 62, 0]]
** centroid: 6, normalized-entropy: 0.2006223243127146, [(1, 2), (2, 62)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 35, 13]]
** centroid: 7, normalized-entropy: 0.842657877202239, [(2, 35), (3, 13)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24427103686798363] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24427103686798363, 0.22023276364989577] ***
*** finished computation of 7 references, err: [Inf, 0.24427103686798363, 0.22023276364989577] ***
*** center 1: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [3, 38, 0]]
** centroid: 2, normalized-entropy: 0.3776463213737003, [(1, 3), (2, 38)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 26, 17]]
** centroid: 3, normalized-entropy: 0.9681647320759545, [(2, 26), (3, 17)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [39, 34, 0]]
** centroid: 4, normalized-entropy: 0.9966132830150962, [(1, 39), (2, 34)]
*** center 5: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 74, 0]]
** centroid: 6, normalized-entropy: 0.4951734787020683, [(1, 9), (2, 74)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [53, 10, 0]]
** centroid: 7, normalized-entropy: 0.6312630180916119, [(1, 53), (2, 10)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3033522397996858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3033522397996858, 0.22517093704454602] ***
*** finished computation of 7 references, err: [Inf, 0.3033522397996858, 0.22517093704454602] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 116, 17]]
** centroid: 1, normalized-entropy: 0.5514278209443916, [(2, 116), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [47, 7, 0]]
** centroid: 2, normalized-entropy: 0.5564215672884282, [(1, 47), (2, 7)]
*** center 3: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [81, 47, 0]]
** centroid: 4, normalized-entropy: 0.9484880760741908, [(1, 81), (2, 47)]
*** center 5: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [65, 15, 0]]
** centroid: 6, normalized-entropy: 0.6962122601251459, [(1, 65), (2, 15)]
*** center 7: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2713034890629351] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2713034890629351, 0.21004594977293164] ***
*** finished computation of 7 references, err: [Inf, 0.2713034890629351, 0.21004594977293164] ***
*** center 1: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [46, 22, 0]]
** centroid: 2, normalized-entropy: 0.9081783472997053, [(1, 46), (2, 22)]
*** center 3: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [67, 41, 0]]
** centroid: 4, normalized-entropy: 0.9577800211448372, [(1, 67), (2, 41)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [54, 23, 0]]
** centroid: 5, normalized-entropy: 0.8796975782775168, [(1, 54), (2, 23)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 86, 13]]
** centroid: 6, normalized-entropy: 0.5610284863400681, [(2, 86), (3, 13)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [40, 2, 0]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(1, 40), (2, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2622880786145106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2622880786145106, 0.20428300132229923] ***
*** finished computation of 7 references, err: [Inf, 0.2622880786145106, 0.20428300132229923] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [79, 7, 0]]
** centroid: 1, normalized-entropy: 0.40707680632541937, [(1, 79), (2, 7)]
*** center 2: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [82, 3, 0]]
** centroid: 3, normalized-entropy: 0.22028326695127437, [(1, 82), (2, 3)]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [1, 63, 15]]
** centroid: 4, normalized-entropy: 0.5017623402445036, [(1, 1), (2, 63), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [29, 28, 0]]
** centroid: 5, normalized-entropy: 0.9997779672118906, [(1, 29), (2, 28)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [20, 44, 0]]
** centroid: 6, normalized-entropy: 0.8960382325345574, [(1, 20), (2, 44)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 38, 1]]
** centroid: 7, normalized-entropy: 0.17203694935311387, [(2, 38), (3, 1)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2888420063070953] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2888420063070953, 0.20107548339106143] ***
*** finished computation of 7 references, err: [Inf, 0.2888420063070953, 0.20107548339106143] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 43, 12]]
** centroid: 1, normalized-entropy: 0.7568336324184036, [(2, 43), (3, 12)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [36, 44, 0]]
** centroid: 2, normalized-entropy: 0.9927744539878083, [(1, 36), (2, 44)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [18, 59, 0]]
** centroid: 3, normalized-entropy: 0.7845191388986644, [(1, 18), (2, 59)]
*** center 4: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [83, 16, 0]]
** centroid: 5, normalized-entropy: 0.638161945314006, [(1, 83), (2, 16)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [47, 10, 0]]
** centroid: 6, normalized-entropy: 0.6699960320994334, [(1, 47), (2, 10)]
*** center 7: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3041384638668969] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3041384638668969, 0.20345243826694787] ***
*** finished computation of 7 references, err: [Inf, 0.3041384638668969, 0.20345243826694787] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [42, 58, 0]]
** centroid: 1, normalized-entropy: 0.9814538950336533, [(1, 42), (2, 58)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 60, 16]]
** centroid: 2, normalized-entropy: 0.7424875695421234, [(2, 60), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [28, 35, 0]]
** centroid: 3, normalized-entropy: 0.9910760598382222, [(1, 28), (2, 35)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [51, 3, 0]]
** centroid: 4, normalized-entropy: 0.3095434291503252, [(1, 51), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [78, 19, 0]]
** centroid: 5, normalized-entropy: 0.7136036068604937, [(1, 78), (2, 19)]
*** center 6: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2739158906005323] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2739158906005323, 0.2091739335861057] ***
*** finished computation of 7 references, err: [Inf, 0.2739158906005323, 0.2091739335861057] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 108, 10]]
** centroid: 1, normalized-entropy: 0.4186843105268563, [(2, 108), (3, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [61, 50, 0]]
** centroid: 2, normalized-entropy: 0.9929042710341395, [(1, 61), (2, 50)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [85, 3, 0]]
** centroid: 3, normalized-entropy: 0.21450983370697788, [(1, 85), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [31, 30, 0]]
** centroid: 4, normalized-entropy: 0.999806132804711, [(1, 31), (2, 30)]
*** center 5: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [17, 11, 0]]
** centroid: 7, normalized-entropy: 0.9666186325481027, [(1, 17), (2, 11)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3809378557121381] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3809378557121381, 0.24968043443839996] ***
*** finished computation of 7 references, err: [Inf, 0.3809378557121381, 0.24968043443839996] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [59, 90, 18]]
** centroid: 1, normalized-entropy: 0.8563917387382146, [(1, 59), (2, 90), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [143, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [6, 79, 0]]
** centroid: 5, normalized-entropy: 0.3681150054280774, [(1, 6), (2, 79)]
*** center 6: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [32, 7, 0]]
** centroid: 7, normalized-entropy: 0.6789538995185759, [(1, 32), (2, 7)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3067491817707196] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3067491817707196, 0.21548211893066763] ***
*** finished computation of 7 references, err: [Inf, 0.3067491817707196, 0.21548211893066763] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [69, 33, 0]]
** centroid: 1, normalized-entropy: 0.9081783472997053, [(1, 69), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [57, 18, 0]]
** centroid: 2, normalized-entropy: 0.7950402793845225, [(1, 57), (2, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [80, 10, 0]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(1, 80), (2, 10)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 55, 11]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 55), (3, 11)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 65, 6]]
** centroid: 5, normalized-entropy: 0.4178642624458583, [(2, 65), (3, 6)]
*** center 6: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2706560813849792] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2706560813849792, 0.2072484559342265] ***
*** finished computation of 7 references, err: [Inf, 0.2706560813849792, 0.2072484559342265] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [93, 38, 0]]
** centroid: 1, normalized-entropy: 0.868819834026739, [(1, 93), (2, 38)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 41, 10]]
** centroid: 2, normalized-entropy: 0.7140152804378671, [(2, 41), (3, 10)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [30, 33, 0]]
** centroid: 3, normalized-entropy: 0.998363672593813, [(1, 30), (2, 33)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 44, 9]]
** centroid: 4, normalized-entropy: 0.6572729784684466, [(2, 44), (3, 9)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [49, 28, 0]]
** centroid: 5, normalized-entropy: 0.9456603046006401, [(1, 49), (2, 28)]
*** center 6: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23728706946456804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23728706946456804, 0.20225139320269228] ***
*** finished computation of 7 references, err: [Inf, 0.23728706946456804, 0.20225139320269228] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [98, 1, 0]]
** centroid: 1, normalized-entropy: 0.08146202691505994, [(1, 98), (2, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 55, 17]]
** centroid: 2, normalized-entropy: 0.7885131605379784, [(2, 55), (3, 17)]
*** center 3: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [38, 20, 0]]
** centroid: 5, normalized-entropy: 0.9293636260137188, [(1, 38), (2, 20)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [68, 33, 0]]
** centroid: 6, normalized-entropy: 0.9115532734067251, [(1, 68), (2, 33)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [6, 62, 0]]
** centroid: 7, normalized-entropy: 0.43055186701043935, [(1, 6), (2, 62)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30921362098306415] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30921362098306415, 0.2291942321769893] ***
*** finished computation of 7 references, err: [Inf, 0.30921362098306415, 0.2291942321769893] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [45, 41, 0]]
** centroid: 1, normalized-entropy: 0.9984389230256238, [(1, 45), (2, 41)]
*** center 2: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [12, 100, 13]]
** centroid: 3, normalized-entropy: 0.5815261885798758, [(1, 12), (2, 100), (3, 13)]
*** center 4: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [28, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [65, 34, 0]]
** centroid: 6, normalized-entropy: 0.9280672822072753, [(1, 65), (2, 34)]
*** center 7: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.33211724208295346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33211724208295346, 0.24829645435512065] ***
*** finished computation of 7 references, err: [Inf, 0.33211724208295346, 0.24829645435512065] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [88, 2, 0]]
** centroid: 1, normalized-entropy: 0.1537421803287618, [(1, 88), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [153, 5, 0]]
** centroid: 2, normalized-entropy: 0.20257834054158072, [(1, 153), (2, 5)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [4, 94, 1]]
** centroid: 3, normalized-entropy: 0.2050518724826846, [(1, 4), (2, 94), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 14, 12]]
** centroid: 4, normalized-entropy: 0.9957274520849256, [(2, 14), (3, 12)]
*** center 5: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [12, 22, 0]]
** centroid: 6, normalized-entropy: 0.9366673818775627, [(1, 12), (2, 22)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 43, 5]]
** centroid: 7, normalized-entropy: 0.4820661480830933, [(2, 43), (3, 5)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27063523965515196] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27063523965515196, 0.23254558888310567] ***
*** finished computation of 7 references, err: [Inf, 0.27063523965515196, 0.23254558888310567] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [3, 94, 14]]
** centroid: 1, normalized-entropy: 0.45467272137437603, [(1, 3), (2, 94), (3, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [85, 5, 0]]
** centroid: 2, normalized-entropy: 0.3095434291503252, [(1, 85), (2, 5)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [45, 82, 0]]
** centroid: 3, normalized-entropy: 0.9378763898153295, [(1, 45), (2, 82)]
*** center 4: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [44, 9, 0]]
** centroid: 7, normalized-entropy: 0.6572729784684466, [(1, 44), (2, 9)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2903148037660867] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2903148037660867, 0.2194135067909956] ***
*** finished computation of 7 references, err: [Inf, 0.2903148037660867, 0.2194135067909956] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [75, 2, 0]]
** centroid: 1, normalized-entropy: 0.17378132267943294, [(1, 75), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [24, 13, 0]]
** centroid: 2, normalized-entropy: 0.9352691398683568, [(1, 24), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [83, 47, 0]]
** centroid: 3, normalized-entropy: 0.9439528220235028, [(1, 83), (2, 47)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [29, 25, 0]]
** centroid: 4, normalized-entropy: 0.9960383613659186, [(1, 29), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [35, 1, 0]]
** centroid: 5, normalized-entropy: 0.18312206830137262, [(1, 35), (2, 1)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 95, 14]]
** centroid: 6, normalized-entropy: 0.5531453183526465, [(2, 95), (3, 14)]
*** center 7: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3059433698914945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3059433698914945, 0.20401520522870123] ***
*** finished computation of 7 references, err: [Inf, 0.3059433698914945, 0.20401520522870123] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [22, 16, 0]]
** centroid: 1, normalized-entropy: 0.9819407868640977, [(1, 22), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [32, 44, 0]]
** centroid: 2, normalized-entropy: 0.9819407868640977, [(1, 32), (2, 44)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [65, 22, 0]]
** centroid: 3, normalized-entropy: 0.8158009273789572, [(1, 65), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [70, 21, 0]]
** centroid: 4, normalized-entropy: 0.7793498372920851, [(1, 70), (2, 21)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 43, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 26, 16]]
** centroid: 6, normalized-entropy: 0.9587118829771317, [(2, 26), (3, 16)]
*** center 7: selecting labels [1] (freq >= 1) [from [123, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2675806618537754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2675806618537754, 0.2051265356130898] ***
*** finished computation of 7 references, err: [Inf, 0.2675806618537754, 0.2051265356130898] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [5, 36, 0]]
** centroid: 1, normalized-entropy: 0.5349436990971067, [(1, 5), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [25, 31, 0]]
** centroid: 2, normalized-entropy: 0.9917033083725819, [(1, 25), (2, 31)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 60, 15]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 60), (3, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [52, 10, 0]]
** centroid: 5, normalized-entropy: 0.6373874992221911, [(1, 52), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [44, 46, 0]]
** centroid: 6, normalized-entropy: 0.9996437496778561, [(1, 44), (2, 46)]
*** center 7: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.35775673418026416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35775673418026416, 0.2367297314479947] ***
*** finished computation of 7 references, err: [Inf, 0.35775673418026416, 0.2367297314479947] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [20, 44, 14]]
** centroid: 1, normalized-entropy: 0.8922386216326156, [(1, 20), (2, 44), (3, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [67, 38, 0]]
** centroid: 2, normalized-entropy: 0.9442529341277702, [(1, 67), (2, 38)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [2, 56, 5]]
** centroid: 3, normalized-entropy: 0.3780282624348024, [(1, 2), (2, 56), (3, 5)]
*** center 4: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [18, 33, 0]]
** centroid: 6, normalized-entropy: 0.9366673818775627, [(1, 18), (2, 33)]
*** center 7: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
finished with 13 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25371179077774286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25371179077774286, 0.20812282469309867] ***
*** finished computation of 7 references, err: [Inf, 0.25371179077774286, 0.20812282469309867] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [27, 53, 0]]
** centroid: 1, normalized-entropy: 0.9224062617590724, [(1, 27), (2, 53)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 90, 18]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(2, 90), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [94, 1, 0]]
** centroid: 3, normalized-entropy: 0.08426242877623306, [(1, 94), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [79, 34, 0]]
** centroid: 4, normalized-entropy: 0.8823699738443678, [(1, 79), (2, 34)]
*** center 5: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [23, 2, 0]]
** centroid: 6, normalized-entropy: 0.4021791902022729, [(1, 23), (2, 2)]
*** center 7: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22078496706113218] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22078496706113218, 0.1867300262749195] ***
*** finished computation of 7 references, err: [Inf, 0.22078496706113218, 0.1867300262749195] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 41, 9]]
** centroid: 1, normalized-entropy: 0.6800770457282798, [(2, 41), (3, 9)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [71, 26, 0]]
** centroid: 2, normalized-entropy: 0.8386398715015523, [(1, 71), (2, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [78, 19, 0]]
** centroid: 3, normalized-entropy: 0.7136036068604937, [(1, 78), (2, 19)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [47, 28, 0]]
** centroid: 4, normalized-entropy: 0.9531971725430559, [(1, 47), (2, 28)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 59, 5]]
** centroid: 5, normalized-entropy: 0.3955378064564774, [(2, 59), (3, 5)]
*** center 6: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2695796036766842] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2695796036766842, 0.20319971726927907] ***
*** finished computation of 7 references, err: [Inf, 0.2695796036766842, 0.20319971726927907] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [84, 24, 0]]
** centroid: 1, normalized-entropy: 0.7642045065086204, [(1, 84), (2, 24)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 16, 14]]
** centroid: 2, normalized-entropy: 0.9967916319816367, [(2, 16), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [1, 74, 0]]
** centroid: 3, normalized-entropy: 0.10215803640865054, [(1, 1), (2, 74)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [93, 14, 0]]
** centroid: 4, normalized-entropy: 0.5597404598417697, [(1, 93), (2, 14)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 56, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.33955778684001414] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33955778684001414, 0.21122668394446373] ***
*** finished computation of 7 references, err: [Inf, 0.33955778684001414, 0.21122668394446373] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [86, 5, 0]]
** centroid: 1, normalized-entropy: 0.30704288878312236, [(1, 86), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [40, 20, 0]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(1, 40), (2, 20)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 64, 3]]
** centroid: 3, normalized-entropy: 0.26377743669413856, [(2, 64), (3, 3)]
*** center 4: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [21, 29, 0]]
** centroid: 5, normalized-entropy: 0.9814538950336533, [(1, 21), (2, 29)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 47, 18]]
** centroid: 6, normalized-entropy: 0.8512243352621381, [(2, 47), (3, 18)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [54, 7, 0]]
** centroid: 7, normalized-entropy: 0.5140912790181233, [(1, 54), (2, 7)]
finished with 12 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 360,3 => 30,1 => 610), Dict(2 => 350,3 => 38,1 => 612))
[ Info: (AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, 1, 7, 1, 1.0, :dnet, 0.3, 1), 0.9400178621735509)
[ Info: ===== scores for single classifier: {"micro_f1":0.911,"precision":0.911,"recall":0.911,"macro_recall":0.9240621160745,"macro_f1":0.8601320150192331,"accuracy":0.911,"class_f1":{"2":0.8789115646258503,"3":0.7578947368421052,"1":0.9435897435897437},"class_precision":{"2":0.8389610389610389,"3":0.631578947368421,"1":0.989247311827957},"class_recall":{"2":0.9228571428571428,"3":0.9473684210526315,"1":0.9019607843137255}}
[ Info: ===== scores for 1: {"micro_f1":0.966,"precision":0.966,"recall":0.966,"macro_recall":0.9716962340491753,"macro_f1":0.923355528224786,"accuracy":0.966,"class_f1":{"2":0.9504373177842566,"3":0.8351648351648352,"1":0.9844644317252658},"class_precision":{"2":0.9702380952380952,"3":0.7169811320754716,"1":0.9852700490998363},"class_recall":{"2":0.9314285714285714,"3":1.0,"1":0.9836601307189542}}
[ Info: ===== scores for 5: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9736041083099907,"macro_f1":0.9215373873851189,"accuracy":0.971,"class_f1":{"2":0.9571639586410635,"3":0.8172043010752689,"1":0.9902439024390244},"class_precision":{"2":0.9908256880733946,"3":0.6909090909090909,"1":0.9854368932038835},"class_recall":{"2":0.9257142857142857,"3":1.0,"1":0.9950980392156863}}
[ Info: ===== scores for 7: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.9710177404295051,"macro_f1":0.9108178460387591,"accuracy":0.967,"class_f1":{"2":0.9513991163475699,"3":0.7916666666666666,"1":0.9893877551020409},"class_precision":{"2":0.9817629179331308,"3":0.6551724137931034,"1":0.9885807504078303},"class_recall":{"2":0.9228571428571428,"3":1.0,"1":0.9901960784313726}}
[ Info: ===== scores for 9: {"micro_f1":0.968,"precision":0.968,"recall":0.968,"macro_recall":0.9723778400248989,"macro_f1":0.919346194000572,"accuracy":0.968,"class_f1":{"2":0.9530791788856305,"3":0.8172043010752689,"1":0.9877551020408164},"class_precision":{"2":0.9789156626506024,"3":0.6909090909090909,"1":0.9869494290375204},"class_recall":{"2":0.9285714285714286,"3":1.0,"1":0.988562091503268}}
[ Info: ===== scores for 11: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.9718331777155308,"macro_f1":0.9159764880485176,"accuracy":0.967,"class_f1":{"2":0.951683748169839,"3":0.8085106382978724,"1":0.9877350776778414},"class_precision":{"2":0.975975975975976,"3":0.6785714285714286,"1":0.9885433715220949},"class_recall":{"2":0.9285714285714286,"3":1.0,"1":0.9869281045751634}}
(score = 0.966, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: ("config: ", "{\"score\":0.971,\"k\":5,\"kernel\":\"direct_kernel\",\"dist\":\"l1_distance\",\"kernel_fun\":\"fun\"}")
[ Info: ===== scores optimized! B: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9736041083099907,"macro_f1":0.9215373873851189,"accuracy":0.971,"class_f1":{"2":0.9571639586410635,"3":0.8172043010752689,"1":0.9902439024390244},"class_precision":{"2":0.9908256880733946,"3":0.6909090909090909,"1":0.9854368932038835},"class_recall":{"2":0.9257142857142857,"3":1.0,"1":0.9950980392156863}}
Test Summary: | Pass  Total
AKNC          |    8      8
    Testing KCenters tests passed 
