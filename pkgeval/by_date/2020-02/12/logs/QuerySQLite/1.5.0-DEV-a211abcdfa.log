Julia Version 1.5.0-DEV.260
Commit a211abcdfa (2020-02-10 22:01 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Reexport ──────────────────── v0.2.0
  Installed QuerySQLite ───────────────── v0.2.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed MacroTools ────────────────── v0.5.4
  Installed BinaryProvider ────────────── v0.5.8
  Installed SQLite ────────────────────── v0.8.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed DataValues ────────────────── v0.4.13
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Parsers ───────────────────── v0.3.11
  Installed Missings ──────────────────── v0.4.3
  Installed DataAPI ───────────────────── v1.1.0
  Installed TableTraits ───────────────── v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed Tables ────────────────────── v1.0.0
  Installed DataStructures ────────────── v0.17.9
  Installed StatsBase ─────────────────── v0.32.0
  Installed JSON ──────────────────────── v0.21.0
  Installed DataFrames ────────────────── v0.18.4
  Installed PooledArrays ──────────────── v0.5.3
  Installed TableShowUtils ────────────── v0.2.5
  Installed WeakRefStrings ────────────── v0.6.2
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed QueryOperators ────────────── v0.9.1
  Installed Compat ────────────────────── v3.5.0
   Updating `~/.julia/environments/v1.5/Project.toml`
  [57f923c0] + QuerySQLite v0.2.0
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [b99e7846] + BinaryProvider v0.5.8
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.5.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.18.4
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [e7dc6d0d] + DataValues v0.4.13
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [1914dd2f] + MacroTools v0.5.4
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [2aef5ad7] + QueryOperators v0.9.1
  [57f923c0] + QuerySQLite v0.2.0
  [189a3867] + Reexport v0.2.0
  [0aa819cd] + SQLite v0.8.2
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [5e66a065] + TableShowUtils v0.2.5
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.0
  [ea10d353] + WeakRefStrings v0.6.2
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Building SQLite → `~/.julia/packages/SQLite/msdQN/deps/build.log`
    Testing QuerySQLite
Status `/tmp/jl_w6nTB3/Manifest.toml`
  [b99e7846] BinaryProvider v0.5.8
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.5.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.18.4
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [e7dc6d0d] DataValues v0.4.13
  [1c8ee90f] IterableTables v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [1914dd2f] MacroTools v0.5.4
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [1a8c2f83] Query v0.12.2
  [2aef5ad7] QueryOperators v0.9.1
  [57f923c0] QuerySQLite v0.2.0
  [30ad73d7] QueryTables v0.1.0
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [0aa819cd] SQLite v0.8.2
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.0
  [5e66a065] TableShowUtils v0.2.5
  [3783bdb8] TableTraits v1.0.0
  [382cd787] TableTraitsUtils v1.0.1
  [bd369af6] Tables v1.0.0
  [ea10d353] WeakRefStrings v0.6.2
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
WARNING: Method definition translate_dispatch(typeof(Base.startswith), Any, AbstractString) in module QuerySQLite at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/library.jl:133 overwritten at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/library.jl:140.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition translate_dispatch##kw(Any, typeof(QuerySQLite.translate_dispatch), typeof(Base.startswith), Any, AbstractString) in module QuerySQLite at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/library.jl:133 overwritten at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/library.jl:140.
  ** incremental compilation may be fatally broken for this module **

QuerySQLite: Error During Test at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:13
  Test threw exception
  Expression: (((database.Track |> #= /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:14 =# @map({_.TrackId, _.Name, _.Composer, _.UnitPrice})) |> collect) |> first) |> propertynames == (:TrackId, :Name, :Composer, :UnitPrice)
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{Union{Missing, Int64},1},Array{Any,1},Array{Union{Missing, Int64},1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{Union{Missing, Int64},1},Array{Any,1},Array{Union{Missing, Int64},1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::SQLite.Query{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Union{Missing, Int64},Union{Missing, String},Union{Missing, String},Union{Missing, Int64},Any,Union{Missing, Int64}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::SQLite.Query{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Union{Missing, Int64},Union{Missing, String},Union{Missing, String},Union{Missing, Int64},Any,Union{Missing, Int64}}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] |>(::SQLite.Query{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Union{Missing, Int64},Union{Missing, String},Union{Missing, String},Union{Missing, Int64},Any,Union{Missing, Int64}}}}, ::Type{T} where T) at ./operators.jl:823
   [5] columns(::SQLite.DB, ::String, ::Type{T} where T) at /home/pkgeval/.julia/packages/SQLite/msdQN/src/SQLite.jl:428 (repeats 2 times)
   [6] get_column_names(::SQLite.DB, ::Symbol) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/source.jl:22
   [7] model_row_dispatch(::typeof(getproperty), ::Database{SQLite.DB}, ::Symbol; other::Bool, options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/library.jl:32
   [8] model_row_dispatch(::typeof(getproperty), ::Database{SQLite.DB}, ::Symbol) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/library.jl:31
   [9] model_row(::Expr; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:62
   [10] model_row(::Expr) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:62
   [11] translate_dispatch(::typeof(QueryOperators.map), ::Expr, ::var"#4#31", ::Expr; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:81
   [12] translate_dispatch(::typeof(QueryOperators.map), ::Expr, ::Function, ::Expr) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:81
   [13] #translate#8 at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [14] translate at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [15] text(::QuerySQLite.SourceCode{SQLite.DB}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/realize.jl:110
   [16] getiterator(::QuerySQLite.SourceCode{SQLite.DB}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/iterate.jl:102
   [17] collect(::QuerySQLite.SourceCode{SQLite.DB}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/iterate.jl:79
   [18] |>(::QuerySQLite.SourceCode{SQLite.DB}, ::typeof(collect)) at ./operators.jl:823
   [19] top-level scope at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:13
   [20] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [21] top-level scope at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:13
  
QuerySQLite: Error During Test at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:19
  Test threw exception
  Expression: (((database2.Customer |> #= /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:20 =# @map({_.City, _.Country})) |> #= /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:21 =# @orderby(_.Country)) |> DataTable).Country[1] == "Argentina"
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{Union{Missing, Int64},1},Array{Any,1},Array{Union{Missing, Int64},1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{Union{Missing, Int64},1},Array{Any,1},Array{Union{Missing, Int64},1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::SQLite.Query{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Union{Missing, Int64},Union{Missing, String},Union{Missing, String},Union{Missing, Int64},Any,Union{Missing, Int64}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::SQLite.Query{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Union{Missing, Int64},Union{Missing, String},Union{Missing, String},Union{Missing, Int64},Any,Union{Missing, Int64}}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] |>(::SQLite.Query{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Union{Missing, Int64},Union{Missing, String},Union{Missing, String},Union{Missing, Int64},Any,Union{Missing, Int64}}}}, ::Type{T} where T) at ./operators.jl:823
   [5] columns(::SQLite.DB, ::String, ::Type{T} where T) at /home/pkgeval/.julia/packages/SQLite/msdQN/src/SQLite.jl:428 (repeats 2 times)
   [6] get_column_names(::SQLite.DB, ::Symbol) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/source.jl:22
   [7] model_row_dispatch(::typeof(getproperty), ::Database{SQLite.DB}, ::Symbol; other::Bool, options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/library.jl:32
   [8] model_row_dispatch(::typeof(getproperty), ::Database{SQLite.DB}, ::Symbol) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/library.jl:31
   [9] model_row(::Expr; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:62
   [10] model_row(::Expr) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:62
   [11] translate_dispatch(::typeof(QueryOperators.map), ::Expr, ::var"#6#33", ::Expr; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:81
   [12] translate_dispatch(::typeof(QueryOperators.map), ::Expr, ::Function, ::Expr) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:81
   [13] #translate#8 at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [14] translate at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [15] translate_dispatch(::typeof(QueryOperators.orderby), ::Expr, ::var"#8#35", ::Expr; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:43
   [16] translate_dispatch(::typeof(QueryOperators.orderby), ::Expr, ::Function, ::Expr) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:43
   [17] #translate#8 at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [18] translate at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [19] text(::QuerySQLite.SourceCode{SQLite.DB}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/realize.jl:110
   [20] getiterator(::QuerySQLite.SourceCode{SQLite.DB}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/iterate.jl:102
   [21] create_columns_from_iterabletable(::QuerySQLite.SourceCode{SQLite.DB}; sel_cols::Symbol, na_representation::Symbol, errorhandling::Symbol) at /home/pkgeval/.julia/packages/TableTraitsUtils/bjNLY/src/collect1.jl:32
   [22] create_columns_from_iterabletable at /home/pkgeval/.julia/packages/TableTraitsUtils/bjNLY/src/collect1.jl:3 [inlined]
   [23] DataTable(::QuerySQLite.SourceCode{SQLite.DB}) at /home/pkgeval/.julia/packages/QueryTables/7F9gO/src/QueryTables.jl:27
   [24] |>(::QuerySQLite.SourceCode{SQLite.DB}, ::Type{T} where T) at ./operators.jl:823
   [25] top-level scope at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:19
   [26] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [27] top-level scope at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:13
  
QuerySQLite: Error During Test at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:24
  Test threw exception
  Expression: (((database.Customer |> #= /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:25 =# @map({_.City})) |> #= /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:26 =# @unique()) |> collect) |> length == 53
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{Union{Missing, Int64},1},Array{Any,1},Array{Union{Missing, Int64},1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{Union{Missing, Int64},1},Array{Any,1},Array{Union{Missing, Int64},1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::SQLite.Query{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Union{Missing, Int64},Union{Missing, String},Union{Missing, String},Union{Missing, Int64},Any,Union{Missing, Int64}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::SQLite.Query{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Union{Missing, Int64},Union{Missing, String},Union{Missing, String},Union{Missing, Int64},Any,Union{Missing, Int64}}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] |>(::SQLite.Query{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Union{Missing, Int64},Union{Missing, String},Union{Missing, String},Union{Missing, Int64},Any,Union{Missing, Int64}}}}, ::Type{T} where T) at ./operators.jl:823
   [5] columns(::SQLite.DB, ::String, ::Type{T} where T) at /home/pkgeval/.julia/packages/SQLite/msdQN/src/SQLite.jl:428 (repeats 2 times)
   [6] get_column_names(::SQLite.DB, ::Symbol) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/source.jl:22
   [7] model_row_dispatch(::typeof(getproperty), ::Database{SQLite.DB}, ::Symbol; other::Bool, options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/library.jl:32
   [8] model_row_dispatch(::typeof(getproperty), ::Database{SQLite.DB}, ::Symbol) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/library.jl:31
   [9] model_row(::Expr; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:62
   [10] model_row(::Expr) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:62
   [11] translate_dispatch(::typeof(QueryOperators.map), ::Expr, ::var"#10#37", ::Expr; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:81
   [12] translate_dispatch(::typeof(QueryOperators.map), ::Expr, ::Function, ::Expr) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:81
   [13] #translate#8 at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [14] translate at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [15] translate_dispatch(::typeof(QueryOperators.unique), ::Expr, ::Function, ::Expr; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:95
   [16] translate_dispatch(::typeof(QueryOperators.unique), ::Expr, ::Function, ::Expr) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:95
   [17] #translate#8 at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [18] translate at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [19] text(::QuerySQLite.SourceCode{SQLite.DB}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/realize.jl:110
   [20] getiterator(::QuerySQLite.SourceCode{SQLite.DB}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/iterate.jl:102
   [21] collect(::QuerySQLite.SourceCode{SQLite.DB}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/iterate.jl:79
   [22] |>(::QuerySQLite.SourceCode{SQLite.DB}, ::typeof(collect)) at ./operators.jl:823
   [23] top-level scope at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:24
   [24] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [25] top-level scope at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:13
  
QuerySQLite: Error During Test at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:30
  Test threw exception
  Expression: (((database.Track |> #= /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:31 =# @map({_.TrackId, _.Name})) |> #= /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:32 =# @take(10)) |> collect) |> length == 10
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{Union{Missing, Int64},1},Array{Any,1},Array{Union{Missing, Int64},1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{Union{Missing, Int64},1},Array{Any,1},Array{Union{Missing, Int64},1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::SQLite.Query{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Union{Missing, Int64},Union{Missing, String},Union{Missing, String},Union{Missing, Int64},Any,Union{Missing, Int64}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::SQLite.Query{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Union{Missing, Int64},Union{Missing, String},Union{Missing, String},Union{Missing, Int64},Any,Union{Missing, Int64}}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] |>(::SQLite.Query{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Union{Missing, Int64},Union{Missing, String},Union{Missing, String},Union{Missing, Int64},Any,Union{Missing, Int64}}}}, ::Type{T} where T) at ./operators.jl:823
   [5] columns(::SQLite.DB, ::String, ::Type{T} where T) at /home/pkgeval/.julia/packages/SQLite/msdQN/src/SQLite.jl:428 (repeats 2 times)
   [6] get_column_names(::SQLite.DB, ::Symbol) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/source.jl:22
   [7] model_row_dispatch(::typeof(getproperty), ::Database{SQLite.DB}, ::Symbol; other::Bool, options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/library.jl:32
   [8] model_row_dispatch(::typeof(getproperty), ::Database{SQLite.DB}, ::Symbol) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/library.jl:31
   [9] model_row(::Expr; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:62
   [10] model_row(::Expr) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:62
   [11] translate_dispatch(::typeof(QueryOperators.map), ::Expr, ::var"#14#41", ::Expr; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:81
   [12] translate_dispatch(::typeof(QueryOperators.map), ::Expr, ::Function, ::Expr) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:81
   [13] #translate#8 at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [14] translate at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [15] #70 at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:81 [inlined]
   [16] map_unrolled at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/utilities.jl:6 [inlined]
   [17] #translate_dispatch#69 at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:91 [inlined]
   [18] translate_dispatch(::typeof(QueryOperators.take), ::Expr, ::Int64) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:91
   [19] #translate#8 at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [20] translate at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [21] text(::QuerySQLite.SourceCode{SQLite.DB}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/realize.jl:110
   [22] getiterator(::QuerySQLite.SourceCode{SQLite.DB}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/iterate.jl:102
   [23] collect(::QuerySQLite.SourceCode{SQLite.DB}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/iterate.jl:79
   [24] |>(::QuerySQLite.SourceCode{SQLite.DB}, ::typeof(collect)) at ./operators.jl:823
   [25] top-level scope at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:30
   [26] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [27] top-level scope at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:13
  
QuerySQLite: Error During Test at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:36
  Test threw exception
  Expression: first(((((database.Track |> #= /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:37 =# @map({_.TrackId, _.Name})) |> #= /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:38 =# @take(10)) |> #= /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:39 =# @drop(10)) |> DataTable).Name) == "C.O.D."
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{Union{Missing, Int64},1},Array{Any,1},Array{Union{Missing, Int64},1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{Union{Missing, Int64},1},Array{Any,1},Array{Union{Missing, Int64},1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::SQLite.Query{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Union{Missing, Int64},Union{Missing, String},Union{Missing, String},Union{Missing, Int64},Any,Union{Missing, Int64}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::SQLite.Query{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Union{Missing, Int64},Union{Missing, String},Union{Missing, String},Union{Missing, Int64},Any,Union{Missing, Int64}}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] |>(::SQLite.Query{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Union{Missing, Int64},Union{Missing, String},Union{Missing, String},Union{Missing, Int64},Any,Union{Missing, Int64}}}}, ::Type{T} where T) at ./operators.jl:823
   [5] columns(::SQLite.DB, ::String, ::Type{T} where T) at /home/pkgeval/.julia/packages/SQLite/msdQN/src/SQLite.jl:428 (repeats 2 times)
   [6] get_column_names(::SQLite.DB, ::Symbol) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/source.jl:22
   [7] model_row_dispatch(::typeof(getproperty), ::Database{SQLite.DB}, ::Symbol; other::Bool, options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/library.jl:32
   [8] model_row_dispatch(::typeof(getproperty), ::Database{SQLite.DB}, ::Symbol) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/library.jl:31
   [9] model_row(::Expr; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:62
   [10] model_row(::Expr) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:62
   [11] translate_dispatch(::typeof(QueryOperators.map), ::Expr, ::var"#17#44", ::Expr; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:81
   [12] translate_dispatch(::typeof(QueryOperators.map), ::Expr, ::Function, ::Expr) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:81
   [13] #translate#8 at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [14] translate at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [15] #70 at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:81 [inlined]
   [16] map_unrolled at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/utilities.jl:6 [inlined]
   [17] #translate_dispatch#69 at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:91 [inlined]
   [18] translate_dispatch(::typeof(QueryOperators.take), ::Expr, ::Int64) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:91
   [19] #translate#8 at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [20] translate at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [21] #55 at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:81 [inlined]
   [22] map_unrolled at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/utilities.jl:6 [inlined]
   [23] #translate_dispatch#54 at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:9 [inlined]
   [24] translate_dispatch(::typeof(QueryOperators.drop), ::Expr, ::Int64) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:9
   [25] #translate#8 at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [26] translate at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [27] text(::QuerySQLite.SourceCode{SQLite.DB}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/realize.jl:110
   [28] getiterator(::QuerySQLite.SourceCode{SQLite.DB}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/iterate.jl:102
   [29] create_columns_from_iterabletable(::QuerySQLite.SourceCode{SQLite.DB}; sel_cols::Symbol, na_representation::Symbol, errorhandling::Symbol) at /home/pkgeval/.julia/packages/TableTraitsUtils/bjNLY/src/collect1.jl:32
   [30] create_columns_from_iterabletable at /home/pkgeval/.julia/packages/TableTraitsUtils/bjNLY/src/collect1.jl:3 [inlined]
   [31] DataTable(::QuerySQLite.SourceCode{SQLite.DB}) at /home/pkgeval/.julia/packages/QueryTables/7F9gO/src/QueryTables.jl:27
   [32] |>(::QuerySQLite.SourceCode{SQLite.DB}, ::Type{T} where T) at ./operators.jl:823
   [33] top-level scope at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:36
   [34] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [35] top-level scope at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:13
  
QuerySQLite: Error During Test at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:42
  Test threw exception
  Expression: first(((((database.Track |> #= /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:43 =# @map({_.TrackId, _.Name, _.Bytes})) |> #= /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:44 =# @orderby_descending(_.Bytes)) |> #= /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:45 =# @thenby(_.Name)) |> DataTable).Bytes) == 1059546140
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{Union{Missing, Int64},1},Array{Any,1},Array{Union{Missing, Int64},1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{Union{Missing, Int64},1},Array{Any,1},Array{Union{Missing, Int64},1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::SQLite.Query{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Union{Missing, Int64},Union{Missing, String},Union{Missing, String},Union{Missing, Int64},Any,Union{Missing, Int64}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::SQLite.Query{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Union{Missing, Int64},Union{Missing, String},Union{Missing, String},Union{Missing, Int64},Any,Union{Missing, Int64}}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] |>(::SQLite.Query{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Union{Missing, Int64},Union{Missing, String},Union{Missing, String},Union{Missing, Int64},Any,Union{Missing, Int64}}}}, ::Type{T} where T) at ./operators.jl:823
   [5] columns(::SQLite.DB, ::String, ::Type{T} where T) at /home/pkgeval/.julia/packages/SQLite/msdQN/src/SQLite.jl:428 (repeats 2 times)
   [6] get_column_names(::SQLite.DB, ::Symbol) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/source.jl:22
   [7] model_row_dispatch(::typeof(getproperty), ::Database{SQLite.DB}, ::Symbol; other::Bool, options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/library.jl:32
   [8] model_row_dispatch(::typeof(getproperty), ::Database{SQLite.DB}, ::Symbol) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/library.jl:31
   [9] model_row(::Expr; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:62
   [10] model_row(::Expr) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:62
   [11] translate_dispatch(::typeof(QueryOperators.map), ::Expr, ::var"#21#48", ::Expr; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:81
   [12] translate_dispatch(::typeof(QueryOperators.map), ::Expr, ::Function, ::Expr) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:81
   [13] #translate#8 at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [14] translate at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [15] translate_dispatch(::typeof(QueryOperators.orderby_descending), ::Expr, ::var"#23#50", ::Expr; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:58
   [16] translate_dispatch(::typeof(QueryOperators.orderby_descending), ::Expr, ::Function, ::Expr) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:58
   [17] #translate#8 at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [18] translate at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [19] translate_dispatch(::typeof(QueryOperators.thenby), ::Expr, ::var"#25#52", ::Expr; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:50
   [20] translate_dispatch(::typeof(QueryOperators.thenby), ::Expr, ::Function, ::Expr) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:50
   [21] #translate#8 at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [22] translate at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [23] text(::QuerySQLite.SourceCode{SQLite.DB}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/realize.jl:110
   [24] getiterator(::QuerySQLite.SourceCode{SQLite.DB}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/iterate.jl:102
   [25] create_columns_from_iterabletable(::QuerySQLite.SourceCode{SQLite.DB}; sel_cols::Symbol, na_representation::Symbol, errorhandling::Symbol) at /home/pkgeval/.julia/packages/TableTraitsUtils/bjNLY/src/collect1.jl:32
   [26] create_columns_from_iterabletable at /home/pkgeval/.julia/packages/TableTraitsUtils/bjNLY/src/collect1.jl:3 [inlined]
   [27] DataTable(::QuerySQLite.SourceCode{SQLite.DB}) at /home/pkgeval/.julia/packages/QueryTables/7F9gO/src/QueryTables.jl:27
   [28] |>(::QuerySQLite.SourceCode{SQLite.DB}, ::Type{T} where T) at ./operators.jl:823
   [29] top-level scope at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:42
   [30] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [31] top-level scope at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:13
  
QuerySQLite: Error During Test at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:48
  Test threw exception
  Expression: ((database.Artist |> #= /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:49 =# @join(database.Album, _.ArtistId, _.ArtistId, {_.ArtistId, __.AlbumId})) |> DataTable) |> length == 347
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{Union{Missing, Int64},1},Array{Any,1},Array{Union{Missing, Int64},1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Array{Union{Missing, Int64},1},Array{Union{Missing, String},1},Array{Union{Missing, String},1},Array{Union{Missing, Int64},1},Array{Any,1},Array{Union{Missing, Int64},1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::SQLite.Query{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Union{Missing, Int64},Union{Missing, String},Union{Missing, String},Union{Missing, Int64},Any,Union{Missing, Int64}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::SQLite.Query{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Union{Missing, Int64},Union{Missing, String},Union{Missing, String},Union{Missing, Int64},Any,Union{Missing, Int64}}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] |>(::SQLite.Query{NamedTuple{(:cid, :name, :type, :notnull, :dflt_value, :pk),Tuple{Union{Missing, Int64},Union{Missing, String},Union{Missing, String},Union{Missing, Int64},Any,Union{Missing, Int64}}}}, ::Type{T} where T) at ./operators.jl:823
   [5] columns(::SQLite.DB, ::String, ::Type{T} where T) at /home/pkgeval/.julia/packages/SQLite/msdQN/src/SQLite.jl:428 (repeats 2 times)
   [6] get_column_names(::SQLite.DB, ::Symbol) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/source.jl:22
   [7] model_row_dispatch(::typeof(getproperty), ::Database{SQLite.DB}, ::Symbol; other::Bool, options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/library.jl:32
   [8] model_row(::Expr; options::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:other,),Tuple{Bool}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:62
   [9] translate_dispatch(::typeof(QueryOperators.join), ::Expr, ::Expr, ::var"#27#54", ::Expr, ::var"#28#55", ::Expr, ::var"#29#56", ::Expr; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:21
   [10] translate_dispatch(::typeof(QueryOperators.join), ::Expr, ::Expr, ::Function, ::Expr, ::Function, ::Expr, ::Function, ::Expr) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/QueryOperators.jl:21
   [11] #translate#8 at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [12] translate at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/translate.jl:74 [inlined]
   [13] text(::QuerySQLite.SourceCode{SQLite.DB}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/realize.jl:110
   [14] getiterator(::QuerySQLite.SourceCode{SQLite.DB}) at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/src/iterate.jl:102
   [15] create_columns_from_iterabletable(::QuerySQLite.SourceCode{SQLite.DB}; sel_cols::Symbol, na_representation::Symbol, errorhandling::Symbol) at /home/pkgeval/.julia/packages/TableTraitsUtils/bjNLY/src/collect1.jl:32
   [16] create_columns_from_iterabletable at /home/pkgeval/.julia/packages/TableTraitsUtils/bjNLY/src/collect1.jl:3 [inlined]
   [17] DataTable(::QuerySQLite.SourceCode{SQLite.DB}) at /home/pkgeval/.julia/packages/QueryTables/7F9gO/src/QueryTables.jl:27
   [18] |>(::QuerySQLite.SourceCode{SQLite.DB}, ::Type{T} where T) at ./operators.jl:823
   [19] top-level scope at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:48
   [20] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [21] top-level scope at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:13
  
Test Summary: | Error  Total
QuerySQLite   |     7      7
ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/QuerySQLite/0ScOm/test/runtests.jl:11
ERROR: Package QuerySQLite errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:53
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1503
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:316
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:303
 [5] #test#68 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [7] #test#67 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [8] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [10] test(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [11] top-level scope at none:13
