Julia Version 1.5.0-DEV.260
Commit a211abcdfa (2020-02-10 22:01 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed ZygoteRules ───────────────── v0.2.0
  Installed Compat ────────────────────── v3.5.0
  Installed ConstructionBase ──────────── v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed DataStructures ────────────── v0.17.9
  Installed MacroTools ────────────────── v0.5.4
  Installed Tables ────────────────────── v1.0.0
  Installed Transducers ───────────────── v0.4.18
  Installed BangBang ──────────────────── v0.3.15
  Installed TableTraits ───────────────── v1.0.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed ArgCheck ──────────────────── v1.1.0
  Installed DataAPI ───────────────────── v1.1.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Setfield ──────────────────── v0.6.0
  Installed Requires ──────────────────── v1.0.1
  Installed InitialValues ─────────────── v0.2.2
   Updating `~/.julia/environments/v1.5/Project.toml`
  [28d57a85] + Transducers v0.4.18
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [dce04be8] + ArgCheck v1.1.0
  [198e06fe] + BangBang v0.3.15
  [34da2185] + Compat v3.5.0
  [187b0558] + ConstructionBase v1.0.0
  [9a962f9c] + DataAPI v1.1.0
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [22cec73e] + InitialValues v0.2.2
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [1914dd2f] + MacroTools v0.5.4
  [bac558e1] + OrderedCollections v1.1.0
  [ae029012] + Requires v1.0.1
  [efcf1570] + Setfield v0.6.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.0
  [28d57a85] + Transducers v0.4.18
  [700de1a5] + ZygoteRules v0.2.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing Transducers
Status `/tmp/jl_CbjiLT/Manifest.toml`
  [4c88cf16] Aqua v0.4.0
  [dce04be8] ArgCheck v1.1.0
  [4c555306] ArrayLayouts v0.1.5
  [198e06fe] BangBang v0.3.15
  [8e7c35d0] BlockArrays v0.11.1
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.5.0
  [187b0558] ConstructionBase v1.0.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.18.4
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [85a47980] Dictionaries v0.2.1
  [ffbed154] DocStringExtensions v0.8.1
  [e30172f5] Documenter v0.24.5
  [1a297f60] FillArrays v0.8.4
  [313cdc1a] Indexing v1.1.0
  [22cec73e] InitialValues v0.2.2
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5078a376] LazyArrays v0.15.0
  [7f8f8fb0] LearnBase v0.2.2
  [30fc2ffe] LossFunctions v0.5.1
  [1914dd2f] MacroTools v0.5.4
  [e1d29d7a] Missings v0.4.3
  [a15396b6] OnlineStats v1.0.3
  [925886fa] OnlineStatsBase v1.0.2
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [06bb1623] PenaltyFunctions v0.1.2
  [dc46b164] PerformanceTestTools v0.1.2
  [2dfb63ee] PooledArrays v0.5.3
  [3cdcf5f2] RecipesBase v0.8.0
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [efcf1570] Setfield v0.6.0
  [a2af1166] SortingAlgorithms v0.3.1
  [03a91e81] SplitApplyCombine v1.0.0
  [90137ffa] StaticArrays v0.12.1
  [2913bbd2] StatsBase v0.32.0
  [09ab397b] StructArrays v0.4.0
  [7522ee7d] SweepOperator v0.3.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.0
  [28d57a85] Transducers v0.4.18
  [9d95f2ec] TypedTables v1.2.0
  [700de1a5] ZygoteRules v0.2.0
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
┌ Info: Testing with:
└   nworkers() = 3
Test Summary: | Pass  Total
test_aqua.jl  |    2      2
Test Summary:  | Pass  Total
test_basics.jl |   10     10
Test Summary:       | Pass  Total
test_blockarrays.jl |    3      3
Test Summary:          | Pass  Total
test_comprehensions.jl |    4      4
copy(_, ::DataFrame): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:27
  Test threw exception
  Expression: copy(Map(identity), src) ==ₜ src
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{DataFrames.DataFrameRow{DataFrames.DataFrame,DataFrames.Index}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrame at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25 [inlined]
   [4] append at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69 [inlined]
   [5] may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
   [6] append!! at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96 [inlined]
   [7] next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377 [inlined]
   [8] next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623 [inlined]
   [9] next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248 [inlined]
   [10] next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 [inlined] (repeats 2 times)
   [11] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
   [12] __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
   [13] #transduce#63 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:356 [inlined]
   [14] transduce at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:353 [inlined]
   [15] transduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::DataFrames.DataFrame; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:343
   [16] transduce at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:342 [inlined]
   [17] append!! at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:573 [inlined]
   [18] copy at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:663 [inlined]
   [19] copy(::Transducers.Map{typeof(identity)}, ::DataFrames.DataFrame) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:664
   [20] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:27 [inlined]
   [21] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [22] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:17 [inlined]
   [23] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [24] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
copy(_, ::DataFrame): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:28
  Test threw exception
  Expression: copy(eduction((identity(x) for x = src))) ==ₜ src
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{DataFrames.DataFrameRow{DataFrames.DataFrame,DataFrames.Index}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrame at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25 [inlined]
   [4] append at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69 [inlined]
   [5] may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
   [6] append!! at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96 [inlined]
   [7] next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377 [inlined]
   [8] next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623 [inlined]
   [9] next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248 [inlined]
   [10] next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 [inlined] (repeats 2 times)
   [11] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
   [12] __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
   [13] #transduce#63 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:356 [inlined]
   [14] transduce at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:353 [inlined]
   [15] transduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::DataFrames.DataFrame; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:343
   [16] transduce at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:342 [inlined]
   [17] append!! at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:573 [inlined]
   [18] copy at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:663 [inlined]
   [19] copy at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:664 [inlined]
   [20] copy(::Transducers.Eduction{Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.push!!)}}},DataFrames.DataFrame}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:673
   [21] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:28 [inlined]
   [22] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [23] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:17 [inlined]
   [24] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [25] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
copy(_, DataFrames.DataFrame, ::StructArray): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:41
  Test threw exception
  Expression: copy(Map(identity), T, src) ==ₜ T(src)
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
   [2] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] append(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
   [5] may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
   [6] append!!(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
   [7] next(::typeof(BangBang.append!!), ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
   [8] next(::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
   [9] next(::Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
   [10] next(::Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
   [11] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
   [12] __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
   [13] #transduce#63 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:356 [inlined]
   [14] transduce at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:353 [inlined]
   [15] #transduce#62 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:343 [inlined]
   [16] transduce at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:342 [inlined]
   [17] append!! at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:573 [inlined]
   [18] copy(::Transducers.Map{typeof(identity)}, ::Type{DataFrames.DataFrame}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:663
   [19] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:41 [inlined]
   [20] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [21] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [22] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [23] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
copy(_, DataFrames.DataFrame, ::StructArray): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:42
  Test threw exception
  Expression: copy(T, eduction((identity(x) for x = src))) ==ₜ T(src)
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
   [2] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] append(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
   [5] may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
   [6] append!!(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
   [7] next(::typeof(BangBang.append!!), ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
   [8] next(::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
   [9] next(::Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
   [10] next(::Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
   [11] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
   [12] __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
   [13] #transduce#63 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:356 [inlined]
   [14] transduce at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:353 [inlined]
   [15] #transduce#62 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:343 [inlined]
   [16] transduce at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:342 [inlined]
   [17] append!! at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:573 [inlined]
   [18] copy at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:663 [inlined]
   [19] copy(::Type{DataFrames.DataFrame}, ::Transducers.Eduction{Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.push!!)}}},StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:668
   [20] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:42 [inlined]
   [21] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [22] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [23] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [24] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
copy(_, DataFrames.DataFrame, ::Table): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:41
  Test threw exception
  Expression: copy(Map(identity), T, src) ==ₜ T(src)
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
   [2] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] append(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
   [5] may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
   [6] append!!(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
   [7] next(::typeof(BangBang.append!!), ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
   [8] next(::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
   [9] next(::Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
   [10] next(::Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
   [11] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
   [12] __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
   [13] #transduce#63 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:356 [inlined]
   [14] transduce at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:353 [inlined]
   [15] #transduce#62 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:343 [inlined]
   [16] transduce at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:342 [inlined]
   [17] append!! at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:573 [inlined]
   [18] copy(::Transducers.Map{typeof(identity)}, ::Type{DataFrames.DataFrame}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:663
   [19] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:41 [inlined]
   [20] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [21] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [22] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [23] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
copy(_, DataFrames.DataFrame, ::Table): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:42
  Test threw exception
  Expression: copy(T, eduction((identity(x) for x = src))) ==ₜ T(src)
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
   [2] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] append(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
   [5] may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
   [6] append!!(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
   [7] next(::typeof(BangBang.append!!), ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
   [8] next(::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
   [9] next(::Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
   [10] next(::Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
   [11] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
   [12] __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
   [13] #transduce#63 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:356 [inlined]
   [14] transduce at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:353 [inlined]
   [15] #transduce#62 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:343 [inlined]
   [16] transduce at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:342 [inlined]
   [17] append!! at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:573 [inlined]
   [18] copy at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:663 [inlined]
   [19] copy(::Type{DataFrames.DataFrame}, ::Transducers.Eduction{Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.push!!)}}},TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:668
   [20] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:42 [inlined]
   [21] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [22] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [23] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [24] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
┌ Warning: `length(df::AbstractDataFrame)` is deprecated, use `size(df, 2)` instead.
│   caller = transduce_assoc(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::DataFrames.DataFrame) at reduce.jl:159
└ @ Transducers ~/.julia/packages/Transducers/FHLiY/src/reduce.jl:159
┌ Warning: `length(df::AbstractDataFrame)` is deprecated, use `size(df, 2)` instead.
│   caller = issmall at reduce.jl:77 [inlined]
└ @ Core ~/.julia/packages/Transducers/FHLiY/src/reduce.jl:77
┌ Warning: `length(df::AbstractDataFrame)` is deprecated, use `size(df, 2)` instead.
│   caller = issmall at reduce.jl:77 [inlined]
└ @ Core ~/.julia/packages/Transducers/FHLiY/src/reduce.jl:77
tcopy(_, DataFrames.DataFrame, ::StructArray): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:41
  Test threw exception
  Expression: copy(Map(identity), T, src) ==ₜ T(src)
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
   [2] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] append(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
   [5] may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
   [6] append!!(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
   [7] next(::typeof(BangBang.append!!), ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
   [8] next(::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
   [9] next(::Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
   [10] next(::Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
   [11] next(::Transducers.Reduction{Transducers.NoComplete,Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:606
   [12] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
   [13] __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
   [14] foldl_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:243 [inlined]
   [15] _reduce(::Transducers.TaskContext, ::Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::Transducers.SizedReducible{StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true},SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true}}},Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:183
   [16] _reduce(::Transducers.TaskContext, ::Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::Transducers.SizedReducible{StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:192
   [17] _transduce_assoc_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:174 [inlined]
   [18] transduce_assoc(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; simd::Val{false}, basesize::Int64) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:160
   [19] transduce_assoc at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:159 [inlined]
   [20] mapreduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; init::BangBang.NoBang.Empty{DataFrames.DataFrame}, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:246
   [21] reduce(::Function, ::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; kwargs::Base.Iterators.Pairs{Symbol,BangBang.NoBang.Empty{DataFrames.DataFrame},Tuple{Symbol},NamedTuple{(:init,),Tuple{BangBang.NoBang.Empty{DataFrames.DataFrame}}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:253
   [22] tcopy(::Transducers.Map{typeof(identity)}, ::Type{T} where T, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:361
   [23] tcopy(::Transducers.Map{typeof(identity)}, ::Type{T} where T, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:361
   [24] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:41 [inlined]
   [25] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [26] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [27] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [28] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
tcopy(_, DataFrames.DataFrame, ::StructArray): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:42
  Test threw exception
  Expression: copy(T, eduction((identity(x) for x = src))) ==ₜ T(src)
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
   [2] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] append(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
   [5] may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
   [6] append!!(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
   [7] next(::typeof(BangBang.append!!), ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
   [8] next(::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
   [9] next(::Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
   [10] next(::Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
   [11] next(::Transducers.Reduction{Transducers.NoComplete,Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:606
   [12] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
   [13] __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
   [14] foldl_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:243 [inlined]
   [15] _reduce(::Transducers.TaskContext, ::Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::Transducers.SizedReducible{StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true},SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true}}},Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:183
   [16] _reduce(::Transducers.TaskContext, ::Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::Transducers.SizedReducible{StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:192
   [17] _transduce_assoc_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:174 [inlined]
   [18] transduce_assoc(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; simd::Val{false}, basesize::Int64) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:160
   [19] transduce_assoc at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:159 [inlined]
   [20] mapreduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; init::BangBang.NoBang.Empty{DataFrames.DataFrame}, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:246
   [21] #reduce#96 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:253 [inlined]
   [22] #tcopy#98 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:361 [inlined]
   [23] tcopy at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:361 [inlined]
   [24] #tcopy#100 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:367 [inlined]
   [25] tcopy(::Type{DataFrames.DataFrame}, ::Transducers.Eduction{Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.push!!)}}},StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:366
   [26] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:42 [inlined]
   [27] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [28] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [29] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [30] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
tcopy(_, DataFrames.DataFrame, ::StructArray): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:44
  Test threw exception
  Expression: copy(Map(identity), T, src; basesize = 1) ==ₜ T(src)
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
   [2] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] append(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
   [5] may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
   [6] append!!(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
   [7] next(::typeof(BangBang.append!!), ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
   [8] next(::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
   [9] next(::Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
   [10] next(::Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
   [11] next(::Transducers.Reduction{Transducers.NoComplete,Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:606
   [12] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
   [13] __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
   [14] foldl_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:243 [inlined]
   [15] _reduce(::Transducers.TaskContext, ::Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::Transducers.SizedReducible{StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true},SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true}}},Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:183
   [16] _reduce(::Transducers.TaskContext, ::Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::Transducers.SizedReducible{StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true},SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true}}},Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:192 (repeats 2 times)
   [17] _transduce_assoc_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:174 [inlined]
   [18] transduce_assoc(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; simd::Val{false}, basesize::Int64) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:160
   [19] mapreduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; init::BangBang.NoBang.Empty{DataFrames.DataFrame}, kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:basesize,),Tuple{Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:246
   [20] reduce(::Function, ::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; kwargs::Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:init, :basesize),Tuple{BangBang.NoBang.Empty{DataFrames.DataFrame},Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:253
   [21] tcopy(::Transducers.Map{typeof(identity)}, ::Type{T} where T, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:basesize,),Tuple{Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:361
   [22] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:44 [inlined]
   [23] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [24] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [25] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [26] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
tcopy(_, DataFrames.DataFrame, ::StructArray): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:45
  Test threw exception
  Expression: copy(T, (identity(x) for x = src)) ==ₜ T(src)
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
   [2] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] append(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
   [5] may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
   [6] append!!(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
   [7] next(::typeof(BangBang.append!!), ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
   [8] next(::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
   [9] next(::Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
   [10] next(::Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
   [11] next(::Transducers.Reduction{Transducers.NoComplete,Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:606
   [12] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
   [13] __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
   [14] foldl_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:243 [inlined]
   [15] _reduce(::Transducers.TaskContext, ::Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::Transducers.SizedReducible{StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true},SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true}}},Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:183
   [16] _reduce(::Transducers.TaskContext, ::Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::Transducers.SizedReducible{StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:192
   [17] _transduce_assoc_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:174 [inlined]
   [18] transduce_assoc(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; simd::Val{false}, basesize::Int64) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:160
   [19] transduce_assoc at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:159 [inlined]
   [20] mapreduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; init::BangBang.NoBang.Empty{DataFrames.DataFrame}, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:246
   [21] #reduce#96 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:253 [inlined]
   [22] #tcopy#98 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:361 [inlined]
   [23] tcopy at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:361 [inlined]
   [24] #tcopy#100 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:367 [inlined]
   [25] tcopy(::Type{DataFrames.DataFrame}, ::Base.Generator{StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64},typeof(identity)}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:366
   [26] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:45 [inlined]
   [27] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [28] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [29] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [30] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
tcopy(_, DataFrames.DataFrame, ::StructArray): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:46
  Test threw exception
  Expression: copy(T, (identity(x) for x = src); basesize = 1) ==ₜ T(src)
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
   [2] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] append(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
   [5] may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
   [6] append!!(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
   [7] next(::typeof(BangBang.append!!), ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
   [8] next(::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
   [9] next(::Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
   [10] next(::Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
   [11] next(::Transducers.Reduction{Transducers.NoComplete,Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:606
   [12] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
   [13] __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
   [14] foldl_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:243 [inlined]
   [15] _reduce(::Transducers.TaskContext, ::Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::Transducers.SizedReducible{StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true},SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true}}},Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:183
   [16] _reduce(::Transducers.TaskContext, ::Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::Transducers.SizedReducible{StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true},SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true}}},Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:192 (repeats 2 times)
   [17] _transduce_assoc_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:174 [inlined]
   [18] transduce_assoc(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; simd::Val{false}, basesize::Int64) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:160
   [19] mapreduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; init::BangBang.NoBang.Empty{DataFrames.DataFrame}, kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:basesize,),Tuple{Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:246
   [20] #reduce#96 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:253 [inlined]
   [21] #tcopy#98 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:361 [inlined]
   [22] #tcopy#100 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:367 [inlined]
   [23] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:46 [inlined]
   [24] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [25] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [26] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [27] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
tcopy(_, DataFrames.DataFrame, ::Table): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:41
  Test threw exception
  Expression: copy(Map(identity), T, src) ==ₜ T(src)
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
   [2] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] append(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
   [5] may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
   [6] append!!(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
   [7] next(::typeof(BangBang.append!!), ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
   [8] next(::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
   [9] next(::Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
   [10] next(::Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
   [11] next(::Transducers.Reduction{Transducers.NoComplete,Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:606
   [12] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
   [13] __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
   [14] foldl_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:243 [inlined]
   [15] _reduce(::Transducers.TaskContext, ::Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::Transducers.SizedReducible{TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true},SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true}}}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:183
   [16] _reduce(::Transducers.TaskContext, ::Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::Transducers.SizedReducible{TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:192
   [17] _transduce_assoc_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:174 [inlined]
   [18] transduce_assoc(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; simd::Val{false}, basesize::Int64) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:160
   [19] transduce_assoc at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:159 [inlined]
   [20] mapreduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; init::BangBang.NoBang.Empty{DataFrames.DataFrame}, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:246
   [21] reduce(::Function, ::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; kwargs::Base.Iterators.Pairs{Symbol,BangBang.NoBang.Empty{DataFrames.DataFrame},Tuple{Symbol},NamedTuple{(:init,),Tuple{BangBang.NoBang.Empty{DataFrames.DataFrame}}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:253
   [22] tcopy(::Transducers.Map{typeof(identity)}, ::Type{T} where T, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:361
   [23] tcopy(::Transducers.Map{typeof(identity)}, ::Type{T} where T, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:361
   [24] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:41 [inlined]
   [25] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [26] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [27] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [28] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
tcopy(_, DataFrames.DataFrame, ::Table): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:42
  Test threw exception
  Expression: copy(T, eduction((identity(x) for x = src))) ==ₜ T(src)
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
   [2] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] append(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
   [5] may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
   [6] append!!(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
   [7] next(::typeof(BangBang.append!!), ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
   [8] next(::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
   [9] next(::Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
   [10] next(::Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
   [11] next(::Transducers.Reduction{Transducers.NoComplete,Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:606
   [12] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
   [13] __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
   [14] foldl_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:243 [inlined]
   [15] _reduce(::Transducers.TaskContext, ::Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::Transducers.SizedReducible{TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true},SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true}}}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:183
   [16] _reduce(::Transducers.TaskContext, ::Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::Transducers.SizedReducible{TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:192
   [17] _transduce_assoc_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:174 [inlined]
   [18] transduce_assoc(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; simd::Val{false}, basesize::Int64) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:160
   [19] transduce_assoc at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:159 [inlined]
   [20] mapreduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; init::BangBang.NoBang.Empty{DataFrames.DataFrame}, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:246
   [21] #reduce#96 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:253 [inlined]
   [22] #tcopy#98 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:361 [inlined]
   [23] tcopy at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:361 [inlined]
   [24] #tcopy#100 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:367 [inlined]
   [25] tcopy(::Type{DataFrames.DataFrame}, ::Transducers.Eduction{Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.push!!)}}},TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:366
   [26] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:42 [inlined]
   [27] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [28] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [29] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [30] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
tcopy(_, DataFrames.DataFrame, ::Table): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:44
  Test threw exception
  Expression: copy(Map(identity), T, src; basesize = 1) ==ₜ T(src)
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
   [2] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] append(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
   [5] may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
   [6] append!!(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
   [7] next(::typeof(BangBang.append!!), ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
   [8] next(::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
   [9] next(::Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
   [10] next(::Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
   [11] next(::Transducers.Reduction{Transducers.NoComplete,Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:606
   [12] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
   [13] __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
   [14] foldl_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:243 [inlined]
   [15] _reduce(::Transducers.TaskContext, ::Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::Transducers.SizedReducible{TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true},SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true}}}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:183
   [16] _reduce(::Transducers.TaskContext, ::Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::Transducers.SizedReducible{TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true},SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true}}}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:192 (repeats 2 times)
   [17] _transduce_assoc_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:174 [inlined]
   [18] transduce_assoc(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; simd::Val{false}, basesize::Int64) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:160
   [19] mapreduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; init::BangBang.NoBang.Empty{DataFrames.DataFrame}, kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:basesize,),Tuple{Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:246
   [20] reduce(::Function, ::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; kwargs::Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:init, :basesize),Tuple{BangBang.NoBang.Empty{DataFrames.DataFrame},Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:253
   [21] tcopy(::Transducers.Map{typeof(identity)}, ::Type{T} where T, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:basesize,),Tuple{Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:361
   [22] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:44 [inlined]
   [23] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [24] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [25] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [26] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
tcopy(_, DataFrames.DataFrame, ::Table): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:45
  Test threw exception
  Expression: copy(T, (identity(x) for x = src)) ==ₜ T(src)
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
   [2] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] append(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
   [5] may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
   [6] append!!(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
   [7] next(::typeof(BangBang.append!!), ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
   [8] next(::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
   [9] next(::Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
   [10] next(::Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
   [11] next(::Transducers.Reduction{Transducers.NoComplete,Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:606
   [12] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
   [13] __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
   [14] foldl_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:243 [inlined]
   [15] _reduce(::Transducers.TaskContext, ::Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::Transducers.SizedReducible{TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true},SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true}}}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:183
   [16] _reduce(::Transducers.TaskContext, ::Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::Transducers.SizedReducible{TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:192
   [17] _transduce_assoc_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:174 [inlined]
   [18] transduce_assoc(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; simd::Val{false}, basesize::Int64) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:160
   [19] transduce_assoc at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:159 [inlined]
   [20] mapreduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; init::BangBang.NoBang.Empty{DataFrames.DataFrame}, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:246
   [21] #reduce#96 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:253 [inlined]
   [22] #tcopy#98 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:361 [inlined]
   [23] tcopy at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:361 [inlined]
   [24] #tcopy#100 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:367 [inlined]
   [25] tcopy(::Type{DataFrames.DataFrame}, ::Base.Generator{TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}},typeof(identity)}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:366
   [26] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:45 [inlined]
   [27] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [28] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [29] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [30] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
tcopy(_, DataFrames.DataFrame, ::Table): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:46
  Test threw exception
  Expression: copy(T, (identity(x) for x = src); basesize = 1) ==ₜ T(src)
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
   [2] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] append(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
   [5] may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
   [6] append!!(::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
   [7] next(::typeof(BangBang.append!!), ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
   [8] next(::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
   [9] next(::Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::BangBang.NoBang.SingletonVector{NamedTuple{(:a, :b),Tuple{Int64,Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
   [10] next(::Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
   [11] next(::Transducers.Reduction{Transducers.NoComplete,Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::NamedTuple{(:a, :b),Tuple{Int64,Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:606
   [12] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
   [13] __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
   [14] foldl_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:243 [inlined]
   [15] _reduce(::Transducers.TaskContext, ::Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::Transducers.SizedReducible{TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true},SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true}}}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:183
   [16] _reduce(::Transducers.TaskContext, ::Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector}},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::Transducers.SizedReducible{TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true},SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true}}}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:192 (repeats 2 times)
   [17] _transduce_assoc_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:174 [inlined]
   [18] transduce_assoc(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; simd::Val{false}, basesize::Int64) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:160
   [19] mapreduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; init::BangBang.NoBang.Empty{DataFrames.DataFrame}, kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:basesize,),Tuple{Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:246
   [20] #reduce#96 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:253 [inlined]
   [21] #tcopy#98 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:361 [inlined]
   [22] #tcopy#100 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:367 [inlined]
   [23] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:46 [inlined]
   [24] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [25] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [26] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [27] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
┌ Warning: `length(df::AbstractDataFrame)` is deprecated, use `size(df, 2)` instead.
│   caller = dtransduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::DataFrames.DataFrame) at dreduce.jl:58
└ @ Transducers ~/.julia/packages/Transducers/FHLiY/src/dreduce.jl:58
dcopy(_, DataFrames.DataFrame, ::StructArray): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:41
  Test threw exception
  Expression: copy(Map(identity), T, src) ==ₜ T(src)
  On worker 4:
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  #fromcolumns#360 at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
  #DataFrame#361 at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
  DataFrame at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
  append at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
  may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
  append!! at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:606
  macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
  __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
  foldl_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:243 [inlined]
  _reduce at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:183
  _transduce_assoc_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:174
  #103 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:290
  run_work_thunk at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:79
  run_work_thunk at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:88
  #96 at ./task.jl:358
  Stacktrace:
   [1] #remotecall_fetch#143 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:390 [inlined]
   [2] remotecall_fetch(::Function, ::Distributed.Worker, ::Distributed.RRID) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:382
   [3] #remotecall_fetch#146 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:417 [inlined]
   [4] remotecall_fetch at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:417 [inlined]
   [5] call_on_owner at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:490 [inlined]
   [6] fetch(::Distributed.Future) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:529
   [7] iterate at ./generator.jl:47 [inlined]
   [8] _collect(::Array{Distributed.Future,1}, ::Base.Generator{Array{Distributed.Future,1},typeof(fetch)}, ::Base.EltypeUnknown, ::Base.HasShape{1}) at ./array.jl:677
   [9] collect_similar(::Array{Distributed.Future,1}, ::Base.Generator{Array{Distributed.Future,1},typeof(fetch)}) at ./array.jl:606
   [10] map(::Function, ::Array{Distributed.Future,1}) at ./abstractarray.jl:2081
   [11] dtransduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; simd::Val{false}, basesize::Int64, threads_basesize::Int64, pool::Distributed.WorkerPool, _remote_reduce::Function) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:73
   [12] dtransduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:58
   [13] dreduce(::Function, ::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; init::BangBang.NoBang.Empty{DataFrames.DataFrame}, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:42
   [14] dcopy(::Transducers.Map{typeof(identity)}, ::Type{T} where T, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:102
   [15] dcopy(::Transducers.Map{typeof(identity)}, ::Type{T} where T, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:102
   [16] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:41 [inlined]
   [17] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [18] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [19] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [20] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
dcopy(_, DataFrames.DataFrame, ::StructArray): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:42
  Test threw exception
  Expression: copy(T, eduction((identity(x) for x = src))) ==ₜ T(src)
  On worker 3:
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  #fromcolumns#360 at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
  #DataFrame#361 at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
  DataFrame at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
  append at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
  may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
  append!! at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:606
  macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
  __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
  foldl_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:243 [inlined]
  _reduce at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:183
  _transduce_assoc_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:174
  #103 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:290
  run_work_thunk at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:79
  run_work_thunk at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:88
  #96 at ./task.jl:358
  Stacktrace:
   [1] #remotecall_fetch#143 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:390 [inlined]
   [2] remotecall_fetch(::Function, ::Distributed.Worker, ::Distributed.RRID) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:382
   [3] #remotecall_fetch#146 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:417 [inlined]
   [4] remotecall_fetch at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:417 [inlined]
   [5] call_on_owner at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:490 [inlined]
   [6] fetch(::Distributed.Future) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:529
   [7] iterate at ./generator.jl:47 [inlined]
   [8] _collect(::Array{Distributed.Future,1}, ::Base.Generator{Array{Distributed.Future,1},typeof(fetch)}, ::Base.EltypeUnknown, ::Base.HasShape{1}) at ./array.jl:677
   [9] collect_similar(::Array{Distributed.Future,1}, ::Base.Generator{Array{Distributed.Future,1},typeof(fetch)}) at ./array.jl:606
   [10] map(::Function, ::Array{Distributed.Future,1}) at ./abstractarray.jl:2081
   [11] dtransduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; simd::Val{false}, basesize::Int64, threads_basesize::Int64, pool::Distributed.WorkerPool, _remote_reduce::Function) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:73
   [12] dtransduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:58
   [13] dreduce(::Function, ::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; init::BangBang.NoBang.Empty{DataFrames.DataFrame}, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:42
   [14] #dcopy#108 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:102 [inlined]
   [15] dcopy at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:102 [inlined]
   [16] #dcopy#110 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:108 [inlined]
   [17] dcopy(::Type{DataFrames.DataFrame}, ::Transducers.Eduction{Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.push!!)}}},StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:107
   [18] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:42 [inlined]
   [19] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [20] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [21] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [22] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
dcopy(_, DataFrames.DataFrame, ::StructArray): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:44
  Test threw exception
  Expression: copy(Map(identity), T, src; basesize = 1) ==ₜ T(src)
  On worker 2:
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  #fromcolumns#360 at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
  #DataFrame#361 at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
  DataFrame at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
  append at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
  may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
  append!! at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:606
  macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
  __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
  foldl_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:243 [inlined]
  _reduce at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:183
  _transduce_assoc_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:174
  #103 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:290
  run_work_thunk at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:79
  run_work_thunk at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:88
  #96 at ./task.jl:358
  Stacktrace:
   [1] #remotecall_fetch#143 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:390 [inlined]
   [2] remotecall_fetch(::Function, ::Distributed.Worker, ::Distributed.RRID) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:382
   [3] #remotecall_fetch#146 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:417 [inlined]
   [4] remotecall_fetch at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:417 [inlined]
   [5] call_on_owner at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:490 [inlined]
   [6] fetch(::Distributed.Future) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:529
   [7] iterate at ./generator.jl:47 [inlined]
   [8] _collect(::Array{Distributed.Future,1}, ::Base.Generator{Array{Distributed.Future,1},typeof(fetch)}, ::Base.EltypeUnknown, ::Base.HasShape{1}) at ./array.jl:677
   [9] collect_similar(::Array{Distributed.Future,1}, ::Base.Generator{Array{Distributed.Future,1},typeof(fetch)}) at ./array.jl:606
   [10] map(::Function, ::Array{Distributed.Future,1}) at ./abstractarray.jl:2081
   [11] dtransduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; simd::Val{false}, basesize::Int64, threads_basesize::Int64, pool::Distributed.WorkerPool, _remote_reduce::Function) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:73
   [12] dreduce(::Function, ::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; init::BangBang.NoBang.Empty{DataFrames.DataFrame}, kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:basesize,),Tuple{Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:42
   [13] dcopy(::Transducers.Map{typeof(identity)}, ::Type{T} where T, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:basesize,),Tuple{Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:102
   [14] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:44 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [16] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [17] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [18] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
dcopy(_, DataFrames.DataFrame, ::StructArray): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:45
  Test threw exception
  Expression: copy(T, (identity(x) for x = src)) ==ₜ T(src)
  On worker 4:
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  #fromcolumns#360 at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
  #DataFrame#361 at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
  DataFrame at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
  append at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
  may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
  append!! at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:606
  macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
  __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
  foldl_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:243 [inlined]
  _reduce at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:183
  _transduce_assoc_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:174
  #103 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:290
  run_work_thunk at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:79
  run_work_thunk at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:88
  #96 at ./task.jl:358
  Stacktrace:
   [1] #remotecall_fetch#143 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:390 [inlined]
   [2] remotecall_fetch(::Function, ::Distributed.Worker, ::Distributed.RRID) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:382
   [3] #remotecall_fetch#146 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:417 [inlined]
   [4] remotecall_fetch at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:417 [inlined]
   [5] call_on_owner at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:490 [inlined]
   [6] fetch(::Distributed.Future) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:529
   [7] iterate at ./generator.jl:47 [inlined]
   [8] _collect(::Array{Distributed.Future,1}, ::Base.Generator{Array{Distributed.Future,1},typeof(fetch)}, ::Base.EltypeUnknown, ::Base.HasShape{1}) at ./array.jl:677
   [9] collect_similar(::Array{Distributed.Future,1}, ::Base.Generator{Array{Distributed.Future,1},typeof(fetch)}) at ./array.jl:606
   [10] map(::Function, ::Array{Distributed.Future,1}) at ./abstractarray.jl:2081
   [11] dtransduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; simd::Val{false}, basesize::Int64, threads_basesize::Int64, pool::Distributed.WorkerPool, _remote_reduce::Function) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:73
   [12] dtransduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:58
   [13] dreduce(::Function, ::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; init::BangBang.NoBang.Empty{DataFrames.DataFrame}, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:42
   [14] #dcopy#108 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:102 [inlined]
   [15] dcopy at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:102 [inlined]
   [16] #dcopy#110 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:108 [inlined]
   [17] dcopy(::Type{DataFrames.DataFrame}, ::Base.Generator{StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64},typeof(identity)}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:107
   [18] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:45 [inlined]
   [19] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [20] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [21] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [22] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
dcopy(_, DataFrames.DataFrame, ::StructArray): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:46
  Test threw exception
  Expression: copy(T, (identity(x) for x = src); basesize = 1) ==ₜ T(src)
  On worker 3:
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  #fromcolumns#360 at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
  #DataFrame#361 at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
  DataFrame at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
  append at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
  may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
  append!! at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:606
  macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
  __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
  foldl_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:243 [inlined]
  _reduce at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:183
  _transduce_assoc_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:174
  #103 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:290
  run_work_thunk at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:79
  run_work_thunk at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:88
  #96 at ./task.jl:358
  Stacktrace:
   [1] #remotecall_fetch#143 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:390 [inlined]
   [2] remotecall_fetch(::Function, ::Distributed.Worker, ::Distributed.RRID) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:382
   [3] #remotecall_fetch#146 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:417 [inlined]
   [4] remotecall_fetch at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:417 [inlined]
   [5] call_on_owner at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:490 [inlined]
   [6] fetch(::Distributed.Future) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:529
   [7] iterate at ./generator.jl:47 [inlined]
   [8] _collect(::Array{Distributed.Future,1}, ::Base.Generator{Array{Distributed.Future,1},typeof(fetch)}, ::Base.EltypeUnknown, ::Base.HasShape{1}) at ./array.jl:677
   [9] collect_similar(::Array{Distributed.Future,1}, ::Base.Generator{Array{Distributed.Future,1},typeof(fetch)}) at ./array.jl:606
   [10] map(::Function, ::Array{Distributed.Future,1}) at ./abstractarray.jl:2081
   [11] dtransduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; simd::Val{false}, basesize::Int64, threads_basesize::Int64, pool::Distributed.WorkerPool, _remote_reduce::Function) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:73
   [12] dreduce(::Function, ::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::StructArrays.StructArray{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}},Int64}; init::BangBang.NoBang.Empty{DataFrames.DataFrame}, kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:basesize,),Tuple{Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:42
   [13] #dcopy#108 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:102 [inlined]
   [14] #dcopy#110 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:108 [inlined]
   [15] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:46 [inlined]
   [16] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [17] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [18] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [19] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
dcopy(_, DataFrames.DataFrame, ::Table): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:41
  Test threw exception
  Expression: copy(Map(identity), T, src) ==ₜ T(src)
  On worker 4:
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  #fromcolumns#360 at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
  #DataFrame#361 at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
  DataFrame at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
  append at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
  may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
  append!! at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:606
  macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
  __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
  foldl_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:243 [inlined]
  _reduce at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:183
  _transduce_assoc_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:174
  #103 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:290
  run_work_thunk at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:79
  run_work_thunk at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:88
  #96 at ./task.jl:358
  Stacktrace:
   [1] #remotecall_fetch#143 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:390 [inlined]
   [2] remotecall_fetch(::Function, ::Distributed.Worker, ::Distributed.RRID) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:382
   [3] #remotecall_fetch#146 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:417 [inlined]
   [4] remotecall_fetch at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:417 [inlined]
   [5] call_on_owner at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:490 [inlined]
   [6] fetch(::Distributed.Future) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:529
   [7] iterate at ./generator.jl:47 [inlined]
   [8] _collect(::Array{Distributed.Future,1}, ::Base.Generator{Array{Distributed.Future,1},typeof(fetch)}, ::Base.EltypeUnknown, ::Base.HasShape{1}) at ./array.jl:677
   [9] collect_similar(::Array{Distributed.Future,1}, ::Base.Generator{Array{Distributed.Future,1},typeof(fetch)}) at ./array.jl:606
   [10] map(::Function, ::Array{Distributed.Future,1}) at ./abstractarray.jl:2081
   [11] dtransduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; simd::Val{false}, basesize::Int64, threads_basesize::Int64, pool::Distributed.WorkerPool, _remote_reduce::Function) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:73
   [12] dtransduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:58
   [13] dreduce(::Function, ::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; init::BangBang.NoBang.Empty{DataFrames.DataFrame}, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:42
   [14] dcopy(::Transducers.Map{typeof(identity)}, ::Type{T} where T, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:102
   [15] dcopy(::Transducers.Map{typeof(identity)}, ::Type{T} where T, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:102
   [16] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:41 [inlined]
   [17] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [18] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [19] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [20] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
dcopy(_, DataFrames.DataFrame, ::Table): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:42
  Test threw exception
  Expression: copy(T, eduction((identity(x) for x = src))) ==ₜ T(src)
  On worker 3:
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  #fromcolumns#360 at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
  #DataFrame#361 at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
  DataFrame at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
  append at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
  may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
  append!! at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:606
  macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
  __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
  foldl_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:243 [inlined]
  _reduce at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:183
  _transduce_assoc_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:174
  #103 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:290
  run_work_thunk at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:79
  run_work_thunk at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:88
  #96 at ./task.jl:358
  Stacktrace:
   [1] #remotecall_fetch#143 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:390 [inlined]
   [2] remotecall_fetch(::Function, ::Distributed.Worker, ::Distributed.RRID) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:382
   [3] #remotecall_fetch#146 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:417 [inlined]
   [4] remotecall_fetch at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:417 [inlined]
   [5] call_on_owner at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:490 [inlined]
   [6] fetch(::Distributed.Future) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:529
   [7] iterate at ./generator.jl:47 [inlined]
   [8] _collect(::Array{Distributed.Future,1}, ::Base.Generator{Array{Distributed.Future,1},typeof(fetch)}, ::Base.EltypeUnknown, ::Base.HasShape{1}) at ./array.jl:677
   [9] collect_similar(::Array{Distributed.Future,1}, ::Base.Generator{Array{Distributed.Future,1},typeof(fetch)}) at ./array.jl:606
   [10] map(::Function, ::Array{Distributed.Future,1}) at ./abstractarray.jl:2081
   [11] dtransduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; simd::Val{false}, basesize::Int64, threads_basesize::Int64, pool::Distributed.WorkerPool, _remote_reduce::Function) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:73
   [12] dtransduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:58
   [13] dreduce(::Function, ::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; init::BangBang.NoBang.Empty{DataFrames.DataFrame}, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:42
   [14] #dcopy#108 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:102 [inlined]
   [15] dcopy at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:102 [inlined]
   [16] #dcopy#110 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:108 [inlined]
   [17] dcopy(::Type{DataFrames.DataFrame}, ::Transducers.Eduction{Transducers.Reduction{Transducers.Map{typeof(identity)},Transducers.BottomRF{Transducers.Completing{typeof(BangBang.push!!)}}},TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:107
   [18] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:42 [inlined]
   [19] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [20] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [21] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [22] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
dcopy(_, DataFrames.DataFrame, ::Table): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:44
  Test threw exception
  Expression: copy(Map(identity), T, src; basesize = 1) ==ₜ T(src)
  On worker 2:
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  #fromcolumns#360 at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
  #DataFrame#361 at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
  DataFrame at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
  append at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
  may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
  append!! at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:606
  macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
  __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
  foldl_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:243 [inlined]
  _reduce at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:183
  _transduce_assoc_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:174
  #103 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:290
  run_work_thunk at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:79
  run_work_thunk at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:88
  #96 at ./task.jl:358
  Stacktrace:
   [1] #remotecall_fetch#143 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:390 [inlined]
   [2] remotecall_fetch(::Function, ::Distributed.Worker, ::Distributed.RRID) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:382
   [3] #remotecall_fetch#146 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:417 [inlined]
   [4] remotecall_fetch at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:417 [inlined]
   [5] call_on_owner at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:490 [inlined]
   [6] fetch(::Distributed.Future) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:529
   [7] iterate at ./generator.jl:47 [inlined]
   [8] _collect(::Array{Distributed.Future,1}, ::Base.Generator{Array{Distributed.Future,1},typeof(fetch)}, ::Base.EltypeUnknown, ::Base.HasShape{1}) at ./array.jl:677
   [9] collect_similar(::Array{Distributed.Future,1}, ::Base.Generator{Array{Distributed.Future,1},typeof(fetch)}) at ./array.jl:606
   [10] map(::Function, ::Array{Distributed.Future,1}) at ./abstractarray.jl:2081
   [11] dtransduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; simd::Val{false}, basesize::Int64, threads_basesize::Int64, pool::Distributed.WorkerPool, _remote_reduce::Function) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:73
   [12] dreduce(::Function, ::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; init::BangBang.NoBang.Empty{DataFrames.DataFrame}, kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:basesize,),Tuple{Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:42
   [13] dcopy(::Transducers.Map{typeof(identity)}, ::Type{T} where T, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:basesize,),Tuple{Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:102
   [14] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:44 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [16] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [17] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [18] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
dcopy(_, DataFrames.DataFrame, ::Table): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:45
  Test threw exception
  Expression: copy(T, (identity(x) for x = src)) ==ₜ T(src)
  On worker 4:
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  #fromcolumns#360 at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
  #DataFrame#361 at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
  DataFrame at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
  append at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
  may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
  append!! at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:606
  macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
  __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
  foldl_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:243 [inlined]
  _reduce at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:183
  _transduce_assoc_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:174
  #103 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:290
  run_work_thunk at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:79
  run_work_thunk at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:88
  #96 at ./task.jl:358
  Stacktrace:
   [1] #remotecall_fetch#143 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:390 [inlined]
   [2] remotecall_fetch(::Function, ::Distributed.Worker, ::Distributed.RRID) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:382
   [3] #remotecall_fetch#146 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:417 [inlined]
   [4] remotecall_fetch at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:417 [inlined]
   [5] call_on_owner at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:490 [inlined]
   [6] fetch(::Distributed.Future) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:529
   [7] iterate at ./generator.jl:47 [inlined]
   [8] _collect(::Array{Distributed.Future,1}, ::Base.Generator{Array{Distributed.Future,1},typeof(fetch)}, ::Base.EltypeUnknown, ::Base.HasShape{1}) at ./array.jl:677
   [9] collect_similar(::Array{Distributed.Future,1}, ::Base.Generator{Array{Distributed.Future,1},typeof(fetch)}) at ./array.jl:606
   [10] map(::Function, ::Array{Distributed.Future,1}) at ./abstractarray.jl:2081
   [11] dtransduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; simd::Val{false}, basesize::Int64, threads_basesize::Int64, pool::Distributed.WorkerPool, _remote_reduce::Function) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:73
   [12] dtransduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:58
   [13] dreduce(::Function, ::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; init::BangBang.NoBang.Empty{DataFrames.DataFrame}, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:42
   [14] #dcopy#108 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:102 [inlined]
   [15] dcopy at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:102 [inlined]
   [16] #dcopy#110 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:108 [inlined]
   [17] dcopy(::Type{DataFrames.DataFrame}, ::Base.Generator{TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}},typeof(identity)}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:107
   [18] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:45 [inlined]
   [19] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [20] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [21] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [22] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
dcopy(_, DataFrames.DataFrame, ::Table): Error During Test at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:46
  Test threw exception
  Expression: copy(T, (identity(x) for x = src); basesize = 1) ==ₜ T(src)
  On worker 3:
  MethodError: no method matching eachcolumn(::NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  #fromcolumns#360 at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
  #DataFrame#361 at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
  DataFrame at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
  append at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/NoBang/emptycontainers.jl:69
  may at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/core.jl:10 [inlined]
  append!! at /home/pkgeval/.julia/packages/BangBang/RYSy9/src/base.jl:96
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:377
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:623
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:248
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/library.jl:53 (repeats 2 times)
  next at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:606
  macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/core.jl:181 [inlined]
  __foldl__ at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:163 [inlined]
  foldl_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/processes.jl:243 [inlined]
  _reduce at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:183
  _transduce_assoc_nocomplete at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/reduce.jl:174
  #103 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:290
  run_work_thunk at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:79
  run_work_thunk at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/process_messages.jl:88
  #96 at ./task.jl:358
  Stacktrace:
   [1] #remotecall_fetch#143 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:390 [inlined]
   [2] remotecall_fetch(::Function, ::Distributed.Worker, ::Distributed.RRID) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:382
   [3] #remotecall_fetch#146 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:417 [inlined]
   [4] remotecall_fetch at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:417 [inlined]
   [5] call_on_owner at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:490 [inlined]
   [6] fetch(::Distributed.Future) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Distributed/src/remotecall.jl:529
   [7] iterate at ./generator.jl:47 [inlined]
   [8] _collect(::Array{Distributed.Future,1}, ::Base.Generator{Array{Distributed.Future,1},typeof(fetch)}, ::Base.EltypeUnknown, ::Base.HasShape{1}) at ./array.jl:677
   [9] collect_similar(::Array{Distributed.Future,1}, ::Base.Generator{Array{Distributed.Future,1},typeof(fetch)}) at ./array.jl:606
   [10] map(::Function, ::Array{Distributed.Future,1}) at ./abstractarray.jl:2081
   [11] dtransduce(::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::Transducers.Completing{typeof(BangBang.append!!)}, ::BangBang.NoBang.Empty{DataFrames.DataFrame}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; simd::Val{false}, basesize::Int64, threads_basesize::Int64, pool::Distributed.WorkerPool, _remote_reduce::Function) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:73
   [12] dreduce(::Function, ::Transducers.Composition{Transducers.Map{typeof(identity)},Transducers.Map{Type{BangBang.NoBang.SingletonVector}}}, ::TypedTables.Table{NamedTuple{(:a, :b),Tuple{Int64,Int64}},1,NamedTuple{(:a, :b),Tuple{Array{Int64,1},Array{Int64,1}}}}; init::BangBang.NoBang.Empty{DataFrames.DataFrame}, kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:basesize,),Tuple{Int64}}}) at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:42
   [13] #dcopy#108 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:102 [inlined]
   [14] #dcopy#110 at /home/pkgeval/.julia/packages/Transducers/FHLiY/src/dreduce.jl:108 [inlined]
   [15] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:46 [inlined]
   [16] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [17] macro expansion at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:35 [inlined]
   [18] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [19] top-level scope at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/test_copy.jl:0
  
Test Summary:                                         | Pass  Error  Broken  Total
test_copy.jl                                          |  100     26       7    133
  copy [base types]                                   |    4                     4
  copy                                                |   12      6       1     19
    copy(_, ::DataFrame)                              |           2              2
    copy(_, ::StructArray)                            |    2                     2
    copy(_, ::Table)                                  |    2                     2
    copy(_, DataFrames.DataFrame, ::StructArray)      |           2              2
    copy(_, StructArrays.StructArray, ::StructArray)  |    2                     2
    copy(_, TypedTables.Table, ::StructArray)         |    2                     2
    copy(_, DataFrames.DataFrame, ::Table)            |           2              2
    copy(_, StructArrays.StructArray, ::Table)        |    2                     2
    copy(_, TypedTables.Table, ::Table)               |    2                     2
    copy(_, eachrow(df))                              |                   1      1
  tcopy                                               |   30     10       3     43
    tcopy(_, ::DataFrame)                             |                   2      2
    tcopy(_, ::StructArray)                           |    5                     5
    tcopy(_, ::Table)                                 |    5                     5
    tcopy(_, DataFrames.DataFrame, ::StructArray)     |           5              5
    tcopy(_, StructArrays.StructArray, ::StructArray) |    5                     5
    tcopy(_, TypedTables.Table, ::StructArray)        |    5                     5
    tcopy(_, DataFrames.DataFrame, ::Table)           |           5              5
    tcopy(_, StructArrays.StructArray, ::Table)       |    5                     5
    tcopy(_, TypedTables.Table, ::Table)              |    5                     5
    tcopy(_, eachrow(df))                             |                   1      1
  dcopy                                               |   30     10       3     43
    dcopy(_, ::DataFrame)                             |                   2      2
    dcopy(_, ::StructArray)                           |    5                     5
    dcopy(_, ::Table)                                 |    5                     5
    dcopy(_, DataFrames.DataFrame, ::StructArray)     |           5              5
    dcopy(_, StructArrays.StructArray, ::StructArray) |    5                     5
    dcopy(_, TypedTables.Table, ::StructArray)        |    5                     5
    dcopy(_, DataFrames.DataFrame, ::Table)           |           5              5
    dcopy(_, StructArrays.StructArray, ::Table)       |    5                     5
    dcopy(_, TypedTables.Table, ::Table)              |    5                     5
    dcopy(_, eachrow(df))                             |                   1      1
  collect                                             |    4                     4
  tcollect                                            |   10                    10
  dcollect                                            |   10                    10
Test Summary:                                         | Pass  Error  Broken  Total
test_copy.jl                                          |  100     26       7    133
  copy [base types]                                   |    4                     4
  copy                                                |   12      6       1     19
    copy(_, ::DataFrame)                              |           2              2
    copy(_, ::StructArray)                            |    2                     2
    copy(_, ::Table)                                  |    2                     2
    copy(_, DataFrames.DataFrame, ::StructArray)      |           2              2
    copy(_, StructArrays.StructArray, ::StructArray)  |    2                     2
    copy(_, TypedTables.Table, ::StructArray)         |    2                     2
    copy(_, DataFrames.DataFrame, ::Table)            |           2              2
    copy(_, StructArrays.StructArray, ::Table)        |    2                     2
    copy(_, TypedTables.Table, ::Table)               |    2                     2
    copy(_, eachrow(df))                              |                   1      1
  tcopy                                               |   30     10       3     43
    tcopy(_, ::DataFrame)                             |                   2      2
    tcopy(_, ::StructArray)                           |    5                     5
    tcopy(_, ::Table)                                 |    5                     5
    tcopy(_, DataFrames.DataFrame, ::StructArray)     |           5              5
    tcopy(_, StructArrays.StructArray, ::StructArray) |    5                     5
    tcopy(_, TypedTables.Table, ::StructArray)        |    5                     5
    tcopy(_, DataFrames.DataFrame, ::Table)           |           5              5
    tcopy(_, StructArrays.StructArray, ::Table)       |    5                     5
    tcopy(_, TypedTables.Table, ::Table)              |    5                     5
    tcopy(_, eachrow(df))                             |                   1      1
  dcopy                                               |   30     10       3     43
    dcopy(_, ::DataFrame)                             |                   2      2
    dcopy(_, ::StructArray)                           |    5                     5
    dcopy(_, ::Table)                                 |    5                     5
    dcopy(_, DataFrames.DataFrame, ::StructArray)     |           5              5
    dcopy(_, StructArrays.StructArray, ::StructArray) |    5                     5
    dcopy(_, TypedTables.Table, ::StructArray)        |    5                     5
    dcopy(_, DataFrames.DataFrame, ::Table)           |           5              5
    dcopy(_, StructArrays.StructArray, ::Table)       |    5                     5
    dcopy(_, TypedTables.Table, ::Table)              |    5                     5
    dcopy(_, eachrow(df))                             |                   1      1
  collect                                             |    4                     4
  tcollect                                            |   10                    10
  dcollect                                            |   10                    10
ERROR: LoadError: Some tests did not pass: 100 passed, 0 failed, 26 errored, 7 broken.
in expression starting at /home/pkgeval/.julia/packages/Transducers/FHLiY/test/runtests.jl:10
caused by [exception 1]
Some tests did not pass: 100 passed, 0 failed, 26 errored, 7 broken.
ERROR: Package Transducers errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:53
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1503
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:316
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:303
 [5] #test#68 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [7] #test#67 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [8] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [10] test(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [11] top-level scope at none:13
