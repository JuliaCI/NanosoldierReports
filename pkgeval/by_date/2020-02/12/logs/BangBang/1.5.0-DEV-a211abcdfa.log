Julia Version 1.5.0-DEV.260
Commit a211abcdfa (2020-02-10 22:01 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed ZygoteRules ───────────────── v0.2.0
  Installed ConstructionBase ──────────── v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed Compat ────────────────────── v3.5.0
  Installed MacroTools ────────────────── v0.5.4
  Installed Tables ────────────────────── v1.0.0
  Installed DataStructures ────────────── v0.17.9
  Installed BangBang ──────────────────── v0.3.15
  Installed TableTraits ───────────────── v1.0.0
  Installed Setfield ──────────────────── v0.6.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Requires ──────────────────── v1.0.1
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed DataAPI ───────────────────── v1.1.0
  Installed InitialValues ─────────────── v0.2.2
   Updating `~/.julia/environments/v1.5/Project.toml`
  [198e06fe] + BangBang v0.3.15
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [198e06fe] + BangBang v0.3.15
  [34da2185] + Compat v3.5.0
  [187b0558] + ConstructionBase v1.0.0
  [9a962f9c] + DataAPI v1.1.0
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [22cec73e] + InitialValues v0.2.2
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [1914dd2f] + MacroTools v0.5.4
  [bac558e1] + OrderedCollections v1.1.0
  [ae029012] + Requires v1.0.1
  [efcf1570] + Setfield v0.6.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.0
  [700de1a5] + ZygoteRules v0.2.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing BangBang
#=#=#                                                                         #############################                                             40.9%######################################################################## 100.0%
#=#=#                                                                         ##############################################################            87.5%######################################################################## 100.0%
#=#=#                                                                         ##############################                                            42.5%######################################################################## 100.0%
Status `/tmp/jl_vXL1m4/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [4c88cf16] Aqua v0.4.0
  [198e06fe] BangBang v0.3.15
  [b99e7846] BinaryProvider v0.5.8
  [324d7699] CategoricalArrays v0.7.7
  [bbf7d656] CommonSubexpressions v0.2.0
  [34da2185] Compat v3.5.0
  [187b0558] ConstructionBase v1.0.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.18.4
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [85a47980] Dictionaries v0.2.1
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.0
  [ffbed154] DocStringExtensions v0.8.1
  [e30172f5] Documenter v0.24.5
  [7a1cc6ca] FFTW v1.2.0
  [f5851436] FFTW_jll v3.3.9+3
  [1a297f60] FillArrays v0.8.4
  [f6369f11] ForwardDiff v0.10.9
  [7869d1d1] IRTools v0.3.1
  [313cdc1a] Indexing v1.1.0
  [22cec73e] InitialValues v0.2.2
  [1d5cc7b8] IntelOpenMP_jll v2018.0.3+0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [856f044c] MKL_jll v2019.0.117+2
  [1914dd2f] MacroTools v0.5.4
  [e1d29d7a] Missings v0.4.3
  [872c559c] NNlib v0.6.4
  [77ba4419] NaNMath v0.3.3
  [efe28fd5] OpenSpecFun_jll v0.5.3+1
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [dc46b164] PerformanceTestTools v0.1.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [efcf1570] Setfield v0.6.0
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.9.0
  [03a91e81] SplitApplyCombine v1.0.0
  [90137ffa] StaticArrays v0.12.1
  [2913bbd2] StatsBase v0.32.0
  [09ab397b] StructArrays v0.4.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.0
  [9d95f2ec] TypedTables v1.2.0
  [e88e6eb3] Zygote v0.4.7
  [700de1a5] ZygoteRules v0.2.0
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
test_add.jl   |   11     11
Test Summary:  | Pass  Total
test_append.jl |   14     14
Skipping Base.Filesystem.JL_O_RANDOM
Skipping Base.Filesystem.JL_O_SEQUENTIAL
Skipping Base.Filesystem.JL_O_SHORT_LIVED
Skipping Base.Filesystem.JL_O_TEMPORARY
Skipping Base.active_repl
Skipping Base.active_repl_backend
Test Summary: | Pass  Total
test_aqua.jl  |    3      3
Test Summary: | Pass  Total
test_core.jl  |    5      5
column: Array{Int64,1}; row: NamedTuple{(:a,),Tuple{Int64}}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:10
  Got exception outside of a @test
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Int64,1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Int64,1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{Int64}},1}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:45
   [3] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{Int64}},1}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:41
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:29 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:10 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:10
   [9] include(::Module, ::String) at ./Base.jl:379
   [10] include(::String) at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/runtests.jl:1
   [11] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/runtests.jl:17
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188
   [13] include(::String) at ./client.jl:439
   [14] top-level scope at none:6
   [15] eval(::Module, ::Any) at ./boot.jl:331
   [16] exec_options(::Base.JLOptions) at ./client.jl:264
   [17] _start() at ./client.jl:484
  
column: Array{Int64,1}; row: Dict{Symbol,Int64}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:10
  Got exception outside of a @test
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Int64,1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Int64,1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{Int64}},1}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:45
   [3] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{Int64}},1}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:41
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:29 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:10 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:10
   [9] include(::Module, ::String) at ./Base.jl:379
   [10] include(::String) at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/runtests.jl:1
   [11] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/runtests.jl:17
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188
   [13] include(::String) at ./client.jl:439
   [14] top-level scope at none:6
   [15] eval(::Module, ::Any) at ./boot.jl:331
   [16] exec_options(::Base.JLOptions) at ./client.jl:264
   [17] _start() at ./client.jl:484
  
column: Array{Float64,1}; row: NamedTuple{(:a,),Tuple{Int64}}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:10
  Got exception outside of a @test
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Int64,1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Int64,1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{Int64}},1}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:45
   [3] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{Int64}},1}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:41
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:29 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:10 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:10
   [9] include(::Module, ::String) at ./Base.jl:379
   [10] include(::String) at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/runtests.jl:1
   [11] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/runtests.jl:17
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188
   [13] include(::String) at ./client.jl:439
   [14] top-level scope at none:6
   [15] eval(::Module, ::Any) at ./boot.jl:331
   [16] exec_options(::Base.JLOptions) at ./client.jl:264
   [17] _start() at ./client.jl:484
  
column: Array{Float64,1}; row: Dict{Symbol,Int64}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:10
  Got exception outside of a @test
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Int64,1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Int64,1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{Int64}},1}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:45
   [3] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{Int64}},1}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:41
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:29 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:10 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:10
   [9] include(::Module, ::String) at ./Base.jl:379
   [10] include(::String) at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/runtests.jl:1
   [11] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/runtests.jl:17
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188
   [13] include(::String) at ./client.jl:439
   [14] top-level scope at none:6
   [15] eval(::Module, ::Any) at ./boot.jl:331
   [16] exec_options(::Base.JLOptions) at ./client.jl:264
   [17] _start() at ./client.jl:484
  
column: Array{Int64,1}; row: NamedTuple{(:a,),Tuple{Float64}}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:10
  Got exception outside of a @test
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Float64,1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Float64,1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{Float64}},1}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:45
   [3] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{Float64}},1}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:41
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:29 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:10 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:10
   [9] include(::Module, ::String) at ./Base.jl:379
   [10] include(::String) at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/runtests.jl:1
   [11] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/runtests.jl:17
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188
   [13] include(::String) at ./client.jl:439
   [14] top-level scope at none:6
   [15] eval(::Module, ::Any) at ./boot.jl:331
   [16] exec_options(::Base.JLOptions) at ./client.jl:264
   [17] _start() at ./client.jl:484
  
column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; row: NamedTuple{(:a,),Tuple{String}}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:10
  Got exception outside of a @test
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{String,1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{String,1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{String}},1}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:45
   [3] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{String}},1}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:41
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:29 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:10 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:10
   [9] include(::Module, ::String) at ./Base.jl:379
   [10] include(::String) at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/runtests.jl:1
   [11] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/runtests.jl:17
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188
   [13] include(::String) at ./client.jl:439
   [14] top-level scope at none:6
   [15] eval(::Module, ::Any) at ./boot.jl:331
   [16] exec_options(::Base.JLOptions) at ./client.jl:264
   [17] _start() at ./client.jl:484
  
column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; row: NamedTuple{(:a,),Tuple{String}}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:10
  Got exception outside of a @test
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{String,1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{String,1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{String}},1}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:45
   [3] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{String}},1}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:41
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:29 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:10 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:10
   [9] include(::Module, ::String) at ./Base.jl:379
   [10] include(::String) at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/runtests.jl:1
   [11] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/runtests.jl:17
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188
   [13] include(::String) at ./client.jl:439
   [14] top-level scope at none:6
   [15] eval(::Module, ::Any) at ./boot.jl:331
   [16] exec_options(::Base.JLOptions) at ./client.jl:264
   [17] _start() at ./client.jl:484
  
column: Array{Int64,1}; row: Tables.IteratorRow{NamedTuple{(:a,),Tuple{Int64}}}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:37
  Got exception outside of a @test
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Int64,1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Int64,1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{Int64}},1}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:45
   [3] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{Int64}},1}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:41
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:42 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:37 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:37
   [9] include(::Module, ::String) at ./Base.jl:379
   [10] include(::String) at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/runtests.jl:1
   [11] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/runtests.jl:17
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188
   [13] include(::String) at ./client.jl:439
   [14] top-level scope at none:6
   [15] eval(::Module, ::Any) at ./boot.jl:331
   [16] exec_options(::Base.JLOptions) at ./client.jl:264
   [17] _start() at ./client.jl:484
  
column: Array{Float64,1}; row: Tables.IteratorRow{NamedTuple{(:a,),Tuple{Int64}}}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:37
  Got exception outside of a @test
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Int64,1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Int64,1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{Int64}},1}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:45
   [3] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{Int64}},1}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:41
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:42 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:37 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:37
   [9] include(::Module, ::String) at ./Base.jl:379
   [10] include(::String) at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/runtests.jl:1
   [11] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/runtests.jl:17
   [12] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188
   [13] include(::String) at ./client.jl:439
   [14] top-level scope at none:6
   [15] eval(::Module, ::Any) at ./boot.jl:331
   [16] exec_options(::Base.JLOptions) at ./client.jl:264
   [17] _start() at ./client.jl:484
  
column: Array{Int64,1}; source: Tuple{NamedTuple{(:a,),Tuple{Int64}}}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75
  Test threw exception
  Expression: append!!(copy(df), source) == vcat(df, DataFrame(source))
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Int64,1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Int64,1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::Tuple{NamedTuple{(:a,),Tuple{Int64}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::Tuple{NamedTuple{(:a,),Tuple{Int64}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48
  
column: Array{Int64,1}; source: Array{NamedTuple{(:a,),Tuple{Int64}},1}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75
  Test threw exception
  Expression: append!!(copy(df), source) == vcat(df, DataFrame(source))
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Int64,1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Int64,1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{Int64}},1}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:45
   [3] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{Int64}},1}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:41
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48
  
column: Array{Int64,1}; source: NamedTuple{(:a,),Tuple{Array{Int64,1}}}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75
  Test threw exception
  Expression: append!!(copy(df), source) == vcat(df, DataFrame(source))
  MethodError: no method matching eachcolumn(::NamedTuple{(:a,),Tuple{Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::NamedTuple{(:a,),Tuple{Array{Int64,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
   [2] DataFrames.DataFrame(::NamedTuple{(:a,),Tuple{Array{Int64,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::NamedTuple{(:a,),Tuple{Array{Int64,1}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48
  
column: Array{Float64,1}; source: Tuple{NamedTuple{(:a,),Tuple{Int64}}}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75
  Test threw exception
  Expression: append!!(copy(df), source) == vcat(df, DataFrame(source))
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Int64,1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Int64,1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::Tuple{NamedTuple{(:a,),Tuple{Int64}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::Tuple{NamedTuple{(:a,),Tuple{Int64}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48
  
column: Array{Float64,1}; source: Array{NamedTuple{(:a,),Tuple{Int64}},1}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75
  Test threw exception
  Expression: append!!(copy(df), source) == vcat(df, DataFrame(source))
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Int64,1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Int64,1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{Int64}},1}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:45
   [3] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{Int64}},1}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:41
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48
  
column: Array{Float64,1}; source: NamedTuple{(:a,),Tuple{Array{Int64,1}}}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75
  Test threw exception
  Expression: append!!(copy(df), source) == vcat(df, DataFrame(source))
  MethodError: no method matching eachcolumn(::NamedTuple{(:a,),Tuple{Array{Int64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::NamedTuple{(:a,),Tuple{Array{Int64,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
   [2] DataFrames.DataFrame(::NamedTuple{(:a,),Tuple{Array{Int64,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::NamedTuple{(:a,),Tuple{Array{Int64,1}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48
  
column: Array{Int64,1}; source: Tuple{NamedTuple{(:a,),Tuple{Float64}}}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75
  Test threw exception
  Expression: append!!(copy(df), source) == vcat(df, DataFrame(source))
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Float64,1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Float64,1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::Tuple{NamedTuple{(:a,),Tuple{Float64}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::Tuple{NamedTuple{(:a,),Tuple{Float64}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48
  
column: Array{Int64,1}; source: Array{NamedTuple{(:a,),Tuple{Float64}},1}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75
  Test threw exception
  Expression: append!!(copy(df), source) == vcat(df, DataFrame(source))
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Float64,1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{Float64,1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{Float64}},1}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:45
   [3] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{Float64}},1}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:41
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48
  
column: Array{Int64,1}; source: NamedTuple{(:a,),Tuple{Array{Float64,1}}}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75
  Test threw exception
  Expression: append!!(copy(df), source) == vcat(df, DataFrame(source))
  MethodError: no method matching eachcolumn(::NamedTuple{(:a,),Tuple{Array{Float64,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::NamedTuple{(:a,),Tuple{Array{Float64,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
   [2] DataFrames.DataFrame(::NamedTuple{(:a,),Tuple{Array{Float64,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::NamedTuple{(:a,),Tuple{Array{Float64,1}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48
  
column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; source: Tuple{NamedTuple{(:a,),Tuple{String}}}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75
  Test threw exception
  Expression: append!!(copy(df), source) == vcat(df, DataFrame(source))
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{String,1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{String,1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::Tuple{NamedTuple{(:a,),Tuple{String}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::Tuple{NamedTuple{(:a,),Tuple{String}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48
  
column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; source: Array{NamedTuple{(:a,),Tuple{String}},1}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75
  Test threw exception
  Expression: append!!(copy(df), source) == vcat(df, DataFrame(source))
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{String,1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{String,1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{String}},1}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:45
   [3] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{String}},1}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:41
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48
  
column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; source: NamedTuple{(:a,),Tuple{Array{String,1}}}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75
  Test threw exception
  Expression: append!!(copy(df), source) == vcat(df, DataFrame(source))
  MethodError: no method matching eachcolumn(::NamedTuple{(:a,),Tuple{Array{String,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::NamedTuple{(:a,),Tuple{Array{String,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
   [2] DataFrames.DataFrame(::NamedTuple{(:a,),Tuple{Array{String,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::NamedTuple{(:a,),Tuple{Array{String,1}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48
  
column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; source: Tuple{NamedTuple{(:a,),Tuple{String}}}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75
  Test threw exception
  Expression: append!!(copy(df), source) == vcat(df, DataFrame(source))
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{String,1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{String,1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::Tuple{NamedTuple{(:a,),Tuple{String}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::Tuple{NamedTuple{(:a,),Tuple{String}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48
  
column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; source: Array{NamedTuple{(:a,),Tuple{String}},1}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75
  Test threw exception
  Expression: append!!(copy(df), source) == vcat(df, DataFrame(source))
  MethodError: no method matching eachcolumn(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{String,1}}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::Tables.CopiedColumns{NamedTuple{(:a,),Tuple{Array{String,1}}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:15
   [2] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{String}},1}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:45
   [3] DataFrames.DataFrame(::Array{NamedTuple{(:a,),Tuple{String}},1}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:41
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48
  
column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; source: NamedTuple{(:a,),Tuple{Array{String,1}}}: Error During Test at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75
  Test threw exception
  Expression: append!!(copy(df), source) == vcat(df, DataFrame(source))
  MethodError: no method matching eachcolumn(::NamedTuple{(:a,),Tuple{Array{String,1}}})
  Closest candidates are:
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,nothing}, !Matched::Any) where names at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:109
    eachcolumn(!Matched::Union{Function, Type}, !Matched::Tables.Schema{names,types}, !Matched::Any) where {names, types} at /home/pkgeval/.julia/packages/Tables/erUMm/src/utils.jl:66
  Stacktrace:
   [1] fromcolumns(::NamedTuple{(:a,),Tuple{Array{String,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:19
   [2] DataFrames.DataFrame(::NamedTuple{(:a,),Tuple{Array{String,1}}}; copycols::Bool) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:34
   [3] DataFrames.DataFrame(::NamedTuple{(:a,),Tuple{Array{String,1}}}) at /home/pkgeval/.julia/packages/DataFrames/0Em9Q/src/other/tables.jl:25
   [4] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:75 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1188 [inlined]
   [6] macro expansion at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/test_dataframes.jl:48
  
Test Summary:                                                                                                                                                                | Pass  Error  Total
test_dataframes.jl                                                                                                                                                           |   11     24     35
  push!!                                                                                                                                                                     |    8      7     15
    column: Array{Int64,1}; row: NamedTuple{(:a,),Tuple{Int64}}                                                                                                              |           1      1
    column: Array{Int64,1}; row: Dict{Symbol,Int64}                                                                                                                          |           1      1
    column: Array{Int64,1}; row: Array{Int64,1}                                                                                                                              |    2             2
    column: Array{Int64,1}; row: Tuple{Int64}                                                                                                                                |    2             2
    column: Array{Float64,1}; row: NamedTuple{(:a,),Tuple{Int64}}                                                                                                            |           1      1
    column: Array{Float64,1}; row: Dict{Symbol,Int64}                                                                                                                        |           1      1
    column: Array{Float64,1}; row: Array{Int64,1}                                                                                                                            |    2             2
    column: Array{Float64,1}; row: Tuple{Int64}                                                                                                                              |    2             2
    column: Array{Int64,1}; row: NamedTuple{(:a,),Tuple{Float64}}                                                                                                            |           1      1
    column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; row: NamedTuple{(:a,),Tuple{String}}             |           1      1
    column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; row: NamedTuple{(:a,),Tuple{String}}             |           1      1
  push!!(::DataFrame, ::IteratorRow)                                                                                                                                         |           2      2
    column: Array{Int64,1}; row: Tables.IteratorRow{NamedTuple{(:a,),Tuple{Int64}}}                                                                                          |           1      1
    column: Array{Float64,1}; row: Tables.IteratorRow{NamedTuple{(:a,),Tuple{Int64}}}                                                                                        |           1      1
  append!!                                                                                                                                                                   |    3     15     18
    column: Array{Int64,1}; source: Tuple{NamedTuple{(:a,),Tuple{Int64}}}                                                                                                    |           1      1
    column: Array{Int64,1}; source: Array{NamedTuple{(:a,),Tuple{Int64}},1}                                                                                                  |           1      1
    column: Array{Int64,1}; source: NamedTuple{(:a,),Tuple{Array{Int64,1}}}                                                                                                  |           1      1
    column: Array{Int64,1}; source: DataFrames.DataFrame                                                                                                                     |    1             1
    column: Array{Float64,1}; source: Tuple{NamedTuple{(:a,),Tuple{Int64}}}                                                                                                  |           1      1
    column: Array{Float64,1}; source: Array{NamedTuple{(:a,),Tuple{Int64}},1}                                                                                                |           1      1
    column: Array{Float64,1}; source: NamedTuple{(:a,),Tuple{Array{Int64,1}}}                                                                                                |           1      1
    column: Array{Float64,1}; source: DataFrames.DataFrame                                                                                                                   |    1             1
    column: Array{Int64,1}; source: Tuple{NamedTuple{(:a,),Tuple{Float64}}}                                                                                                  |           1      1
    column: Array{Int64,1}; source: Array{NamedTuple{(:a,),Tuple{Float64}},1}                                                                                                |           1      1
    column: Array{Int64,1}; source: NamedTuple{(:a,),Tuple{Array{Float64,1}}}                                                                                                |           1      1
    column: Array{Int64,1}; source: DataFrames.DataFrame                                                                                                                     |    1             1
    column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; source: Tuple{NamedTuple{(:a,),Tuple{String}}}   |           1      1
    column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; source: Array{NamedTuple{(:a,),Tuple{String}},1} |           1      1
    column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; source: NamedTuple{(:a,),Tuple{Array{String,1}}} |           1      1
    column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; source: Tuple{NamedTuple{(:a,),Tuple{String}}}   |           1      1
    column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; source: Array{NamedTuple{(:a,),Tuple{String}},1} |           1      1
    column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; source: NamedTuple{(:a,),Tuple{Array{String,1}}} |           1      1
Test Summary:                                                                                                                                                                | Pass  Error  Total
test_dataframes.jl                                                                                                                                                           |   11     24     35
  push!!                                                                                                                                                                     |    8      7     15
    column: Array{Int64,1}; row: NamedTuple{(:a,),Tuple{Int64}}                                                                                                              |           1      1
    column: Array{Int64,1}; row: Dict{Symbol,Int64}                                                                                                                          |           1      1
    column: Array{Int64,1}; row: Array{Int64,1}                                                                                                                              |    2             2
    column: Array{Int64,1}; row: Tuple{Int64}                                                                                                                                |    2             2
    column: Array{Float64,1}; row: NamedTuple{(:a,),Tuple{Int64}}                                                                                                            |           1      1
    column: Array{Float64,1}; row: Dict{Symbol,Int64}                                                                                                                        |           1      1
    column: Array{Float64,1}; row: Array{Int64,1}                                                                                                                            |    2             2
    column: Array{Float64,1}; row: Tuple{Int64}                                                                                                                              |    2             2
    column: Array{Int64,1}; row: NamedTuple{(:a,),Tuple{Float64}}                                                                                                            |           1      1
    column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; row: NamedTuple{(:a,),Tuple{String}}             |           1      1
    column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; row: NamedTuple{(:a,),Tuple{String}}             |           1      1
  push!!(::DataFrame, ::IteratorRow)                                                                                                                                         |           2      2
    column: Array{Int64,1}; row: Tables.IteratorRow{NamedTuple{(:a,),Tuple{Int64}}}                                                                                          |           1      1
    column: Array{Float64,1}; row: Tables.IteratorRow{NamedTuple{(:a,),Tuple{Int64}}}                                                                                        |           1      1
  append!!                                                                                                                                                                   |    3     15     18
    column: Array{Int64,1}; source: Tuple{NamedTuple{(:a,),Tuple{Int64}}}                                                                                                    |           1      1
    column: Array{Int64,1}; source: Array{NamedTuple{(:a,),Tuple{Int64}},1}                                                                                                  |           1      1
    column: Array{Int64,1}; source: NamedTuple{(:a,),Tuple{Array{Int64,1}}}                                                                                                  |           1      1
    column: Array{Int64,1}; source: DataFrames.DataFrame                                                                                                                     |    1             1
    column: Array{Float64,1}; source: Tuple{NamedTuple{(:a,),Tuple{Int64}}}                                                                                                  |           1      1
    column: Array{Float64,1}; source: Array{NamedTuple{(:a,),Tuple{Int64}},1}                                                                                                |           1      1
    column: Array{Float64,1}; source: NamedTuple{(:a,),Tuple{Array{Int64,1}}}                                                                                                |           1      1
    column: Array{Float64,1}; source: DataFrames.DataFrame                                                                                                                   |    1             1
    column: Array{Int64,1}; source: Tuple{NamedTuple{(:a,),Tuple{Float64}}}                                                                                                  |           1      1
    column: Array{Int64,1}; source: Array{NamedTuple{(:a,),Tuple{Float64}},1}                                                                                                |           1      1
    column: Array{Int64,1}; source: NamedTuple{(:a,),Tuple{Array{Float64,1}}}                                                                                                |           1      1
    column: Array{Int64,1}; source: DataFrames.DataFrame                                                                                                                     |    1             1
    column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; source: Tuple{NamedTuple{(:a,),Tuple{String}}}   |           1      1
    column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; source: Array{NamedTuple{(:a,),Tuple{String}},1} |           1      1
    column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; source: NamedTuple{(:a,),Tuple{Array{String,1}}} |           1      1
    column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; source: Tuple{NamedTuple{(:a,),Tuple{String}}}   |           1      1
    column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; source: Array{NamedTuple{(:a,),Tuple{String}},1} |           1      1
    column: CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}; source: NamedTuple{(:a,),Tuple{Array{String,1}}} |           1      1
ERROR: LoadError: Some tests did not pass: 11 passed, 0 failed, 24 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/BangBang/RYSy9/test/runtests.jl:4
caused by [exception 1]
Some tests did not pass: 11 passed, 0 failed, 24 errored, 0 broken.
ERROR: Package BangBang errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:53
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1503
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:316
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:303
 [5] #test#68 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [7] #test#67 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [8] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [10] test(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [11] top-level scope at none:13
