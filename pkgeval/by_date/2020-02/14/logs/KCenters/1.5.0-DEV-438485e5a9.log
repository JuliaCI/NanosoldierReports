Julia Version 1.5.0-DEV.271
Commit 438485e5a9 (2020-02-14 18:24 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed PooledArrays ──────────────── v0.5.3
  Installed InvertedIndices ───────────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed KCenters ──────────────────── v0.2.1
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed MLDataUtils ───────────────── v0.5.0
  Installed DataFrames ────────────────── v0.20.2
  Installed Tables ────────────────────── v1.0.1
  Installed Missings ──────────────────── v0.4.3
  Installed Reexport ──────────────────── v0.2.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Parsers ───────────────────── v0.3.11
  Installed DataAPI ───────────────────── v1.1.0
  Installed MLDataPattern ─────────────── v0.5.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataValueInterfaces ───────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed Compat ────────────────────── v3.5.0
  Installed TableTraits ───────────────── v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed DataStructures ────────────── v0.17.9
  Installed StatsBase ─────────────────── v0.32.0
  Installed JSON ──────────────────────── v0.21.0
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.1
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.5.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.1
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.1
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_y3lped/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.5.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.1
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.1
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9326678744951884
[ Info: 0.8307796732584636
[ Info: 0.5546240802109241
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33120006568729876
mean(cdnet.distances) = 0.39873354362944763
mean(crand.distances) = 0.3329408913602432
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.224609375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.224609375,"f1":null,"seconds":4.015862941741943e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":6.8359375,"distances_sum":666.0661362713653}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.21875,"f1":null,"seconds":3.829598426818848e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":6.734375,"distances_sum":648.4777458901032}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.220703125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.220703125,"f1":null,"seconds":3.637745976448059e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":6.7109375,"distances_sum":655.4024543755169}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6533203125,"f1":0.7786326520701529,"seconds":5.038455128669739e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.96875,"distances_sum":1971.3761937149973}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6533203125,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6533203125,"f1":0.7786326520701529,"seconds":5.038455128669739e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.96875,"distances_sum":1971.3761937149973}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8961512445887453,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.640625,"distances_sum":2627.6456997849573}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8599452630702638,"seconds":5.593523383140564e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.65625,"distances_sum":2400.687254254311}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6689453125, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.6689453125,"f1":0.7927645271395279,"seconds":5.152076482772827e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.078125,"distances_sum":2055.1177168927566}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8605373792873803,"seconds":5.494803190231323e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.5625,"distances_sum":2417.207900629419}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8203125,"state":{"ssize":8,"bsize":6},"perf":{"precision":1.0,"recall":0.8203125,"f1":0.8961512445887453,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.640625,"distances_sum":2627.6456997849573}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":10,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9700206043956048,"seconds":6.183981895446777e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.9140625,"distances_sum":3303.7886851481635}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":12,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9095326548451556,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.7734375,"distances_sum":2729.5890852007155}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":10,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9700206043956048,"seconds":6.183981895446777e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.9140625,"distances_sum":3303.7886851481635}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":10,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9700206043956048,"seconds":6.183981895446777e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.9140625,"distances_sum":3303.7886851481635}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5283203125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5283203125,"f1":null,"seconds":4.194676876068115e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.2421875,"distances_sum":1510.9020450901933}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1767578125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1767578125,"f1":null,"seconds":3.123655915260315e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":4.34375,"distances_sum":515.9834401917639}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7158203125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7158203125,"f1":0.8262258574758582,"seconds":4.9229711294174194e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.4609375,"distances_sum":2182.190270513551}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7158203125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7158203125,"f1":0.8262258574758582,"seconds":4.9229711294174194e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.4609375,"distances_sum":2182.190270513551}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.922221528471529,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.3125,"distances_sum":2869.0392203649717}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9000489094239099,"seconds":5.2247196435928345e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.109375,"distances_sum":2654.6740829271807}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9185954670329678,"seconds":6.0033053159713745e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.3359375,"distances_sum":2767.2096361659774}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8483433233433243,"seconds":4.997476935386658e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.6953125,"distances_sum":2297.867145280055}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.869140625,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.869140625,"f1":0.922221528471529,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.3125,"distances_sum":2869.0392203649717}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9520146520146525,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.6484375,"distances_sum":3077.0659904265635}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9562557234432238,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.703125,"distances_sum":3088.711954494561}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9333192848817855,"seconds":5.334615707397461e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.5234375,"distances_sum":2928.2267290611326}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9562557234432238,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.703125,"distances_sum":3088.711954494561}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9228515625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9562557234432238,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.703125,"distances_sum":3088.711954494561}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.513671875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.513671875,"f1":null,"seconds":4.036352038383484e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":6.4453125,"distances_sum":1526.3716742586907}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3583984375, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3583984375,"f1":null,"seconds":3.242865204811096e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":5.375,"distances_sum":1068.8854524451742}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.513671875,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.513671875,"f1":null,"seconds":4.036352038383484e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":6.4453125,"distances_sum":1526.3716742586907}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8685309482184487,"seconds":5.198642611503601e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.328125,"distances_sum":2366.273545823603}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.783203125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.783203125,"f1":0.8685309482184487,"seconds":5.198642611503601e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.328125,"distances_sum":2366.273545823603}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9528159340659345,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.7421875,"distances_sum":3029.3579197533154}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9580242673992677,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8125,"distances_sum":3048.4675738263463}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9036718489843498,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.484375,"distances_sum":2647.684210835256}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9580242673992677,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8125,"distances_sum":3048.4675738263463}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9267578125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9580242673992677,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8125,"distances_sum":3048.4675738263463}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2294921875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2294921875,"f1":null,"seconds":3.257766366004944e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":5.609375,"distances_sum":598.6894903059433}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6494140625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6494140625,"f1":0.7760786088911095,"seconds":4.433095455169678e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.265625,"distances_sum":1764.5937023969955}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4599609375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4599609375,"f1":null,"seconds":3.682449460029602e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":6.078125,"distances_sum":1198.3571775707971}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6494140625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6494140625,"f1":0.7760786088911095,"seconds":4.433095455169678e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.265625,"distances_sum":1764.5937023969955}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9539148351648357,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.7421875,"distances_sum":2966.7102298949408}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7314453125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7314453125,"f1":0.8349858474858484,"seconds":5.193054676055908e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.7265625,"distances_sum":2116.915911842834}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.658203125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.658203125,"f1":0.7803923507048516,"seconds":4.857778549194336e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.3515625,"distances_sum":1822.092480830118}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.7883262570762578,"seconds":4.829838871955872e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.390625,"distances_sum":1824.3031511772276}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.852799284049285,"seconds":5.19677996635437e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.859375,"distances_sum":2154.1192474113104}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9539148351648357,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.7421875,"distances_sum":2966.7102298949408}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.97654532967033,"seconds":6.113201379776001e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.90625,"distances_sum":3148.668180816296}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9656650641025646,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.84375,"distances_sum":3056.543446760145}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9723614926739931,"seconds":5.95487654209137e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8984375,"distances_sum":3089.4501318282682}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":12,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9582074175824181,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.7734375,"distances_sum":3005.1833837201116}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.97654532967033,"seconds":6.113201379776001e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.90625,"distances_sum":3148.668180816296}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.97654532967033,"seconds":6.113201379776001e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.90625,"distances_sum":3148.668180816296}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5830078125, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.5830078125,"f1":null,"seconds":4.582107067108154e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.875,"distances_sum":1076.3447670789267}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5830078125,"state":{"ssize":3,"bsize":3},"perf":{"precision":null,"recall":0.5830078125,"f1":null,"seconds":4.582107067108154e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.875,"distances_sum":1076.3447670789267}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9048368298368307,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.5546875,"distances_sum":1663.566954226106}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.7907035672660682,"seconds":4.766508936882019e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.3671875,"distances_sum":1211.2423928278363}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8569409756909764,"seconds":5.248934030532837e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.8203125,"distances_sum":1487.4407131154892}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8359375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8359375,"f1":0.9048368298368307,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.5546875,"distances_sum":1663.566954226106}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9586710164835169,"seconds":5.939975380897522e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.84375,"distances_sum":1978.8935988312614}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9407451923076929,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8671875,"distances_sum":1861.7154103098853}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9079212454212463,"seconds":5.623325705528259e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.5625,"distances_sum":1683.4187813777583}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9486664377289382,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.7421875,"distances_sum":1941.8912859190004}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9586710164835169,"seconds":5.939975380897522e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.84375,"distances_sum":1978.8935988312614}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.92578125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9586710164835169,"seconds":5.939975380897522e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.84375,"distances_sum":1978.8935988312614}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.8037353271728279,"seconds":5.131587386131287e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":7.6953125,"distances_sum":1399.3361039720191}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.259765625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.259765625,"f1":null,"seconds":3.958120942115784e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":6.828125,"distances_sum":521.4844380300588}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.68359375,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.68359375,"f1":0.8037353271728279,"seconds":5.131587386131287e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":7.6953125,"distances_sum":1399.3361039720191}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.933230311355312,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.8984375,"distances_sum":1989.3703530696403}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9436698717948724,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.890625,"distances_sum":2032.78320670189}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9436698717948724,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.890625,"distances_sum":2032.78320670189}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":10,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.959123168498169,"seconds":6.198883056640625e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.90625,"distances_sum":2139.7010360159347}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9688301282051284,"seconds":6.3087791204452515e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.8984375,"distances_sum":2197.4015778934336}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9513481310356313,"seconds":6.401911377906799e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.90625,"distances_sum":2091.0979031416546}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9558836996337001,"seconds":6.213784217834473e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.84375,"distances_sum":2124.0492158980605}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9541723901098907,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.8671875,"distances_sum":2134.6374182409363}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9688301282051284,"seconds":6.3087791204452515e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.8984375,"distances_sum":2197.4015778934336}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9688301282051284,"seconds":6.3087791204452515e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.8984375,"distances_sum":2197.4015778934336}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8424976065601075,"seconds":5.163252353668213e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.890625,"distances_sum":1511.9784398172094}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.74609375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.74609375,"f1":0.8424976065601075,"seconds":5.163252353668213e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.890625,"distances_sum":1511.9784398172094}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9248459873459879,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7421875,"distances_sum":1871.3937128315263}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8017578125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8017578125,"f1":0.8806042915417923,"seconds":5.478039383888245e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.15625,"distances_sum":1677.9597243870035}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8533282689532696,"seconds":5.064532160758972e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.9921875,"distances_sum":1537.4049287467167}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8657436313686321,"seconds":5.029141902923584e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.1015625,"distances_sum":1574.2234488231677}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8720703125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8720703125,"f1":0.9248459873459879,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7421875,"distances_sum":1871.3937128315263}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9724358974358978,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.875,"distances_sum":2146.89483303194}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.949264797702298,"seconds":5.651265382766724e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7265625,"distances_sum":2045.7522440805553}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9391285797535801,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.6484375,"distances_sum":2015.8098155646328}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.935594093406594,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.65625,"distances_sum":1972.4258331698727}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9724358974358978,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.875,"distances_sum":2146.89483303194}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9724358974358978,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.875,"distances_sum":2146.89483303194}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2333984375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2333984375,"f1":null,"seconds":3.473833203315735e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":5.859375,"distances_sum":465.1585173602358}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8490707209457216,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.9140625,"distances_sum":1675.4017742293424}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5224609375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5224609375,"f1":null,"seconds":3.818422555923462e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":6.15625,"distances_sum":1023.520820589833}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7490234375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7490234375,"f1":0.8490707209457216,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.9140625,"distances_sum":1675.4017742293424}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9557151182151188,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.84375,"distances_sum":2312.748666136754}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9485805860805863,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7890625,"distances_sum":2244.4599140760597}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.894460227272728,"seconds":5.234032869338989e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.6171875,"distances_sum":1966.7005746678628}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8973016566766575,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7109375,"distances_sum":1954.8155531893028}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8587797619047628,"seconds":4.937872290611267e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.046875,"distances_sum":1720.421405213754}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9557151182151188,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.84375,"distances_sum":2312.748666136754}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9818452380952383,"seconds":5.97536563873291e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.984375,"distances_sum":2450.9756387268253}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9630265567765572,"seconds":5.900859832763672e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.828125,"distances_sum":2356.0467015127433}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9576465201465206,"seconds":5.545094609260559e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.828125,"distances_sum":2277.959714802955}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.966796875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9818452380952383,"seconds":5.97536563873291e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.984375,"distances_sum":2450.9756387268253}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.966796875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9818452380952383,"seconds":5.97536563873291e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.984375,"distances_sum":2450.9756387268253}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6748046875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6748046875,"f1":0.795385864135865,"seconds":4.330649971961975e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.3828125,"distances_sum":1425.7815035007027}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.7858285811410819,"seconds":4.3138861656188965e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.2421875,"distances_sum":1403.2466554927587}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6748046875,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6748046875,"f1":0.795385864135865,"seconds":4.330649971961975e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.3828125,"distances_sum":1425.7815035007027}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9507669413919418,"seconds":5.623325705528259e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.875,"distances_sum":2182.835537324714}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9507669413919418,"seconds":5.623325705528259e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.875,"distances_sum":2182.835537324714}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9507669413919418,"seconds":5.623325705528259e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.875,"distances_sum":2182.835537324714}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9130859375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9507669413919418,"seconds":5.623325705528259e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.875,"distances_sum":2182.835537324714}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.587890625, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.587890625,"f1":null,"seconds":3.982335329055786e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.0546875,"distances_sum":1215.0059501534424}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.587890625,"state":{"ssize":2,"bsize":3},"perf":{"precision":null,"recall":0.587890625,"f1":null,"seconds":3.982335329055786e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.0546875,"distances_sum":1215.0059501534424}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.81640625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.81640625,"f1":0.8923940642690651,"seconds":5.435198545455933e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.5625,"distances_sum":1928.2697963355613}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9124745046620053,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.6875,"distances_sum":1995.044799173953}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8526530760905766,"seconds":5.0943344831466675e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.9375,"distances_sum":1741.9434580363077}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7829982517482525,"seconds":5.057081580162048e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.2421875,"distances_sum":1409.20509235363}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8466796875,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8466796875,"f1":0.9124745046620053,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.6875,"distances_sum":1995.044799173953}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9679716117216121,"seconds":6.677582859992981e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.90625,"distances_sum":2355.564754643204}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9532852564102572,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.890625,"distances_sum":2265.1831390809666}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9519917582417587,"seconds":6.0051679611206055e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8046875,"distances_sum":2262.4415909220015}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9679716117216121,"seconds":6.677582859992981e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.90625,"distances_sum":2355.564754643204}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9679716117216121,"seconds":6.677582859992981e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.90625,"distances_sum":2355.564754643204}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8686131576756586,"seconds":5.407258868217468e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.1875,"distances_sum":1806.2922717015906}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2646484375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2646484375,"f1":null,"seconds":3.6098062992095947e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":6.546875,"distances_sum":512.0803520580833}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7783203125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7783203125,"f1":0.8686131576756586,"seconds":5.407258868217468e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.1875,"distances_sum":1806.2922717015906}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9695341117216121,"seconds":6.023794412612915e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.9765625,"distances_sum":2407.267952155351}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9695341117216121,"seconds":6.023794412612915e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.9765625,"distances_sum":2407.267952155351}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9695341117216121,"seconds":6.023794412612915e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.9765625,"distances_sum":2407.267952155351}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9453125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9695341117216121,"seconds":6.023794412612915e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.9765625,"distances_sum":2407.267952155351}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6845703125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6845703125,"f1":0.7998036685536694,"seconds":5.04031777381897e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.7265625,"distances_sum":1591.3752038763732}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6845703125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6845703125,"f1":0.7998036685536694,"seconds":5.04031777381897e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.7265625,"distances_sum":1591.3752038763732}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.9002237345987354,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.6328125,"distances_sum":2130.543360382002}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9177629662004668,"seconds":5.379319190979004e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.671875,"distances_sum":2328.140686391078}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.859375,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.859375,"f1":0.9177629662004668,"seconds":5.379319190979004e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.671875,"distances_sum":2328.140686391078}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9553056318681323,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.828125,"distances_sum":2569.2971215333378}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9676911630036635,"seconds":6.0442835092544556e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.890625,"distances_sum":2633.6817792051625}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9676167582417585,"seconds":6.010755896568298e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8828125,"distances_sum":2643.9344620770335}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9473271520146525,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.7421875,"distances_sum":2517.4754950202905}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9681547619047622,"seconds":6.284564733505249e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.859375,"distances_sum":2664.0661505451785}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9311527014652022,"seconds":5.563721060752869e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.703125,"distances_sum":2414.1401942392436}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9210138819513825,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.625,"distances_sum":2361.824552101112}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9681547619047622,"seconds":6.284564733505249e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.859375,"distances_sum":2664.0661505451785}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9681547619047622,"seconds":6.284564733505249e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.859375,"distances_sum":2664.0661505451785}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1923828125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1923828125,"f1":null,"seconds":2.9746443033218384e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":5.265625,"distances_sum":451.23675980091144}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1923828125,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.1923828125,"f1":null,"seconds":2.9746443033218384e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":5.265625,"distances_sum":451.23675980091144}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1923828125,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.1923828125,"f1":null,"seconds":2.9746443033218384e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":5.265625,"distances_sum":451.23675980091144}}, n: 9
mean(cfft.distances) = 0.33747911667227726
mean(cdnet.distances) = 0.41917817904456295
mean(crand.distances) = 0.6825686780552399
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8688888888888888
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.9111111111111111
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.9
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8644444444444445
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9311111111111111
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9488888888888889
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.888888888888889
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8333333333333334
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8911111111111111
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8977777777777778
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9488888888888889
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8711111111111111
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9333333333333332
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8555555555555555
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9155555555555556
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8733333333333334
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8555555555555555
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9355555555555556
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8777777777777778
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.888888888888889
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8844444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8911111111111111
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.891111111111111
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9222222222222222
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.888888888888889
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 19, 1]]
** centroid: 12, normalized-entropy: 0.2863969571159561, [(2, 19), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 3, 1, 2]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 19, 1]]
** centroid: 12, normalized-entropy: 0.2863969571159561, [(2, 19), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 3, 1, 2]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 19, 1]]
** centroid: 12, normalized-entropy: 0.2863969571159561, [(2, 19), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 3, 1, 2]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 19, 1]]
** centroid: 12, normalized-entropy: 0.2863969571159561, [(2, 19), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 3, 1, 2]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 19, 1]]
** centroid: 12, normalized-entropy: 0.2863969571159561, [(2, 19), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 3, 1, 2]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 19, 1]]
** centroid: 12, normalized-entropy: 0.2863969571159561, [(2, 19), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 3, 1, 2]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 19, 1]]
** centroid: 12, normalized-entropy: 0.2863969571159561, [(2, 19), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 3, 1, 2]
acc = 0.96
*** finished computation of 12 references, err: [Inf, 0.5333987021446228] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 32, 8]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(2, 32), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 1, 1]]
** centroid: 8, normalized-entropy: 1.0, [(2, 1), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 11: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
finished with 14 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.26631516692237006] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26631516692237006, 0.23689345529095995] ***
*** finished computation of 3 references, err: [Inf, 0.26631516692237006, 0.23689345529095995] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 202, 31]]
** centroid: 1, normalized-entropy: 0.5657363371956721, [(2, 202), (3, 31)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [218, 35, 0]]
** centroid: 2, normalized-entropy: 0.5798746482340582, [(1, 218), (2, 35)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [156, 24, 0]]
** centroid: 3, normalized-entropy: 0.5665095065529052, [(1, 156), (2, 24)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33827573883517814] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33827573883517814, 0.23916083234907673] ***
*** starting iteration: 2; err: [Inf, 0.33827573883517814, 0.23916083234907673] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33827573883517814, 0.23916083234907673, 0.23550148707934776] ***
*** starting iteration: 3; err: [Inf, 0.33827573883517814, 0.23916083234907673, 0.23550148707934776] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33827573883517814, 0.23916083234907673, 0.23550148707934776, 0.2348644363193272] ***
*** finished computation of 3 references, err: [Inf, 0.33827573883517814, 0.23916083234907673, 0.23550148707934776, 0.2348644363193272] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [225, 22, 0]]
** centroid: 1, normalized-entropy: 0.4333540184921518, [(1, 225), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [149, 43, 0]]
** centroid: 2, normalized-entropy: 0.7673297194656755, [(1, 149), (2, 43)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 196, 31]]
** centroid: 3, normalized-entropy: 0.5751686852267127, [(2, 196), (3, 31)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31657587734052445] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31657587734052445, 0.23099523193078644] ***
*** finished computation of 3 references, err: [Inf, 0.31657587734052445, 0.23099523193078644] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [163, 32, 0]]
** centroid: 1, normalized-entropy: 0.6440344720077356, [(1, 163), (2, 32)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [237, 23, 0]]
** centroid: 2, normalized-entropy: 0.4313136784969209, [(1, 237), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 181, 31]]
** centroid: 3, normalized-entropy: 0.6003157791667212, [(2, 181), (3, 31)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2856330953613817] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2856330953613817, 0.24710816572555738] ***
*** finished computation of 3 references, err: [Inf, 0.2856330953613817, 0.24710816572555738] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [118, 103, 19]]
** centroid: 1, normalized-entropy: 0.8309389179087588, [(1, 118), (2, 103), (3, 19)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [88, 148, 5]]
** centroid: 2, normalized-entropy: 0.6805863049184206, [(1, 88), (2, 148), (3, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [186, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21001784236229085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21001784236229085, 0.16563660735278404] ***
*** starting iteration: 2; err: [Inf, 0.21001784236229085, 0.16563660735278404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21001784236229085, 0.16563660735278404, 0.15604329814535897] ***
*** starting iteration: 3; err: [Inf, 0.21001784236229085, 0.16563660735278404, 0.15604329814535897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21001784236229085, 0.16563660735278404, 0.15604329814535897, 0.1516650111215922] ***
*** finished computation of 7 references, err: [Inf, 0.21001784236229085, 0.16563660735278404, 0.15604329814535897, 0.1516650111215922] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [17, 76, 0]]
** centroid: 1, normalized-entropy: 0.6861549474202007, [(1, 17), (2, 76)]
*** center 2: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [114, 5, 0]]
** centroid: 3, normalized-entropy: 0.25146396423889, [(1, 114), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [80, 4, 0]]
** centroid: 4, normalized-entropy: 0.2761954276479391, [(1, 80), (2, 4)]
*** center 5: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 93, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 83, 31]]
** centroid: 7, normalized-entropy: 0.8442202034297602, [(2, 83), (3, 31)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2263006602729513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2263006602729513, 0.17278426530250143] ***
*** starting iteration: 2; err: [Inf, 0.2263006602729513, 0.17278426530250143] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2263006602729513, 0.17278426530250143, 0.1574774714008063] ***
*** starting iteration: 3; err: [Inf, 0.2263006602729513, 0.17278426530250143, 0.1574774714008063] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2263006602729513, 0.17278426530250143, 0.1574774714008063, 0.15332258047991204] ***
*** finished computation of 7 references, err: [Inf, 0.2263006602729513, 0.17278426530250143, 0.1574774714008063, 0.15332258047991204] ***
*** center 1: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [94, 11, 0]]
** centroid: 2, normalized-entropy: 0.4839112332593779, [(1, 94), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 110, 31]]
** centroid: 3, normalized-entropy: 0.7599084154505263, [(2, 110), (3, 31)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 6, 0]]
** centroid: 4, normalized-entropy: 0.4138168503036336, [(1, 66), (2, 6)]
*** center 5: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [8, 55, 0]]
** centroid: 6, normalized-entropy: 0.5491087450260074, [(1, 8), (2, 55)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [44, 54, 0]]
** centroid: 7, normalized-entropy: 0.9924760039430819, [(1, 44), (2, 54)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20812092639919164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20812092639919164, 0.16704677177294308] ***
*** starting iteration: 2; err: [Inf, 0.20812092639919164, 0.16704677177294308] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20812092639919164, 0.16704677177294308, 0.15793421804539112] ***
*** starting iteration: 3; err: [Inf, 0.20812092639919164, 0.16704677177294308, 0.15793421804539112] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20812092639919164, 0.16704677177294308, 0.15793421804539112, 0.15562822108088561] ***
*** finished computation of 7 references, err: [Inf, 0.20812092639919164, 0.16704677177294308, 0.15793421804539112, 0.15562822108088561] ***
*** center 1: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [75, 48, 0]]
** centroid: 3, normalized-entropy: 0.9649567669505686, [(1, 75), (2, 48)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [90, 31, 0]]
** centroid: 4, normalized-entropy: 0.8209552679220007, [(1, 90), (2, 31)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [49, 36, 0]]
** centroid: 5, normalized-entropy: 0.9830605548016024, [(1, 49), (2, 36)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 136, 24]]
** centroid: 6, normalized-entropy: 0.6098403047164005, [(2, 136), (3, 24)]
*** center 7: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21882895025349147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21882895025349147, 0.18861703083965112] ***
*** finished computation of 7 references, err: [Inf, 0.21882895025349147, 0.18861703083965112] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [189, 21, 0]]
** centroid: 1, normalized-entropy: 0.46899559358928133, [(1, 189), (2, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 39, 0]]
** centroid: 3, normalized-entropy: 0.9937489109291138, [(1, 47), (2, 39)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [24, 17, 0]]
** centroid: 4, normalized-entropy: 0.9788698505067782, [(1, 24), (2, 17)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 70, 4]]
** centroid: 5, normalized-entropy: 0.30337483608641397, [(2, 70), (3, 4)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 114, 27]]
** centroid: 6, normalized-entropy: 0.7045767128725937, [(2, 114), (3, 27)]
*** center 7: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20764596438010235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20764596438010235, 0.14716630743263565] ***
*** finished computation of 7 references, err: [Inf, 0.20764596438010235, 0.14716630743263565] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [27, 52, 0]]
** centroid: 1, normalized-entropy: 0.9265044456232997, [(1, 27), (2, 52)]
*** center 2: selecting labels [1] (freq >= 1) [from [126, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 53, 31]]
** centroid: 3, normalized-entropy: 0.9499380214234903, [(2, 53), (3, 31)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [71, 21, 0]]
** centroid: 4, normalized-entropy: 0.7749672673267259, [(1, 71), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [84, 14, 0]]
** centroid: 5, normalized-entropy: 0.5916727785823274, [(1, 84), (2, 14)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 96, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1966050442383587] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1966050442383587, 0.15266205673559807] ***
*** finished computation of 7 references, err: [Inf, 0.1966050442383587, 0.15266205673559807] ***
*** center 1: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [85, 7, 0]]
** centroid: 2, normalized-entropy: 0.3882389775123619, [(1, 85), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 89, 24]]
** centroid: 3, normalized-entropy: 0.7460251980495494, [(2, 89), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [35, 106, 0]]
** centroid: 4, normalized-entropy: 0.8084557936982762, [(1, 35), (2, 106)]
*** center 5: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [36, 48, 0]]
** centroid: 6, normalized-entropy: 0.9852281360342514, [(1, 36), (2, 48)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [52, 1, 0]]
** centroid: 7, normalized-entropy: 0.13503620280212753, [(1, 52), (2, 1)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.31778689857583503] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31778689857583503, 0.21750559339120806] ***
*** finished computation of 7 references, err: [Inf, 0.31778689857583503, 0.21750559339120806] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [58, 10, 0]]
** centroid: 1, normalized-entropy: 0.6024308020404452, [(1, 58), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [18, 31, 0]]
** centroid: 2, normalized-entropy: 0.9486131982385807, [(1, 18), (2, 31)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [100, 19, 0]]
** centroid: 3, normalized-entropy: 0.633504807569283, [(1, 100), (2, 19)]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [27, 99, 3]]
** centroid: 4, normalized-entropy: 0.5624819967010154, [(1, 27), (2, 99), (3, 3)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 83, 28]]
** centroid: 5, normalized-entropy: 0.8148283832923793, [(2, 83), (3, 28)]
*** center 6: selecting labels [1] (freq >= 1) [from [133, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [38, 19, 0]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(1, 38), (2, 19)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25354399294850755] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25354399294850755, 0.20508776571758014] ***
*** finished computation of 7 references, err: [Inf, 0.25354399294850755, 0.20508776571758014] ***
*** center 1: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [126, 4, 0]]
** centroid: 3, normalized-entropy: 0.19823496409776642, [(1, 126), (2, 4)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 37, 31]]
** centroid: 4, normalized-entropy: 0.9943766625699823, [(2, 37), (3, 31)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [13, 106, 0]]
** centroid: 5, normalized-entropy: 0.49763049843791574, [(1, 13), (2, 106)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [43, 42, 0]]
** centroid: 6, normalized-entropy: 0.9999001572094882, [(1, 43), (2, 42)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 47, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25416801334672917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25416801334672917, 0.21441144794588726] ***
*** finished computation of 7 references, err: [Inf, 0.25416801334672917, 0.21441144794588726] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 153, 24]]
** centroid: 1, normalized-entropy: 0.572580465623769, [(2, 153), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [82, 45, 0]]
** centroid: 2, normalized-entropy: 0.9378763898153295, [(1, 82), (2, 45)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [123, 4, 0]]
** centroid: 3, normalized-entropy: 0.20183992963258704, [(1, 123), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [32, 36, 0]]
** centroid: 4, normalized-entropy: 0.9975025463691153, [(1, 32), (2, 36)]
*** center 5: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [63, 13, 0]]
** centroid: 7, normalized-entropy: 0.6601070987550468, [(1, 63), (2, 13)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33860044529510736] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33860044529510736, 0.24081373325866023] ***
*** starting iteration: 2; err: [Inf, 0.33860044529510736, 0.24081373325866023] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33860044529510736, 0.24081373325866023, 0.23565600224598862] ***
*** starting iteration: 3; err: [Inf, 0.33860044529510736, 0.24081373325866023, 0.23565600224598862] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33860044529510736, 0.24081373325866023, 0.23565600224598862, 0.23429618872607175] ***
*** finished computation of 3 references, err: [Inf, 0.33860044529510736, 0.24081373325866023, 0.23565600224598862, 0.23429618872607175] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [70, 181, 31]]
** centroid: 1, normalized-entropy: 0.7948181847706194, [(1, 70), (2, 181), (3, 31)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [116, 55, 0]]
** centroid: 2, normalized-entropy: 0.9061532185194962, [(1, 116), (2, 55)]
*** center 3: selecting labels [1] (freq >= 1) [from [214, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3927833364977651] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3927833364977651, 0.22860728236399813] ***
*** starting iteration: 2; err: [Inf, 0.3927833364977651, 0.22860728236399813] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3927833364977651, 0.22860728236399813, 0.22771168116904583] ***
*** finished computation of 3 references, err: [Inf, 0.3927833364977651, 0.22860728236399813, 0.22771168116904583] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [88, 153, 24]]
** centroid: 1, normalized-entropy: 0.8198764134996932, [(1, 88), (2, 153), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [107, 98, 0]]
** centroid: 2, normalized-entropy: 0.9986092103922113, [(1, 107), (2, 98)]
*** center 3: selecting labels [1] (freq >= 1) [from [197, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3350855045037361] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3350855045037361, 0.23716378475150637] ***
*** finished computation of 3 references, err: [Inf, 0.3350855045037361, 0.23716378475150637] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [240, 44, 0]]
** centroid: 1, normalized-entropy: 0.6220403090607189, [(1, 240), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [134, 41, 0]]
** centroid: 2, normalized-entropy: 0.7854077763427122, [(1, 134), (2, 41)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 176, 31]]
** centroid: 3, normalized-entropy: 0.6092355057980815, [(2, 176), (3, 31)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3368515584232478] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3368515584232478, 0.24419114124895572] ***
*** finished computation of 3 references, err: [Inf, 0.3368515584232478, 0.24419114124895572] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [113, 160, 31]]
** centroid: 1, normalized-entropy: 0.854248088101629, [(1, 113), (2, 160), (3, 31)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [114, 76, 0]]
** centroid: 2, normalized-entropy: 0.9709505944546688, [(1, 114), (2, 76)]
*** center 3: selecting labels [1] (freq >= 1) [from [173, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2997558713210621] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2997558713210621, 0.24727033006063645] ***
*** finished computation of 3 references, err: [Inf, 0.2997558713210621, 0.24727033006063645] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [272, 74, 0]]
** centroid: 1, normalized-entropy: 0.7488205921551216, [(1, 272), (2, 74)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 132, 24]]
** centroid: 2, normalized-entropy: 0.6193821946787638, [(2, 132), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [120, 45, 0]]
** centroid: 3, normalized-entropy: 0.8453509366224364, [(1, 120), (2, 45)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.20306727348256284] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20306727348256284, 0.15711345552402484] ***
*** starting iteration: 2; err: [Inf, 0.20306727348256284, 0.15711345552402484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20306727348256284, 0.15711345552402484, 0.15263417087510708] ***
*** starting iteration: 3; err: [Inf, 0.20306727348256284, 0.15711345552402484, 0.15263417087510708] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20306727348256284, 0.15711345552402484, 0.15263417087510708, 0.1519689178471831] ***
*** finished computation of 7 references, err: [Inf, 0.20306727348256284, 0.15711345552402484, 0.15263417087510708, 0.1519689178471831] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 105, 0]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(1, 5), (2, 105)]
*** center 2: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 46, 0]]
** centroid: 3, normalized-entropy: 0.998082507968892, [(1, 51), (2, 46)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [73, 25, 0]]
** centroid: 4, normalized-entropy: 0.8192649712314392, [(1, 73), (2, 25)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 83, 31]]
** centroid: 5, normalized-entropy: 0.8442202034297602, [(2, 83), (3, 31)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [86, 2, 0]]
** centroid: 6, normalized-entropy: 0.1564910629057016, [(1, 86), (2, 2)]
*** center 7: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19046395165619553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19046395165619553, 0.15290816799937182] ***
*** starting iteration: 2; err: [Inf, 0.19046395165619553, 0.15290816799937182] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19046395165619553, 0.15290816799937182, 0.149122390244671] ***
*** starting iteration: 3; err: [Inf, 0.19046395165619553, 0.15290816799937182, 0.149122390244671] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19046395165619553, 0.15290816799937182, 0.149122390244671, 0.14794102703630255] ***
*** starting iteration: 4; err: [Inf, 0.19046395165619553, 0.15290816799937182, 0.149122390244671, 0.14794102703630255] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19046395165619553, 0.15290816799937182, 0.149122390244671, 0.14794102703630255, 0.1471172552681465] ***
*** finished computation of 7 references, err: [Inf, 0.19046395165619553, 0.15290816799937182, 0.149122390244671, 0.14794102703630255, 0.1471172552681465] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [30, 56, 0]]
** centroid: 1, normalized-entropy: 0.9330252953592912, [(1, 30), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [89, 4, 0]]
** centroid: 2, normalized-entropy: 0.2559300438391133, [(1, 89), (2, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 76, 31]]
** centroid: 4, normalized-entropy: 0.8683587934693187, [(2, 76), (3, 31)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [88, 11, 0]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(1, 88), (2, 11)]
*** center 6: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 89, 0]]
** centroid: 7, normalized-entropy: 0.15240699892386778, [(1, 2), (2, 89)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18724410695120178] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18724410695120178, 0.1538177796795188] ***
*** starting iteration: 2; err: [Inf, 0.18724410695120178, 0.1538177796795188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18724410695120178, 0.1538177796795188, 0.14935818826849537] ***
*** starting iteration: 3; err: [Inf, 0.18724410695120178, 0.1538177796795188, 0.14935818826849537] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18724410695120178, 0.1538177796795188, 0.14935818826849537, 0.14835765710305784] ***
*** starting iteration: 4; err: [Inf, 0.18724410695120178, 0.1538177796795188, 0.14935818826849537, 0.14835765710305784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18724410695120178, 0.1538177796795188, 0.14935818826849537, 0.14835765710305784, 0.14805608416378296] ***
*** finished computation of 7 references, err: [Inf, 0.18724410695120178, 0.1538177796795188, 0.14935818826849537, 0.14835765710305784, 0.14805608416378296] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 95, 24]]
** centroid: 1, normalized-entropy: 0.7252767313016596, [(2, 95), (3, 24)]
*** center 2: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [76, 12, 0]]
** centroid: 3, normalized-entropy: 0.5746356978376794, [(1, 76), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 31, 0]]
** centroid: 4, normalized-entropy: 0.9290083681703216, [(1, 59), (2, 31)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [79, 24, 0]]
** centroid: 5, normalized-entropy: 0.7832211182191516, [(1, 79), (2, 24)]
*** center 6: selecting labels [1] (freq >= 2) [from [90, 1, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 88, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22986909042339068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22986909042339068, 0.19365617020898876] ***
*** starting iteration: 2; err: [Inf, 0.22986909042339068, 0.19365617020898876] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22986909042339068, 0.19365617020898876, 0.1903113905178221] ***
*** starting iteration: 3; err: [Inf, 0.22986909042339068, 0.19365617020898876, 0.1903113905178221] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22986909042339068, 0.19365617020898876, 0.1903113905178221, 0.18937032602100937] ***
*** finished computation of 7 references, err: [Inf, 0.22986909042339068, 0.19365617020898876, 0.1903113905178221, 0.18937032602100937] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [1, 106, 0]]
** centroid: 1, normalized-entropy: 0.07642429309554791, [(1, 1), (2, 106)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [74, 16, 0]]
** centroid: 2, normalized-entropy: 0.6751914401458716, [(1, 74), (2, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 79, 31]]
** centroid: 4, normalized-entropy: 0.8579163978157118, [(2, 79), (3, 31)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [33, 53, 0]]
** centroid: 5, normalized-entropy: 0.9606276613221153, [(1, 33), (2, 53)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [104, 7, 0]]
** centroid: 6, normalized-entropy: 0.33948600021427877, [(1, 104), (2, 7)]
*** center 7: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24209928541615985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24209928541615985, 0.18854209173308767] ***
*** starting iteration: 2; err: [Inf, 0.24209928541615985, 0.18854209173308767] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24209928541615985, 0.18854209173308767, 0.18549465791027675] ***
*** starting iteration: 3; err: [Inf, 0.24209928541615985, 0.18854209173308767, 0.18549465791027675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24209928541615985, 0.18854209173308767, 0.18549465791027675, 0.1852852470524933] ***
*** finished computation of 7 references, err: [Inf, 0.24209928541615985, 0.18854209173308767, 0.18549465791027675, 0.1852852470524933] ***
*** center 1: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 51, 31]]
** centroid: 2, normalized-entropy: 0.956652272148091, [(2, 51), (3, 31)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [105, 2, 0]]
** centroid: 3, normalized-entropy: 0.13402979616803584, [(1, 105), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [88, 14, 0]]
** centroid: 4, normalized-entropy: 0.577004250315725, [(1, 88), (2, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [11, 84, 0]]
** centroid: 5, normalized-entropy: 0.5171354891896202, [(1, 11), (2, 84)]
*** center 6: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 85, 0]]
** centroid: 7, normalized-entropy: 0.21450983370697788, [(1, 3), (2, 85)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22327158155933446] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22327158155933446, 0.1906835065758054] ***
*** starting iteration: 2; err: [Inf, 0.22327158155933446, 0.1906835065758054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22327158155933446, 0.1906835065758054, 0.18840708718055682] ***
*** starting iteration: 3; err: [Inf, 0.22327158155933446, 0.1906835065758054, 0.18840708718055682] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22327158155933446, 0.1906835065758054, 0.18840708718055682, 0.18792303359747559] ***
*** finished computation of 7 references, err: [Inf, 0.22327158155933446, 0.1906835065758054, 0.18840708718055682, 0.18792303359747559] ***
*** center 1: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 60, 24]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(2, 60), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [81, 13, 0]]
** centroid: 3, normalized-entropy: 0.57976367540648, [(1, 81), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [77, 11, 0]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(1, 77), (2, 11)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [14, 66, 0]]
** centroid: 5, normalized-entropy: 0.6690158350565576, [(1, 14), (2, 66)]
*** center 6: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [16, 101, 0]]
** centroid: 7, normalized-entropy: 0.5756693370369834, [(1, 16), (2, 101)]
finished with 12 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 10)
[0.9329868790946635, 0.9250028471585358, 0.913008817200434, 0.9110397822972672, 0.9039818261375148, 0.8880677084269899, 0.881989774205343, 0.8710267153380925, 0.8069926213638787, 0.7909076741412071]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9329868790946635
finished with 10
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 10)
[0.9329868790946635, 0.9250028471585358, 0.913008817200434, 0.9110397822972672, 0.9039818261375148, 0.8880677084269899, 0.881989774205343, 0.8710267153380925, 0.8069926213638787, 0.7909076741412071]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9329868790946635
finished with 11
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.2940437608543929] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2940437608543929, 0.22872949251975003] ***
*** starting iteration: 2; err: [Inf, 0.2940437608543929, 0.22872949251975003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2940437608543929, 0.22872949251975003, 0.2190533306728629] ***
*** starting iteration: 3; err: [Inf, 0.2940437608543929, 0.22872949251975003, 0.2190533306728629] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2940437608543929, 0.22872949251975003, 0.2190533306728629, 0.2083356544940366] ***
*** finished computation of 7 references, err: [Inf, 0.2940437608543929, 0.22872949251975003, 0.2190533306728629, 0.2083356544940366] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [24, 50, 0]]
** centroid: 1, normalized-entropy: 0.9090221560878149, [(1, 24), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [80, 21, 0]]
** centroid: 2, normalized-entropy: 0.7374895672137457, [(1, 80), (2, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [66, 9, 0]]
** centroid: 3, normalized-entropy: 0.5293608652873645, [(1, 66), (2, 9)]
*** center 4: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 108, 31]]
** centroid: 5, normalized-entropy: 0.7656465701648906, [(2, 108), (3, 31)]
*** center 6: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 73, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30401317443491993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30401317443491993, 0.23544707507972998] ***
*** starting iteration: 2; err: [Inf, 0.30401317443491993, 0.23544707507972998] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30401317443491993, 0.23544707507972998, 0.21262256856840187] ***
*** starting iteration: 3; err: [Inf, 0.30401317443491993, 0.23544707507972998, 0.21262256856840187] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30401317443491993, 0.23544707507972998, 0.21262256856840187, 0.20009549024844378] ***
*** finished computation of 7 references, err: [Inf, 0.30401317443491993, 0.23544707507972998, 0.21262256856840187, 0.20009549024844378] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [44, 91, 0]]
** centroid: 1, normalized-entropy: 0.9107096453610353, [(1, 44), (2, 91)]
*** center 2: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [94, 5, 0]]
** centroid: 4, normalized-entropy: 0.2885385136944103, [(1, 94), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [69, 4, 0]]
** centroid: 5, normalized-entropy: 0.306424729870515, [(1, 69), (2, 4)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 113, 31]]
** centroid: 6, normalized-entropy: 0.7514506377276642, [(2, 113), (3, 31)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [89, 23, 0]]
** centroid: 7, normalized-entropy: 0.7325138475458123, [(1, 89), (2, 23)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2250962085488519] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2250962085488519, 0.1918073128462061] ***
*** starting iteration: 2; err: [Inf, 0.2250962085488519, 0.1918073128462061] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2250962085488519, 0.1918073128462061, 0.18935152803403862] ***
*** starting iteration: 3; err: [Inf, 0.2250962085488519, 0.1918073128462061, 0.18935152803403862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2250962085488519, 0.1918073128462061, 0.18935152803403862, 0.18894277216456104] ***
*** finished computation of 7 references, err: [Inf, 0.2250962085488519, 0.1918073128462061, 0.18935152803403862, 0.18894277216456104] ***
*** center 1: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [79, 14, 0]]
** centroid: 2, normalized-entropy: 0.6111841012714984, [(1, 79), (2, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [65, 10, 0]]
** centroid: 3, normalized-entropy: 0.5665095065529052, [(1, 65), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [1, 108, 0]]
** centroid: 4, normalized-entropy: 0.07526826758743464, [(1, 1), (2, 108)]
*** center 5: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 83, 24]]
** centroid: 6, normalized-entropy: 0.7679401376244881, [(2, 83), (3, 24)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [90, 36, 0]]
** centroid: 7, normalized-entropy: 0.8631205685666311, [(1, 90), (2, 36)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 11)
[0.9329868790946635, 0.9250028471585358, 0.913008817200434, 0.9110397822972672, 0.9039818261375148, 0.8880677084269899, 0.881989774205343, 0.8799967632302961, 0.8710267153380925, 0.8069926213638787, 0.7909076741412071]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9329868790946635
finished with 12
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.20126780025330973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20126780025330973, 0.15364532372229048] ***
*** starting iteration: 2; err: [Inf, 0.20126780025330973, 0.15364532372229048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20126780025330973, 0.15364532372229048, 0.14994934840441063] ***
*** starting iteration: 3; err: [Inf, 0.20126780025330973, 0.15364532372229048, 0.14994934840441063] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20126780025330973, 0.15364532372229048, 0.14994934840441063, 0.14918289509218735] ***
*** finished computation of 7 references, err: [Inf, 0.20126780025330973, 0.15364532372229048, 0.14994934840441063, 0.14918289509218735] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 92, 31]]
** centroid: 1, normalized-entropy: 0.8144837282722616, [(2, 92), (3, 31)]
*** center 2: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [89, 5, 0]]
** centroid: 3, normalized-entropy: 0.2998025130558691, [(1, 89), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [76, 38, 0]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(1, 76), (2, 38)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [52, 31, 0]]
** centroid: 5, normalized-entropy: 0.9533171305598173, [(1, 52), (2, 31)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 95, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17509979401426068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17509979401426068, 0.15095228005083336] ***
*** starting iteration: 2; err: [Inf, 0.17509979401426068, 0.15095228005083336] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17509979401426068, 0.15095228005083336, 0.1473712311918684] ***
*** starting iteration: 3; err: [Inf, 0.17509979401426068, 0.15095228005083336, 0.1473712311918684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17509979401426068, 0.15095228005083336, 0.1473712311918684, 0.14594201605370466] ***
*** starting iteration: 4; err: [Inf, 0.17509979401426068, 0.15095228005083336, 0.1473712311918684, 0.14594201605370466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17509979401426068, 0.15095228005083336, 0.1473712311918684, 0.14594201605370466, 0.14524456311465483] ***
*** finished computation of 7 references, err: [Inf, 0.17509979401426068, 0.15095228005083336, 0.1473712311918684, 0.14594201605370466, 0.14524456311465483] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [116, 11, 0]]
** centroid: 1, normalized-entropy: 0.42506623606501126, [(1, 116), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [78, 10, 0]]
** centroid: 2, normalized-entropy: 0.5107878229540133, [(1, 78), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 40, 31]]
** centroid: 3, normalized-entropy: 0.9883779727795042, [(2, 40), (3, 31)]
*** center 4: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [98, 10, 0]]
** centroid: 5, normalized-entropy: 0.44506485705083854, [(1, 98), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 85, 0]]
** centroid: 6, normalized-entropy: 0.15790637433488164, [(1, 2), (2, 85)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 80, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18515554252827632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18515554252827632, 0.15245765504445405] ***
*** starting iteration: 2; err: [Inf, 0.18515554252827632, 0.15245765504445405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18515554252827632, 0.15245765504445405, 0.14777996304488253] ***
*** starting iteration: 3; err: [Inf, 0.18515554252827632, 0.15245765504445405, 0.14777996304488253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18515554252827632, 0.15245765504445405, 0.14777996304488253, 0.14668603098882863] ***
*** starting iteration: 4; err: [Inf, 0.18515554252827632, 0.15245765504445405, 0.14777996304488253, 0.14668603098882863] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18515554252827632, 0.15245765504445405, 0.14777996304488253, 0.14668603098882863, 0.1464098468283261] ***
*** finished computation of 7 references, err: [Inf, 0.18515554252827632, 0.15245765504445405, 0.14777996304488253, 0.14668603098882863, 0.1464098468283261] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 86, 24]]
** centroid: 1, normalized-entropy: 0.7568336324184036, [(2, 86), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [63, 15, 0]]
** centroid: 3, normalized-entropy: 0.7062740891876008, [(1, 63), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [77, 35, 0]]
** centroid: 4, normalized-entropy: 0.8960382325345574, [(1, 77), (2, 35)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [77, 14, 0]]
** centroid: 5, normalized-entropy: 0.6193821946787638, [(1, 77), (2, 14)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 98, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [90, 3, 0]]
** centroid: 7, normalized-entropy: 0.2055925081850832, [(1, 90), (2, 3)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 12)
[0.9329868790946635, 0.9299868731006455, 0.9250028471585358, 0.913008817200434, 0.9110397822972672, 0.9039818261375148, 0.8880677084269899, 0.881989774205343, 0.8799967632302961, 0.8710267153380925, 0.8069926213638787, 0.7909076741412071]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9329868790946635
finished with 12
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9329868790946635, 0.9299868731006455, 0.9250028471585358, 0.913008817200434, 0.9110397822972672, 0.9039818261375148, 0.8880677084269899, 0.881989774205343, 0.8799967632302961, 0.8710267153380925, 0.8069926213638787, 0.7909076741412071]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9329868790946635
finished with 12
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9329868790946635, 0.9299868731006455, 0.9250028471585358, 0.913008817200434, 0.9110397822972672, 0.9039818261375148, 0.8880677084269899, 0.881989774205343, 0.8799967632302961, 0.8710267153380925, 0.8069926213638787, 0.7909076741412071]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9329868790946635
finished with 12
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9329868790946635, 0.9299868731006455, 0.9250028471585358, 0.913008817200434, 0.9110397822972672, 0.9039818261375148, 0.8880677084269899, 0.881989774205343, 0.8799967632302961, 0.8710267153380925, 0.8069926213638787, 0.7909076741412071]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9329868790946635
finished with 12
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9329868790946635, 0.9299868731006455, 0.9250028471585358, 0.913008817200434, 0.9110397822972672, 0.9039818261375148, 0.8880677084269899, 0.881989774205343, 0.8799967632302961, 0.8710267153380925, 0.8069926213638787, 0.7909076741412071]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9329868790946635
finished with 13
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.37279023401797173] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37279023401797173, 0.302039397156073] ***
*** starting iteration: 2; err: [Inf, 0.37279023401797173, 0.302039397156073] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37279023401797173, 0.302039397156073, 0.2945484715925009] ***
*** starting iteration: 3; err: [Inf, 0.37279023401797173, 0.302039397156073, 0.2945484715925009] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37279023401797173, 0.302039397156073, 0.2945484715925009, 0.2934236275591516] ***
*** finished computation of 3 references, err: [Inf, 0.37279023401797173, 0.302039397156073, 0.2945484715925009, 0.2934236275591516] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [63, 181, 31]]
** centroid: 1, normalized-entropy: 0.781855769845319, [(1, 63), (2, 181), (3, 31)]
*** center 2: selecting labels [1] (freq >= 1) [from [200, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [111, 80, 0]]
** centroid: 3, normalized-entropy: 0.9809135989475251, [(1, 111), (2, 80)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37084069049664437] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37084069049664437, 0.30935072374000944] ***
*** starting iteration: 2; err: [Inf, 0.37084069049664437, 0.30935072374000944] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37084069049664437, 0.30935072374000944, 0.29896962822790535] ***
*** starting iteration: 3; err: [Inf, 0.37084069049664437, 0.30935072374000944, 0.29896962822790535] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37084069049664437, 0.30935072374000944, 0.29896962822790535, 0.2956862488043853] ***
*** finished computation of 3 references, err: [Inf, 0.37084069049664437, 0.30935072374000944, 0.29896962822790535, 0.2956862488043853] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [67, 178, 31]]
** centroid: 1, normalized-entropy: 0.7938379601357257, [(1, 67), (2, 178), (3, 31)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [118, 58, 0]]
** centroid: 2, normalized-entropy: 0.9144612916935675, [(1, 118), (2, 58)]
*** center 3: selecting labels [1] (freq >= 1) [from [215, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.42498681926611126] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42498681926611126, 0.2869769236117579] ***
*** starting iteration: 2; err: [Inf, 0.42498681926611126, 0.2869769236117579] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42498681926611126, 0.2869769236117579, 0.2860632267559989] ***
*** finished computation of 3 references, err: [Inf, 0.42498681926611126, 0.2869769236117579, 0.2860632267559989] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [79, 161, 24]]
** centroid: 1, normalized-entropy: 0.8015786886705111, [(1, 79), (2, 161), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [109, 90, 0]]
** centroid: 2, normalized-entropy: 0.9934142181800525, [(1, 109), (2, 90)]
*** center 3: selecting labels [1] (freq >= 1) [from [204, 0, 0]]
finished with 6 centroids; started with 3
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.18952440062258394] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18952440062258394, 0.15295967600820587] ***
*** starting iteration: 2; err: [Inf, 0.18952440062258394, 0.15295967600820587] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18952440062258394, 0.15295967600820587, 0.14853536727558822] ***
*** starting iteration: 3; err: [Inf, 0.18952440062258394, 0.15295967600820587, 0.14853536727558822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18952440062258394, 0.15295967600820587, 0.14853536727558822, 0.1474364548767917] ***
*** starting iteration: 4; err: [Inf, 0.18952440062258394, 0.15295967600820587, 0.14853536727558822, 0.1474364548767917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18952440062258394, 0.15295967600820587, 0.14853536727558822, 0.1474364548767917, 0.14705942586017773] ***
*** finished computation of 7 references, err: [Inf, 0.18952440062258394, 0.15295967600820587, 0.14853536727558822, 0.1474364548767917, 0.14705942586017773] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [182, 2, 0]]
** centroid: 1, normalized-entropy: 0.08650421412134586, [(1, 182), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [94, 23, 0]]
** centroid: 2, normalized-entropy: 0.7150375653354627, [(1, 94), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 69, 43]]
** centroid: 3, normalized-entropy: 0.960769458040784, [(2, 69), (3, 43)]
*** center 4: selecting labels [1] (freq >= 2) [from [161, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [8, 153, 0]]
** centroid: 5, normalized-entropy: 0.28507625741911563, [(1, 8), (2, 153)]
*** center 6: selecting labels [1] (freq >= 2) [from [136, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 127, 0]]
** centroid: 7, normalized-entropy: 0.11539039325220708, [(1, 2), (2, 127)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20040436688996852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20040436688996852, 0.14834714462608098] ***
*** starting iteration: 2; err: [Inf, 0.20040436688996852, 0.14834714462608098] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20040436688996852, 0.14834714462608098, 0.14367867834307255] ***
*** starting iteration: 3; err: [Inf, 0.20040436688996852, 0.14834714462608098, 0.14367867834307255] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20040436688996852, 0.14834714462608098, 0.14367867834307255, 0.14267300910316408] ***
*** starting iteration: 4; err: [Inf, 0.20040436688996852, 0.14834714462608098, 0.14367867834307255, 0.14267300910316408] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20040436688996852, 0.14834714462608098, 0.14367867834307255, 0.14267300910316408, 0.14250029245577753] ***
*** finished computation of 7 references, err: [Inf, 0.20040436688996852, 0.14834714462608098, 0.14367867834307255, 0.14267300910316408, 0.14250029245577753] ***
*** center 1: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 60, 14]]
** centroid: 2, normalized-entropy: 0.699772221773307, [(2, 60), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 9, 0]]
** centroid: 3, normalized-entropy: 0.6292492238560344, [(1, 48), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [77, 15, 0]]
** centroid: 4, normalized-entropy: 0.6415410585827175, [(1, 77), (2, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 47, 0]]
** centroid: 5, normalized-entropy: 0.9229192878686723, [(1, 24), (2, 47)]
*** center 6: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 67, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2011787086687982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2011787086687982, 0.14911093131732195] ***
*** starting iteration: 2; err: [Inf, 0.2011787086687982, 0.14911093131732195] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2011787086687982, 0.14911093131732195, 0.14469934812746943] ***
*** starting iteration: 3; err: [Inf, 0.2011787086687982, 0.14911093131732195, 0.14469934812746943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2011787086687982, 0.14911093131732195, 0.14469934812746943, 0.14428912752401082] ***
*** finished computation of 7 references, err: [Inf, 0.2011787086687982, 0.14911093131732195, 0.14469934812746943, 0.14428912752401082] ***
*** center 1: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 41, 22]]
** centroid: 2, normalized-entropy: 0.9333572600179806, [(2, 41), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [76, 4, 0]]
** centroid: 3, normalized-entropy: 0.2863969571159561, [(1, 76), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [79, 2, 0]]
** centroid: 4, normalized-entropy: 0.16702680404522793, [(1, 79), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 20, 0]]
** centroid: 5, normalized-entropy: 0.9015982354056711, [(1, 43), (2, 20)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 63, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1990495534837246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1990495534837246, 0.15268052001856267] ***
*** starting iteration: 2; err: [Inf, 0.1990495534837246, 0.15268052001856267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1990495534837246, 0.15268052001856267, 0.14832689452916384] ***
*** starting iteration: 3; err: [Inf, 0.1990495534837246, 0.15268052001856267, 0.14832689452916384] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1990495534837246, 0.15268052001856267, 0.14832689452916384, 0.146846249260474] ***
*** starting iteration: 4; err: [Inf, 0.1990495534837246, 0.15268052001856267, 0.14832689452916384, 0.146846249260474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1990495534837246, 0.15268052001856267, 0.14832689452916384, 0.146846249260474, 0.14644715237617492] ***
*** finished computation of 7 references, err: [Inf, 0.1990495534837246, 0.15268052001856267, 0.14832689452916384, 0.146846249260474, 0.14644715237617492] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [35, 16, 0]]
** centroid: 1, normalized-entropy: 0.8974271930876951, [(1, 35), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 11, 0]]
** centroid: 2, normalized-entropy: 0.6329208984823799, [(1, 58), (2, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 49, 23]]
** centroid: 4, normalized-entropy: 0.9037762882345833, [(2, 49), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 34, 0]]
** centroid: 5, normalized-entropy: 0.9837082626231858, [(1, 46), (2, 34)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [59, 2, 0]]
** centroid: 6, normalized-entropy: 0.20818094555717087, [(1, 59), (2, 2)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 85, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2032734407428652] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2032734407428652, 0.1526058565210551] ***
*** starting iteration: 2; err: [Inf, 0.2032734407428652, 0.1526058565210551] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2032734407428652, 0.1526058565210551, 0.148525753069669] ***
*** starting iteration: 3; err: [Inf, 0.2032734407428652, 0.1526058565210551, 0.148525753069669] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2032734407428652, 0.1526058565210551, 0.148525753069669, 0.14722990439273417] ***
*** starting iteration: 4; err: [Inf, 0.2032734407428652, 0.1526058565210551, 0.148525753069669, 0.14722990439273417] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2032734407428652, 0.1526058565210551, 0.148525753069669, 0.14722990439273417, 0.14662909185141326] ***
*** finished computation of 7 references, err: [Inf, 0.2032734407428652, 0.1526058565210551, 0.148525753069669, 0.14722990439273417, 0.14662909185141326] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [31, 43, 0]]
** centroid: 1, normalized-entropy: 0.9809470132751208, [(1, 31), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 8, 0]]
** centroid: 2, normalized-entropy: 0.5787946246321198, [(1, 50), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 54, 22]]
** centroid: 3, normalized-entropy: 0.8680403986166402, [(2, 54), (3, 22)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [47, 27, 0]]
** centroid: 4, normalized-entropy: 0.9466474387740499, [(1, 47), (2, 27)]
*** center 5: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 66, 0]]
** centroid: 6, normalized-entropy: 0.1914332548141934, [(1, 2), (2, 66)]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1917940039895475] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1917940039895475, 0.1513604218484834] ***
*** starting iteration: 2; err: [Inf, 0.1917940039895475, 0.1513604218484834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1917940039895475, 0.1513604218484834, 0.146686816284433] ***
*** starting iteration: 3; err: [Inf, 0.1917940039895475, 0.1513604218484834, 0.146686816284433] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1917940039895475, 0.1513604218484834, 0.146686816284433, 0.14562045164220036] ***
*** starting iteration: 4; err: [Inf, 0.1917940039895475, 0.1513604218484834, 0.146686816284433, 0.14562045164220036] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1917940039895475, 0.1513604218484834, 0.146686816284433, 0.14562045164220036, 0.14529992033727468] ***
*** finished computation of 7 references, err: [Inf, 0.1917940039895475, 0.1513604218484834, 0.146686816284433, 0.14562045164220036, 0.14529992033727468] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [8, 79, 0]]
** centroid: 1, normalized-entropy: 0.4429586785384856, [(1, 8), (2, 79)]
*** center 2: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 5, 0]]
** centroid: 3, normalized-entropy: 0.4186843105268563, [(1, 54), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [83, 3, 0]]
** centroid: 4, normalized-entropy: 0.21832103023746746, [(1, 83), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 2, 0]]
** centroid: 5, normalized-entropy: 0.18927843126120178, [(1, 67), (2, 2)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 72, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 28, 20]]
** centroid: 7, normalized-entropy: 0.9798687566511527, [(2, 28), (3, 20)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1856184738073498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1856184738073498, 0.147872610617429] ***
*** starting iteration: 2; err: [Inf, 0.1856184738073498, 0.147872610617429] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1856184738073498, 0.147872610617429, 0.1423892138618976] ***
*** starting iteration: 3; err: [Inf, 0.1856184738073498, 0.147872610617429, 0.1423892138618976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1856184738073498, 0.147872610617429, 0.1423892138618976, 0.14200277749821544] ***
*** finished computation of 7 references, err: [Inf, 0.1856184738073498, 0.147872610617429, 0.1423892138618976, 0.14200277749821544] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [59, 31, 0]]
** centroid: 1, normalized-entropy: 0.9290083681703216, [(1, 59), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [49, 13, 0]]
** centroid: 2, normalized-entropy: 0.7408656862339816, [(1, 49), (2, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 87, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [61, 8, 0]]
** centroid: 5, normalized-entropy: 0.5175827525559071, [(1, 61), (2, 8)]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 47, 23]]
** centroid: 7, normalized-entropy: 0.9134601452569628, [(2, 47), (3, 23)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19466809100843965] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19466809100843965, 0.15274843758996576] ***
*** starting iteration: 2; err: [Inf, 0.19466809100843965, 0.15274843758996576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19466809100843965, 0.15274843758996576, 0.14705563500896096] ***
*** starting iteration: 3; err: [Inf, 0.19466809100843965, 0.15274843758996576, 0.14705563500896096] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19466809100843965, 0.15274843758996576, 0.14705563500896096, 0.1454185108784586] ***
*** starting iteration: 4; err: [Inf, 0.19466809100843965, 0.15274843758996576, 0.14705563500896096, 0.1454185108784586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19466809100843965, 0.15274843758996576, 0.14705563500896096, 0.1454185108784586, 0.14469387236610054] ***
*** finished computation of 7 references, err: [Inf, 0.19466809100843965, 0.15274843758996576, 0.14705563500896096, 0.1454185108784586, 0.14469387236610054] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [91, 2, 0]]
** centroid: 1, normalized-entropy: 0.14981136747274781, [(1, 91), (2, 2)]
*** center 2: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 33, 18]]
** centroid: 3, normalized-entropy: 0.9366673818775627, [(2, 33), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [40, 22, 0]]
** centroid: 5, normalized-entropy: 0.9383153522334071, [(1, 40), (2, 22)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 55, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 72, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20069612023420633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20069612023420633, 0.14926567539712415] ***
*** starting iteration: 2; err: [Inf, 0.20069612023420633, 0.14926567539712415] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20069612023420633, 0.14926567539712415, 0.14439520363509656] ***
*** starting iteration: 3; err: [Inf, 0.20069612023420633, 0.14926567539712415, 0.14439520363509656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20069612023420633, 0.14926567539712415, 0.14439520363509656, 0.1435333991618827] ***
*** finished computation of 7 references, err: [Inf, 0.20069612023420633, 0.14926567539712415, 0.14439520363509656, 0.1435333991618827] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [64, 7, 0]]
** centroid: 1, normalized-entropy: 0.4645149440905521, [(1, 64), (2, 7)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 34, 22]]
** centroid: 2, normalized-entropy: 0.9666186325481027, [(2, 34), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [77, 8, 0]]
** centroid: 3, normalized-entropy: 0.4500666580964382, [(1, 77), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [64, 5, 0]]
** centroid: 4, normalized-entropy: 0.3750514064240124, [(1, 64), (2, 5)]
*** center 5: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 72, 0]]
** centroid: 6, normalized-entropy: 0.34673146824966367, [(1, 5), (2, 72)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 63, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18682390349917113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18682390349917113, 0.1547515540146269] ***
*** starting iteration: 2; err: [Inf, 0.18682390349917113, 0.1547515540146269] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18682390349917113, 0.1547515540146269, 0.15161887149699033] ***
*** starting iteration: 3; err: [Inf, 0.18682390349917113, 0.1547515540146269, 0.15161887149699033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18682390349917113, 0.1547515540146269, 0.15161887149699033, 0.1502934673000127] ***
*** starting iteration: 4; err: [Inf, 0.18682390349917113, 0.1547515540146269, 0.15161887149699033, 0.1502934673000127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18682390349917113, 0.1547515540146269, 0.15161887149699033, 0.1502934673000127, 0.149688284965232] ***
*** finished computation of 7 references, err: [Inf, 0.18682390349917113, 0.1547515540146269, 0.15161887149699033, 0.1502934673000127, 0.149688284965232] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 49, 19]]
** centroid: 1, normalized-entropy: 0.8546480601169081, [(2, 49), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 12, 0]]
** centroid: 5, normalized-entropy: 0.6193821946787638, [(1, 66), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 64, 0]]
** centroid: 6, normalized-entropy: 0.4220005168831531, [(1, 6), (2, 64)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 68, 0]]
** centroid: 7, normalized-entropy: 0.25253077151613923, [(1, 3), (2, 68)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18688132797926665] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18688132797926665, 0.15244171204138549] ***
*** starting iteration: 2; err: [Inf, 0.18688132797926665, 0.15244171204138549] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18688132797926665, 0.15244171204138549, 0.14718695709481835] ***
*** starting iteration: 3; err: [Inf, 0.18688132797926665, 0.15244171204138549, 0.14718695709481835] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18688132797926665, 0.15244171204138549, 0.14718695709481835, 0.14565552109200508] ***
*** starting iteration: 4; err: [Inf, 0.18688132797926665, 0.15244171204138549, 0.14718695709481835, 0.14565552109200508] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18688132797926665, 0.15244171204138549, 0.14718695709481835, 0.14565552109200508, 0.14522456670552492] ***
*** finished computation of 7 references, err: [Inf, 0.18688132797926665, 0.15244171204138549, 0.14718695709481835, 0.14565552109200508, 0.14522456670552492] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 63, 19]]
** centroid: 1, normalized-entropy: 0.7809756883263416, [(2, 63), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [67, 8, 0]]
** centroid: 3, normalized-entropy: 0.48977901368693744, [(1, 67), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 27, 0]]
** centroid: 4, normalized-entropy: 0.8935711016541908, [(1, 60), (2, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 22, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 44), (2, 22)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 69, 3]]
** centroid: 6, normalized-entropy: 0.24988229283318547, [(2, 69), (3, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19150503366813063] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19150503366813063, 0.1497568721100688] ***
*** starting iteration: 2; err: [Inf, 0.19150503366813063, 0.1497568721100688] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19150503366813063, 0.1497568721100688, 0.1469205233771354] ***
*** starting iteration: 3; err: [Inf, 0.19150503366813063, 0.1497568721100688, 0.1469205233771354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19150503366813063, 0.1497568721100688, 0.1469205233771354, 0.14619247707352043] ***
*** finished computation of 7 references, err: [Inf, 0.19150503366813063, 0.1497568721100688, 0.1469205233771354, 0.14619247707352043] ***
*** center 1: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 32, 26]]
** centroid: 2, normalized-entropy: 0.9922666387194963, [(2, 32), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 11, 0]]
** centroid: 3, normalized-entropy: 0.6220403090607189, [(1, 60), (2, 11)]
*** center 4: selecting labels [2] (freq >= 2) [from [1, 62, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 75, 0]]
** centroid: 6, normalized-entropy: 0.4574321808988397, [(1, 8), (2, 75)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [56, 2, 0]]
** centroid: 7, normalized-entropy: 0.21639693245126485, [(1, 56), (2, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19118373396247626] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19118373396247626, 0.1475732654556632] ***
*** starting iteration: 2; err: [Inf, 0.19118373396247626, 0.1475732654556632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19118373396247626, 0.1475732654556632, 0.1454886959316209] ***
*** starting iteration: 3; err: [Inf, 0.19118373396247626, 0.1475732654556632, 0.1454886959316209] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19118373396247626, 0.1475732654556632, 0.1454886959316209, 0.1449876375417225] ***
*** finished computation of 7 references, err: [Inf, 0.19118373396247626, 0.1475732654556632, 0.1454886959316209, 0.1449876375417225] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [40, 18, 0]]
** centroid: 1, normalized-entropy: 0.8935711016541908, [(1, 40), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [78, 22, 0]]
** centroid: 2, normalized-entropy: 0.7601675029619658, [(1, 78), (2, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 61, 20]]
** centroid: 4, normalized-entropy: 0.8063495153650776, [(2, 61), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [48, 19, 0]]
** centroid: 5, normalized-entropy: 0.8602858652332406, [(1, 48), (2, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 67, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1927176264366135] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1927176264366135, 0.15184546561772003] ***
*** starting iteration: 2; err: [Inf, 0.1927176264366135, 0.15184546561772003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1927176264366135, 0.15184546561772003, 0.14874907469190657] ***
*** starting iteration: 3; err: [Inf, 0.1927176264366135, 0.15184546561772003, 0.14874907469190657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1927176264366135, 0.15184546561772003, 0.14874907469190657, 0.14723646621499212] ***
*** starting iteration: 4; err: [Inf, 0.1927176264366135, 0.15184546561772003, 0.14874907469190657, 0.14723646621499212] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1927176264366135, 0.15184546561772003, 0.14874907469190657, 0.14723646621499212, 0.14657928170263768] ***
*** finished computation of 7 references, err: [Inf, 0.1927176264366135, 0.15184546561772003, 0.14874907469190657, 0.14723646621499212, 0.14657928170263768] ***
*** center 1: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 65, 18]]
** centroid: 2, normalized-entropy: 0.7544062039636575, [(2, 65), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 28, 0]]
** centroid: 3, normalized-entropy: 0.9456603046006401, [(1, 49), (2, 28)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [47, 22, 0]]
** centroid: 4, normalized-entropy: 0.903116172156872, [(1, 47), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 66, 0]]
** centroid: 5, normalized-entropy: 0.4138168503036336, [(1, 6), (2, 66)]
*** center 6: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18386329955235123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18386329955235123, 0.14783515158575028] ***
*** starting iteration: 2; err: [Inf, 0.18386329955235123, 0.14783515158575028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18386329955235123, 0.14783515158575028, 0.1439622944172006] ***
*** starting iteration: 3; err: [Inf, 0.18386329955235123, 0.14783515158575028, 0.1439622944172006] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18386329955235123, 0.14783515158575028, 0.1439622944172006, 0.14329805157519876] ***
*** finished computation of 7 references, err: [Inf, 0.18386329955235123, 0.14783515158575028, 0.1439622944172006, 0.14329805157519876] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [80, 12, 0]]
** centroid: 1, normalized-entropy: 0.5586293734521991, [(1, 80), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 8, 0]]
** centroid: 2, normalized-entropy: 0.572580465623769, [(1, 51), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 43, 20]]
** centroid: 3, normalized-entropy: 0.9015982354056711, [(2, 43), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 61, 0]]
** centroid: 5, normalized-entropy: 0.43497348007474274, [(1, 6), (2, 61)]
*** center 6: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 72, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18930885508470238] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18930885508470238, 0.1537706191688776] ***
*** starting iteration: 2; err: [Inf, 0.18930885508470238, 0.1537706191688776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18930885508470238, 0.1537706191688776, 0.14987189044244587] ***
*** starting iteration: 3; err: [Inf, 0.18930885508470238, 0.1537706191688776, 0.14987189044244587] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18930885508470238, 0.1537706191688776, 0.14987189044244587, 0.14911813123896717] ***
*** finished computation of 7 references, err: [Inf, 0.18930885508470238, 0.1537706191688776, 0.14987189044244587, 0.14911813123896717] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 67, 25]]
** centroid: 1, normalized-entropy: 0.8439491244805034, [(2, 67), (3, 25)]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 7, 0]]
** centroid: 3, normalized-entropy: 0.54991090463341, [(1, 48), (2, 7)]
*** center 4: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [74, 6, 0]]
** centroid: 5, normalized-entropy: 0.3843115441264972, [(1, 74), (2, 6)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 63, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [25, 44, 0]]
** centroid: 7, normalized-entropy: 0.9445911819316588, [(1, 25), (2, 44)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18213338729087264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18213338729087264, 0.15403962935507298] ***
*** starting iteration: 2; err: [Inf, 0.18213338729087264, 0.15403962935507298] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18213338729087264, 0.15403962935507298, 0.15144841627776623] ***
*** starting iteration: 3; err: [Inf, 0.18213338729087264, 0.15403962935507298, 0.15144841627776623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18213338729087264, 0.15403962935507298, 0.15144841627776623, 0.15089067304134368] ***
*** finished computation of 7 references, err: [Inf, 0.18213338729087264, 0.15403962935507298, 0.15144841627776623, 0.15089067304134368] ***
*** center 1: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 43, 19]]
** centroid: 2, normalized-entropy: 0.8890349038123858, [(2, 43), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 7, 0]]
** centroid: 3, normalized-entropy: 0.5564215672884282, [(1, 47), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [70, 4, 0]]
** centroid: 4, normalized-entropy: 0.30337483608641397, [(1, 70), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 67, 0]]
** centroid: 5, normalized-entropy: 0.5869185834047994, [(1, 11), (2, 67)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [10, 58, 0]]
** centroid: 6, normalized-entropy: 0.6024308020404452, [(1, 10), (2, 58)]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19614875584281982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19614875584281982, 0.15235678435117006] ***
*** starting iteration: 2; err: [Inf, 0.19614875584281982, 0.15235678435117006] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19614875584281982, 0.15235678435117006, 0.1476663291505538] ***
*** starting iteration: 3; err: [Inf, 0.19614875584281982, 0.15235678435117006, 0.1476663291505538] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19614875584281982, 0.15235678435117006, 0.1476663291505538, 0.146574134595925] ***
*** starting iteration: 4; err: [Inf, 0.19614875584281982, 0.15235678435117006, 0.1476663291505538, 0.146574134595925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19614875584281982, 0.15235678435117006, 0.1476663291505538, 0.146574134595925, 0.1461328705297783] ***
*** finished computation of 7 references, err: [Inf, 0.19614875584281982, 0.15235678435117006, 0.1476663291505538, 0.146574134595925, 0.1461328705297783] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 41, 24]]
** centroid: 2, normalized-entropy: 0.9500796252338518, [(2, 41), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [44, 17, 0]]
** centroid: 3, normalized-entropy: 0.8536576732793314, [(1, 44), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [93, 5, 0]]
** centroid: 4, normalized-entropy: 0.290715865467415, [(1, 93), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 61, 0]]
** centroid: 5, normalized-entropy: 0.6944460704939805, [(1, 14), (2, 61)]
*** center 6: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 64, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18290869455784559] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18290869455784559, 0.1522428272254765] ***
*** starting iteration: 2; err: [Inf, 0.18290869455784559, 0.1522428272254765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18290869455784559, 0.1522428272254765, 0.14761467049643398] ***
*** starting iteration: 3; err: [Inf, 0.18290869455784559, 0.1522428272254765, 0.14761467049643398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18290869455784559, 0.1522428272254765, 0.14761467049643398, 0.1452863442339003] ***
*** starting iteration: 4; err: [Inf, 0.18290869455784559, 0.1522428272254765, 0.14761467049643398, 0.1452863442339003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18290869455784559, 0.1522428272254765, 0.14761467049643398, 0.1452863442339003, 0.14396708025969565] ***
*** starting iteration: 5; err: [Inf, 0.18290869455784559, 0.1522428272254765, 0.14761467049643398, 0.1452863442339003, 0.14396708025969565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18290869455784559, 0.1522428272254765, 0.14761467049643398, 0.1452863442339003, 0.14396708025969565, 0.14322956144064664] ***
*** finished computation of 7 references, err: [Inf, 0.18290869455784559, 0.1522428272254765, 0.14761467049643398, 0.1452863442339003, 0.14396708025969565, 0.14322956144064664] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 19, 0]]
** centroid: 1, normalized-entropy: 0.7809756883263416, [(1, 63), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [37, 20, 0]]
** centroid: 2, normalized-entropy: 0.9348490242345946, [(1, 37), (2, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 65, 23]]
** centroid: 4, normalized-entropy: 0.828797154590015, [(2, 65), (3, 23)]
*** center 5: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 80, 0]]
** centroid: 6, normalized-entropy: 0.16542703399626665, [(1, 2), (2, 80)]
*** center 7: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18049756403639913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18049756403639913, 0.1490838034246117] ***
*** starting iteration: 2; err: [Inf, 0.18049756403639913, 0.1490838034246117] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18049756403639913, 0.1490838034246117, 0.1454140464431839] ***
*** starting iteration: 3; err: [Inf, 0.18049756403639913, 0.1490838034246117, 0.1454140464431839] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18049756403639913, 0.1490838034246117, 0.1454140464431839, 0.14427482577506454] ***
*** starting iteration: 4; err: [Inf, 0.18049756403639913, 0.1490838034246117, 0.1454140464431839, 0.14427482577506454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18049756403639913, 0.1490838034246117, 0.1454140464431839, 0.14427482577506454, 0.1437998059024103] ***
*** finished computation of 7 references, err: [Inf, 0.18049756403639913, 0.1490838034246117, 0.1454140464431839, 0.14427482577506454, 0.1437998059024103] ***
*** center 1: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 36, 24]]
** centroid: 2, normalized-entropy: 0.9709505944546688, [(2, 36), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 11, 0]]
** centroid: 3, normalized-entropy: 0.7076690004167966, [(1, 46), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [82, 3, 0]]
** centroid: 4, normalized-entropy: 0.22028326695127437, [(1, 82), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 77, 0]]
** centroid: 5, normalized-entropy: 0.3744088453489206, [(1, 6), (2, 77)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 50, 0]]
** centroid: 6, normalized-entropy: 0.5373760853377334, [(1, 7), (2, 50)]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19565670304372906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19565670304372906, 0.1516244918908924] ***
*** starting iteration: 2; err: [Inf, 0.19565670304372906, 0.1516244918908924] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19565670304372906, 0.1516244918908924, 0.14735100144427268] ***
*** starting iteration: 3; err: [Inf, 0.19565670304372906, 0.1516244918908924, 0.14735100144427268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19565670304372906, 0.1516244918908924, 0.14735100144427268, 0.14634906779136508] ***
*** starting iteration: 4; err: [Inf, 0.19565670304372906, 0.1516244918908924, 0.14735100144427268, 0.14634906779136508] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19565670304372906, 0.1516244918908924, 0.14735100144427268, 0.14634906779136508, 0.1460832530837506] ***
*** finished computation of 7 references, err: [Inf, 0.19565670304372906, 0.1516244918908924, 0.14735100144427268, 0.14634906779136508, 0.1460832530837506] ***
*** center 1: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 60, 18]]
** centroid: 2, normalized-entropy: 0.7793498372920851, [(2, 60), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [61, 11, 0]]
** centroid: 3, normalized-entropy: 0.6167482598263911, [(1, 61), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 27, 0]]
** centroid: 4, normalized-entropy: 0.9018043446575508, [(1, 58), (2, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [26, 49, 0]]
** centroid: 5, normalized-entropy: 0.9310558233850329, [(1, 26), (2, 49)]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 50, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20716499090287835] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20716499090287835, 0.14992965655587615] ***
*** starting iteration: 2; err: [Inf, 0.20716499090287835, 0.14992965655587615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20716499090287835, 0.14992965655587615, 0.14552980312891303] ***
*** starting iteration: 3; err: [Inf, 0.20716499090287835, 0.14992965655587615, 0.14552980312891303] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20716499090287835, 0.14992965655587615, 0.14552980312891303, 0.14491527739726007] ***
*** finished computation of 7 references, err: [Inf, 0.20716499090287835, 0.14992965655587615, 0.14552980312891303, 0.14491527739726007] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [61, 21, 0]]
** centroid: 1, normalized-entropy: 0.8208002549877175, [(1, 61), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [72, 3, 0]]
** centroid: 2, normalized-entropy: 0.24229218908241482, [(1, 72), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 51, 21]]
** centroid: 3, normalized-entropy: 0.8708644692353648, [(2, 51), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 33, 0]]
** centroid: 5, normalized-entropy: 0.998363672593813, [(1, 30), (2, 33)]
*** center 6: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 65, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1925584232788533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1925584232788533, 0.15308927246322857] ***
*** starting iteration: 2; err: [Inf, 0.1925584232788533, 0.15308927246322857] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1925584232788533, 0.15308927246322857, 0.14734387409314514] ***
*** starting iteration: 3; err: [Inf, 0.1925584232788533, 0.15308927246322857, 0.14734387409314514] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1925584232788533, 0.15308927246322857, 0.14734387409314514, 0.14584626425895839] ***
*** starting iteration: 4; err: [Inf, 0.1925584232788533, 0.15308927246322857, 0.14734387409314514, 0.14584626425895839] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1925584232788533, 0.15308927246322857, 0.14734387409314514, 0.14584626425895839, 0.1455345228649676] ***
*** finished computation of 7 references, err: [Inf, 0.1925584232788533, 0.15308927246322857, 0.14734387409314514, 0.14584626425895839, 0.1455345228649676] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 77, 11]]
** centroid: 1, normalized-entropy: 0.5435644431995963, [(2, 77), (3, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 15, 0]]
** centroid: 3, normalized-entropy: 0.7273006785144036, [(1, 59), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [66, 9, 0]]
** centroid: 4, normalized-entropy: 0.5293608652873645, [(1, 66), (2, 9)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [70, 3, 0]]
** centroid: 5, normalized-entropy: 0.24729443986205674, [(1, 70), (2, 3)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 59, 14]]
** centroid: 6, normalized-entropy: 0.7051819722888517, [(2, 59), (3, 14)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [38, 14, 0]]
** centroid: 7, normalized-entropy: 0.8403586716091169, [(1, 38), (2, 14)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19100302708894015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19100302708894015, 0.1509023682065308] ***
*** starting iteration: 2; err: [Inf, 0.19100302708894015, 0.1509023682065308] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19100302708894015, 0.1509023682065308, 0.1478898311033845] ***
*** starting iteration: 3; err: [Inf, 0.19100302708894015, 0.1509023682065308, 0.1478898311033845] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19100302708894015, 0.1509023682065308, 0.1478898311033845, 0.1475323679856956] ***
*** finished computation of 7 references, err: [Inf, 0.19100302708894015, 0.1509023682065308, 0.1478898311033845, 0.1475323679856956] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 86, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 24, 0]]
** centroid: 3, normalized-entropy: 0.9411864371816836, [(1, 43), (2, 24)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [47, 17, 0]]
** centroid: 4, normalized-entropy: 0.8351164948421137, [(1, 47), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [68, 4, 0]]
** centroid: 5, normalized-entropy: 0.3095434291503252, [(1, 68), (2, 4)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 53, 21]]
** centroid: 6, normalized-entropy: 0.8605553930586318, [(2, 53), (3, 21)]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18772461451217531] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18772461451217531, 0.15087935022171586] ***
*** starting iteration: 2; err: [Inf, 0.18772461451217531, 0.15087935022171586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18772461451217531, 0.15087935022171586, 0.14868607204779982] ***
*** starting iteration: 3; err: [Inf, 0.18772461451217531, 0.15087935022171586, 0.14868607204779982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18772461451217531, 0.15087935022171586, 0.14868607204779982, 0.14806283191218972] ***
*** finished computation of 7 references, err: [Inf, 0.18772461451217531, 0.15087935022171586, 0.14868607204779982, 0.14806283191218972] ***
*** center 1: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 40, 24]]
** centroid: 2, normalized-entropy: 0.954434002924965, [(2, 40), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [72, 9, 0]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(1, 72), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [3, 47, 0]]
** centroid: 4, normalized-entropy: 0.3274449191544762, [(1, 3), (2, 47)]
*** center 5: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 68, 0]]
** centroid: 6, normalized-entropy: 0.5822463050121238, [(1, 11), (2, 68)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [62, 3, 0]]
** centroid: 7, normalized-entropy: 0.269828447703074, [(1, 62), (2, 3)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19870702749490737] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19870702749490737, 0.1531249025175348] ***
*** starting iteration: 2; err: [Inf, 0.19870702749490737, 0.1531249025175348] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19870702749490737, 0.1531249025175348, 0.1493553451541811] ***
*** starting iteration: 3; err: [Inf, 0.19870702749490737, 0.1531249025175348, 0.1493553451541811] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19870702749490737, 0.1531249025175348, 0.1493553451541811, 0.1484220749028027] ***
*** finished computation of 7 references, err: [Inf, 0.19870702749490737, 0.1531249025175348, 0.1493553451541811, 0.1484220749028027] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [30, 34, 0]]
** centroid: 1, normalized-entropy: 0.9971803988942641, [(1, 30), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [43, 21, 0]]
** centroid: 2, normalized-entropy: 0.912999213585247, [(1, 43), (2, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 75, 23]]
** centroid: 4, normalized-entropy: 0.7861044688447759, [(2, 75), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 53, 0]]
** centroid: 5, normalized-entropy: 0.8605553930586318, [(1, 21), (2, 53)]
*** center 6: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20471035549044608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20471035549044608, 0.1531016741003841] ***
*** starting iteration: 2; err: [Inf, 0.20471035549044608, 0.1531016741003841] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20471035549044608, 0.1531016741003841, 0.14937375922687351] ***
*** starting iteration: 3; err: [Inf, 0.20471035549044608, 0.1531016741003841, 0.14937375922687351] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20471035549044608, 0.1531016741003841, 0.14937375922687351, 0.14899521401058882] ***
*** finished computation of 7 references, err: [Inf, 0.20471035549044608, 0.1531016741003841, 0.14937375922687351, 0.14899521401058882] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [51, 35, 0]]
** centroid: 1, normalized-entropy: 0.9748857077995388, [(1, 51), (2, 35)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 32, 0]]
** centroid: 2, normalized-entropy: 0.9738354819891416, [(1, 47), (2, 32)]
*** center 3: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 72, 16]]
** centroid: 4, normalized-entropy: 0.6840384356390419, [(2, 72), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 51, 0]]
** centroid: 5, normalized-entropy: 0.7281342378690551, [(1, 13), (2, 51)]
*** center 6: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19449927897937597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19449927897937597, 0.15298258438892662] ***
*** starting iteration: 2; err: [Inf, 0.19449927897937597, 0.15298258438892662] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19449927897937597, 0.15298258438892662, 0.14960304767917842] ***
*** starting iteration: 3; err: [Inf, 0.19449927897937597, 0.15298258438892662, 0.14960304767917842] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19449927897937597, 0.15298258438892662, 0.14960304767917842, 0.14884934557043017] ***
*** finished computation of 7 references, err: [Inf, 0.19449927897937597, 0.15298258438892662, 0.14960304767917842, 0.14884934557043017] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 64, 21]]
** centroid: 1, normalized-entropy: 0.806583102274714, [(2, 64), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [42, 7, 0]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(1, 42), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [75, 15, 0]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(1, 75), (2, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 28, 0]]
** centroid: 5, normalized-entropy: 0.9742408334889756, [(1, 41), (2, 28)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19195925834216176] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19195925834216176, 0.1548152961935848] ***
*** starting iteration: 2; err: [Inf, 0.19195925834216176, 0.1548152961935848] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19195925834216176, 0.1548152961935848, 0.1508927901890129] ***
*** starting iteration: 3; err: [Inf, 0.19195925834216176, 0.1548152961935848, 0.1508927901890129] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19195925834216176, 0.1548152961935848, 0.1508927901890129, 0.15034211443550885] ***
*** finished computation of 7 references, err: [Inf, 0.19195925834216176, 0.1548152961935848, 0.1508927901890129, 0.15034211443550885] ***
*** center 1: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 11, 0]]
** centroid: 2, normalized-entropy: 0.6807937753703207, [(1, 50), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 38, 19]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 38), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [7, 69, 0]]
** centroid: 5, normalized-entropy: 0.4434581453896789, [(1, 7), (2, 69)]
*** center 6: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18535255076549947] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18535255076549947, 0.1482529631201178] ***
*** starting iteration: 2; err: [Inf, 0.18535255076549947, 0.1482529631201178] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18535255076549947, 0.1482529631201178, 0.14631869545765222] ***
*** starting iteration: 3; err: [Inf, 0.18535255076549947, 0.1482529631201178, 0.14631869545765222] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18535255076549947, 0.1482529631201178, 0.14631869545765222, 0.1460017205979675] ***
*** finished computation of 7 references, err: [Inf, 0.18535255076549947, 0.1482529631201178, 0.14631869545765222, 0.1460017205979675] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [67, 12, 0]]
** centroid: 1, normalized-entropy: 0.6145715612236268, [(1, 67), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 19, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 57), (2, 19)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 49, 25]]
** centroid: 3, normalized-entropy: 0.9227346209530939, [(2, 49), (3, 25)]
*** center 4: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [26, 47, 0]]
** centroid: 5, normalized-entropy: 0.9394532068181357, [(1, 26), (2, 47)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 57, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18748474926874042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18748474926874042, 0.15505081565957515] ***
*** starting iteration: 2; err: [Inf, 0.18748474926874042, 0.15505081565957515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18748474926874042, 0.15505081565957515, 0.15161082244105636] ***
*** starting iteration: 3; err: [Inf, 0.18748474926874042, 0.15505081565957515, 0.15161082244105636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18748474926874042, 0.15505081565957515, 0.15161082244105636, 0.15089972953870892] ***
*** finished computation of 7 references, err: [Inf, 0.18748474926874042, 0.15505081565957515, 0.15161082244105636, 0.15089972953870892] ***
*** center 1: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 14, 0]]
** centroid: 2, normalized-entropy: 0.710676853856123, [(1, 58), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 47, 23]]
** centroid: 3, normalized-entropy: 0.9134601452569628, [(2, 47), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 41, 0]]
** centroid: 5, normalized-entropy: 0.9571814385446724, [(1, 25), (2, 41)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [47, 31, 0]]
** centroid: 6, normalized-entropy: 0.9694309156463241, [(1, 47), (2, 31)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 50, 1]]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 374,3 => 43,1 => 583), Dict(2 => 356,3 => 40,1 => 604))
[ Info: ===== scores for single classifier: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.9772242478359005,"macro_f1":0.9525830034543241,"accuracy":0.965,"class_f1":{"2":0.9519890260631,"3":0.9302325581395349,"1":0.9755274261603375},"class_precision":{"2":0.9302949061662198,"3":0.8695652173913043,"1":0.9948364888123924},"class_recall":{"2":0.9747191011235955,"3":1.0,"1":0.956953642384106}}
[ Info: ===== scores for 1: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9645881389984373,"macro_f1":0.9489889229987535,"accuracy":0.971,"class_f1":{"2":0.9597780859916782,"3":0.9047619047619048,"1":0.9824267782426779},"class_precision":{"2":0.947945205479452,"3":0.8636363636363636,"1":0.9932318104906938},"class_recall":{"2":0.9719101123595506,"3":0.95,"1":0.9718543046357616}}
[ Info: ===== scores for 5: {"micro_f1":0.972,"precision":0.972,"recall":0.972,"macro_recall":0.9678311878363965,"macro_f1":0.9602383944244238,"accuracy":0.972,"class_f1":{"2":0.9618528610354223,"3":0.9382716049382716,"1":0.980590717299578},"class_precision":{"2":0.9338624338624338,"3":0.926829268292683,"1":1.0},"class_recall":{"2":0.9915730337078652,"3":0.95,"1":0.9619205298013245}}
[ Info: ===== scores for 7: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9672297045911153,"macro_f1":0.9539056669385575,"accuracy":0.973,"class_f1":{"2":0.9628610729023385,"3":0.9156626506024096,"1":0.9831932773109243},"class_precision":{"2":0.9433962264150944,"3":0.8837209302325582,"1":0.9982935153583617},"class_recall":{"2":0.9831460674157303,"3":0.95,"1":0.9685430463576159}}
[ Info: ===== scores for 9: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9755630379244487,"macro_f1":0.9586506779020149,"accuracy":0.974,"class_f1":{"2":0.9641873278236914,"3":0.9285714285714285,"1":0.9831932773109243},"class_precision":{"2":0.9459459459459459,"3":0.8863636363636364,"1":0.9982935153583617},"class_recall":{"2":0.9831460674157303,"3":0.975,"1":0.9685430463576159}}
[ Info: ===== scores for 11: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9759474911327728,"macro_f1":0.9586740420073753,"accuracy":0.974,"class_f1":{"2":0.9642857142857143,"3":0.9285714285714285,"1":0.9831649831649832},"class_precision":{"2":0.9435483870967742,"3":0.8863636363636364,"1":1.0},"class_recall":{"2":0.9859550561797753,"3":0.975,"1":0.9668874172185431}}
(score = 0.974, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.972, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.974,"k":1,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9514497606468734,"macro_f1":0.949654625977121,"accuracy":0.974,"class_f1":{"2":0.9639889196675899,"3":0.9,"1":0.984974958263773},"class_precision":{"2":0.9508196721311475,"3":0.9,"1":0.9932659932659933},"class_recall":{"2":0.9775280898876404,"3":0.9,"1":0.9768211920529801}}
Test Summary: | Pass  Total
AKNC          |    8      8
[6, 4, 5, 5, 5, 5, 5, 2, 2, 6, 3, 12, 9, 8, 4, 31, 3, 15, 6, 3, 2, 3, 2, 5, 6, 14, 5, 1, 5, 4, 4, 2, 8, 64, 5, 155, 1, 3, 7, 10, 81, 3, 9, 8, 12, 87, 2, 8, 6, 33, 24, 1, 26, 15, 2, 5, 2, 1, 84, 1, 6, 57, 12, 62, 12, 8, 3, 119, 10, 7, 10, 11, 1, 11, 20, 7, 15, 72, 14, 2, 36, 3, 23, 29, 1, 3, 37, 6, 22, 12, 13, 14, 24, 29, 9, 6, 4, 6, 22, 3, 9, 24, 291, 11, 4, 10, 7, 23, 81, 17, 3, 4, 87, 4, 35, 7, 20, 53, 7, 29, 64, 5, 20, 44, 29, 38, 107, 44, 15, 61, 9, 7, 4, 12, 4, 24, 7, 267, 40, 3, 6, 5, 9, 2, 5, 1, 6, 290, 104, 1, 2, 22, 24, 190, 39, 76, 20, 14, 23, 15, 2, 15, 11, 7, 53, 27, 5, 51, 130, 4, 11, 4, 51, 5, 21, 19, 17, 22, 11, 134, 1129, 11, 26, 51, 27, 88, 15, 2, 11, 9, 25, 5, 3, 13, 19, 5, 5, 22, 3, 7, 124, 53, 2, 34, 14, 154, 9, 18, 73, 68, 5, 27, 7, 41, 44, 5, 12, 55, 59, 65, 13, 74, 46, 34, 17, 1, 25, 3, 7, 364, 4, 126, 17, 8, 1, 127, 3, 26, 28, 6, 11, 5, 9, 32, 35, 17, 79, 26, 6, 9, 60, 251, 51, 11, 2, 13, 76, 29, 7, 15, 40, 15, 23, 4, 36, 76, 19, 5, 226, 25, 20, 34, 7, 26, 44, 19, 7, 7, 32, 29, 9, 13, 43, 16, 28, 65, 6, 12, 16, 55, 25, 58, 8, 8, 77, 49, 92, 63, 23, 21]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6140000000000001, speedup = 0.27324493959722046, eval_ratio = 0.079239)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4173177083333333,"recall":0.3967013888888889,"f1":null,"seconds":0.0001919865608215332,"exhaustive_search_seconds":0.0003540161997079849,"evaluations":522.1171875,"distances_sum":1742.5263847142446}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.572048611111111,"recall":0.572048611111111,"f1":null,"seconds":0.0006358250975608826,"exhaustive_search_seconds":0.0003540161997079849,"evaluations":648.2734375,"distances_sum":1702.0815910726124}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6770833333333328,"recall":0.6770833333333328,"f1":0.6770833333333328,"seconds":0.00038049183785915375,"exhaustive_search_seconds":0.0003540161997079849,"evaluations":795.09375,"distances_sum":1642.0715782751133}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7508680555555551,"recall":0.7508680555555551,"f1":0.7508680555555551,"seconds":0.00043595582246780396,"exhaustive_search_seconds":0.0003540161997079849,"evaluations":885.7734375,"distances_sum":1612.8012100482142}
KCenters.DeloneInvIndex> reached performance {"precision":0.8020833333333327,"recall":0.8020833333333327,"f1":0.8020833333333327,"seconds":0.0005365386605262756,"exhaustive_search_seconds":0.0003540161997079849,"evaluations":1022.0390625,"distances_sum":1593.8465667739238}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7619999999999998, speedup = 0.5948358218154363, eval_ratio = 0.113399)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
