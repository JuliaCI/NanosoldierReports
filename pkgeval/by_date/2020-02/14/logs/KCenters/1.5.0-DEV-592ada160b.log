Julia Version 1.5.0-DEV.267
Commit 592ada160b (2020-02-13 16:56 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed LearnBase ─────────────────── v0.2.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed Missings ──────────────────── v0.4.3
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed KCenters ──────────────────── v0.2.1
  Installed JSON ──────────────────────── v0.21.0
  Installed DataFrames ────────────────── v0.20.2
  Installed DataAPI ───────────────────── v1.1.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed TableTraits ───────────────── v1.0.0
  Installed Reexport ──────────────────── v0.2.0
  Installed Compat ────────────────────── v3.5.0
  Installed DataStructures ────────────── v0.17.9
  Installed StatsBase ─────────────────── v0.32.0
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Parsers ───────────────────── v0.3.11
  Installed MLDataPattern ─────────────── v0.5.0
  Installed MLDataUtils ───────────────── v0.5.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed InvertedIndices ───────────── v1.0.0
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed Tables ────────────────────── v1.0.1
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.1
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.5.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.1
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.1
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_TjvfRV/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.5.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.1
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.1
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9364293802777927
[ Info: 0.8302954188982645
[ Info: 0.5548521900673707
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.32481760886808236
mean(cdnet.distances) = 0.3374423473328352
mean(crand.distances) = 0.3508567714691162
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2421875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2421875,"f1":null,"seconds":4.291534423828125e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":6.7890625,"distances_sum":682.1019120436533}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.216796875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.216796875,"f1":null,"seconds":3.6172568798065186e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":6.75,"distances_sum":614.7485882480207}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2333984375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2333984375,"f1":null,"seconds":3.680586814880371e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":6.7890625,"distances_sum":655.3664255756671}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2421875,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.2421875,"f1":null,"seconds":4.291534423828125e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":6.7890625,"distances_sum":682.1019120436533}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8718666749916758,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.7734375,"distances_sum":2315.6896946013685}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4619140625, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4619140625,"f1":null,"seconds":4.192814230918884e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":6.9296875,"distances_sum":1298.1477579612153}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5810546875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5810546875,"f1":0.7191966020091024,"seconds":4.854053258895874e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":7.8203125,"distances_sum":1641.0796816925574}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4306640625, conf: {"ssize":7,"bsize":2}, perf: {"precision":null,"recall":0.4306640625,"f1":null,"seconds":4.189088940620422e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":6.890625,"distances_sum":1177.9091141790902}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8668935231435241,"seconds":9.236857295036316e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.6796875,"distances_sum":2247.831294794171}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7001953125, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.7001953125,"f1":0.8157738095238104,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.375,"distances_sum":2002.0184529319035}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.783203125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.783203125,"f1":0.8718666749916758,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.7734375,"distances_sum":2315.6896946013685}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9413060897435903,"seconds":6.446614861488342e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.96875,"distances_sum":2779.596604379756}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9584337537462543,"seconds":6.718561053276062e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.9453125,"distances_sum":2918.7621398795923}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9318827006327011,"seconds":6.258487701416016e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.9453125,"distances_sum":2705.6572847481743}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9408799533799538,"seconds":6.200745701789856e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.9609375,"distances_sum":2766.516419025154}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9108173076923084,"seconds":6.355345249176025e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.9921875,"distances_sum":2509.9730180335405}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.944259386446887,"seconds":6.148591637611389e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.953125,"distances_sum":2809.835998974572}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9584337537462543,"seconds":6.718561053276062e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.9453125,"distances_sum":2918.7621398795923}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9584337537462543,"seconds":6.718561053276062e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.9453125,"distances_sum":2918.7621398795923}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8074637168387178,"seconds":4.665926098823547e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.859375,"distances_sum":1677.4649988584697}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.69140625,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.69140625,"f1":0.8074637168387178,"seconds":4.665926098823547e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.859375,"distances_sum":1677.4649988584697}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.870335914085915,"seconds":5.276873707771301e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.4453125,"distances_sum":1926.1156244580686}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9406879578754588,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.78125,"distances_sum":2330.145287915729}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9056464368964375,"seconds":5.578622221946716e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.6328125,"distances_sum":2134.959481803321}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9406879578754588,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.78125,"distances_sum":2330.145287915729}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9601419413919419,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.90625,"distances_sum":2501.688210333829}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9633241758241764,"seconds":6.079673767089844e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8984375,"distances_sum":2549.498799494013}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9525963619713622,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.78125,"distances_sum":2501.7706691595135}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9481315559440563,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.828125,"distances_sum":2442.0450453322987}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9633241758241764,"seconds":6.079673767089844e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8984375,"distances_sum":2549.498799494013}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9345703125,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9633241758241764,"seconds":6.079673767089844e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8984375,"distances_sum":2549.498799494013}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8729312354312362,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.4765625,"distances_sum":1880.9710925414086}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5908203125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5908203125,"f1":0.7293182511932519,"seconds":4.297122359275818e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.3828125,"distances_sum":1307.3736019875928}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6923828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6923828125,"f1":0.8066140456765465,"seconds":4.859641194343567e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.96875,"distances_sum":1593.1428036342566}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.783203125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.783203125,"f1":0.8729312354312362,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.4765625,"distances_sum":1880.9710925414086}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9246909340659349,"seconds":5.83939254283905e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7578125,"distances_sum":2173.5788431290716}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8671875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8671875,"f1":0.9246909340659349,"seconds":5.83939254283905e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7578125,"distances_sum":2173.5788431290716}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.95761217948718,"seconds":5.578622221946716e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.921875,"distances_sum":2392.80385822689}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9623340201465204,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.921875,"distances_sum":2458.839423493469}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.952813332500833,"seconds":5.6996941566467285e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.890625,"distances_sum":2383.5197470070393}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9434523809523816,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.875,"distances_sum":2281.2466144587797}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9623340201465204,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.921875,"distances_sum":2458.839423493469}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9623340201465204,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.921875,"distances_sum":2458.839423493469}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8615707209457218,"seconds":5.1390379667282104e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.4453125,"distances_sum":1841.6274269514138}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4443359375, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.4443359375,"f1":null,"seconds":3.7103891372680664e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.578125,"distances_sum":961.1086228195278}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7705078125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7705078125,"f1":0.8615707209457218,"seconds":5.1390379667282104e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.4453125,"distances_sum":1841.6274269514138}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80859375, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.80859375,"f1":0.8872601356976365,"seconds":5.336478352546692e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7734375,"distances_sum":1965.270573373678}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.80859375,"state":{"ssize":7,"bsize":6},"perf":{"precision":1.0,"recall":0.80859375,"f1":0.8872601356976365,"seconds":5.336478352546692e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7734375,"distances_sum":1965.270573373678}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":10,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9333218864468871,"seconds":6.237998604774475e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8671875,"distances_sum":2277.621100520808}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8967235889110898,"seconds":6.226822733879089e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7265625,"distances_sum":2024.0933077629331}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9606456043956051,"seconds":7.098540663719177e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9375,"distances_sum":2449.1874607529753}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9694940476190479,"seconds":6.845220923423767e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9375,"distances_sum":2531.876183164968}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9530162545787549,"seconds":6.6086649894714355e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9140625,"distances_sum":2394.937766924743}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9183550824175829,"seconds":6.5676867961883545e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.828125,"distances_sum":2150.9517219277345}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9694940476190479,"seconds":6.845220923423767e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9375,"distances_sum":2531.876183164968}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9694940476190479,"seconds":6.845220923423767e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9375,"distances_sum":2531.876183164968}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6279296875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6279296875,"f1":0.758496191308692,"seconds":5.513429641723633e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.3828125,"distances_sum":1417.3599136720338}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6279296875,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6279296875,"f1":0.758496191308692,"seconds":5.513429641723633e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.3828125,"distances_sum":1417.3599136720338}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9395234973359977,"seconds":6.7390501499176025e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.828125,"distances_sum":2285.7370248761895}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8984375,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.8984375,"f1":0.9395234973359977,"seconds":6.7390501499176025e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.828125,"distances_sum":2285.7370248761895}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9788690476190478,"seconds":6.57886266708374e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.9921875,"distances_sum":2533.3795614714118}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":10,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.95693108974359,"seconds":6.11133873462677e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.8828125,"distances_sum":2384.2287765334177}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9788690476190478,"seconds":6.57886266708374e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.9921875,"distances_sum":2533.3795614714118}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9788690476190478,"seconds":6.57886266708374e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.9921875,"distances_sum":2533.3795614714118}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.197265625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.197265625,"f1":null,"seconds":3.2782554626464844e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":6.0234375,"distances_sum":471.47443072627186}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.693359375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.693359375,"f1":0.8124490093240102,"seconds":4.7441571950912476e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.921875,"distances_sum":1586.13827154606}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7138671875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.7138671875,"f1":0.8231599997225005,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.9609375,"distances_sum":1671.0050830198577}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7138671875,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.7138671875,"f1":0.8231599997225005,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.9609375,"distances_sum":1671.0050830198577}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.917347756410257,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.6484375,"distances_sum":2116.394891557199}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.958247481684982,"seconds":5.492940545082092e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7890625,"distances_sum":2444.290925940877}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9186469780219789,"seconds":5.2247196435928345e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.6640625,"distances_sum":2107.8983181922686}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8545001873126883,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.28125,"distances_sum":1763.091312756986}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9665064102564107,"seconds":5.926936864852905e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.8828125,"distances_sum":2479.6883130408605}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8751410048285058,"seconds":5.2638351917266846e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.34375,"distances_sum":1847.5306034389457}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9665064102564107,"seconds":5.926936864852905e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.8828125,"distances_sum":2479.6883130408605}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9760817307692312,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.90625,"distances_sum":2548.9654510695127}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9772321428571433,"seconds":6.182119250297546e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.953125,"distances_sum":2537.402535965765}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9720066391941393,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.9375,"distances_sum":2511.093171373496}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9671359890109894,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.921875,"distances_sum":2477.0127158787445}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9772321428571433,"seconds":6.182119250297546e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.953125,"distances_sum":2537.402535965765}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9772321428571433,"seconds":6.182119250297546e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.953125,"distances_sum":2537.402535965765}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2001953125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2001953125,"f1":null,"seconds":3.829598426818848e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":6.390625,"distances_sum":447.75929892417446}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.431640625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.431640625,"f1":null,"seconds":4.108995199203491e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":6.6796875,"distances_sum":946.8510102897322}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5625,"f1":0.7051729520479526,"seconds":4.304572939872742e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":7.171875,"distances_sum":1254.8552744316585}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5625,"f1":0.7051729520479526,"seconds":4.304572939872742e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":7.171875,"distances_sum":1254.8552744316585}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7275390625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7275390625,"f1":0.8332625707625716,"seconds":4.993751645088196e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":7.828125,"distances_sum":1710.7827529849872}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.859455128205129,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.359375,"distances_sum":1826.221489601524}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8700981310356318,"seconds":5.343928933143616e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.40625,"distances_sum":1873.4535435832886}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7822265625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7822265625,"f1":0.8700981310356318,"seconds":5.343928933143616e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.40625,"distances_sum":1873.4535435832886}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9477564102564108,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.8046875,"distances_sum":2389.7764729505707}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9574805402930405,"seconds":5.9138983488082886e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.84375,"distances_sum":2439.729124684386}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9593807234432237,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.875,"distances_sum":2448.3832801288086}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9456819222444228,"seconds":5.999580025672913e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.7265625,"distances_sum":2399.8668515701315}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9593807234432237,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.875,"distances_sum":2448.3832801288086}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.927734375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9593807234432237,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.875,"distances_sum":2448.3832801288086}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2177734375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2177734375,"f1":null,"seconds":3.3043324947357178e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":6.5625,"distances_sum":510.87066175645765}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.587890625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.587890625,"f1":0.7259202602952608,"seconds":4.4405460357666016e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":7.8984375,"distances_sum":1331.6530736487002}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2373046875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2373046875,"f1":null,"seconds":3.602355718612671e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":6.953125,"distances_sum":547.8858417318885}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.587890625,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.587890625,"f1":0.7259202602952608,"seconds":4.4405460357666016e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":7.8984375,"distances_sum":1331.6530736487002}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.951270604395605,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.9453125,"distances_sum":2437.121127427974}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6982421875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6982421875,"f1":0.8142045454545462,"seconds":4.606321454048157e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.2265625,"distances_sum":1645.91351721197}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5888671875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5888671875,"f1":0.7283886252636259,"seconds":4.334375262260437e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":7.84375,"distances_sum":1335.0356374233938}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8602538086913095,"seconds":5.189329385757446e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.6484375,"distances_sum":1861.8032345490324}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.951270604395605,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.9453125,"distances_sum":2437.121127427974}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9759500915750919,"seconds":6.075948476791382e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":9.0,"distances_sum":2610.5148836230446}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9607028388278391,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.984375,"distances_sum":2494.6025261199065}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9546531593406599,"seconds":5.971640348434448e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.90625,"distances_sum":2452.1156129740693}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9759500915750919,"seconds":6.075948476791382e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":9.0,"distances_sum":2610.5148836230446}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9759500915750919,"seconds":6.075948476791382e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":9.0,"distances_sum":2610.5148836230446}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3662109375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3662109375,"f1":null,"seconds":3.637745976448059e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.2109375,"distances_sum":557.8534881735607}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.212890625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.212890625,"f1":null,"seconds":3.373250365257263e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":5.5703125,"distances_sum":347.1662299293383}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3662109375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3662109375,"f1":null,"seconds":3.637745976448059e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.2109375,"distances_sum":557.8534881735607}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.517578125, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.517578125,"f1":null,"seconds":4.367902874946594e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.921875,"distances_sum":844.3998879295406}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.869400391275392,"seconds":5.304813385009766e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7734375,"distances_sum":1415.8293585918943}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.855618860306361,"seconds":5.183741450309753e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7265625,"distances_sum":1375.32659126226}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.860251207126208,"seconds":5.185604095458984e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7421875,"distances_sum":1384.5025339245447}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7802734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7802734375,"f1":0.869400391275392,"seconds":5.304813385009766e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7734375,"distances_sum":1415.8293585918943}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9616472069597075,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9140625,"distances_sum":1860.1939505052817}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9197120587745594,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8515625,"distances_sum":1656.360467690443}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8956704753579761,"seconds":5.6140124797821045e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.796875,"distances_sum":1532.0748224173158}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9616472069597075,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9140625,"distances_sum":1860.1939505052817}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.931640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9616472069597075,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9140625,"distances_sum":1860.1939505052817}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.669921875,"f1":0.7911791333666343,"seconds":4.388391971588135e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.671875,"distances_sum":1388.8950452003785}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7333984375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7333984375,"f1":0.8359352453102462,"seconds":4.636123776435852e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.0,"distances_sum":1558.7307519431163}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7333984375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7333984375,"f1":0.8359352453102462,"seconds":4.636123776435852e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.0,"distances_sum":1558.7307519431163}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.9012825715950725,"seconds":5.107372999191284e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.3125,"distances_sum":1822.6256923618132}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9463083791208795,"seconds":5.193054676055908e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.6796875,"distances_sum":2095.8391337902094}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9353880494505499,"seconds":5.116686224937439e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.609375,"distances_sum":2040.36567057487}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9399298618048622,"seconds":5.237758159637451e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.6640625,"distances_sum":2074.9822107172026}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9231773434898441,"seconds":5.025416612625122e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.4765625,"distances_sum":1924.953890848826}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9463083791208795,"seconds":5.193054676055908e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.6796875,"distances_sum":2095.8391337902094}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9563244047619053,"seconds":5.671754479408264e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7421875,"distances_sum":2148.1108945775795}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.962351190476191,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.84375,"distances_sum":2162.6116099467777}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9706501831501833,"seconds":5.83939254283905e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.859375,"distances_sum":2220.0749294640736}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9590831043956051,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7734375,"distances_sum":2161.958077075025}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9706501831501833,"seconds":5.83939254283905e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.859375,"distances_sum":2220.0749294640736}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9706501831501833,"seconds":5.83939254283905e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.859375,"distances_sum":2220.0749294640736}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.7836781274281284,"seconds":4.6174973249435425e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.96875,"distances_sum":1415.9586355434328}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6845703125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6845703125,"f1":0.8031177156177164,"seconds":4.518777132034302e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.0625,"distances_sum":1455.8744464052838}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.564453125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.564453125,"f1":0.7069671647796655,"seconds":4.53554093837738e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.25,"distances_sum":1142.0967444942225}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8551535270285281,"seconds":4.893168807029724e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.2578125,"distances_sum":1707.0445468548505}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7626953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7626953125,"f1":0.8551535270285281,"seconds":4.893168807029724e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.2578125,"distances_sum":1707.0445468548505}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.935851648351649,"seconds":5.373731255531311e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.546875,"distances_sum":2097.877915436795}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9629922161172165,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8359375,"distances_sum":2286.5119535660683}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9434237637362642,"seconds":5.209818482398987e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.515625,"distances_sum":2149.316692512887}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8961861055611063,"seconds":5.466863512992859e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.375,"distances_sum":1881.8440335424248}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8632591366966378,"seconds":5.425885319709778e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.3125,"distances_sum":1693.3318079129485}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8578072968697977,"seconds":4.980713129043579e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.2421875,"distances_sum":1667.4777121836987}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9629922161172165,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8359375,"distances_sum":2286.5119535660683}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9746108058608062,"seconds":5.947425961494446e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8828125,"distances_sum":2356.448478891981}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9658203125, conf: {"ssize":5,"bsize":13}, perf: {"precision":1.0,"recall":0.9658203125,"f1":0.9813816391941392,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9375,"distances_sum":2396.1968825168965}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9778846153846157,"seconds":6.213784217834473e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8984375,"distances_sum":2366.772918090495}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9684752747252752,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8125,"distances_sum":2343.657804578858}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9761904761904766,"seconds":5.543231964111328e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.875,"distances_sum":2375.425636063152}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9658203125,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9813816391941392,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9375,"distances_sum":2396.1968825168965}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9658203125,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9813816391941392,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9375,"distances_sum":2396.1968825168965}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2041015625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2041015625,"f1":null,"seconds":3.3937394618988037e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":5.8671875,"distances_sum":378.81440182311746}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2197265625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2197265625,"f1":null,"seconds":3.3508986234664917e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":6.078125,"distances_sum":418.6216595217762}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2197265625,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.2197265625,"f1":null,"seconds":3.3508986234664917e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":6.078125,"distances_sum":418.6216595217762}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.369140625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.369140625,"f1":null,"seconds":3.8389116525650024e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":6.015625,"distances_sum":760.5029201836827}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8450731560106569,"seconds":5.323439836502075e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.578125,"distances_sum":1624.0998373626876}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6904296875, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6904296875,"f1":0.805680257242758,"seconds":4.941597580909729e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.296875,"distances_sum":1445.1706520502148}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7470703125,"state":{"ssize":7,"bsize":5},"perf":{"precision":1.0,"recall":0.7470703125,"f1":0.8450731560106569,"seconds":5.323439836502075e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.578125,"distances_sum":1624.0998373626876}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8667707292707301,"seconds":5.349516868591309e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.703125,"distances_sum":1720.008710600452}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8516582375957382,"seconds":5.42961061000824e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.6328125,"distances_sum":1666.4053821300859}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8501238344988353,"seconds":5.170702934265137e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.4765625,"distances_sum":1670.266227923884}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7783203125,"state":{"ssize":9,"bsize":5},"perf":{"precision":1.0,"recall":0.7783203125,"f1":0.8667707292707301,"seconds":5.349516868591309e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.703125,"distances_sum":1720.008710600452}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.7783203125,"state":{"ssize":9,"bsize":5},"perf":{"precision":1.0,"recall":0.7783203125,"f1":0.8667707292707301,"seconds":5.349516868591309e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.703125,"distances_sum":1720.008710600452}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6982421875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6982421875,"f1":0.8109962953712962,"seconds":4.896894097328186e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.203125,"distances_sum":1644.5649775068368}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5166015625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5166015625,"f1":0.6639395326895332,"seconds":3.982335329055786e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":6.984375,"distances_sum":1134.3855007063294}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6982421875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6982421875,"f1":0.8109962953712962,"seconds":4.896894097328186e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.203125,"distances_sum":1644.5649775068368}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8977652555777563,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.7265625,"distances_sum":1986.534775117868}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9258907758907765,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.625,"distances_sum":2217.1522639584027}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8603916916416926,"seconds":5.148351192474365e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.53125,"distances_sum":1801.702800387167}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9340487637362649,"seconds":5.7220458984375e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.625,"distances_sum":2235.3547521317687}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.884765625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.884765625,"f1":0.9340487637362649,"seconds":5.7220458984375e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.625,"distances_sum":2235.3547521317687}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9613667582417585,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.8984375,"distances_sum":2408.0296519070434}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9621165293040296,"seconds":5.956739187240601e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.8984375,"distances_sum":2439.294537250991}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9557520604395607,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.859375,"distances_sum":2379.32773101001}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.956644917582418,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.8125,"distances_sum":2404.7289127475055}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9724187271062275,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.9375,"distances_sum":2486.058101454169}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9456959706959713,"seconds":6.3907355070114136e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.765625,"distances_sum":2303.7143783853458}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9447516025641032,"seconds":5.217269062995911e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.765625,"distances_sum":2325.543051524316}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9724187271062275,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.9375,"distances_sum":2486.058101454169}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9724187271062275,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.9375,"distances_sum":2486.058101454169}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.21875,"f1":null,"seconds":3.38628888130188e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":6.578125,"distances_sum":430.2513196377102}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.431640625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.431640625,"f1":null,"seconds":3.8351863622665405e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":7.046875,"distances_sum":862.877130223146}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.431640625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.431640625,"f1":null,"seconds":3.8351863622665405e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":7.046875,"distances_sum":862.877130223146}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9025068681318691,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.6875,"distances_sum":1928.1314074730833}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8076171875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.8076171875,"f1":0.8891082875457884,"seconds":5.1781535148620605e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.6953125,"distances_sum":1838.2357490382278}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8691105769230779,"seconds":5.085021257400513e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.671875,"distances_sum":1777.6420408061513}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8647722069597079,"seconds":5.1781535148620605e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.65625,"distances_sum":1723.290545461018}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.833984375,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.833984375,"f1":0.9025068681318691,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.6875,"distances_sum":1928.1314074730833}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9741643772893778,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.9609375,"distances_sum":2388.1170072544073}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9611836080586086,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.8515625,"distances_sum":2310.141603520815}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9128980394605399,"seconds":5.2694231271743774e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.7109375,"distances_sum":2009.3913109398643}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9363011988011992,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.7890625,"distances_sum":2149.9018970970474}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.96854967948718,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.9375,"distances_sum":2347.9244360187495}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9240134865134871,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.796875,"distances_sum":2065.7704165860678}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9741643772893778,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.9609375,"distances_sum":2388.1170072544073}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9741643772893778,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.9609375,"distances_sum":2388.1170072544073}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2431640625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2431640625,"f1":null,"seconds":3.2354146242141724e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":5.96875,"distances_sum":549.2424114458836}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8581486222111232,"seconds":4.947185516357422e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.8828125,"distances_sum":1846.7655894346042}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.537109375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.537109375,"f1":0.676890817515818,"seconds":4.108995199203491e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.2890625,"distances_sum":1190.5008445576966}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.767578125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.767578125,"f1":0.8581486222111232,"seconds":4.947185516357422e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.8828125,"distances_sum":1846.7655894346042}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9211803821178828,"seconds":5.513429641723633e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.4609375,"distances_sum":2257.672470938782}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9565705128205133,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.796875,"distances_sum":2508.24110503351}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9088317932067941,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.1328125,"distances_sum":2153.679352710536}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8636998418248428,"seconds":5.0906091928482056e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.0078125,"distances_sum":1895.8985255702662}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9565705128205133,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.796875,"distances_sum":2508.24110503351}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":10,"bsize":10}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.972046703296704,"seconds":5.979090929031372e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8984375,"distances_sum":2599.63907839712}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":13,"bsize":12}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9817708333333334,"seconds":6.15045428276062e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.953125,"distances_sum":2692.877525918158}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9645318223443228,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8515625,"distances_sum":2565.486217998451}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9665979853479857,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8828125,"distances_sum":2582.66685826649}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9691792582417587,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8828125,"distances_sum":2600.6053070861954}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9633241758241762,"seconds":5.6549906730651855e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8359375,"distances_sum":2558.984396466005}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9575034340659345,"seconds":5.6549906730651855e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7890625,"distances_sum":2527.1495126769496}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.966796875,"state":{"ssize":13,"bsize":12},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9817708333333334,"seconds":6.15045428276062e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.953125,"distances_sum":2692.877525918158}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.966796875,"state":{"ssize":13,"bsize":12},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9817708333333334,"seconds":6.15045428276062e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.953125,"distances_sum":2692.877525918158}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.396484375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.396484375,"f1":null,"seconds":3.430992364883423e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":5.859375,"distances_sum":834.0598622454031}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7001953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7001953125,"f1":0.8111699064824072,"seconds":4.518777132034302e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.7265625,"distances_sum":1710.251498179905}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7001953125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.7001953125,"f1":0.8111699064824072,"seconds":4.518777132034302e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.7265625,"distances_sum":1710.251498179905}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.71875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.71875,"f1":0.828334686147187,"seconds":4.639849066734314e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.828125,"distances_sum":1762.5435852442727}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8658404095904105,"seconds":5.019828677177429e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.9375,"distances_sum":1967.452342348338}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.8683708652458662,"seconds":4.8857182264328e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.0390625,"distances_sum":2005.6379707858832}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9229510073260081,"seconds":5.140900611877441e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.203125,"distances_sum":2304.1300506610105}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.865234375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.865234375,"f1":0.9229510073260081,"seconds":5.140900611877441e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.203125,"distances_sum":2304.1300506610105}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9580986721611732,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.7890625,"distances_sum":2606.8350871050457}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9544903013653018,"seconds":5.403533577919006e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.7421875,"distances_sum":2600.7766313983166}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9493017399267405,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.703125,"distances_sum":2538.942912842454}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9346299533799538,"seconds":5.29363751411438e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.4765625,"distances_sum":2440.8914984505022}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9263736263736269,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.3671875,"distances_sum":2349.7229570170525}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9580986721611732,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.7890625,"distances_sum":2606.8350871050457}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.92578125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9580986721611732,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.7890625,"distances_sum":2606.8350871050457}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5244140625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5244140625,"f1":0.6719318875568879,"seconds":4.1835010051727295e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":6.8671875,"distances_sum":1174.2039130151888}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8698780386280394,"seconds":6.386078894138336e-5,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.140625,"distances_sum":1914.4176739716968}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78515625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.78515625,"f1":0.8698780386280394,"seconds":6.386078894138336e-5,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.140625,"distances_sum":1914.4176739716968}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8046875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.8046875,"f1":0.8845987345987355,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.28125,"distances_sum":2009.7477845025176}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9320944680319687,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.515625,"distances_sum":2308.4836290302223}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9073176823176831,"seconds":5.1800161600112915e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.4140625,"distances_sum":2137.1720067756505}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8818359375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8818359375,"f1":0.9320944680319687,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.515625,"distances_sum":2308.4836290302223}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9548623251748256,"seconds":6.627291440963745e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.8046875,"distances_sum":2456.0151649110085}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9717662545787549,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.875,"distances_sum":2619.95460272843}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9576694139194146,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.8046875,"distances_sum":2534.1126081375605}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9422161172161179,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.65625,"distances_sum":2446.641754219382}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9419700091575098,"seconds":5.062669515609741e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.7265625,"distances_sum":2394.04887798344}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9717662545787549,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.875,"distances_sum":2619.95460272843}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9717662545787549,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.875,"distances_sum":2619.95460272843}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.587890625, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.587890625,"f1":null,"seconds":3.851950168609619e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":7.234375,"distances_sum":1377.5210969851237}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5849609375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5849609375,"f1":0.719925040237541,"seconds":4.213303327560425e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":7.2734375,"distances_sum":1369.739523090627}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7900390625,"f1":0.8753241550116561,"seconds":4.9229711294174194e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.0703125,"distances_sum":2001.243785045535}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7900390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7900390625,"f1":0.8753241550116561,"seconds":4.9229711294174194e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.0703125,"distances_sum":2001.243785045535}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.926868964368965,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.4140625,"distances_sum":2341.536746295896}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.955494505494506,"seconds":5.582347512245178e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.71875,"distances_sum":2577.9552931461403}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9440361721611731,"seconds":5.595386028289795e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.5625,"distances_sum":2427.0005421310566}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.955494505494506,"seconds":5.582347512245178e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.71875,"distances_sum":2577.9552931461403}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9570341117216122,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.7734375,"distances_sum":2551.2971375834163}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9635416666666669,"seconds":6.5695494413375854e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.8203125,"distances_sum":2606.7588680571375}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9741472069597074,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.8984375,"distances_sum":2676.4830275561744}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9736607142857145,"seconds":5.986541509628296e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.90625,"distances_sum":2658.2548953217984}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9741472069597074,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.8984375,"distances_sum":2676.4830275561744}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9741472069597074,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.0933727025985718e-6,"evaluations":8.8984375,"distances_sum":2676.4830275561744}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.556640625, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.556640625,"f1":0.6963262432012438,"seconds":3.809109330177307e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.7421875,"distances_sum":1304.9257898747558}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.25390625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.25390625,"f1":null,"seconds":2.987682819366455e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":5.1640625,"distances_sum":550.516586631186}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.244140625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.244140625,"f1":null,"seconds":2.93925404548645e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":5.15625,"distances_sum":553.9843840058207}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.556640625,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.556640625,"f1":0.6963262432012438,"seconds":3.809109330177307e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.7421875,"distances_sum":1304.9257898747558}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6533203125,"f1":0.7784736097236102,"seconds":4.552304744720459e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.3359375,"distances_sum":1553.788099179788}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9146556568431574,"seconds":5.343928933143616e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.2109375,"distances_sum":2304.289713188638}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.7958714896214902,"seconds":4.3995678424835205e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.4609375,"distances_sum":1678.9317700272695}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6259765625, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6259765625,"f1":0.7516584110334117,"seconds":4.265457391738892e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.15625,"distances_sum":1439.6061593016443}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.67578125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.67578125,"f1":0.7907169219669227,"seconds":4.334375262260437e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.46875,"distances_sum":1668.3802032205729}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.857421875,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.857421875,"f1":0.9146556568431574,"seconds":5.343928933143616e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.2109375,"distances_sum":2304.289713188638}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9593978937728942,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7890625,"distances_sum":2604.244222709878}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":11,"bsize":6}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9282139735264743,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.21875,"distances_sum":2390.7638078093432}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9293612637362643,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.5703125,"distances_sum":2396.434269493645}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9593978937728942,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7890625,"distances_sum":2604.244222709878}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9267578125,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9593978937728942,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7890625,"distances_sum":2604.244222709878}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.359375,"f1":null,"seconds":3.555789589881897e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":5.796875,"distances_sum":819.1804018193295}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8874521312021318,"seconds":5.086883902549744e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.3671875,"distances_sum":2118.5525111091683}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8154296875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.8154296875,"f1":0.8874521312021318,"seconds":5.086883902549744e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.3671875,"distances_sum":2118.5525111091683}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.960697115384616,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8125,"distances_sum":2568.593333431477}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9472355769230774,"seconds":5.045905709266663e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.734375,"distances_sum":2485.8628816408477}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9363782051282057,"seconds":5.2265822887420654e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.484375,"distances_sum":2343.7474120101983}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.960697115384616,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8125,"distances_sum":2568.593333431477}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9646405677655683,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.890625,"distances_sum":2564.1158887565484}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9622424450549456,"seconds":5.587935447692871e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8359375,"distances_sum":2579.3182092472202}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9730311355311361,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8984375,"distances_sum":2655.1547056398845}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9730311355311361,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8984375,"distances_sum":2655.1547056398845}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9730311355311361,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8984375,"distances_sum":2655.1547056398845}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3818359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3818359375,"f1":null,"seconds":3.4831464290618896e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":5.5,"distances_sum":884.2235960803321}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2705078125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2705078125,"f1":null,"seconds":3.2689422369003296e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":5.5859375,"distances_sum":649.6614829005583}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3818359375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3818359375,"f1":null,"seconds":3.4831464290618896e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":5.5,"distances_sum":884.2235960803321}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5390625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5390625,"f1":null,"seconds":3.91155481338501e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":6.7578125,"distances_sum":1221.5966790409393}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5615234375, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5615234375,"f1":0.7027602605727612,"seconds":3.959983587265015e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":6.8359375,"distances_sum":1292.2378268050356}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5615234375,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.5615234375,"f1":0.7027602605727612,"seconds":3.959983587265015e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":6.8359375,"distances_sum":1292.2378268050356}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8056640625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.8056640625,"f1":0.8841021825396834,"seconds":5.02169132232666e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.09375,"distances_sum":2073.000045631711}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9106430028305037,"seconds":5.392357707023621e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.171875,"distances_sum":2221.3893169921516}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8466796875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8466796875,"f1":0.9106430028305037,"seconds":5.392357707023621e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.171875,"distances_sum":2221.3893169921516}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8466796875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8466796875,"f1":0.9106430028305037,"seconds":5.392357707023621e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.171875,"distances_sum":2221.3893169921516}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.861828796203797,"seconds":4.9620866775512695e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.984375,"distances_sum":1923.6255278278302}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.27734375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.27734375,"f1":null,"seconds":3.3527612686157227e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":5.640625,"distances_sum":671.8827455835709}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7744140625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7744140625,"f1":0.861828796203797,"seconds":4.9620866775512695e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.984375,"distances_sum":1923.6255278278302}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.9010057650682659,"seconds":8.275732398033142e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.03125,"distances_sum":2105.231740688246}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9332016941391947,"seconds":5.248934030532837e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.4140625,"distances_sum":2364.140052429896}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8837890625,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9332016941391947,"seconds":5.248934030532837e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.4140625,"distances_sum":2364.140052429896}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8837890625,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9332016941391947,"seconds":5.248934030532837e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.4140625,"distances_sum":2364.140052429896}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8837890625,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9332016941391947,"seconds":5.248934030532837e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.4140625,"distances_sum":2364.140052429896}}, n: 9
mean(cfft.distances) = 0.32314605337321806
mean(cdnet.distances) = 0.3900464831943998
mean(crand.distances) = 0.32928455794731143
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8533333333333334
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9288888888888889
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8577777777777778
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9088888888888889
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8888888888888888
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8666666666666667
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9177777777777778
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8888888888888888
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.88
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9044444444444445
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9111111111111111
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9333333333333332
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9333333333333332
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9199999999999999
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8822222222222221
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9355555555555556
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8533333333333334
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8711111111111111
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9133333333333332
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9111111111111111
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.888888888888889
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8755555555555555
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9111111111111111
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9111111111111111
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8466666666666667
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 1, 3]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 1, 3]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.4934854018688202] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 26]]
** centroid: 1, normalized-entropy: 0.22853814395352806, [(2, 1), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 18, 4]]
** centroid: 6, normalized-entropy: 0.6840384356390419, [(2, 18), (3, 4)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 10: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 2, 4]]
** centroid: 12, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 4)]
finished with 14 centroids; started with 12
acc = 0.98
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.45373209086932] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45373209086932, 0.27553750061941845] ***
*** starting iteration: 2; err: [Inf, 0.45373209086932, 0.27553750061941845] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45373209086932, 0.27553750061941845, 0.268837422026215] ***
*** starting iteration: 3; err: [Inf, 0.45373209086932, 0.27553750061941845, 0.268837422026215] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45373209086932, 0.27553750061941845, 0.268837422026215, 0.24827160990542477] ***
*** starting iteration: 4; err: [Inf, 0.45373209086932, 0.27553750061941845, 0.268837422026215, 0.24827160990542477] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45373209086932, 0.27553750061941845, 0.268837422026215, 0.24827160990542477, 0.23552005482115992] ***
*** starting iteration: 5; err: [Inf, 0.45373209086932, 0.27553750061941845, 0.268837422026215, 0.24827160990542477, 0.23552005482115992] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45373209086932, 0.27553750061941845, 0.268837422026215, 0.24827160990542477, 0.23552005482115992, 0.23361772863339778] ***
*** starting iteration: 6; err: [Inf, 0.45373209086932, 0.27553750061941845, 0.268837422026215, 0.24827160990542477, 0.23552005482115992, 0.23361772863339778] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45373209086932, 0.27553750061941845, 0.268837422026215, 0.24827160990542477, 0.23552005482115992, 0.23361772863339778, 0.2329308806887797] ***
*** finished computation of 3 references, err: [Inf, 0.45373209086932, 0.27553750061941845, 0.268837422026215, 0.24827160990542477, 0.23552005482115992, 0.23361772863339778, 0.2329308806887797] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [106, 105, 1]]
** centroid: 1, normalized-entropy: 0.999983797528787, [(1, 106), (2, 105)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [76, 135, 20]]
** centroid: 2, normalized-entropy: 0.8114763661617375, [(1, 76), (2, 135), (3, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [223, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19782960036064726] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19782960036064726, 0.15406583538431012] ***
*** finished computation of 7 references, err: [Inf, 0.19782960036064726, 0.15406583538431012] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 80, 18]]
** centroid: 1, normalized-entropy: 0.6880476235340797, [(2, 80), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [55, 17, 0]]
** centroid: 3, normalized-entropy: 0.7885131605379784, [(1, 55), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [112, 19, 0]]
** centroid: 4, normalized-entropy: 0.59728274179791, [(1, 112), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [70, 39, 0]]
** centroid: 5, normalized-entropy: 0.9408403089808224, [(1, 70), (2, 39)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 85, 3]]
** centroid: 6, normalized-entropy: 0.21450983370697788, [(2, 85), (3, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18093796441613555] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18093796441613555, 0.1494748752335201] ***
*** finished computation of 7 references, err: [Inf, 0.18093796441613555, 0.1494748752335201] ***
*** center 1: selecting labels [1] (freq >= 2) [from [145, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 47, 22]]
** centroid: 2, normalized-entropy: 0.903116172156872, [(2, 47), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 9, 0]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(1, 54), (2, 9)]
*** center 4: selecting labels [1] (freq >= 2) [from [83, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [9, 115, 0]]
** centroid: 5, normalized-entropy: 0.37548114206764976, [(1, 9), (2, 115)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 80, 0]]
** centroid: 6, normalized-entropy: 0.43949698692151346, [(1, 8), (2, 80)]
*** center 7: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18928410762898634] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18928410762898634, 0.15145173288513158] ***
*** finished computation of 7 references, err: [Inf, 0.18928410762898634, 0.15145173288513158] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [30, 67, 0]]
** centroid: 1, normalized-entropy: 0.892338681064176, [(1, 30), (2, 67)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 16, 0]]
** centroid: 2, normalized-entropy: 0.6931274153282881, [(1, 70), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 99, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [121, 20, 0]]
** centroid: 5, normalized-entropy: 0.5890477097890546, [(1, 121), (2, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 46, 23]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 46), (3, 23)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23487968460514067] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23487968460514067, 0.19163114137321083] ***
*** starting iteration: 2; err: [Inf, 0.23487968460514067, 0.19163114137321083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23487968460514067, 0.19163114137321083, 0.1892731020880119] ***
*** starting iteration: 3; err: [Inf, 0.23487968460514067, 0.19163114137321083, 0.1892731020880119] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23487968460514067, 0.19163114137321083, 0.1892731020880119, 0.18875724956527487] ***
*** finished computation of 7 references, err: [Inf, 0.23487968460514067, 0.19163114137321083, 0.1892731020880119, 0.18875724956527487] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 90, 21]]
** centroid: 1, normalized-entropy: 0.699772221773307, [(2, 90), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [55, 11, 0]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(1, 55), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [90, 15, 0]]
** centroid: 4, normalized-entropy: 0.5916727785823274, [(1, 90), (2, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 30, 0]]
** centroid: 5, normalized-entropy: 0.9034535552068337, [(1, 64), (2, 30)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [90, 14, 0]]
** centroid: 6, normalized-entropy: 0.5699613760403499, [(1, 90), (2, 14)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 80, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2228129524109268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2228129524109268, 0.19130655346203582] ***
*** starting iteration: 2; err: [Inf, 0.2228129524109268, 0.19130655346203582] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2228129524109268, 0.19130655346203582, 0.18709120957175274] ***
*** starting iteration: 3; err: [Inf, 0.2228129524109268, 0.19130655346203582, 0.18709120957175274] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2228129524109268, 0.19130655346203582, 0.18709120957175274, 0.18499243321913716] ***
*** finished computation of 7 references, err: [Inf, 0.2228129524109268, 0.19130655346203582, 0.18709120957175274, 0.18499243321913716] ***
*** center 1: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [65, 16, 0]]
** centroid: 2, normalized-entropy: 0.7169622516889513, [(1, 65), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 51, 22]]
** centroid: 3, normalized-entropy: 0.8829589691462253, [(2, 51), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [88, 25, 0]]
** centroid: 5, normalized-entropy: 0.7624233236147429, [(1, 88), (2, 25)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 104, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [33, 56, 0]]
** centroid: 7, normalized-entropy: 0.951274087437692, [(1, 33), (2, 56)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21687400922866196] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21687400922866196, 0.19024090387340428] ***
*** starting iteration: 2; err: [Inf, 0.21687400922866196, 0.19024090387340428] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21687400922866196, 0.19024090387340428, 0.18869473139519455] ***
*** starting iteration: 3; err: [Inf, 0.21687400922866196, 0.19024090387340428, 0.18869473139519455] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21687400922866196, 0.19024090387340428, 0.18869473139519455, 0.18858239091541815] ***
*** finished computation of 7 references, err: [Inf, 0.21687400922866196, 0.19024090387340428, 0.18869473139519455, 0.18858239091541815] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 91, 22]]
** centroid: 1, normalized-entropy: 0.7111806626974718, [(2, 91), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [63, 16, 0]]
** centroid: 3, normalized-entropy: 0.7269625813353975, [(1, 63), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [90, 12, 0]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(1, 90), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [101, 17, 0]]
** centroid: 5, normalized-entropy: 0.5947936590297477, [(1, 101), (2, 17)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [45, 16, 0]]
** centroid: 6, normalized-entropy: 0.8301899714180444, [(1, 45), (2, 16)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 96, 1]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.33939717098925115] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33939717098925115, 0.237238220322329] ***
*** starting iteration: 2; err: [Inf, 0.33939717098925115, 0.237238220322329] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33939717098925115, 0.237238220322329, 0.23384940648988425] ***
*** starting iteration: 3; err: [Inf, 0.33939717098925115, 0.237238220322329, 0.23384940648988425] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33939717098925115, 0.237238220322329, 0.23384940648988425, 0.23267229572190223] ***
*** finished computation of 3 references, err: [Inf, 0.33939717098925115, 0.237238220322329, 0.23384940648988425, 0.23267229572190223] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [80, 150, 20]]
** centroid: 1, normalized-entropy: 0.7947959852907823, [(1, 80), (2, 150), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [111, 90, 1]]
** centroid: 2, normalized-entropy: 0.9921116920021501, [(1, 111), (2, 90)]
*** center 3: selecting labels [1] (freq >= 2) [from [214, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.41762433182643627] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41762433182643627, 0.23231424197604855] ***
*** starting iteration: 2; err: [Inf, 0.41762433182643627, 0.23231424197604855] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41762433182643627, 0.23231424197604855, 0.23104287976206378] ***
*** starting iteration: 3; err: [Inf, 0.41762433182643627, 0.23231424197604855, 0.23104287976206378] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41762433182643627, 0.23231424197604855, 0.23104287976206378, 0.23045407345719535] ***
*** finished computation of 3 references, err: [Inf, 0.41762433182643627, 0.23231424197604855, 0.23104287976206378, 0.23045407345719535] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [109, 110, 5]]
** centroid: 1, normalized-entropy: 0.7141792506996594, [(1, 109), (2, 110), (3, 5)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [82, 142, 17]]
** centroid: 2, normalized-entropy: 0.7878404292125886, [(1, 82), (2, 142), (3, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [202, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3410292866715192] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3410292866715192, 0.237361130741672] ***
*** starting iteration: 2; err: [Inf, 0.3410292866715192, 0.237361130741672] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3410292866715192, 0.237361130741672, 0.23352878878096947] ***
*** starting iteration: 3; err: [Inf, 0.3410292866715192, 0.237361130741672, 0.23352878878096947] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3410292866715192, 0.237361130741672, 0.23352878878096947, 0.23281557061967775] ***
*** finished computation of 3 references, err: [Inf, 0.3410292866715192, 0.237361130741672, 0.23352878878096947, 0.23281557061967775] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [43, 188, 23]]
** centroid: 1, normalized-entropy: 0.6743791952645102, [(1, 43), (2, 188), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [223, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [130, 60, 0]]
** centroid: 3, normalized-entropy: 0.8997437586982626, [(1, 130), (2, 60)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36700134543567764] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36700134543567764, 0.2338235157572695] ***
*** starting iteration: 2; err: [Inf, 0.36700134543567764, 0.2338235157572695] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36700134543567764, 0.2338235157572695, 0.2330713232590428] ***
*** finished computation of 3 references, err: [Inf, 0.36700134543567764, 0.2338235157572695, 0.2330713232590428] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [67, 167, 21]]
** centroid: 1, normalized-entropy: 0.7591318784581051, [(1, 67), (2, 167), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [219, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [119, 73, 0]]
** centroid: 3, normalized-entropy: 0.9581890286800805, [(1, 119), (2, 73)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30409382733012336] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30409382733012336, 0.23874519974680275] ***
*** starting iteration: 2; err: [Inf, 0.30409382733012336, 0.23874519974680275] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30409382733012336, 0.23874519974680275, 0.2332183141861742] ***
*** starting iteration: 3; err: [Inf, 0.30409382733012336, 0.23874519974680275, 0.2332183141861742] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30409382733012336, 0.23874519974680275, 0.2332183141861742, 0.2319495493554506] ***
*** starting iteration: 4; err: [Inf, 0.30409382733012336, 0.23874519974680275, 0.2332183141861742, 0.2319495493554506] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30409382733012336, 0.23874519974680275, 0.2332183141861742, 0.2319495493554506, 0.2318176499070848] ***
*** finished computation of 3 references, err: [Inf, 0.30409382733012336, 0.23874519974680275, 0.2332183141861742, 0.2319495493554506, 0.2318176499070848] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [251, 19, 0]]
** centroid: 1, normalized-entropy: 0.36730428298760165, [(1, 251), (2, 19)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 177, 22]]
** centroid: 2, normalized-entropy: 0.5015810126305279, [(2, 177), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [142, 56, 0]]
** centroid: 3, normalized-entropy: 0.8592759806609698, [(1, 142), (2, 56)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31621953435493505] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31621953435493505, 0.2384985190016152] ***
*** starting iteration: 2; err: [Inf, 0.31621953435493505, 0.2384985190016152] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31621953435493505, 0.2384985190016152, 0.2303337024041693] ***
*** starting iteration: 3; err: [Inf, 0.31621953435493505, 0.2384985190016152, 0.2303337024041693] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31621953435493505, 0.2384985190016152, 0.2303337024041693, 0.2293229942270059] ***
*** starting iteration: 4; err: [Inf, 0.31621953435493505, 0.2384985190016152, 0.2303337024041693, 0.2293229942270059] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31621953435493505, 0.2384985190016152, 0.2303337024041693, 0.2293229942270059, 0.22919440607790245] ***
*** finished computation of 3 references, err: [Inf, 0.31621953435493505, 0.2384985190016152, 0.2303337024041693, 0.2293229942270059, 0.22919440607790245] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [238, 13, 0]]
** centroid: 1, normalized-entropy: 0.29396449417736664, [(1, 238), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [156, 53, 0]]
** centroid: 2, normalized-entropy: 0.8169164036868143, [(1, 156), (2, 53)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [2, 182, 23]]
** centroid: 3, normalized-entropy: 0.3660345082525342, [(1, 2), (2, 182), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2828453889192044] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2828453889192044, 0.26723451269413534] ***
*** starting iteration: 2; err: [Inf, 0.2828453889192044, 0.26723451269413534] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2828453889192044, 0.26723451269413534, 0.2473985932409942] ***
*** starting iteration: 3; err: [Inf, 0.2828453889192044, 0.26723451269413534, 0.2473985932409942] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2828453889192044, 0.26723451269413534, 0.2473985932409942, 0.230314288890154] ***
*** starting iteration: 4; err: [Inf, 0.2828453889192044, 0.26723451269413534, 0.2473985932409942, 0.230314288890154] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2828453889192044, 0.26723451269413534, 0.2473985932409942, 0.230314288890154, 0.2288975263968448] ***
*** starting iteration: 5; err: [Inf, 0.2828453889192044, 0.26723451269413534, 0.2473985932409942, 0.230314288890154, 0.2288975263968448] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2828453889192044, 0.26723451269413534, 0.2473985932409942, 0.230314288890154, 0.2288975263968448, 0.2285166072939848] ***
*** finished computation of 3 references, err: [Inf, 0.2828453889192044, 0.26723451269413534, 0.2473985932409942, 0.230314288890154, 0.2288975263968448, 0.2285166072939848] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [69, 155, 22]]
** centroid: 1, normalized-entropy: 0.7860040858569501, [(1, 69), (2, 155), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [214, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [110, 97, 0]]
** centroid: 3, normalized-entropy: 0.9971530725724463, [(1, 110), (2, 97)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2522488374240708] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2522488374240708, 0.23891082268928748] ***
*** starting iteration: 2; err: [Inf, 0.2522488374240708, 0.23891082268928748] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2522488374240708, 0.23891082268928748, 0.23811067396850288] ***
*** finished computation of 3 references, err: [Inf, 0.2522488374240708, 0.23891082268928748, 0.23811067396850288] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [88, 161, 23]]
** centroid: 1, normalized-entropy: 0.8049929921712348, [(1, 88), (2, 161), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [96, 87, 0]]
** centroid: 2, normalized-entropy: 0.9982545693874832, [(1, 96), (2, 87)]
*** center 3: selecting labels [1] (freq >= 2) [from [212, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5756785689626593] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5756785689626593, 0.3336118153707535] ***
*** finished computation of 3 references, err: [Inf, 0.5756785689626593, 0.3336118153707535] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [285, 50, 0]]
** centroid: 1, normalized-entropy: 0.6079696120060726, [(1, 285), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [102, 6, 0]]
** centroid: 2, normalized-entropy: 0.3095434291503252, [(1, 102), (2, 6)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [18, 184, 21]]
** centroid: 3, normalized-entropy: 0.5318142594520984, [(1, 18), (2, 184), (3, 21)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36960346332152205] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36960346332152205, 0.3110902286253345] ***
*** finished computation of 3 references, err: [Inf, 0.36960346332152205, 0.3110902286253345] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [11, 182, 22]]
** centroid: 1, normalized-entropy: 0.4791591457027649, [(1, 11), (2, 182), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [201, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [181, 70, 0]]
** centroid: 3, normalized-entropy: 0.8539263557507407, [(1, 181), (2, 70)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3163664626401627] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3163664626401627, 0.2911803356806065] ***
*** finished computation of 3 references, err: [Inf, 0.3163664626401627, 0.2911803356806065] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [165, 36, 0]]
** centroid: 1, normalized-entropy: 0.678114052360606, [(1, 165), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [231, 11, 0]]
** centroid: 2, normalized-entropy: 0.2667649878030262, [(1, 231), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 201, 23]]
** centroid: 3, normalized-entropy: 0.47742940903851516, [(2, 201), (3, 23)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19684968781363857] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19684968781363857, 0.16129591232641144] ***
*** starting iteration: 2; err: [Inf, 0.19684968781363857, 0.16129591232641144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19684968781363857, 0.16129591232641144, 0.15348996696140696] ***
*** starting iteration: 3; err: [Inf, 0.19684968781363857, 0.16129591232641144, 0.15348996696140696] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19684968781363857, 0.16129591232641144, 0.15348996696140696, 0.15270455557693569] ***
*** finished computation of 7 references, err: [Inf, 0.19684968781363857, 0.16129591232641144, 0.15348996696140696, 0.15270455557693569] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [70, 11, 0]]
** centroid: 1, normalized-entropy: 0.5731393980555147, [(1, 70), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [85, 6, 0]]
** centroid: 2, normalized-entropy: 0.35056382068186565, [(1, 85), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 99, 21]]
** centroid: 3, normalized-entropy: 0.6690158350565576, [(2, 99), (3, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [73, 47, 0]]
** centroid: 4, normalized-entropy: 0.9658666887161, [(1, 73), (2, 47)]
*** center 5: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [13, 77, 0]]
** centroid: 6, normalized-entropy: 0.5957610966703235, [(1, 13), (2, 77)]
*** center 7: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19427490666246172] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19427490666246172, 0.15046825570457878] ***
*** starting iteration: 2; err: [Inf, 0.19427490666246172, 0.15046825570457878] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19427490666246172, 0.15046825570457878, 0.14732608970148542] ***
*** starting iteration: 3; err: [Inf, 0.19427490666246172, 0.15046825570457878, 0.14732608970148542] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19427490666246172, 0.15046825570457878, 0.14732608970148542, 0.14630941186949187] ***
*** finished computation of 7 references, err: [Inf, 0.19427490666246172, 0.15046825570457878, 0.14732608970148542, 0.14630941186949187] ***
*** center 1: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 88, 22]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 88), (3, 22)]
*** center 3: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [94, 10, 0]]
** centroid: 4, normalized-entropy: 0.45668363153944286, [(1, 94), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [67, 26, 0]]
** centroid: 5, normalized-entropy: 0.8548640967818041, [(1, 67), (2, 26)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 99, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [63, 29, 0]]
** centroid: 7, normalized-entropy: 0.8991045208483789, [(1, 63), (2, 29)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1943044204108146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1943044204108146, 0.1650827888656279] ***
*** starting iteration: 2; err: [Inf, 0.1943044204108146, 0.1650827888656279] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1943044204108146, 0.1650827888656279, 0.15381538749335968] ***
*** starting iteration: 3; err: [Inf, 0.1943044204108146, 0.1650827888656279, 0.15381538749335968] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1943044204108146, 0.1650827888656279, 0.15381538749335968, 0.15133713863334847] ***
*** finished computation of 7 references, err: [Inf, 0.1943044204108146, 0.1650827888656279, 0.15381538749335968, 0.15133713863334847] ***
*** center 1: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [96, 21, 0]]
** centroid: 2, normalized-entropy: 0.6789538995185759, [(1, 96), (2, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [55, 47, 0]]
** centroid: 4, normalized-entropy: 0.995558084395954, [(1, 55), (2, 47)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [6, 67, 0]]
** centroid: 5, normalized-entropy: 0.4098553703184051, [(1, 6), (2, 67)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 113, 23]]
** centroid: 6, normalized-entropy: 0.6556823431457255, [(2, 113), (3, 23)]
*** center 7: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22537148002865123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22537148002865123, 0.1981392964062088] ***
*** finished computation of 7 references, err: [Inf, 0.22537148002865123, 0.1981392964062088] ***
*** center 1: selecting labels [1] (freq >= 1) [from [116, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [19, 48, 0]]
** centroid: 2, normalized-entropy: 0.8602858652332406, [(1, 19), (2, 48)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [98, 20, 0]]
** centroid: 3, normalized-entropy: 0.656540281386946, [(1, 98), (2, 20)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 83, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [71, 35, 0]]
** centroid: 5, normalized-entropy: 0.9151190292999326, [(1, 71), (2, 35)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 54, 21]]
** centroid: 6, normalized-entropy: 0.8554508105601307, [(2, 54), (3, 21)]
*** center 7: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3312963884263795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3312963884263795, 0.20518989834482076] ***
*** finished computation of 7 references, err: [Inf, 0.3312963884263795, 0.20518989834482076] ***
*** center 1: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 79, 22]]
** centroid: 2, normalized-entropy: 0.756170148929897, [(2, 79), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [53, 11, 0]]
** centroid: 3, normalized-entropy: 0.6619760641115651, [(1, 53), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [43, 50, 0]]
** centroid: 4, normalized-entropy: 0.9959094138937685, [(1, 43), (2, 50)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [8, 84, 0]]
** centroid: 5, normalized-entropy: 0.42622865699814483, [(1, 8), (2, 84)]
*** center 6: selecting labels [1] (freq >= 1) [from [117, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [107, 28, 0]]
** centroid: 7, normalized-entropy: 0.7364977795505668, [(1, 107), (2, 28)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22650381861843805] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22650381861843805, 0.20260177835517715] ***
*** finished computation of 7 references, err: [Inf, 0.22650381861843805, 0.20260177835517715] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [59, 1, 0]]
** centroid: 1, normalized-entropy: 0.12229159706937456, [(1, 59), (2, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [73, 17, 0]]
** centroid: 3, normalized-entropy: 0.6991413063352633, [(1, 73), (2, 17)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 135, 23]]
** centroid: 4, normalized-entropy: 0.5986413140557518, [(2, 135), (3, 23)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 64, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [105, 31, 0]]
** centroid: 6, normalized-entropy: 0.7744050105375746, [(1, 105), (2, 31)]
*** center 7: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 10)
[0.9209988431545318, 0.9119928311545079, 0.9109738480995966, 0.9019738301175426, 0.891990793188398, 0.8709547871224519, 0.8689857522192851, 0.8660067252881625, 0.8399956843070616, 0.7929905953858049]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9209988431545318
finished with 11
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.4474519770592451] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4474519770592451, 0.29925904217715915] ***
*** starting iteration: 2; err: [Inf, 0.4474519770592451, 0.29925904217715915] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4474519770592451, 0.29925904217715915, 0.29489105686058736] ***
*** starting iteration: 3; err: [Inf, 0.4474519770592451, 0.29925904217715915, 0.29489105686058736] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4474519770592451, 0.29925904217715915, 0.29489105686058736, 0.2943471478796131] ***
*** finished computation of 3 references, err: [Inf, 0.4474519770592451, 0.29925904217715915, 0.29489105686058736, 0.2943471478796131] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [264, 14, 0]]
** centroid: 1, normalized-entropy: 0.28792302804926934, [(1, 264), (2, 14)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 169, 21]]
** centroid: 2, normalized-entropy: 0.5015014472254578, [(2, 169), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [141, 57, 0]]
** centroid: 3, normalized-entropy: 0.8659653498997099, [(1, 141), (2, 57)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3784588590512859] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3784588590512859, 0.2943086737098041] ***
*** starting iteration: 2; err: [Inf, 0.3784588590512859, 0.2943086737098041] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3784588590512859, 0.2943086737098041, 0.287856872983813] ***
*** starting iteration: 3; err: [Inf, 0.3784588590512859, 0.2943086737098041, 0.287856872983813] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3784588590512859, 0.2943086737098041, 0.287856872983813, 0.2863313225188713] ***
*** starting iteration: 4; err: [Inf, 0.3784588590512859, 0.2943086737098041, 0.287856872983813, 0.2863313225188713] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3784588590512859, 0.2943086737098041, 0.287856872983813, 0.2863313225188713, 0.2856046282581572] ***
*** finished computation of 3 references, err: [Inf, 0.3784588590512859, 0.2943086737098041, 0.287856872983813, 0.2863313225188713, 0.2856046282581572] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [245, 7, 0]]
** centroid: 1, normalized-entropy: 0.18312206830137262, [(1, 245), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [145, 37, 0]]
** centroid: 2, normalized-entropy: 0.7284727029435499, [(1, 145), (2, 37)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [3, 208, 22]]
** centroid: 3, normalized-entropy: 0.34606775139178825, [(1, 3), (2, 208), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.43413309531280775] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43413309531280775, 0.3049064887020139] ***
*** starting iteration: 2; err: [Inf, 0.43413309531280775, 0.3049064887020139] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43413309531280775, 0.3049064887020139, 0.30113137535600065] ***
*** starting iteration: 3; err: [Inf, 0.43413309531280775, 0.3049064887020139, 0.30113137535600065] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43413309531280775, 0.3049064887020139, 0.30113137535600065, 0.3002067685037896] ***
*** finished computation of 3 references, err: [Inf, 0.43413309531280775, 0.3049064887020139, 0.30113137535600065, 0.3002067685037896] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [85, 167, 23]]
** centroid: 1, normalized-entropy: 0.794937937594389, [(1, 85), (2, 167), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [97, 81, 0]]
** centroid: 2, normalized-entropy: 0.9941637909337798, [(1, 97), (2, 81)]
*** center 3: selecting labels [1] (freq >= 2) [from [214, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 11)
[0.9209988431545318, 0.9119928311545079, 0.9109738480995966, 0.9019738301175426, 0.8959648271025517, 0.891990793188398, 0.8709547871224519, 0.8689857522192851, 0.8660067252881625, 0.8399956843070616, 0.7929905953858049]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9209988431545318
finished with 13
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.2441000749661892] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2441000749661892, 0.16521656510382388] ***
*** finished computation of 7 references, err: [Inf, 0.2441000749661892, 0.16521656510382388] ***
*** center 1: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 133, 21]]
** centroid: 2, normalized-entropy: 0.5746356978376794, [(2, 133), (3, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [46, 62, 0]]
** centroid: 4, normalized-entropy: 0.9841095278800533, [(1, 46), (2, 62)]
*** center 5: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [63, 45, 0]]
** centroid: 7, normalized-entropy: 0.9798687566511527, [(1, 63), (2, 45)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1752522629329647] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1752522629329647, 0.15528485115556076] ***
*** finished computation of 7 references, err: [Inf, 0.1752522629329647, 0.15528485115556076] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 96, 22]]
** centroid: 1, normalized-entropy: 0.693965967334286, [(2, 96), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [31, 98, 0]]
** centroid: 2, normalized-entropy: 0.7955555473202811, [(1, 31), (2, 98)]
*** center 3: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [27, 48, 0]]
** centroid: 4, normalized-entropy: 0.9426831892554921, [(1, 27), (2, 48)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [61, 1, 0]]
** centroid: 5, normalized-entropy: 0.11911602665564841, [(1, 61), (2, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [102, 9, 0]]
** centroid: 7, normalized-entropy: 0.40597703847557104, [(1, 102), (2, 9)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1948800991740318] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1948800991740318, 0.15935130443248055] ***
*** finished computation of 7 references, err: [Inf, 0.1948800991740318, 0.15935130443248055] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [10, 110, 0]]
** centroid: 1, normalized-entropy: 0.4138168503036336, [(1, 10), (2, 110)]
*** center 2: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [113, 15, 0]]
** centroid: 4, normalized-entropy: 0.5212220180699689, [(1, 113), (2, 15)]
*** center 5: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [30, 29, 0]]
** centroid: 6, normalized-entropy: 0.9997927658541268, [(1, 30), (2, 29)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 94, 23]]
** centroid: 7, normalized-entropy: 0.7150375653354627, [(2, 94), (3, 23)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3888469685747235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3888469685747235, 0.23160796040702644] ***
*** finished computation of 7 references, err: [Inf, 0.3888469685747235, 0.23160796040702644] ***
*** center 1: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [113, 3, 0]]
** centroid: 2, normalized-entropy: 0.17319556189412666, [(1, 113), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [70, 1, 0]]
** centroid: 3, normalized-entropy: 0.10679203237584184, [(1, 70), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [40, 51, 0]]
** centroid: 4, normalized-entropy: 0.9894340222202265, [(1, 40), (2, 51)]
*** center 5: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 7: selecting labels [1, 2, 3] (freq >= 1) [from [3, 185, 21]]
** centroid: 7, normalized-entropy: 0.3638832563326815, [(1, 3), (2, 185), (3, 21)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2825906418230401] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2825906418230401, 0.19944787833342578] ***
*** finished computation of 7 references, err: [Inf, 0.2825906418230401, 0.19944787833342578] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [76, 22, 0]]
** centroid: 1, normalized-entropy: 0.7682814090975241, [(1, 76), (2, 22)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 65, 20]]
** centroid: 2, normalized-entropy: 0.787126586201269, [(2, 65), (3, 20)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 106, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 23, 2]]
** centroid: 4, normalized-entropy: 0.4021791902022729, [(2, 23), (3, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [119, 25, 0]]
** centroid: 5, normalized-entropy: 0.665899177983886, [(1, 119), (2, 25)]
*** center 6: selecting labels [1] (freq >= 1) [from [133, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [65, 11, 0]]
** centroid: 7, normalized-entropy: 0.5965109917085881, [(1, 65), (2, 11)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3207104417720231] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3207104417720231, 0.2232995504454739] ***
*** finished computation of 7 references, err: [Inf, 0.3207104417720231, 0.2232995504454739] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [35, 15, 0]]
** centroid: 1, normalized-entropy: 0.8812908992306927, [(1, 35), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [8, 66, 0]]
** centroid: 2, normalized-entropy: 0.4941829348497886, [(1, 8), (2, 66)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [53, 2, 0]]
** centroid: 3, normalized-entropy: 0.22536363912739493, [(1, 53), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [104, 57, 0]]
** centroid: 4, normalized-entropy: 0.9376220862260217, [(1, 104), (2, 57)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 66, 2]]
** centroid: 5, normalized-entropy: 0.1914332548141934, [(2, 66), (3, 2)]
*** center 6: selecting labels [1] (freq >= 1) [from [196, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 42, 21]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 42), (3, 21)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9219998441555327, 0.9209988431545318, 0.9119928311545079, 0.9109738480995966, 0.9050098002193812, 0.9019738301175426, 0.8959648271025517, 0.891990793188398, 0.8709547871224519, 0.8689857522192851, 0.8660067252881625, 0.8399956843070616, 0.7929905953858049]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 1) => 0.9219998441555327
finished with 14
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.1916376077348028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1916376077348028, 0.1532104266094262] ***
*** finished computation of 7 references, err: [Inf, 0.1916376077348028, 0.1532104266094262] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [92, 8, 0]]
** centroid: 1, normalized-entropy: 0.4021791902022729, [(1, 92), (2, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 76, 1]]
** centroid: 3, normalized-entropy: 0.1000009430103234, [(2, 76), (3, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [82, 32, 0]]
** centroid: 4, normalized-entropy: 0.8564052389131375, [(1, 82), (2, 32)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 114, 20]]
** centroid: 5, normalized-entropy: 0.6079696120060726, [(2, 114), (3, 20)]
*** center 6: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [80, 10, 0]]
** centroid: 7, normalized-entropy: 0.5032583347756457, [(1, 80), (2, 10)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18589040448063932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18589040448063932, 0.16446844603994798] ***
*** finished computation of 7 references, err: [Inf, 0.18589040448063932, 0.16446844603994798] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 107, 15]]
** centroid: 1, normalized-entropy: 0.537783841832964, [(2, 107), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [11, 125, 7]]
** centroid: 3, normalized-entropy: 0.42106104526071975, [(1, 11), (2, 125), (3, 7)]
*** center 4: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [136, 2, 0]]
** centroid: 5, normalized-entropy: 0.10928571467638523, [(1, 136), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [88, 3, 0]]
** centroid: 6, normalized-entropy: 0.20905980566852464, [(1, 88), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [68, 15, 0]]
** centroid: 7, normalized-entropy: 0.6816559115981193, [(1, 68), (2, 15)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19128124443171868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19128124443171868, 0.15577515991714627] ***
*** finished computation of 7 references, err: [Inf, 0.19128124443171868, 0.15577515991714627] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [86, 54, 0]]
** centroid: 1, normalized-entropy: 0.9619780596506257, [(1, 86), (2, 54)]
*** center 2: selecting labels [1] (freq >= 1) [from [123, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 45, 21]]
** centroid: 3, normalized-entropy: 0.9023932827949788, [(2, 45), (3, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [5, 80, 0]]
** centroid: 4, normalized-entropy: 0.32275695889739825, [(1, 5), (2, 80)]
*** center 5: selecting labels [1] (freq >= 1) [from [133, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [49, 20, 0]]
** centroid: 6, normalized-entropy: 0.868533960265235, [(1, 49), (2, 20)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 49, 2]]
** centroid: 7, normalized-entropy: 0.23868451135100152, [(2, 49), (3, 2)]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9230158302014589, 0.9219998441555327, 0.9209988431545318, 0.9119928311545079, 0.9109738480995966, 0.9050098002193812, 0.9019738301175426, 0.8959648271025517, 0.891990793188398, 0.8709547871224519, 0.8689857522192851, 0.8660067252881625, 0.8399956843070616, 0.7929905953858049]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.9, 1) => 0.9230158302014589
finished with 14
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9230158302014589, 0.9219998441555327, 0.9209988431545318, 0.9119928311545079, 0.9109738480995966, 0.9050098002193812, 0.9019738301175426, 0.8959648271025517, 0.891990793188398, 0.8709547871224519, 0.8689857522192851, 0.8660067252881625, 0.8399956843070616, 0.7929905953858049]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.9, 1) => 0.9230158302014589
finished with 15
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.4317911030086982] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4317911030086982, 0.2936286189042412] ***
*** starting iteration: 2; err: [Inf, 0.4317911030086982, 0.2936286189042412] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4317911030086982, 0.2936286189042412, 0.29293258138023337] ***
*** finished computation of 3 references, err: [Inf, 0.4317911030086982, 0.2936286189042412, 0.29293258138023337] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [255, 19, 0]]
** centroid: 1, normalized-entropy: 0.36346730502462554, [(1, 255), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [150, 42, 0]]
** centroid: 2, normalized-entropy: 0.7578784625383954, [(1, 150), (2, 42)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 179, 21]]
** centroid: 3, normalized-entropy: 0.48464773973144537, [(2, 179), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39172714845887546] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39172714845887546, 0.3131088947519839] ***
*** starting iteration: 2; err: [Inf, 0.39172714845887546, 0.3131088947519839] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39172714845887546, 0.3131088947519839, 0.2988684088176024] ***
*** starting iteration: 3; err: [Inf, 0.39172714845887546, 0.3131088947519839, 0.2988684088176024] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39172714845887546, 0.3131088947519839, 0.2988684088176024, 0.294786650838255] ***
*** finished computation of 3 references, err: [Inf, 0.39172714845887546, 0.3131088947519839, 0.2988684088176024, 0.294786650838255] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [94, 147, 22]]
** centroid: 1, normalized-entropy: 0.8195969700372561, [(1, 94), (2, 147), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [107, 105, 0]]
** centroid: 2, normalized-entropy: 0.9999357993751539, [(1, 107), (2, 105)]
*** center 3: selecting labels [1] (freq >= 2) [from [192, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4379182246623971] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4379182246623971, 0.2965280011664892] ***
*** starting iteration: 2; err: [Inf, 0.4379182246623971, 0.2965280011664892] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4379182246623971, 0.2965280011664892, 0.2923112197142413] ***
*** starting iteration: 3; err: [Inf, 0.4379182246623971, 0.2965280011664892, 0.2923112197142413] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4379182246623971, 0.2965280011664892, 0.2923112197142413, 0.29088985287853847] ***
*** finished computation of 3 references, err: [Inf, 0.4379182246623971, 0.2965280011664892, 0.2923112197142413, 0.29088985287853847] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [241, 16, 0]]
** centroid: 1, normalized-entropy: 0.3363392183323188, [(1, 241), (2, 16)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 182, 23]]
** centroid: 2, normalized-entropy: 0.506501809234841, [(2, 182), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [155, 50, 0]]
** centroid: 3, normalized-entropy: 0.8014698931335286, [(1, 155), (2, 50)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9230158302014589, 0.9219998441555327, 0.9209988431545318, 0.9119928311545079, 0.9109738480995966, 0.9099998201794609, 0.9050098002193812, 0.9019738301175426, 0.8959648271025517, 0.891990793188398, 0.8709547871224519, 0.8689857522192851, 0.8660067252881625, 0.8399956843070616, 0.7929905953858049]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.9, 1) => 0.9230158302014589
finished with 15
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9230158302014589, 0.9219998441555327, 0.9209988431545318, 0.9119928311545079, 0.9109738480995966, 0.9099998201794609, 0.9050098002193812, 0.9019738301175426, 0.8959648271025517, 0.891990793188398, 0.8709547871224519, 0.8689857522192851, 0.8660067252881625, 0.8399956843070616, 0.7929905953858049]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.9, 1) => 0.9230158302014589
finished with 15
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9230158302014589, 0.9219998441555327, 0.9209988431545318, 0.9119928311545079, 0.9109738480995966, 0.9099998201794609, 0.9050098002193812, 0.9019738301175426, 0.8959648271025517, 0.891990793188398, 0.8709547871224519, 0.8689857522192851, 0.8660067252881625, 0.8399956843070616, 0.7929905953858049]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.9, 1) => 0.9230158302014589
finished with 15
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.219446876379312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.219446876379312, 0.16198631958756596] ***
*** finished computation of 7 references, err: [Inf, 0.219446876379312, 0.16198631958756596] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [128, 17, 0]]
** centroid: 1, normalized-entropy: 0.5213789637993774, [(1, 128), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [159, 8, 0]]
** centroid: 2, normalized-entropy: 0.27742650870032465, [(1, 159), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 70, 2]]
** centroid: 3, normalized-entropy: 0.18312206830137262, [(2, 70), (3, 2)]
*** center 4: selecting labels [1] (freq >= 1) [from [257, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [16, 161, 0]]
** centroid: 5, normalized-entropy: 0.43778850275840236, [(1, 16), (2, 161)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [37, 57, 0]]
** centroid: 6, normalized-entropy: 0.9670941140642181, [(1, 37), (2, 57)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 57, 31]]
** centroid: 7, normalized-entropy: 0.9360814319397586, [(2, 57), (3, 31)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20258265162352473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20258265162352473, 0.15670721220923586] ***
*** finished computation of 7 references, err: [Inf, 0.20258265162352473, 0.15670721220923586] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [66, 9, 0]]
** centroid: 1, normalized-entropy: 0.5293608652873645, [(1, 66), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 10, 0]]
** centroid: 2, normalized-entropy: 0.6631968402398286, [(1, 48), (2, 10)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [40, 3, 0]]
** centroid: 3, normalized-entropy: 0.3650551896402848, [(1, 40), (2, 3)]
*** center 4: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [43, 43, 0]]
** centroid: 5, normalized-entropy: 1.0, [(1, 43), (2, 43)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 110, 20]]
** centroid: 6, normalized-entropy: 0.6193821946787638, [(2, 110), (3, 20)]
*** center 7: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19294586247671394] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19294586247671394, 0.1599317059684545] ***
*** finished computation of 7 references, err: [Inf, 0.19294586247671394, 0.1599317059684545] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [33, 12, 0]]
** centroid: 1, normalized-entropy: 0.8366407419411671, [(1, 33), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [61, 26, 0]]
** centroid: 2, normalized-entropy: 0.8798813089176428, [(1, 61), (2, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [79, 5, 0]]
** centroid: 3, normalized-entropy: 0.3255517134879513, [(1, 79), (2, 5)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 64, 17]]
** centroid: 4, normalized-entropy: 0.7412466905234424, [(2, 64), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [27, 5, 0]]
** centroid: 5, normalized-entropy: 0.625262405223423, [(1, 27), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [106, 6, 0]]
** centroid: 6, normalized-entropy: 0.3013786435930858, [(1, 106), (2, 6)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 59, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22009149634372444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22009149634372444, 0.1743384893424809] ***
*** finished computation of 7 references, err: [Inf, 0.22009149634372444, 0.1743384893424809] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [20, 1, 0]]
** centroid: 1, normalized-entropy: 0.2761954276479391, [(1, 20), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [43, 37, 0]]
** centroid: 2, normalized-entropy: 0.9959386076315955, [(1, 43), (2, 37)]
*** center 3: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 134, 15]]
** centroid: 4, normalized-entropy: 0.47111945700263613, [(2, 134), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [85, 6, 0]]
** centroid: 5, normalized-entropy: 0.35056382068186565, [(1, 85), (2, 6)]
*** center 6: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [34, 16, 0]]
** centroid: 7, normalized-entropy: 0.9043814577244941, [(1, 34), (2, 16)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2406355644464493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2406355644464493, 0.20396485574916004] ***
*** finished computation of 7 references, err: [Inf, 0.2406355644464493, 0.20396485574916004] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [52, 108, 21]]
** centroid: 2, normalized-entropy: 0.8340916583124672, [(1, 52), (2, 108), (3, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [35, 45, 0]]
** centroid: 4, normalized-entropy: 0.9886994082884974, [(1, 35), (2, 45)]
*** center 5: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [28, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [54, 29, 0]]
** centroid: 7, normalized-entropy: 0.9335289015212996, [(1, 54), (2, 29)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1940556018948555] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1940556018948555, 0.16228393096104266] ***
*** finished computation of 7 references, err: [Inf, 0.1940556018948555, 0.16228393096104266] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 93, 1]]
** centroid: 1, normalized-entropy: 0.0849955598367127, [(2, 93), (3, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 58, 14]]
** centroid: 2, normalized-entropy: 0.710676853856123, [(2, 58), (3, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [83, 10, 0]]
** centroid: 4, normalized-entropy: 0.49241092131589825, [(1, 83), (2, 10)]
*** center 5: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [80, 26, 0]]
** centroid: 6, normalized-entropy: 0.8037159237834126, [(1, 80), (2, 26)]
*** center 7: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17725658078026027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17725658078026027, 0.15715195351839065] ***
*** finished computation of 7 references, err: [Inf, 0.17725658078026027, 0.15715195351839065] ***
*** center 1: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [57, 48, 0]]
** centroid: 2, normalized-entropy: 0.9946937953613056, [(1, 57), (2, 48)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [33, 13, 0]]
** centroid: 3, normalized-entropy: 0.8589810370425965, [(1, 33), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [73, 12, 0]]
** centroid: 4, normalized-entropy: 0.5873116089977589, [(1, 73), (2, 12)]
*** center 5: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [18, 19, 0]]
** centroid: 6, normalized-entropy: 0.9994730201859837, [(1, 18), (2, 19)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 92, 18]]
** centroid: 7, normalized-entropy: 0.6429383500409613, [(2, 92), (3, 18)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18635595223493875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18635595223493875, 0.1500519052799791] ***
*** finished computation of 7 references, err: [Inf, 0.18635595223493875, 0.1500519052799791] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [58, 6, 0]]
** centroid: 1, normalized-entropy: 0.44886448872302936, [(1, 58), (2, 6)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 61, 16]]
** centroid: 2, normalized-entropy: 0.7372413771710565, [(2, 61), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [18, 48, 0]]
** centroid: 3, normalized-entropy: 0.8453509366224364, [(1, 18), (2, 48)]
*** center 4: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [39, 8, 0]]
** centroid: 5, normalized-entropy: 0.6581912658132184, [(1, 39), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [71, 21, 0]]
** centroid: 6, normalized-entropy: 0.7749672673267259, [(1, 71), (2, 21)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 51, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20055982248298823] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20055982248298823, 0.15342478453181685] ***
*** finished computation of 7 references, err: [Inf, 0.20055982248298823, 0.15342478453181685] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 49, 18]]
** centroid: 1, normalized-entropy: 0.8395304981054318, [(2, 49), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [20, 39, 0]]
** centroid: 4, normalized-entropy: 0.9238422284571813, [(1, 20), (2, 39)]
*** center 5: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [44, 28, 0]]
** centroid: 6, normalized-entropy: 0.9640787648082293, [(1, 44), (2, 28)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [7, 75, 0]]
** centroid: 7, normalized-entropy: 0.42080948947668984, [(1, 7), (2, 75)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20463007525913418] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20463007525913418, 0.14971595320338382] ***
*** finished computation of 7 references, err: [Inf, 0.20463007525913418, 0.14971595320338382] ***
*** center 1: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [80, 3, 0]]
** centroid: 2, normalized-entropy: 0.2243269603450881, [(1, 80), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [39, 35, 0]]
** centroid: 3, normalized-entropy: 0.9978913098356861, [(1, 39), (2, 35)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [27, 44, 0]]
** centroid: 4, normalized-entropy: 0.9582407282588409, [(1, 27), (2, 44)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 51, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 57, 11]]
** centroid: 6, normalized-entropy: 0.6385146263620961, [(2, 57), (3, 11)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [49, 9, 0]]
** centroid: 7, normalized-entropy: 0.6226343162547099, [(1, 49), (2, 9)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1823137968359515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1823137968359515, 0.1558015274144709] ***
*** finished computation of 7 references, err: [Inf, 0.1823137968359515, 0.1558015274144709] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [52, 26, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 52), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [44, 39, 0]]
** centroid: 2, normalized-entropy: 0.9973806632063373, [(1, 44), (2, 39)]
*** center 3: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 74, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [49, 7, 0]]
** centroid: 6, normalized-entropy: 0.5435644431995963, [(1, 49), (2, 7)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 39, 18]]
** centroid: 7, normalized-entropy: 0.8997437586982626, [(2, 39), (3, 18)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2431503809019923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2431503809019923, 0.19441097235027702] ***
*** finished computation of 7 references, err: [Inf, 0.2431503809019923, 0.19441097235027702] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [7, 45, 0]]
** centroid: 1, normalized-entropy: 0.5699613760403499, [(1, 7), (2, 45)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 19, 1]]
** centroid: 3, normalized-entropy: 0.2863969571159561, [(2, 19), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 26, 8]]
** centroid: 4, normalized-entropy: 0.787126586201269, [(2, 26), (3, 8)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [135, 15, 0]]
** centroid: 5, normalized-entropy: 0.46899559358928133, [(1, 135), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 68, 0]]
** centroid: 6, normalized-entropy: 0.25253077151613923, [(1, 3), (2, 68)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [160, 5, 0]]
** centroid: 7, normalized-entropy: 0.19590927087360496, [(1, 160), (2, 5)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2242891114614904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2242891114614904, 0.17165437654219567] ***
*** finished computation of 7 references, err: [Inf, 0.2242891114614904, 0.17165437654219567] ***
*** center 1: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 33, 1]]
** centroid: 2, normalized-entropy: 0.1914332548141934, [(2, 33), (3, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [53, 56, 0]]
** centroid: 3, normalized-entropy: 0.9994535015927487, [(1, 53), (2, 56)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 3, 18]]
** centroid: 4, normalized-entropy: 0.5916727785823274, [(2, 3), (3, 18)]
*** center 5: selecting labels [1] (freq >= 1) [from [126, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [26, 34, 0]]
** centroid: 6, normalized-entropy: 0.9871377743721862, [(1, 26), (2, 34)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 61, 0]]
** centroid: 7, normalized-entropy: 0.11911602665564841, [(1, 1), (2, 61)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19998167462274433] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19998167462274433, 0.170071715997532] ***
*** finished computation of 7 references, err: [Inf, 0.19998167462274433, 0.170071715997532] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 100, 17]]
** centroid: 1, normalized-entropy: 0.5979502983976931, [(2, 100), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [70, 47, 0]]
** centroid: 3, normalized-entropy: 0.971941751933861, [(1, 70), (2, 47)]
*** center 4: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [67, 44, 0]]
** centroid: 5, normalized-entropy: 0.9688035512085579, [(1, 67), (2, 44)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [50, 5, 0]]
** centroid: 6, normalized-entropy: 0.43949698692151346, [(1, 50), (2, 5)]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21094397597387432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21094397597387432, 0.15960937216691673] ***
*** finished computation of 7 references, err: [Inf, 0.21094397597387432, 0.15960937216691673] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [48, 52, 0]]
** centroid: 1, normalized-entropy: 0.998845535995202, [(1, 48), (2, 52)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 77, 15]]
** centroid: 2, normalized-entropy: 0.6415410585827175, [(2, 77), (3, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [75, 1, 0]]
** centroid: 4, normalized-entropy: 0.10106696361212422, [(1, 75), (2, 1)]
*** center 5: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 33, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [44, 26, 0]]
** centroid: 7, normalized-entropy: 0.9517626756348312, [(1, 44), (2, 26)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18019291786849498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18019291786849498, 0.1540547250304371] ***
*** finished computation of 7 references, err: [Inf, 0.18019291786849498, 0.1540547250304371] ***
*** center 1: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [36, 37, 0]]
** centroid: 2, normalized-entropy: 0.9998646331239297, [(1, 36), (2, 37)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [9, 37, 0]]
** centroid: 3, normalized-entropy: 0.7131467486384921, [(1, 9), (2, 37)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [9, 66, 0]]
** centroid: 4, normalized-entropy: 0.5293608652873645, [(1, 9), (2, 66)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 37, 14]]
** centroid: 5, normalized-entropy: 0.8478617451660525, [(2, 37), (3, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1816542581617832] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1816542581617832, 0.15790226747468114] ***
*** finished computation of 7 references, err: [Inf, 0.1816542581617832, 0.15790226747468114] ***
*** center 1: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [5, 29, 0]]
** centroid: 2, normalized-entropy: 0.6024308020404452, [(1, 5), (2, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [74, 17, 0]]
** centroid: 3, normalized-entropy: 0.6947570868163001, [(1, 74), (2, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 32, 17]]
** centroid: 5, normalized-entropy: 0.9313043685793762, [(2, 32), (3, 17)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 95, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [71, 12, 0]]
** centroid: 7, normalized-entropy: 0.5961045458832345, [(1, 71), (2, 12)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20080846270127223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20080846270127223, 0.15593896409776062] ***
*** finished computation of 7 references, err: [Inf, 0.20080846270127223, 0.15593896409776062] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 63, 1]]
** centroid: 1, normalized-entropy: 0.11611507530476962, [(2, 63), (3, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [57, 24, 0]]
** centroid: 2, normalized-entropy: 0.876716288999464, [(1, 57), (2, 24)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 49, 16]]
** centroid: 3, normalized-entropy: 0.8051250074646822, [(2, 49), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [50, 12, 0]]
** centroid: 5, normalized-entropy: 0.708835673332196, [(1, 50), (2, 12)]
*** center 6: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [66, 47, 0]]
** centroid: 7, normalized-entropy: 0.9795091579328259, [(1, 66), (2, 47)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23109640836901962] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23109640836901962, 0.1673554327059537] ***
*** finished computation of 7 references, err: [Inf, 0.23109640836901962, 0.1673554327059537] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 77, 15]]
** centroid: 1, normalized-entropy: 0.6415410585827175, [(2, 77), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [71, 21, 0]]
** centroid: 2, normalized-entropy: 0.7749672673267259, [(1, 71), (2, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 48, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [13, 32, 0]]
** centroid: 5, normalized-entropy: 0.8672816222000259, [(1, 13), (2, 32)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [43, 11, 0]]
** centroid: 6, normalized-entropy: 0.7292739418449411, [(1, 43), (2, 11)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [134, 1, 0]]
** centroid: 7, normalized-entropy: 0.06306780800385665, [(1, 134), (2, 1)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.16674304834008216] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16674304834008216, 0.15070385545678436] ***
*** finished computation of 7 references, err: [Inf, 0.16674304834008216, 0.15070385545678436] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 78, 16]]
** centroid: 1, normalized-entropy: 0.6581912658132184, [(2, 78), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [103, 25, 0]]
** centroid: 2, normalized-entropy: 0.7124534449668779, [(1, 103), (2, 25)]
*** center 3: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [36, 33, 0]]
** centroid: 4, normalized-entropy: 0.9986359641585719, [(1, 36), (2, 33)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [39, 1, 0]]
** centroid: 5, normalized-entropy: 0.1686609314966701, [(1, 39), (2, 1)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 53, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22634865829255432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22634865829255432, 0.1962651788513176] ***
*** finished computation of 7 references, err: [Inf, 0.22634865829255432, 0.1962651788513176] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [11, 41, 0]]
** centroid: 1, normalized-entropy: 0.7444131797881749, [(1, 11), (2, 41)]
*** center 2: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [24, 129, 15]]
** centroid: 3, normalized-entropy: 0.6340038541132081, [(1, 24), (2, 129), (3, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [22, 2, 0]]
** centroid: 4, normalized-entropy: 0.4138168503036336, [(1, 22), (2, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [73, 1, 0]]
** centroid: 6, normalized-entropy: 0.10327508457163559, [(1, 73), (2, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [142, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20380248478008434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20380248478008434, 0.1633112775273621] ***
*** finished computation of 7 references, err: [Inf, 0.20380248478008434, 0.1633112775273621] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [30, 21, 0]]
** centroid: 1, normalized-entropy: 0.9774178175281716, [(1, 30), (2, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [14, 60, 1]]
** centroid: 3, normalized-entropy: 0.5000748986370431, [(1, 14), (2, 60), (3, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 4, 0]]
** centroid: 4, normalized-entropy: 0.3159971329784246, [(1, 66), (2, 4)]
*** center 5: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 103, 16]]
** centroid: 7, normalized-entropy: 0.5695273910401157, [(2, 103), (3, 16)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23158381755650043] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23158381755650043, 0.16191175340861083] ***
*** finished computation of 7 references, err: [Inf, 0.23158381755650043, 0.16191175340861083] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [49, 6, 0]]
** centroid: 1, normalized-entropy: 0.4971677614160751, [(1, 49), (2, 6)]
*** center 2: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [34, 12, 0]]
** centroid: 4, normalized-entropy: 0.828055725379504, [(1, 34), (2, 12)]
*** center 5: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 102, 19]]
** centroid: 6, normalized-entropy: 0.6271441658983906, [(2, 102), (3, 19)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [52, 55, 0]]
** centroid: 7, normalized-entropy: 0.9994328781096228, [(1, 52), (2, 55)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22782287925109268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22782287925109268, 0.1512255116607994] ***
*** finished computation of 7 references, err: [Inf, 0.22782287925109268, 0.1512255116607994] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 84, 12]]
** centroid: 1, normalized-entropy: 0.5435644431995963, [(2, 84), (3, 12)]
*** center 2: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [70, 5, 0]]
** centroid: 3, normalized-entropy: 0.3533593350214213, [(1, 70), (2, 5)]
*** center 4: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 57, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [45, 39, 0]]
** centroid: 6, normalized-entropy: 0.9963165195589622, [(1, 45), (2, 39)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [54, 8, 0]]
** centroid: 7, normalized-entropy: 0.5547781633412736, [(1, 54), (2, 8)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19661420252732933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19661420252732933, 0.17887291098001878] ***
*** finished computation of 7 references, err: [Inf, 0.19661420252732933, 0.17887291098001878] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [37, 20, 0]]
** centroid: 1, normalized-entropy: 0.9348490242345946, [(1, 37), (2, 20)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [7, 63, 4]]
** centroid: 2, normalized-entropy: 0.47131671327795704, [(1, 7), (2, 63), (3, 4)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [15, 32, 0]]
** centroid: 3, normalized-entropy: 0.9034535552068337, [(1, 15), (2, 32)]
*** center 4: selecting labels [1] (freq >= 1) [from [151, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [7, 28, 0]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(1, 7), (2, 28)]
*** center 6: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 37, 11]]
** centroid: 7, normalized-entropy: 0.7765557854444601, [(2, 37), (3, 11)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23989112242637203] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23989112242637203, 0.20553681365586818] ***
*** finished computation of 7 references, err: [Inf, 0.23989112242637203, 0.20553681365586818] ***
*** center 1: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [78, 71, 4]]
** centroid: 2, normalized-entropy: 0.7236596082268149, [(1, 78), (2, 71), (3, 4)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [12, 21, 0]]
** centroid: 3, normalized-entropy: 0.9456603046006401, [(1, 12), (2, 21)]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [13, 97, 15]]
** centroid: 4, normalized-entropy: 0.6249859643458238, [(1, 13), (2, 97), (3, 15)]
*** center 5: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [127, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18728363977000118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18728363977000118, 0.15675074776448308] ***
*** finished computation of 7 references, err: [Inf, 0.18728363977000118, 0.15675074776448308] ***
*** center 1: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [40, 43, 0]]
** centroid: 2, normalized-entropy: 0.9990574042663861, [(1, 40), (2, 43)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [8, 80, 0]]
** centroid: 3, normalized-entropy: 0.43949698692151346, [(1, 8), (2, 80)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [48, 3, 0]]
** centroid: 4, normalized-entropy: 0.32275695889739825, [(1, 48), (2, 3)]
*** center 5: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 71, 18]]
** centroid: 6, normalized-entropy: 0.7263997735417457, [(2, 71), (3, 18)]
*** center 7: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21439028101600707] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21439028101600707, 0.15323322680220008] ***
*** finished computation of 7 references, err: [Inf, 0.21439028101600707, 0.15323322680220008] ***
*** center 1: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 25, 14]]
** centroid: 2, normalized-entropy: 0.9418285354475157, [(2, 25), (3, 14)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 38, 1]]
** centroid: 3, normalized-entropy: 0.17203694935311387, [(2, 38), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [86, 31, 0]]
** centroid: 5, normalized-entropy: 0.834135193716964, [(1, 86), (2, 31)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [46, 21, 0]]
** centroid: 6, normalized-entropy: 0.8970964164730478, [(1, 46), (2, 21)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 72, 0]]
** centroid: 7, normalized-entropy: 0.1044190780054077, [(1, 1), (2, 72)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2333855827562511] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2333855827562511, 0.1666855325810611] ***
*** finished computation of 7 references, err: [Inf, 0.2333855827562511, 0.1666855325810611] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 46, 19]]
** centroid: 1, normalized-entropy: 0.871683617119982, [(2, 46), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 53, 0]]
** centroid: 3, normalized-entropy: 0.9974015885677396, [(1, 47), (2, 53)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [84, 5, 0]]
** centroid: 4, normalized-entropy: 0.3120895659343452, [(1, 84), (2, 5)]
*** center 5: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [18, 79, 0]]
** centroid: 7, normalized-entropy: 0.6921053253628727, [(1, 18), (2, 79)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19483316433988512] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19483316433988512, 0.151617293282412] ***
*** finished computation of 7 references, err: [Inf, 0.19483316433988512, 0.151617293282412] ***
*** center 1: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [65, 30, 0]]
** centroid: 3, normalized-entropy: 0.8997437586982626, [(1, 65), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [73, 12, 0]]
** centroid: 4, normalized-entropy: 0.5873116089977589, [(1, 73), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [49, 8, 0]]
** centroid: 5, normalized-entropy: 0.5851569902762294, [(1, 49), (2, 8)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 53, 17]]
** centroid: 6, normalized-entropy: 0.7997594113291759, [(2, 53), (3, 17)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 68, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1899827346811071] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1899827346811071, 0.14756400002259762] ***
*** finished computation of 7 references, err: [Inf, 0.1899827346811071, 0.14756400002259762] ***
*** center 1: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 59, 16]]
** centroid: 2, normalized-entropy: 0.7478061583312324, [(2, 59), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [44, 15, 0]]
** centroid: 3, normalized-entropy: 0.8179252501386403, [(1, 44), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [71, 11, 0]]
** centroid: 4, normalized-entropy: 0.5687008669370753, [(1, 71), (2, 11)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 48, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [34, 48, 0]]
** centroid: 7, normalized-entropy: 0.9788698505067782, [(1, 34), (2, 48)]
finished with 8 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 370,3 => 33,1 => 597), Dict(2 => 369,3 => 45,1 => 586))
[ Info: ===== scores for single classifier: {"micro_f1":0.928,"precision":0.928,"recall":0.928,"macro_recall":0.8926277397017429,"macro_f1":0.9040201645328224,"accuracy":0.928,"class_f1":{"2":0.9027027027027027,"3":0.8604651162790697,"1":0.948892674616695},"class_precision":{"2":0.9002695417789758,"3":0.9024390243902439,"1":0.9472789115646258},"class_recall":{"2":0.9051490514905149,"3":0.8222222222222222,"1":0.9505119453924915}}
[ Info: ===== scores for 1: {"micro_f1":0.954,"precision":0.954,"recall":0.954,"macro_recall":0.8293684927748025,"macro_f1":0.8767143368141895,"accuracy":0.954,"class_f1":{"2":0.9376693766937669,"3":0.7142857142857143,"1":0.9781879194630873},"class_precision":{"2":0.9376693766937669,"3":1.0,"1":0.9620462046204621},"class_recall":{"2":0.9376693766937669,"3":0.5555555555555556,"1":0.9948805460750854}}
[ Info: ===== scores for 5: {"micro_f1":0.96,"precision":0.96,"recall":0.96,"macro_recall":0.827615453628939,"macro_f1":0.8752546677157772,"accuracy":0.96,"class_f1":{"2":0.9460916442048517,"3":0.6956521739130436,"1":0.9840201850294364},"class_precision":{"2":0.9410187667560321,"3":1.0,"1":0.9701492537313433},"class_recall":{"2":0.9512195121951219,"3":0.5333333333333333,"1":0.9982935153583617}}
[ Info: ===== scores for 7: {"micro_f1":0.956,"precision":0.956,"recall":0.956,"macro_recall":0.8041553748870823,"macro_f1":0.85342864049968,"accuracy":0.956,"class_f1":{"2":0.9407008086253369,"3":0.6363636363636364,"1":0.9832214765100671},"class_precision":{"2":0.935656836461126,"3":1.0,"1":0.966996699669967},"class_recall":{"2":0.94579945799458,"3":0.4666666666666667,"1":1.0}}
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ===== scores for 9: {"micro_f1":0.94,"precision":0.94,"recall":0.94,"macro_recall":0.6531165311653117,"macro_f1":0.636412700084246,"accuracy":0.94,"class_f1":{"2":0.9218749999999999,"3":0.0,"1":0.987363100252738},"class_precision":{"2":0.8872180451127819,"3":0.0,"1":0.9750415973377704},"class_recall":{"2":0.959349593495935,"3":0.0,"1":1.0}}
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ===== scores for 11: {"micro_f1":0.938,"precision":0.938,"recall":0.938,"macro_recall":0.6513098464317976,"macro_f1":0.6349207743450442,"accuracy":0.938,"class_f1":{"2":0.9190600522193211,"3":0.0,"1":0.9857022708158116},"class_precision":{"2":0.8866498740554156,"3":0.0,"1":0.9718076285240465},"class_recall":{"2":0.9539295392953929,"3":0.0,"1":1.0}}
(score = 0.952, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.952, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.954, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.954, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.959, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.959, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.959, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.959, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.958, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.96, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.96, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.953, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.953, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.956, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.956, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.96,"k":5,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.96,"precision":0.96,"recall":0.96,"macro_recall":0.827615453628939,"macro_f1":0.8752546677157772,"accuracy":0.96,"class_f1":{"2":0.9460916442048517,"3":0.6956521739130436,"1":0.9840201850294364},"class_precision":{"2":0.9410187667560321,"3":1.0,"1":0.9701492537313433},"class_recall":{"2":0.9512195121951219,"3":0.5333333333333333,"1":0.9982935153583617}}
Test Summary: | Pass  Total
AKNC          |    8      8
[40, 1, 1, 2, 1, 3, 4, 1, 1, 3, 4, 5, 9, 6, 31, 2, 20, 2, 12, 19, 12, 6, 9, 16, 5, 5, 2, 19, 10, 14, 25, 48, 4, 1, 8, 2, 5, 6, 2, 4, 12, 14, 28, 11, 8, 11, 40, 8, 4, 10, 14, 7, 15, 3, 14, 9, 6, 25, 5, 43, 12, 6, 15, 40, 5, 12, 1, 4, 16, 1, 105, 10, 11, 20, 3, 46, 3, 7, 5, 20, 36, 18, 35, 11, 164, 28, 11, 2, 10, 323, 9, 52, 11, 28, 30, 32, 2, 8, 46, 32, 26, 2, 10, 55, 14, 13, 38, 2, 23, 4, 29, 31, 25, 4, 6, 31, 46, 11, 29, 350, 225, 3, 6, 12, 34, 36, 65, 22, 17, 8, 2, 19, 92, 3, 68, 24, 9, 2, 39, 6, 30, 21, 11, 20, 3, 74, 17, 1, 4, 53, 148, 30, 14, 19, 1, 48, 17, 7, 31, 15, 24, 47, 6, 14, 104, 8, 37, 6, 29, 16, 4, 26, 27, 25, 12, 39, 1, 20, 44, 43, 13, 564, 8, 29, 52, 28, 16, 37, 8, 183, 44, 178, 36, 61, 16, 16, 22, 14, 4, 30, 16, 2, 224, 17, 3, 37, 12, 12, 104, 55, 66, 33, 31, 1, 26, 12, 23, 40, 30, 31, 134, 14, 43, 5, 18, 12, 24, 7, 31, 24, 3, 2, 16, 37, 31, 11, 25, 722, 3, 22, 106, 55, 6, 80, 37, 24, 3, 10, 2, 7, 5, 311, 13, 42, 10, 17, 12, 111, 8, 50, 13, 1, 27, 6, 74, 65, 89, 141, 28, 164, 17, 6, 8, 26, 46, 45, 4, 50, 41, 19, 6, 8, 2, 4, 16, 27, 7, 10, 24, 20, 6, 13, 24, 39, 70, 25, 99, 68, 1, 10]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6220000000000002, speedup = 0.3983695879801853, eval_ratio = 0.07218200000000001)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4035807291666667,"recall":0.40277777777777785,"f1":null,"seconds":0.00017821043729782104,"exhaustive_search_seconds":0.0003687255084514618,"evaluations":483.984375,"distances_sum":1751.8242029567593}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5486111111111109,"recall":0.5486111111111109,"f1":0.5486111111111109,"seconds":0.00026034750044345856,"exhaustive_search_seconds":0.0003687255084514618,"evaluations":598.796875,"distances_sum":1668.8891185921068}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6493055555555554,"recall":0.6493055555555554,"f1":0.6493055555555554,"seconds":0.0003639310598373413,"exhaustive_search_seconds":0.0003687255084514618,"evaluations":726.7734375,"distances_sum":1617.8782997724873}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7213541666666662,"recall":0.7213541666666662,"f1":0.7213541666666662,"seconds":0.00047815218567848206,"exhaustive_search_seconds":0.0003687255084514618,"evaluations":866.3125,"distances_sum":1589.3243897855057}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7725694444444439,"recall":0.7725694444444439,"f1":0.7725694444444439,"seconds":0.000692589208483696,"exhaustive_search_seconds":0.0003687255084514618,"evaluations":975.5546875,"distances_sum":1573.4179319577333}
KCenters.DeloneInvIndex> reached performance {"precision":0.8124999999999994,"recall":0.8124999999999994,"f1":0.8124999999999994,"seconds":0.0006060823798179626,"exhaustive_search_seconds":0.0003687255084514618,"evaluations":1048.328125,"distances_sum":1562.5713602889623}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8379999999999999, speedup = 0.8341871210278939, eval_ratio = 0.105216)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
