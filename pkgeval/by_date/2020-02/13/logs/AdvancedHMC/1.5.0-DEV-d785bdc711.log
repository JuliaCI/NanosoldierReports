Julia Version 1.5.0-DEV.263
Commit d785bdc711 (2020-02-12 15:14 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed ProgressMeter ────── v1.2.0
  Installed SortingAlgorithms ── v0.3.1
  Installed ArrayLayouts ─────── v0.1.5
  Installed OpenSpecFun_jll ──── v0.5.3+1
  Installed ArgCheck ─────────── v1.1.0
  Installed Rmath ────────────── v0.6.0
  Installed AdvancedHMC ──────── v0.2.20
  Installed MacroTools ───────── v0.5.4
  Installed DataAPI ──────────── v1.1.0
  Installed Requires ─────────── v1.0.1
  Installed StatsFuns ────────── v0.9.3
  Installed DataStructures ───── v0.17.9
  Installed SpecialFunctions ─── v0.9.0
  Installed StaticArrays ─────── v0.12.1
  Installed LazyArrays ───────── v0.14.11
  Installed BinaryProvider ───── v0.5.8
  Installed Parameters ───────── v0.12.0
  Installed Missings ─────────── v0.4.3
  Installed StatsBase ────────── v0.32.0
  Installed FillArrays ───────── v0.8.4
  Installed InplaceOps ───────── v0.3.0
  Installed OrderedCollections ─ v1.1.0
#=#=#                                                                         ######################################################################## 100.0%
   Updating `~/.julia/environments/v1.5/Project.toml`
  [0bf59076] + AdvancedHMC v0.2.20
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [0bf59076] + AdvancedHMC v0.2.20
  [dce04be8] + ArgCheck v1.1.0
  [4c555306] + ArrayLayouts v0.1.5
  [b99e7846] + BinaryProvider v0.5.8
  [9a962f9c] + DataAPI v1.1.0
  [864edb3b] + DataStructures v0.17.9
  [1a297f60] + FillArrays v0.8.4
  [505f98c9] + InplaceOps v0.3.0
  [5078a376] + LazyArrays v0.14.11
  [1914dd2f] + MacroTools v0.5.4
  [e1d29d7a] + Missings v0.4.3
  [efe28fd5] + OpenSpecFun_jll v0.5.3+1
  [bac558e1] + OrderedCollections v1.1.0
  [d96e819e] + Parameters v0.12.0
  [92933f4c] + ProgressMeter v1.2.0
  [ae029012] + Requires v1.0.1
  [79098fc4] + Rmath v0.6.0
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.9.0
  [90137ffa] + StaticArrays v0.12.1
  [2913bbd2] + StatsBase v0.32.0
  [4c63d2b9] + StatsFuns v0.9.3
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Building Rmath → `~/.julia/packages/Rmath/BoBag/deps/build.log`
    Testing AdvancedHMC
#=#=#                                                                                                                                                    0.3%##                                                                         3.1%#####                                                                      7.2%#########                                                                 12.6%#############                                                             19.2%####################                                                      28.6%#############################                                             41.1%########################################                                  55.9%#######################################################                   76.6%#######################################################################   99.5%######################################################################## 100.0%
#=#=#                                                                         ############                                                              17.5%#####################################                                     51.9%#####################################################################     97.2%######################################################################## 100.0%
#=#=#                                                                         #########################################                                 57.5%######################################################################## 100.0%
#=#=#                                                                         ######################################################################## 100.0%
Status `/tmp/jl_8BnCvX/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [80f14c24] AbstractMCMC v0.1.0
  [79e6a3ab] Adapt v1.0.1
  [0bf59076] AdvancedHMC v0.2.20
  [dce04be8] ArgCheck v1.1.0
  [ec485272] ArnoldiMethod v0.0.4
  [7d9fca2a] Arpack v0.4.0
  [68821587] Arpack_jll v3.5.0+2
  [4fba245c] ArrayInterface v2.4.1
  [4c555306] ArrayLayouts v0.1.5
  [13072b0f] AxisAlgorithms v1.0.0
  [39de3d68] AxisArrays v0.4.2
  [6e4b80f9] BenchmarkTools v0.4.3
  [76274a88] Bijectors v0.5.2
  [b99e7846] BinaryProvider v0.5.8
  [324d7699] CategoricalArrays v0.7.7
  [d360d2e6] ChainRulesCore v0.6.1
  [861a8166] Combinatorics v0.7.0
  [bbf7d656] CommonSubexpressions v0.2.0
  [34da2185] Compat v2.2.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [2b5f629d] DiffEqBase v6.14.2
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.0
  [31c24e10] Distributions v0.22.4
  [ced4e74d] DistributionsAD v0.2.0
  [ffbed154] DocStringExtensions v0.8.1
  [366bfd00] DynamicPPL v0.1.1
  [da5c29d0] EllipsisNotation v0.4.0
  [d4d017d3] ExponentialUtilities v1.6.0
  [7a1cc6ca] FFTW v1.2.0
  [f5851436] FFTW_jll v3.3.9+3
  [1a297f60] FillArrays v0.8.4
  [6a86dc24] FiniteDiff v2.2.0
  [f6369f11] ForwardDiff v0.10.9
  [069b7b12] FunctionWrappers v1.0.0
  [01680d73] GenericSVD v0.2.2
  [7869d1d1] IRTools v0.3.1
  [d25df0c9] Inflate v0.1.1
  [505f98c9] InplaceOps v0.3.0
  [1d5cc7b8] IntelOpenMP_jll v2018.0.3+0
  [a98d9a8b] Interpolations v0.12.5
  [8197267c] IntervalSets v0.4.0
  [41ab1584] InvertedIndices v1.0.0
  [c8e1da08] IterTools v1.3.0
  [42fd0dbc] IterativeSolvers v0.8.1
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5ab0869b] KernelDensity v0.5.1
  [5078a376] LazyArrays v0.14.11
  [6f1fad26] Libtask v0.3.1
  [093fc24a] LightGraphs v1.3.0
  [d3d80556] LineSearches v7.0.1
  [6fdf6af0] LogDensityProblems v0.10.1
  [c7f686f2] MCMCChains v1.0.2
  [856f044c] MKL_jll v2019.0.117+2
  [1914dd2f] MacroTools v0.5.4
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [46d2c3a1] MuladdMacro v0.2.2
  [d41bc354] NLSolversBase v7.6.1
  [872c559c] NNlib v0.6.4
  [77ba4419] NaNMath v0.3.3
  [6fe1bfb0] OffsetArrays v1.0.2
  [4536629a] OpenBLAS_jll v0.3.7+5
  [efe28fd5] OpenSpecFun_jll v0.5.3+1
  [429524aa] Optim v0.20.1
  [bac558e1] OrderedCollections v1.1.0
  [1dea7af3] OrdinaryDiffEq v5.28.1
  [90014a1f] PDMats v0.9.11
  [d96e819e] Parameters v0.12.0
  [69de0a69] Parsers v0.3.11
  [f27b6e38] Polynomials v0.6.0
  [2dfb63ee] PooledArrays v0.5.3
  [85a6dd25] PositiveFactorizations v0.2.3
  [92933f4c] ProgressMeter v1.2.0
  [1fd47b50] QuadGK v2.3.1
  [b3c3ace0] RangeArrays v0.3.2
  [c84ed2f1] Ratios v0.4.0
  [3cdcf5f2] RecipesBase v0.7.0
  [731186ca] RecursiveArrayTools v2.1.0
  [f2c3362d] RecursiveFactorization v0.1.0
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [79098fc4] Rmath v0.6.0
  [f2b01f46] Roots v0.8.4
  [992d4aef] Showoff v0.3.1
  [699a6c99] SimpleTraits v0.9.1
  [a2af1166] SortingAlgorithms v0.3.1
  [47a9eef4] SparseDiffTools v1.3.3
  [276daf66] SpecialFunctions v0.9.0
  [90137ffa] StaticArrays v0.12.1
  [2913bbd2] StatsBase v0.32.0
  [4c63d2b9] StatsFuns v0.9.3
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.1
  [9f7883ad] Tracker v0.2.6
  [84d833dd] TransformVariables v0.3.9
  [a2a6695c] TreeViews v0.3.0
  [fce5fe82] Turing v0.8.3
  [b8865327] UnicodePlots v1.1.0
  [19fa3120] VertexSafeGraphs v0.1.1
  [efce3f68] WoodburyMatrices v0.5.0
  [e88e6eb3] Zygote v0.4.7
  [700de1a5] ZygoteRules v0.2.0
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [4607b0f0] SuiteSparse 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
DenseEuclideanMetric: Test Failed at /home/pkgeval/.julia/packages/AdvancedHMC/Sn9Ek/test/adaptation/precond.jl:148
  Expression: ≈(res.adaptor.pc.var, diag(Σ), rtol = 0.2)
   Evaluated: [3.61237062366087, 0.7995331738139149, 0.5223616871402916, 0.6504250478591963, 5.541680950419875, 0.7100040281514909, 2.151975478063639, 1.191538527000358, 0.3491555227238154, 0.35433702661896194] ≈ [5.841005479184962, 11.578536204190055, 3.3799818825189085, 4.432954857368463, 9.421532362323955, 5.323418961791852, 9.289195445093393, 12.275703558248848, 9.701650420373767, 7.604090175736189] (rtol=0.2)
Stacktrace:
 [1] top-level scope at /home/pkgeval/.julia/packages/AdvancedHMC/Sn9Ek/test/adaptation/precond.jl:148
 [2] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [3] top-level scope at /home/pkgeval/.julia/packages/AdvancedHMC/Sn9Ek/test/adaptation/precond.jl:138
 [4] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [5] top-level scope at /home/pkgeval/.julia/packages/AdvancedHMC/Sn9Ek/test/adaptation/precond.jl:116
┌ Warning: The current proposal will be rejected due to numerical error(s).
│   isfinite.((θ, r, ℓπ, ℓκ)) = (false, false, true, true)
└ @ AdvancedHMC ~/.julia/packages/AdvancedHMC/Sn9Ek/src/hamiltonian.jl:44
┌ Warning: The current proposal will be rejected due to numerical error(s).
│   isfinite.((θ, r, ℓπ, ℓκ)) = (false, false, true, true)
└ @ AdvancedHMC ~/.julia/packages/AdvancedHMC/Sn9Ek/src/hamiltonian.jl:44
┌ Info: Performance of step() v.s. step()
│   n_steps = 10
│   t_step = 0.162169199
│   t_steps = 0.008257887
└   t_step / t_steps = 19.63809858381448
Sampling  0%|                               |  ETA: 5:46:22[K
  iterations:                    1
  n_steps:                       1
  is_accept:                     true
  acceptance_rate:               0.0731095906014449
  log_density:                   -11.078008826795791
  hamiltonian_energy:            13.858453192542187
  hamiltonian_energy_error:      0.0
  max_hamiltonian_energy_error:  2.6157957224539796
  tree_depth:                    1
  numerical_error:               false
  step_size:                     1.6
  nom_step_size:                 1.6
  is_adapt:                      true
  mass_matrix:                   DiagEuclideanMetric([1.0, 1.0, 1.0, 1.0, 1.0, 1 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling  4%|█▍                             |  ETA: 0:00:54[K
  iterations:                    512
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.9525300495653406
  log_density:                   -10.990039519469747
  hamiltonian_energy:            14.83653299941853
  hamiltonian_energy_error:      -0.07381660882459329
  max_hamiltonian_energy_error:  0.12090119103108954
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.6100214471136893
  nom_step_size:                 0.6100214471136893
  is_adapt:                      true
  mass_matrix:                   DiagEuclideanMetric([0.8507487105632644, 1.0517 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling  5%|█▋                             |  ETA: 0:00:44[K
  iterations:                    646
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.8664229095776681
  log_density:                   -16.792914209250696
  hamiltonian_energy:            19.37350239815836
  hamiltonian_energy_error:      0.26671743483628774
  max_hamiltonian_energy_error:  0.30483714589821886
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.640611854702051
  nom_step_size:                 0.640611854702051
  is_adapt:                      true
  mass_matrix:                   DiagEuclideanMetric([0.8507487105632644, 1.0517 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling  7%|██▎                            |  ETA: 0:00:33[K
  iterations:                    881
  n_steps:                       31
  is_accept:                     true
  acceptance_rate:               0.9854430689889343
  log_density:                   -14.256208455090597
  hamiltonian_energy:            18.90229574455978
  hamiltonian_energy_error:      -0.20356066962911967
  max_hamiltonian_energy_error:  -0.47426744283389155
  tree_depth:                    5
  numerical_error:               false
  step_size:                     0.8071747228630484
  nom_step_size:                 0.8071747228630484
  is_adapt:                      true
  mass_matrix:                   DiagEuclideanMetric([0.8239612061233763, 0.9136 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling  9%|██▉                            |  ETA: 0:00:27[K
  iterations:                    1115
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.7047091499575765
  log_density:                   -14.981563326135614
  hamiltonian_energy:            16.42044588844147
  hamiltonian_energy_error:      0.6252206390512285
  max_hamiltonian_energy_error:  0.6557525333653587
  tree_depth:                    2
  numerical_error:               false
  step_size:                     0.9014749458368498
  nom_step_size:                 0.9014749458368498
  is_adapt:                      true
  mass_matrix:                   DiagEuclideanMetric([0.8239612061233763, 0.9136 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 11%|███▌                           |  ETA: 0:00:22[K
  iterations:                    1375
  n_steps:                       3
  is_accept:                     true
  acceptance_rate:               0.8143184237578226
  log_density:                   -16.021062356967025
  hamiltonian_energy:            19.868445142454146
  hamiltonian_energy_error:      0.20180285161342226
  max_hamiltonian_energy_error:  0.46888547300868666
  tree_depth:                    2
  numerical_error:               false
  step_size:                     0.6852393997181928
  nom_step_size:                 0.6852393997181928
  is_adapt:                      true
  mass_matrix:                   DiagEuclideanMetric([0.8239612061233763, 0.9136 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 13%|████▏                          |  ETA: 0:00:19[K
  iterations:                    1596
  n_steps:                       123
  is_accept:                     true
  acceptance_rate:               0.9712648214507108
  log_density:                   -13.096987735932183
  hamiltonian_energy:            16.372483883103616
  hamiltonian_energy_error:      -0.031834783113623644
  max_hamiltonian_energy_error:  -0.18477346836955277
  tree_depth:                    6
  numerical_error:               false
  step_size:                     0.8597278853866832
  nom_step_size:                 0.8597278853866832
  is_adapt:                      true
  mass_matrix:                   DiagEuclideanMetric([0.8239612061233763, 0.9136 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 15%|████▊                          |  ETA: 0:00:17[K
  iterations:                    1854
  n_steps:                       35
  is_accept:                     true
  acceptance_rate:               0.9654571988422285
  log_density:                   -15.744559603641536
  hamiltonian_energy:            19.993021629792636
  hamiltonian_energy_error:      -0.06264331885612862
  max_hamiltonian_energy_error:  -0.8341388321874206
  tree_depth:                    5
  numerical_error:               false
  step_size:                     0.8050689779553697
  nom_step_size:                 0.8050689779553697
  is_adapt:                      true
  mass_matrix:                   DiagEuclideanMetric([0.8239612061233763, 0.9136 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 17%|█████▍                         |  ETA: 0:00:15[K
  iterations:                    2078
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               1.0
  log_density:                   -15.337177592696136
  hamiltonian_energy:            19.048869467130107
  hamiltonian_energy_error:      -0.012334774043821994
  max_hamiltonian_energy_error:  -0.1990798781156009
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 21%|██████▍                        |  ETA: 0:00:12[K
  iterations:                    2470
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.9543612853343113
  log_density:                   -13.640017579276323
  hamiltonian_energy:            19.253785442851598
  hamiltonian_energy_error:      -0.0087654289158543
  max_hamiltonian_energy_error:  0.12976115772540098
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 24%|███████▍                       |  ETA: 0:00:11[K
  iterations:                    2836
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.9514123715507541
  log_density:                   -12.965645330332793
  hamiltonian_energy:            17.0377051202385
  hamiltonian_energy_error:      0.030930037805958932
  max_hamiltonian_energy_error:  0.12485711769508612
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 27%|████████▎                      |  ETA: 0:00:10[K
  iterations:                    3181
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.9544486310622199
  log_density:                   -13.721927003732148
  hamiltonian_energy:            20.834039393243145
  hamiltonian_energy_error:      -0.20019352144285563
  max_hamiltonian_energy_error:  -0.35087721650321413
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 30%|█████████▎                     |  ETA: 0:00:08[K
  iterations:                    3569
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.9040956071447039
  log_density:                   -12.650622364433357
  hamiltonian_energy:            17.790212186323394
  hamiltonian_energy_error:      -0.012850537208834112
  max_hamiltonian_energy_error:  0.18308124238861367
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 32%|██████████                     |  ETA: 0:00:08[K
  iterations:                    3882
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.8449726190241945
  log_density:                   -14.46585703967804
  hamiltonian_energy:            20.913639930670833
  hamiltonian_energy_error:      0.06528654060088002
  max_hamiltonian_energy_error:  0.28771903792776143
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 36%|███████████▏                   |  ETA: 0:00:07[K
  iterations:                    4286
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.9866632860586646
  log_density:                   -13.793516850766789
  hamiltonian_energy:            19.150620570095015
  hamiltonian_energy_error:      -0.0827747730525985
  max_hamiltonian_energy_error:  -0.1447777720661243
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 39%|████████████▏                  |  ETA: 0:00:06[K
  iterations:                    4685
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.9516970262963286
  log_density:                   -13.671574547016977
  hamiltonian_energy:            16.879662846932586
  hamiltonian_energy_error:      0.07543075183361836
  max_hamiltonian_energy_error:  0.08222268235419605
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 42%|█████████████                  |  ETA: 0:00:06[K
  iterations:                    5010
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.9289685496136941
  log_density:                   -12.016920245380794
  hamiltonian_energy:            16.79910023483624
  hamiltonian_energy_error:      -0.015121936640916545
  max_hamiltonian_energy_error:  0.18241467443072423
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 45%|█████████████▉                 |  ETA: 0:00:05[K
  iterations:                    5378
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.9181160586041626
  log_density:                   -14.874457411380629
  hamiltonian_energy:            21.136631474206304
  hamiltonian_energy_error:      0.04891964708452434
  max_hamiltonian_energy_error:  0.18651007117733798
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 47%|██████████████▋                |  ETA: 0:00:05[K
  iterations:                    5680
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.9495887792920801
  log_density:                   -14.440991018381771
  hamiltonian_energy:            19.307849733880182
  hamiltonian_energy_error:      0.020204932704963596
  max_hamiltonian_energy_error:  0.13340843742527042
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 50%|███████████████▋               |  ETA: 0:00:04[K
  iterations:                    6050
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.9205456595856815
  log_density:                   -15.358876023584319
  hamiltonian_energy:            19.418104508262438
  hamiltonian_energy_error:      0.15556237411977492
  max_hamiltonian_energy_error:  0.15556237411977492
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 53%|████████████████▍              |  ETA: 0:00:04[K
  iterations:                    6353
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.9875887146912575
  log_density:                   -13.7754197713708
  hamiltonian_energy:            18.086394689811886
  hamiltonian_energy_error:      -0.0009784076556655918
  max_hamiltonian_energy_error:  0.03677865632721122
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 56%|█████████████████▍             |  ETA: 0:00:03[K
  iterations:                    6727
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.9249328321239282
  log_density:                   -14.33530145685625
  hamiltonian_energy:            18.756221681314802
  hamiltonian_energy_error:      0.07386605647101518
  max_hamiltonian_energy_error:  0.2268593416665361
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 59%|██████████████████▍            |  ETA: 0:00:03[K
  iterations:                    7104
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.8792905020190426
  log_density:                   -14.561548141656946
  hamiltonian_energy:            17.591195406805383
  hamiltonian_energy_error:      0.2254877081328992
  max_hamiltonian_energy_error:  0.2989325240753615
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 62%|███████████████████▎           |  ETA: 0:00:03[K
  iterations:                    7464
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.8742978313629183
  log_density:                   -14.956855482062167
  hamiltonian_energy:            18.028313462126746
  hamiltonian_energy_error:      0.21943443028338194
  max_hamiltonian_energy_error:  0.2685970066634873
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 65%|████████████████████▎          |  ETA: 0:00:03[K
  iterations:                    7821
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.9582977222680074
  log_density:                   -15.15561991995699
  hamiltonian_energy:            22.069528972598306
  hamiltonian_energy_error:      -0.15022008899828165
  max_hamiltonian_energy_error:  -0.31032536734727145
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 68%|█████████████████████          |  ETA: 0:00:02[K
  iterations:                    8149
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.8249378605016615
  log_density:                   -16.31033657079708
  hamiltonian_energy:            21.673279738449594
  hamiltonian_energy_error:      0.1821163100746972
  max_hamiltonian_energy_error:  0.2958242812913525
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 71%|██████████████████████▏        |  ETA: 0:00:02[K
  iterations:                    8541
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.8358975164667636
  log_density:                   -13.997663796489217
  hamiltonian_energy:            23.71185436876909
  hamiltonian_energy_error:      -0.11051266520136238
  max_hamiltonian_energy_error:  0.43462990453782524
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 74%|██████████████████████▉        |  ETA: 0:00:02[K
  iterations:                    8857
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.9603296905605091
  log_density:                   -10.604783751296473
  hamiltonian_energy:            14.8329559232532
  hamiltonian_energy_error:      -0.1468100940540733
  max_hamiltonian_energy_error:  -0.1468100940540733
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 77%|███████████████████████▉       |  ETA: 0:00:02[K
  iterations:                    9234
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.8926574284088485
  log_density:                   -13.197657491961852
  hamiltonian_energy:            22.291781176100034
  hamiltonian_energy_error:      -0.10175090175620127
  max_hamiltonian_energy_error:  0.370127312567746
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 80%|████████████████████████▋      |  ETA: 0:00:01[K
  iterations:                    9553
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.9393517663922383
  log_density:                   -11.871383680365836
  hamiltonian_energy:            17.37071981966276
  hamiltonian_energy_error:      -0.06254052474454852
  max_hamiltonian_energy_error:  0.21057785812480034
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 83%|█████████████████████████▋     |  ETA: 0:00:01[K
  iterations:                    9930
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.914158144424116
  log_density:                   -15.985961675784381
  hamiltonian_energy:            19.186725623573903
  hamiltonian_energy_error:      0.17954649584158133
  max_hamiltonian_energy_error:  0.2372153314681391
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 85%|██████████████████████████▌    |  ETA: 0:00:01[K
  iterations:                    10253
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.8593872068437403
  log_density:                   -13.905086031510212
  hamiltonian_energy:            22.516885196528257
  hamiltonian_energy_error:      -0.010528824619360222
  max_hamiltonian_energy_error:  0.44948616888026294
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 88%|███████████████████████████▎   |  ETA: 0:00:01[K
  iterations:                    10559
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.9452039517264547
  log_density:                   -13.616132717463646
  hamiltonian_energy:            16.544757926969606
  hamiltonian_energy_error:      0.09020089152094357
  max_hamiltonian_energy_error:  0.11267832229314223
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 91%|████████████████████████████▎  |  ETA: 0:00:01[K
  iterations:                    10949
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.9316597371865463
  log_density:                   -14.682968273615396
  hamiltonian_energy:            18.70273934383976
  hamiltonian_energy_error:      0.11818461711575878
  max_hamiltonian_energy_error:  0.12692268361769976
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 94%|█████████████████████████████  |  ETA: 0:00:00[K
  iterations:                    11250
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.98102441160713
  log_density:                   -15.858905359386855
  hamiltonian_energy:            19.516298208121167
  hamiltonian_energy_error:      0.07528176500908401
  max_hamiltonian_energy_error:  -0.11623340970078999
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling 97%|██████████████████████████████ |  ETA: 0:00:00[K
  iterations:                    11628
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.9295781137129323
  log_density:                   -17.585876679313337
  hamiltonian_energy:            19.3416937251681
  hamiltonian_energy_error:      0.16243195033462143
  max_hamiltonian_energy_error:  -0.3784770691499908
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling100%|██████████████████████████████▉|  ETA: 0:00:00[K
  iterations:                    11940
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.9864194411395718
  log_density:                   -11.36609351477104
  hamiltonian_energy:            14.157592000592647
  hamiltonian_energy_error:      -0.051320613700641005
  max_hamiltonian_energy_error:  -0.09118920070873493
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])[A[A[A[A[A[A[A[A[A[A[A[A[A[A













[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[A[K[ASampling100%|███████████████████████████████| Time: 0:00:05[K
  iterations:                    12000
  n_steps:                       7
  is_accept:                     true
  acceptance_rate:               0.796705412401601
  log_density:                   -12.909960619356703
  hamiltonian_energy:            23.974425597872575
  hamiltonian_energy_error:      -0.09451631589030995
  max_hamiltonian_energy_error:  0.4930923891739454
  tree_depth:                    3
  numerical_error:               false
  step_size:                     0.5660604150238221
  nom_step_size:                 0.5660604150238221
  is_adapt:                      false
  mass_matrix:                   DiagEuclideanMetric([1.0359790459489993, 0.9114 ...])
┌ Info: Finished 12000 sampling steps for 1 chains in 5.992139577 (s)
│   h = Hamiltonian(metric=DiagEuclideanMetric([1.0359790459489993, 0.9114 ...]))
│   τ = NUTS{MultinomialTS,Generalised}(integrator=Leapfrog(ϵ=0.566), max_depth=10), Δ_max=1000.0)
│   EBFMI_est = 1.0551731504718382
└   average_acceptance_rate = 0.9083886851130011
┌ Info: Finished 1000 adapation steps
│   adaptor =
│    StanHMCAdaptor(
│        pc=DiagPreconditioner,
│        ssa=NesterovDualAveraging(γ=0.05, t_0=10.0, κ=0.75, δ=0.8, state.ϵ=0.6250306843958474),
│        init_buffer=75, term_buffer=50, window_size=25,
│        state=window(76, 950), window_splits(100, 150, 250, 450, 950)
│    )
│   τ.integrator = Leapfrog(ϵ=0.625)
└   h.metric = DiagEuclideanMetric([0.37521629705404447, 0.561 ...])
┌ Info: Finished 5000 sampling steps for 1 chains in 0.966477467 (s)
│   h = Hamiltonian(metric=DiagEuclideanMetric([0.37521629705404447, 0.561 ...]))
│   τ = NUTS{MultinomialTS,Generalised}(integrator=Leapfrog(ϵ=0.625), max_depth=10), Δ_max=1000.0)
│   EBFMI_est = 0.9497682250328671
└   average_acceptance_rate = 0.9074262074801318
[ Info: Adaptation tests for StaticTrajectory{MultinomialTS} with TemperedLeapfrog on DiagEuclideanMetric are skipped
[ Info: Adaptation tests for HMCDA{MultinomialTS} with TemperedLeapfrog on DiagEuclideanMetric are skipped
[ Info: Adaptation tests for NUTS{SliceTS, Generalised} with TemperedLeapfrog on DiagEuclideanMetric are skipped
[ Info: Adaptation tests for NUTS{MultinomialTS, Original} with TemperedLeapfrog on DiagEuclideanMetric are skipped
[ Info: Adaptation tests for NUTS{MultinomialTS, Generalised} with TemperedLeapfrog on DiagEuclideanMetric are skipped
[ Info: Adaptation tests for HMCDA{EndPointTS} with TemperedLeapfrog on DiagEuclideanMetric are skipped
[ Info: Adaptation tests for NUTS{SliceTS, Original} with TemperedLeapfrog on DiagEuclideanMetric are skipped
[ Info: Adaptation tests for StaticTrajectory{EndPointTS} with TemperedLeapfrog on DiagEuclideanMetric are skipped
[ Info: Adaptation tests for StaticTrajectory{MultinomialTS} with TemperedLeapfrog on DenseEuclideanMetric are skipped
[ Info: Adaptation tests for HMCDA{MultinomialTS} with TemperedLeapfrog on DenseEuclideanMetric are skipped
[ Info: Adaptation tests for NUTS{SliceTS, Generalised} with TemperedLeapfrog on DenseEuclideanMetric are skipped
[ Info: Adaptation tests for NUTS{MultinomialTS, Original} with TemperedLeapfrog on DenseEuclideanMetric are skipped
[ Info: Adaptation tests for NUTS{MultinomialTS, Generalised} with TemperedLeapfrog on DenseEuclideanMetric are skipped
[ Info: Adaptation tests for HMCDA{EndPointTS} with TemperedLeapfrog on DenseEuclideanMetric are skipped
[ Info: Adaptation tests for NUTS{SliceTS, Original} with TemperedLeapfrog on DenseEuclideanMetric are skipped
[ Info: Adaptation tests for StaticTrajectory{EndPointTS} with TemperedLeapfrog on DenseEuclideanMetric are skipped
[ Info: Adaptation tests for StaticTrajectory{MultinomialTS} with TemperedLeapfrog on UnitEuclideanMetric are skipped
[ Info: Adaptation tests for HMCDA{MultinomialTS} with TemperedLeapfrog on UnitEuclideanMetric are skipped
[ Info: Adaptation tests for NUTS{SliceTS, Generalised} with TemperedLeapfrog on UnitEuclideanMetric are skipped
[ Info: Adaptation tests for NUTS{MultinomialTS, Original} with TemperedLeapfrog on UnitEuclideanMetric are skipped
[ Info: Adaptation tests for NUTS{MultinomialTS, Generalised} with TemperedLeapfrog on UnitEuclideanMetric are skipped
[ Info: Adaptation tests for HMCDA{EndPointTS} with TemperedLeapfrog on UnitEuclideanMetric are skipped
[ Info: Adaptation tests for NUTS{SliceTS, Original} with TemperedLeapfrog on UnitEuclideanMetric are skipped
[ Info: Adaptation tests for StaticTrajectory{EndPointTS} with TemperedLeapfrog on UnitEuclideanMetric are skipped
[ Info: Adaptation tests for HMCDA with NesterovDualAveraging are skipped

                   Scalabiliry of multiple chains
              ┌────────────────────────────────────────┐                 
            4 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ matrix parallism
              │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀│ seperate        
              │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡸⠱⡀│                 
              │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠤⠒⢆⠀⢠⠃⠀⠘│                 
              │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠃⠀⠀⠈⢆⡎⠀⠀⠀│                 
              │⠀⠀⠀⠀⠀⠀⠀⢠⡆⠀⠀⢀⡜⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠃⠀⠀⠀⠀⠈⠁⠀⠀⠀│                 
              │⠀⠀⠀⠀⠀⠀⠀⡸⠘⡄⢀⠎⠀⢀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│                 
   Time (s)   │⠀⠀⠀⠀⠀⠀⠀⡇⠀⠘⠎⠀⢀⠎⢣⠀⠀⠀⠀⠀⢀⠤⠢⠤⣀⠤⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│                 
              │⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⢀⡎⠀⠈⢆⠀⠀⡠⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│                 
              │⠀⠀⣆⠀⠀⠀⡎⠀⠀⡠⠒⠁⠀⠀⠀⠘⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│                 
              │⠀⠀⠹⣆⠀⢠⠇⡠⠎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│                 
              │⠀⠀⠀⢹⡖⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│                 
              │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│                 
              │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│                 
            0 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│                 
              └────────────────────────────────────────┘                 
              0                                       20
                            Num of chains

Test Summary:                                            | Pass  Fail  Total
AdvancedHMC                                              | 2874     1   2875
  Online v.s. naive v.s. true var/cov estimation         |   12           12
  Preconditioner constructors                            |    2            2
  Stan HMC adaptors                                      |   12           12
  Adapted mass v.s. true variance                        |   19     1     20
    DiagEuclideanMetric                                  |   10           10
    DenseEuclideanMetric                                 |    9     1     10
  Initialisation adaptor by metric                       |    2            2
  rand momentum variables from metric via vector of RNGs |    2            2
  Passing random number generator                        |   12           12
  TreeSampler                                            |    5            5
  TerminationCriterion                                   |    2            2
  Termination                                            |   20           20
  BinaryTree                                             |    4            4
  ClassicNoUTurn                                         |    4            4
  PhasePoint                                             |    4            4
  Metric                                                 |   60           60
  step(::Leapfrog) against step(::Leapfrog)              |    2            2
  jitter                                                 |    4            4
  temper                                                 |    7            7
  Eq (2.11) from (Neal, 2011)                            |    4            4
  `gdemo`                                                |    1            1
  HMC and NUTS                                           | 2664         2664
  drop_warmup                                            |    4            4
  Matrix mode                                            |   28           28
ERROR: LoadError: Some tests did not pass: 2874 passed, 1 failed, 0 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/AdvancedHMC/Sn9Ek/test/runtests.jl:3
ERROR: Package AdvancedHMC errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:53
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1503
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:316
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:303
 [5] #test#68 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [7] #test#67 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [8] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [10] test(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [11] top-level scope at none:13
