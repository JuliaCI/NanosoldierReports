Julia Version 1.5.0-DEV.373
Commit e39e945a81 (2020-02-29 18:45 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed PooledArrays ──────────────── v0.5.3
  Installed LearnBase ─────────────────── v0.2.2
  Installed Reexport ──────────────────── v0.2.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Tables ────────────────────── v1.0.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed DataStructures ────────────── v0.17.10
  Installed DataAPI ───────────────────── v1.1.0
  Installed TableTraits ───────────────── v1.0.0
  Installed MLDataUtils ───────────────── v0.5.0
  Installed Compat ────────────────────── v3.6.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed Parsers ───────────────────── v0.3.12
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed SimilaritySearch ──────────── v0.3.19
  Installed MLDataPattern ─────────────── v0.5.0
  Installed DataFrames ────────────────── v0.20.2
  Installed MappedArrays ──────────────── v0.2.2
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed JSON ──────────────────────── v0.21.0
  Installed Missings ──────────────────── v0.4.3
  Installed StatsBase ─────────────────── v0.32.1
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.6.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.10
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.12
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.2
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_Aj37UP/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.6.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.10
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.12
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.2
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9364293802777927
[ Info: 0.8307796732584636
[ Info: 0.5546774150431156
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.32531724544862906
mean(cdnet.distances) = 0.37720339573919776
mean(crand.distances) = 0.3643676142394543
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1904296875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1904296875,"f1":null,"seconds":0.0009791404008865356,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":4.9453125,"distances_sum":541.1789580378269}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1904296875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1904296875,"f1":null,"seconds":0.0009791404008865356,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":4.9453125,"distances_sum":541.1789580378269}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2021484375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2021484375,"f1":null,"seconds":3.2838433980941772e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":6.3984375,"distances_sum":387.2934435782036}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2021484375,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.2021484375,"f1":null,"seconds":3.2838433980941772e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":6.3984375,"distances_sum":387.2934435782036}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2021484375,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.2021484375,"f1":null,"seconds":3.2838433980941772e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":6.3984375,"distances_sum":387.2934435782036}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8643726065601074,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.0703125,"distances_sum":1686.1909042042635}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7724609375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7724609375,"f1":0.8643726065601074,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.0703125,"distances_sum":1686.1909042042635}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.814453125,"f1":0.8904798326673333,"seconds":5.768612027168274e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.4921875,"distances_sum":1835.6909644221023}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9236435439560449,"seconds":5.923211574554443e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.6328125,"distances_sum":2021.7202099004605}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8671875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8671875,"f1":0.9236435439560449,"seconds":5.923211574554443e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.6328125,"distances_sum":2021.7202099004605}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9635130494505498,"seconds":6.420537829399109e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.9140625,"distances_sum":2238.9611378260743}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9681032509157512,"seconds":6.109476089477539e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.828125,"distances_sum":2282.471801829267}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9679544413919419,"seconds":6.137415766716003e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.8515625,"distances_sum":2254.4443522198153}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.968343635531136,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.9140625,"distances_sum":2272.6097502927505}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.954158341658342,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.8046875,"distances_sum":2200.514107653286}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9540808150183155,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.875,"distances_sum":2145.341000195427}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9539320054945057,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.859375,"distances_sum":2193.3990689368197}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9681032509157512,"seconds":6.109476089477539e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.828125,"distances_sum":2282.471801829267}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9681032509157512,"seconds":6.109476089477539e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.828125,"distances_sum":2282.471801829267}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8748288170163178,"seconds":5.356967449188232e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.2734375,"distances_sum":1782.9212807360714}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.701171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.701171875,"f1":0.8147274600399608,"seconds":4.978850483894348e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.0546875,"distances_sum":1562.6439417514212}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6025390625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.6025390625,"f1":0.739182692307693,"seconds":4.542991518974304e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.8359375,"distances_sum":1260.7589164630701}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.791015625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.791015625,"f1":0.8748288170163178,"seconds":5.356967449188232e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.2734375,"distances_sum":1782.9212807360714}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9089171245421253,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.7109375,"distances_sum":1933.4084040886646}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8447265625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8447265625,"f1":0.9089171245421253,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.7109375,"distances_sum":1933.4084040886646}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9591918498168502,"seconds":6.401911377906799e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8984375,"distances_sum":2232.943973518248}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.968435210622711,"seconds":6.355345249176025e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.90625,"distances_sum":2312.805508133044}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9583390567765568,"seconds":6.226822733879089e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.875,"distances_sum":2225.689215770254}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9075434981684989,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.625,"distances_sum":1956.009163188895}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.968435210622711,"seconds":6.355345249176025e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.90625,"distances_sum":2312.805508133044}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.968435210622711,"seconds":6.355345249176025e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.90625,"distances_sum":2312.805508133044}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.701171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.701171875,"f1":0.8173826173826181,"seconds":4.976987838745117e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":7.984375,"distances_sum":1453.16233795736}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.701171875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.701171875,"f1":0.8173826173826181,"seconds":4.976987838745117e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":7.984375,"distances_sum":1453.16233795736}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9352366383616392,"seconds":6.059184670448303e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.8515625,"distances_sum":1966.8506556771245}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8857421875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8857421875,"f1":0.9352366383616392,"seconds":6.059184670448303e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.8515625,"distances_sum":1966.8506556771245}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9502898143523149,"seconds":5.986541509628296e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.859375,"distances_sum":2089.7102268431713}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9806375915750918,"seconds":6.7837536334991455e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.953125,"distances_sum":2269.2283019228585}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96484375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9806375915750918,"seconds":6.7837536334991455e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.953125,"distances_sum":2269.2283019228585}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96484375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9806375915750918,"seconds":6.7837536334991455e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.953125,"distances_sum":2269.2283019228585}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8460997335997344,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.8828125,"distances_sum":1624.2206579443857}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.7851344835719842,"seconds":5.062669515609741e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.46875,"distances_sum":1371.6860104142818}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8482885170385178,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.921875,"distances_sum":1611.716126224673}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7529296875,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7529296875,"f1":0.8482885170385178,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.921875,"distances_sum":1611.716126224673}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9418841575091583,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.7421875,"distances_sum":2055.0451239067406}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.796875, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.796875,"f1":0.877049512987014,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.2734375,"distances_sum":1754.2585684488608}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9256072052947059,"seconds":5.884096026420593e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.5703125,"distances_sum":1996.4885631038374}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8974609375,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.8974609375,"f1":0.9418841575091583,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.7421875,"distances_sum":2055.0451239067406}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":10,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9712454212454215,"seconds":6.334856152534485e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8828125,"distances_sum":2189.7178608170857}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9760989010989012,"seconds":6.26780092716217e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.84375,"distances_sum":2265.8464981139973}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9711881868131871,"seconds":6.200745701789856e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8671875,"distances_sum":2206.9756306840236}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9676911630036633,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.828125,"distances_sum":2200.6277851587897}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9458791208791215,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.609375,"distances_sum":2102.819706581938}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9561813186813192,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.84375,"distances_sum":2094.2885369818273}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9760989010989012,"seconds":6.26780092716217e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.84375,"distances_sum":2265.8464981139973}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9760989010989012,"seconds":6.26780092716217e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.84375,"distances_sum":2265.8464981139973}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.85877507908758,"seconds":5.414709448814392e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.046875,"distances_sum":1598.9926184002122}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.546875,"f1":0.6934586247086252,"seconds":4.546716809272766e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.046875,"distances_sum":1071.1062561276835}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7685546875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7685546875,"f1":0.85877507908758,"seconds":5.414709448814392e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.046875,"distances_sum":1598.9926184002122}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9519402472527477,"seconds":5.977228283882141e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8125,"distances_sum":2082.2192741849226}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9538404304029311,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.828125,"distances_sum":2089.311055769411}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9538404304029311,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.828125,"distances_sum":2089.311055769411}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9641025641025647,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8515625,"distances_sum":2149.865509621028}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9641025641025647,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8515625,"distances_sum":2149.865509621028}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9641025641025647,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8515625,"distances_sum":2149.865509621028}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.560546875, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.560546875,"f1":0.7002809690309696,"seconds":4.319474101066589e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":7.015625,"distances_sum":966.3707933772844}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4052734375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4052734375,"f1":null,"seconds":3.4421682357788086e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":5.8125,"distances_sum":639.6760891834575}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.560546875,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.560546875,"f1":0.7002809690309696,"seconds":4.319474101066589e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":7.015625,"distances_sum":966.3707933772844}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6845703125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6845703125,"f1":0.8035813145188153,"seconds":4.4889748096466064e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":7.6171875,"distances_sum":1213.1972700021356}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8985181485181494,"seconds":5.345791578292847e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.3828125,"distances_sum":1608.2229488769228}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.8980092823842831,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.4453125,"distances_sum":1574.0170007920003}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.828125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.828125,"f1":0.8985181485181494,"seconds":5.345791578292847e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.3828125,"distances_sum":1608.2229488769228}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9562957875457878,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.7734375,"distances_sum":1847.7753439449828}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9790922619047624,"seconds":5.7220458984375e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.890625,"distances_sum":1991.5786741905658}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.94910141941392,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.734375,"distances_sum":1824.0751189057762}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9371565934065941,"seconds":5.515292286872864e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.421875,"distances_sum":1740.61765546388}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9790922619047624,"seconds":5.7220458984375e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.890625,"distances_sum":1991.5786741905658}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9790922619047624,"seconds":5.7220458984375e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.890625,"distances_sum":1991.5786741905658}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.55078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.55078125,"f1":0.6925170315795323,"seconds":4.285946488380432e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.1328125,"distances_sum":1060.1616265096202}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.55078125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.55078125,"f1":0.6925170315795323,"seconds":4.285946488380432e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.1328125,"distances_sum":1060.1616265096202}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.658203125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.658203125,"f1":0.7822880244755253,"seconds":4.723668098449707e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.828125,"distances_sum":1324.6308003802696}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8524303821178829,"seconds":5.153939127922058e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.171875,"distances_sum":1485.0065602342825}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7876451673326681,"seconds":8.216127753257751e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.84375,"distances_sum":1323.144843962016}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.755859375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.755859375,"f1":0.8524303821178829,"seconds":5.153939127922058e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.171875,"distances_sum":1485.0065602342825}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.900598880286381,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.4140625,"distances_sum":1692.420104795367}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8635307400932409,"seconds":5.3104013204574585e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.2890625,"distances_sum":1543.6275085036725}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.936899038461539,"seconds":5.543231964111328e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.484375,"distances_sum":1898.576835519602}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9462854853479857,"seconds":9.06921923160553e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.671875,"distances_sum":1962.438684653406}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8953092046842055,"seconds":5.535781383514404e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.3828125,"distances_sum":1675.0241945521814}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":8,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9462854853479857,"seconds":9.06921923160553e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.671875,"distances_sum":1962.438684653406}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.904296875,"state":{"ssize":8,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9462854853479857,"seconds":9.06921923160553e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.671875,"distances_sum":1962.438684653406}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2265625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2265625,"f1":null,"seconds":7.096678018569946e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":6.40625,"distances_sum":461.1521587283683}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2265625,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.2265625,"f1":null,"seconds":7.096678018569946e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":6.40625,"distances_sum":461.1521587283683}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2265625,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.2265625,"f1":null,"seconds":7.096678018569946e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":6.40625,"distances_sum":461.1521587283683}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2265625,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.2265625,"f1":null,"seconds":7.096678018569946e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":6.40625,"distances_sum":461.1521587283683}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.30078125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.30078125,"f1":null,"seconds":3.691762685775757e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":6.5703125,"distances_sum":491.5391394255199}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":null,"recall":0.671875,"f1":null,"seconds":4.906207323074341e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.2890625,"distances_sum":1127.1985238636048}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.443359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.443359375,"f1":null,"seconds":7.594004273414612e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":6.5859375,"distances_sum":727.466471236438}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.671875,"state":{"ssize":1,"bsize":4},"perf":{"precision":null,"recall":0.671875,"f1":null,"seconds":4.906207323074341e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.2890625,"distances_sum":1127.1985238636048}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8472730394605403,"seconds":5.2694231271743774e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.875,"distances_sum":1264.7906949167827}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7109375, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.7109375,"f1":0.8223854270729279,"seconds":4.772096872329712e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.5625,"distances_sum":1242.977341399035}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.74609375,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.74609375,"f1":0.8472730394605403,"seconds":5.2694231271743774e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.875,"distances_sum":1264.7906949167827}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.8820830211455222,"seconds":9.162351489067078e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.4765625,"distances_sum":1382.894152596558}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9250629578754584,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.6171875,"distances_sum":1584.4386456128127}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8134765625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8134765625,"f1":0.8920418123543132,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.5859375,"distances_sum":1420.953545741749}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.950005723443224,"seconds":5.587935447692871e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8203125,"distances_sum":1675.1790047704924}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8695601273726283,"seconds":4.993751645088196e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.953125,"distances_sum":1380.6297614939729}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9302770146520152,"seconds":5.947425961494446e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.59375,"distances_sum":1593.4252392262367}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.950005723443224,"seconds":5.587935447692871e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8203125,"distances_sum":1675.1790047704924}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.912109375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.950005723443224,"seconds":5.587935447692871e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8203125,"distances_sum":1675.1790047704924}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5791015625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5791015625,"f1":0.7178304334554341,"seconds":4.287809133529663e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.8828125,"distances_sum":1136.6089376473742}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.248046875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.248046875,"f1":null,"seconds":3.4999102354049683e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":5.546875,"distances_sum":526.0098908569194}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.642578125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.642578125,"f1":0.7722922910422917,"seconds":4.800036549568176e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.46875,"distances_sum":1312.7252112790406}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.642578125,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.642578125,"f1":0.7722922910422917,"seconds":4.800036549568176e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.46875,"distances_sum":1312.7252112790406}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.642578125,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.642578125,"f1":0.7722922910422917,"seconds":4.800036549568176e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.46875,"distances_sum":1312.7252112790406}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.642578125,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.642578125,"f1":0.7722922910422917,"seconds":4.800036549568176e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.46875,"distances_sum":1312.7252112790406}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6591796875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6591796875,"f1":0.7832183441558449,"seconds":4.684552550315857e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.4609375,"distances_sum":1346.7688497832262}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8489135864135873,"seconds":5.09992241859436e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.90625,"distances_sum":1583.5715480560007}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7529296875,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7529296875,"f1":0.8489135864135873,"seconds":5.09992241859436e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.90625,"distances_sum":1583.5715480560007}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9518143315018319,"seconds":5.768612027168274e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7109375,"distances_sum":2078.4466377290205}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9535573801198807,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7265625,"distances_sum":2065.7317060508476}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9535573801198807,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7265625,"distances_sum":2065.7317060508476}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9663404304029309,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.84375,"distances_sum":2141.1764531577305}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.973717948717949,"seconds":6.571412086486816e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.875,"distances_sum":2187.517464520272}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9714514652014654,"seconds":6.059184670448303e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8671875,"distances_sum":2158.571439285473}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.973717948717949,"seconds":6.571412086486816e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.875,"distances_sum":2187.517464520272}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.973717948717949,"seconds":6.571412086486816e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.875,"distances_sum":2187.517464520272}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7998787670662678,"seconds":4.870817065238953e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.8203125,"distances_sum":1320.9411959184517}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.251953125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.251953125,"f1":null,"seconds":3.390014171600342e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.1171875,"distances_sum":460.2078191901889}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5595703125, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5595703125,"f1":0.7032777985902992,"seconds":4.388391971588135e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.2890625,"distances_sum":994.6532070281174}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6806640625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6806640625,"f1":0.7998787670662678,"seconds":4.870817065238953e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.8203125,"distances_sum":1320.9411959184517}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8603459040959048,"seconds":5.325302481651306e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.9765625,"distances_sum":1551.7276220493002}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8630952380952388,"seconds":5.07943332195282e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.0,"distances_sum":1564.6051252875986}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.8630952380952388,"seconds":5.07943332195282e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.0,"distances_sum":1564.6051252875986}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9042582417582424,"seconds":5.409121513366699e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.390625,"distances_sum":1778.4065979788893}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9547103937728942,"seconds":5.97536563873291e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7421875,"distances_sum":2014.5101925957229}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9547103937728942,"seconds":5.97536563873291e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7421875,"distances_sum":2014.5101925957229}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.921875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9547103937728942,"seconds":5.97536563873291e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7421875,"distances_sum":2014.5101925957229}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7431640625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7431640625,"f1":0.8417847777222786,"seconds":4.997476935386658e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.7578125,"distances_sum":1551.2206055605309}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.232421875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.232421875,"f1":null,"seconds":3.1925737857818604e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":5.3125,"distances_sum":489.14094606113343}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7431640625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7431640625,"f1":0.8417847777222786,"seconds":4.997476935386658e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.7578125,"distances_sum":1551.2206055605309}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9076038544788554,"seconds":5.453824996948242e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.4375,"distances_sum":1800.5325994729042}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9422905219780224,"seconds":5.498528480529785e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.6171875,"distances_sum":2011.9027415167113}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.900390625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.900390625,"f1":0.9422905219780224,"seconds":5.498528480529785e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.6171875,"distances_sum":2011.9027415167113}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.960622710622711,"seconds":5.781650543212891e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8203125,"distances_sum":2080.7562753810334}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9627804487179492,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.734375,"distances_sum":2151.259984267628}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.951774267399268,"seconds":5.502253770828247e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.671875,"distances_sum":2088.6304855000953}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9627804487179492,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.734375,"distances_sum":2151.259984267628}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9627804487179492,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.734375,"distances_sum":2151.259984267628}}, n: 9
mean(cfft.distances) = 0.36118297817044187
mean(cdnet.distances) = 0.5096356546546976
mean(crand.distances) = 0.39316818021076844
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8844444444444445
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9066666666666666
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.9
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.851111111111111
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9022222222222221
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.888888888888889
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9444444444444445
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.84
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8733333333333334
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.88
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9333333333333332
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9244444444444445
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9133333333333334
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8933333333333334
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.928888888888889
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9400000000000001
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8666666666666667
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9177777777777778
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8711111111111111
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9133333333333334
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222224
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9133333333333332
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8444444444444444
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9066666666666667
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9066666666666667
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.611511659125487] ***
*** center 1: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 6: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 7]]
** centroid: 9, normalized-entropy: 0.8812908992306927, [(2, 3), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 15 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.28130984699700373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28130984699700373, 0.1819152706176848] ***
*** finished computation of 7 references, err: [Inf, 0.28130984699700373, 0.1819152706176848] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [114, 44, 0]]
** centroid: 1, normalized-entropy: 0.8533728188427888, [(1, 114), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [114, 70, 0]]
** centroid: 2, normalized-entropy: 0.9583485169215336, [(1, 114), (2, 70)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 4: selecting labels [1] (freq >= 2) [from [149, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [26, 50, 0]]
** centroid: 5, normalized-entropy: 0.9268190639645774, [(1, 26), (2, 50)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 53, 4]]
** centroid: 6, normalized-entropy: 0.36657801255334593, [(2, 53), (3, 4)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 25, 10]]
** centroid: 7, normalized-entropy: 0.8631205685666311, [(2, 25), (3, 10)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23582011520549342] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23582011520549342, 0.1930647793284676] ***
*** starting iteration: 2; err: [Inf, 0.23582011520549342, 0.1930647793284676] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23582011520549342, 0.1930647793284676, 0.189388159058384] ***
*** starting iteration: 3; err: [Inf, 0.23582011520549342, 0.1930647793284676, 0.189388159058384] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23582011520549342, 0.1930647793284676, 0.189388159058384, 0.18856345371457864] ***
*** finished computation of 7 references, err: [Inf, 0.23582011520549342, 0.1930647793284676, 0.189388159058384, 0.18856345371457864] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [67, 54, 0]]
** centroid: 1, normalized-entropy: 0.9916574448985778, [(1, 67), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 18, 0]]
** centroid: 2, normalized-entropy: 0.7401470427139037, [(1, 68), (2, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 79, 21]]
** centroid: 4, normalized-entropy: 0.7414827399312738, [(2, 79), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [10, 88, 0]]
** centroid: 5, normalized-entropy: 0.47543164626872053, [(1, 10), (2, 88)]
*** center 6: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [100, 3, 0]]
** centroid: 7, normalized-entropy: 0.18999075553626757, [(1, 100), (2, 3)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24144442594083754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24144442594083754, 0.1949569141402187] ***
*** starting iteration: 2; err: [Inf, 0.24144442594083754, 0.1949569141402187] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24144442594083754, 0.1949569141402187, 0.19123575653925515] ***
*** starting iteration: 3; err: [Inf, 0.24144442594083754, 0.1949569141402187, 0.19123575653925515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24144442594083754, 0.1949569141402187, 0.19123575653925515, 0.19053917116383606] ***
*** finished computation of 7 references, err: [Inf, 0.24144442594083754, 0.1949569141402187, 0.19123575653925515, 0.19053917116383606] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [116, 13, 0]]
** centroid: 1, normalized-entropy: 0.4714480944105985, [(1, 116), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [74, 9, 0]]
** centroid: 2, normalized-entropy: 0.4951734787020683, [(1, 74), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 46, 22]]
** centroid: 3, normalized-entropy: 0.9081783472997053, [(2, 46), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [100, 10, 0]]
** centroid: 5, normalized-entropy: 0.43949698692151346, [(1, 100), (2, 10)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 85, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 85, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24868642536831134] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24868642536831134, 0.19055692348042796] ***
*** starting iteration: 2; err: [Inf, 0.24868642536831134, 0.19055692348042796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24868642536831134, 0.19055692348042796, 0.1874432349738119] ***
*** starting iteration: 3; err: [Inf, 0.24868642536831134, 0.19055692348042796, 0.1874432349738119] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24868642536831134, 0.19055692348042796, 0.1874432349738119, 0.18624397023333825] ***
*** starting iteration: 4; err: [Inf, 0.24868642536831134, 0.19055692348042796, 0.1874432349738119, 0.18624397023333825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24868642536831134, 0.19055692348042796, 0.1874432349738119, 0.18624397023333825, 0.1863589367704994] ***
*** finished computation of 7 references, err: [Inf, 0.24868642536831134, 0.19055692348042796, 0.1874432349738119, 0.18624397023333825, 0.1863589367704994] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [42, 59, 0]]
** centroid: 1, normalized-entropy: 0.9794662187017297, [(1, 42), (2, 59)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [65, 50, 0]]
** centroid: 2, normalized-entropy: 0.9876925088958032, [(1, 65), (2, 50)]
*** center 3: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [42, 63, 0]]
** centroid: 4, normalized-entropy: 0.9709505944546688, [(1, 42), (2, 63)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 92, 23]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(2, 92), (3, 23)]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2536138759551195] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2536138759551195, 0.1921700339232272] ***
*** finished computation of 7 references, err: [Inf, 0.2536138759551195, 0.1921700339232272] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [86, 43, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 86), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [44, 11, 0]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(1, 44), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 71, 21]]
** centroid: 3, normalized-entropy: 0.7749672673267259, [(2, 71), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [71, 24, 0]]
** centroid: 5, normalized-entropy: 0.8154224977821039, [(1, 71), (2, 24)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [98, 21, 0]]
** centroid: 6, normalized-entropy: 0.6722948170756378, [(1, 98), (2, 21)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 72, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2143983974971849] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2143983974971849, 0.18919209876925736] ***
*** finished computation of 7 references, err: [Inf, 0.2143983974971849, 0.18919209876925736] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 99, 9]]
** centroid: 1, normalized-entropy: 0.4138168503036336, [(2, 99), (3, 9)]
*** center 2: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [58, 22, 0]]
** centroid: 3, normalized-entropy: 0.8485481782946159, [(1, 58), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [100, 14, 0]]
** centroid: 4, normalized-entropy: 0.5373760853377334, [(1, 100), (2, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [107, 17, 0]]
** centroid: 5, normalized-entropy: 0.5765847309822099, [(1, 107), (2, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [55, 11, 0]]
** centroid: 6, normalized-entropy: 0.6500224216483541, [(1, 55), (2, 11)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 85, 13]]
** centroid: 7, normalized-entropy: 0.5646695797525669, [(2, 85), (3, 13)]
finished with 13 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2402589827960265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2402589827960265, 0.19276738274427804] ***
*** finished computation of 7 references, err: [Inf, 0.2402589827960265, 0.19276738274427804] ***
*** center 1: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 61, 23]]
** centroid: 2, normalized-entropy: 0.8468781063424823, [(2, 61), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [85, 14, 0]]
** centroid: 3, normalized-entropy: 0.5879303728017198, [(1, 85), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [40, 81, 0]]
** centroid: 4, normalized-entropy: 0.9155163444717095, [(1, 40), (2, 81)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [62, 9, 0]]
** centroid: 5, normalized-entropy: 0.5484866088431741, [(1, 62), (2, 9)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 99, 0]]
** centroid: 6, normalized-entropy: 0.4138168503036336, [(1, 9), (2, 99)]
*** center 7: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23613399459544132] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23613399459544132, 0.1910014856640283] ***
*** starting iteration: 2; err: [Inf, 0.23613399459544132, 0.1910014856640283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23613399459544132, 0.1910014856640283, 0.18809742333686297] ***
*** starting iteration: 3; err: [Inf, 0.23613399459544132, 0.1910014856640283, 0.18809742333686297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23613399459544132, 0.1910014856640283, 0.18809742333686297, 0.1877469882850085] ***
*** finished computation of 7 references, err: [Inf, 0.23613399459544132, 0.1910014856640283, 0.18809742333686297, 0.1877469882850085] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 75, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [72, 26, 0]]
** centroid: 2, normalized-entropy: 0.834648285181383, [(1, 72), (2, 26)]
*** center 3: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [59, 43, 0]]
** centroid: 4, normalized-entropy: 0.9821770638877816, [(1, 59), (2, 43)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 84, 21]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(2, 84), (3, 21)]
*** center 6: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [94, 14, 0]]
** centroid: 7, normalized-entropy: 0.5564215672884282, [(1, 94), (2, 14)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24428123061585685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24428123061585685, 0.19831178271561803] ***
*** starting iteration: 2; err: [Inf, 0.24428123061585685, 0.19831178271561803] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24428123061585685, 0.19831178271561803, 0.19359632330140966] ***
*** starting iteration: 3; err: [Inf, 0.24428123061585685, 0.19831178271561803, 0.19359632330140966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24428123061585685, 0.19831178271561803, 0.19359632330140966, 0.19245167753786252] ***
*** starting iteration: 4; err: [Inf, 0.24428123061585685, 0.19831178271561803, 0.19359632330140966, 0.19245167753786252] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24428123061585685, 0.19831178271561803, 0.19359632330140966, 0.19245167753786252, 0.191445250198178] ***
*** starting iteration: 5; err: [Inf, 0.24428123061585685, 0.19831178271561803, 0.19359632330140966, 0.19245167753786252, 0.191445250198178] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24428123061585685, 0.19831178271561803, 0.19359632330140966, 0.19245167753786252, 0.191445250198178, 0.19067646869817104] ***
*** finished computation of 7 references, err: [Inf, 0.24428123061585685, 0.19831178271561803, 0.19359632330140966, 0.19245167753786252, 0.191445250198178, 0.19067646869817104] ***
*** center 1: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 62, 22]]
** centroid: 2, normalized-entropy: 0.8296071030882032, [(2, 62), (3, 22)]
*** center 3: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [96, 13, 0]]
** centroid: 4, normalized-entropy: 0.527247477024035, [(1, 96), (2, 13)]
*** center 5: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 84, 0]]
** centroid: 6, normalized-entropy: 0.21639693245126485, [(1, 3), (2, 84)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [6, 89, 0]]
** centroid: 7, normalized-entropy: 0.3398550782221443, [(1, 6), (2, 89)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22325635865481494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22325635865481494, 0.1954034755252179] ***
*** starting iteration: 2; err: [Inf, 0.22325635865481494, 0.1954034755252179] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22325635865481494, 0.1954034755252179, 0.18963659008492953] ***
*** starting iteration: 3; err: [Inf, 0.22325635865481494, 0.1954034755252179, 0.18963659008492953] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22325635865481494, 0.1954034755252179, 0.18963659008492953, 0.18824108031535078] ***
*** starting iteration: 4; err: [Inf, 0.22325635865481494, 0.1954034755252179, 0.18963659008492953, 0.18824108031535078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22325635865481494, 0.1954034755252179, 0.18963659008492953, 0.18824108031535078, 0.18745049181767087] ***
*** finished computation of 7 references, err: [Inf, 0.22325635865481494, 0.1954034755252179, 0.18963659008492953, 0.18824108031535078, 0.18745049181767087] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [11, 78, 0]]
** centroid: 1, normalized-entropy: 0.5396084773004918, [(1, 11), (2, 78)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [74, 23, 0]]
** centroid: 2, normalized-entropy: 0.790206924188637, [(1, 74), (2, 23)]
*** center 3: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 89, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [88, 15, 0]]
** centroid: 5, normalized-entropy: 0.5987981837442868, [(1, 88), (2, 15)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 59, 23]]
** centroid: 6, normalized-entropy: 0.8561146277685725, [(2, 59), (3, 23)]
*** center 7: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19817496926800623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19817496926800623, 0.1552002610898837] ***
*** starting iteration: 2; err: [Inf, 0.19817496926800623, 0.1552002610898837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19817496926800623, 0.1552002610898837, 0.14849850422263638] ***
*** starting iteration: 3; err: [Inf, 0.19817496926800623, 0.1552002610898837, 0.14849850422263638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19817496926800623, 0.1552002610898837, 0.14849850422263638, 0.14743589198946752] ***
*** starting iteration: 4; err: [Inf, 0.19817496926800623, 0.1552002610898837, 0.14849850422263638, 0.14743589198946752] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19817496926800623, 0.1552002610898837, 0.14849850422263638, 0.14743589198946752, 0.1468172888467284] ***
*** finished computation of 7 references, err: [Inf, 0.19817496926800623, 0.1552002610898837, 0.14849850422263638, 0.14743589198946752, 0.1468172888467284] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [54, 51, 0]]
** centroid: 1, normalized-entropy: 0.9994110647387552, [(1, 54), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [74, 8, 0]]
** centroid: 2, normalized-entropy: 0.4612160405139095, [(1, 74), (2, 8)]
*** center 3: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 73, 21]]
** centroid: 4, normalized-entropy: 0.7663350359691776, [(2, 73), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [1, 90, 0]]
** centroid: 5, normalized-entropy: 0.08728058888363333, [(1, 1), (2, 90)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [104, 2, 0]]
** centroid: 6, normalized-entropy: 0.13503620280212753, [(1, 104), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [66, 18, 0]]
** centroid: 7, normalized-entropy: 0.7495952572594798, [(1, 66), (2, 18)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19612136303071587] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19612136303071587, 0.15452481767461484] ***
*** starting iteration: 2; err: [Inf, 0.19612136303071587, 0.15452481767461484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19612136303071587, 0.15452481767461484, 0.14951457709180138] ***
*** starting iteration: 3; err: [Inf, 0.19612136303071587, 0.15452481767461484, 0.14951457709180138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19612136303071587, 0.15452481767461484, 0.14951457709180138, 0.1479491937104082] ***
*** starting iteration: 4; err: [Inf, 0.19612136303071587, 0.15452481767461484, 0.14951457709180138, 0.1479491937104082] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19612136303071587, 0.15452481767461484, 0.14951457709180138, 0.1479491937104082, 0.14697138490043637] ***
*** finished computation of 7 references, err: [Inf, 0.19612136303071587, 0.15452481767461484, 0.14951457709180138, 0.1479491937104082, 0.14697138490043637] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 113, 22]]
** centroid: 1, normalized-entropy: 0.6413510165846328, [(2, 113), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [79, 5, 0]]
** centroid: 3, normalized-entropy: 0.3255517134879513, [(1, 79), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [58, 30, 0]]
** centroid: 4, normalized-entropy: 0.9256859869821296, [(1, 58), (2, 30)]
*** center 5: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 85, 0]]
** centroid: 6, normalized-entropy: 0.15790637433488164, [(1, 2), (2, 85)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [100, 15, 0]]
** centroid: 7, normalized-entropy: 0.5586293734521991, [(1, 100), (2, 15)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19579624672276505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19579624672276505, 0.1477823156892773] ***
*** starting iteration: 2; err: [Inf, 0.19579624672276505, 0.1477823156892773] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19579624672276505, 0.1477823156892773, 0.1437794023648608] ***
*** starting iteration: 3; err: [Inf, 0.19579624672276505, 0.1477823156892773, 0.1437794023648608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19579624672276505, 0.1477823156892773, 0.1437794023648608, 0.14305977157779273] ***
*** finished computation of 7 references, err: [Inf, 0.19579624672276505, 0.1477823156892773, 0.1437794023648608, 0.14305977157779273] ***
*** center 1: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 74, 23]]
** centroid: 2, normalized-entropy: 0.790206924188637, [(2, 74), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 41, 0]]
** centroid: 3, normalized-entropy: 0.972086030396226, [(1, 61), (2, 41)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [89, 5, 0]]
** centroid: 4, normalized-entropy: 0.2998025130558691, [(1, 89), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [37, 68, 0]]
** centroid: 5, normalized-entropy: 0.9361764916347493, [(1, 37), (2, 68)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 76, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22246554901479915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22246554901479915, 0.1862890143478024] ***
*** finished computation of 7 references, err: [Inf, 0.22246554901479915, 0.1862890143478024] ***
*** center 1: selecting labels [1] (freq >= 2) [from [204, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [20, 61, 0]]
** centroid: 2, normalized-entropy: 0.8063495153650776, [(1, 20), (2, 61)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [42, 37, 0]]
** centroid: 3, normalized-entropy: 0.9971085167216716, [(1, 42), (2, 37)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 78, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 31, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [131, 19, 0]]
** centroid: 6, normalized-entropy: 0.54822511745032, [(1, 131), (2, 19)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 22, 22]]
** centroid: 7, normalized-entropy: 1.0, [(2, 22), (3, 22)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1884754879610973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1884754879610973, 0.1575142674041965] ***
*** finished computation of 7 references, err: [Inf, 0.1884754879610973, 0.1575142674041965] ***
*** center 1: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [78, 22, 0]]
** centroid: 2, normalized-entropy: 0.7601675029619658, [(1, 78), (2, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [135, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [9, 64, 0]]
** centroid: 5, normalized-entropy: 0.5387379148665815, [(1, 9), (2, 64)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 115, 0]]
** centroid: 6, normalized-entropy: 0.2846390152669077, [(1, 6), (2, 115)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 63, 23]]
** centroid: 7, normalized-entropy: 0.8377698690066789, [(2, 63), (3, 23)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2574063939749971] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2574063939749971, 0.23729302289590867] ***
*** starting iteration: 2; err: [Inf, 0.2574063939749971, 0.23729302289590867] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2574063939749971, 0.23729302289590867, 0.23677677333819214] ***
*** finished computation of 3 references, err: [Inf, 0.2574063939749971, 0.23729302289590867, 0.23677677333819214] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [156, 55, 0]]
** centroid: 1, normalized-entropy: 0.8277459641272469, [(1, 156), (2, 55)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [247, 12, 0]]
** centroid: 2, normalized-entropy: 0.2706065262577151, [(1, 247), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 175, 21]]
** centroid: 3, normalized-entropy: 0.4912373418243334, [(2, 175), (3, 21)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2726684031949408] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2726684031949408, 0.23836065053023855] ***
*** starting iteration: 2; err: [Inf, 0.2726684031949408, 0.23836065053023855] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2726684031949408, 0.23836065053023855, 0.23572752341304137] ***
*** starting iteration: 3; err: [Inf, 0.2726684031949408, 0.23836065053023855, 0.23572752341304137] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2726684031949408, 0.23836065053023855, 0.23572752341304137, 0.23507149317727677] ***
*** finished computation of 3 references, err: [Inf, 0.2726684031949408, 0.23836065053023855, 0.23572752341304137, 0.23507149317727677] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [99, 105, 11]]
** centroid: 1, normalized-entropy: 0.7820759606193886, [(1, 99), (2, 105), (3, 11)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [94, 143, 11]]
** centroid: 2, normalized-entropy: 0.7494681842729239, [(1, 94), (2, 143), (3, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [204, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3733255975421398] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3733255975421398, 0.24141516707938115] ***
*** starting iteration: 2; err: [Inf, 0.3733255975421398, 0.24141516707938115] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3733255975421398, 0.24141516707938115, 0.237185837456613] ***
*** starting iteration: 3; err: [Inf, 0.3733255975421398, 0.24141516707938115, 0.237185837456613] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3733255975421398, 0.24141516707938115, 0.237185837456613, 0.23657127124057717] ***
*** finished computation of 3 references, err: [Inf, 0.3733255975421398, 0.24141516707938115, 0.237185837456613, 0.23657127124057717] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 184, 23]]
** centroid: 1, normalized-entropy: 0.5032583347756457, [(2, 184), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [220, 38, 0]]
** centroid: 2, normalized-entropy: 0.6030087186547216, [(1, 220), (2, 38)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [160, 42, 0]]
** centroid: 3, normalized-entropy: 0.7374895672137457, [(1, 160), (2, 42)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3707743401194478] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3707743401194478, 0.25050607407829156] ***
*** finished computation of 3 references, err: [Inf, 0.3707743401194478, 0.25050607407829156] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [108, 72, 0]]
** centroid: 1, normalized-entropy: 0.9709505944546688, [(1, 108), (2, 72)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [295, 58, 0]]
** centroid: 2, normalized-entropy: 0.6445119504074006, [(1, 295), (2, 58)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 112, 21]]
** centroid: 3, normalized-entropy: 0.6292492238560344, [(2, 112), (3, 21)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2888170224879736] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2888170224879736, 0.2443747829123661] ***
*** finished computation of 3 references, err: [Inf, 0.2888170224879736, 0.2443747829123661] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [100, 193, 22]]
** centroid: 1, normalized-entropy: 0.7739669427078332, [(1, 100), (2, 193), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [213, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [84, 54, 0]]
** centroid: 3, normalized-entropy: 0.9656361333706099, [(1, 84), (2, 54)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3102665195748422] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3102665195748422, 0.2563465104705055] ***
*** finished computation of 3 references, err: [Inf, 0.3102665195748422, 0.2563465104705055] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [158, 149, 12]]
** centroid: 1, normalized-entropy: 0.7527280843290639, [(1, 158), (2, 149), (3, 12)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [60, 115, 11]]
** centroid: 2, normalized-entropy: 0.7550295637729408, [(1, 60), (2, 115), (3, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [162, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2914978626726738] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2914978626726738, 0.2106733531761053] ***
*** finished computation of 7 references, err: [Inf, 0.2914978626726738, 0.2106733531761053] ***
*** center 1: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [26, 41, 0]]
** centroid: 3, normalized-entropy: 0.9635359835770286, [(1, 26), (2, 41)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [100, 43, 0]]
** centroid: 4, normalized-entropy: 0.8821440400674616, [(1, 100), (2, 43)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [91, 70, 0]]
** centroid: 5, normalized-entropy: 0.9876925088958032, [(1, 91), (2, 70)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 28, 16]]
** centroid: 6, normalized-entropy: 0.9456603046006401, [(2, 28), (3, 16)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 60, 5]]
** centroid: 7, normalized-entropy: 0.3912435636292556, [(2, 60), (3, 5)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2763974486921413] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2763974486921413, 0.21045521075098678] ***
*** finished computation of 7 references, err: [Inf, 0.2763974486921413, 0.21045521075098678] ***
*** center 1: selecting labels [1] (freq >= 2) [from [127, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [115, 6, 0]]
** centroid: 2, normalized-entropy: 0.2846390152669077, [(1, 115), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 58, 3]]
** centroid: 3, normalized-entropy: 0.28290479297989196, [(2, 58), (3, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [61, 71, 0]]
** centroid: 4, normalized-entropy: 0.9958560657511164, [(1, 61), (2, 71)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [94, 26, 0]]
** centroid: 6, normalized-entropy: 0.7540340561971327, [(1, 94), (2, 26)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 25, 19]]
** centroid: 7, normalized-entropy: 0.9865446300055647, [(2, 25), (3, 19)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23119838494734876] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23119838494734876, 0.19475527059962636] ***
*** finished computation of 7 references, err: [Inf, 0.23119838494734876, 0.19475527059962636] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [57, 7, 0]]
** centroid: 1, normalized-entropy: 0.49802788653447644, [(1, 57), (2, 7)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 71, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 39, 0]]
** centroid: 4, normalized-entropy: 0.9672947789468944, [(1, 60), (2, 39)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [115, 26, 0]]
** centroid: 5, normalized-entropy: 0.6896024975741727, [(1, 115), (2, 26)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 109, 23]]
** centroid: 6, normalized-entropy: 0.6673182376160576, [(2, 109), (3, 23)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [37, 12, 0]]
** centroid: 7, normalized-entropy: 0.8030909760146977, [(1, 37), (2, 12)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18748230571570518] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18748230571570518, 0.1540918016656618] ***
*** finished computation of 7 references, err: [Inf, 0.18748230571570518, 0.1540918016656618] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [96, 15, 0]]
** centroid: 1, normalized-entropy: 0.5713549744279549, [(1, 96), (2, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [133, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 64, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [101, 19, 0]]
** centroid: 5, normalized-entropy: 0.6303074079971902, [(1, 101), (2, 19)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [10, 91, 0]]
** centroid: 6, normalized-entropy: 0.46584917377204255, [(1, 10), (2, 91)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 53, 21]]
** centroid: 7, normalized-entropy: 0.8605553930586318, [(2, 53), (3, 21)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29626012006090363] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29626012006090363, 0.1928753407903831] ***
*** finished computation of 7 references, err: [Inf, 0.29626012006090363, 0.1928753407903831] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [61, 54, 0]]
** centroid: 1, normalized-entropy: 0.9973256795690417, [(1, 61), (2, 54)]
*** center 2: selecting labels [1] (freq >= 1) [from [200, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [59, 65, 0]]
** centroid: 3, normalized-entropy: 0.9983104413610835, [(1, 59), (2, 65)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 55, 7]]
** centroid: 4, normalized-entropy: 0.5086113313826895, [(2, 55), (3, 7)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [77, 46, 0]]
** centroid: 6, normalized-entropy: 0.953681874346313, [(1, 77), (2, 46)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 28, 4]]
** centroid: 7, normalized-entropy: 0.5435644431995963, [(2, 28), (3, 4)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2762085810999038] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2762085810999038, 0.17587860262320226] ***
*** finished computation of 7 references, err: [Inf, 0.2762085810999038, 0.17587860262320226] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 63, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [90, 33, 0]]
** centroid: 2, normalized-entropy: 0.8390040613676978, [(1, 90), (2, 33)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [173, 9, 0]]
** centroid: 3, normalized-entropy: 0.28405833034081623, [(1, 173), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [58, 21, 0]]
** centroid: 4, normalized-entropy: 0.8354065254460503, [(1, 58), (2, 21)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 21]]
** centroid: 5, normalized-entropy: 0.5435644431995963, [(2, 3), (3, 21)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [59, 59, 0]]
** centroid: 6, normalized-entropy: 1.0, [(1, 59), (2, 59)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 76, 2]]
** centroid: 7, normalized-entropy: 0.17203694935311387, [(2, 76), (3, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4047040811071435] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4047040811071435, 0.3074857692070607] ***
*** starting iteration: 2; err: [Inf, 0.4047040811071435, 0.3074857692070607] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4047040811071435, 0.3074857692070607, 0.29990739202372974] ***
*** starting iteration: 3; err: [Inf, 0.4047040811071435, 0.3074857692070607, 0.29990739202372974] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4047040811071435, 0.3074857692070607, 0.29990739202372974, 0.29863697742097994] ***
*** finished computation of 3 references, err: [Inf, 0.4047040811071435, 0.3074857692070607, 0.29990739202372974, 0.29863697742097994] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [246, 36, 0]]
** centroid: 1, normalized-entropy: 0.5509844433017146, [(1, 246), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [157, 44, 0]]
** centroid: 2, normalized-entropy: 0.7581638862235728, [(1, 157), (2, 44)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 162, 21]]
** centroid: 3, normalized-entropy: 0.5140912790181233, [(2, 162), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39470823803243565] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39470823803243565, 0.31301002753577356] ***
*** starting iteration: 2; err: [Inf, 0.39470823803243565, 0.31301002753577356] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39470823803243565, 0.31301002753577356, 0.29761183729976126] ***
*** starting iteration: 3; err: [Inf, 0.39470823803243565, 0.31301002753577356, 0.29761183729976126] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39470823803243565, 0.31301002753577356, 0.29761183729976126, 0.29356794464199437] ***
*** finished computation of 3 references, err: [Inf, 0.39470823803243565, 0.31301002753577356, 0.29761183729976126, 0.29356794464199437] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [79, 168, 22]]
** centroid: 1, normalized-entropy: 0.781526995149327, [(1, 79), (2, 168), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [118, 80, 0]]
** centroid: 2, normalized-entropy: 0.9732650674751335, [(1, 118), (2, 80)]
*** center 3: selecting labels [1] (freq >= 2) [from [200, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.40706031958431543] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40706031958431543, 0.29649750425339283] ***
*** starting iteration: 2; err: [Inf, 0.40706031958431543, 0.29649750425339283] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40706031958431543, 0.29649750425339283, 0.29223619578503957] ***
*** starting iteration: 3; err: [Inf, 0.40706031958431543, 0.29649750425339283, 0.29223619578503957] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40706031958431543, 0.29649750425339283, 0.29223619578503957, 0.2908842955622403] ***
*** finished computation of 3 references, err: [Inf, 0.40706031958431543, 0.29649750425339283, 0.29223619578503957, 0.2908842955622403] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [67, 160, 23]]
** centroid: 1, normalized-entropy: 0.7810094562937716, [(1, 67), (2, 160), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [206, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [107, 104, 0]]
** centroid: 3, normalized-entropy: 0.9998541733915629, [(1, 107), (2, 104)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 12)
[0.9429938920956884, 0.9359868850886816, 0.9329928731126337, 0.9299898701096305, 0.9299838760916606, 0.9240048431665198, 0.9019888151624679, 0.8889578200955447, 0.8780127432822044, 0.867969766173359, 0.8049576522630414, 0.776974579369789]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9429938920956884
finished with 12
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9429938920956884, 0.9359868850886816, 0.9329928731126337, 0.9299898701096305, 0.9299838760916606, 0.9240048431665198, 0.9019888151624679, 0.8889578200955447, 0.8780127432822044, 0.867969766173359, 0.8049576522630414, 0.776974579369789]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9429938920956884
finished with 13
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.1875749146635714] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1875749146635714, 0.15719675463931942] ***
*** starting iteration: 2; err: [Inf, 0.1875749146635714, 0.15719675463931942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1875749146635714, 0.15719675463931942, 0.15060936437721165] ***
*** starting iteration: 3; err: [Inf, 0.1875749146635714, 0.15719675463931942, 0.15060936437721165] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1875749146635714, 0.15719675463931942, 0.15060936437721165, 0.14900458441115916] ***
*** starting iteration: 4; err: [Inf, 0.1875749146635714, 0.15719675463931942, 0.15060936437721165, 0.14900458441115916] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1875749146635714, 0.15719675463931942, 0.15060936437721165, 0.14900458441115916, 0.14847442123748072] ***
*** finished computation of 7 references, err: [Inf, 0.1875749146635714, 0.15719675463931942, 0.15060936437721165, 0.14900458441115916, 0.14847442123748072] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [116, 7, 0]]
** centroid: 1, normalized-entropy: 0.3150569452644301, [(1, 116), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [76, 13, 0]]
** centroid: 2, normalized-entropy: 0.5999108763872215, [(1, 76), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 49, 21]]
** centroid: 3, normalized-entropy: 0.8812908992306927, [(2, 49), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [113, 6, 0]]
** centroid: 5, normalized-entropy: 0.28817912669245493, [(1, 113), (2, 6)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 75, 0]]
** centroid: 6, normalized-entropy: 0.17378132267943294, [(1, 2), (2, 75)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 92, 0]]
** centroid: 7, normalized-entropy: 0.29292995113885967, [(1, 5), (2, 92)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18886047079907856] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18886047079907856, 0.15439294128660588] ***
*** starting iteration: 2; err: [Inf, 0.18886047079907856, 0.15439294128660588] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18886047079907856, 0.15439294128660588, 0.1502235185437329] ***
*** starting iteration: 3; err: [Inf, 0.18886047079907856, 0.15439294128660588, 0.1502235185437329] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18886047079907856, 0.15439294128660588, 0.1502235185437329, 0.1497055651393832] ***
*** finished computation of 7 references, err: [Inf, 0.18886047079907856, 0.15439294128660588, 0.1502235185437329, 0.1497055651393832] ***
*** center 1: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 66, 22]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(2, 66), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [87, 4, 0]]
** centroid: 3, normalized-entropy: 0.26014536394771426, [(1, 87), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [101, 5, 0]]
** centroid: 4, normalized-entropy: 0.27425064105029284, [(1, 101), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 81, 0]]
** centroid: 5, normalized-entropy: 0.36205125173399805, [(1, 6), (2, 81)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [15, 92, 0]]
** centroid: 6, normalized-entropy: 0.5847281182574745, [(1, 15), (2, 92)]
*** center 7: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18697757086879957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18697757086879957, 0.15445419510538833] ***
*** starting iteration: 2; err: [Inf, 0.18697757086879957, 0.15445419510538833] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18697757086879957, 0.15445419510538833, 0.14915880667690795] ***
*** starting iteration: 3; err: [Inf, 0.18697757086879957, 0.15445419510538833, 0.14915880667690795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18697757086879957, 0.15445419510538833, 0.14915880667690795, 0.14713568521336814] ***
*** starting iteration: 4; err: [Inf, 0.18697757086879957, 0.15445419510538833, 0.14915880667690795, 0.14713568521336814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18697757086879957, 0.15445419510538833, 0.14915880667690795, 0.14713568521336814, 0.14618991966033984] ***
*** finished computation of 7 references, err: [Inf, 0.18697757086879957, 0.15445419510538833, 0.14915880667690795, 0.14713568521336814, 0.14618991966033984] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [91, 16, 0]]
** centroid: 1, normalized-entropy: 0.6086696755779567, [(1, 91), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [77, 7, 0]]
** centroid: 2, normalized-entropy: 0.4138168503036336, [(1, 77), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 48, 23]]
** centroid: 3, normalized-entropy: 0.9086185980409245, [(2, 48), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [100, 11, 0]]
** centroid: 5, normalized-entropy: 0.4661332827241355, [(1, 100), (2, 11)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 90, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 92, 0]]
** centroid: 7, normalized-entropy: 0.2022494245476988, [(1, 3), (2, 92)]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9429938920956884, 0.9359868850886816, 0.9359808910707114, 0.9329928731126337, 0.9299898701096305, 0.9299838760916606, 0.9240048431665198, 0.9019888151624679, 0.8889578200955447, 0.8780127432822044, 0.867969766173359, 0.8049576522630414, 0.776974579369789]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9429938920956884
finished with 13
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9429938920956884, 0.9359868850886816, 0.9359808910707114, 0.9329928731126337, 0.9299898701096305, 0.9299838760916606, 0.9240048431665198, 0.9019888151624679, 0.8889578200955447, 0.8780127432822044, 0.867969766173359, 0.8049576522630414, 0.776974579369789]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9429938920956884
finished with 15
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.19481068537724358] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19481068537724358, 0.1613959163321076] ***
*** starting iteration: 2; err: [Inf, 0.19481068537724358, 0.1613959163321076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19481068537724358, 0.1613959163321076, 0.1507922969185174] ***
*** starting iteration: 3; err: [Inf, 0.19481068537724358, 0.1613959163321076, 0.1507922969185174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19481068537724358, 0.1613959163321076, 0.1507922969185174, 0.1480273232061497] ***
*** starting iteration: 4; err: [Inf, 0.19481068537724358, 0.1613959163321076, 0.1507922969185174, 0.1480273232061497] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19481068537724358, 0.1613959163321076, 0.1507922969185174, 0.1480273232061497, 0.14720279389472157] ***
*** finished computation of 7 references, err: [Inf, 0.19481068537724358, 0.1613959163321076, 0.1507922969185174, 0.1480273232061497, 0.14720279389472157] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 74, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 48, 21]]
** centroid: 3, normalized-entropy: 0.8865408928220899, [(2, 48), (3, 21)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [93, 17, 0]]
** centroid: 4, normalized-entropy: 0.6210993704855443, [(1, 93), (2, 17)]
*** center 5: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [76, 37, 0]]
** centroid: 6, normalized-entropy: 0.9122828071055981, [(1, 76), (2, 37)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2097946968923757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2097946968923757, 0.16131555783734106] ***
*** starting iteration: 2; err: [Inf, 0.2097946968923757, 0.16131555783734106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2097946968923757, 0.16131555783734106, 0.15162466838536995] ***
*** starting iteration: 3; err: [Inf, 0.2097946968923757, 0.16131555783734106, 0.15162466838536995] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2097946968923757, 0.16131555783734106, 0.15162466838536995, 0.14967825575738677] ***
*** starting iteration: 4; err: [Inf, 0.2097946968923757, 0.16131555783734106, 0.15162466838536995, 0.14967825575738677] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2097946968923757, 0.16131555783734106, 0.15162466838536995, 0.14967825575738677, 0.14866308573175452] ***
*** starting iteration: 5; err: [Inf, 0.2097946968923757, 0.16131555783734106, 0.15162466838536995, 0.14967825575738677, 0.14866308573175452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2097946968923757, 0.16131555783734106, 0.15162466838536995, 0.14967825575738677, 0.14866308573175452, 0.14726522029970943] ***
*** starting iteration: 6; err: [Inf, 0.2097946968923757, 0.16131555783734106, 0.15162466838536995, 0.14967825575738677, 0.14866308573175452, 0.14726522029970943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2097946968923757, 0.16131555783734106, 0.15162466838536995, 0.14967825575738677, 0.14866308573175452, 0.14726522029970943, 0.14609551841024493] ***
*** starting iteration: 7; err: [Inf, 0.2097946968923757, 0.16131555783734106, 0.15162466838536995, 0.14967825575738677, 0.14866308573175452, 0.14726522029970943, 0.14609551841024493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2097946968923757, 0.16131555783734106, 0.15162466838536995, 0.14967825575738677, 0.14866308573175452, 0.14726522029970943, 0.14609551841024493, 0.14563442654963554] ***
*** finished computation of 7 references, err: [Inf, 0.2097946968923757, 0.16131555783734106, 0.15162466838536995, 0.14967825575738677, 0.14866308573175452, 0.14726522029970943, 0.14609551841024493, 0.14563442654963554] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [61, 9, 0]]
** centroid: 1, normalized-entropy: 0.5535072654547254, [(1, 61), (2, 9)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 99, 22]]
** centroid: 2, normalized-entropy: 0.6840384356390419, [(2, 99), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 41, 0]]
** centroid: 3, normalized-entropy: 0.99664402524877, [(1, 47), (2, 41)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [92, 19, 0]]
** centroid: 4, normalized-entropy: 0.6603769229926888, [(1, 92), (2, 19)]
*** center 5: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 80, 0]]
** centroid: 6, normalized-entropy: 0.40379715049939235, [(1, 7), (2, 80)]
*** center 7: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21306993082065184] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21306993082065184, 0.16451225886428575] ***
*** starting iteration: 2; err: [Inf, 0.21306993082065184, 0.16451225886428575] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21306993082065184, 0.16451225886428575, 0.15553464551178411] ***
*** starting iteration: 3; err: [Inf, 0.21306993082065184, 0.16451225886428575, 0.15553464551178411] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21306993082065184, 0.16451225886428575, 0.15553464551178411, 0.1502852773432085] ***
*** starting iteration: 4; err: [Inf, 0.21306993082065184, 0.16451225886428575, 0.15553464551178411, 0.1502852773432085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21306993082065184, 0.16451225886428575, 0.15553464551178411, 0.1502852773432085, 0.14788003014945153] ***
*** starting iteration: 5; err: [Inf, 0.21306993082065184, 0.16451225886428575, 0.15553464551178411, 0.1502852773432085, 0.14788003014945153] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21306993082065184, 0.16451225886428575, 0.15553464551178411, 0.1502852773432085, 0.14788003014945153, 0.14727079325999276] ***
*** finished computation of 7 references, err: [Inf, 0.21306993082065184, 0.16451225886428575, 0.15553464551178411, 0.1502852773432085, 0.14788003014945153, 0.14727079325999276] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 93, 0]]
** centroid: 1, normalized-entropy: 0.290715865467415, [(1, 5), (2, 93)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [89, 8, 0]]
** centroid: 2, normalized-entropy: 0.4108378385169277, [(1, 89), (2, 8)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [68, 63, 0]]
** centroid: 3, normalized-entropy: 0.9989488917243372, [(1, 68), (2, 63)]
*** center 4: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 80, 23]]
** centroid: 5, normalized-entropy: 0.7661493370832159, [(2, 80), (3, 23)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [76, 20, 0]]
** centroid: 6, normalized-entropy: 0.7382848661434506, [(1, 76), (2, 20)]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23865971344665768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23865971344665768, 0.20769376578872223] ***
*** starting iteration: 2; err: [Inf, 0.23865971344665768, 0.20769376578872223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23865971344665768, 0.20769376578872223, 0.20398909334015022] ***
*** starting iteration: 3; err: [Inf, 0.23865971344665768, 0.20769376578872223, 0.20398909334015022] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23865971344665768, 0.20769376578872223, 0.20398909334015022, 0.20101781167766755] ***
*** starting iteration: 4; err: [Inf, 0.23865971344665768, 0.20769376578872223, 0.20398909334015022, 0.20101781167766755] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23865971344665768, 0.20769376578872223, 0.20398909334015022, 0.20101781167766755, 0.1969532375664425] ***
*** starting iteration: 5; err: [Inf, 0.23865971344665768, 0.20769376578872223, 0.20398909334015022, 0.20101781167766755, 0.1969532375664425] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23865971344665768, 0.20769376578872223, 0.20398909334015022, 0.20101781167766755, 0.1969532375664425, 0.1948518364700033] ***
*** starting iteration: 6; err: [Inf, 0.23865971344665768, 0.20769376578872223, 0.20398909334015022, 0.20101781167766755, 0.1969532375664425, 0.1948518364700033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23865971344665768, 0.20769376578872223, 0.20398909334015022, 0.20101781167766755, 0.1969532375664425, 0.1948518364700033, 0.19381522100947396] ***
*** starting iteration: 7; err: [Inf, 0.23865971344665768, 0.20769376578872223, 0.20398909334015022, 0.20101781167766755, 0.1969532375664425, 0.1948518364700033, 0.19381522100947396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23865971344665768, 0.20769376578872223, 0.20398909334015022, 0.20101781167766755, 0.1969532375664425, 0.1948518364700033, 0.19381522100947396, 0.19311781480975515] ***
*** finished computation of 7 references, err: [Inf, 0.23865971344665768, 0.20769376578872223, 0.20398909334015022, 0.20101781167766755, 0.1969532375664425, 0.1948518364700033, 0.19381522100947396, 0.19311781480975515] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [92, 40, 0]]
** centroid: 1, normalized-entropy: 0.8849636363831529, [(1, 92), (2, 40)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [29, 65, 0]]
** centroid: 2, normalized-entropy: 0.8914467590654126, [(1, 29), (2, 65)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 91, 21]]
** centroid: 3, normalized-entropy: 0.6962122601251459, [(2, 91), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [62, 46, 0]]
** centroid: 7, normalized-entropy: 0.9841095278800533, [(1, 62), (2, 46)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23418688101378426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23418688101378426, 0.20440720400816273] ***
*** starting iteration: 2; err: [Inf, 0.23418688101378426, 0.20440720400816273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23418688101378426, 0.20440720400816273, 0.19996573975675555] ***
*** starting iteration: 3; err: [Inf, 0.23418688101378426, 0.20440720400816273, 0.19996573975675555] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23418688101378426, 0.20440720400816273, 0.19996573975675555, 0.19842064186003522] ***
*** starting iteration: 4; err: [Inf, 0.23418688101378426, 0.20440720400816273, 0.19996573975675555, 0.19842064186003522] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23418688101378426, 0.20440720400816273, 0.19996573975675555, 0.19842064186003522, 0.19724235262001294] ***
*** starting iteration: 5; err: [Inf, 0.23418688101378426, 0.20440720400816273, 0.19996573975675555, 0.19842064186003522, 0.19724235262001294] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23418688101378426, 0.20440720400816273, 0.19996573975675555, 0.19842064186003522, 0.19724235262001294, 0.1968675037996768] ***
*** finished computation of 7 references, err: [Inf, 0.23418688101378426, 0.20440720400816273, 0.19996573975675555, 0.19842064186003522, 0.19724235262001294, 0.1968675037996768] ***
*** center 1: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [93, 39, 0]]
** centroid: 3, normalized-entropy: 0.8756633923230399, [(1, 93), (2, 39)]
*** center 4: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 30, 0]]
** centroid: 5, normalized-entropy: 0.9770012394218561, [(1, 43), (2, 30)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 101, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 78, 22]]
** centroid: 7, normalized-entropy: 0.7601675029619658, [(2, 78), (3, 22)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21912583008176764] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21912583008176764, 0.19578104573434618] ***
*** starting iteration: 2; err: [Inf, 0.21912583008176764, 0.19578104573434618] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21912583008176764, 0.19578104573434618, 0.18779055666418626] ***
*** starting iteration: 3; err: [Inf, 0.21912583008176764, 0.19578104573434618, 0.18779055666418626] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21912583008176764, 0.19578104573434618, 0.18779055666418626, 0.1851558134642554] ***
*** starting iteration: 4; err: [Inf, 0.21912583008176764, 0.19578104573434618, 0.18779055666418626, 0.1851558134642554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21912583008176764, 0.19578104573434618, 0.18779055666418626, 0.1851558134642554, 0.18463073780612163] ***
*** finished computation of 7 references, err: [Inf, 0.21912583008176764, 0.19578104573434618, 0.18779055666418626, 0.1851558134642554, 0.18463073780612163] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 87, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [73, 34, 0]]
** centroid: 2, normalized-entropy: 0.9019255901324292, [(1, 73), (2, 34)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 93, 23]]
** centroid: 3, normalized-entropy: 0.7184663880382773, [(2, 93), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [82, 28, 0]]
** centroid: 6, normalized-entropy: 0.8184033299219708, [(1, 82), (2, 28)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [65, 22, 0]]
** centroid: 7, normalized-entropy: 0.8158009273789572, [(1, 65), (2, 22)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9429938920956884, 0.9359868850886816, 0.9359808910707114, 0.9329928731126337, 0.9299898701096305, 0.9299838760916606, 0.9240048431665198, 0.9159758560956166, 0.9129698560836287, 0.9019888151624679, 0.8889578200955447, 0.8780127432822044, 0.867969766173359, 0.8049576522630414, 0.776974579369789]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9429938920956884
finished with 16
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.23722358340381397] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23722358340381397, 0.20011063816596394] ***
*** finished computation of 7 references, err: [Inf, 0.23722358340381397, 0.20011063816596394] ***
*** center 1: selecting labels [1] (freq >= 2) [from [131, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 68, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [96, 18, 0]]
** centroid: 4, normalized-entropy: 0.6292492238560344, [(1, 96), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [90, 17, 0]]
** centroid: 5, normalized-entropy: 0.6316198184485629, [(1, 90), (2, 17)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [86, 30, 0]]
** centroid: 6, normalized-entropy: 0.8246578332945033, [(1, 86), (2, 30)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 42, 21]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 42), (3, 21)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2636156069211497] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2636156069211497, 0.20710166427830437] ***
*** finished computation of 7 references, err: [Inf, 0.2636156069211497, 0.20710166427830437] ***
*** center 1: selecting labels [1] (freq >= 2) [from [137, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [2, 79, 0]]
** centroid: 2, normalized-entropy: 0.16702680404522793, [(1, 2), (2, 79)]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [98, 67, 0]]
** centroid: 5, normalized-entropy: 0.9743856052521117, [(1, 98), (2, 67)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 74, 22]]
** centroid: 6, normalized-entropy: 0.7765557854444601, [(2, 74), (3, 22)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [27, 28, 0]]
** centroid: 7, normalized-entropy: 0.9997615248696311, [(1, 27), (2, 28)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4196365237182964] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4196365237182964, 0.2602212466257645] ***
*** finished computation of 7 references, err: [Inf, 0.4196365237182964, 0.2602212466257645] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [111, 22, 0]]
** centroid: 1, normalized-entropy: 0.6471045650133528, [(1, 111), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [44, 66, 0]]
** centroid: 2, normalized-entropy: 0.9709505944546688, [(1, 44), (2, 66)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [39, 48, 0]]
** centroid: 3, normalized-entropy: 0.9922666387194963, [(1, 39), (2, 48)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 49, 14]]
** centroid: 4, normalized-entropy: 0.7642045065086204, [(2, 49), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 43, 0]]
** centroid: 5, normalized-entropy: 0.9921586617207422, [(1, 53), (2, 43)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 36, 9]]
** centroid: 6, normalized-entropy: 0.7219280948873623, [(2, 36), (3, 9)]
*** center 7: selecting labels [1] (freq >= 2) [from [133, 0, 0]]
finished with 13 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9429938920956884, 0.9359868850886816, 0.9359808910707114, 0.9329928731126337, 0.9299898701096305, 0.9299838760916606, 0.9240048431665198, 0.9159758560956166, 0.9129698560836287, 0.9019888151624679, 0.8959888031744319, 0.8889578200955447, 0.8780127432822044, 0.867969766173359, 0.8049576522630414, 0.776974579369789]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9429938920956884
finished with 16
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9429938920956884, 0.9359868850886816, 0.9359808910707114, 0.9329928731126337, 0.9299898701096305, 0.9299838760916606, 0.9240048431665198, 0.9159758560956166, 0.9129698560836287, 0.9019888151624679, 0.8959888031744319, 0.8889578200955447, 0.8780127432822044, 0.867969766173359, 0.8049576522630414, 0.776974579369789]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9429938920956884
finished with 16
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9429938920956884, 0.9359868850886816, 0.9359808910707114, 0.9329928731126337, 0.9299898701096305, 0.9299838760916606, 0.9240048431665198, 0.9159758560956166, 0.9129698560836287, 0.9019888151624679, 0.8959888031744319, 0.8889578200955447, 0.8780127432822044, 0.867969766173359, 0.8049576522630414, 0.776974579369789]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9429938920956884
finished with 16
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.25592577787768095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25592577787768095, 0.19512184815015643] ***
*** starting iteration: 2; err: [Inf, 0.25592577787768095, 0.19512184815015643] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25592577787768095, 0.19512184815015643, 0.19021725375414825] ***
*** starting iteration: 3; err: [Inf, 0.25592577787768095, 0.19512184815015643, 0.19021725375414825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25592577787768095, 0.19512184815015643, 0.19021725375414825, 0.1896023814463988] ***
*** finished computation of 7 references, err: [Inf, 0.25592577787768095, 0.19512184815015643, 0.19021725375414825, 0.1896023814463988] ***
*** center 1: selecting labels [1] (freq >= 2) [from [179, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 81, 33]]
** centroid: 2, normalized-entropy: 0.8680403986166402, [(2, 81), (3, 33)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [158, 3, 0]]
** centroid: 3, normalized-entropy: 0.13369796063545109, [(1, 158), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [111, 32, 0]]
** centroid: 4, normalized-entropy: 0.7670030768842512, [(1, 111), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 135, 0]]
** centroid: 5, normalized-entropy: 0.2222848306856879, [(1, 5), (2, 135)]
*** center 6: selecting labels [1] (freq >= 2) [from [133, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 126, 0]]
** centroid: 7, normalized-entropy: 0.19823496409776642, [(1, 4), (2, 126)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25790687853097916] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25790687853097916, 0.19011788696004078] ***
*** starting iteration: 2; err: [Inf, 0.25790687853097916, 0.19011788696004078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25790687853097916, 0.19011788696004078, 0.18783818873390556] ***
*** starting iteration: 3; err: [Inf, 0.25790687853097916, 0.19011788696004078, 0.18783818873390556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25790687853097916, 0.19011788696004078, 0.18783818873390556, 0.18749496686272324] ***
*** finished computation of 7 references, err: [Inf, 0.25790687853097916, 0.19011788696004078, 0.18783818873390556, 0.18749496686272324] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [76, 2, 0]]
** centroid: 1, normalized-entropy: 0.17203694935311387, [(1, 76), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 4, 0]]
** centroid: 2, normalized-entropy: 0.3411538931451763, [(1, 59), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 49, 14]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(2, 49), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [81, 13, 0]]
** centroid: 5, normalized-entropy: 0.57976367540648, [(1, 81), (2, 13)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 62, 0]]
** centroid: 7, normalized-entropy: 0.32984607020714635, [(1, 4), (2, 62)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2243103427402675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2243103427402675, 0.1964118001293391] ***
*** starting iteration: 2; err: [Inf, 0.2243103427402675, 0.1964118001293391] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2243103427402675, 0.1964118001293391, 0.1926200074888766] ***
*** starting iteration: 3; err: [Inf, 0.2243103427402675, 0.1964118001293391, 0.1926200074888766] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2243103427402675, 0.1964118001293391, 0.1926200074888766, 0.19099997942335903] ***
*** starting iteration: 4; err: [Inf, 0.2243103427402675, 0.1964118001293391, 0.1926200074888766, 0.19099997942335903] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2243103427402675, 0.1964118001293391, 0.1926200074888766, 0.19099997942335903, 0.1902797995992005] ***
*** finished computation of 7 references, err: [Inf, 0.2243103427402675, 0.1964118001293391, 0.1926200074888766, 0.19099997942335903, 0.1902797995992005] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 45, 17]]
** centroid: 1, normalized-entropy: 0.8474179614176633, [(2, 45), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [40, 16, 0]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(1, 40), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [77, 6, 0]]
** centroid: 4, normalized-entropy: 0.3744088453489206, [(1, 77), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [79, 9, 0]]
** centroid: 5, normalized-entropy: 0.4761588445580706, [(1, 79), (2, 9)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 61, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 65, 0]]
** centroid: 7, normalized-entropy: 0.19364280468389852, [(1, 2), (2, 65)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24456133135780692] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24456133135780692, 0.18740053838677703] ***
*** starting iteration: 2; err: [Inf, 0.24456133135780692, 0.18740053838677703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24456133135780692, 0.18740053838677703, 0.18402871061861514] ***
*** starting iteration: 3; err: [Inf, 0.24456133135780692, 0.18740053838677703, 0.18402871061861514] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24456133135780692, 0.18740053838677703, 0.18402871061861514, 0.18336570363119245] ***
*** finished computation of 7 references, err: [Inf, 0.24456133135780692, 0.18740053838677703, 0.18402871061861514, 0.18336570363119245] ***
*** center 1: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 63, 16]]
** centroid: 2, normalized-entropy: 0.7269625813353975, [(2, 63), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [68, 7, 0]]
** centroid: 3, normalized-entropy: 0.44749925503686355, [(1, 68), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [42, 29, 0]]
** centroid: 4, normalized-entropy: 0.9756797868933086, [(1, 42), (2, 29)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [47, 46, 0]]
** centroid: 5, normalized-entropy: 0.9999165959739288, [(1, 47), (2, 46)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 49, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24082019581459463] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24082019581459463, 0.1998091754168272] ***
*** starting iteration: 2; err: [Inf, 0.24082019581459463, 0.1998091754168272] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24082019581459463, 0.1998091754168272, 0.1934050603909418] ***
*** starting iteration: 3; err: [Inf, 0.24082019581459463, 0.1998091754168272, 0.1934050603909418] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24082019581459463, 0.1998091754168272, 0.1934050603909418, 0.19080448682233692] ***
*** starting iteration: 4; err: [Inf, 0.24082019581459463, 0.1998091754168272, 0.1934050603909418, 0.19080448682233692] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24082019581459463, 0.1998091754168272, 0.1934050603909418, 0.19080448682233692, 0.18960637242160738] ***
*** starting iteration: 5; err: [Inf, 0.24082019581459463, 0.1998091754168272, 0.1934050603909418, 0.19080448682233692, 0.18960637242160738] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24082019581459463, 0.1998091754168272, 0.1934050603909418, 0.19080448682233692, 0.18960637242160738, 0.1892717695236206] ***
*** finished computation of 7 references, err: [Inf, 0.24082019581459463, 0.1998091754168272, 0.1934050603909418, 0.19080448682233692, 0.18960637242160738, 0.1892717695236206] ***
*** center 1: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 33, 24]]
** centroid: 2, normalized-entropy: 0.9819407868640977, [(2, 33), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [68, 3, 0]]
** centroid: 3, normalized-entropy: 0.25253077151613923, [(1, 68), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 8, 0]]
** centroid: 4, normalized-entropy: 0.5079353563991225, [(1, 63), (2, 8)]
*** center 5: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [14, 75, 0]]
** centroid: 6, normalized-entropy: 0.6278191534832795, [(1, 14), (2, 75)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 63, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21954981518536806] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21954981518536806, 0.19441129377111793] ***
*** starting iteration: 2; err: [Inf, 0.21954981518536806, 0.19441129377111793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21954981518536806, 0.19441129377111793, 0.18634976798668504] ***
*** starting iteration: 3; err: [Inf, 0.21954981518536806, 0.19441129377111793, 0.18634976798668504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21954981518536806, 0.19441129377111793, 0.18634976798668504, 0.18413322663120926] ***
*** starting iteration: 4; err: [Inf, 0.21954981518536806, 0.19441129377111793, 0.18634976798668504, 0.18413322663120926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21954981518536806, 0.19441129377111793, 0.18634976798668504, 0.18413322663120926, 0.18243500280380248] ***
*** starting iteration: 5; err: [Inf, 0.21954981518536806, 0.19441129377111793, 0.18634976798668504, 0.18413322663120926, 0.18243500280380248] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21954981518536806, 0.19441129377111793, 0.18634976798668504, 0.18413322663120926, 0.18243500280380248, 0.18175066086649894] ***
*** finished computation of 7 references, err: [Inf, 0.21954981518536806, 0.19441129377111793, 0.18634976798668504, 0.18413322663120926, 0.18243500280380248, 0.18175066086649894] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 60, 11]]
** centroid: 1, normalized-entropy: 0.6220403090607189, [(2, 60), (3, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [76, 6, 0]]
** centroid: 3, normalized-entropy: 0.3776463213737003, [(1, 76), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [56, 23, 0]]
** centroid: 4, normalized-entropy: 0.8701883352082787, [(1, 56), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [40, 37, 0]]
** centroid: 5, normalized-entropy: 0.9989047442823606, [(1, 40), (2, 37)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 54, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22079363954626025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22079363954626025, 0.19013949021324517] ***
*** starting iteration: 2; err: [Inf, 0.22079363954626025, 0.19013949021324517] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22079363954626025, 0.19013949021324517, 0.18653407365269958] ***
*** starting iteration: 3; err: [Inf, 0.22079363954626025, 0.19013949021324517, 0.18653407365269958] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22079363954626025, 0.19013949021324517, 0.18653407365269958, 0.18541458385810256] ***
*** starting iteration: 4; err: [Inf, 0.22079363954626025, 0.19013949021324517, 0.18653407365269958, 0.18541458385810256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22079363954626025, 0.19013949021324517, 0.18653407365269958, 0.18541458385810256, 0.18547072435729206] ***
*** finished computation of 7 references, err: [Inf, 0.22079363954626025, 0.19013949021324517, 0.18653407365269958, 0.18541458385810256, 0.18547072435729206] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [56, 16, 0]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(1, 56), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 22, 0]]
** centroid: 4, normalized-entropy: 0.8249658680139929, [(1, 63), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 5, 0]]
** centroid: 5, normalized-entropy: 0.378958787501346, [(1, 63), (2, 5)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 71, 17]]
** centroid: 6, normalized-entropy: 0.7080803256135676, [(2, 71), (3, 17)]
*** center 7: selecting labels [1] (freq >= 2) [from [47, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23438005919754507] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23438005919754507, 0.19305555344186723] ***
*** starting iteration: 2; err: [Inf, 0.23438005919754507, 0.19305555344186723] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23438005919754507, 0.19305555344186723, 0.18836756453476847] ***
*** starting iteration: 3; err: [Inf, 0.23438005919754507, 0.19305555344186723, 0.18836756453476847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23438005919754507, 0.19305555344186723, 0.18836756453476847, 0.18723804520070553] ***
*** starting iteration: 4; err: [Inf, 0.23438005919754507, 0.19305555344186723, 0.18836756453476847, 0.18723804520070553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23438005919754507, 0.19305555344186723, 0.18836756453476847, 0.18723804520070553, 0.18688876381516456] ***
*** finished computation of 7 references, err: [Inf, 0.23438005919754507, 0.19305555344186723, 0.18836756453476847, 0.18723804520070553, 0.18688876381516456] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [76, 9, 0]]
** centroid: 1, normalized-entropy: 0.48736957102366285, [(1, 76), (2, 9)]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 43, 18]]
** centroid: 3, normalized-entropy: 0.8751957887407251, [(2, 43), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [7, 64, 0]]
** centroid: 5, normalized-entropy: 0.4645149440905521, [(1, 7), (2, 64)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 69, 0]]
** centroid: 6, normalized-entropy: 0.306424729870515, [(1, 4), (2, 69)]
*** center 7: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.243700827088207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.243700827088207, 0.1943573324372992] ***
*** starting iteration: 2; err: [Inf, 0.243700827088207, 0.1943573324372992] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.243700827088207, 0.1943573324372992, 0.1880706314817071] ***
*** starting iteration: 3; err: [Inf, 0.243700827088207, 0.1943573324372992, 0.1880706314817071] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.243700827088207, 0.1943573324372992, 0.1880706314817071, 0.18725039554201067] ***
*** finished computation of 7 references, err: [Inf, 0.243700827088207, 0.1943573324372992, 0.1880706314817071, 0.18725039554201067] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [14, 58, 0]]
** centroid: 1, normalized-entropy: 0.710676853856123, [(1, 14), (2, 58)]
*** center 2: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [64, 9, 0]]
** centroid: 3, normalized-entropy: 0.5387379148665815, [(1, 64), (2, 9)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 48, 21]]
** centroid: 4, normalized-entropy: 0.8865408928220899, [(2, 48), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 11, 0]]
** centroid: 5, normalized-entropy: 0.5643364444932288, [(1, 72), (2, 11)]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 65, 0]]
** centroid: 7, normalized-entropy: 0.260862909647207, [(1, 3), (2, 65)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21623230908624827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21623230908624827, 0.19055449615418912] ***
*** starting iteration: 2; err: [Inf, 0.21623230908624827, 0.19055449615418912] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21623230908624827, 0.19055449615418912, 0.18827998934593052] ***
*** starting iteration: 3; err: [Inf, 0.21623230908624827, 0.19055449615418912, 0.18827998934593052] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21623230908624827, 0.19055449615418912, 0.18827998934593052, 0.1873860493893735] ***
*** finished computation of 7 references, err: [Inf, 0.21623230908624827, 0.19055449615418912, 0.18827998934593052, 0.1873860493893735] ***
*** center 1: selecting labels [1] (freq >= 2) [from [80, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 16, 0]]
** centroid: 2, normalized-entropy: 0.7930490047779772, [(1, 51), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 47, 20]]
** centroid: 3, normalized-entropy: 0.8794587736429037, [(2, 47), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [69, 2, 0]]
** centroid: 5, normalized-entropy: 0.18512476010054582, [(1, 69), (2, 2)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 71, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [26, 51, 0]]
** centroid: 7, normalized-entropy: 0.9225641366401655, [(1, 26), (2, 51)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23218293884396554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23218293884396554, 0.1922040365601424] ***
*** starting iteration: 2; err: [Inf, 0.23218293884396554, 0.1922040365601424] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23218293884396554, 0.1922040365601424, 0.19062293900176883] ***
*** starting iteration: 3; err: [Inf, 0.23218293884396554, 0.1922040365601424, 0.19062293900176883] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23218293884396554, 0.1922040365601424, 0.19062293900176883, 0.1902825840972364] ***
*** finished computation of 7 references, err: [Inf, 0.23218293884396554, 0.1922040365601424, 0.19062293900176883, 0.1902825840972364] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 61, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [33, 34, 0]]
** centroid: 3, normalized-entropy: 0.9998393017810486, [(1, 33), (2, 34)]
*** center 4: selecting labels [1] (freq >= 2) [from [81, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [57, 15, 0]]
** centroid: 5, normalized-entropy: 0.7382848661434506, [(1, 57), (2, 15)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 64, 20]]
** centroid: 6, normalized-entropy: 0.7918583525674836, [(2, 64), (3, 20)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [55, 2, 0]]
** centroid: 7, normalized-entropy: 0.2192973081321754, [(1, 55), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24243483230657875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24243483230657875, 0.19911299743456767] ***
*** starting iteration: 2; err: [Inf, 0.24243483230657875, 0.19911299743456767] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24243483230657875, 0.19911299743456767, 0.19567332963459194] ***
*** starting iteration: 3; err: [Inf, 0.24243483230657875, 0.19911299743456767, 0.19567332963459194] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24243483230657875, 0.19911299743456767, 0.19567332963459194, 0.19555513145774603] ***
*** finished computation of 7 references, err: [Inf, 0.24243483230657875, 0.19911299743456767, 0.19567332963459194, 0.19555513145774603] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [66, 20, 0]]
** centroid: 1, normalized-entropy: 0.7824441294066888, [(1, 66), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 17, 0]]
** centroid: 2, normalized-entropy: 0.8054848387405957, [(1, 52), (2, 17)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 48, 22]]
** centroid: 3, normalized-entropy: 0.8980587934501658, [(2, 48), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 5, 0]]
** centroid: 5, normalized-entropy: 0.378958787501346, [(1, 63), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 20, 0]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(1, 40), (2, 20)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 72, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2219247536957264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2219247536957264, 0.19645644897501915] ***
*** starting iteration: 2; err: [Inf, 0.2219247536957264, 0.19645644897501915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2219247536957264, 0.19645644897501915, 0.19176410992629825] ***
*** starting iteration: 3; err: [Inf, 0.2219247536957264, 0.19645644897501915, 0.19176410992629825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2219247536957264, 0.19645644897501915, 0.19176410992629825, 0.19118249216116964] ***
*** finished computation of 7 references, err: [Inf, 0.2219247536957264, 0.19645644897501915, 0.19176410992629825, 0.19118249216116964] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 63, 0]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(1, 3), (2, 63)]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 12, 0]]
** centroid: 3, normalized-entropy: 0.6609623351442084, [(1, 58), (2, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 1, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 65, 0]]
** centroid: 6, normalized-entropy: 0.3712323266408756, [(1, 5), (2, 65)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 43, 14]]
** centroid: 7, normalized-entropy: 0.8042522359016421, [(2, 43), (3, 14)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24817368385381997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24817368385381997, 0.19262574988417328] ***
*** starting iteration: 2; err: [Inf, 0.24817368385381997, 0.19262574988417328] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24817368385381997, 0.19262574988417328, 0.1878002207572572] ***
*** starting iteration: 3; err: [Inf, 0.24817368385381997, 0.19262574988417328, 0.1878002207572572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24817368385381997, 0.19262574988417328, 0.1878002207572572, 0.18732349941134452] ***
*** finished computation of 7 references, err: [Inf, 0.24817368385381997, 0.19262574988417328, 0.1878002207572572, 0.18732349941134452] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [34, 58, 0]]
** centroid: 1, normalized-entropy: 0.9503376699710269, [(1, 34), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 10, 0]]
** centroid: 2, normalized-entropy: 0.6631968402398286, [(1, 48), (2, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 67, 17]]
** centroid: 4, normalized-entropy: 0.7266645172796352, [(2, 67), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [7, 62, 0]]
** centroid: 5, normalized-entropy: 0.47357292491745173, [(1, 7), (2, 62)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [54, 3, 0]]
** centroid: 6, normalized-entropy: 0.2974722489192896, [(1, 54), (2, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25228399648331107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25228399648331107, 0.19209379405714572] ***
*** starting iteration: 2; err: [Inf, 0.25228399648331107, 0.19209379405714572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25228399648331107, 0.19209379405714572, 0.18779207913577556] ***
*** starting iteration: 3; err: [Inf, 0.25228399648331107, 0.19209379405714572, 0.18779207913577556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25228399648331107, 0.19209379405714572, 0.18779207913577556, 0.1871509841508232] ***
*** finished computation of 7 references, err: [Inf, 0.25228399648331107, 0.19209379405714572, 0.18779207913577556, 0.1871509841508232] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [31, 34, 0]]
** centroid: 1, normalized-entropy: 0.9984628557283827, [(1, 31), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [49, 6, 0]]
** centroid: 2, normalized-entropy: 0.4971677614160751, [(1, 49), (2, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 61, 17]]
** centroid: 4, normalized-entropy: 0.7564041945982506, [(2, 61), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [68, 6, 0]]
** centroid: 5, normalized-entropy: 0.40597703847557104, [(1, 68), (2, 6)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [62, 6, 0]]
** centroid: 6, normalized-entropy: 0.43055186701043935, [(1, 62), (2, 6)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 71, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2217800089372322] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2217800089372322, 0.1932719580158591] ***
*** starting iteration: 2; err: [Inf, 0.2217800089372322, 0.1932719580158591] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2217800089372322, 0.1932719580158591, 0.18729934745444915] ***
*** starting iteration: 3; err: [Inf, 0.2217800089372322, 0.1932719580158591, 0.18729934745444915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2217800089372322, 0.1932719580158591, 0.18729934745444915, 0.1855528472289443] ***
*** starting iteration: 4; err: [Inf, 0.2217800089372322, 0.1932719580158591, 0.18729934745444915, 0.1855528472289443] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2217800089372322, 0.1932719580158591, 0.18729934745444915, 0.1855528472289443, 0.18506014014594258] ***
*** finished computation of 7 references, err: [Inf, 0.2217800089372322, 0.1932719580158591, 0.18729934745444915, 0.1855528472289443, 0.18506014014594258] ***
*** center 1: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 65, 17]]
** centroid: 2, normalized-entropy: 0.7363230272021651, [(2, 65), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 12, 0]]
** centroid: 3, normalized-entropy: 0.7424875695421234, [(1, 45), (2, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [3, 64, 0]]
** centroid: 5, normalized-entropy: 0.26377743669413856, [(1, 3), (2, 64)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [43, 42, 0]]
** centroid: 6, normalized-entropy: 0.9999001572094882, [(1, 43), (2, 42)]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22960350999049842] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22960350999049842, 0.19400222112145274] ***
*** starting iteration: 2; err: [Inf, 0.22960350999049842, 0.19400222112145274] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22960350999049842, 0.19400222112145274, 0.1875469038411975] ***
*** starting iteration: 3; err: [Inf, 0.22960350999049842, 0.19400222112145274, 0.1875469038411975] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22960350999049842, 0.19400222112145274, 0.1875469038411975, 0.18619223937019705] ***
*** starting iteration: 4; err: [Inf, 0.22960350999049842, 0.19400222112145274, 0.1875469038411975, 0.18619223937019705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22960350999049842, 0.19400222112145274, 0.1875469038411975, 0.18619223937019705, 0.185908974471502] ***
*** finished computation of 7 references, err: [Inf, 0.22960350999049842, 0.19400222112145274, 0.1875469038411975, 0.18619223937019705, 0.185908974471502] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 77, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [65, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [75, 6, 0]]
** centroid: 4, normalized-entropy: 0.38094658570539014, [(1, 75), (2, 6)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 43, 15]]
** centroid: 5, normalized-entropy: 0.8246578332945033, [(2, 43), (3, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 60, 0]]
** centroid: 7, normalized-entropy: 0.43949698692151346, [(1, 6), (2, 60)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2384704371355474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2384704371355474, 0.1986070195734501] ***
*** starting iteration: 2; err: [Inf, 0.2384704371355474, 0.1986070195734501] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2384704371355474, 0.1986070195734501, 0.19408023581281306] ***
*** starting iteration: 3; err: [Inf, 0.2384704371355474, 0.1986070195734501, 0.19408023581281306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2384704371355474, 0.1986070195734501, 0.19408023581281306, 0.19249822710826994] ***
*** starting iteration: 4; err: [Inf, 0.2384704371355474, 0.1986070195734501, 0.19408023581281306, 0.19249822710826994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2384704371355474, 0.1986070195734501, 0.19408023581281306, 0.19249822710826994, 0.19210415086895227] ***
*** finished computation of 7 references, err: [Inf, 0.2384704371355474, 0.1986070195734501, 0.19408023581281306, 0.19249822710826994, 0.19210415086895227] ***
*** center 1: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 70, 12]]
** centroid: 2, normalized-entropy: 0.6006085754131871, [(2, 70), (3, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [57, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [43, 34, 0]]
** centroid: 4, normalized-entropy: 0.9901226308935799, [(1, 43), (2, 34)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 31, 0]]
** centroid: 5, normalized-entropy: 0.9782176659354249, [(1, 44), (2, 31)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 57, 0]]
** centroid: 7, normalized-entropy: 0.34918437350730797, [(1, 4), (2, 57)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23573900759033858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23573900759033858, 0.19616413245350123] ***
*** starting iteration: 2; err: [Inf, 0.23573900759033858, 0.19616413245350123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23573900759033858, 0.19616413245350123, 0.19324087083525956] ***
*** starting iteration: 3; err: [Inf, 0.23573900759033858, 0.19616413245350123, 0.19324087083525956] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23573900759033858, 0.19616413245350123, 0.19324087083525956, 0.1927555075790733] ***
*** finished computation of 7 references, err: [Inf, 0.23573900759033858, 0.19616413245350123, 0.19324087083525956, 0.1927555075790733] ***
*** center 1: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 52, 15]]
** centroid: 2, normalized-entropy: 0.7671903206448686, [(2, 52), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [38, 9, 0]]
** centroid: 3, normalized-entropy: 0.7045767128725937, [(1, 38), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [68, 15, 0]]
** centroid: 4, normalized-entropy: 0.6816559115981193, [(1, 68), (2, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 57, 0]]
** centroid: 5, normalized-entropy: 0.9293636260137188, [(1, 30), (2, 57)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [64, 3, 0]]
** centroid: 6, normalized-entropy: 0.26377743669413856, [(1, 64), (2, 3)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 55, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23072597736679018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23072597736679018, 0.19074087821505964] ***
*** starting iteration: 2; err: [Inf, 0.23072597736679018, 0.19074087821505964] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23072597736679018, 0.19074087821505964, 0.18488155602663756] ***
*** starting iteration: 3; err: [Inf, 0.23072597736679018, 0.19074087821505964, 0.18488155602663756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23072597736679018, 0.19074087821505964, 0.18488155602663756, 0.18384295038506387] ***
*** starting iteration: 4; err: [Inf, 0.23072597736679018, 0.19074087821505964, 0.18488155602663756, 0.18384295038506387] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23072597736679018, 0.19074087821505964, 0.18488155602663756, 0.18384295038506387, 0.18393613817170262] ***
*** finished computation of 7 references, err: [Inf, 0.23072597736679018, 0.19074087821505964, 0.18488155602663756, 0.18384295038506387, 0.18393613817170262] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 74, 0]]
** centroid: 1, normalized-entropy: 0.23750814382859295, [(1, 3), (2, 74)]
*** center 2: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [63, 9, 0]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(1, 63), (2, 9)]
*** center 4: selecting labels [1] (freq >= 2) [from [72, 1, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [87, 1, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 52, 13]]
** centroid: 6, normalized-entropy: 0.7219280948873623, [(2, 52), (3, 13)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 66, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.230696683941409] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.230696683941409, 0.19200005845353008] ***
*** starting iteration: 2; err: [Inf, 0.230696683941409, 0.19200005845353008] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.230696683941409, 0.19200005845353008, 0.18849960462749005] ***
*** starting iteration: 3; err: [Inf, 0.230696683941409, 0.19200005845353008, 0.18849960462749005] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.230696683941409, 0.19200005845353008, 0.18849960462749005, 0.18820172279328107] ***
*** finished computation of 7 references, err: [Inf, 0.230696683941409, 0.19200005845353008, 0.18849960462749005, 0.18820172279328107] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 72, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 29, 0]]
** centroid: 3, normalized-entropy: 0.9626147059982517, [(1, 46), (2, 29)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [76, 8, 0]]
** centroid: 4, normalized-entropy: 0.45371633918694493, [(1, 76), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 13, 0]]
** centroid: 5, normalized-entropy: 0.6402569436810504, [(1, 67), (2, 13)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 60, 18]]
** centroid: 6, normalized-entropy: 0.7793498372920851, [(2, 60), (3, 18)]
*** center 7: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2282151686027646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2282151686027646, 0.1910696262380807] ***
*** starting iteration: 2; err: [Inf, 0.2282151686027646, 0.1910696262380807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2282151686027646, 0.1910696262380807, 0.18747487425431608] ***
*** starting iteration: 3; err: [Inf, 0.2282151686027646, 0.1910696262380807, 0.18747487425431608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2282151686027646, 0.1910696262380807, 0.18747487425431608, 0.18710595062747598] ***
*** finished computation of 7 references, err: [Inf, 0.2282151686027646, 0.1910696262380807, 0.18747487425431608, 0.18710595062747598] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 52, 14]]
** centroid: 2, normalized-entropy: 0.7455178428108284, [(2, 52), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [50, 13, 0]]
** centroid: 3, normalized-entropy: 0.7344461802527668, [(1, 50), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [53, 4, 0]]
** centroid: 4, normalized-entropy: 0.36657801255334593, [(1, 53), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [10, 73, 0]]
** centroid: 5, normalized-entropy: 0.530744566923854, [(1, 10), (2, 73)]
*** center 6: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [20, 57, 0]]
** centroid: 7, normalized-entropy: 0.8263541679009075, [(1, 20), (2, 57)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22086215787194668] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22086215787194668, 0.1918385736607015] ***
*** starting iteration: 2; err: [Inf, 0.22086215787194668, 0.1918385736607015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22086215787194668, 0.1918385736607015, 0.18858633127249777] ***
*** starting iteration: 3; err: [Inf, 0.22086215787194668, 0.1918385736607015, 0.18858633127249777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22086215787194668, 0.1918385736607015, 0.18858633127249777, 0.1872163466308266] ***
*** starting iteration: 4; err: [Inf, 0.22086215787194668, 0.1918385736607015, 0.18858633127249777, 0.1872163466308266] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22086215787194668, 0.1918385736607015, 0.18858633127249777, 0.1872163466308266, 0.18629124097991734] ***
*** finished computation of 7 references, err: [Inf, 0.22086215787194668, 0.1918385736607015, 0.18858633127249777, 0.1872163466308266, 0.18629124097991734] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 73, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 21, 0]]
** centroid: 3, normalized-entropy: 0.8970964164730478, [(1, 46), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [61, 22, 0]]
** centroid: 4, normalized-entropy: 0.8342867421739538, [(1, 61), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [68, 3, 0]]
** centroid: 5, normalized-entropy: 0.25253077151613923, [(1, 68), (2, 3)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 73, 13]]
** centroid: 6, normalized-entropy: 0.6127425554686624, [(2, 73), (3, 13)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [57, 5, 0]]
** centroid: 7, normalized-entropy: 0.4044483864864384, [(1, 57), (2, 5)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21756020220182837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21756020220182837, 0.19026258982904257] ***
*** starting iteration: 2; err: [Inf, 0.21756020220182837, 0.19026258982904257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21756020220182837, 0.19026258982904257, 0.18665024425182491] ***
*** starting iteration: 3; err: [Inf, 0.21756020220182837, 0.19026258982904257, 0.18665024425182491] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21756020220182837, 0.19026258982904257, 0.18665024425182491, 0.18454596289992334] ***
*** starting iteration: 4; err: [Inf, 0.21756020220182837, 0.19026258982904257, 0.18665024425182491, 0.18454596289992334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21756020220182837, 0.19026258982904257, 0.18665024425182491, 0.18454596289992334, 0.184418962366879] ***
*** finished computation of 7 references, err: [Inf, 0.21756020220182837, 0.19026258982904257, 0.18665024425182491, 0.18454596289992334, 0.184418962366879] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 48, 0]]
** centroid: 1, normalized-entropy: 0.32275695889739825, [(1, 3), (2, 48)]
*** center 2: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 35, 0]]
** centroid: 3, normalized-entropy: 0.9866554896538049, [(1, 46), (2, 35)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [69, 3, 0]]
** centroid: 4, normalized-entropy: 0.24988229283318547, [(1, 69), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [55, 22, 0]]
** centroid: 5, normalized-entropy: 0.8631205685666311, [(1, 55), (2, 22)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 73, 19]]
** centroid: 6, normalized-entropy: 0.7347813522127804, [(2, 73), (3, 19)]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24933034820668398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24933034820668398, 0.1916524009811692] ***
*** starting iteration: 2; err: [Inf, 0.24933034820668398, 0.1916524009811692] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24933034820668398, 0.1916524009811692, 0.18735298488661647] ***
*** starting iteration: 3; err: [Inf, 0.24933034820668398, 0.1916524009811692, 0.18735298488661647] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24933034820668398, 0.1916524009811692, 0.18735298488661647, 0.18672784287668764] ***
*** finished computation of 7 references, err: [Inf, 0.24933034820668398, 0.1916524009811692, 0.18735298488661647, 0.18672784287668764] ***
*** center 1: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 74, 12]]
** centroid: 2, normalized-entropy: 0.5830194167347007, [(2, 74), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 23, 0]]
** centroid: 3, normalized-entropy: 0.9134601452569628, [(1, 47), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [30, 35, 0]]
** centroid: 4, normalized-entropy: 0.9957274520849256, [(1, 30), (2, 35)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [15, 56, 0]]
** centroid: 5, normalized-entropy: 0.743898745288434, [(1, 15), (2, 56)]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [62, 8, 0]]
** centroid: 7, normalized-entropy: 0.5127091420308771, [(1, 62), (2, 8)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24817903101071714] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24817903101071714, 0.19862221270427108] ***
*** starting iteration: 2; err: [Inf, 0.24817903101071714, 0.19862221270427108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24817903101071714, 0.19862221270427108, 0.1920808936674148] ***
*** starting iteration: 3; err: [Inf, 0.24817903101071714, 0.19862221270427108, 0.1920808936674148] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24817903101071714, 0.19862221270427108, 0.1920808936674148, 0.19071744565293192] ***
*** starting iteration: 4; err: [Inf, 0.24817903101071714, 0.19862221270427108, 0.1920808936674148, 0.19071744565293192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24817903101071714, 0.19862221270427108, 0.1920808936674148, 0.19071744565293192, 0.19052114916592836] ***
*** finished computation of 7 references, err: [Inf, 0.24817903101071714, 0.19862221270427108, 0.1920808936674148, 0.19071744565293192, 0.19052114916592836] ***
*** center 1: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 46, 17]]
** centroid: 2, normalized-entropy: 0.8412367762002599, [(2, 46), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [76, 4, 0]]
** centroid: 3, normalized-entropy: 0.2863969571159561, [(1, 76), (2, 4)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [7, 75, 0]]
** centroid: 5, normalized-entropy: 0.42080948947668984, [(1, 7), (2, 75)]
*** center 6: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 56, 0]]
** centroid: 7, normalized-entropy: 0.45868581620054033, [(1, 6), (2, 56)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25569028564170004] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25569028564170004, 0.1905946611938998] ***
*** starting iteration: 2; err: [Inf, 0.25569028564170004, 0.1905946611938998] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25569028564170004, 0.1905946611938998, 0.1884269624836743] ***
*** starting iteration: 3; err: [Inf, 0.25569028564170004, 0.1905946611938998, 0.1884269624836743] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25569028564170004, 0.1905946611938998, 0.1884269624836743, 0.18815392054244875] ***
*** finished computation of 7 references, err: [Inf, 0.25569028564170004, 0.1905946611938998, 0.1884269624836743, 0.18815392054244875] ***
*** center 1: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [78, 12, 0]]
** centroid: 2, normalized-entropy: 0.5665095065529052, [(1, 78), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 27, 24]]
** centroid: 3, normalized-entropy: 0.9975025463691153, [(2, 27), (3, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [59, 20, 0]]
** centroid: 5, normalized-entropy: 0.8162554088088008, [(1, 59), (2, 20)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 57, 0]]
** centroid: 7, normalized-entropy: 0.21357981533827744, [(1, 2), (2, 57)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25617962759546936] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25617962759546936, 0.19164552332274615] ***
*** starting iteration: 2; err: [Inf, 0.25617962759546936, 0.19164552332274615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25617962759546936, 0.19164552332274615, 0.18889566334709526] ***
*** starting iteration: 3; err: [Inf, 0.25617962759546936, 0.19164552332274615, 0.18889566334709526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25617962759546936, 0.19164552332274615, 0.18889566334709526, 0.18817682585120202] ***
*** finished computation of 7 references, err: [Inf, 0.25617962759546936, 0.19164552332274615, 0.18889566334709526, 0.18817682585120202] ***
*** center 1: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 8, 0]]
** centroid: 2, normalized-entropy: 0.5032583347756457, [(1, 64), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 37, 22]]
** centroid: 3, normalized-entropy: 0.9528588097297789, [(2, 37), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 13, 0]]
** centroid: 5, normalized-entropy: 0.6652735227649414, [(1, 62), (2, 13)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 71, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23349404615536332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23349404615536332, 0.20044830643199385] ***
*** starting iteration: 2; err: [Inf, 0.23349404615536332, 0.20044830643199385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23349404615536332, 0.20044830643199385, 0.19624683605879545] ***
*** starting iteration: 3; err: [Inf, 0.23349404615536332, 0.20044830643199385, 0.19624683605879545] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23349404615536332, 0.20044830643199385, 0.19624683605879545, 0.19493736346252263] ***
*** starting iteration: 4; err: [Inf, 0.23349404615536332, 0.20044830643199385, 0.19624683605879545, 0.19493736346252263] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23349404615536332, 0.20044830643199385, 0.19624683605879545, 0.19493736346252263, 0.1943039660062641] ***
*** finished computation of 7 references, err: [Inf, 0.23349404615536332, 0.20044830643199385, 0.19624683605879545, 0.19493736346252263, 0.1943039660062641] ***
*** center 1: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 54, 15]]
** centroid: 2, normalized-entropy: 0.7553754125614286, [(2, 54), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [36, 9, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 36), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [65, 21, 0]]
** centroid: 4, normalized-entropy: 0.8019325020834525, [(1, 65), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 61, 0]]
** centroid: 5, normalized-entropy: 0.9067816913292788, [(1, 29), (2, 61)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 54, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [54, 5, 0]]
** centroid: 7, normalized-entropy: 0.4186843105268563, [(1, 54), (2, 5)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24222916508093476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24222916508093476, 0.19008638756163418] ***
*** starting iteration: 2; err: [Inf, 0.24222916508093476, 0.19008638756163418] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24222916508093476, 0.19008638756163418, 0.18532146876305342] ***
*** starting iteration: 3; err: [Inf, 0.24222916508093476, 0.19008638756163418, 0.18532146876305342] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24222916508093476, 0.19008638756163418, 0.18532146876305342, 0.18489710141718388] ***
*** finished computation of 7 references, err: [Inf, 0.24222916508093476, 0.19008638756163418, 0.18532146876305342, 0.18489710141718388] ***
*** center 1: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 59, 16]]
** centroid: 2, normalized-entropy: 0.7478061583312324, [(2, 59), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 8, 0]]
** centroid: 3, normalized-entropy: 0.5983474220910422, [(1, 47), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 26, 0]]
** centroid: 4, normalized-entropy: 0.834648285181383, [(1, 72), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 38, 0]]
** centroid: 5, normalized-entropy: 0.9989595114657399, [(1, 41), (2, 38)]
*** center 6: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 57, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22368239649385213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22368239649385213, 0.18293551522865892] ***
*** starting iteration: 2; err: [Inf, 0.22368239649385213, 0.18293551522865892] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22368239649385213, 0.18293551522865892, 0.17871698580682277] ***
*** starting iteration: 3; err: [Inf, 0.22368239649385213, 0.18293551522865892, 0.17871698580682277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22368239649385213, 0.18293551522865892, 0.17871698580682277, 0.17708077751100063] ***
*** starting iteration: 4; err: [Inf, 0.22368239649385213, 0.18293551522865892, 0.17871698580682277, 0.17708077751100063] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22368239649385213, 0.18293551522865892, 0.17871698580682277, 0.17708077751100063, 0.17603670107200742] ***
*** starting iteration: 5; err: [Inf, 0.22368239649385213, 0.18293551522865892, 0.17871698580682277, 0.17708077751100063, 0.17603670107200742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22368239649385213, 0.18293551522865892, 0.17871698580682277, 0.17708077751100063, 0.17603670107200742, 0.17573368373606355] ***
*** finished computation of 7 references, err: [Inf, 0.22368239649385213, 0.18293551522865892, 0.17871698580682277, 0.17708077751100063, 0.17603670107200742, 0.17573368373606355] ***
*** center 1: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 11, 0]]
** centroid: 2, normalized-entropy: 0.6619760641115651, [(1, 53), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 58, 9]]
** centroid: 3, normalized-entropy: 0.569190343735683, [(2, 58), (3, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 26, 0]]
** centroid: 4, normalized-entropy: 0.9054522631867892, [(1, 55), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [52, 19, 0]]
** centroid: 5, normalized-entropy: 0.8380078505079931, [(1, 52), (2, 19)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 68, 5]]
** centroid: 6, normalized-entropy: 0.3602750564216625, [(2, 68), (3, 5)]
*** center 7: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 377,3 => 33,1 => 590), Dict(2 => 350,3 => 32,1 => 618))
[ Info: ===== scores for single classifier: {"micro_f1":0.9469999999999998,"precision":0.947,"recall":0.947,"macro_recall":0.9261218985976267,"macro_f1":0.8880232520668985,"accuracy":0.947,"class_f1":{"2":0.926896551724138,"3":0.767123287671233,"1":0.9700499168053245},"class_precision":{"2":0.896,"3":0.6829268292682927,"1":0.9982876712328768},"class_recall":{"2":0.96,"3":0.875,"1":0.9433656957928802}}
[ Info: ===== scores for 1: {"micro_f1":0.951,"precision":0.951,"recall":0.951,"macro_recall":0.9496860070889198,"macro_f1":0.9311411012059364,"accuracy":0.951,"class_f1":{"2":0.9327846364883403,"3":0.8955223880597014,"1":0.9651162790697675},"class_precision":{"2":0.8970976253298153,"3":0.8571428571428571,"1":0.9914675767918089},"class_recall":{"2":0.9714285714285714,"3":0.9375,"1":0.9401294498381877}}
[ Info: ===== scores for 5: {"micro_f1":0.949,"precision":0.949,"recall":0.949,"macro_recall":0.9469552319309601,"macro_f1":0.9137878358646704,"accuracy":0.949,"class_f1":{"2":0.929460580912863,"3":0.8450704225352113,"1":0.9668325041459369},"class_precision":{"2":0.900804289544236,"3":0.7692307692307693,"1":0.9914965986394558},"class_recall":{"2":0.96,"3":0.9375,"1":0.9433656957928802}}
[ Info: ===== scores for 7: {"micro_f1":0.951,"precision":0.951,"recall":0.951,"macro_recall":0.9389827014948374,"macro_f1":0.9100932758280019,"accuracy":0.951,"class_f1":{"2":0.9324137931034483,"3":0.8285714285714286,"1":0.9692946058091286},"class_precision":{"2":0.9013333333333333,"3":0.7631578947368421,"1":0.9948892674616695},"class_recall":{"2":0.9657142857142857,"3":0.90625,"1":0.9449838187702265}}
[ Info: ===== scores for 9: {"micro_f1":0.951,"precision":0.951,"recall":0.951,"macro_recall":0.948859993835722,"macro_f1":0.9153075846148799,"accuracy":0.951,"class_f1":{"2":0.9324137931034483,"3":0.8450704225352113,"1":0.96843853820598},"class_precision":{"2":0.9013333333333333,"3":0.7692307692307693,"1":0.9948805460750854},"class_recall":{"2":0.9657142857142857,"3":0.9375,"1":0.9433656957928802}}
[ Info: ===== scores for 11: {"micro_f1":0.951,"precision":0.951,"recall":0.951,"macro_recall":0.9480339805825242,"macro_f1":0.9152174346147612,"accuracy":0.951,"class_f1":{"2":0.9320388349514563,"3":0.8450704225352113,"1":0.9685430463576159},"class_precision":{"2":0.9056603773584906,"3":0.7692307692307693,"1":0.9915254237288136},"class_recall":{"2":0.96,"3":0.9375,"1":0.9466019417475728}}
(score = 0.951, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.951, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.947, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.947, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.948, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.948, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.949, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.949, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.949, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.949, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.946, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.946, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.951, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.951, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.95, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.95, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.951,"k":1,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.951,"precision":0.951,"recall":0.951,"macro_recall":0.9496860070889198,"macro_f1":0.9311411012059364,"accuracy":0.951,"class_f1":{"2":0.9327846364883403,"3":0.8955223880597014,"1":0.9651162790697675},"class_precision":{"2":0.8970976253298153,"3":0.8571428571428571,"1":0.9914675767918089},"class_recall":{"2":0.9714285714285714,"3":0.9375,"1":0.9401294498381877}}
Test Summary: | Pass  Total
AKNC          |    8      8
[316, 2, 1, 8, 2, 3, 5, 1, 4, 4, 6, 5, 2, 1, 1, 1, 5, 1, 5, 46, 8, 1, 2, 3, 2, 2, 3, 3, 55, 5, 50, 5, 3, 21, 20, 24, 51, 30, 12, 1, 7, 9, 7, 9, 6, 6, 13, 1, 7, 3, 17, 21, 37, 3, 3, 8, 15, 28, 3, 6, 5, 3, 13, 16, 2, 8, 8, 14, 5, 17, 13, 4, 9, 13, 12, 171, 15, 41, 13, 3, 3, 7, 2, 201, 1, 17, 2, 41, 2, 29, 5, 1, 48, 5, 17, 2, 1, 10, 10, 7, 2, 30, 20, 19, 18, 33, 122, 26, 141, 12, 18, 4, 49, 57, 4, 3, 32, 23, 7, 10, 83, 17, 20, 17, 29, 7, 36, 32, 15, 7, 12, 6, 4, 34, 40, 15, 5, 71, 11, 30, 7, 48, 194, 1, 11, 17, 35, 10, 15, 27, 7, 3, 4, 1345, 69, 27, 2, 109, 7, 144, 66, 35, 18, 2, 16, 11, 24, 19, 2, 3, 5, 4, 49, 395, 52, 21, 13, 13, 1, 21, 13, 12, 41, 8, 13, 90, 17, 8, 30, 25, 36, 20, 5, 5, 17, 51, 34, 12, 38, 21, 18, 25, 20, 6, 57, 73, 197, 62, 3, 23, 32, 4, 10, 23, 22, 9, 9, 52, 18, 49, 6, 13, 121, 22, 5, 13, 6, 15, 86, 65, 51, 12, 29, 7, 86, 12, 44, 35, 17, 32, 18, 43, 51, 22, 28, 13, 55, 21, 12, 5, 230, 19, 43, 15, 35, 14, 5, 64, 42, 20, 88, 42, 3, 3, 79, 10, 23, 50, 43, 14, 139, 78, 23, 12, 37, 25, 4, 30, 103, 16, 63, 23, 15, 46, 2, 19, 30, 6, 27, 8, 12, 42, 9, 21, 30, 394, 19, 45, 15, 14]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6509999999999998, speedup = 0.2764074452085056, eval_ratio = 0.09831000000000001)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.42249193948412717,"recall":0.41232638888888906,"f1":null,"seconds":0.00024717673659324646,"exhaustive_search_seconds":0.00038502365350723267,"evaluations":620.265625,"distances_sum":1712.5212044902403}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5807291666666666,"recall":0.5807291666666666,"f1":0.5807291666666666,"seconds":0.0003894492983818054,"exhaustive_search_seconds":0.00038502365350723267,"evaluations":831.703125,"distances_sum":1650.617905671068}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6866319444444441,"recall":0.6866319444444441,"f1":0.6866319444444441,"seconds":0.0005220919847488403,"exhaustive_search_seconds":0.00038502365350723267,"evaluations":1013.2421875,"distances_sum":1597.0761561160996}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7630208333333333,"recall":0.7630208333333333,"f1":0.7630208333333333,"seconds":0.0007800683379173279,"exhaustive_search_seconds":0.00038502365350723267,"evaluations":1130.1875,"distances_sum":1568.8567936288032}
KCenters.DeloneInvIndex> reached performance {"precision":0.8003472222222219,"recall":0.8003472222222219,"f1":0.8003472222222219,"seconds":0.0006860923022031784,"exhaustive_search_seconds":0.00038502365350723267,"evaluations":1231.7890625,"distances_sum":1555.7820533465965}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8030000000000002, speedup = 0.5530967181502862, eval_ratio = 0.134718)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
