Julia Version 1.5.0-DEV.255
Commit dd426ba69b (2020-02-09 18:28 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed KCenters ──────────────────── v0.1.11
  Installed Compat ────────────────────── v3.4.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed DataStructures ────────────── v0.17.9
  Installed CategoricalArrays ─────────── v0.7.7
  Installed JSON ──────────────────────── v0.21.0
  Installed Tables ────────────────────── v0.2.11
  Installed InvertedIndices ───────────── v1.0.0
  Installed Missings ──────────────────── v0.4.3
  Installed Reexport ──────────────────── v0.2.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed MLDataUtils ───────────────── v0.5.0
  Installed MLDataPattern ─────────────── v0.5.0
  Installed StatsBase ─────────────────── v0.32.0
  Installed Parsers ───────────────────── v0.3.11
  Installed TableTraits ───────────────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed SimilaritySearch ──────────── v0.3.18
  Installed DataValueInterfaces ───────── v1.0.0
  Installed DataAPI ───────────────────── v1.1.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed DataFrames ────────────────── v0.20.0
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.1.11
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.4.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.1.11
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.11
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.18
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_LBTvsx/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.4.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.0
  [864edb3b] DataStructures v0.17.9
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.1.11
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.11
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.18
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v0.2.11
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
[ Info: 140.90999999999994
[ Info: 74.95000000000006
[ Info: 44.44999999999999
[ Info: 23.220000000000002
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 267.50999838966254
[ Info: 215.71999828423913
[ Info: 195.99000008183336
[ Info: 76.54000116754553
Test Summary:        |
Clustering with dnet | No tests
inertia(cfft.distances) = 18.713468711276757
inertia(cdnet.distances) = 23.900422176711107
inertia(crand.distances) = 21.748035652731357
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.8475024975024982,"seconds":5.9138983488082886e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.3984375,"distances_sum":2096.5167338659794}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5693359375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5693359375,"f1":0.7096663752913759,"seconds":4.7888606786727905e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":7.59375,"distances_sum":1511.6890726205384}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7451171875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7451171875,"f1":0.8475024975024982,"seconds":5.9138983488082886e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.3984375,"distances_sum":2096.5167338659794}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9700148809523816,"seconds":6.3497573137283325e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.9296875,"distances_sum":2987.5410298753804}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8494312978687988,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.3984375,"distances_sum":2126.263913931639}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9335622710622717,"seconds":6.064772605895996e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.7734375,"distances_sum":2680.412933933447}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.867579816017317,"seconds":5.543231964111328e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.421875,"distances_sum":2222.5977877155556}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9700148809523816,"seconds":6.3497573137283325e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.9296875,"distances_sum":2987.5410298753804}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.972825091575092,"seconds":6.284564733505249e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.9453125,"distances_sum":2993.1387039439246}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9747252747252751,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.9296875,"distances_sum":3026.9378430664433}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9747252747252751,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.9296875,"distances_sum":3026.9378430664433}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9747252747252751,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.9296875,"distances_sum":3026.9378430664433}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8501873126873135,"seconds":5.591660737991333e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.234375,"distances_sum":1926.3164360022556}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.75390625,"f1":0.8501873126873135,"seconds":5.591660737991333e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.234375,"distances_sum":1926.3164360022556}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9034174159174166,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.6015625,"distances_sum":2203.78070064124}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9273039460539467,"seconds":9.177811443805695e-5,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.6953125,"distances_sum":2359.9758428055948}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.948057151182152,"seconds":3.779307007789612e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9140625,"distances_sum":2515.1593336808446}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.948057151182152,"seconds":3.779307007789612e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9140625,"distances_sum":2515.1593336808446}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9691620879120885,"seconds":3.8016587495803833e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9140625,"distances_sum":2692.3564799565306}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9809523809523812,"seconds":3.773719072341919e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9609375,"distances_sum":2769.9298101457703}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9767513736263737,"seconds":3.917142748832703e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9375,"distances_sum":2753.675655186231}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.966277472527473,"seconds":3.807246685028076e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.921875,"distances_sum":2652.8190703587084}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9640682234432238,"seconds":3.7420541048049927e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9296875,"distances_sum":2640.0163687857403}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96484375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9809523809523812,"seconds":3.773719072341919e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9609375,"distances_sum":2769.9298101457703}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96484375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9809523809523812,"seconds":3.773719072341919e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9609375,"distances_sum":2769.9298101457703}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7937718531468538,"seconds":3.0156224966049194e-6,"exhaustive_search_seconds":9.462237358093262e-7,"evaluations":7.75,"distances_sum":1723.052463085417}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.673828125,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.673828125,"f1":0.7937718531468538,"seconds":3.0156224966049194e-6,"exhaustive_search_seconds":9.462237358093262e-7,"evaluations":7.75,"distances_sum":1723.052463085417}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9327870046620053,"seconds":3.430992364883423e-6,"exhaustive_search_seconds":9.462237358093262e-7,"evaluations":8.7265625,"distances_sum":2366.802819069803}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8837890625,"state":{"ssize":8,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9327870046620053,"seconds":3.430992364883423e-6,"exhaustive_search_seconds":9.462237358093262e-7,"evaluations":8.7265625,"distances_sum":2366.802819069803}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.946955128205129,"seconds":3.591179847717285e-6,"exhaustive_search_seconds":9.462237358093262e-7,"evaluations":8.875,"distances_sum":2440.2999749656733}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9072265625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.946955128205129,"seconds":3.591179847717285e-6,"exhaustive_search_seconds":9.462237358093262e-7,"evaluations":8.875,"distances_sum":2440.2999749656733}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9072265625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.946955128205129,"seconds":3.591179847717285e-6,"exhaustive_search_seconds":9.462237358093262e-7,"evaluations":8.875,"distances_sum":2440.2999749656733}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1650390625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1650390625,"f1":null,"seconds":1.8794089555740356e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":4.2421875,"distances_sum":432.8245888519151}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5322265625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5322265625,"f1":null,"seconds":2.8945505619049072e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":6.7734375,"distances_sum":1311.423156306201}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.34375, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.34375,"f1":null,"seconds":2.2649765014648438e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":5.4453125,"distances_sum":856.746744600436}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5322265625,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5322265625,"f1":null,"seconds":2.8945505619049072e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":6.7734375,"distances_sum":1311.423156306201}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.53515625, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.53515625,"f1":null,"seconds":2.7175992727279663e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":7.0,"distances_sum":1297.133295275518}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8512227355977364,"seconds":3.6600977182388306e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":8.2109375,"distances_sum":1906.1144794095826}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.64453125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.64453125,"f1":0.7711822899322907,"seconds":3.0528753995895386e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":7.5078125,"distances_sum":1642.9952516008611}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.623046875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.623046875,"f1":0.7536134004884011,"seconds":3.0454248189926147e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":7.4140625,"distances_sum":1584.6626720870343}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.751953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.751953125,"f1":0.8512227355977364,"seconds":3.6600977182388306e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":8.2109375,"distances_sum":1906.1144794095826}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9314674908424915,"seconds":3.885477781295776e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":8.6796875,"distances_sum":2333.7171418918047}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9551968864468868,"seconds":3.822147846221924e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":8.828125,"distances_sum":2449.254672074989}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9313592657342663,"seconds":3.885477781295776e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":8.734375,"distances_sum":2329.675333162225}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9480883699633703,"seconds":4.079192876815796e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":8.7109375,"distances_sum":2443.473048474283}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8501129079254087,"seconds":3.384426236152649e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":8.1953125,"distances_sum":1930.0603451143575}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.875,"f1":0.9262966200466206,"seconds":3.9711594581604e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":8.6015625,"distances_sum":2293.0951180874868}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8876982392607399,"seconds":3.5446137189865112e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":8.4453125,"distances_sum":2109.924419458399}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9551968864468868,"seconds":3.822147846221924e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":8.828125,"distances_sum":2449.254672074989}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.921875,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9551968864468868,"seconds":3.822147846221924e-6,"exhaustive_search_seconds":1.0542571544647217e-6,"evaluations":8.828125,"distances_sum":2449.254672074989}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1923828125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1923828125,"f1":null,"seconds":2.0973384380340576e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":5.875,"distances_sum":456.7595340009958}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2109375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2109375,"f1":null,"seconds":2.6617199182510376e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":5.890625,"distances_sum":523.23227887765}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2109375,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.2109375,"f1":null,"seconds":2.6617199182510376e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":5.890625,"distances_sum":523.23227887765}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6962890625, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6962890625,"f1":0.8091280247530256,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":7.828125,"distances_sum":1660.2066343608017}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5908203125, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5908203125,"f1":0.7273965617715624,"seconds":5.1800161600112915e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":7.296875,"distances_sum":1362.0565775549992}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4423828125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4423828125,"f1":null,"seconds":4.7013163566589355e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":6.546875,"distances_sum":967.0150468537169}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.611328125, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.611328125,"f1":0.7438254453879461,"seconds":5.055218935012817e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":7.21875,"distances_sum":1413.6371916705696}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7939453125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7939453125,"f1":0.8786208583083592,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":8.234375,"distances_sum":1968.6338379823628}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5947265625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5947265625,"f1":null,"seconds":5.252659320831299e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":7.2265625,"distances_sum":1364.7686685850897}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7939453125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7939453125,"f1":0.8786208583083592,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":8.234375,"distances_sum":1968.6338379823628}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9402706668331675,"seconds":7.1339309215545654e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":8.7265625,"distances_sum":2414.9059250682058}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9546359890109892,"seconds":7.199123501777649e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":8.828125,"distances_sum":2462.6760170827906}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9611263736263742,"seconds":7.368624210357666e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":8.8515625,"distances_sum":2532.8599445408336}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8993449259074268,"seconds":6.666406989097595e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":8.6171875,"distances_sum":2054.8601659141073}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9273268398268404,"seconds":6.971880793571472e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":8.6484375,"distances_sum":2252.697519536424}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8996227730602739,"seconds":6.619840860366821e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":8.625,"distances_sum":2071.7351439925783}, best_list's length: 15, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9611263736263742,"seconds":7.368624210357666e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":8.8515625,"distances_sum":2532.8599445408336}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9296875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9611263736263742,"seconds":7.368624210357666e-6,"exhaustive_search_seconds":9.927898645401e-7,"evaluations":8.8515625,"distances_sum":2532.8599445408336}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.866861784049285,"seconds":6.2212347984313965e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.265625,"distances_sum":1910.4614795423824}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5810546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5810546875,"f1":0.7205730033855041,"seconds":5.107372999191284e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":7.109375,"distances_sum":1331.344866018604}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.77734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.77734375,"f1":0.866861784049285,"seconds":6.2212347984313965e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.265625,"distances_sum":1910.4614795423824}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9534829753579757,"seconds":7.329508662223816e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.8984375,"distances_sum":2478.0998400829803}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8046875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8046875,"f1":0.8827557858807866,"seconds":6.709247827529907e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.671875,"distances_sum":2001.10476231882}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9411546786546794,"seconds":7.484108209609985e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.921875,"distances_sum":2360.9209166570568}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9534829753579757,"seconds":7.329508662223816e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.8984375,"distances_sum":2478.0998400829803}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9735519688644694,"seconds":4.215165972709656e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.9765625,"distances_sum":2630.1857823378364}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.964663461538462,"seconds":4.319474101066589e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.96875,"distances_sum":2561.436957325457}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9558639277389281,"seconds":4.410743713378906e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.921875,"distances_sum":2485.5849070240724}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.97342032967033,"seconds":4.177913069725037e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.9609375,"distances_sum":2641.3097844829845}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9735519688644694,"seconds":4.215165972709656e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.9765625,"distances_sum":2630.1857823378364}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9735519688644694,"seconds":4.215165972709656e-6,"exhaustive_search_seconds":1.7099082469940186e-6,"evaluations":8.9765625,"distances_sum":2630.1857823378364}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.5,"f1":null,"seconds":4.975125193595886e-6,"exhaustive_search_seconds":1.8347054719924927e-6,"evaluations":6.1328125,"distances_sum":1027.510903942041}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5,"state":{"ssize":4,"bsize":3},"perf":{"precision":null,"recall":0.5,"f1":null,"seconds":4.975125193595886e-6,"exhaustive_search_seconds":1.8347054719924927e-6,"evaluations":6.1328125,"distances_sum":1027.510903942041}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6357421875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6357421875,"f1":0.763486340048841,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.8347054719924927e-6,"evaluations":7.0703125,"distances_sum":1380.524544570123}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5166015625, conf: {"ssize":7,"bsize":3}, perf: {"precision":1.0,"recall":0.5166015625,"f1":0.6603497197247202,"seconds":5.258247256278992e-6,"exhaustive_search_seconds":1.8347054719924927e-6,"evaluations":6.15625,"distances_sum":1149.9607844907005}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5166015625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5166015625,"f1":null,"seconds":5.0496309995651245e-6,"exhaustive_search_seconds":1.8347054719924927e-6,"evaluations":6.0390625,"distances_sum":1082.206297060348}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5263671875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5263671875,"f1":0.6740790459540466,"seconds":5.0496309995651245e-6,"exhaustive_search_seconds":1.8347054719924927e-6,"evaluations":6.2421875,"distances_sum":1095.2174164037865}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.529296875, conf: {"ssize":8,"bsize":3}, perf: {"precision":1.0,"recall":0.529296875,"f1":0.6749590687090691,"seconds":5.356967449188232e-6,"exhaustive_search_seconds":1.8347054719924927e-6,"evaluations":6.1484375,"distances_sum":1142.3831213429216}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6357421875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6357421875,"f1":0.763486340048841,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.8347054719924927e-6,"evaluations":7.0703125,"distances_sum":1380.524544570123}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9216148434898442,"seconds":7.038936018943787e-6,"exhaustive_search_seconds":1.8347054719924927e-6,"evaluations":8.5390625,"distances_sum":2119.5055413285295}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":12,"bsize":7}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9215149433899442,"seconds":6.232410669326782e-6,"exhaustive_search_seconds":1.8347054719924927e-6,"evaluations":8.53125,"distances_sum":2136.860108734117}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9387305402930407,"seconds":6.357207894325256e-6,"exhaustive_search_seconds":1.8347054719924927e-6,"evaluations":8.65625,"distances_sum":2202.361425769815}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.9139886155511162,"seconds":3.460794687271118e-6,"exhaustive_search_seconds":1.8347054719924927e-6,"evaluations":8.4375,"distances_sum":2071.4109939764808}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9387305402930407,"seconds":6.357207894325256e-6,"exhaustive_search_seconds":1.8347054719924927e-6,"evaluations":8.65625,"distances_sum":2202.361425769815}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.892578125,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9387305402930407,"seconds":6.357207894325256e-6,"exhaustive_search_seconds":1.8347054719924927e-6,"evaluations":8.65625,"distances_sum":2202.361425769815}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.189453125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.189453125,"f1":null,"seconds":1.987442374229431e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":5.5546875,"distances_sum":410.0840177408055}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.189453125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.189453125,"f1":null,"seconds":1.8458813428878784e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":5.40625,"distances_sum":444.1685550348863}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.189453125,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.189453125,"f1":null,"seconds":1.987442374229431e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":5.5546875,"distances_sum":410.0840177408055}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.189453125,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.189453125,"f1":null,"seconds":1.987442374229431e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":5.5546875,"distances_sum":410.0840177408055}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.541015625, conf: {"ssize":1,"bsize":3}, perf: {"precision":0.9742187499999999,"recall":0.541015625,"f1":0.6807388791763797,"seconds":2.7492642402648926e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":7.90625,"distances_sum":1274.8643844651458}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3564453125, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3564453125,"f1":null,"seconds":2.4493783712387085e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":6.5703125,"distances_sum":748.8180507683412}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":3,"bsize":5}, perf: {"precision":0.9839285714285716,"recall":0.75,"f1":0.8440335705960711,"seconds":3.3620744943618774e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.2734375,"distances_sum":1889.672926944305}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75,"state":{"ssize":3,"bsize":5},"perf":{"precision":0.9839285714285716,"recall":0.75,"f1":0.8440335705960711,"seconds":3.3620744943618774e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.2734375,"distances_sum":1889.672926944305}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":7,"bsize":5}, perf: {"precision":0.985063244047619,"recall":0.763671875,"f1":0.8550294757326014,"seconds":3.242865204811096e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.1328125,"distances_sum":1952.4142036172348}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":2,"bsize":7}, perf: {"precision":0.9826729910714286,"recall":0.8828125,"f1":0.9252842860264736,"seconds":3.6600977182388306e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.90625,"distances_sum":2487.7289445694864}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8828125,"state":{"ssize":2,"bsize":7},"perf":{"precision":0.9826729910714286,"recall":0.8828125,"f1":0.9252842860264736,"seconds":3.6600977182388306e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.90625,"distances_sum":2487.7289445694864}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":0.9835100446428572,"recall":0.9296875,"f1":0.9530384329212456,"seconds":3.8016587495803833e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.9140625,"distances_sum":2751.402888395601}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":3,"bsize":8}, perf: {"precision":0.9878162202380952,"recall":0.9111328125,"f1":0.9437574144605398,"seconds":3.851950168609619e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.9296875,"distances_sum":2631.4699654824562}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":11}, perf: {"precision":0.9892578125,"recall":0.94140625,"f1":0.9627525469322347,"seconds":4.366040229797363e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.9375,"distances_sum":2803.2288131194437}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":8,"bsize":8}, perf: {"precision":0.9847191220238094,"recall":0.9130859375,"f1":0.9435105909715287,"seconds":3.896653652191162e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.890625,"distances_sum":2663.3352440100803}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":6,"bsize":8}, perf: {"precision":0.9830915178571429,"recall":0.8994140625,"f1":0.9360419528388282,"seconds":3.729015588760376e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.8984375,"distances_sum":2590.495327675944}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":1,"bsize":11},"perf":{"precision":0.9892578125,"recall":0.94140625,"f1":0.9627525469322347,"seconds":4.366040229797363e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.9375,"distances_sum":2803.2288131194437}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":1,"bsize":11},"perf":{"precision":0.9892578125,"recall":0.94140625,"f1":0.9627525469322347,"seconds":4.366040229797363e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.9375,"distances_sum":2803.2288131194437}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2294921875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2294921875,"f1":null,"seconds":2.0228326320648193e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":6.109375,"distances_sum":428.31680810618826}}, beam: 1, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2294921875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2294921875,"f1":null,"seconds":2.0228326320648193e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":6.109375,"distances_sum":428.31680810618826}}, n: 9
inertia(cfft.distances) = 19.492690657598313
inertia(cdnet.distances) = 350.39371397083613
inertia(crand.distances) = 91.01909878116544
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8355555555555556
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8622222222222223
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8911111111111111
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8822222222222221
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9022222222222221
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8799999999999999
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8822222222222221
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8888888888888888
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8555555555555555
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9022222222222221
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9066666666666666
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8799999999999999
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9244444444444445
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9133333333333332
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8622222222222223
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.94
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8711111111111111
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9311111111111111
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.88
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9044444444444443
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8866666666666667
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8933333333333332
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8444444444444444
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX===== rocchio like>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX==== clustering>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
nc.class_map = [1, 3, 3, 2, 3, 2, 1, 2, 3, 3, 3, 3, 2, 3, 3, 1, 1, 2, 3, 3, 2]
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 6, 15]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(2, 6), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 8: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 10, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 2, 1, 3, 2, 3, 3, 2]
acc = 0.94
*** finished computation of 12 references, err: [Inf, 0.5628811813394229] ***
*** center 1: selecting labels [1] (freq >= 1) [from [43, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 7]]
** centroid: 9, normalized-entropy: 0.8812908992306927, [(2, 3), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 15 centroids; started with 12
acc = 0.9333333333333333
Test Summary:   | Pass  Total
NearestCentroid |   10     10
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.5939896339178086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5939896339178086, 0.4654827354848385] ***
*** finished computation of 7 references, err: [Inf, 0.5939896339178086, 0.4654827354848385] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 2, 3]]
** centroid: 1, normalized-entropy: 0.9709505944546688, [(2, 2), (3, 3)]
*** center 2: selecting labels [1] (freq >= 2) [from [24, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 3, 30]]
** centroid: 5, normalized-entropy: 0.43949698692151346, [(2, 3), (3, 30)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 11, 1]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.8702931535243988] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8702931535243988, 0.5276273061335087] ***
*** finished computation of 3 references, err: [Inf, 0.8702931535243988, 0.5276273061335087] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 20]]
** centroid: 1, normalized-entropy: 0.5586293734521991, [(2, 3), (3, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 33, 11]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 33), (3, 11)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8146562914550305] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8146562914550305, 0.5522650618851185] ***
*** finished computation of 3 references, err: [Inf, 0.8146562914550305, 0.5522650618851185] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 11, 34]]
** centroid: 1, normalized-entropy: 0.80235344282919, [(2, 11), (3, 34)]
*** center 2: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 23, 1]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.49726396530866623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.49726396530866623, 0.37435959100723265] ***
*** finished computation of 7 references, err: [Inf, 0.49726396530866623, 0.37435959100723265] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 14, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 13]]
*** center 4: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 17, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 2, 6]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(2, 2), (3, 6)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 3, 12]]
** centroid: 7, normalized-entropy: 0.7219280948873623, [(2, 3), (3, 12)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.47908551290631296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.47908551290631296, 0.40888418912887575] ***
*** finished computation of 7 references, err: [Inf, 0.47908551290631296, 0.40888418912887575] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 8, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 13, 1]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 12]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 1, 15]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 12, 2]]
** centroid: 5, normalized-entropy: 0.5916727785823274, [(2, 12), (3, 2)]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 7: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6157176868617534] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6157176868617534, 0.4910141539573669] ***
*** starting iteration: 2; err: [Inf, 0.6157176868617534, 0.4910141539573669] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6157176868617534, 0.4910141539573669, 0.4770888292789459] ***
*** starting iteration: 3; err: [Inf, 0.6157176868617534, 0.4910141539573669, 0.4770888292789459] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6157176868617534, 0.4910141539573669, 0.4770888292789459, 0.469426209256053] ***
*** starting iteration: 4; err: [Inf, 0.6157176868617534, 0.4910141539573669, 0.4770888292789459, 0.469426209256053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6157176868617534, 0.4910141539573669, 0.4770888292789459, 0.469426209256053, 0.4680650382488966] ***
*** starting iteration: 5; err: [Inf, 0.6157176868617534, 0.4910141539573669, 0.4770888292789459, 0.469426209256053, 0.4680650382488966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6157176868617534, 0.4910141539573669, 0.4770888292789459, 0.469426209256053, 0.4680650382488966, 0.4679854981601238] ***
*** finished computation of 7 references, err: [Inf, 0.6157176868617534, 0.4910141539573669, 0.4770888292789459, 0.469426209256053, 0.4680650382488966, 0.4679854981601238] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 19, 3]]
** centroid: 1, normalized-entropy: 0.5746356978376794, [(2, 19), (3, 3)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 3, 22]]
** centroid: 4, normalized-entropy: 0.5293608652873645, [(2, 3), (3, 22)]
*** center 5: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7210793852806091] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7210793852806091, 0.5206975965201854] ***
*** starting iteration: 2; err: [Inf, 0.7210793852806091, 0.5206975965201854] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7210793852806091, 0.5206975965201854, 0.5171997561305761] ***
*** starting iteration: 3; err: [Inf, 0.7210793852806091, 0.5206975965201854, 0.5171997561305761] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7210793852806091, 0.5206975965201854, 0.5171997561305761, 0.5162228825688362] ***
*** finished computation of 7 references, err: [Inf, 0.7210793852806091, 0.5206975965201854, 0.5171997561305761, 0.5162228825688362] ***
*** center 1: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 34, 11]]
** centroid: 2, normalized-entropy: 0.80235344282919, [(2, 34), (3, 11)]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 4: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 2, 13]]
** centroid: 5, normalized-entropy: 0.5665095065529052, [(2, 2), (3, 13)]
*** center 6: selecting labels [1] (freq >= 1) [from [6, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5589246338605881] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5589246338605881, 0.4779320781305432] ***
*** starting iteration: 2; err: [Inf, 0.5589246338605881, 0.4779320781305432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5589246338605881, 0.4779320781305432, 0.4641825217753649] ***
*** starting iteration: 3; err: [Inf, 0.5589246338605881, 0.4779320781305432, 0.4641825217753649] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5589246338605881, 0.4779320781305432, 0.4641825217753649, 0.45618749685585497] ***
*** starting iteration: 4; err: [Inf, 0.5589246338605881, 0.4779320781305432, 0.4641825217753649, 0.45618749685585497] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5589246338605881, 0.4779320781305432, 0.4641825217753649, 0.45618749685585497, 0.4539765604585409] ***
*** starting iteration: 5; err: [Inf, 0.5589246338605881, 0.4779320781305432, 0.4641825217753649, 0.45618749685585497, 0.4539765604585409] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5589246338605881, 0.4779320781305432, 0.4641825217753649, 0.45618749685585497, 0.4539765604585409, 0.4539765604585409] ***
*** finished computation of 7 references, err: [Inf, 0.5589246338605881, 0.4779320781305432, 0.4641825217753649, 0.45618749685585497, 0.4539765604585409, 0.4539765604585409] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 18]]
** centroid: 2, normalized-entropy: 0.46899559358928133, [(2, 2), (3, 18)]
*** center 3: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 4, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 4, 8]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(2, 4), (3, 8)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 7: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.8349836692214012] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8349836692214012, 0.6667613855004311] ***
*** starting iteration: 2; err: [Inf, 0.8349836692214012, 0.6667613855004311] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8349836692214012, 0.6667613855004311, 0.6541684532165527] ***
*** starting iteration: 3; err: [Inf, 0.8349836692214012, 0.6667613855004311, 0.6541684532165527] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8349836692214012, 0.6667613855004311, 0.6541684532165527, 0.6514845356345177] ***
*** finished computation of 3 references, err: [Inf, 0.8349836692214012, 0.6667613855004311, 0.6541684532165527, 0.6514845356345177] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 8, 32]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(2, 8), (3, 32)]
*** center 2: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 22, 2]]
** centroid: 3, normalized-entropy: 0.4138168503036336, [(2, 22), (3, 2)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.5349262471497058] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5349262471497058, 0.8530483651161194] ***
*** starting iteration: 2; err: [Inf, 1.5349262471497058, 0.8530483651161194] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5349262471497058, 0.8530483651161194, 0.6846673603355885] ***
*** starting iteration: 3; err: [Inf, 1.5349262471497058, 0.8530483651161194, 0.6846673603355885] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5349262471497058, 0.8530483651161194, 0.6846673603355885, 0.6503765524923801] ***
*** finished computation of 3 references, err: [Inf, 1.5349262471497058, 0.8530483651161194, 0.6846673603355885, 0.6503765524923801] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 35, 15]]
** centroid: 1, normalized-entropy: 0.8812908992306927, [(2, 35), (3, 15)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 1, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9549892275035381] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9549892275035381, 0.8750735744461418] ***
*** starting iteration: 2; err: [Inf, 0.9549892275035381, 0.8750735744461418] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9549892275035381, 0.8750735744461418, 0.8724567454308272] ***
*** starting iteration: 3; err: [Inf, 0.9549892275035381, 0.8750735744461418, 0.8724567454308272] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9549892275035381, 0.8750735744461418, 0.8724567454308272, 0.8142778607457877] ***
*** finished computation of 3 references, err: [Inf, 0.9549892275035381, 0.8750735744461418, 0.8724567454308272, 0.8142778607457877] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 24, 35]]
** centroid: 1, normalized-entropy: 0.9747785474909672, [(2, 24), (3, 35)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 10, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5123956643044949] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5123956643044949, 0.3976989208161831] ***
*** finished computation of 7 references, err: [Inf, 0.5123956643044949, 0.3976989208161831] ***
*** center 1: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 15, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 22]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 4, 11]]
** centroid: 4, normalized-entropy: 0.8366407419411671, [(2, 4), (3, 11)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 4, 1]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.49692141234874726] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.49692141234874726, 0.41066536150872707] ***
*** finished computation of 7 references, err: [Inf, 0.49692141234874726, 0.41066536150872707] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 20, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 5, 10]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 5), (3, 10)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 13]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 11, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.3515319752693176] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.3515319752693176, 0.8629852721095085] ***
*** finished computation of 7 references, err: [Inf, 1.3515319752693176, 0.8629852721095085] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [31, 9, 0]]
** centroid: 2, normalized-entropy: 0.7691928290130138, [(1, 31), (2, 9)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 10]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 23, 8]]
** centroid: 4, normalized-entropy: 0.8238116333123173, [(2, 23), (3, 8)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 2, 6]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 2), (3, 6)]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7652347898483276] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7652347898483276, 0.680282786861062] ***
*** finished computation of 3 references, err: [Inf, 0.7652347898483276, 0.680282786861062] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [14, 3, 0]]
** centroid: 1, normalized-entropy: 0.6722948170756378, [(1, 14), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 27, 34]]
** centroid: 2, normalized-entropy: 0.9904799742690307, [(2, 27), (3, 34)]
*** center 3: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.5862031450867653] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5862031450867653, 1.061419930756092] ***
*** finished computation of 3 references, err: [Inf, 1.5862031450867653, 1.061419930756092] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [33, 12, 0]]
** centroid: 2, normalized-entropy: 0.8366407419411671, [(1, 33), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 24, 18]]
** centroid: 3, normalized-entropy: 0.9852281360342514, [(2, 24), (3, 18)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.854309743642807] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.854309743642807, 0.5504308296740055] ***
*** finished computation of 3 references, err: [Inf, 0.854309743642807, 0.5504308296740055] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 32, 8]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(2, 32), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 27]]
** centroid: 3, normalized-entropy: 0.36205125173399805, [(2, 2), (3, 27)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.7447153270244598] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7447153270244598, 0.9869056738913059] ***
*** starting iteration: 2; err: [Inf, 1.7447153270244598, 0.9869056738913059] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7447153270244598, 0.9869056738913059, 0.5720523644983768] ***
*** starting iteration: 3; err: [Inf, 1.7447153270244598, 0.9869056738913059, 0.5720523644983768] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7447153270244598, 0.9869056738913059, 0.5720523644983768, 0.5516498611867428] ***
*** finished computation of 3 references, err: [Inf, 1.7447153270244598, 0.9869056738913059, 0.5720523644983768, 0.5516498611867428] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 25]]
*** center 2: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 30, 9]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(2, 30), (3, 9)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.658316600471735] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.658316600471735, 0.5319890125468373] ***
*** starting iteration: 2; err: [Inf, 0.658316600471735, 0.5319890125468373] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.658316600471735, 0.5319890125468373, 0.5265003599226474] ***
*** starting iteration: 3; err: [Inf, 0.658316600471735, 0.5319890125468373, 0.5265003599226474] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.658316600471735, 0.5319890125468373, 0.5265003599226474, 0.525913570523262] ***
*** finished computation of 3 references, err: [Inf, 0.658316600471735, 0.5319890125468373, 0.5265003599226474, 0.525913570523262] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 20]]
** centroid: 1, normalized-entropy: 0.5586293734521991, [(2, 3), (3, 20)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 33, 11]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(2, 33), (3, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.172312295883894] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.172312295883894, 0.7814809088408947] ***
*** starting iteration: 2; err: [Inf, 1.172312295883894, 0.7814809088408947] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.172312295883894, 0.7814809088408947, 0.5997234523296356] ***
*** starting iteration: 3; err: [Inf, 1.172312295883894, 0.7814809088408947, 0.5997234523296356] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.172312295883894, 0.7814809088408947, 0.5997234523296356, 0.5532141333073377] ***
*** finished computation of 3 references, err: [Inf, 1.172312295883894, 0.7814809088408947, 0.5997234523296356, 0.5532141333073377] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 2, 27]]
** centroid: 1, normalized-entropy: 0.36205125173399805, [(2, 2), (3, 27)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 32, 8]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 32), (3, 8)]
*** center 3: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9881954827904701] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9881954827904701, 0.6937799407541752] ***
*** starting iteration: 2; err: [Inf, 0.9881954827904701, 0.6937799407541752] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9881954827904701, 0.6937799407541752, 0.6643281913548708] ***
*** starting iteration: 3; err: [Inf, 0.9881954827904701, 0.6937799407541752, 0.6643281913548708] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9881954827904701, 0.6937799407541752, 0.6643281913548708, 0.6553131374716759] ***
*** finished computation of 3 references, err: [Inf, 0.9881954827904701, 0.6937799407541752, 0.6643281913548708, 0.6553131374716759] ***
*** center 1: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 30, 10]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(2, 30), (3, 10)]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 24]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.5310745286941527] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5310745286941527, 0.983447744846344] ***
*** starting iteration: 2; err: [Inf, 1.5310745286941527, 0.983447744846344] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5310745286941527, 0.983447744846344, 0.6715425400435925] ***
*** starting iteration: 3; err: [Inf, 1.5310745286941527, 0.983447744846344, 0.6715425400435925] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5310745286941527, 0.983447744846344, 0.6715425400435925, 0.6229897049814462] ***
*** finished computation of 3 references, err: [Inf, 1.5310745286941527, 0.983447744846344, 0.6715425400435925, 0.6229897049814462] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 36, 11]]
** centroid: 3, normalized-entropy: 0.7849920887641585, [(2, 36), (3, 11)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7932853312790393] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7932853312790393, 0.6569406976550818] ***
*** starting iteration: 2; err: [Inf, 0.7932853312790393, 0.6569406976550818] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7932853312790393, 0.6569406976550818, 0.6555750758200883] ***
*** starting iteration: 3; err: [Inf, 0.7932853312790393, 0.6569406976550818, 0.6555750758200883] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7932853312790393, 0.6569406976550818, 0.6555750758200883, 0.6555750758200883] ***
*** finished computation of 3 references, err: [Inf, 0.7932853312790393, 0.6569406976550818, 0.6555750758200883, 0.6555750758200883] ***
*** center 1: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 27]]
** centroid: 2, normalized-entropy: 0.36205125173399805, [(2, 2), (3, 27)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 32, 8]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 32), (3, 8)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6616269916296005] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6616269916296005, 0.4646292398124933] ***
*** starting iteration: 2; err: [Inf, 0.6616269916296005, 0.4646292398124933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6616269916296005, 0.4646292398124933, 0.4481347595527768] ***
*** starting iteration: 3; err: [Inf, 0.6616269916296005, 0.4646292398124933, 0.4481347595527768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6616269916296005, 0.4646292398124933, 0.4481347595527768, 0.4424605976417661] ***
*** finished computation of 7 references, err: [Inf, 0.6616269916296005, 0.4646292398124933, 0.4481347595527768, 0.4424605976417661] ***
*** center 1: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 3: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 12, 1]]
** centroid: 4, normalized-entropy: 0.3912435636292556, [(2, 12), (3, 1)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 13, 5]]
** centroid: 7, normalized-entropy: 0.8524051786494784, [(2, 13), (3, 5)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7769836068153382] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7769836068153382, 0.5020065902918577] ***
*** starting iteration: 2; err: [Inf, 0.7769836068153382, 0.5020065902918577] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7769836068153382, 0.5020065902918577, 0.47055936105549334] ***
*** starting iteration: 3; err: [Inf, 0.7769836068153382, 0.5020065902918577, 0.47055936105549334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7769836068153382, 0.5020065902918577, 0.47055936105549334, 0.46744371362030507] ***
*** finished computation of 7 references, err: [Inf, 0.7769836068153382, 0.5020065902918577, 0.47055936105549334, 0.46744371362030507] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 1, 16]]
** centroid: 3, normalized-entropy: 0.32275695889739825, [(2, 1), (3, 16)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.87809280782938] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.87809280782938, 0.5668465844541788] ***
*** starting iteration: 2; err: [Inf, 0.87809280782938, 0.5668465844541788] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.87809280782938, 0.5668465844541788, 0.5213907977193594] ***
*** starting iteration: 3; err: [Inf, 0.87809280782938, 0.5668465844541788, 0.5213907977193594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.87809280782938, 0.5668465844541788, 0.5213907977193594, 0.5003288770467043] ***
*** finished computation of 7 references, err: [Inf, 0.87809280782938, 0.5668465844541788, 0.5213907977193594, 0.5003288770467043] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 3: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 19, 1]]
** centroid: 5, normalized-entropy: 0.2863969571159561, [(2, 19), (3, 1)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 15, 7]]
** centroid: 6, normalized-entropy: 0.9023932827949788, [(2, 15), (3, 7)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.87763741761446] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.87763741761446, 1.151830803155899] ***
*** starting iteration: 2; err: [Inf, 1.87763741761446, 1.151830803155899] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.87763741761446, 1.151830803155899, 0.7801849485933781] ***
*** starting iteration: 3; err: [Inf, 1.87763741761446, 1.151830803155899, 0.7801849485933781] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.87763741761446, 1.151830803155899, 0.7801849485933781, 0.6682612732052803] ***
*** starting iteration: 4; err: [Inf, 1.87763741761446, 1.151830803155899, 0.7801849485933781, 0.6682612732052803] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.87763741761446, 1.151830803155899, 0.7801849485933781, 0.6682612732052803, 0.6553131374716759] ***
*** starting iteration: 5; err: [Inf, 1.87763741761446, 1.151830803155899, 0.7801849485933781, 0.6682612732052803, 0.6553131374716759] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.87763741761446, 1.151830803155899, 0.7801849485933781, 0.6682612732052803, 0.6553131374716759, 0.6541658490896225] ***
*** starting iteration: 6; err: [Inf, 1.87763741761446, 1.151830803155899, 0.7801849485933781, 0.6682612732052803, 0.6553131374716759, 0.6541658490896225] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.87763741761446, 1.151830803155899, 0.7801849485933781, 0.6682612732052803, 0.6553131374716759, 0.6541658490896225, 0.6531637778878212] ***
*** starting iteration: 7; err: [Inf, 1.87763741761446, 1.151830803155899, 0.7801849485933781, 0.6682612732052803, 0.6553131374716759, 0.6541658490896225, 0.6531637778878212] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.87763741761446, 1.151830803155899, 0.7801849485933781, 0.6682612732052803, 0.6553131374716759, 0.6541658490896225, 0.6531637778878212, 0.6531637778878212] ***
*** finished computation of 3 references, err: [Inf, 1.87763741761446, 1.151830803155899, 0.7801849485933781, 0.6682612732052803, 0.6553131374716759, 0.6541658490896225, 0.6531637778878212, 0.6531637778878212] ***
*** center 1: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 25]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 30, 9]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(2, 30), (3, 9)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.8256814600527287] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.8256814600527287, 1.1260019379854203] ***
*** starting iteration: 2; err: [Inf, 1.8256814600527287, 1.1260019379854203] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.8256814600527287, 1.1260019379854203, 0.700897034406662] ***
*** starting iteration: 3; err: [Inf, 1.8256814600527287, 1.1260019379854203, 0.700897034406662] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.8256814600527287, 1.1260019379854203, 0.700897034406662, 0.624177905768156] ***
*** starting iteration: 4; err: [Inf, 1.8256814600527287, 1.1260019379854203, 0.700897034406662, 0.624177905768156] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.8256814600527287, 1.1260019379854203, 0.700897034406662, 0.624177905768156, 0.6232039771229029] ***
*** finished computation of 3 references, err: [Inf, 1.8256814600527287, 1.1260019379854203, 0.700897034406662, 0.624177905768156, 0.6232039771229029] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 36, 11]]
** centroid: 2, normalized-entropy: 0.7849920887641585, [(2, 36), (3, 11)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.2970930134505034] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2970930134505034, 0.6931627072393894] ***
*** starting iteration: 2; err: [Inf, 1.2970930134505034, 0.6931627072393894] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2970930134505034, 0.6931627072393894, 0.6507976574450731] ***
*** starting iteration: 3; err: [Inf, 1.2970930134505034, 0.6931627072393894, 0.6507976574450731] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2970930134505034, 0.6931627072393894, 0.6507976574450731, 0.6516576249152422] ***
*** finished computation of 3 references, err: [Inf, 1.2970930134505034, 0.6931627072393894, 0.6507976574450731, 0.6516576249152422] ***
*** center 1: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 28]]
** centroid: 2, normalized-entropy: 0.3533593350214213, [(2, 2), (3, 28)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 32, 7]]
** centroid: 3, normalized-entropy: 0.6789538995185759, [(2, 32), (3, 7)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8668240010738373] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8668240010738373, 0.6734914843738079] ***
*** finished computation of 3 references, err: [Inf, 0.8668240010738373, 0.6734914843738079] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 30, 13]]
** centroid: 1, normalized-entropy: 0.8841151220488478, [(2, 30), (3, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 21]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8275636249780655] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8275636249780655, 0.6415414265543222] ***
*** finished computation of 3 references, err: [Inf, 0.8275636249780655, 0.6415414265543222] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 33, 6]]
** centroid: 1, normalized-entropy: 0.6193821946787638, [(2, 33), (3, 6)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 3, 25]]
** centroid: 2, normalized-entropy: 0.4912373418243334, [(2, 3), (3, 25)]
*** center 3: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.5035621207952499] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5035621207952499, 1.0038248074054719] ***
*** finished computation of 3 references, err: [Inf, 1.5035621207952499, 1.0038248074054719] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 26, 10]]
** centroid: 1, normalized-entropy: 0.8524051786494784, [(2, 26), (3, 10)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [31, 6, 0]]
** centroid: 2, normalized-entropy: 0.6394571324851642, [(1, 31), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 2, 25]]
** centroid: 3, normalized-entropy: 0.38094658570539014, [(2, 2), (3, 25)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0856266086548567] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0856266086548567, 0.6643281913548708] ***
*** starting iteration: 2; err: [Inf, 1.0856266086548567, 0.6643281913548708] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0856266086548567, 0.6643281913548708, 0.6553131374716759] ***
*** starting iteration: 3; err: [Inf, 1.0856266086548567, 0.6643281913548708, 0.6553131374716759] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0856266086548567, 0.6643281913548708, 0.6553131374716759, 0.6541658490896225] ***
*** finished computation of 3 references, err: [Inf, 1.0856266086548567, 0.6643281913548708, 0.6553131374716759, 0.6541658490896225] ***
*** center 1: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 25]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 30, 9]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(2, 30), (3, 9)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8940409195423126] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8940409195423126, 0.643491600677371] ***
*** starting iteration: 2; err: [Inf, 0.8940409195423126, 0.643491600677371] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8940409195423126, 0.643491600677371, 0.6240309178829193] ***
*** starting iteration: 3; err: [Inf, 0.8940409195423126, 0.643491600677371, 0.6240309178829193] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8940409195423126, 0.643491600677371, 0.6240309178829193, 0.6232039771229029] ***
*** finished computation of 3 references, err: [Inf, 0.8940409195423126, 0.643491600677371, 0.6240309178829193, 0.6232039771229029] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 36, 11]]
** centroid: 3, normalized-entropy: 0.7849920887641585, [(2, 36), (3, 11)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9833089934289455] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9833089934289455, 0.6680503564327955] ***
*** starting iteration: 2; err: [Inf, 0.9833089934289455, 0.6680503564327955] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9833089934289455, 0.6680503564327955, 0.6593952744454146] ***
*** starting iteration: 3; err: [Inf, 0.9833089934289455, 0.6680503564327955, 0.6593952744454146] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9833089934289455, 0.6680503564327955, 0.6593952744454146, 0.654407217130065] ***
*** finished computation of 3 references, err: [Inf, 0.9833089934289455, 0.6680503564327955, 0.6593952744454146, 0.654407217130065] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 8, 34]]
** centroid: 1, normalized-entropy: 0.7024665512903904, [(2, 8), (3, 34)]
*** center 2: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 26, 1]]
** centroid: 3, normalized-entropy: 0.22853814395352806, [(2, 26), (3, 1)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9865740983188153] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9865740983188153, 0.565077743716538] ***
*** finished computation of 3 references, err: [Inf, 0.9865740983188153, 0.565077743716538] ***
*** center 1: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 30, 13]]
** centroid: 3, normalized-entropy: 0.8841151220488478, [(2, 30), (3, 13)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7900086811184883] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7900086811184883, 0.5356887366622687] ***
*** finished computation of 3 references, err: [Inf, 0.7900086811184883, 0.5356887366622687] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 36, 12]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 36), (3, 12)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6999319268763066] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6999319268763066, 0.5534059254825116] ***
*** finished computation of 3 references, err: [Inf, 0.6999319268763066, 0.5534059254825116] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 12, 34]]
** centroid: 1, normalized-entropy: 0.828055725379504, [(2, 12), (3, 34)]
*** center 2: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 3, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8607424093782902] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8607424093782902, 0.5634548195451498] ***
*** starting iteration: 2; err: [Inf, 0.8607424093782902, 0.5634548195451498] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8607424093782902, 0.5634548195451498, 0.554281346052885] ***
*** starting iteration: 3; err: [Inf, 0.8607424093782902, 0.5634548195451498, 0.554281346052885] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8607424093782902, 0.5634548195451498, 0.554281346052885, 0.5516498611867428] ***
*** finished computation of 3 references, err: [Inf, 0.8607424093782902, 0.5634548195451498, 0.554281346052885, 0.5516498611867428] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 30, 9]]
** centroid: 1, normalized-entropy: 0.7793498372920851, [(2, 30), (3, 9)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 25]]
*** center 3: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7183722339570522] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7183722339570522, 0.5356887366622687] ***
*** starting iteration: 2; err: [Inf, 0.7183722339570522, 0.5356887366622687] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7183722339570522, 0.5356887366622687, 0.5246405232697725] ***
*** starting iteration: 3; err: [Inf, 0.7183722339570522, 0.5356887366622687, 0.5246405232697725] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7183722339570522, 0.5356887366622687, 0.5246405232697725, 0.5246405232697725] ***
*** finished computation of 3 references, err: [Inf, 0.7183722339570522, 0.5356887366622687, 0.5246405232697725, 0.5246405232697725] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 36, 12]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 36), (3, 12)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9981855508685112] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9981855508685112, 0.5664449952542782] ***
*** starting iteration: 2; err: [Inf, 0.9981855508685112, 0.5664449952542782] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9981855508685112, 0.5664449952542782, 0.5504308296740055] ***
*** starting iteration: 3; err: [Inf, 0.9981855508685112, 0.5664449952542782, 0.5504308296740055] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9981855508685112, 0.5664449952542782, 0.5504308296740055, 0.5487362946569919] ***
*** finished computation of 3 references, err: [Inf, 0.9981855508685112, 0.5664449952542782, 0.5504308296740055, 0.5487362946569919] ***
*** center 1: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 28]]
** centroid: 2, normalized-entropy: 0.3533593350214213, [(2, 2), (3, 28)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 32, 7]]
** centroid: 3, normalized-entropy: 0.6789538995185759, [(2, 32), (3, 7)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0590425425767898] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0590425425767898, 0.565077743716538] ***
*** finished computation of 3 references, err: [Inf, 1.0590425425767898, 0.565077743716538] ***
*** center 1: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 21]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 30, 13]]
** centroid: 3, normalized-entropy: 0.8841151220488478, [(2, 30), (3, 13)]
finished with 4 centroids; started with 3
generating 4 configurations using top 4 configurations, starting with 14)
[0.9666666666666667, 0.9533333333333333, 0.9533333333333333, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9066666666666666, 0.8999999999999999, 0.8933333333333334, 0.88]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9666666666666667
finished with 15
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.5423892332613468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5423892332613468, 0.39486065562814476] ***
*** starting iteration: 2; err: [Inf, 0.5423892332613468, 0.39486065562814476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5423892332613468, 0.39486065562814476, 0.3834388334304094] ***
*** starting iteration: 3; err: [Inf, 0.5423892332613468, 0.39486065562814476, 0.3834388334304094] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5423892332613468, 0.39486065562814476, 0.3834388334304094, 0.3809885425120592] ***
*** finished computation of 7 references, err: [Inf, 0.5423892332613468, 0.39486065562814476, 0.3834388334304094, 0.3809885425120592] ***
*** center 1: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [6, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 14, 2]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(2, 14), (3, 2)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 16, 1]]
** centroid: 5, normalized-entropy: 0.32275695889739825, [(2, 16), (3, 1)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 7: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.2632027593255044] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.2632027593255044, 0.6648428412526846] ***
*** starting iteration: 2; err: [Inf, 1.2632027593255044, 0.6648428412526846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.2632027593255044, 0.6648428412526846, 0.404826468937099] ***
*** starting iteration: 3; err: [Inf, 1.2632027593255044, 0.6648428412526846, 0.404826468937099] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.2632027593255044, 0.6648428412526846, 0.404826468937099, 0.39899293914437295] ***
*** finished computation of 7 references, err: [Inf, 1.2632027593255044, 0.6648428412526846, 0.404826468937099, 0.39899293914437295] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 17]]
** centroid: 4, normalized-entropy: 0.3095434291503252, [(2, 1), (3, 17)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.3184290961176157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.3184290961176157, 0.7852130464464426] ***
*** starting iteration: 2; err: [Inf, 1.3184290961176157, 0.7852130464464426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.3184290961176157, 0.7852130464464426, 0.4981178557127714] ***
*** starting iteration: 3; err: [Inf, 1.3184290961176157, 0.7852130464464426, 0.4981178557127714] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.3184290961176157, 0.7852130464464426, 0.4981178557127714, 0.4296540142595768] ***
*** finished computation of 7 references, err: [Inf, 1.3184290961176157, 0.7852130464464426, 0.4981178557127714, 0.4296540142595768] ***
*** center 1: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 2, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 6]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 3), (3, 6)]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 8, 7]]
** centroid: 6, normalized-entropy: 0.9967916319816367, [(2, 8), (3, 7)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
finished with 9 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 15)
[0.9666666666666667, 0.9533333333333333, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9066666666666666, 0.8999999999999999, 0.8933333333333334, 0.88]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9666666666666667
finished with 16
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.7056043913960457] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7056043913960457, 0.5226195979863405] ***
*** finished computation of 7 references, err: [Inf, 0.7056043913960457, 0.5226195979863405] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 13, 8]]
** centroid: 1, normalized-entropy: 0.9587118829771317, [(2, 13), (3, 8)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 5, 1]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [27, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 25]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 5, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7451253208518028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7451253208518028, 0.48720246568322184] ***
*** finished computation of 7 references, err: [Inf, 0.7451253208518028, 0.48720246568322184] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 11, 3]]
** centroid: 1, normalized-entropy: 0.7495952572594798, [(2, 11), (3, 3)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
*** center 4: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 13]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 24, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 1, 8]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7720111925899983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7720111925899983, 0.5103290135785937] ***
*** finished computation of 7 references, err: [Inf, 0.7720111925899983, 0.5103290135785937] ***
*** center 1: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 2]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 1, 23]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 12, 10]]
** centroid: 5, normalized-entropy: 0.9940302114769566, [(2, 12), (3, 10)]
*** center 6: selecting labels [1] (freq >= 2) [from [21, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 4, 0]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 16)
[0.9666666666666667, 0.9666666666666667, 0.9533333333333333, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9066666666666666, 0.8999999999999999, 0.8933333333333334, 0.88]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 1, 1.0, :rand, 0.3, 2) => 0.9666666666666667
finished with 17
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.6604596337676049] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6604596337676049, 0.49346305869519713] ***
*** finished computation of 7 references, err: [Inf, 0.6604596337676049, 0.49346305869519713] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 3, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 2, 8]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 7, 6]]
** centroid: 4, normalized-entropy: 0.9957274520849256, [(2, 7), (3, 6)]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 12, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6192215561866761] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6192215561866761, 0.47408224903047086] ***
*** finished computation of 7 references, err: [Inf, 0.6192215561866761, 0.47408224903047086] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 2, 11]]
** centroid: 3, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 17, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 10, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 12]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.8148834228515625] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8148834228515625, 0.5171924522519111] ***
*** finished computation of 7 references, err: [Inf, 0.8148834228515625, 0.5171924522519111] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 2, 8]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 23, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 7, 1]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 2, 11]]
** centroid: 4, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 5: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
finished with 9 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 17)
[0.9666666666666667, 0.9666666666666667, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9066666666666666, 0.8999999999999999, 0.8933333333333334, 0.88]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 1, 1.0, :rand, 0.3, 2) => 0.9666666666666667
finished with 17
iteration 5 finished
generating 4 configurations using top 4 configurations, starting with 17)
[0.9666666666666667, 0.9666666666666667, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9066666666666666, 0.8999999999999999, 0.8933333333333334, 0.88]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 1, 1.0, :rand, 0.3, 2) => 0.9666666666666667
finished with 17
iteration 6 finished
generating 4 configurations using top 4 configurations, starting with 17)
[0.9666666666666667, 0.9666666666666667, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9066666666666666, 0.8999999999999999, 0.8933333333333334, 0.88]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 1, 1.0, :rand, 0.3, 2) => 0.9666666666666667
finished with 17
iteration 7 finished
generating 4 configurations using top 4 configurations, starting with 17)
[0.9666666666666667, 0.9666666666666667, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9066666666666666, 0.8999999999999999, 0.8933333333333334, 0.88]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 1, 1.0, :rand, 0.3, 2) => 0.9666666666666667
finished with 17
iteration 8 finished
generating 4 configurations using top 4 configurations, starting with 17)
[0.9666666666666667, 0.9666666666666667, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9066666666666666, 0.8999999999999999, 0.8933333333333334, 0.88]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 1, 1.0, :rand, 0.3, 2) => 0.9666666666666667
finished with 19
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.5161949028074742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5161949028074742, 0.4023417703807354] ***
*** starting iteration: 2; err: [Inf, 0.5161949028074742, 0.4023417703807354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5161949028074742, 0.4023417703807354, 0.3926938531547785] ***
*** starting iteration: 3; err: [Inf, 0.5161949028074742, 0.4023417703807354, 0.3926938531547785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5161949028074742, 0.4023417703807354, 0.3926938531547785, 0.3882973697036505] ***
*** finished computation of 7 references, err: [Inf, 0.5161949028074742, 0.4023417703807354, 0.3926938531547785, 0.3882973697036505] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 3, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 6]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 10, 3]]
** centroid: 4, normalized-entropy: 0.7793498372920851, [(2, 10), (3, 3)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 16, 1]]
*** center 6: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.0534725622832775] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.0534725622832775, 0.5686839426308871] ***
*** starting iteration: 2; err: [Inf, 1.0534725622832775, 0.5686839426308871] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.0534725622832775, 0.5686839426308871, 0.4147847438976169] ***
*** starting iteration: 3; err: [Inf, 1.0534725622832775, 0.5686839426308871, 0.4147847438976169] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.0534725622832775, 0.5686839426308871, 0.4147847438976169, 0.3881677167117596] ***
*** finished computation of 7 references, err: [Inf, 1.0534725622832775, 0.5686839426308871, 0.4147847438976169, 0.3881677167117596] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 5, 3]]
** centroid: 1, normalized-entropy: 0.954434002924965, [(2, 5), (3, 3)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 17, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 10]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 4, 5]]
** centroid: 6, normalized-entropy: 0.9910760598382222, [(2, 4), (3, 5)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 10, 6]]
** centroid: 7, normalized-entropy: 0.954434002924965, [(2, 10), (3, 6)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6080229796469212] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6080229796469212, 0.4466719830036163] ***
*** starting iteration: 2; err: [Inf, 0.6080229796469212, 0.4466719830036163] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6080229796469212, 0.4466719830036163, 0.4181235767900944] ***
*** starting iteration: 3; err: [Inf, 0.6080229796469212, 0.4466719830036163, 0.4181235767900944] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6080229796469212, 0.4466719830036163, 0.4181235767900944, 0.40472062073647974] ***
*** finished computation of 7 references, err: [Inf, 0.6080229796469212, 0.4466719830036163, 0.4181235767900944, 0.40472062073647974] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 16, 1]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 9, 10]]
** centroid: 4, normalized-entropy: 0.9980008838722993, [(2, 9), (3, 10)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 2, 5]]
** centroid: 5, normalized-entropy: 0.8631205685666311, [(2, 2), (3, 5)]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 19]]
*** center 7: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7764384303987026] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7764384303987026, 0.5381793867796659] ***
*** starting iteration: 2; err: [Inf, 0.7764384303987026, 0.5381793867796659] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7764384303987026, 0.5381793867796659, 0.5106882932037116] ***
*** starting iteration: 3; err: [Inf, 0.7764384303987026, 0.5381793867796659, 0.5106882932037116] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7764384303987026, 0.5381793867796659, 0.5106882932037116, 0.49212786376476286] ***
*** finished computation of 7 references, err: [Inf, 0.7764384303987026, 0.5381793867796659, 0.5106882932037116, 0.49212786376476286] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 14, 7]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(2, 14), (3, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 3, 7]]
** centroid: 3, normalized-entropy: 0.8812908992306927, [(2, 3), (3, 7)]
*** center 4: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 13, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5277195351570845] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5277195351570845, 0.450098964124918] ***
*** starting iteration: 2; err: [Inf, 0.5277195351570845, 0.450098964124918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5277195351570845, 0.450098964124918, 0.43262605167925355] ***
*** starting iteration: 3; err: [Inf, 0.5277195351570845, 0.450098964124918, 0.43262605167925355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5277195351570845, 0.450098964124918, 0.43262605167925355, 0.4306504009664059] ***
*** finished computation of 7 references, err: [Inf, 0.5277195351570845, 0.450098964124918, 0.43262605167925355, 0.4306504009664059] ***
*** center 1: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 2, 12]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(2, 2), (3, 12)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 19]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 17, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 17, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6233360765874386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6233360765874386, 0.5144963875412941] ***
*** starting iteration: 2; err: [Inf, 0.6233360765874386, 0.5144963875412941] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6233360765874386, 0.5144963875412941, 0.48560183838009835] ***
*** starting iteration: 3; err: [Inf, 0.6233360765874386, 0.5144963875412941, 0.48560183838009835] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6233360765874386, 0.5144963875412941, 0.48560183838009835, 0.46063167706131936] ***
*** finished computation of 7 references, err: [Inf, 0.6233360765874386, 0.5144963875412941, 0.48560183838009835, 0.46063167706131936] ***
*** center 1: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 12, 8]]
** centroid: 4, normalized-entropy: 0.9709505944546688, [(2, 12), (3, 8)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 20, 1]]
*** center 6: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 2, 13]]
** centroid: 7, normalized-entropy: 0.5665095065529052, [(2, 2), (3, 13)]
finished with 8 centroids; started with 7
[ Info: ========== BEST MODEL ==========
[ Info: (AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :rand, 0.9, 2), 0.9666666666666667)
[ Info: AKNC{Array{Float64,1}}[AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[6.99, 3.0299999999999994, 5.8950000000000005, 2.1350000000000002], [6.357142857142856, 2.835714285714286, 4.557142857142858, 1.4214285714285715], [6.3428571428571425, 2.7857142857142856, 5.171428571428572, 1.7857142857142858], [5.71, 2.94, 4.869999999999999, 1.8699999999999999], [4.483333333333333, 3.2166666666666663, 1.2666666666666666, 0.19999999999999998], [4.8545454545454545, 3.1454545454545455, 1.518181818181818, 0.18181818181818185], [5.221052631578948, 3.6526315789473687, 1.5157894736842106, 0.3052631578947369], [5.4818181818181815, 2.4272727272727277, 3.7909090909090906, 1.1090909090909091]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [3, 2, 3, 3, 1, 1, 1, 2], 3), KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :rand, 0.9, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[4.684615384615385, 3.0153846153846158, 1.3923076923076922, 0.17692307692307693], [5.62, 4.06, 1.42, 0.29999999999999993], [6.057142857142856, 2.6999999999999997, 4.95, 1.7857142857142858], [6.9105263157894745, 3.2052631578947364, 5.847368421052632, 2.1526315789473682], [5.611764705882353, 2.735294117647059, 3.9705882352941178, 1.223529411764706], [6.4529411764705875, 2.9470588235294115, 4.611764705882353, 1.4235294117647057], [5.0600000000000005, 3.5400000000000005, 1.4466666666666665, 0.26]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1, 1, 3, 3, 2, 2, 1], 3), KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :rand, 0.9, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[5.3125, 3.6874999999999996, 1.54375, 0.2875], [6.780000000000001, 3.3200000000000003, 5.88, 2.42], [7.471428571428572, 3.042857142857143, 6.3, 1.9285714285714286], [6.25, 3.0000000000000004, 4.6, 1.4666666666666666], [5.95, 2.7, 5.075, 1.8250000000000002], [5.574999999999999, 2.670833333333333, 3.966666666666667, 1.2583333333333335], [4.746666666666667, 3.126666666666667, 1.4466666666666663, 0.2066666666666667], [6.600000000000002, 2.9799999999999995, 5.426666666666667, 2.006666666666667]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1, 3, 3, 2, 3, 2, 1, 3], 3), KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 3, 1.0, :rand, 0.9, 2))]
Test Summary: | Pass  Total
AKNC          |    1      1
[316, 1, 1, 1, 3, 6, 2, 4, 1, 2, 2, 2, 4, 2, 3, 10, 4, 14, 6, 15, 6, 1, 7, 1, 3, 4, 4, 3, 4, 52, 3, 11, 8, 7, 16, 15, 102, 24, 4, 9, 2, 12, 3, 1, 12, 1, 5, 24, 3, 3, 4, 1, 11, 1, 14, 3, 17, 7, 4, 1, 5, 17, 103, 13, 1, 5, 4, 24, 1, 25, 15, 22, 12, 15, 2, 14, 127, 31, 1, 1, 36, 50, 1, 36, 87, 11, 10, 2, 7, 10, 23, 28, 33, 108, 7, 5, 7, 2, 4, 12, 8, 13, 20, 36, 9, 23, 17, 1, 44, 34, 4, 22, 38, 6, 11, 5, 64, 7, 2, 65, 10, 3, 6, 51, 16, 32, 9, 11, 8, 116, 15, 1, 38, 21, 2, 74, 59, 15, 2, 5, 20, 18, 26, 19, 110, 1339, 4, 81, 55, 11, 9, 18, 17, 5, 27, 11, 3, 16, 125, 27, 10, 15, 7, 24, 12, 43, 8, 100, 135, 307, 22, 40, 35, 5, 16, 62, 35, 14, 41, 9, 26, 14, 5, 2, 7, 30, 43, 5, 93, 13, 4, 22, 31, 270, 56, 16, 212, 37, 4, 30, 35, 3, 35, 7, 5, 9, 10, 2, 4, 22, 5, 53, 13, 44, 31, 5, 256, 9, 47, 31, 4, 39, 29, 19, 16, 12, 60, 1, 24, 84, 44, 3, 5, 10, 10, 11, 60, 125, 55, 16, 13, 6, 5, 36, 37, 36, 5, 3, 304, 24, 113, 9, 3, 31, 83, 18, 3, 77, 21, 19, 9, 29, 71, 12, 7, 62, 20, 38, 26, 10, 12, 8, 30, 16, 18, 17, 55, 47, 15, 154, 14, 55, 109, 65, 19, 23, 17, 52, 2, 2, 6, 126, 48, 5, 90, 30, 19, 24, 8, 78]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.686, speedup = 0.24480641897398517, eval_ratio = 0.08999)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3911458333333334,"recall":0.37326388888888884,"f1":null,"seconds":0.0002632513642311096,"exhaustive_search_seconds":0.00044629722833633423,"evaluations":578.2578125,"distances_sum":1683.2680510402329}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5416666666666666,"recall":0.5416666666666666,"f1":null,"seconds":0.00040158629417419434,"exhaustive_search_seconds":0.00044629722833633423,"evaluations":741.9765625,"distances_sum":1639.4182887488494}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6501736111111112,"recall":0.6501736111111112,"f1":null,"seconds":0.0006829630583524704,"exhaustive_search_seconds":0.00044629722833633423,"evaluations":911.0,"distances_sum":1592.2272852983658}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7282986111111107,"recall":0.7282986111111107,"f1":null,"seconds":0.0006245486438274384,"exhaustive_search_seconds":0.00044629722833633423,"evaluations":1072.609375,"distances_sum":1559.3065542653571}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7907986111111107,"recall":0.7907986111111107,"f1":null,"seconds":0.0008048638701438904,"exhaustive_search_seconds":0.00044629722833633423,"evaluations":1230.3359375,"distances_sum":1536.7727265391343}
KCenters.DeloneInvIndex> reached performance {"precision":0.8359374999999992,"recall":0.8359374999999992,"f1":0.8359374999999992,"seconds":0.0008862819522619247,"exhaustive_search_seconds":0.00044629722833633423,"evaluations":1324.734375,"distances_sum":1521.8830769353813}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8520000000000002, speedup = 0.36294518080803934, eval_ratio = 0.132009)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
