Julia Version 1.6.0-DEV.185
Commit cbd854b0f4 (2020-06-06 13:20 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed MbedTLS_jll ────────────────── v2.16.0+2
  Installed Compat ─────────────────────── v2.2.0
  Installed ZipFile ────────────────────── v0.9.2
  Installed TranscodingStreams ─────────── v0.9.5
  Installed RecipesBase ────────────────── v1.0.1
  Installed OrderedCollections ─────────── v1.2.0
  Installed SetProg ────────────────────── v0.1.2
  Installed SumOfSquares ───────────────── v0.4.1
  Installed RowEchelon ─────────────────── v0.1.1
  Installed CodecBzip2 ─────────────────── v0.7.2
  Installed DiffRules ──────────────────── v1.0.1
  Installed Zlib_jll ───────────────────── v1.2.11+10
  Installed CodecZlib ──────────────────── v0.7.0
  Installed FixedPointNumbers ──────────── v0.8.0
  Installed Reexport ───────────────────── v0.2.0
  Installed HTTP ───────────────────────── v0.8.15
  Installed CommonSubexpressions ───────── v0.2.0
  Installed PolyJuMP ───────────────────── v0.4.0
  Installed JSONSchema ─────────────────── v0.3.0
  Installed IniFile ────────────────────── v0.5.0
  Installed Calculus ───────────────────── v0.5.1
  Installed Bzip2_jll ──────────────────── v1.0.6+2
  Installed Polyhedra ──────────────────── v0.6.5
  Installed GeometryTypes ──────────────── v0.8.3
  Installed DataStructures ─────────────── v0.17.17
  Installed StaticArrays ───────────────── v0.12.3
  Installed ColorTypes ─────────────────── v0.10.3
  Installed NaNMath ────────────────────── v0.3.3
  Installed MutableArithmetics ─────────── v0.2.9
  Installed BenchmarkTools ─────────────── v0.5.0
  Installed JSON ───────────────────────── v0.21.0
  Installed MbedTLS ────────────────────── v1.0.2
  Installed ForwardDiff ────────────────── v0.10.10
  Installed SemialgebraicSets ──────────── v0.2.1
  Installed Parsers ────────────────────── v1.0.5
  Installed MathOptInterface ───────────── v0.9.14
  Installed MultivariateBases ──────────── v0.1.2
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed Combinatorics ──────────────── v1.0.2
  Installed MultivariateMoments ────────── v0.3.0
  Installed DiffResults ────────────────── v1.0.2
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed DynamicPolynomials ─────────── v0.3.10
  Installed MultivariatePolynomials ────── v0.3.9
  Installed JuMP ───────────────────────── v0.21.2
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [39881422] + SetProg v0.1.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [6e4b80f9] + BenchmarkTools v0.5.0
  [6e34b625] + Bzip2_jll v1.0.6+2
  [49dc2e85] + Calculus v0.5.1
  [523fee87] + CodecBzip2 v0.7.2
  [944b1d66] + CodecZlib v0.7.0
  [3da002f7] + ColorTypes v0.10.3
  [861a8166] + Combinatorics v1.0.2
  [bbf7d656] + CommonSubexpressions v0.2.0
  [34da2185] + Compat v2.2.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [864edb3b] + DataStructures v0.17.17
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [7c1d4256] + DynamicPolynomials v0.3.10
  [53c48c17] + FixedPointNumbers v0.8.0
  [f6369f11] + ForwardDiff v0.10.10
  [4d00f742] + GeometryTypes v0.8.3
  [cd3eb016] + HTTP v0.8.15
  [83e8ac13] + IniFile v0.5.0
  [682c06a0] + JSON v0.21.0
  [7d188eb4] + JSONSchema v0.3.0
  [4076af6c] + JuMP v0.21.2
  [b8f27783] + MathOptInterface v0.9.14
  [739be429] + MbedTLS v1.0.2
  [c8ffd9c3] + MbedTLS_jll v2.16.0+2
  [be282fd4] + MultivariateBases v0.1.2
  [f4abf1af] + MultivariateMoments v0.3.0
  [102ac46a] + MultivariatePolynomials v0.3.9
  [d8a4904e] + MutableArithmetics v0.2.9
  [77ba4419] + NaNMath v0.3.3
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.5
  [ddf597a6] + PolyJuMP v0.4.0
  [67491407] + Polyhedra v0.6.5
  [3cdcf5f2] + RecipesBase v1.0.1
  [189a3867] + Reexport v0.2.0
  [af85af4c] + RowEchelon v0.1.1
  [8e049039] + SemialgebraicSets v0.2.1
  [39881422] + SetProg v0.1.2
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.3
  [4b9e565b] + SumOfSquares v0.4.1
  [3bb67fe8] + TranscodingStreams v0.9.5
  [a5390f91] + ZipFile v0.9.2
  [83775a58] + Zlib_jll v1.2.11+10
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing SetProg
Status `/tmp/jl_MpaNxl/Project.toml`
  [861a8166] Combinatorics v1.0.2
  [864edb3b] DataStructures v0.17.17
  [7c1d4256] DynamicPolynomials v0.3.10
  [4076af6c] JuMP v0.21.2
  [b8f27783] MathOptInterface v0.9.14
  [be282fd4] MultivariateBases v0.1.2
  [f4abf1af] MultivariateMoments v0.3.0
  [102ac46a] MultivariatePolynomials v0.3.9
  [d8a4904e] MutableArithmetics v0.2.9
  [67491407] Polyhedra v0.6.5
  [3cdcf5f2] RecipesBase v1.0.1
  [189a3867] Reexport v0.2.0
  [39881422] SetProg v0.1.2
  [4b9e565b] SumOfSquares v0.4.1
  [37e2e46d] LinearAlgebra
  [44cfe95a] Pkg
  [8dfed614] Test
Status `/tmp/jl_MpaNxl/Manifest.toml`
  [6e4b80f9] BenchmarkTools v0.5.0
  [6e34b625] Bzip2_jll v1.0.6+2
  [49dc2e85] Calculus v0.5.1
  [523fee87] CodecBzip2 v0.7.2
  [944b1d66] CodecZlib v0.7.0
  [3da002f7] ColorTypes v0.10.3
  [861a8166] Combinatorics v1.0.2
  [bbf7d656] CommonSubexpressions v0.2.0
  [34da2185] Compat v2.2.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [864edb3b] DataStructures v0.17.17
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [7c1d4256] DynamicPolynomials v0.3.10
  [53c48c17] FixedPointNumbers v0.8.0
  [f6369f11] ForwardDiff v0.10.10
  [4d00f742] GeometryTypes v0.8.3
  [cd3eb016] HTTP v0.8.15
  [83e8ac13] IniFile v0.5.0
  [682c06a0] JSON v0.21.0
  [7d188eb4] JSONSchema v0.3.0
  [4076af6c] JuMP v0.21.2
  [b8f27783] MathOptInterface v0.9.14
  [739be429] MbedTLS v1.0.2
  [c8ffd9c3] MbedTLS_jll v2.16.0+2
  [be282fd4] MultivariateBases v0.1.2
  [f4abf1af] MultivariateMoments v0.3.0
  [102ac46a] MultivariatePolynomials v0.3.9
  [d8a4904e] MutableArithmetics v0.2.9
  [77ba4419] NaNMath v0.3.3
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.5
  [ddf597a6] PolyJuMP v0.4.0
  [67491407] Polyhedra v0.6.5
  [3cdcf5f2] RecipesBase v1.0.1
  [189a3867] Reexport v0.2.0
  [af85af4c] RowEchelon v0.1.1
  [8e049039] SemialgebraicSets v0.2.1
  [39881422] SetProg v0.1.2
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.3
  [4b9e565b] SumOfSquares v0.4.1
  [3bb67fe8] TranscodingStreams v0.9.5
  [a5390f91] ZipFile v0.9.2
  [83775a58] Zlib_jll v1.2.11+10
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
apply_matrix  |    4      4
Test Summary: | Pass  Total
Variables     |    8      8
Test Summary: | Pass  Total
L1 heuristic  |   12     12
┌ Warning: Cannot detect exact linearity as no solver was provided and the polyhedron is not affine.
│ As fallback, we will only detect halfspaces from opposite hyperplanes but that may not detect all halfspaces.
│ Set a solver if you believe that the polyhedron may have more linearity.
│ To provide a solver to a polyhedron, first select a solver from https://www.juliaopt.org/JuMP.jl/stable/installation/#Getting-Solvers-1.
│ If you choose for instance `GLPK`, do `using GLPK; solver = GLPK.Optimizer`.
│ Then provide the solver to the library. For instance, with the default library, do `lib = DefaultLibrary{Float64}(solver)`
│ or if you use an external library, say `QHull`, do `lib = QHull.Library(solver)`.
│ Then when you create the polyhedron, say from a representation `rep`, do `polyhedron(rep, lib)`.
└ @ Polyhedra ~/.julia/packages/Polyhedra/Wu1SI/src/linearity.jl:208
┌ Warning: Cannot detect exact linearity as no solver was provided and the polyhedron is not affine.
│ As fallback, we will only detect halfspaces from opposite hyperplanes but that may not detect all halfspaces.
│ Set a solver if you believe that the polyhedron may have more linearity.
│ To provide a solver to a polyhedron, first select a solver from https://www.juliaopt.org/JuMP.jl/stable/installation/#Getting-Solvers-1.
│ If you choose for instance `GLPK`, do `using GLPK; solver = GLPK.Optimizer`.
│ Then provide the solver to the library. For instance, with the default library, do `lib = DefaultLibrary{Float64}(solver)`
│ or if you use an external library, say `QHull`, do `lib = QHull.Library(solver)`.
│ Then when you create the polyhedron, say from a representation `rep`, do `polyhedron(rep, lib)`.
└ @ Polyhedra ~/.julia/packages/Polyhedra/Wu1SI/src/linearity.jl:208
┌ Warning: Cannot detect exact linearity as no solver was provided and the polyhedron is not affine.
│ As fallback, we will only detect halfspaces from opposite hyperplanes but that may not detect all halfspaces.
│ Set a solver if you believe that the polyhedron may have more linearity.
│ To provide a solver to a polyhedron, first select a solver from https://www.juliaopt.org/JuMP.jl/stable/installation/#Getting-Solvers-1.
│ If you choose for instance `GLPK`, do `using GLPK; solver = GLPK.Optimizer`.
│ Then provide the solver to the library. For instance, with the default library, do `lib = DefaultLibrary{Float64}(solver)`
│ or if you use an external library, say `QHull`, do `lib = QHull.Library(solver)`.
│ Then when you create the polyhedron, say from a representation `rep`, do `polyhedron(rep, lib)`.
└ @ Polyhedra ~/.julia/packages/Polyhedra/Wu1SI/src/linearity.jl:208
┌ Warning: Cannot detect exact linearity as no solver was provided and the polyhedron is not affine.
│ As fallback, we will only detect halfspaces from opposite hyperplanes but that may not detect all halfspaces.
│ Set a solver if you believe that the polyhedron may have more linearity.
│ To provide a solver to a polyhedron, first select a solver from https://www.juliaopt.org/JuMP.jl/stable/installation/#Getting-Solvers-1.
│ If you choose for instance `GLPK`, do `using GLPK; solver = GLPK.Optimizer`.
│ Then provide the solver to the library. For instance, with the default library, do `lib = DefaultLibrary{Float64}(solver)`
│ or if you use an external library, say `QHull`, do `lib = QHull.Library(solver)`.
│ Then when you create the polyhedron, say from a representation `rep`, do `polyhedron(rep, lib)`.
└ @ Polyhedra ~/.julia/packages/Polyhedra/Wu1SI/src/linearity.jl:208
┌ Warning: Cannot detect exact linearity as no solver was provided and the polyhedron is not affine.
│ As fallback, we will only detect halfspaces from opposite hyperplanes but that may not detect all halfspaces.
│ Set a solver if you believe that the polyhedron may have more linearity.
│ To provide a solver to a polyhedron, first select a solver from https://www.juliaopt.org/JuMP.jl/stable/installation/#Getting-Solvers-1.
│ If you choose for instance `GLPK`, do `using GLPK; solver = GLPK.Optimizer`.
│ Then provide the solver to the library. For instance, with the default library, do `lib = DefaultLibrary{Float64}(solver)`
│ or if you use an external library, say `QHull`, do `lib = QHull.Library(solver)`.
│ Then when you create the polyhedron, say from a representation `rep`, do `polyhedron(rep, lib)`.
└ @ Polyhedra ~/.julia/packages/Polyhedra/Wu1SI/src/linearity.jl:208
┌ Warning: Cannot detect exact linearity as no solver was provided and the polyhedron is not affine.
│ As fallback, we will only detect halfspaces from opposite hyperplanes but that may not detect all halfspaces.
│ Set a solver if you believe that the polyhedron may have more linearity.
│ To provide a solver to a polyhedron, first select a solver from https://www.juliaopt.org/JuMP.jl/stable/installation/#Getting-Solvers-1.
│ If you choose for instance `GLPK`, do `using GLPK; solver = GLPK.Optimizer`.
│ Then provide the solver to the library. For instance, with the default library, do `lib = DefaultLibrary{Float64}(solver)`
│ or if you use an external library, say `QHull`, do `lib = QHull.Library(solver)`.
│ Then when you create the polyhedron, say from a representation `rep`, do `polyhedron(rep, lib)`.
└ @ Polyhedra ~/.julia/packages/Polyhedra/Wu1SI/src/linearity.jl:208
Test Summary: | Pass  Total
Recipe        |   38     38
Test Summary: | Pass  Total
Square        |   60     60
Test Summary: | Pass  Total
Invariant     |   25     25
Test Summary:        | Pass  Total
Controlled invariant |   53     53
Test Summary:   | Pass  Total
Switched System |   22     22
    Testing SetProg tests passed 
