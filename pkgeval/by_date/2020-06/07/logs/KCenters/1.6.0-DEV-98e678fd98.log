Julia Version 1.6.0-DEV.186
Commit 98e678fd98 (2020-06-06 18:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Reexport ──────────────────── v0.2.0
  Installed DataAPI ───────────────────── v1.3.0
  Installed TableTraits ───────────────── v1.0.0
  Installed Parsers ───────────────────── v1.0.5
  Installed KCenters ──────────────────── v0.2.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed JSON ──────────────────────── v0.21.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed MappedArrays ──────────────── v0.2.2
  Installed Missings ──────────────────── v0.4.3
  Installed OrderedCollections ────────── v1.2.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Tables ────────────────────── v1.0.4
  Installed DataStructures ────────────── v0.17.17
  Installed DataValueInterfaces ───────── v1.0.0
  Installed SimilaritySearch ──────────── v0.3.19
  Installed MLDataUtils ───────────────── v0.5.1
  Installed LearnBase ─────────────────── v0.2.2
  Installed Compat ────────────────────── v3.10.0
  Installed DataFrames ────────────────── v0.20.2
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed MLDataPattern ─────────────── v0.5.3
  Installed MLLabelUtils ──────────────── v0.5.2
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.10.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.5
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_b0xoJi/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_b0xoJi/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.10.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.5
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.932025450070699
[ Info: 0.8307796732584636
[ Info: 0.5547140726943811
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3221145375321309
mean(cdnet.distances) = 0.3622202567011118
mean(crand.distances) = 0.3409065792461236
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1884765625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1884765625,"f1":null,"seconds":3.5446137189865112e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":6.6796875,"distances_sum":517.202481702823}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1884765625,"state":{"ssize":4,"bsize":1},"perf":{"precision":null,"recall":0.1884765625,"f1":null,"seconds":3.5446137189865112e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":6.6796875,"distances_sum":517.202481702823}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6875,"f1":0.8017444361194368,"seconds":4.474073648452759e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":7.9296875,"distances_sum":2008.6650169892032}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6875,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6875,"f1":0.8017444361194368,"seconds":4.474073648452759e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":7.9296875,"distances_sum":2008.6650169892032}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8692468989343997,"seconds":5.2675604820251465e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.25,"distances_sum":2404.2639906225177}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.926313790376291,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.5546875,"distances_sum":2823.422963394726}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8740234375,"state":{"ssize":9,"bsize":7},"perf":{"precision":1.0,"recall":0.8740234375,"f1":0.926313790376291,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.5546875,"distances_sum":2823.422963394726}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8740234375,"state":{"ssize":9,"bsize":7},"perf":{"precision":1.0,"recall":0.8740234375,"f1":0.926313790376291,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.5546875,"distances_sum":2823.422963394726}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7001953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7001953125,"f1":0.8122752247752255,"seconds":4.997476935386658e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.09375,"distances_sum":1826.911047657882}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7958984375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7958984375,"f1":0.877518835331336,"seconds":5.48921525478363e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.171875,"distances_sum":2174.0369437296167}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5859375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5859375,"f1":0.7251163766788772,"seconds":4.759058356285095e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":7.6875,"distances_sum":1416.6642463733933}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7958984375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7958984375,"f1":0.877518835331336,"seconds":5.48921525478363e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.171875,"distances_sum":2174.0369437296167}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8076171875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.8076171875,"f1":0.8858604936729944,"seconds":5.608424544334412e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.265625,"distances_sum":2201.471533988321}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9391655219780224,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.7421875,"distances_sum":2596.661236412709}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9254266566766574,"seconds":5.884096026420593e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.59375,"distances_sum":2485.3400009068114}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9561641483516485,"seconds":6.1802566051483154e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.75,"distances_sum":2737.9152102046864}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9472012362637366,"seconds":6.074085831642151e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.71875,"distances_sum":2643.508673161002}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9561641483516485,"seconds":6.1802566051483154e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.75,"distances_sum":2737.9152102046864}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9629521520146522,"seconds":6.079673767089844e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8671875,"distances_sum":2775.5198846825288}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9621336996337,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.859375,"distances_sum":2769.937522363598}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9606971153846158,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8515625,"distances_sum":2747.3610690598707}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9629521520146522,"seconds":6.079673767089844e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8671875,"distances_sum":2775.5198846825288}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9345703125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9629521520146522,"seconds":6.079673767089844e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8671875,"distances_sum":2775.5198846825288}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7041015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7041015625,"f1":0.8098013098013106,"seconds":5.077570676803589e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":7.8359375,"distances_sum":1857.0852616205311}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.59375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.59375,"f1":0.7220225954600962,"seconds":4.583969712257385e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":7.59375,"distances_sum":1483.4462586298641}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7041015625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.7041015625,"f1":0.8098013098013106,"seconds":5.077570676803589e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":7.8359375,"distances_sum":1857.0852616205311}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8134765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.8134765625,"f1":0.8860873501498507,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.140625,"distances_sum":2249.0329824031205}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9274933399933404,"seconds":5.453824996948242e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.4296875,"distances_sum":2542.295407569588}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9312817390942397,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.4296875,"distances_sum":2572.7904755231707}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7958984375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7958984375,"f1":0.8748090451215458,"seconds":5.0943344831466675e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.25,"distances_sum":2179.999981074357}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.884765625,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.884765625,"f1":0.9312817390942397,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.4296875,"distances_sum":2572.7904755231707}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9470867673992681,"seconds":6.465241312980652e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.6953125,"distances_sum":2665.078002758852}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":10,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9629750457875461,"seconds":6.711110472679138e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.8125,"distances_sum":2750.797985844477}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":10,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9410802738927745,"seconds":6.554648280143738e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.6953125,"distances_sum":2618.1979498353085}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9575377747252752,"seconds":6.705522537231445e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.8046875,"distances_sum":2722.229889970918}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":10,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9629750457875461,"seconds":6.711110472679138e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.8125,"distances_sum":2750.797985844477}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":10,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9629750457875461,"seconds":6.711110472679138e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.8125,"distances_sum":2750.797985844477}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3544921875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3544921875,"f1":null,"seconds":4.656612873077393e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":5.75,"distances_sum":870.1087579992807}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6494140625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6494140625,"f1":0.771252532190033,"seconds":5.776062607765198e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.859375,"distances_sum":1477.6122184908058}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6494140625,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6494140625,"f1":0.771252532190033,"seconds":5.776062607765198e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.859375,"distances_sum":1477.6122184908058}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9486836080586083,"seconds":7.076188921928406e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.7578125,"distances_sum":2487.889531670914}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9091796875,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9486836080586083,"seconds":7.076188921928406e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.7578125,"distances_sum":2487.889531670914}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9769173534798535,"seconds":6.6366046667099e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9140625,"distances_sum":2655.4595931387485}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9757268772893777,"seconds":5.628913640975952e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9140625,"distances_sum":2656.278998755359}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9769173534798535,"seconds":6.6366046667099e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9140625,"distances_sum":2655.4595931387485}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9769173534798535,"seconds":6.6366046667099e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9140625,"distances_sum":2655.4595931387485}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.8682364510489516,"seconds":5.1781535148620605e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":7.90625,"distances_sum":1925.5423735811644}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5859375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5859375,"f1":0.7243268883893892,"seconds":4.235655069351196e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":7.296875,"distances_sum":1293.8098785926534}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7861328125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7861328125,"f1":0.8682364510489516,"seconds":5.1781535148620605e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":7.90625,"distances_sum":1925.5423735811644}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9203614094239103,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.265625,"distances_sum":2261.597775326843}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9383070054945062,"seconds":5.472451448440552e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.5859375,"distances_sum":2374.8047607215644}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9267633408258413,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.4609375,"distances_sum":2331.1377009008575}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9550137362637366,"seconds":5.498528480529785e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.75,"distances_sum":2533.7338376772987}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8076171875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.8076171875,"f1":0.8861867299367306,"seconds":4.9658119678497314e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.0390625,"distances_sum":2011.3219258688268}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9550137362637366,"seconds":5.498528480529785e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.75,"distances_sum":2533.7338376772987}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9733630952380956,"seconds":5.6549906730651855e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.9140625,"distances_sum":2636.5682682492375}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.95917467948718,"seconds":5.597248673439026e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.7890625,"distances_sum":2535.1303494803774}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9640453296703303,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.7734375,"distances_sum":2596.5724669718306}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9669700091575095,"seconds":5.669891834259033e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.8359375,"distances_sum":2580.808521196662}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.965813873626374,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.8515625,"distances_sum":2586.2787748916976}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9733630952380956,"seconds":5.6549906730651855e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.9140625,"distances_sum":2636.5682682492375}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9733630952380956,"seconds":5.6549906730651855e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.9140625,"distances_sum":2636.5682682492375}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2587890625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2587890625,"f1":null,"seconds":3.257766366004944e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":6.0390625,"distances_sum":599.4046961540294}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2587890625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2587890625,"f1":null,"seconds":3.257766366004944e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":6.0390625,"distances_sum":599.4046961540294}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7109375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7109375,"f1":0.8200481809856818,"seconds":4.976987838745117e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.1484375,"distances_sum":1255.939312240465}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6259765625, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.6259765625,"f1":0.7558257714507721,"seconds":4.3995678424835205e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.8671875,"distances_sum":1116.1720273368328}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5712890625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5712890625,"f1":0.7099723193473201,"seconds":4.664063453674316e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.6484375,"distances_sum":1000.6611938928133}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7109375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.7109375,"f1":0.8200481809856818,"seconds":4.976987838745117e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.1484375,"distances_sum":1255.939312240465}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9235035797535804,"seconds":5.617737770080566e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.640625,"distances_sum":1702.695318765704}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.9221814643689651,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.6328125,"distances_sum":1642.5158097607587}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.942677114552115,"seconds":5.7853758335113525e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8359375,"distances_sum":1765.4012607974792}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73828125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.73828125,"f1":0.8359512015762022,"seconds":4.993751645088196e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.265625,"distances_sum":1364.235694370926}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8994140625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8994140625,"f1":0.942677114552115,"seconds":5.7853758335113525e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8359375,"distances_sum":1765.4012607974792}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9665979853479857,"seconds":6.16908073425293e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.9140625,"distances_sum":1899.8120115591864}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9557348901098905,"seconds":6.239861249923706e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8984375,"distances_sum":1796.5790698451215}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9687156593406597,"seconds":6.165355443954468e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8515625,"distances_sum":1912.740210602961}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9531109515484519,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8671875,"distances_sum":1830.2309865402267}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9459706959706966,"seconds":5.7425349950790405e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8671875,"distances_sum":1773.8459449693296}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9529876373626379,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.7890625,"distances_sum":1834.764549553149}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9687156593406597,"seconds":6.165355443954468e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8515625,"distances_sum":1912.740210602961}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9687156593406597,"seconds":6.165355443954468e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8515625,"distances_sum":1912.740210602961}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5244140625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5244140625,"f1":0.669047445609946,"seconds":4.451721906661987e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":6.9609375,"distances_sum":815.2643454667599}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.162109375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.162109375,"f1":null,"seconds":3.244727849960327e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":4.9765625,"distances_sum":286.0102997862716}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5244140625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5244140625,"f1":0.669047445609946,"seconds":4.451721906661987e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":6.9609375,"distances_sum":815.2643454667599}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.556640625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.556640625,"f1":0.6996843434343439,"seconds":4.513189196586609e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.2265625,"distances_sum":885.2145936902191}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8477267524142533,"seconds":6.411224603652954e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.9609375,"distances_sum":1168.8128423164594}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8638606185481191,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.046875,"distances_sum":1215.6404411800418}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8484144327894336,"seconds":5.042180418968201e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.96875,"distances_sum":1192.5169761462378}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7763671875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7763671875,"f1":0.8638606185481191,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.046875,"distances_sum":1215.6404411800418}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9126919955044963,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.4296875,"distances_sum":1413.8610044695145}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9150641025641033,"seconds":6.584450602531433e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.375,"distances_sum":1408.8605943194846}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9452495421245423,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.703125,"distances_sum":1545.9878636186943}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":10,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.910228313353314,"seconds":6.452202796936035e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.375,"distances_sum":1363.4400271451145}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9393658424908433,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.703125,"distances_sum":1514.5722407878236}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9245879120879125,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.5703125,"distances_sum":1449.5006285770576}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9540979853479858,"seconds":7.165595889091492e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.765625,"distances_sum":1582.3333838038054}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9540979853479858,"seconds":7.165595889091492e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.765625,"distances_sum":1582.3333838038054}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91796875,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9540979853479858,"seconds":7.165595889091492e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.765625,"distances_sum":1582.3333838038054}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.400390625, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.400390625,"f1":null,"seconds":4.081055521965027e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":6.3203125,"distances_sum":616.8998147755407}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8563840673215681,"seconds":5.213543772697449e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.109375,"distances_sum":1223.9758332208437}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.8563840673215681,"seconds":5.213543772697449e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.109375,"distances_sum":1223.9758332208437}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9214171245421253,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.5703125,"distances_sum":1442.5872287341022}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9337199259074266,"seconds":6.124377250671387e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7890625,"distances_sum":1503.7948146029764}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8857421875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8857421875,"f1":0.9337199259074266,"seconds":6.124377250671387e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7890625,"distances_sum":1503.7948146029764}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9574805402930407,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7890625,"distances_sum":1630.629104687507}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9380697427572433,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.6796875,"distances_sum":1535.0473231943754}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9574805402930407,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7890625,"distances_sum":1630.629104687507}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9248046875,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9574805402930407,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7890625,"distances_sum":1630.629104687507}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.681640625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.681640625,"f1":0.7964545870795877,"seconds":8.623301982879639e-5,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":7.8125,"distances_sum":1009.6656730462297}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7932133838383846,"seconds":5.02169132232666e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":7.765625,"distances_sum":973.8627313387233}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.681640625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.681640625,"f1":0.7964545870795877,"seconds":8.623301982879639e-5,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":7.8125,"distances_sum":1009.6656730462297}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9358173076923083,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.65625,"distances_sum":1439.0895299986312}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9057895229770236,"seconds":5.671754479408264e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.390625,"distances_sum":1323.7888360947397}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7099609375, conf: {"ssize":6,"bsize":4}, perf: {"precision":null,"recall":0.7099609375,"f1":null,"seconds":4.9639493227005005e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":7.8515625,"distances_sum":1069.8078140079613}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7021484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7021484375,"f1":0.8151967823842832,"seconds":4.742294549942017e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":7.9375,"distances_sum":1060.6728501314426}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8876953125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8876953125,"f1":0.9358173076923083,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.65625,"distances_sum":1439.0895299986312}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9390911172161179,"seconds":5.153939127922058e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.6484375,"distances_sum":1461.4606744773957}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9671130952380957,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.84375,"distances_sum":1598.000739502414}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9671130952380957,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.84375,"distances_sum":1598.000739502414}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9671130952380957,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.84375,"distances_sum":1598.000739502414}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.212890625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.212890625,"f1":null,"seconds":3.339722752571106e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":6.390625,"distances_sum":340.36154241170544}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.212890625,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.212890625,"f1":null,"seconds":3.339722752571106e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":6.390625,"distances_sum":340.36154241170544}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5966796875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5966796875,"f1":0.7297242687867693,"seconds":4.26173210144043e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":7.4296875,"distances_sum":1003.8758886819659}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8745228729603738,"seconds":5.098059773445129e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.1875,"distances_sum":1364.4216368975578}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.791015625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.791015625,"f1":0.8745228729603738,"seconds":5.098059773445129e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.1875,"distances_sum":1364.4216368975578}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9570741758241765,"seconds":5.619600415229797e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.8359375,"distances_sum":1716.3972559259457}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9620592948717954,"seconds":6.413087248802185e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.828125,"distances_sum":1750.1138373624283}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9156057484182493,"seconds":6.115064024925232e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.359375,"distances_sum":1546.2742849389126}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9620592948717954,"seconds":6.413087248802185e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.828125,"distances_sum":1750.1138373624283}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9620592948717954,"seconds":6.413087248802185e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.828125,"distances_sum":1750.1138373624283}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.181640625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.181640625,"f1":null,"seconds":3.473833203315735e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":6.0625,"distances_sum":293.03210619571166}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4306640625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4306640625,"f1":null,"seconds":3.8817524909973145e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":6.6953125,"distances_sum":629.8134919654793}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4306640625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.4306640625,"f1":null,"seconds":3.8817524909973145e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":6.6953125,"distances_sum":629.8134919654793}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5751953125, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.5751953125,"f1":null,"seconds":4.384666681289673e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":7.203125,"distances_sum":848.6476048548096}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7912330724830733,"seconds":4.5727938413619995e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":7.5390625,"distances_sum":1063.3305448436115}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8499795343545351,"seconds":4.993751645088196e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":7.8671875,"distances_sum":1218.7652487883722}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7529296875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7529296875,"f1":0.8499795343545351,"seconds":4.993751645088196e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":7.8671875,"distances_sum":1218.7652487883722}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9652930402930407,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8125,"distances_sum":1673.9224313909453}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9482371794871798,"seconds":6.5248459577560425e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.6953125,"distances_sum":1588.3363309536544}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8957563270063278,"seconds":5.234032869338989e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.1484375,"distances_sum":1361.1377960626132}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9392227564102569,"seconds":5.401670932769775e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.5859375,"distances_sum":1555.8497817614516}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9652930402930407,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8125,"distances_sum":1673.9224313909453}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9652930402930407,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8125,"distances_sum":1673.9224313909453}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.79296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.79296875,"f1":0.8766915376290383,"seconds":4.995614290237427e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.1953125,"distances_sum":1325.7616303380523}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.806640625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.806640625,"f1":0.8863641566766575,"seconds":5.377456545829773e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.234375,"distances_sum":1348.8384244886058}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8039002664002671,"seconds":4.686415195465088e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.7890625,"distances_sum":1121.3645078003428}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.806640625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.806640625,"f1":0.8863641566766575,"seconds":5.377456545829773e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.234375,"distances_sum":1348.8384244886058}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9568853021978029,"seconds":6.413087248802185e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.765625,"distances_sum":1627.785660818258}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9646806318681324,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.828125,"distances_sum":1645.6883932267228}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9082391566766576,"seconds":5.245208740234375e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.3046875,"distances_sum":1418.1507300376816}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9426854395604402,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6171875,"distances_sum":1569.6991364912897}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9086881868131875,"seconds":6.377696990966797e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.2890625,"distances_sum":1421.58048397881}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9646806318681324,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.828125,"distances_sum":1645.6883932267228}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.972750686813187,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8515625,"distances_sum":1698.0635619698623}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9709478021978025,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8671875,"distances_sum":1685.6045739430194}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9775125915750918,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8828125,"distances_sum":1735.4984338410525}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9775125915750918,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8828125,"distances_sum":1735.4984338410525}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9775125915750918,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8828125,"distances_sum":1735.4984338410525}}, n: 9
mean(cfft.distances) = 0.3434395896316078
mean(cdnet.distances) = 0.8613737468056888
mean(crand.distances) = 0.3420701706497359
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8688888888888888
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.9044444444444445
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.888888888888889
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8444444444444444
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9022222222222221
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9111111111111111
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.88
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8622222222222221
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9311111111111111
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8911111111111111
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9133333333333334
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9199999999999999
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9355555555555556
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.851111111111111
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8711111111111111
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9355555555555556
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8666666666666666
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9244444444444445
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9333333333333332
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8999999999999999
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9066666666666667
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8777777777777778
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8577777777777778
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.891111111111111
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9066666666666666
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8577777777777778
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 8, 6]]
** centroid: 1, normalized-entropy: 0.9852281360342514, [(2, 8), (3, 6)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 9, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 11, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 3, 1, 2, 1, 2, 3, 2, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 8, 6]]
** centroid: 1, normalized-entropy: 0.9852281360342514, [(2, 8), (3, 6)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 9, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 11, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 3, 1, 2, 1, 2, 3, 2, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 8, 6]]
** centroid: 1, normalized-entropy: 0.9852281360342514, [(2, 8), (3, 6)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 9, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 11, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 3, 1, 2, 1, 2, 3, 2, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 8, 6]]
** centroid: 1, normalized-entropy: 0.9852281360342514, [(2, 8), (3, 6)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 9, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 11, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 3, 1, 2, 1, 2, 3, 2, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 8, 6]]
** centroid: 1, normalized-entropy: 0.9852281360342514, [(2, 8), (3, 6)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 9, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 11, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 3, 1, 2, 1, 2, 3, 2, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 8, 6]]
** centroid: 1, normalized-entropy: 0.9852281360342514, [(2, 8), (3, 6)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 9, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 11, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 3, 1, 2, 1, 2, 3, 2, 3, 1]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 8, 6]]
** centroid: 1, normalized-entropy: 0.9852281360342514, [(2, 8), (3, 6)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 9, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 11, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 3, 1, 2, 1, 2, 3, 2, 3, 1]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.5611095135410626] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 24, 22]]
** centroid: 1, normalized-entropy: 0.9986359641585719, [(2, 24), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 8: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 12: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
finished with 14 centroids; started with 12
acc = 0.9
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.22694830836608135] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22694830836608135, 0.1846330821544848] ***
*** starting iteration: 2; err: [Inf, 0.22694830836608135, 0.1846330821544848] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22694830836608135, 0.1846330821544848, 0.18374061341100056] ***
*** finished computation of 7 references, err: [Inf, 0.22694830836608135, 0.1846330821544848, 0.18374061341100056] ***
*** center 1: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 70, 30]]
** centroid: 2, normalized-entropy: 0.8812908992306927, [(2, 70), (3, 30)]
*** center 3: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 45, 0]]
** centroid: 4, normalized-entropy: 0.961236604722876, [(1, 72), (2, 45)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [51, 63, 0]]
** centroid: 5, normalized-entropy: 0.9919924034538556, [(1, 51), (2, 63)]
*** center 6: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [9, 64, 0]]
** centroid: 7, normalized-entropy: 0.5387379148665815, [(1, 9), (2, 64)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22745914677543952] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22745914677543952, 0.19323674399285456] ***
*** starting iteration: 2; err: [Inf, 0.22745914677543952, 0.19323674399285456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22745914677543952, 0.19323674399285456, 0.18997573007286914] ***
*** starting iteration: 3; err: [Inf, 0.22745914677543952, 0.19323674399285456, 0.18997573007286914] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22745914677543952, 0.19323674399285456, 0.18997573007286914, 0.1896434766464159] ***
*** finished computation of 7 references, err: [Inf, 0.22745914677543952, 0.19323674399285456, 0.18997573007286914, 0.1896434766464159] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [101, 3, 0]]
** centroid: 1, normalized-entropy: 0.18857195602479668, [(1, 101), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 5, 0]]
** centroid: 2, normalized-entropy: 0.3533593350214213, [(1, 70), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 67, 30]]
** centroid: 3, normalized-entropy: 0.892338681064176, [(2, 67), (3, 30)]
*** center 4: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 90, 0]]
** centroid: 6, normalized-entropy: 0.2055925081850832, [(1, 3), (2, 90)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 86, 0]]
** centroid: 7, normalized-entropy: 0.21265863988163503, [(1, 3), (2, 86)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24989251810303334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24989251810303334, 0.19483186178240294] ***
*** starting iteration: 2; err: [Inf, 0.24989251810303334, 0.19483186178240294] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24989251810303334, 0.19483186178240294, 0.18943447371835875] ***
*** starting iteration: 3; err: [Inf, 0.24989251810303334, 0.19483186178240294, 0.18943447371835875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24989251810303334, 0.19483186178240294, 0.18943447371835875, 0.1881728329314575] ***
*** finished computation of 7 references, err: [Inf, 0.24989251810303334, 0.19483186178240294, 0.18943447371835875, 0.1881728329314575] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [33, 66, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 33), (2, 66)]
*** center 2: selecting labels [1] (freq >= 2) [from [67, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 81, 22]]
** centroid: 3, normalized-entropy: 0.7482932859824888, [(2, 81), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [82, 18, 0]]
** centroid: 5, normalized-entropy: 0.6800770457282798, [(1, 82), (2, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 91, 0]]
** centroid: 7, normalized-entropy: 0.2039058755048202, [(1, 3), (2, 91)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20090791116560902] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20090791116560902, 0.1761132742099285] ***
*** starting iteration: 2; err: [Inf, 0.20090791116560902, 0.1761132742099285] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20090791116560902, 0.1761132742099285, 0.15729946984668952] ***
*** starting iteration: 3; err: [Inf, 0.20090791116560902, 0.1761132742099285, 0.15729946984668952] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20090791116560902, 0.1761132742099285, 0.15729946984668952, 0.14893917382838814] ***
*** finished computation of 7 references, err: [Inf, 0.20090791116560902, 0.1761132742099285, 0.15729946984668952, 0.14893917382838814] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [17, 75, 0]]
** centroid: 1, normalized-entropy: 0.6904285855304167, [(1, 17), (2, 75)]
*** center 2: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [84, 5, 0]]
** centroid: 4, normalized-entropy: 0.3120895659343452, [(1, 84), (2, 5)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 55, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 83, 30]]
** centroid: 6, normalized-entropy: 0.8349135582554505, [(2, 83), (3, 30)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [79, 33, 0]]
** centroid: 7, normalized-entropy: 0.8746434484431391, [(1, 79), (2, 33)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22911117594435007] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22911117594435007, 0.17527878016018417] ***
*** starting iteration: 2; err: [Inf, 0.22911117594435007, 0.17527878016018417] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22911117594435007, 0.17527878016018417, 0.1616725184329167] ***
*** starting iteration: 3; err: [Inf, 0.22911117594435007, 0.17527878016018417, 0.1616725184329167] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22911117594435007, 0.17527878016018417, 0.1616725184329167, 0.15392690604884943] ***
*** finished computation of 7 references, err: [Inf, 0.22911117594435007, 0.17527878016018417, 0.1616725184329167, 0.15392690604884943] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [47, 41, 0]]
** centroid: 1, normalized-entropy: 0.99664402524877, [(1, 47), (2, 41)]
*** center 2: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 57, 0]]
** centroid: 3, normalized-entropy: 0.9984816077977791, [(1, 52), (2, 57)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [86, 37, 0]]
** centroid: 4, normalized-entropy: 0.8822824449111785, [(1, 86), (2, 37)]
*** center 5: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 107, 30]]
** centroid: 7, normalized-entropy: 0.7582971529373276, [(2, 107), (3, 30)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21377062364418556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21377062364418556, 0.18500080160137594] ***
*** starting iteration: 2; err: [Inf, 0.21377062364418556, 0.18500080160137594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21377062364418556, 0.18500080160137594, 0.17570549656352172] ***
*** starting iteration: 3; err: [Inf, 0.21377062364418556, 0.18500080160137594, 0.17570549656352172] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21377062364418556, 0.18500080160137594, 0.17570549656352172, 0.1639551073159168] ***
*** finished computation of 7 references, err: [Inf, 0.21377062364418556, 0.18500080160137594, 0.17570549656352172, 0.1639551073159168] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 80, 0]]
** centroid: 1, normalized-entropy: 0.9897812474673146, [(1, 63), (2, 80)]
*** center 2: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 22, 0]]
** centroid: 3, normalized-entropy: 0.8390040613676978, [(1, 60), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [41, 29, 0]]
** centroid: 4, normalized-entropy: 0.9786961448300948, [(1, 41), (2, 29)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 126, 22]]
** centroid: 5, normalized-entropy: 0.6064481901491525, [(2, 126), (3, 22)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29296961121048565] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29296961121048565, 0.23716440825938462] ***
*** starting iteration: 2; err: [Inf, 0.29296961121048565, 0.23716440825938462] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29296961121048565, 0.23716440825938462, 0.23685099946771254] ***
*** finished computation of 3 references, err: [Inf, 0.29296961121048565, 0.23716440825938462, 0.23685099946771254] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [1, 181, 30]]
** centroid: 1, normalized-entropy: 0.5899199307436035, [(2, 181), (3, 30)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [123, 47, 0]]
** centroid: 2, normalized-entropy: 0.8505970526931401, [(1, 123), (2, 47)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [261, 23, 0]]
** centroid: 3, normalized-entropy: 0.4056436332580232, [(1, 261), (2, 23)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5278329711709021] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5278329711709021, 0.2667991131784274] ***
*** starting iteration: 2; err: [Inf, 0.5278329711709021, 0.2667991131784274] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5278329711709021, 0.2667991131784274, 0.24673074686891402] ***
*** starting iteration: 3; err: [Inf, 0.5278329711709021, 0.2667991131784274, 0.24673074686891402] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5278329711709021, 0.2667991131784274, 0.24673074686891402, 0.24264649143149292] ***
*** starting iteration: 4; err: [Inf, 0.5278329711709021, 0.2667991131784274, 0.24673074686891402, 0.24264649143149292] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5278329711709021, 0.2667991131784274, 0.24673074686891402, 0.24264649143149292, 0.24184282788395256] ***
*** finished computation of 3 references, err: [Inf, 0.5278329711709021, 0.2667991131784274, 0.24673074686891402, 0.24264649143149292, 0.24184282788395256] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [206, 47, 0]]
** centroid: 1, normalized-entropy: 0.6925398805101523, [(1, 206), (2, 47)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 171, 30]]
** centroid: 2, normalized-entropy: 0.6079696120060726, [(2, 171), (3, 30)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [189, 24, 0]]
** centroid: 3, normalized-entropy: 0.5079353563991225, [(1, 189), (2, 24)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.42251753316971585] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42251753316971585, 0.2597814378073101] ***
*** starting iteration: 2; err: [Inf, 0.42251753316971585, 0.2597814378073101] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42251753316971585, 0.2597814378073101, 0.23878071930244107] ***
*** starting iteration: 3; err: [Inf, 0.42251753316971585, 0.2597814378073101, 0.23878071930244107] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42251753316971585, 0.2597814378073101, 0.23878071930244107, 0.2357945839163737] ***
*** starting iteration: 4; err: [Inf, 0.42251753316971585, 0.2597814378073101, 0.23878071930244107, 0.2357945839163737] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42251753316971585, 0.2597814378073101, 0.23878071930244107, 0.2357945839163737, 0.23508198490517138] ***
*** finished computation of 3 references, err: [Inf, 0.42251753316971585, 0.2597814378073101, 0.23878071930244107, 0.2357945839163737, 0.23508198490517138] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [68, 170, 22]]
** centroid: 1, normalized-entropy: 0.7623674748092217, [(1, 68), (2, 170), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [204, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [116, 87, 0]]
** centroid: 3, normalized-entropy: 0.9852281360342514, [(1, 116), (2, 87)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2656065520465824] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2656065520465824, 0.21161497908388474] ***
*** starting iteration: 2; err: [Inf, 0.2656065520465824, 0.21161497908388474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2656065520465824, 0.21161497908388474, 0.19301255748085622] ***
*** starting iteration: 3; err: [Inf, 0.2656065520465824, 0.21161497908388474, 0.19301255748085622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2656065520465824, 0.21161497908388474, 0.19301255748085622, 0.18751369615144156] ***
*** starting iteration: 4; err: [Inf, 0.2656065520465824, 0.21161497908388474, 0.19301255748085622, 0.18751369615144156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2656065520465824, 0.21161497908388474, 0.19301255748085622, 0.18751369615144156, 0.18560317918090513] ***
*** starting iteration: 5; err: [Inf, 0.2656065520465824, 0.21161497908388474, 0.19301255748085622, 0.18751369615144156, 0.18560317918090513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2656065520465824, 0.21161497908388474, 0.19301255748085622, 0.18751369615144156, 0.18560317918090513, 0.18442208030437296] ***
*** starting iteration: 6; err: [Inf, 0.2656065520465824, 0.21161497908388474, 0.19301255748085622, 0.18751369615144156, 0.18560317918090513, 0.18442208030437296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2656065520465824, 0.21161497908388474, 0.19301255748085622, 0.18751369615144156, 0.18560317918090513, 0.18442208030437296, 0.1840601117243884] ***
*** finished computation of 7 references, err: [Inf, 0.2656065520465824, 0.21161497908388474, 0.19301255748085622, 0.18751369615144156, 0.18560317918090513, 0.18442208030437296, 0.1840601117243884] ***
*** center 1: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [70, 16, 0]]
** centroid: 3, normalized-entropy: 0.6931274153282881, [(1, 70), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [67, 4, 0]]
** centroid: 4, normalized-entropy: 0.3127333763966432, [(1, 67), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [26, 78, 0]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(1, 26), (2, 78)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 92, 30]]
** centroid: 6, normalized-entropy: 0.8047175193210769, [(2, 92), (3, 30)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [25, 61, 0]]
** centroid: 7, normalized-entropy: 0.869620774054375, [(1, 25), (2, 61)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24173341607612123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24173341607612123, 0.19697585650000615] ***
*** starting iteration: 2; err: [Inf, 0.24173341607612123, 0.19697585650000615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24173341607612123, 0.19697585650000615, 0.1905953712716721] ***
*** starting iteration: 3; err: [Inf, 0.24173341607612123, 0.19697585650000615, 0.1905953712716721] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24173341607612123, 0.19697585650000615, 0.1905953712716721, 0.1868779213842133] ***
*** starting iteration: 4; err: [Inf, 0.24173341607612123, 0.19697585650000615, 0.1905953712716721, 0.1868779213842133] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24173341607612123, 0.19697585650000615, 0.1905953712716721, 0.1868779213842133, 0.1847906119198534] ***
*** starting iteration: 5; err: [Inf, 0.24173341607612123, 0.19697585650000615, 0.1905953712716721, 0.1868779213842133, 0.1847906119198534] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24173341607612123, 0.19697585650000615, 0.1905953712716721, 0.1868779213842133, 0.1847906119198534, 0.18412473305537627] ***
*** finished computation of 7 references, err: [Inf, 0.24173341607612123, 0.19697585650000615, 0.1905953712716721, 0.1868779213842133, 0.1847906119198534, 0.18412473305537627] ***
*** center 1: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [31, 83, 0]]
** centroid: 2, normalized-entropy: 0.8442202034297602, [(1, 31), (2, 83)]
*** center 3: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [74, 21, 0]]
** centroid: 4, normalized-entropy: 0.762084924805724, [(1, 74), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [18, 71, 0]]
** centroid: 5, normalized-entropy: 0.7263997735417457, [(1, 18), (2, 71)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [64, 5, 0]]
** centroid: 6, normalized-entropy: 0.3750514064240124, [(1, 64), (2, 5)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 62, 30]]
** centroid: 7, normalized-entropy: 0.9108783787500366, [(2, 62), (3, 30)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2913720904496209] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2913720904496209, 0.2024745538668788] ***
*** starting iteration: 2; err: [Inf, 0.2913720904496209, 0.2024745538668788] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2913720904496209, 0.2024745538668788, 0.19821161117315336] ***
*** starting iteration: 3; err: [Inf, 0.2913720904496209, 0.2024745538668788, 0.19821161117315336] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2913720904496209, 0.2024745538668788, 0.19821161117315336, 0.19434355164429862] ***
*** starting iteration: 4; err: [Inf, 0.2913720904496209, 0.2024745538668788, 0.19821161117315336, 0.19434355164429862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2913720904496209, 0.2024745538668788, 0.19821161117315336, 0.19434355164429862, 0.19044748792963065] ***
*** starting iteration: 5; err: [Inf, 0.2913720904496209, 0.2024745538668788, 0.19821161117315336, 0.19434355164429862, 0.19044748792963065] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2913720904496209, 0.2024745538668788, 0.19821161117315336, 0.19434355164429862, 0.19044748792963065, 0.18598191538334138] ***
*** starting iteration: 6; err: [Inf, 0.2913720904496209, 0.2024745538668788, 0.19821161117315336, 0.19434355164429862, 0.19044748792963065, 0.18598191538334138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2913720904496209, 0.2024745538668788, 0.19821161117315336, 0.19434355164429862, 0.19044748792963065, 0.18598191538334138, 0.18498697011267998] ***
*** finished computation of 7 references, err: [Inf, 0.2913720904496209, 0.2024745538668788, 0.19821161117315336, 0.19434355164429862, 0.19044748792963065, 0.18598191538334138, 0.18498697011267998] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [60, 43, 0]]
** centroid: 1, normalized-entropy: 0.98025955447738, [(1, 60), (2, 43)]
*** center 2: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 102, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [91, 27, 0]]
** centroid: 5, normalized-entropy: 0.7759373305779853, [(1, 91), (2, 27)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [74, 13, 0]]
** centroid: 6, normalized-entropy: 0.6084002154765848, [(1, 74), (2, 13)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 72, 22]]
** centroid: 7, normalized-entropy: 0.7849920887641585, [(2, 72), (3, 22)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22905941007347] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22905941007347, 0.1900765542234588] ***
*** starting iteration: 2; err: [Inf, 0.22905941007347, 0.1900765542234588] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22905941007347, 0.1900765542234588, 0.18813926110242693] ***
*** starting iteration: 3; err: [Inf, 0.22905941007347, 0.1900765542234588, 0.18813926110242693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22905941007347, 0.1900765542234588, 0.18813926110242693, 0.18772864392427197] ***
*** finished computation of 7 references, err: [Inf, 0.22905941007347, 0.1900765542234588, 0.18813926110242693, 0.18772864392427197] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 79, 30]]
** centroid: 2, normalized-entropy: 0.8488687562058559, [(2, 79), (3, 30)]
*** center 3: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [79, 26, 0]]
** centroid: 4, normalized-entropy: 0.8074825483550796, [(1, 79), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 86, 0]]
** centroid: 5, normalized-entropy: 0.7695944821271463, [(1, 25), (2, 86)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [22, 60, 0]]
** centroid: 6, normalized-entropy: 0.8390040613676978, [(1, 22), (2, 60)]
*** center 7: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2532898223926795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2532898223926795, 0.19698969194472865] ***
*** starting iteration: 2; err: [Inf, 0.2532898223926795, 0.19698969194472865] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2532898223926795, 0.19698969194472865, 0.19244193351468716] ***
*** starting iteration: 3; err: [Inf, 0.2532898223926795, 0.19698969194472865, 0.19244193351468716] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2532898223926795, 0.19698969194472865, 0.19244193351468716, 0.19135763606048192] ***
*** finished computation of 7 references, err: [Inf, 0.2532898223926795, 0.19698969194472865, 0.19244193351468716, 0.19135763606048192] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [82, 7, 0]]
** centroid: 1, normalized-entropy: 0.3974104103699249, [(1, 82), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 18, 0]]
** centroid: 2, normalized-entropy: 0.7897492536625221, [(1, 58), (2, 18)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 70, 30]]
** centroid: 3, normalized-entropy: 0.8812908992306927, [(2, 70), (3, 30)]
*** center 4: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 45, 0]]
** centroid: 5, normalized-entropy: 0.9817140837953373, [(1, 62), (2, 45)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [90, 5, 0]]
** centroid: 6, normalized-entropy: 0.2974722489192896, [(1, 90), (2, 5)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 97, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2133301536830469] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2133301536830469, 0.1865373359660784] ***
*** starting iteration: 2; err: [Inf, 0.2133301536830469, 0.1865373359660784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2133301536830469, 0.1865373359660784, 0.18463048252041103] ***
*** starting iteration: 3; err: [Inf, 0.2133301536830469, 0.1865373359660784, 0.18463048252041103] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2133301536830469, 0.1865373359660784, 0.18463048252041103, 0.18394582858239336] ***
*** finished computation of 7 references, err: [Inf, 0.2133301536830469, 0.1865373359660784, 0.18463048252041103, 0.18394582858239336] ***
*** center 1: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 85, 22]]
** centroid: 2, normalized-entropy: 0.7330022650766125, [(2, 85), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [87, 2, 0]]
** centroid: 3, normalized-entropy: 0.1551032721030341, [(1, 87), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [61, 46, 0]]
** centroid: 4, normalized-entropy: 0.9857770091118137, [(1, 61), (2, 46)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 71, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [51, 53, 0]]
** centroid: 7, normalized-entropy: 0.9997332130219014, [(1, 51), (2, 53)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19455740845820926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19455740845820926, 0.15958346313218008] ***
*** finished computation of 7 references, err: [Inf, 0.19455740845820926, 0.15958346313218008] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [82, 5, 0]]
** centroid: 1, normalized-entropy: 0.3173238998358585, [(1, 82), (2, 5)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 77, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 37, 30]]
** centroid: 3, normalized-entropy: 0.9921116920021501, [(2, 37), (3, 30)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [1, 62, 0]]
** centroid: 4, normalized-entropy: 0.11759466565886466, [(1, 1), (2, 62)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [128, 17, 0]]
** centroid: 5, normalized-entropy: 0.5213789637993774, [(1, 128), (2, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [5, 53, 0]]
** centroid: 6, normalized-entropy: 0.4236805715709106, [(1, 5), (2, 53)]
*** center 7: selecting labels [1] (freq >= 1) [from [169, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24910525164554367] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24910525164554367, 0.16802832926239544] ***
*** finished computation of 7 references, err: [Inf, 0.24910525164554367, 0.16802832926239544] ***
*** center 1: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [17, 131, 30]]
** centroid: 2, normalized-entropy: 0.6827104822100931, [(1, 17), (2, 131), (3, 30)]
*** center 3: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [37, 35, 0]]
** centroid: 4, normalized-entropy: 0.9994433330902989, [(1, 37), (2, 35)]
*** center 5: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [33, 76, 0]]
** centroid: 6, normalized-entropy: 0.8846293067903075, [(1, 33), (2, 76)]
*** center 7: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22198579925939027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22198579925939027, 0.17257436899457132] ***
*** finished computation of 7 references, err: [Inf, 0.22198579925939027, 0.17257436899457132] ***
*** center 1: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [28, 40, 0]]
** centroid: 2, normalized-entropy: 0.9774178175281716, [(1, 28), (2, 40)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [31, 40, 0]]
** centroid: 3, normalized-entropy: 0.9883779727795042, [(1, 31), (2, 40)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 160, 22]]
** centroid: 4, normalized-entropy: 0.5318826028800231, [(2, 160), (3, 22)]
*** center 5: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [146, 17, 0]]
** centroid: 6, normalized-entropy: 0.4824627928952599, [(1, 146), (2, 17)]
*** center 7: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24245901038176618] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24245901038176618, 0.19568898298011325] ***
*** finished computation of 7 references, err: [Inf, 0.24245901038176618, 0.19568898298011325] ***
*** center 1: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [93, 11, 0]]
** centroid: 2, normalized-entropy: 0.48702128315977294, [(1, 93), (2, 11)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [53, 44, 0]]
** centroid: 3, normalized-entropy: 0.9937811379408324, [(1, 53), (2, 44)]
*** center 4: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [65, 4, 0]]
** centroid: 5, normalized-entropy: 0.3193373865339728, [(1, 65), (2, 4)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 92, 30]]
** centroid: 6, normalized-entropy: 0.8047175193210769, [(2, 92), (3, 30)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 100, 0]]
** centroid: 7, normalized-entropy: 0.13923299905509884, [(1, 2), (2, 100)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3975720377848379] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3975720377848379, 0.24178883593356323] ***
*** finished computation of 7 references, err: [Inf, 0.3975720377848379, 0.24178883593356323] ***
*** center 1: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [62, 85, 24]]
** centroid: 2, normalized-entropy: 0.9019538542267723, [(1, 62), (2, 85), (3, 24)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [14, 54, 5]]
** centroid: 3, normalized-entropy: 0.6584197803695375, [(1, 14), (2, 54), (3, 5)]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [5, 85, 1]]
** centroid: 4, normalized-entropy: 0.24822192431079135, [(1, 5), (2, 85), (3, 1)]
*** center 5: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [96, 18, 0]]
** centroid: 7, normalized-entropy: 0.6292492238560344, [(1, 96), (2, 18)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25565598795687533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25565598795687533, 0.19959813004675164] ***
*** finished computation of 7 references, err: [Inf, 0.25565598795687533, 0.19959813004675164] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 87, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 49, 22]]
** centroid: 2, normalized-entropy: 0.893010810044601, [(2, 49), (3, 22)]
*** center 3: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [101, 3, 0]]
** centroid: 4, normalized-entropy: 0.18857195602479668, [(1, 101), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [5, 92, 0]]
** centroid: 5, normalized-entropy: 0.29292995113885967, [(1, 5), (2, 92)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [89, 2, 0]]
** centroid: 6, normalized-entropy: 0.15240699892386778, [(1, 89), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [100, 24, 0]]
** centroid: 7, normalized-entropy: 0.708835673332196, [(1, 100), (2, 24)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25200107111245973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25200107111245973, 0.2036595297459927] ***
*** finished computation of 7 references, err: [Inf, 0.25200107111245973, 0.2036595297459927] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [76, 31, 0]]
** centroid: 1, normalized-entropy: 0.8683587934693187, [(1, 76), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 26, 0]]
** centroid: 2, normalized-entropy: 0.8798813089176428, [(1, 61), (2, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [5, 90, 0]]
** centroid: 3, normalized-entropy: 0.2974722489192896, [(1, 5), (2, 90)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 86, 30]]
** centroid: 4, normalized-entropy: 0.8246578332945033, [(2, 86), (3, 30)]
*** center 5: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [51, 18, 0]]
** centroid: 7, normalized-entropy: 0.828055725379504, [(1, 51), (2, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2891970682900393] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2891970682900393, 0.21315951376100598] ***
*** finished computation of 7 references, err: [Inf, 0.2891970682900393, 0.21315951376100598] ***
*** center 1: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [144, 42, 0]]
** centroid: 2, normalized-entropy: 0.7706290693639406, [(1, 144), (2, 42)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [29, 35, 0]]
** centroid: 3, normalized-entropy: 0.9936507116910402, [(1, 29), (2, 35)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [21, 47, 0]]
** centroid: 4, normalized-entropy: 0.8918107543797084, [(1, 21), (2, 47)]
*** center 5: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [62, 2, 0]]
** centroid: 6, normalized-entropy: 0.2006223243127146, [(1, 62), (2, 2)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 116, 30]]
** centroid: 7, normalized-entropy: 0.7327525499549903, [(2, 116), (3, 30)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2643102820253354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2643102820253354, 0.21553898064874816] ***
*** finished computation of 7 references, err: [Inf, 0.2643102820253354, 0.21553898064874816] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [84, 26, 0]]
** centroid: 1, normalized-entropy: 0.7889406572966208, [(1, 84), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 83, 0]]
** centroid: 2, normalized-entropy: 0.9439528220235028, [(1, 47), (2, 83)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 86, 1]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [141, 16, 0]]
** centroid: 4, normalized-entropy: 0.47502367444430293, [(1, 141), (2, 16)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 46, 6]]
** centroid: 5, normalized-entropy: 0.5159469300074472, [(2, 46), (3, 6)]
*** center 6: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.31129607411979643] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31129607411979643, 0.24545058157426436] ***
*** finished computation of 3 references, err: [Inf, 0.31129607411979643, 0.24545058157426436] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [94, 196, 30]]
** centroid: 1, normalized-entropy: 0.8028498127048511, [(1, 94), (2, 196), (3, 30)]
*** center 2: selecting labels [1] (freq >= 1) [from [180, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [111, 55, 0]]
** centroid: 3, normalized-entropy: 0.9162746999691053, [(1, 111), (2, 55)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.35007593750037713] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35007593750037713, 0.23856020363597855] ***
*** finished computation of 3 references, err: [Inf, 0.35007593750037713, 0.23856020363597855] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [89, 185, 30]]
** centroid: 1, normalized-entropy: 0.8104902873955224, [(1, 89), (2, 185), (3, 30)]
*** center 2: selecting labels [1] (freq >= 1) [from [196, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [110, 57, 0]]
** centroid: 3, normalized-entropy: 0.9260737577728375, [(1, 110), (2, 57)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31245209182287265] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31245209182287265, 0.2438372523737499] ***
*** finished computation of 3 references, err: [Inf, 0.31245209182287265, 0.2438372523737499] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [105, 193, 22]]
** centroid: 1, normalized-entropy: 0.7779551310889143, [(1, 105), (2, 193), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [169, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [114, 64, 0]]
** centroid: 3, normalized-entropy: 0.9423094893103273, [(1, 114), (2, 64)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.21380491936635282] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21380491936635282, 0.16163513617164962] ***
*** starting iteration: 2; err: [Inf, 0.21380491936635282, 0.16163513617164962] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21380491936635282, 0.16163513617164962, 0.15514069035168257] ***
*** starting iteration: 3; err: [Inf, 0.21380491936635282, 0.16163513617164962, 0.15514069035168257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21380491936635282, 0.16163513617164962, 0.15514069035168257, 0.1520018444037171] ***
*** finished computation of 7 references, err: [Inf, 0.21380491936635282, 0.16163513617164962, 0.15514069035168257, 0.1520018444037171] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 52, 30]]
** centroid: 1, normalized-entropy: 0.9474351361840305, [(2, 52), (3, 30)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [112, 10, 0]]
** centroid: 2, normalized-entropy: 0.4090731390438265, [(1, 112), (2, 10)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 80, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [37, 51, 0]]
** centroid: 4, normalized-entropy: 0.9816649485370996, [(1, 37), (2, 51)]
*** center 5: selecting labels [1] (freq >= 1) [from [157, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [79, 7, 0]]
** centroid: 6, normalized-entropy: 0.40707680632541937, [(1, 79), (2, 7)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 51, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19406110793491754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19406110793491754, 0.15260974293354077] ***
*** starting iteration: 2; err: [Inf, 0.19406110793491754, 0.15260974293354077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19406110793491754, 0.15260974293354077, 0.14798238182529763] ***
*** starting iteration: 3; err: [Inf, 0.19406110793491754, 0.15260974293354077, 0.14798238182529763] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19406110793491754, 0.15260974293354077, 0.14798238182529763, 0.1466275358326856] ***
*** finished computation of 7 references, err: [Inf, 0.19406110793491754, 0.15260974293354077, 0.14798238182529763, 0.1466275358326856] ***
*** center 1: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [46, 53, 0]]
** centroid: 2, normalized-entropy: 0.9963906193677697, [(1, 46), (2, 53)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [72, 44, 0]]
** centroid: 3, normalized-entropy: 0.9575534837147484, [(1, 72), (2, 44)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [45, 59, 0]]
** centroid: 4, normalized-entropy: 0.9868884753797076, [(1, 45), (2, 59)]
*** center 5: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 86, 30]]
** centroid: 7, normalized-entropy: 0.8246578332945033, [(2, 86), (3, 30)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1878816287327876] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1878816287327876, 0.15466696044745698] ***
*** starting iteration: 2; err: [Inf, 0.1878816287327876, 0.15466696044745698] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1878816287327876, 0.15466696044745698, 0.15215577081689188] ***
*** starting iteration: 3; err: [Inf, 0.1878816287327876, 0.15466696044745698, 0.15215577081689188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1878816287327876, 0.15466696044745698, 0.15215577081689188, 0.15013428412816268] ***
*** finished computation of 7 references, err: [Inf, 0.1878816287327876, 0.15466696044745698, 0.15215577081689188, 0.15013428412816268] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [99, 2, 0]]
** centroid: 1, normalized-entropy: 0.1403272709905931, [(1, 99), (2, 2)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 94, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [14, 81, 0]]
** centroid: 3, normalized-entropy: 0.6032154068313579, [(1, 14), (2, 81)]
*** center 4: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 55, 22]]
** centroid: 5, normalized-entropy: 0.8631205685666311, [(2, 55), (3, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [64, 22, 0]]
** centroid: 6, normalized-entropy: 0.8203636429576731, [(1, 64), (2, 22)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [91, 3, 0]]
** centroid: 7, normalized-entropy: 0.2039058755048202, [(1, 91), (2, 3)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3075721084864603] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3075721084864603, 0.2393822370015935] ***
*** starting iteration: 2; err: [Inf, 0.3075721084864603, 0.2393822370015935] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3075721084864603, 0.2393822370015935, 0.23706593298403597] ***
*** starting iteration: 3; err: [Inf, 0.3075721084864603, 0.2393822370015935, 0.23706593298403597] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3075721084864603, 0.2393822370015935, 0.23706593298403597, 0.23694621036689192] ***
*** finished computation of 3 references, err: [Inf, 0.3075721084864603, 0.2393822370015935, 0.23706593298403597, 0.23694621036689192] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [250, 29, 0]]
** centroid: 1, normalized-entropy: 0.4813703440004373, [(1, 250), (2, 29)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [135, 34, 0]]
** centroid: 2, normalized-entropy: 0.7242886540077837, [(1, 135), (2, 34)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 188, 30]]
** centroid: 3, normalized-entropy: 0.5779576184299016, [(2, 188), (3, 30)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30854970735052356] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30854970735052356, 0.25853258904315407] ***
*** starting iteration: 2; err: [Inf, 0.30854970735052356, 0.25853258904315407] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30854970735052356, 0.25853258904315407, 0.244821029490438] ***
*** starting iteration: 3; err: [Inf, 0.30854970735052356, 0.25853258904315407, 0.244821029490438] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30854970735052356, 0.25853258904315407, 0.244821029490438, 0.24034864394094746] ***
*** finished computation of 3 references, err: [Inf, 0.30854970735052356, 0.25853258904315407, 0.244821029490438, 0.24034864394094746] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [256, 16, 0]]
** centroid: 1, normalized-entropy: 0.32275695889739825, [(1, 256), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [139, 54, 0]]
** centroid: 2, normalized-entropy: 0.8551682588981592, [(1, 139), (2, 54)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 172, 30]]
** centroid: 3, normalized-entropy: 0.6061112071230008, [(2, 172), (3, 30)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30219770186878125] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30219770186878125, 0.24361741017533475] ***
*** starting iteration: 2; err: [Inf, 0.30219770186878125, 0.24361741017533475] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30219770186878125, 0.24361741017533475, 0.236312214352157] ***
*** starting iteration: 3; err: [Inf, 0.30219770186878125, 0.24361741017533475, 0.236312214352157] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30219770186878125, 0.24361741017533475, 0.236312214352157, 0.23479731553241143] ***
*** finished computation of 3 references, err: [Inf, 0.30219770186878125, 0.24361741017533475, 0.236312214352157, 0.23479731553241143] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [237, 21, 0]]
** centroid: 1, normalized-entropy: 0.40707680632541937, [(1, 237), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [151, 44, 0]]
** centroid: 2, normalized-entropy: 0.7703348939643387, [(1, 151), (2, 44)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 192, 22]]
** centroid: 3, normalized-entropy: 0.4778207445858079, [(2, 192), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.22917827291766535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22917827291766535, 0.19365822322884793] ***
*** starting iteration: 2; err: [Inf, 0.22917827291766535, 0.19365822322884793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22917827291766535, 0.19365822322884793, 0.19050505424726633] ***
*** starting iteration: 3; err: [Inf, 0.22917827291766535, 0.19365822322884793, 0.19050505424726633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22917827291766535, 0.19365822322884793, 0.19050505424726633, 0.18952229487368497] ***
*** finished computation of 7 references, err: [Inf, 0.22917827291766535, 0.19365822322884793, 0.19050505424726633, 0.18952229487368497] ***
*** center 1: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 77, 30]]
** centroid: 2, normalized-entropy: 0.8559596826463527, [(2, 77), (3, 30)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [87, 4, 0]]
** centroid: 3, normalized-entropy: 0.26014536394771426, [(1, 87), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [90, 4, 0]]
** centroid: 4, normalized-entropy: 0.2538784402981617, [(1, 90), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [6, 83, 0]]
** centroid: 5, normalized-entropy: 0.35620480393132253, [(1, 6), (2, 83)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [21, 83, 0]]
** centroid: 6, normalized-entropy: 0.7257576154473545, [(1, 21), (2, 83)]
*** center 7: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24089401759726667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24089401759726667, 0.19613934118116366] ***
*** starting iteration: 2; err: [Inf, 0.24089401759726667, 0.19613934118116366] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24089401759726667, 0.19613934118116366, 0.19322120912151056] ***
*** starting iteration: 3; err: [Inf, 0.24089401759726667, 0.19613934118116366, 0.19322120912151056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24089401759726667, 0.19613934118116366, 0.19322120912151056, 0.19284202231023032] ***
*** finished computation of 7 references, err: [Inf, 0.24089401759726667, 0.19613934118116366, 0.19322120912151056, 0.19284202231023032] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 71, 30]]
** centroid: 1, normalized-entropy: 0.8776296673746861, [(2, 71), (3, 30)]
*** center 2: selecting labels [1] (freq >= 1) [from [123, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [84, 1, 0]]
** centroid: 4, normalized-entropy: 0.0922772477445739, [(1, 84), (2, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [73, 5, 0]]
** centroid: 5, normalized-entropy: 0.34351974100740135, [(1, 73), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [23, 84, 0]]
** centroid: 6, normalized-entropy: 0.7508446639457529, [(1, 23), (2, 84)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [13, 81, 0]]
** centroid: 7, normalized-entropy: 0.57976367540648, [(1, 13), (2, 81)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2320100438963996] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2320100438963996, 0.1909016076471193] ***
*** starting iteration: 2; err: [Inf, 0.2320100438963996, 0.1909016076471193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2320100438963996, 0.1909016076471193, 0.18926945670130502] ***
*** starting iteration: 3; err: [Inf, 0.2320100438963996, 0.1909016076471193, 0.18926945670130502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2320100438963996, 0.1909016076471193, 0.18926945670130502, 0.18918733886545008] ***
*** finished computation of 7 references, err: [Inf, 0.2320100438963996, 0.1909016076471193, 0.18926945670130502, 0.18918733886545008] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [25, 75, 0]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(1, 25), (2, 75)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [72, 3, 0]]
** centroid: 2, normalized-entropy: 0.24229218908241482, [(1, 72), (2, 3)]
*** center 3: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 75, 22]]
** centroid: 4, normalized-entropy: 0.772398436030307, [(2, 75), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [9, 96, 0]]
** centroid: 5, normalized-entropy: 0.4220005168831531, [(1, 9), (2, 96)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [85, 8, 0]]
** centroid: 6, normalized-entropy: 0.42304881571335795, [(1, 85), (2, 8)]
*** center 7: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9460028891166615, 0.9350008691326056, 0.9319768870667074, 0.928017838197479, 0.919011826197455, 0.9159758560956166, 0.903007798217379, 0.8989708271145397, 0.8960157762552973, 0.8720097342851835, 0.8559817302332272, 0.8530086973200746, 0.8030245814676952, 0.7659995324665984]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9460028891166615
finished with 15
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.22277631545082774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22277631545082774, 0.17506619630375872] ***
*** finished computation of 7 references, err: [Inf, 0.22277631545082774, 0.17506619630375872] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [42, 31, 0]]
** centroid: 1, normalized-entropy: 0.9835585673909616, [(1, 42), (2, 31)]
*** center 2: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [189, 17, 0]]
** centroid: 3, normalized-entropy: 0.4110117578674976, [(1, 189), (2, 17)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 27, 30]]
** centroid: 4, normalized-entropy: 0.9980008838722993, [(2, 27), (3, 30)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 68, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [65, 15, 0]]
** centroid: 6, normalized-entropy: 0.6962122601251459, [(1, 65), (2, 15)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 93, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21562390182812374] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21562390182812374, 0.16893191149421985] ***
*** finished computation of 7 references, err: [Inf, 0.21562390182812374, 0.16893191149421985] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 6, 0]]
** centroid: 1, normalized-entropy: 0.42622865699814483, [(1, 63), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [104, 13, 0]]
** centroid: 2, normalized-entropy: 0.5032583347756457, [(1, 104), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 37, 0]]
** centroid: 3, normalized-entropy: 0.9931231770192241, [(1, 45), (2, 37)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [51, 46, 0]]
** centroid: 4, normalized-entropy: 0.998082507968892, [(1, 51), (2, 46)]
*** center 5: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 140, 30]]
** centroid: 7, normalized-entropy: 0.6722948170756378, [(2, 140), (3, 30)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2174477619796187] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2174477619796187, 0.16339342370615348] ***
*** finished computation of 7 references, err: [Inf, 0.2174477619796187, 0.16339342370615348] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 60, 22]]
** centroid: 1, normalized-entropy: 0.8390040613676978, [(2, 60), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 52, 0]]
** centroid: 2, normalized-entropy: 0.9885081741986365, [(1, 67), (2, 52)]
*** center 3: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [29, 71, 0]]
** centroid: 4, normalized-entropy: 0.8687212463394044, [(1, 29), (2, 71)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [61, 13, 0]]
** centroid: 5, normalized-entropy: 0.6705250693158382, [(1, 61), (2, 13)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 61, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [121, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9460028891166615, 0.9350008691326056, 0.9349798900697105, 0.9319768870667074, 0.928017838197479, 0.919011826197455, 0.9159758560956166, 0.903007798217379, 0.8989708271145397, 0.8960157762552973, 0.8720097342851835, 0.8559817302332272, 0.8530086973200746, 0.8030245814676952, 0.7659995324665984]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9460028891166615
finished with 16
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.3203680051180224] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3203680051180224, 0.22162398792294277] ***
*** starting iteration: 2; err: [Inf, 0.3203680051180224, 0.22162398792294277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3203680051180224, 0.22162398792294277, 0.20271802812188236] ***
*** starting iteration: 3; err: [Inf, 0.3203680051180224, 0.22162398792294277, 0.20271802812188236] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3203680051180224, 0.22162398792294277, 0.20271802812188236, 0.1952559753452559] ***
*** finished computation of 7 references, err: [Inf, 0.3203680051180224, 0.22162398792294277, 0.20271802812188236, 0.1952559753452559] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 105, 30]]
** centroid: 1, normalized-entropy: 0.7642045065086204, [(2, 105), (3, 30)]
*** center 2: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 39, 0]]
** centroid: 5, normalized-entropy: 0.9995491108252483, [(1, 41), (2, 39)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 62, 0]]
** centroid: 6, normalized-entropy: 0.2006223243127146, [(1, 2), (2, 62)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [112, 45, 0]]
** centroid: 7, normalized-entropy: 0.8643204902592255, [(1, 112), (2, 45)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24157603327924948] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24157603327924948, 0.20185372002165894] ***
*** starting iteration: 2; err: [Inf, 0.24157603327924948, 0.20185372002165894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24157603327924948, 0.20185372002165894, 0.19814297501444594] ***
*** starting iteration: 3; err: [Inf, 0.24157603327924948, 0.20185372002165894, 0.19814297501444594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24157603327924948, 0.20185372002165894, 0.19814297501444594, 0.19597197602317296] ***
*** finished computation of 7 references, err: [Inf, 0.24157603327924948, 0.20185372002165894, 0.19814297501444594, 0.19597197602317296] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 74, 13]]
** centroid: 1, normalized-entropy: 0.6084002154765848, [(2, 74), (3, 13)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [66, 28, 0]]
** centroid: 2, normalized-entropy: 0.8786744932173094, [(1, 66), (2, 28)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [37, 45, 0]]
** centroid: 3, normalized-entropy: 0.9931231770192241, [(1, 37), (2, 45)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [52, 20, 0]]
** centroid: 4, normalized-entropy: 0.8524051786494784, [(1, 52), (2, 20)]
*** center 5: selecting labels [1] (freq >= 2) [from [146, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [94, 22, 0]]
** centroid: 6, normalized-entropy: 0.7007495497162061, [(1, 94), (2, 22)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 53, 17]]
** centroid: 7, normalized-entropy: 0.7997594113291759, [(2, 53), (3, 17)]
finished with 13 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2544851708163073] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2544851708163073, 0.19543870883425515] ***
*** starting iteration: 2; err: [Inf, 0.2544851708163073, 0.19543870883425515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2544851708163073, 0.19543870883425515, 0.19232918952299893] ***
*** starting iteration: 3; err: [Inf, 0.2544851708163073, 0.19543870883425515, 0.19232918952299893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2544851708163073, 0.19543870883425515, 0.19232918952299893, 0.19158565064101876] ***
*** finished computation of 7 references, err: [Inf, 0.2544851708163073, 0.19543870883425515, 0.19232918952299893, 0.19158565064101876] ***
*** center 1: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [91, 36, 0]]
** centroid: 2, normalized-entropy: 0.8601286843311847, [(1, 91), (2, 36)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 95, 20]]
** centroid: 3, normalized-entropy: 0.6665783579949205, [(2, 95), (3, 20)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 5, 0]]
** centroid: 4, normalized-entropy: 0.34673146824966367, [(1, 72), (2, 5)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 71, 2]]
** centroid: 5, normalized-entropy: 0.18116640155354563, [(2, 71), (3, 2)]
*** center 6: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [37, 50, 0]]
** centroid: 7, normalized-entropy: 0.9838333347337009, [(1, 37), (2, 50)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9460028891166615, 0.9350008691326056, 0.9349798900697105, 0.9319768870667074, 0.928017838197479, 0.919011826197455, 0.9159758560956166, 0.9089868311425198, 0.903007798217379, 0.8989708271145397, 0.8960157762552973, 0.8720097342851835, 0.8559817302332272, 0.8530086973200746, 0.8030245814676952, 0.7659995324665984]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9460028891166615
finished with 18
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.17916511259476622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17916511259476622, 0.15758779193323622] ***
*** finished computation of 7 references, err: [Inf, 0.17916511259476622, 0.15758779193323622] ***
*** center 1: selecting labels [1] (freq >= 2) [from [155, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 102, 13]]
** centroid: 2, normalized-entropy: 0.5090283012319687, [(2, 102), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [70, 30, 0]]
** centroid: 3, normalized-entropy: 0.8812908992306927, [(1, 70), (2, 30)]
*** center 4: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [86, 28, 0]]
** centroid: 5, normalized-entropy: 0.8042522359016421, [(1, 86), (2, 28)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 35, 17]]
** centroid: 6, normalized-entropy: 0.9117517586347538, [(2, 35), (3, 17)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 56, 0]]
** centroid: 7, normalized-entropy: 0.2899860470332091, [(1, 3), (2, 56)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19835043443727127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19835043443727127, 0.15063193562996297] ***
*** finished computation of 7 references, err: [Inf, 0.19835043443727127, 0.15063193562996297] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [42, 35, 0]]
** centroid: 1, normalized-entropy: 0.9940302114769566, [(1, 42), (2, 35)]
*** center 2: selecting labels [1] (freq >= 2) [from [142, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 63, 0]]
** centroid: 4, normalized-entropy: 0.9966818677995445, [(1, 55), (2, 63)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 63, 0]]
** centroid: 5, normalized-entropy: 0.6601070987550468, [(1, 13), (2, 63)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [60, 12, 0]]
** centroid: 6, normalized-entropy: 0.6500224216483541, [(1, 60), (2, 12)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 69, 30]]
** centroid: 7, normalized-entropy: 0.8849636363831529, [(2, 69), (3, 30)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2609155336272731] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2609155336272731, 0.17350024249854273] ***
*** finished computation of 7 references, err: [Inf, 0.2609155336272731, 0.17350024249854273] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [166, 6, 0]]
** centroid: 1, normalized-entropy: 0.21832103023746746, [(1, 166), (2, 6)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 111, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [26, 62, 0]]
** centroid: 3, normalized-entropy: 0.8756633923230399, [(1, 26), (2, 62)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [119, 17, 0]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(1, 119), (2, 17)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 61, 22]]
** centroid: 5, normalized-entropy: 0.8342867421739538, [(2, 61), (3, 22)]
*** center 6: selecting labels [1] (freq >= 2) [from [39, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29949350084538934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29949350084538934, 0.23248112878088165] ***
*** finished computation of 7 references, err: [Inf, 0.29949350084538934, 0.23248112878088165] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 104, 30]]
** centroid: 1, normalized-entropy: 0.7671903206448686, [(2, 104), (3, 30)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [84, 17, 0]]
** centroid: 2, normalized-entropy: 0.653839880626333, [(1, 84), (2, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [133, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [22, 63, 0]]
** centroid: 4, normalized-entropy: 0.8249658680139929, [(1, 22), (2, 63)]
*** center 5: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [24, 47, 0]]
** centroid: 6, normalized-entropy: 0.9229192878686723, [(1, 24), (2, 47)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [19, 20, 0]]
** centroid: 7, normalized-entropy: 0.9995256892936492, [(1, 19), (2, 20)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25994335627602205] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25994335627602205, 0.21303431474641413] ***
*** finished computation of 7 references, err: [Inf, 0.25994335627602205, 0.21303431474641413] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [40, 34, 0]]
** centroid: 1, normalized-entropy: 0.9952525494396791, [(1, 40), (2, 34)]
*** center 2: selecting labels [1] (freq >= 2) [from [156, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 63, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [35, 75, 0]]
** centroid: 4, normalized-entropy: 0.9023932827949788, [(1, 35), (2, 75)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [55, 24, 0]]
** centroid: 5, normalized-entropy: 0.8858834790484443, [(1, 55), (2, 24)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 46, 30]]
** centroid: 6, normalized-entropy: 0.9677884628267678, [(2, 46), (3, 30)]
*** center 7: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2171808820053086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2171808820053086, 0.1949178685093469] ***
*** finished computation of 7 references, err: [Inf, 0.2171808820053086, 0.1949178685093469] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [41, 55, 0]]
** centroid: 1, normalized-entropy: 0.98460399620868, [(1, 41), (2, 55)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 64, 16]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 64), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [82, 23, 0]]
** centroid: 4, normalized-entropy: 0.7584246665423688, [(1, 82), (2, 23)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 91, 6]]
** centroid: 5, normalized-entropy: 0.3347676126777638, [(2, 91), (3, 6)]
*** center 6: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [74, 24, 0]]
** centroid: 7, normalized-entropy: 0.8030909760146977, [(1, 74), (2, 24)]
finished with 12 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 18)
[0.9460028891166615, 0.9350008691326056, 0.9349798900697105, 0.9319768870667074, 0.928017838197479, 0.919011826197455, 0.9159758560956166, 0.9100028171884459, 0.9089868311425198, 0.9040267812722903, 0.903007798217379, 0.8989708271145397, 0.8960157762552973, 0.8720097342851835, 0.8559817302332272, 0.8530086973200746, 0.8030245814676952, 0.7659995324665984]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9460028891166615
finished with 19
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.2074392804725171] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2074392804725171, 0.1535899820807355] ***
*** starting iteration: 2; err: [Inf, 0.2074392804725171, 0.1535899820807355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2074392804725171, 0.1535899820807355, 0.14712976983216391] ***
*** starting iteration: 3; err: [Inf, 0.2074392804725171, 0.1535899820807355, 0.14712976983216391] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2074392804725171, 0.1535899820807355, 0.14712976983216391, 0.14572873219652724] ***
*** finished computation of 7 references, err: [Inf, 0.2074392804725171, 0.1535899820807355, 0.14712976983216391, 0.14572873219652724] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 73, 30]]
** centroid: 1, normalized-entropy: 0.8703460546929581, [(2, 73), (3, 30)]
*** center 2: selecting labels [1] (freq >= 2) [from [121, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [63, 9, 0]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(1, 63), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [76, 39, 0]]
** centroid: 4, normalized-entropy: 0.923984159141417, [(1, 76), (2, 39)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 43, 0]]
** centroid: 5, normalized-entropy: 0.9991802351145687, [(1, 46), (2, 43)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 78, 0]]
** centroid: 6, normalized-entropy: 0.4104161417181887, [(1, 7), (2, 78)]
*** center 7: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19314414959099294] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19314414959099294, 0.15064342044757448] ***
*** starting iteration: 2; err: [Inf, 0.19314414959099294, 0.15064342044757448] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19314414959099294, 0.15064342044757448, 0.1455075804582578] ***
*** starting iteration: 3; err: [Inf, 0.19314414959099294, 0.15064342044757448, 0.1455075804582578] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19314414959099294, 0.15064342044757448, 0.1455075804582578, 0.14417918593129855] ***
*** finished computation of 7 references, err: [Inf, 0.19314414959099294, 0.15064342044757448, 0.1455075804582578, 0.14417918593129855] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 83, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [66, 36, 0]]
** centroid: 3, normalized-entropy: 0.9366673818775627, [(1, 66), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [103, 5, 0]]
** centroid: 4, normalized-entropy: 0.2704505135124657, [(1, 103), (2, 5)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 89, 22]]
** centroid: 5, normalized-entropy: 0.7183098216110975, [(2, 89), (3, 22)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [57, 44, 0]]
** centroid: 6, normalized-entropy: 0.9880162151534644, [(1, 57), (2, 44)]
*** center 7: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.185655014220256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.185655014220256, 0.15029572328593158] ***
*** starting iteration: 2; err: [Inf, 0.185655014220256, 0.15029572328593158] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.185655014220256, 0.15029572328593158, 0.14769473550253892] ***
*** starting iteration: 3; err: [Inf, 0.185655014220256, 0.15029572328593158, 0.14769473550253892] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.185655014220256, 0.15029572328593158, 0.14769473550253892, 0.14728970131655042] ***
*** finished computation of 7 references, err: [Inf, 0.185655014220256, 0.15029572328593158, 0.14769473550253892, 0.14728970131655042] ***
*** center 1: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 95, 30]]
** centroid: 2, normalized-entropy: 0.7950402793845225, [(2, 95), (3, 30)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [70, 12, 0]]
** centroid: 3, normalized-entropy: 0.6006085754131871, [(1, 70), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [74, 43, 0]]
** centroid: 4, normalized-entropy: 0.9487499032694516, [(1, 74), (2, 43)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [17, 101, 0]]
** centroid: 5, normalized-entropy: 0.5947936590297477, [(1, 17), (2, 101)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 19)
[0.9460028891166615, 0.9430148711585837, 0.9350008691326056, 0.9349798900697105, 0.9319768870667074, 0.928017838197479, 0.919011826197455, 0.9159758560956166, 0.9100028171884459, 0.9089868311425198, 0.9040267812722903, 0.903007798217379, 0.8989708271145397, 0.8960157762552973, 0.8720097342851835, 0.8559817302332272, 0.8530086973200746, 0.8030245814676952, 0.7659995324665984]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9460028891166615
finished with 19
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 19)
[0.9460028891166615, 0.9430148711585837, 0.9350008691326056, 0.9349798900697105, 0.9319768870667074, 0.928017838197479, 0.919011826197455, 0.9159758560956166, 0.9100028171884459, 0.9089868311425198, 0.9040267812722903, 0.903007798217379, 0.8989708271145397, 0.8960157762552973, 0.8720097342851835, 0.8559817302332272, 0.8530086973200746, 0.8030245814676952, 0.7659995324665984]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9460028891166615
finished with 19
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 19)
[0.9460028891166615, 0.9430148711585837, 0.9350008691326056, 0.9349798900697105, 0.9319768870667074, 0.928017838197479, 0.919011826197455, 0.9159758560956166, 0.9100028171884459, 0.9089868311425198, 0.9040267812722903, 0.903007798217379, 0.8989708271145397, 0.8960157762552973, 0.8720097342851835, 0.8559817302332272, 0.8530086973200746, 0.8030245814676952, 0.7659995324665984]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9460028891166615
finished with 19
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 19)
[0.9460028891166615, 0.9430148711585837, 0.9350008691326056, 0.9349798900697105, 0.9319768870667074, 0.928017838197479, 0.919011826197455, 0.9159758560956166, 0.9100028171884459, 0.9089868311425198, 0.9040267812722903, 0.903007798217379, 0.8989708271145397, 0.8960157762552973, 0.8720097342851835, 0.8559817302332272, 0.8530086973200746, 0.8030245814676952, 0.7659995324665984]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9460028891166615
finished with 19
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.23915234704129398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23915234704129398, 0.19581154777645132] ***
*** starting iteration: 2; err: [Inf, 0.23915234704129398, 0.19581154777645132] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23915234704129398, 0.19581154777645132, 0.19223241697438062] ***
*** starting iteration: 3; err: [Inf, 0.23915234704129398, 0.19581154777645132, 0.19223241697438062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23915234704129398, 0.19581154777645132, 0.19223241697438062, 0.1920649203802459] ***
*** finished computation of 7 references, err: [Inf, 0.23915234704129398, 0.19581154777645132, 0.19223241697438062, 0.1920649203802459] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [100, 41, 0]]
** centroid: 1, normalized-entropy: 0.8697268760384111, [(1, 100), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [93, 17, 0]]
** centroid: 2, normalized-entropy: 0.6210993704855443, [(1, 93), (2, 17)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 123, 41]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 123), (3, 41)]
*** center 4: selecting labels [1] (freq >= 2) [from [165, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [89, 48, 0]]
** centroid: 5, normalized-entropy: 0.9343935764596151, [(1, 89), (2, 48)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [135, 5, 0]]
** centroid: 6, normalized-entropy: 0.2222848306856879, [(1, 135), (2, 5)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 141, 0]]
** centroid: 7, normalized-entropy: 0.1061878354620965, [(1, 2), (2, 141)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2267192350141704] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2267192350141704, 0.1930028870794922] ***
*** starting iteration: 2; err: [Inf, 0.2267192350141704, 0.1930028870794922] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2267192350141704, 0.1930028870794922, 0.19053908021748067] ***
*** starting iteration: 3; err: [Inf, 0.2267192350141704, 0.1930028870794922, 0.19053908021748067] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2267192350141704, 0.1930028870794922, 0.19053908021748067, 0.18968223567679524] ***
*** finished computation of 7 references, err: [Inf, 0.2267192350141704, 0.1930028870794922, 0.19053908021748067, 0.18968223567679524] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [73, 8, 0]]
** centroid: 1, normalized-entropy: 0.46506984488164627, [(1, 73), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 18, 0]]
** centroid: 2, normalized-entropy: 0.7897492536625221, [(1, 58), (2, 18)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 46, 22]]
** centroid: 3, normalized-entropy: 0.9081783472997053, [(2, 46), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [12, 48, 0]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(1, 12), (2, 48)]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 69, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24174689725227655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24174689725227655, 0.19530163986608387] ***
*** starting iteration: 2; err: [Inf, 0.24174689725227655, 0.19530163986608387] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24174689725227655, 0.19530163986608387, 0.18936999891418962] ***
*** starting iteration: 3; err: [Inf, 0.24174689725227655, 0.19530163986608387, 0.18936999891418962] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24174689725227655, 0.19530163986608387, 0.18936999891418962, 0.18718415197357535] ***
*** finished computation of 7 references, err: [Inf, 0.24174689725227655, 0.19530163986608387, 0.18936999891418962, 0.18718415197357535] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [79, 3, 0]]
** centroid: 1, normalized-entropy: 0.22641094842107634, [(1, 79), (2, 3)]
*** center 2: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 50, 23]]
** centroid: 3, normalized-entropy: 0.8989377852081333, [(2, 50), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [32, 42, 0]]
** centroid: 5, normalized-entropy: 0.9867867202680318, [(1, 32), (2, 42)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [25, 44, 0]]
** centroid: 6, normalized-entropy: 0.9445911819316588, [(1, 25), (2, 44)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 52, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.223909000210464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.223909000210464, 0.19026931438315658] ***
*** starting iteration: 2; err: [Inf, 0.223909000210464, 0.19026931438315658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.223909000210464, 0.19026931438315658, 0.18736051757261157] ***
*** starting iteration: 3; err: [Inf, 0.223909000210464, 0.19026931438315658, 0.18736051757261157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.223909000210464, 0.19026931438315658, 0.18736051757261157, 0.18496972135268153] ***
*** finished computation of 7 references, err: [Inf, 0.223909000210464, 0.19026931438315658, 0.18736051757261157, 0.18496972135268153] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [55, 4, 0]]
** centroid: 1, normalized-entropy: 0.3576467062456333, [(1, 55), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 11, 0]]
** centroid: 2, normalized-entropy: 0.7007495497162061, [(1, 47), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 57, 25]]
** centroid: 3, normalized-entropy: 0.8871723027673716, [(2, 57), (3, 25)]
*** center 4: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [37, 53, 0]]
** centroid: 5, normalized-entropy: 0.9770802227727781, [(1, 37), (2, 53)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 54, 0]]
** centroid: 6, normalized-entropy: 0.4186843105268563, [(1, 5), (2, 54)]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23965461810305716] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23965461810305716, 0.1895269803516567] ***
*** starting iteration: 2; err: [Inf, 0.23965461810305716, 0.1895269803516567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23965461810305716, 0.1895269803516567, 0.1858516996987164] ***
*** starting iteration: 3; err: [Inf, 0.23965461810305716, 0.1895269803516567, 0.1858516996987164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23965461810305716, 0.1895269803516567, 0.1858516996987164, 0.1852055463399738] ***
*** finished computation of 7 references, err: [Inf, 0.23965461810305716, 0.1895269803516567, 0.1858516996987164, 0.1852055463399738] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [54, 44, 0]]
** centroid: 1, normalized-entropy: 0.9924760039430819, [(1, 54), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 20, 0]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(1, 50), (2, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 67, 15]]
** centroid: 4, normalized-entropy: 0.6864381668766382, [(2, 67), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [23, 54, 0]]
** centroid: 5, normalized-entropy: 0.8796975782775168, [(1, 23), (2, 54)]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23897790920734405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23897790920734405, 0.19002541034854947] ***
*** starting iteration: 2; err: [Inf, 0.23897790920734405, 0.19002541034854947] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23897790920734405, 0.19002541034854947, 0.1880815372131765] ***
*** starting iteration: 3; err: [Inf, 0.23897790920734405, 0.19002541034854947, 0.1880815372131765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23897790920734405, 0.19002541034854947, 0.1880815372131765, 0.18759152030199766] ***
*** finished computation of 7 references, err: [Inf, 0.23897790920734405, 0.19002541034854947, 0.1880815372131765, 0.18759152030199766] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 51, 17]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 51), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [39, 27, 0]]
** centroid: 3, normalized-entropy: 0.976020648236615, [(1, 39), (2, 27)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 22, 0]]
** centroid: 4, normalized-entropy: 0.8533728188427888, [(1, 57), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [48, 31, 0]]
** centroid: 5, normalized-entropy: 0.966334094295981, [(1, 48), (2, 31)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 69, 3]]
** centroid: 7, normalized-entropy: 0.24988229283318547, [(2, 69), (3, 3)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23460653512366117] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23460653512366117, 0.19033632536046208] ***
*** starting iteration: 2; err: [Inf, 0.23460653512366117, 0.19033632536046208] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23460653512366117, 0.19033632536046208, 0.18746050612255932] ***
*** starting iteration: 3; err: [Inf, 0.23460653512366117, 0.19033632536046208, 0.18746050612255932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23460653512366117, 0.19033632536046208, 0.18746050612255932, 0.18652629049774258] ***
*** finished computation of 7 references, err: [Inf, 0.23460653512366117, 0.19033632536046208, 0.18746050612255932, 0.18652629049774258] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 80, 0]]
** centroid: 1, normalized-entropy: 0.32275695889739825, [(1, 5), (2, 80)]
*** center 2: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 37, 0]]
** centroid: 3, normalized-entropy: 0.9897525351939971, [(1, 47), (2, 37)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 21, 0]]
** centroid: 4, normalized-entropy: 0.8354065254460503, [(1, 58), (2, 21)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 49, 22]]
** centroid: 5, normalized-entropy: 0.893010810044601, [(2, 49), (3, 22)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22725310253538192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22725310253538192, 0.19356891523487865] ***
*** starting iteration: 2; err: [Inf, 0.22725310253538192, 0.19356891523487865] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22725310253538192, 0.19356891523487865, 0.19091461938619614] ***
*** starting iteration: 3; err: [Inf, 0.22725310253538192, 0.19356891523487865, 0.19091461938619614] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22725310253538192, 0.19356891523487865, 0.19091461938619614, 0.18970799313485623] ***
*** finished computation of 7 references, err: [Inf, 0.22725310253538192, 0.19356891523487865, 0.19091461938619614, 0.18970799313485623] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 48, 24]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(2, 48), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [68, 7, 0]]
** centroid: 3, normalized-entropy: 0.44749925503686355, [(1, 68), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [53, 3, 0]]
** centroid: 4, normalized-entropy: 0.3013786435930858, [(1, 53), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 68, 0]]
** centroid: 5, normalized-entropy: 0.635489638182683, [(1, 13), (2, 68)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 55, 0]]
** centroid: 7, normalized-entropy: 0.4637773498877517, [(1, 6), (2, 55)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24756251087412237] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24756251087412237, 0.19303991146199406] ***
*** starting iteration: 2; err: [Inf, 0.24756251087412237, 0.19303991146199406] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24756251087412237, 0.19303991146199406, 0.190008487213403] ***
*** starting iteration: 3; err: [Inf, 0.24756251087412237, 0.19303991146199406, 0.190008487213403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24756251087412237, 0.19303991146199406, 0.190008487213403, 0.18964695455878974] ***
*** finished computation of 7 references, err: [Inf, 0.24756251087412237, 0.19303991146199406, 0.190008487213403, 0.18964695455878974] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 11, 0]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(1, 55), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 34, 22]]
** centroid: 3, normalized-entropy: 0.9666186325481027, [(2, 34), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [58, 13, 0]]
** centroid: 5, normalized-entropy: 0.6868088934028034, [(1, 58), (2, 13)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [10, 59, 0]]
** centroid: 7, normalized-entropy: 0.5969995167604553, [(1, 10), (2, 59)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22847085986286403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22847085986286403, 0.20130033281631768] ***
*** starting iteration: 2; err: [Inf, 0.22847085986286403, 0.20130033281631768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22847085986286403, 0.20130033281631768, 0.1959888505656272] ***
*** starting iteration: 3; err: [Inf, 0.22847085986286403, 0.20130033281631768, 0.1959888505656272] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22847085986286403, 0.20130033281631768, 0.1959888505656272, 0.1901570976623334] ***
*** finished computation of 7 references, err: [Inf, 0.22847085986286403, 0.20130033281631768, 0.1959888505656272, 0.1901570976623334] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [2, 79, 0]]
** centroid: 1, normalized-entropy: 0.16702680404522793, [(1, 2), (2, 79)]
*** center 2: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 12, 0]]
** centroid: 3, normalized-entropy: 0.7024665512903904, [(1, 51), (2, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 7, 0]]
** centroid: 5, normalized-entropy: 0.5435644431995963, [(1, 49), (2, 7)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 78, 17]]
** centroid: 6, normalized-entropy: 0.6777688570413568, [(2, 78), (3, 17)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [61, 16, 0]]
** centroid: 7, normalized-entropy: 0.7372413771710565, [(1, 61), (2, 16)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24267134067136795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24267134067136795, 0.18628846251312645] ***
*** starting iteration: 2; err: [Inf, 0.24267134067136795, 0.18628846251312645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24267134067136795, 0.18628846251312645, 0.1850985399764031] ***
*** starting iteration: 3; err: [Inf, 0.24267134067136795, 0.18628846251312645, 0.1850985399764031] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24267134067136795, 0.18628846251312645, 0.1850985399764031, 0.1848679325133562] ***
*** finished computation of 7 references, err: [Inf, 0.24267134067136795, 0.18628846251312645, 0.1850985399764031, 0.1848679325133562] ***
*** center 1: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 71, 18]]
** centroid: 2, normalized-entropy: 0.7263997735417457, [(2, 71), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [63, 2, 0]]
** centroid: 3, normalized-entropy: 0.19823496409776642, [(1, 63), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [56, 30, 0]]
** centroid: 4, normalized-entropy: 0.9330252953592912, [(1, 56), (2, 30)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [36, 36, 0]]
** centroid: 5, normalized-entropy: 1.0, [(1, 36), (2, 36)]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 49, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2362242886275053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2362242886275053, 0.19358783170534297] ***
*** starting iteration: 2; err: [Inf, 0.2362242886275053, 0.19358783170534297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2362242886275053, 0.19358783170534297, 0.19065329941920936] ***
*** starting iteration: 3; err: [Inf, 0.2362242886275053, 0.19358783170534297, 0.19065329941920936] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2362242886275053, 0.19358783170534297, 0.19065329941920936, 0.18951297750510276] ***
*** finished computation of 7 references, err: [Inf, 0.2362242886275053, 0.19358783170534297, 0.19065329941920936, 0.18951297750510276] ***
*** center 1: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 55, 21]]
** centroid: 2, normalized-entropy: 0.8503821170987139, [(2, 55), (3, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 10, 0]]
** centroid: 4, normalized-entropy: 0.581321498763703, [(1, 62), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 67, 0]]
** centroid: 5, normalized-entropy: 0.5869185834047994, [(1, 11), (2, 67)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [22, 57, 0]]
** centroid: 6, normalized-entropy: 0.8533728188427888, [(1, 22), (2, 57)]
*** center 7: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2501822622306645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2501822622306645, 0.19260529729165138] ***
*** starting iteration: 2; err: [Inf, 0.2501822622306645, 0.19260529729165138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2501822622306645, 0.19260529729165138, 0.18700844278931616] ***
*** starting iteration: 3; err: [Inf, 0.2501822622306645, 0.19260529729165138, 0.18700844278931616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2501822622306645, 0.19260529729165138, 0.18700844278931616, 0.1846570829898119] ***
*** finished computation of 7 references, err: [Inf, 0.2501822622306645, 0.19260529729165138, 0.18700844278931616, 0.1846570829898119] ***
*** center 1: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 68, 17]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 68), (3, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [53, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [46, 22, 0]]
** centroid: 4, normalized-entropy: 0.9081783472997053, [(1, 46), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 26, 0]]
** centroid: 5, normalized-entropy: 0.9871377743721862, [(1, 34), (2, 26)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [24, 62, 0]]
** centroid: 7, normalized-entropy: 0.8541802051521676, [(1, 24), (2, 62)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2418821282349527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2418821282349527, 0.19366250045411287] ***
*** starting iteration: 2; err: [Inf, 0.2418821282349527, 0.19366250045411287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2418821282349527, 0.19366250045411287, 0.18838592758309097] ***
*** starting iteration: 3; err: [Inf, 0.2418821282349527, 0.19366250045411287, 0.18838592758309097] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2418821282349527, 0.19366250045411287, 0.18838592758309097, 0.18764279723726213] ***
*** finished computation of 7 references, err: [Inf, 0.2418821282349527, 0.19366250045411287, 0.18838592758309097, 0.18764279723726213] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [64, 25, 0]]
** centroid: 1, normalized-entropy: 0.8566727035015875, [(1, 64), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [41, 24, 0]]
** centroid: 2, normalized-entropy: 0.9500796252338518, [(1, 41), (2, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [2, 77, 0]]
** centroid: 4, normalized-entropy: 0.17033057560105982, [(1, 2), (2, 77)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [57, 4, 0]]
** centroid: 5, normalized-entropy: 0.34918437350730797, [(1, 57), (2, 4)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 66, 16]]
** centroid: 6, normalized-entropy: 0.7120640548905481, [(2, 66), (3, 16)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22220095819793642] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22220095819793642, 0.19326049031224102] ***
*** starting iteration: 2; err: [Inf, 0.22220095819793642, 0.19326049031224102] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22220095819793642, 0.19326049031224102, 0.18989466710668057] ***
*** starting iteration: 3; err: [Inf, 0.22220095819793642, 0.19326049031224102, 0.18989466710668057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22220095819793642, 0.19326049031224102, 0.18989466710668057, 0.18804107299260794] ***
*** finished computation of 7 references, err: [Inf, 0.22220095819793642, 0.19326049031224102, 0.18989466710668057, 0.18804107299260794] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 77, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [37, 36, 0]]
** centroid: 3, normalized-entropy: 0.9998646331239297, [(1, 37), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [71, 5, 0]]
** centroid: 4, normalized-entropy: 0.35001059292688486, [(1, 71), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 10, 0]]
** centroid: 5, normalized-entropy: 0.576291461217437, [(1, 63), (2, 10)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 63, 23]]
** centroid: 6, normalized-entropy: 0.8377698690066789, [(2, 63), (3, 23)]
*** center 7: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22627470880001782] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22627470880001782, 0.18976931667979807] ***
*** starting iteration: 2; err: [Inf, 0.22627470880001782, 0.18976931667979807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22627470880001782, 0.18976931667979807, 0.18642849992215632] ***
*** starting iteration: 3; err: [Inf, 0.22627470880001782, 0.18976931667979807, 0.18642849992215632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22627470880001782, 0.18976931667979807, 0.18642849992215632, 0.18598562612757086] ***
*** finished computation of 7 references, err: [Inf, 0.22627470880001782, 0.18976931667979807, 0.18642849992215632, 0.18598562612757086] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [52, 40, 0]]
** centroid: 1, normalized-entropy: 0.9876925088958032, [(1, 52), (2, 40)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 21, 0]]
** centroid: 2, normalized-entropy: 0.8354065254460503, [(1, 58), (2, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [42, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 57, 28]]
** centroid: 4, normalized-entropy: 0.9143242464317818, [(2, 57), (3, 28)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [20, 69, 0]]
** centroid: 5, normalized-entropy: 0.7686913027030167, [(1, 20), (2, 69)]
*** center 6: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21973557430878282] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21973557430878282, 0.19019717267714442] ***
*** starting iteration: 2; err: [Inf, 0.21973557430878282, 0.19019717267714442] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21973557430878282, 0.19019717267714442, 0.18862089114636182] ***
*** starting iteration: 3; err: [Inf, 0.21973557430878282, 0.19019717267714442, 0.18862089114636182] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21973557430878282, 0.19019717267714442, 0.18862089114636182, 0.18884145657578483] ***
*** finished computation of 7 references, err: [Inf, 0.21973557430878282, 0.19019717267714442, 0.18862089114636182, 0.18884145657578483] ***
*** center 1: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 67, 13]]
** centroid: 2, normalized-entropy: 0.6402569436810504, [(2, 67), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [55, 9, 0]]
** centroid: 3, normalized-entropy: 0.5858732928619204, [(1, 55), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [12, 47, 0]]
** centroid: 4, normalized-entropy: 0.7286561673702678, [(1, 12), (2, 47)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [20, 63, 0]]
** centroid: 5, normalized-entropy: 0.7966394665488286, [(1, 20), (2, 63)]
*** center 6: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2359491194151342] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2359491194151342, 0.20143626014329494] ***
*** starting iteration: 2; err: [Inf, 0.2359491194151342, 0.20143626014329494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2359491194151342, 0.20143626014329494, 0.19868128743581473] ***
*** starting iteration: 3; err: [Inf, 0.2359491194151342, 0.20143626014329494, 0.19868128743581473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2359491194151342, 0.20143626014329494, 0.19868128743581473, 0.1981828464884311] ***
*** finished computation of 7 references, err: [Inf, 0.2359491194151342, 0.20143626014329494, 0.19868128743581473, 0.1981828464884311] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [48, 47, 0]]
** centroid: 1, normalized-entropy: 0.9999200708207958, [(1, 48), (2, 47)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 7, 0]]
** centroid: 2, normalized-entropy: 0.5254506799086205, [(1, 52), (2, 7)]
*** center 3: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 47, 24]]
** centroid: 4, normalized-entropy: 0.9229192878686723, [(2, 47), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [65, 8, 0]]
** centroid: 5, normalized-entropy: 0.4986751363204345, [(1, 65), (2, 8)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21299137925356626] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21299137925356626, 0.18609865871816875] ***
*** starting iteration: 2; err: [Inf, 0.21299137925356626, 0.18609865871816875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21299137925356626, 0.18609865871816875, 0.18394278595084324] ***
*** starting iteration: 3; err: [Inf, 0.21299137925356626, 0.18609865871816875, 0.18394278595084324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21299137925356626, 0.18609865871816875, 0.18394278595084324, 0.18353897978551686] ***
*** finished computation of 7 references, err: [Inf, 0.21299137925356626, 0.18609865871816875, 0.18394278595084324, 0.18353897978551686] ***
*** center 1: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 64, 22]]
** centroid: 2, normalized-entropy: 0.8203636429576731, [(2, 64), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 5, 0]]
** centroid: 3, normalized-entropy: 0.4820661480830933, [(1, 43), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [48, 3, 0]]
** centroid: 4, normalized-entropy: 0.32275695889739825, [(1, 48), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 63, 0]]
** centroid: 5, normalized-entropy: 0.8249658680139929, [(1, 22), (2, 63)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 65, 0]]
** centroid: 6, normalized-entropy: 0.4986751363204345, [(1, 8), (2, 65)]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23288669680058957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23288669680058957, 0.19174017447512598] ***
*** starting iteration: 2; err: [Inf, 0.23288669680058957, 0.19174017447512598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23288669680058957, 0.19174017447512598, 0.18894789928011596] ***
*** starting iteration: 3; err: [Inf, 0.23288669680058957, 0.19174017447512598, 0.18894789928011596] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23288669680058957, 0.19174017447512598, 0.18894789928011596, 0.18711238380568102] ***
*** finished computation of 7 references, err: [Inf, 0.23288669680058957, 0.19174017447512598, 0.18894789928011596, 0.18711238380568102] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [14, 54, 0]]
** centroid: 1, normalized-entropy: 0.7335379291086666, [(1, 14), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 27, 0]]
** centroid: 2, normalized-entropy: 0.9346466439786693, [(1, 50), (2, 27)]
*** center 3: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 59, 25]]
** centroid: 4, normalized-entropy: 0.8783609387702275, [(2, 59), (3, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [31, 40, 0]]
** centroid: 5, normalized-entropy: 0.9883779727795042, [(1, 31), (2, 40)]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23055001070257275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23055001070257275, 0.18861026962846517] ***
*** starting iteration: 2; err: [Inf, 0.23055001070257275, 0.18861026962846517] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23055001070257275, 0.18861026962846517, 0.18381069803610445] ***
*** starting iteration: 3; err: [Inf, 0.23055001070257275, 0.18861026962846517, 0.18381069803610445] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23055001070257275, 0.18861026962846517, 0.18381069803610445, 0.1809231962710619] ***
*** finished computation of 7 references, err: [Inf, 0.23055001070257275, 0.18861026962846517, 0.18381069803610445, 0.1809231962710619] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 54, 21]]
** centroid: 2, normalized-entropy: 0.8554508105601307, [(2, 54), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 4, 0]]
** centroid: 3, normalized-entropy: 0.36205125173399805, [(1, 54), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [64, 17, 0]]
** centroid: 4, normalized-entropy: 0.7412466905234424, [(1, 64), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [15, 59, 0]]
** centroid: 5, normalized-entropy: 0.7273006785144036, [(1, 15), (2, 59)]
*** center 6: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 50, 0]]
** centroid: 7, normalized-entropy: 0.38094658570539014, [(1, 4), (2, 50)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23240543222054838] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23240543222054838, 0.20023590546287595] ***
*** starting iteration: 2; err: [Inf, 0.23240543222054838, 0.20023590546287595] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23240543222054838, 0.20023590546287595, 0.19543139396607875] ***
*** starting iteration: 3; err: [Inf, 0.23240543222054838, 0.20023590546287595, 0.19543139396607875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23240543222054838, 0.20023590546287595, 0.19543139396607875, 0.19434936598315836] ***
*** finished computation of 7 references, err: [Inf, 0.23240543222054838, 0.20023590546287595, 0.19543139396607875, 0.19434936598315836] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 71, 22]]
** centroid: 1, normalized-entropy: 0.7892712724536985, [(2, 71), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [62, 6, 0]]
** centroid: 3, normalized-entropy: 0.43055186701043935, [(1, 62), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [54, 26, 0]]
** centroid: 4, normalized-entropy: 0.9097361225311661, [(1, 54), (2, 26)]
*** center 5: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [59, 7, 0]]
** centroid: 6, normalized-entropy: 0.48791799258948565, [(1, 59), (2, 7)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 77, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2240901259109378] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2240901259109378, 0.1894487677946454] ***
*** starting iteration: 2; err: [Inf, 0.2240901259109378, 0.1894487677946454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2240901259109378, 0.1894487677946454, 0.18617816624045372] ***
*** starting iteration: 3; err: [Inf, 0.2240901259109378, 0.1894487677946454, 0.18617816624045372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2240901259109378, 0.1894487677946454, 0.18617816624045372, 0.1851401838902384] ***
*** finished computation of 7 references, err: [Inf, 0.2240901259109378, 0.1894487677946454, 0.18617816624045372, 0.1851401838902384] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 81, 19]]
** centroid: 1, normalized-entropy: 0.7014714598838974, [(2, 81), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [60, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 27, 0]]
** centroid: 4, normalized-entropy: 0.8935711016541908, [(1, 60), (2, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [58, 19, 0]]
** centroid: 5, normalized-entropy: 0.8060914696192223, [(1, 58), (2, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.241313298586756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.241313298586756, 0.18873325324710458] ***
*** starting iteration: 2; err: [Inf, 0.241313298586756, 0.18873325324710458] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.241313298586756, 0.18873325324710458, 0.18469882927089928] ***
*** starting iteration: 3; err: [Inf, 0.241313298586756, 0.18873325324710458, 0.18469882927089928] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.241313298586756, 0.18873325324710458, 0.18469882927089928, 0.18305579971056432] ***
*** finished computation of 7 references, err: [Inf, 0.241313298586756, 0.18873325324710458, 0.18469882927089928, 0.18305579971056432] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [2, 60, 0]]
** centroid: 1, normalized-entropy: 0.2055925081850832, [(1, 2), (2, 60)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 23, 0]]
** centroid: 2, normalized-entropy: 0.9086185980409245, [(1, 48), (2, 23)]
*** center 3: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 66, 19]]
** centroid: 4, normalized-entropy: 0.7665599404543365, [(2, 66), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 40, 0]]
** centroid: 5, normalized-entropy: 0.9774178175281716, [(1, 28), (2, 40)]
*** center 6: selecting labels [1] (freq >= 2) [from [80, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23420728291943668] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23420728291943668, 0.18966652579698712] ***
*** starting iteration: 2; err: [Inf, 0.23420728291943668, 0.18966652579698712] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23420728291943668, 0.18966652579698712, 0.18694972200365736] ***
*** starting iteration: 3; err: [Inf, 0.23420728291943668, 0.18966652579698712, 0.18694972200365736] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23420728291943668, 0.18966652579698712, 0.18694972200365736, 0.18637703548790888] ***
*** finished computation of 7 references, err: [Inf, 0.23420728291943668, 0.18966652579698712, 0.18694972200365736, 0.18637703548790888] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [41, 38, 0]]
** centroid: 1, normalized-entropy: 0.9989595114657399, [(1, 41), (2, 38)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [66, 19, 0]]
** centroid: 2, normalized-entropy: 0.7665599404543365, [(1, 66), (2, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 74, 18]]
** centroid: 4, normalized-entropy: 0.7131467486384921, [(2, 74), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [35, 46, 0]]
** centroid: 5, normalized-entropy: 0.9866554896538049, [(1, 35), (2, 46)]
*** center 6: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 1, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2392038718573749] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2392038718573749, 0.19628105466254056] ***
*** starting iteration: 2; err: [Inf, 0.2392038718573749, 0.19628105466254056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2392038718573749, 0.19628105466254056, 0.19243245326261968] ***
*** starting iteration: 3; err: [Inf, 0.2392038718573749, 0.19628105466254056, 0.19243245326261968] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2392038718573749, 0.19628105466254056, 0.19243245326261968, 0.19176469614356756] ***
*** finished computation of 7 references, err: [Inf, 0.2392038718573749, 0.19628105466254056, 0.19243245326261968, 0.19176469614356756] ***
*** center 1: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 42, 21]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(2, 42), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [81, 2, 0]]
** centroid: 3, normalized-entropy: 0.1638605128691586, [(1, 81), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [66, 6, 0]]
** centroid: 4, normalized-entropy: 0.4138168503036336, [(1, 66), (2, 6)]
*** center 5: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 66, 0]]
** centroid: 6, normalized-entropy: 0.3159971329784246, [(1, 4), (2, 66)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 70, 0]]
** centroid: 7, normalized-entropy: 0.24729443986205674, [(1, 3), (2, 70)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22714667712897063] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22714667712897063, 0.19195170860376676] ***
*** starting iteration: 2; err: [Inf, 0.22714667712897063, 0.19195170860376676] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22714667712897063, 0.19195170860376676, 0.1882605264261365] ***
*** starting iteration: 3; err: [Inf, 0.22714667712897063, 0.19195170860376676, 0.1882605264261365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22714667712897063, 0.19195170860376676, 0.1882605264261365, 0.18674937829375268] ***
*** finished computation of 7 references, err: [Inf, 0.22714667712897063, 0.19195170860376676, 0.1882605264261365, 0.18674937829375268] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 74, 19]]
** centroid: 1, normalized-entropy: 0.7304472862481346, [(2, 74), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [57, 6, 0]]
** centroid: 3, normalized-entropy: 0.45371633918694493, [(1, 57), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [51, 17, 0]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(1, 51), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [59, 16, 0]]
** centroid: 5, normalized-entropy: 0.7478061583312324, [(1, 59), (2, 16)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 57, 0]]
** centroid: 6, normalized-entropy: 0.49802788653447644, [(1, 7), (2, 57)]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22757921853661536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22757921853661536, 0.1919198506139219] ***
*** starting iteration: 2; err: [Inf, 0.22757921853661536, 0.1919198506139219] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22757921853661536, 0.1919198506139219, 0.18808788201212884] ***
*** starting iteration: 3; err: [Inf, 0.22757921853661536, 0.1919198506139219, 0.18808788201212884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22757921853661536, 0.1919198506139219, 0.18808788201212884, 0.186745828025043] ***
*** finished computation of 7 references, err: [Inf, 0.22757921853661536, 0.1919198506139219, 0.18808788201212884, 0.186745828025043] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [45, 27, 0]]
** centroid: 1, normalized-entropy: 0.954434002924965, [(1, 45), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [43, 11, 0]]
** centroid: 2, normalized-entropy: 0.7292739418449411, [(1, 43), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 83, 19]]
** centroid: 3, normalized-entropy: 0.6936126404300949, [(2, 83), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 13, 0]]
** centroid: 5, normalized-entropy: 0.6601070987550468, [(1, 63), (2, 13)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [13, 59, 0]]
** centroid: 6, normalized-entropy: 0.6812908868842175, [(1, 13), (2, 59)]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23666863638162614] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23666863638162614, 0.19507956729084253] ***
*** starting iteration: 2; err: [Inf, 0.23666863638162614, 0.19507956729084253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23666863638162614, 0.19507956729084253, 0.1918005536054261] ***
*** starting iteration: 3; err: [Inf, 0.23666863638162614, 0.19507956729084253, 0.1918005536054261] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23666863638162614, 0.19507956729084253, 0.1918005536054261, 0.19178432383202015] ***
*** finished computation of 7 references, err: [Inf, 0.23666863638162614, 0.19507956729084253, 0.1918005536054261, 0.19178432383202015] ***
*** center 1: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 48, 19]]
** centroid: 2, normalized-entropy: 0.8602858652332406, [(2, 48), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [73, 4, 0]]
** centroid: 3, normalized-entropy: 0.29461520565280713, [(1, 73), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [47, 10, 0]]
** centroid: 4, normalized-entropy: 0.6699960320994334, [(1, 47), (2, 10)]
*** center 5: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 66, 0]]
** centroid: 6, normalized-entropy: 0.4941829348497886, [(1, 8), (2, 66)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 62, 0]]
** centroid: 7, normalized-entropy: 0.269828447703074, [(1, 3), (2, 62)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21830415563913994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21830415563913994, 0.18808858450036495] ***
*** starting iteration: 2; err: [Inf, 0.21830415563913994, 0.18808858450036495] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21830415563913994, 0.18808858450036495, 0.18096125550940634] ***
*** starting iteration: 3; err: [Inf, 0.21830415563913994, 0.18808858450036495, 0.18096125550940634] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21830415563913994, 0.18808858450036495, 0.18096125550940634, 0.18013278702273966] ***
*** finished computation of 7 references, err: [Inf, 0.21830415563913994, 0.18808858450036495, 0.18096125550940634, 0.18013278702273966] ***
*** center 1: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [73, 4, 0]]
** centroid: 2, normalized-entropy: 0.29461520565280713, [(1, 73), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 55, 22]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(2, 55), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [1, 50, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [57, 22, 0]]
** centroid: 6, normalized-entropy: 0.8533728188427888, [(1, 57), (2, 22)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [30, 52, 0]]
** centroid: 7, normalized-entropy: 0.9474351361840305, [(1, 30), (2, 52)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23273480500280858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23273480500280858, 0.1929464320987463] ***
*** starting iteration: 2; err: [Inf, 0.23273480500280858, 0.1929464320987463] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23273480500280858, 0.1929464320987463, 0.18875179914664478] ***
*** starting iteration: 3; err: [Inf, 0.23273480500280858, 0.1929464320987463, 0.18875179914664478] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23273480500280858, 0.1929464320987463, 0.18875179914664478, 0.18779976363107562] ***
*** finished computation of 7 references, err: [Inf, 0.23273480500280858, 0.1929464320987463, 0.18875179914664478, 0.18779976363107562] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 65, 20]]
** centroid: 1, normalized-entropy: 0.787126586201269, [(2, 65), (3, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 25, 0]]
** centroid: 3, normalized-entropy: 0.940285958670631, [(1, 45), (2, 25)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 19, 0]]
** centroid: 4, normalized-entropy: 0.8009591077369054, [(1, 59), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 26, 0]]
** centroid: 5, normalized-entropy: 0.9477073729342067, [(1, 45), (2, 26)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 67, 2]]
** centroid: 6, normalized-entropy: 0.18927843126120178, [(2, 67), (3, 2)]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 375,3 => 41,1 => 584), Dict(2 => 347,3 => 36,1 => 617))
[ Info: ===== scores for single classifier: {"micro_f1":0.9209999999999999,"precision":0.921,"recall":0.921,"macro_recall":0.9364107345286613,"macro_f1":0.8536102482185043,"accuracy":0.921,"class_f1":{"2":0.8895104895104895,"3":0.7142857142857143,"1":0.9570345408593092},"class_precision":{"2":0.8641304347826086,"3":0.5645161290322581,"1":0.9964912280701754},"class_recall":{"2":0.9164265129682997,"3":0.9722222222222222,"1":0.9205834683954619}}
[ Info: ===== scores for 1: {"micro_f1":0.962,"precision":0.962,"recall":0.962,"macro_recall":0.9357668216140231,"macro_f1":0.9254661737956932,"accuracy":0.962,"class_f1":{"2":0.944927536231884,"3":0.8533333333333333,"1":0.9781376518218623},"class_precision":{"2":0.9504373177842566,"3":0.8205128205128205,"1":0.9773462783171522},"class_recall":{"2":0.9394812680115274,"3":0.8888888888888888,"1":0.9789303079416531}}
[ Info: ===== scores for 5: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.9414106281396647,"macro_f1":0.9329698860534039,"accuracy":0.967,"class_f1":{"2":0.9527896995708155,"3":0.8648648648648649,"1":0.9812550937245312},"class_precision":{"2":0.9460227272727273,"3":0.8421052631578947,"1":0.9868852459016394},"class_recall":{"2":0.9596541786743515,"3":0.8888888888888888,"1":0.9756888168557536}}
[ Info: ===== scores for 7: {"micro_f1":0.966,"precision":0.966,"recall":0.966,"macro_recall":0.9400296470670456,"macro_f1":0.9251131263329991,"accuracy":0.966,"class_f1":{"2":0.9511494252873564,"3":0.8421052631578948,"1":0.9820846905537459},"class_precision":{"2":0.9484240687679083,"3":0.8,"1":0.9869067103109657},"class_recall":{"2":0.9538904899135446,"3":0.8888888888888888,"1":0.9773095623987034}}
[ Info: ===== scores for 9: {"micro_f1":0.963,"precision":0.963,"recall":0.963,"macro_recall":0.9384089015240958,"macro_f1":0.9229214462684404,"accuracy":0.963,"class_f1":{"2":0.9470672389127325,"3":0.8421052631578948,"1":0.9795918367346939},"class_precision":{"2":0.9403409090909091,"3":0.8,"1":0.9868421052631579},"class_recall":{"2":0.9538904899135446,"3":0.8888888888888888,"1":0.9724473257698542}}
[ Info: ===== scores for 11: {"micro_f1":0.963,"precision":0.963,"recall":0.963,"macro_recall":0.9388292678032472,"macro_f1":0.9229606618611328,"accuracy":0.963,"class_f1":{"2":0.9472182596291013,"3":0.8421052631578948,"1":0.9795584627964024},"class_precision":{"2":0.9378531073446328,"3":0.8,"1":0.9884488448844885},"class_recall":{"2":0.9567723342939481,"3":0.8888888888888888,"1":0.9708265802269044}}
(score = 0.962, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.962, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.963, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.963, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.963, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.963, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.963, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.963, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.967,"k":5,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.9414106281396647,"macro_f1":0.9329698860534039,"accuracy":0.967,"class_f1":{"2":0.9527896995708155,"3":0.8648648648648649,"1":0.9812550937245312},"class_precision":{"2":0.9460227272727273,"3":0.8421052631578947,"1":0.9868852459016394},"class_recall":{"2":0.9596541786743515,"3":0.8888888888888888,"1":0.9756888168557536}}
Test Summary: | Pass  Total
AKNC          |    8      8
[384, 4, 2, 1, 1, 2, 2, 14, 4, 7, 1, 2, 1, 8, 1, 2, 3, 13, 1, 15, 1, 7, 22, 18, 19, 3, 6, 11, 6, 8, 3, 3, 21, 20, 9, 21, 31, 32, 14, 5, 5, 3, 35, 10, 29, 1, 7, 3, 39, 23, 3, 10, 11, 22, 16, 5, 335, 12, 33, 27, 18, 31, 8, 7, 1, 16, 8, 1, 16, 5, 125, 27, 44, 11, 15, 13, 31, 4, 25, 1, 7, 7, 4, 58, 3, 72, 18, 6, 8, 16, 4, 8, 6, 19, 23, 49, 32, 11, 12, 4, 6, 2, 24, 66, 47, 15, 17, 8, 67, 6, 42, 50, 6, 118, 642, 13, 4, 81, 19, 7, 85, 2, 54, 8, 26, 8, 163, 18, 4, 6, 28, 121, 17, 6, 4, 13, 3, 8, 79, 17, 35, 8, 8, 2, 23, 75, 15, 21, 76, 26, 29, 1, 3, 2, 34, 40, 2, 48, 50, 24, 8, 49, 83, 8, 29, 27, 17, 71, 106, 30, 61, 2, 29, 5, 1, 15, 2, 10, 90, 24, 26, 7, 65, 7, 4, 25, 24, 47, 278, 3, 2, 5, 23, 13, 14, 66, 4, 73, 6, 15, 6, 28, 12, 13, 10, 6, 7, 6, 3, 6, 198, 70, 35, 1, 32, 5, 6, 41, 17, 37, 2, 4, 53, 26, 14, 43, 3, 18, 17, 11, 52, 3, 6, 16, 72, 34, 80, 95, 9, 19, 16, 306, 6, 100, 96, 29, 56, 4, 4, 5, 257, 9, 9, 2, 31, 22, 391, 11, 10, 20, 112, 39, 13, 18, 11, 10, 19, 61, 21, 12, 23, 8, 58, 43, 11, 66, 58, 50, 7, 5, 48, 38, 34, 16, 24, 285, 2, 19, 44, 38, 14, 4, 26, 43, 6, 39, 43, 3, 81, 111]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.662, speedup = 0.2354366401451551, eval_ratio = 0.067316)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.41079489087301596,"recall":0.40017361111111116,"f1":null,"seconds":0.00013935193419456482,"exhaustive_search_seconds":0.00038512423634529114,"evaluations":445.625,"distances_sum":1733.4210032618146}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5464409722222222,"recall":0.5460069444444444,"f1":null,"seconds":0.00022318772971630096,"exhaustive_search_seconds":0.00038512423634529114,"evaluations":558.2421875,"distances_sum":1667.9294668522837}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6623263888888888,"recall":0.6623263888888888,"f1":0.6623263888888888,"seconds":0.00029746443033218384,"exhaustive_search_seconds":0.00038512423634529114,"evaluations":658.7265625,"distances_sum":1607.8657066312517}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7343749999999999,"recall":0.7343749999999999,"f1":0.7343749999999999,"seconds":0.00037957727909088135,"exhaustive_search_seconds":0.00038512423634529114,"evaluations":766.1328125,"distances_sum":1584.3219322754394}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7890624999999994,"recall":0.7890624999999994,"f1":0.7890624999999994,"seconds":0.000612843781709671,"exhaustive_search_seconds":0.00038512423634529114,"evaluations":880.8515625,"distances_sum":1571.1071470231734}
KCenters.DeloneInvIndex> reached performance {"precision":0.8315972222222214,"recall":0.8315972222222214,"f1":0.8315972222222214,"seconds":0.0005233343690633774,"exhaustive_search_seconds":0.00038512423634529114,"evaluations":977.734375,"distances_sum":1558.8337756572882}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8360000000000001, speedup = 0.6996425416996149, eval_ratio = 0.09611499999999999)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
