  Resolving package versions...
  Installed LearnBase ─────────────────── v0.2.2
  Installed Compat ────────────────────── v3.10.0
  Installed KCenters ──────────────────── v0.2.2
  Installed OrderedCollections ────────── v1.2.0
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed MLDataPattern ─────────────── v0.5.3
  Installed StatsBase ─────────────────── v0.32.2
  Installed DataFrames ────────────────── v0.20.2
  Installed Reexport ──────────────────── v0.2.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed PooledArrays ──────────────── v0.5.3
  Installed CategoricalArrays ─────────── v0.7.7
  Installed DataStructures ────────────── v0.17.17
  Installed MLDataUtils ───────────────── v0.5.1
  Installed Parsers ───────────────────── v1.0.5
  Installed DataAPI ───────────────────── v1.3.0
  Installed Tables ────────────────────── v1.0.4
  Installed JSON ──────────────────────── v0.21.0
  Installed Missings ──────────────────── v0.4.3
  Installed MappedArrays ──────────────── v0.2.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed IteratorInterfaceExtensions ─ v1.0.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.10.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.5
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_Ti12Sg/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_Ti12Sg/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.10.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.5
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9367083616058032
[ Info: 0.8326150393486023
[ Info: 0.5553847705821197
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3257081131885449
mean(cdnet.distances) = 0.3475823868314425
mean(crand.distances) = 0.3343370820830266
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.171875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.171875,"f1":null,"seconds":2.0917505025863647e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":5.2421875,"distances_sum":505.39322642456267}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.185546875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.185546875,"f1":null,"seconds":2.175569534301758e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":5.4609375,"distances_sum":538.9883757827663}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.185546875,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.185546875,"f1":null,"seconds":2.175569534301758e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":5.4609375,"distances_sum":538.9883757827663}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41015625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.41015625,"f1":null,"seconds":3.926455974578857e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":6.4375,"distances_sum":1098.8489369531464}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4111328125, conf: {"ssize":7,"bsize":2}, perf: {"precision":null,"recall":0.4111328125,"f1":null,"seconds":3.822147846221924e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":6.328125,"distances_sum":1111.8866012615877}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8714837246087254,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.1640625,"distances_sum":2236.9604634340913}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.783203125,"state":{"ssize":8,"bsize":5},"perf":{"precision":1.0,"recall":0.783203125,"f1":0.8714837246087254,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.1640625,"distances_sum":2236.9604634340913}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80078125, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.80078125,"f1":0.8829816017316025,"seconds":5.515292286872864e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.25,"distances_sum":2288.887229722868}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.80078125,"state":{"ssize":8,"bsize":6},"perf":{"precision":1.0,"recall":0.80078125,"f1":0.8829816017316025,"seconds":5.515292286872864e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.25,"distances_sum":2288.887229722868}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.80078125,"state":{"ssize":8,"bsize":6},"perf":{"precision":1.0,"recall":0.80078125,"f1":0.8829816017316025,"seconds":5.515292286872864e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.25,"distances_sum":2288.887229722868}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5849609375, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5849609375,"f1":0.7217289654789661,"seconds":4.481524229049683e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":7.328125,"distances_sum":1420.7358542447428}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5849609375,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.5849609375,"f1":0.7217289654789661,"seconds":4.481524229049683e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":7.328125,"distances_sum":1420.7358542447428}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.599609375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.599609375,"f1":0.7340439074814082,"seconds":4.414469003677368e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":7.3984375,"distances_sum":1436.3873960760025}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.599609375,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.599609375,"f1":0.7340439074814082,"seconds":4.414469003677368e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":7.3984375,"distances_sum":1436.3873960760025}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.9008387445887452,"seconds":5.980953574180603e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.5546875,"distances_sum":2159.6245628844217}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9365785256410262,"seconds":5.999580025672913e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.7265625,"distances_sum":2448.9431592336573}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8097876082251091,"seconds":5.012378096580505e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":7.671875,"distances_sum":1733.5677606403187}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8494776057276066,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.3359375,"distances_sum":1922.7850804823634}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6875,"f1":0.8072089368964377,"seconds":4.9173831939697266e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":7.5859375,"distances_sum":1691.4975825445408}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8876953125,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8876953125,"f1":0.9365785256410262,"seconds":5.999580025672913e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.7265625,"distances_sum":2448.9431592336573}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8876953125,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8876953125,"f1":0.9365785256410262,"seconds":5.999580025672913e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.7265625,"distances_sum":2448.9431592336573}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3681640625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3681640625,"f1":null,"seconds":3.7923455238342285e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":5.875,"distances_sum":851.5316267596211}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1767578125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1767578125,"f1":null,"seconds":3.0212104320526123e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":5.1953125,"distances_sum":496.78444241657803}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3681640625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3681640625,"f1":null,"seconds":3.7923455238342285e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":5.875,"distances_sum":851.5316267596211}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9088317932067941,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.53125,"distances_sum":2253.8270810200543}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8659923409923419,"seconds":5.366280674934387e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.453125,"distances_sum":1952.711558531556}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5556640625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5556640625,"f1":0.6964252761127766,"seconds":4.3977051973342896e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.9765625,"distances_sum":1349.7732720984015}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.84375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.84375,"f1":0.9088317932067941,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.53125,"distances_sum":2253.8270810200543}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.936899038461539,"seconds":5.912035703659058e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8125,"distances_sum":2389.634636287459}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9326954295704301,"seconds":6.079673767089844e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.796875,"distances_sum":2405.864206022627}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9631925366300371,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8828125,"distances_sum":2608.174256003262}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9631925366300371,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8828125,"distances_sum":2608.174256003262}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9631925366300371,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8828125,"distances_sum":2608.174256003262}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8678295662670672,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.6015625,"distances_sum":1915.9590228242946}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.716796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.716796875,"f1":0.8280995046620055,"seconds":5.370005965232849e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.265625,"distances_sum":1745.5905347332414}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5830078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5830078125,"f1":0.7215014152514159,"seconds":4.6137720346450806e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.7421875,"distances_sum":1362.9668791869146}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.779296875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.779296875,"f1":0.8678295662670672,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.6015625,"distances_sum":1915.9590228242946}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9652815934065937,"seconds":0.00022588670253753662,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.9765625,"distances_sum":2526.756357721329}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9652815934065937,"seconds":0.00022588670253753662,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.9765625,"distances_sum":2526.756357721329}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9718406593406597,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.9765625,"distances_sum":2562.044372240901}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9718406593406597,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.9765625,"distances_sum":2562.044372240901}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9718406593406597,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.9765625,"distances_sum":2562.044372240901}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.40234375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.40234375,"f1":null,"seconds":3.6526471376419067e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":6.2890625,"distances_sum":899.9728869127168}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.55859375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.55859375,"f1":0.7021447302697307,"seconds":4.148110747337341e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.234375,"distances_sum":1242.528711511557}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.55859375,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.55859375,"f1":0.7021447302697307,"seconds":4.148110747337341e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.234375,"distances_sum":1242.528711511557}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9344608516483524,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7578125,"distances_sum":2331.1228724895213}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.884765625,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.884765625,"f1":0.9344608516483524,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7578125,"distances_sum":2331.1228724895213}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9670215201465203,"seconds":5.373731255531311e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.890625,"distances_sum":2538.969923393418}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.965905448717949,"seconds":5.356967449188232e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.890625,"distances_sum":2554.1420204522574}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9670215201465203,"seconds":5.373731255531311e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.890625,"distances_sum":2538.969923393418}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9670215201465203,"seconds":5.373731255531311e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.890625,"distances_sum":2538.969923393418}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.681640625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.681640625,"f1":0.7989389083139092,"seconds":4.5318156480789185e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":7.578125,"distances_sum":1626.5730112653926}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2373046875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2373046875,"f1":null,"seconds":3.3527612686157227e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":6.0078125,"distances_sum":550.5674810638984}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2392578125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2392578125,"f1":null,"seconds":3.2819807529449463e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":6.203125,"distances_sum":567.0296356878217}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.681640625,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.681640625,"f1":0.7989389083139092,"seconds":4.5318156480789185e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":7.578125,"distances_sum":1626.5730112653926}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.897748605561106,"seconds":5.3513795137405396e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.4453125,"distances_sum":2167.4608610651253}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9333047161172168,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.6484375,"distances_sum":2337.037478504754}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6826171875,"f1":0.8002350080475088,"seconds":4.4442713260650635e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":7.625,"distances_sum":1655.4524222377624}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8501696220446232,"seconds":5.183741450309753e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.2890625,"distances_sum":1844.5079241090953}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8555611055611064,"seconds":5.116686224937439e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.25,"distances_sum":1879.8619545653187}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8837890625,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9333047161172168,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.6484375,"distances_sum":2337.037478504754}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9718234890109895,"seconds":5.4854899644851685e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.9609375,"distances_sum":2612.3765535777366}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9589171245421251,"seconds":5.3513795137405396e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.8671875,"distances_sum":2525.632612395294}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9374313186813193,"seconds":5.327165126800537e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.65625,"distances_sum":2355.604816105627}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9510874542124546,"seconds":5.418434739112854e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.796875,"distances_sum":2513.2504832681066}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9536687271062275,"seconds":5.515292286872864e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.875,"distances_sum":2476.143597562398}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9718234890109895,"seconds":5.4854899644851685e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.9609375,"distances_sum":2612.3765535777366}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9718234890109895,"seconds":5.4854899644851685e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.9609375,"distances_sum":2612.3765535777366}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2060546875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2060546875,"f1":null,"seconds":3.380700945854187e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":6.3046875,"distances_sum":502.8964486109293}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6845703125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6845703125,"f1":0.8015831390831396,"seconds":4.561617970466614e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.7890625,"distances_sum":1712.9633288360073}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8485727813852822,"seconds":5.187466740608215e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.2109375,"distances_sum":1896.3364906074012}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7548828125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.8485727813852822,"seconds":5.187466740608215e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.2109375,"distances_sum":1896.3364906074012}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9611836080586085,"seconds":5.781650543212891e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.875,"distances_sum":2604.4030087806395}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.9180116758241766,"seconds":5.198642611503601e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.6796875,"distances_sum":2284.308281989554}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8561391733266744,"seconds":4.995614290237427e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.2734375,"distances_sum":1911.030916472512}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9611836080586085,"seconds":5.781650543212891e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.875,"distances_sum":2604.4030087806395}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9736836080586085,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.890625,"distances_sum":2722.488115476801}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9614297161172165,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8984375,"distances_sum":2629.7763787471563}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9741643772893775,"seconds":6.055459380149841e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.9453125,"distances_sum":2705.041916253784}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9736836080586085,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.890625,"distances_sum":2722.488115476801}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9736836080586085,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.890625,"distances_sum":2722.488115476801}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.7881502178377187,"seconds":4.988163709640503e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":7.65625,"distances_sum":1624.0668848911646}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2138671875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2138671875,"f1":null,"seconds":3.330409526824951e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":6.2421875,"distances_sum":526.7064480068224}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.568359375,"f1":null,"seconds":4.148110747337341e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":6.734375,"distances_sum":1362.1772548735942}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.66796875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.66796875,"f1":0.7881502178377187,"seconds":4.988163709640503e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":7.65625,"distances_sum":1624.0668848911646}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8666645854145861,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.2265625,"distances_sum":1925.610022998747}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9411515567765573,"seconds":5.668029189109802e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.71875,"distances_sum":2409.5416716814216}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.81640625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.81640625,"f1":0.8930663086913095,"seconds":5.563721060752869e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.625,"distances_sum":2065.3839208600857}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.896484375,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.896484375,"f1":0.9411515567765573,"seconds":5.668029189109802e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.71875,"distances_sum":2409.5416716814216}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9756925366300366,"seconds":6.094574928283691e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.90625,"distances_sum":2675.2224721487555}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9630437271062277,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.890625,"distances_sum":2578.480651692594}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9672676282051286,"seconds":6.025657057762146e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8984375,"distances_sum":2601.3809875122424}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9756925366300366,"seconds":6.094574928283691e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.90625,"distances_sum":2675.2224721487555}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9756925366300366,"seconds":6.094574928283691e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.90625,"distances_sum":2675.2224721487555}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.224609375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.224609375,"f1":null,"seconds":3.5371631383895874e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":6.453125,"distances_sum":530.5501642761246}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.224609375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.224609375,"f1":null,"seconds":3.5371631383895874e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":6.453125,"distances_sum":530.5501642761246}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3544921875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3544921875,"f1":null,"seconds":3.926455974578857e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":5.4453125,"distances_sum":689.0129414920021}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6357421875, conf: {"ssize":3,"bsize":4}, perf: {"precision":0.9869698660714286,"recall":0.6357421875,"f1":0.7562867037476418,"seconds":5.031004548072815e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":7.1484375,"distances_sum":1366.3948093473653}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6357421875,"state":{"ssize":3,"bsize":4},"perf":{"precision":0.9869698660714286,"recall":0.6357421875,"f1":0.7562867037476418,"seconds":5.031004548072815e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":7.1484375,"distances_sum":1366.3948093473653}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":7,"bsize":6}, perf: {"precision":0.9870256696428572,"recall":0.814453125,"f1":0.8837511663683543,"seconds":5.841255187988281e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.5078125,"distances_sum":1875.4573469514723}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.64453125, conf: {"ssize":1,"bsize":4}, perf: {"precision":0.9825427827380951,"recall":0.64453125,"f1":0.7643102340367974,"seconds":4.969537258148193e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":7.2890625,"distances_sum":1386.5344339241233}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.814453125,"state":{"ssize":7,"bsize":6},"perf":{"precision":0.9870256696428572,"recall":0.814453125,"f1":0.8837511663683543,"seconds":5.841255187988281e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.5078125,"distances_sum":1875.4573469514723}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":5,"bsize":10}, perf: {"precision":0.985444568452381,"recall":0.9208984375,"f1":0.9483028039668668,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.8515625,"distances_sum":2216.167746082121}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":1,"bsize":7}, perf: {"precision":0.9879743303571429,"recall":0.8642578125,"f1":0.9167119989385616,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.84375,"distances_sum":1978.5875858463091}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":4,"bsize":7}, perf: {"precision":0.9853980654761906,"recall":0.8515625,"f1":0.9079999427655684,"seconds":5.576759576797485e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.7421875,"distances_sum":1992.3284618391176}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":5,"bsize":10},"perf":{"precision":0.985444568452381,"recall":0.9208984375,"f1":0.9483028039668668,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.8515625,"distances_sum":2216.167746082121}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9208984375,"state":{"ssize":5,"bsize":10},"perf":{"precision":0.985444568452381,"recall":0.9208984375,"f1":0.9483028039668668,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.8515625,"distances_sum":2216.167746082121}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8476715992341002,"seconds":4.980713129043579e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.5234375,"distances_sum":1586.8755949434853}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5380859375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5380859375,"f1":null,"seconds":4.084780812263489e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":6.71875,"distances_sum":1023.2866739474315}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.75,"f1":0.8476715992341002,"seconds":4.980713129043579e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.5234375,"distances_sum":1586.8755949434853}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9377492299367304,"seconds":5.651265382766724e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.578125,"distances_sum":2133.885270626476}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8856601731601741,"seconds":5.3085386753082275e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.3984375,"distances_sum":1758.4118052970546}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9215888278388286,"seconds":5.476176738739014e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.5703125,"distances_sum":1976.742125775983}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9377492299367304,"seconds":5.651265382766724e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.578125,"distances_sum":2133.885270626476}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9681032509157512,"seconds":5.649402737617493e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8828125,"distances_sum":2229.890301187089}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9405048076923083,"seconds":5.142763257026672e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.7265625,"distances_sum":2103.122005967119}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9497081043956047,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.7421875,"distances_sum":2162.443243055997}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9518289002664007,"seconds":5.435198545455933e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.7578125,"distances_sum":2158.0726844407304}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9681032509157512,"seconds":5.649402737617493e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8828125,"distances_sum":2229.890301187089}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9681032509157512,"seconds":5.649402737617493e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8828125,"distances_sum":2229.890301187089}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6982421875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6982421875,"f1":0.8122721028971037,"seconds":4.533678293228149e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":7.21875,"distances_sum":1562.3430137807557}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3974609375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3974609375,"f1":null,"seconds":3.6507844924926758e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":5.90625,"distances_sum":855.4392261019744}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6982421875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6982421875,"f1":0.8122721028971037,"seconds":4.533678293228149e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":7.21875,"distances_sum":1562.3430137807557}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9056922244422253,"seconds":5.381181836128235e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8359375,"distances_sum":2017.6007301731925}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8435335497835506,"seconds":5.010515451431274e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.0,"distances_sum":1733.1382167258348}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8359375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8359375,"f1":0.9056922244422253,"seconds":5.381181836128235e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8359375,"distances_sum":2017.6007301731925}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9474931318681326,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8046875,"distances_sum":2349.0071323759985}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9425881410256415,"seconds":5.405396223068237e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8046875,"distances_sum":2303.3944663898214}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9534684065934074,"seconds":5.492940545082092e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8515625,"distances_sum":2397.4853363870197}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9365244130869137,"seconds":5.511566996574402e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8125,"distances_sum":2252.5288892593344}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9534684065934074,"seconds":5.492940545082092e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8515625,"distances_sum":2397.4853363870197}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91796875,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9534684065934074,"seconds":5.492940545082092e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8515625,"distances_sum":2397.4853363870197}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8620655386280394,"seconds":5.153939127922058e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.828125,"distances_sum":1851.5811556317929}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1474609375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1474609375,"f1":null,"seconds":2.739951014518738e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":4.1484375,"distances_sum":314.1528995943078}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8604999167499177,"seconds":4.990026354789734e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.734375,"distances_sum":1845.4796216962716}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7705078125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7705078125,"f1":0.8620655386280394,"seconds":5.153939127922058e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.828125,"distances_sum":1851.5811556317929}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9380525724275729,"seconds":5.183741450309753e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.5703125,"distances_sum":2365.5171725315417}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8935546875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9380525724275729,"seconds":5.183741450309753e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.5703125,"distances_sum":2365.5171725315417}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9510473901098907,"seconds":5.4836273193359375e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.71875,"distances_sum":2438.007397230972}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9631181318681324,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.78125,"distances_sum":2513.4297700697716}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.954879495504496,"seconds":3.3974647521972656e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7421875,"distances_sum":2453.8759391442786}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9631181318681324,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.78125,"distances_sum":2513.4297700697716}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9631181318681324,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.78125,"distances_sum":2513.4297700697716}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.794510177322678,"seconds":2.825632691383362e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":7.3203125,"distances_sum":1564.6668929393336}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7900390625,"f1":0.8755645396270404,"seconds":3.1404197216033936e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":7.8203125,"distances_sum":1928.702996185713}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7900390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7900390625,"f1":0.8755645396270404,"seconds":3.1404197216033936e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":7.8203125,"distances_sum":1928.702996185713}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9549565018315024,"seconds":3.507360816001892e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.8046875,"distances_sum":2474.0235818693172}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8984603937728948,"seconds":3.4011900424957275e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.421875,"distances_sum":2071.338204016527}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9549565018315024,"seconds":3.507360816001892e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.8046875,"distances_sum":2474.0235818693172}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9771405677655681,"seconds":3.7848949432373047e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.9140625,"distances_sum":2621.6629299073243}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9688072344322349,"seconds":3.606081008911133e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.90625,"distances_sum":2536.0626001874466}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9656078296703303,"seconds":3.4999102354049683e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.859375,"distances_sum":2549.474253163193}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9598443223443227,"seconds":3.50363552570343e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.8046875,"distances_sum":2519.886095645074}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9771405677655681,"seconds":3.7848949432373047e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.9140625,"distances_sum":2621.6629299073243}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9771405677655681,"seconds":3.7848949432373047e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.9140625,"distances_sum":2621.6629299073243}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8722928113553122,"seconds":3.1534582376480103e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":7.890625,"distances_sum":1946.1971725277576}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2138671875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2138671875,"f1":null,"seconds":2.0507723093032837e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":5.3359375,"distances_sum":495.27411588807024}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.54296875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.54296875,"f1":0.6877587690087695,"seconds":2.5816261768341064e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":6.8359375,"distances_sum":1194.3835506834555}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78515625,"f1":0.8722928113553122,"seconds":3.1534582376480103e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":7.890625,"distances_sum":1946.1971725277576}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9429429945054951,"seconds":3.842636942863464e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":8.703125,"distances_sum":2437.7807875146787}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9251259157509165,"seconds":3.602355718612671e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":8.609375,"distances_sum":2293.413414180491}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9553972069597075,"seconds":3.4812837839126587e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":8.7109375,"distances_sum":2538.091449613729}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.899381868131869,"seconds":3.4086406230926514e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":8.390625,"distances_sum":2137.4551082962407}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9553972069597075,"seconds":3.4812837839126587e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":8.7109375,"distances_sum":2538.091449613729}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.974593635531136,"seconds":3.637745976448059e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":8.90625,"distances_sum":2616.113304809734}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9769917582417585,"seconds":3.883615136146545e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":8.9140625,"distances_sum":2631.4523056648013}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9556063727938733,"seconds":3.4477561712265015e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":8.828125,"distances_sum":2492.125399060645}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9683779761904765,"seconds":3.864988684654236e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":8.875,"distances_sum":2579.460498952993}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9647550366300371,"seconds":3.552064299583435e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":8.8203125,"distances_sum":2567.6280477172563}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9769917582417585,"seconds":3.883615136146545e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":8.9140625,"distances_sum":2631.4523056648013}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9769917582417585,"seconds":3.883615136146545e-6,"exhaustive_search_seconds":9.126961231231689e-7,"evaluations":8.9140625,"distances_sum":2631.4523056648013}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.28125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.28125,"f1":null,"seconds":1.8868595361709595e-6,"exhaustive_search_seconds":8.512288331985474e-7,"evaluations":6.0078125,"distances_sum":610.9966979583535}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.56640625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.56640625,"f1":0.7081904206904213,"seconds":2.6263296604156494e-6,"exhaustive_search_seconds":8.512288331985474e-7,"evaluations":6.9921875,"distances_sum":1173.6555692844247}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.56640625,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.56640625,"f1":0.7081904206904213,"seconds":2.6263296604156494e-6,"exhaustive_search_seconds":8.512288331985474e-7,"evaluations":6.9921875,"distances_sum":1173.6555692844247}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8134765625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8134765625,"f1":0.8916266025641035,"seconds":3.259629011154175e-6,"exhaustive_search_seconds":8.512288331985474e-7,"evaluations":7.9140625,"distances_sum":1936.6466079514505}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8134765625,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8134765625,"f1":0.8916266025641035,"seconds":3.259629011154175e-6,"exhaustive_search_seconds":8.512288331985474e-7,"evaluations":7.9140625,"distances_sum":1936.6466079514505}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9162004662004668,"seconds":3.3974647521972656e-6,"exhaustive_search_seconds":8.512288331985474e-7,"evaluations":8.3125,"distances_sum":2082.019902746851}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9661286630036634,"seconds":3.471970558166504e-6,"exhaustive_search_seconds":8.512288331985474e-7,"evaluations":8.8203125,"distances_sum":2431.481766399911}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9661286630036634,"seconds":3.471970558166504e-6,"exhaustive_search_seconds":8.512288331985474e-7,"evaluations":8.8203125,"distances_sum":2431.481766399911}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9661286630036634,"seconds":3.471970558166504e-6,"exhaustive_search_seconds":8.512288331985474e-7,"evaluations":8.8203125,"distances_sum":2431.481766399911}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4267578125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4267578125,"f1":null,"seconds":2.251937985420227e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":6.640625,"distances_sum":807.1274598570716}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8905995046620052,"seconds":3.337860107421875e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.234375,"distances_sum":1857.69880362202}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8173828125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.8173828125,"f1":0.8905995046620052,"seconds":3.337860107421875e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.234375,"distances_sum":1857.69880362202}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9709649725274729,"seconds":3.589317202568054e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.9375,"distances_sum":2416.906231150125}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9709649725274729,"seconds":3.589317202568054e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.9375,"distances_sum":2416.906231150125}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9806204212454215,"seconds":3.730878233909607e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.96875,"distances_sum":2480.554537417509}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.9798763736263738,"seconds":3.511086106300354e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.9453125,"distances_sum":2480.4330715329293}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96484375,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9806204212454215,"seconds":3.730878233909607e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.96875,"distances_sum":2480.554537417509}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96484375,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9806204212454215,"seconds":3.730878233909607e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.96875,"distances_sum":2480.554537417509}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.224609375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.224609375,"f1":null,"seconds":1.819804310798645e-6,"exhaustive_search_seconds":8.605420589447021e-7,"evaluations":5.8203125,"distances_sum":456.88973372611986}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3876953125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3876953125,"f1":null,"seconds":2.130866050720215e-6,"exhaustive_search_seconds":8.605420589447021e-7,"evaluations":5.9765625,"distances_sum":728.9183651846938}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3876953125,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3876953125,"f1":null,"seconds":2.130866050720215e-6,"exhaustive_search_seconds":8.605420589447021e-7,"evaluations":5.9765625,"distances_sum":728.9183651846938}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.8799112345987354,"seconds":3.1869858503341675e-6,"exhaustive_search_seconds":8.605420589447021e-7,"evaluations":7.8984375,"distances_sum":1806.0593402675806}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.798828125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.798828125,"f1":0.8799112345987354,"seconds":3.1869858503341675e-6,"exhaustive_search_seconds":8.605420589447021e-7,"evaluations":7.8984375,"distances_sum":1806.0593402675806}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9485748626373631,"seconds":3.604218363761902e-6,"exhaustive_search_seconds":8.605420589447021e-7,"evaluations":8.734375,"distances_sum":2322.3635131702877}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9475560897435902,"seconds":3.721565008163452e-6,"exhaustive_search_seconds":8.605420589447021e-7,"evaluations":8.7421875,"distances_sum":2293.5717983342943}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9485748626373631,"seconds":3.604218363761902e-6,"exhaustive_search_seconds":8.605420589447021e-7,"evaluations":8.734375,"distances_sum":2322.3635131702877}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9485748626373631,"seconds":3.604218363761902e-6,"exhaustive_search_seconds":8.605420589447021e-7,"evaluations":8.734375,"distances_sum":2322.3635131702877}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.23046875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.23046875,"f1":null,"seconds":2.0638108253479004e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":6.25,"distances_sum":488.5603454598012}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.240234375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.240234375,"f1":null,"seconds":2.171844244003296e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":6.15625,"distances_sum":531.9680986352598}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8067208832833841,"seconds":2.9783695936203003e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":7.484375,"distances_sum":1424.3434797515447}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.69140625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.69140625,"f1":0.8067208832833841,"seconds":2.9783695936203003e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":7.484375,"distances_sum":1424.3434797515447}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8994250541125549,"seconds":3.345310688018799e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.4765625,"distances_sum":1893.76225999933}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8533747502497511,"seconds":3.0025839805603027e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":7.6484375,"distances_sum":1605.6193004133206}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9317078754578763,"seconds":3.4552067518234253e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.515625,"distances_sum":2175.592600902182}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9473302738927747,"seconds":3.5725533962249756e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.7265625,"distances_sum":2263.9727333155415}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9473302738927747,"seconds":3.5725533962249756e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.7265625,"distances_sum":2263.9727333155415}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9640853937728943,"seconds":3.5669654607772827e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.8359375,"distances_sum":2328.3428761964065}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.973214285714286,"seconds":3.6731362342834473e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.9140625,"distances_sum":2392.4720322561143}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9765453296703299,"seconds":3.5353004932403564e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.9140625,"distances_sum":2420.635663360412}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9708733974358976,"seconds":3.6302953958511353e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.90625,"distances_sum":2374.7637102874983}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":10,"bsize":10}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9610519688644694,"seconds":3.468245267868042e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.8359375,"distances_sum":2319.6387281772213}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":10,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9566449175824182,"seconds":3.4496188163757324e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.8203125,"distances_sum":2280.659281702606}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9677083333333338,"seconds":3.4943222999572754e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.8671875,"distances_sum":2353.5146805193376}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9765453296703299,"seconds":3.5353004932403564e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.9140625,"distances_sum":2420.635663360412}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9765453296703299,"seconds":3.5353004932403564e-6,"exhaustive_search_seconds":8.344650268554688e-7,"evaluations":8.9140625,"distances_sum":2420.635663360412}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7977949134199143,"seconds":2.7976930141448975e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":7.0390625,"distances_sum":1408.9954541465822}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6806640625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6806640625,"f1":0.7977949134199143,"seconds":2.7976930141448975e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":7.0390625,"distances_sum":1408.9954541465822}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8017578125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8017578125,"f1":0.8811308483183491,"seconds":3.162771463394165e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":8.109375,"distances_sum":1882.3047108755504}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.79296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.79296875,"f1":0.8760312604062612,"seconds":3.078952431678772e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":7.640625,"distances_sum":1829.8623577329272}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8017578125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8017578125,"f1":0.8811308483183491,"seconds":3.162771463394165e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":8.109375,"distances_sum":1882.3047108755504}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9338827838827846,"seconds":3.4105032682418823e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":8.578125,"distances_sum":2242.4367842497118}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9655734890109894,"seconds":3.5818666219711304e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":8.8046875,"distances_sum":2441.0453578141182}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9351247710622719,"seconds":3.300607204437256e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":8.4609375,"distances_sum":2201.8152413402076}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8953671328671338,"seconds":3.4086406230926514e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":8.1796875,"distances_sum":1973.7250965402632}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9655734890109894,"seconds":3.5818666219711304e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":8.8046875,"distances_sum":2441.0453578141182}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9655734890109894,"seconds":3.5818666219711304e-6,"exhaustive_search_seconds":8.288770914077759e-7,"evaluations":8.8046875,"distances_sum":2441.0453578141182}}, n: 9
mean(cfft.distances) = 0.4869660267517014
mean(cdnet.distances) = 0.4240765411545541
mean(crand.distances) = 0.3436115248082063
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.9088888888888889
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8755555555555555
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.9
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8644444444444445
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8911111111111111
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9133333333333332
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9444444444444443
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9377777777777778
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8666666666666666
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9133333333333332
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8933333333333332
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9422222222222222
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8888888888888888
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.888888888888889
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9333333333333332
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9377777777777778
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8355555555555556
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8666666666666667
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9199999999999999
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9111111111111111
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9177777777777778
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9422222222222222
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8911111111111111
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8844444444444445
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9177777777777777
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8466666666666667
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8511111111111113
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9066666666666666
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9044444444444445
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 10: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 12, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 2, 2, 3, 1, 3, 2, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 10: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 12, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 2, 2, 3, 1, 3, 2, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 10: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 12, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 2, 2, 3, 1, 3, 2, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 10: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 12, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 2, 2, 3, 1, 3, 2, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 10: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 12, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 2, 2, 3, 1, 3, 2, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 10: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 12, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 2, 2, 3, 1, 3, 2, 3]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 10: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 12, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 2, 2, 3, 1, 3, 2, 3]
acc = 0.96
*** finished computation of 12 references, err: [Inf, 0.554153057038784] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 18]]
** centroid: 1, normalized-entropy: 0.9927744539878083, [(2, 22), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 11: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
finished with 14 centroids; started with 12
acc = 0.9133333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.3624332829297439] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3624332829297439, 0.22300990285944786] ***
*** finished computation of 7 references, err: [Inf, 0.3624332829297439, 0.22300990285944786] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [95, 58, 0]]
** centroid: 1, normalized-entropy: 0.9573931988440293, [(1, 95), (2, 58)]
*** center 2: selecting labels [1] (freq >= 1) [from [157, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [83, 19, 0]]
** centroid: 3, normalized-entropy: 0.6936126404300949, [(1, 83), (2, 19)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 109, 2]]
** centroid: 4, normalized-entropy: 0.1301627906682592, [(2, 109), (3, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [12, 20, 0]]
** centroid: 5, normalized-entropy: 0.954434002924965, [(1, 12), (2, 20)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [41, 10, 0]]
** centroid: 6, normalized-entropy: 0.7140152804378671, [(1, 41), (2, 10)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 47, 13]]
** centroid: 7, normalized-entropy: 0.7540340561971327, [(2, 47), (3, 13)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3376264615819372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3376264615819372, 0.2510913480715505] ***
*** finished computation of 7 references, err: [Inf, 0.3376264615819372, 0.2510913480715505] ***
*** center 1: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [49, 19, 0]]
** centroid: 2, normalized-entropy: 0.8546480601169081, [(1, 49), (2, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [5, 81, 0]]
** centroid: 3, normalized-entropy: 0.32001486274754665, [(1, 5), (2, 81)]
*** center 4: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [89, 137, 17]]
** centroid: 5, normalized-entropy: 0.79832580118994, [(1, 89), (2, 137), (3, 17)]
*** center 6: selecting labels [1] (freq >= 1) [from [162, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2453608670672667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2453608670672667, 0.1997545580644959] ***
*** finished computation of 7 references, err: [Inf, 0.2453608670672667, 0.1997545580644959] ***
*** center 1: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [119, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [64, 6, 0]]
** centroid: 3, normalized-entropy: 0.4220005168831531, [(1, 64), (2, 6)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 88, 16]]
** centroid: 4, normalized-entropy: 0.6193821946787638, [(2, 88), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [114, 41, 0]]
** centroid: 5, normalized-entropy: 0.8334850904089345, [(1, 114), (2, 41)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [27, 66, 0]]
** centroid: 6, normalized-entropy: 0.8691375806126381, [(1, 27), (2, 66)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 43, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4068895249918394] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4068895249918394, 0.29655869898747084] ***
*** starting iteration: 2; err: [Inf, 0.4068895249918394, 0.29655869898747084] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4068895249918394, 0.29655869898747084, 0.2926922472216211] ***
*** starting iteration: 3; err: [Inf, 0.4068895249918394, 0.29655869898747084, 0.2926922472216211] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4068895249918394, 0.29655869898747084, 0.2926922472216211, 0.2912257287536633] ***
*** starting iteration: 4; err: [Inf, 0.4068895249918394, 0.29655869898747084, 0.2926922472216211, 0.2912257287536633] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4068895249918394, 0.29655869898747084, 0.2926922472216211, 0.2912257287536633, 0.28954016259107906] ***
*** starting iteration: 5; err: [Inf, 0.4068895249918394, 0.29655869898747084, 0.2926922472216211, 0.2912257287536633, 0.28954016259107906] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4068895249918394, 0.29655869898747084, 0.2926922472216211, 0.2912257287536633, 0.28954016259107906, 0.28859707740675267] ***
*** finished computation of 3 references, err: [Inf, 0.4068895249918394, 0.29655869898747084, 0.2926922472216211, 0.2912257287536633, 0.28954016259107906, 0.28859707740675267] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 212, 15]]
** centroid: 1, normalized-entropy: 0.351118992570536, [(2, 212), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [177, 38, 0]]
** centroid: 2, normalized-entropy: 0.6729024873776147, [(1, 177), (2, 38)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [211, 13, 0]]
** centroid: 3, normalized-entropy: 0.31959757762434415, [(1, 211), (2, 13)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3628964847892054] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3628964847892054, 0.29213153815659315] ***
*** starting iteration: 2; err: [Inf, 0.3628964847892054, 0.29213153815659315] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3628964847892054, 0.29213153815659315, 0.29203547701250754] ***
*** finished computation of 3 references, err: [Inf, 0.3628964847892054, 0.29213153815659315, 0.29203547701250754] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 179, 17]]
** centroid: 1, normalized-entropy: 0.42547569905624044, [(2, 179), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [142, 53, 0]]
** centroid: 2, normalized-entropy: 0.844028390357229, [(1, 142), (2, 53)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [271, 5, 0]]
** centroid: 3, normalized-entropy: 0.1307272441646328, [(1, 271), (2, 5)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3679141293599576] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3679141293599576, 0.30569534041085233] ***
*** starting iteration: 2; err: [Inf, 0.3679141293599576, 0.30569534041085233] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3679141293599576, 0.30569534041085233, 0.29898580783668127] ***
*** starting iteration: 3; err: [Inf, 0.3679141293599576, 0.30569534041085233, 0.29898580783668127] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3679141293599576, 0.30569534041085233, 0.29898580783668127, 0.2975772895516529] ***
*** starting iteration: 4; err: [Inf, 0.3679141293599576, 0.30569534041085233, 0.29898580783668127, 0.2975772895516529] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3679141293599576, 0.30569534041085233, 0.29898580783668127, 0.2975772895516529, 0.2975096169110762] ***
*** finished computation of 3 references, err: [Inf, 0.3679141293599576, 0.30569534041085233, 0.29898580783668127, 0.2975772895516529, 0.2975096169110762] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [140, 81, 0]]
** centroid: 1, normalized-entropy: 0.947959244432382, [(1, 140), (2, 81)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [69, 163, 16]]
** centroid: 2, normalized-entropy: 0.736024863178431, [(1, 69), (2, 163), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [198, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4874178424572667] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4874178424572667, 0.32173075019899344] ***
*** finished computation of 3 references, err: [Inf, 0.4874178424572667, 0.32173075019899344] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 131, 15]]
** centroid: 1, normalized-entropy: 0.4776206401434846, [(2, 131), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [135, 90, 0]]
** centroid: 2, normalized-entropy: 0.9709505944546688, [(1, 135), (2, 90)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [253, 42, 0]]
** centroid: 3, normalized-entropy: 0.590419597963209, [(1, 253), (2, 42)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3596730803780403] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3596730803780403, 0.3105715951013813] ***
*** finished computation of 3 references, err: [Inf, 0.3596730803780403, 0.3105715951013813] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [115, 154, 17]]
** centroid: 1, normalized-entropy: 0.7895884032218946, [(1, 115), (2, 154), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [227, 11, 0]]
** centroid: 2, normalized-entropy: 0.2701108119632041, [(1, 227), (2, 11)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [71, 72, 0]]
** centroid: 3, normalized-entropy: 0.9999647242701454, [(1, 71), (2, 72)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39815123309136957] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39815123309136957, 0.31572241860342726] ***
*** finished computation of 3 references, err: [Inf, 0.39815123309136957, 0.31572241860342726] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [64, 207, 16]]
** centroid: 1, normalized-entropy: 0.6656121770229487, [(1, 64), (2, 207), (3, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [189, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [154, 37, 0]]
** centroid: 3, normalized-entropy: 0.7091832688981259, [(1, 154), (2, 37)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.40579555223852554] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40579555223852554, 0.3282414012736789] ***
*** starting iteration: 2; err: [Inf, 0.40579555223852554, 0.3282414012736789] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40579555223852554, 0.3282414012736789, 0.3065548532729124] ***
*** starting iteration: 3; err: [Inf, 0.40579555223852554, 0.3282414012736789, 0.3065548532729124] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40579555223852554, 0.3282414012736789, 0.3065548532729124, 0.29936658647806347] ***
*** starting iteration: 4; err: [Inf, 0.40579555223852554, 0.3282414012736789, 0.3065548532729124, 0.29936658647806347] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40579555223852554, 0.3282414012736789, 0.3065548532729124, 0.29936658647806347, 0.29750222321348013] ***
*** starting iteration: 5; err: [Inf, 0.40579555223852554, 0.3282414012736789, 0.3065548532729124, 0.29936658647806347, 0.29750222321348013] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40579555223852554, 0.3282414012736789, 0.3065548532729124, 0.29936658647806347, 0.29750222321348013, 0.29712646980644075] ***
*** finished computation of 3 references, err: [Inf, 0.40579555223852554, 0.3282414012736789, 0.3065548532729124, 0.29936658647806347, 0.29750222321348013, 0.29712646980644075] ***
*** center 1: selecting labels [1] (freq >= 1) [from [207, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [73, 157, 15]]
** centroid: 2, normalized-entropy: 0.7436222690928654, [(1, 73), (2, 157), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [108, 106, 0]]
** centroid: 3, normalized-entropy: 0.9999369937966904, [(1, 108), (2, 106)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3643858509439824] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3643858509439824, 0.2983552861757677] ***
*** starting iteration: 2; err: [Inf, 0.3643858509439824, 0.2983552861757677] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3643858509439824, 0.2983552861757677, 0.29288054033248184] ***
*** starting iteration: 3; err: [Inf, 0.3643858509439824, 0.2983552861757677, 0.29288054033248184] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3643858509439824, 0.2983552861757677, 0.29288054033248184, 0.29250211329262205] ***
*** finished computation of 3 references, err: [Inf, 0.3643858509439824, 0.2983552861757677, 0.29288054033248184, 0.29250211329262205] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 185, 17]]
** centroid: 1, normalized-entropy: 0.4166647575202427, [(2, 185), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [264, 10, 0]]
** centroid: 2, normalized-entropy: 0.22599073821780646, [(1, 264), (2, 10)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [149, 42, 0]]
** centroid: 3, normalized-entropy: 0.7599762557552775, [(1, 149), (2, 42)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4153336047319168] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4153336047319168, 0.30963611219363146] ***
*** starting iteration: 2; err: [Inf, 0.4153336047319168, 0.30963611219363146] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4153336047319168, 0.30963611219363146, 0.30232247678392654] ***
*** starting iteration: 3; err: [Inf, 0.4153336047319168, 0.30963611219363146, 0.30232247678392654] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4153336047319168, 0.30963611219363146, 0.30232247678392654, 0.29992883104825396] ***
*** starting iteration: 4; err: [Inf, 0.4153336047319168, 0.30963611219363146, 0.30232247678392654, 0.29992883104825396] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4153336047319168, 0.30963611219363146, 0.30232247678392654, 0.29992883104825396, 0.2992448944967056] ***
*** finished computation of 3 references, err: [Inf, 0.4153336047319168, 0.30963611219363146, 0.30232247678392654, 0.29992883104825396, 0.2992448944967056] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [130, 89, 0]]
** centroid: 1, normalized-entropy: 0.974567465766888, [(1, 130), (2, 89)]
*** center 2: selecting labels [1] (freq >= 1) [from [200, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [77, 155, 16]]
** centroid: 3, normalized-entropy: 0.7588935995209137, [(1, 77), (2, 155), (3, 16)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3876795929943298] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3876795929943298, 0.3036985635679137] ***
*** starting iteration: 2; err: [Inf, 0.3876795929943298, 0.3036985635679137] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3876795929943298, 0.3036985635679137, 0.29004093409060044] ***
*** starting iteration: 3; err: [Inf, 0.3876795929943298, 0.3036985635679137, 0.29004093409060044] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3876795929943298, 0.3036985635679137, 0.29004093409060044, 0.2882795009982993] ***
*** finished computation of 3 references, err: [Inf, 0.3876795929943298, 0.3036985635679137, 0.29004093409060044, 0.2882795009982993] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [167, 35, 0]]
** centroid: 1, normalized-entropy: 0.6651247380179306, [(1, 167), (2, 35)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 217, 15]]
** centroid: 2, normalized-entropy: 0.34565351075438344, [(2, 217), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [220, 11, 0]]
** centroid: 3, normalized-entropy: 0.2761954276479391, [(1, 220), (2, 11)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39073990309971207] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39073990309971207, 0.30697496481605624] ***
*** starting iteration: 2; err: [Inf, 0.39073990309971207, 0.30697496481605624] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39073990309971207, 0.30697496481605624, 0.29491172753263273] ***
*** starting iteration: 3; err: [Inf, 0.39073990309971207, 0.30697496481605624, 0.29491172753263273] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39073990309971207, 0.30697496481605624, 0.29491172753263273, 0.2925589581339926] ***
*** finished computation of 3 references, err: [Inf, 0.39073990309971207, 0.30697496481605624, 0.29491172753263273, 0.2925589581339926] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [270, 12, 0]]
** centroid: 1, normalized-entropy: 0.2538784402981617, [(1, 270), (2, 12)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 181, 17]]
** centroid: 2, normalized-entropy: 0.4224931157194282, [(2, 181), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [143, 44, 0]]
** centroid: 3, normalized-entropy: 0.787126586201269, [(1, 143), (2, 44)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3976535041477235] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3976535041477235, 0.3210458452862197] ***
*** starting iteration: 2; err: [Inf, 0.3976535041477235, 0.3210458452862197] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3976535041477235, 0.3210458452862197, 0.3056458800924995] ***
*** starting iteration: 3; err: [Inf, 0.3976535041477235, 0.3210458452862197, 0.3056458800924995] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3976535041477235, 0.3210458452862197, 0.3056458800924995, 0.30160503840350406] ***
*** finished computation of 3 references, err: [Inf, 0.3976535041477235, 0.3210458452862197, 0.3056458800924995, 0.30160503840350406] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [119, 79, 0]]
** centroid: 1, normalized-entropy: 0.9703566557380118, [(1, 119), (2, 79)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [81, 165, 16]]
** centroid: 2, normalized-entropy: 0.750820399949828, [(1, 81), (2, 165), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [207, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4203068059519515] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4203068059519515, 0.3266310957749864] ***
*** starting iteration: 2; err: [Inf, 0.4203068059519515, 0.3266310957749864] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4203068059519515, 0.3266310957749864, 0.3134245561147752] ***
*** starting iteration: 3; err: [Inf, 0.4203068059519515, 0.3266310957749864, 0.3134245561147752] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4203068059519515, 0.3266310957749864, 0.3134245561147752, 0.3037563380813254] ***
*** finished computation of 3 references, err: [Inf, 0.4203068059519515, 0.3266310957749864, 0.3134245561147752, 0.3037563380813254] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [59, 227, 15]]
** centroid: 1, normalized-entropy: 0.6204779457607827, [(1, 59), (2, 227), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [123, 33, 0]]
** centroid: 2, normalized-entropy: 0.7444131797881749, [(1, 123), (2, 33)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [206, 3, 0]]
** centroid: 3, normalized-entropy: 0.1084404904449667, [(1, 206), (2, 3)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.44353998915014464] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44353998915014464, 0.3153868476920266] ***
*** starting iteration: 2; err: [Inf, 0.44353998915014464, 0.3153868476920266] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44353998915014464, 0.3153868476920266, 0.3009839805884697] ***
*** starting iteration: 3; err: [Inf, 0.44353998915014464, 0.3153868476920266, 0.3009839805884697] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44353998915014464, 0.3153868476920266, 0.3009839805884697, 0.29597620083915555] ***
*** finished computation of 3 references, err: [Inf, 0.44353998915014464, 0.3153868476920266, 0.3009839805884697, 0.29597620083915555] ***
*** center 1: selecting labels [1] (freq >= 2) [from [210, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [68, 163, 17]]
** centroid: 2, normalized-entropy: 0.741249994460107, [(1, 68), (2, 163), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [135, 74, 0]]
** centroid: 3, normalized-entropy: 0.9376478657727275, [(1, 135), (2, 74)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37217258893210314] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37217258893210314, 0.3114947840177651] ***
*** starting iteration: 2; err: [Inf, 0.37217258893210314, 0.3114947840177651] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37217258893210314, 0.3114947840177651, 0.2998058447164708] ***
*** starting iteration: 3; err: [Inf, 0.37217258893210314, 0.3114947840177651, 0.2998058447164708] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37217258893210314, 0.3114947840177651, 0.2998058447164708, 0.2969652769662652] ***
*** finished computation of 3 references, err: [Inf, 0.37217258893210314, 0.3114947840177651, 0.2998058447164708, 0.2969652769662652] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [232, 3, 0]]
** centroid: 1, normalized-entropy: 0.09861703860006277, [(1, 232), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [162, 68, 0]]
** centroid: 2, normalized-entropy: 0.8759110349777134, [(1, 162), (2, 68)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [13, 173, 16]]
** centroid: 3, normalized-entropy: 0.46433406334685823, [(1, 13), (2, 173), (3, 16)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3790502716499093] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3790502716499093, 0.24805512078639186] ***
*** finished computation of 3 references, err: [Inf, 0.3790502716499093, 0.24805512078639186] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [58, 156, 5]]
** centroid: 1, normalized-entropy: 0.6187809900449847, [(1, 58), (2, 156), (3, 5)]
*** center 2: selecting labels [1] (freq >= 2) [from [258, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [72, 107, 10]]
** centroid: 3, normalized-entropy: 0.7693770047729083, [(1, 72), (2, 107), (3, 10)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3489880459034059] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3489880459034059, 0.24847007803954016] ***
*** finished computation of 3 references, err: [Inf, 0.3489880459034059, 0.24847007803954016] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [139, 4, 0]]
** centroid: 1, normalized-entropy: 0.18411742692826688, [(1, 139), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [263, 42, 0]]
** centroid: 2, normalized-entropy: 0.578196494940139, [(1, 263), (2, 42)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [11, 191, 17]]
** centroid: 3, normalized-entropy: 0.42594627661751455, [(1, 11), (2, 191), (3, 17)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28923673458631965] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28923673458631965, 0.24156980398299543] ***
*** finished computation of 3 references, err: [Inf, 0.28923673458631965, 0.24156980398299543] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [12, 197, 16]]
** centroid: 1, normalized-entropy: 0.41932154935802834, [(1, 12), (2, 197), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [176, 11, 0]]
** centroid: 2, normalized-entropy: 0.32275695889739825, [(1, 176), (2, 11)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [219, 36, 0]]
** centroid: 3, normalized-entropy: 0.5873116089977589, [(1, 219), (2, 36)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.17801842523854808] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17801842523854808, 0.15298637162122103] ***
*** finished computation of 7 references, err: [Inf, 0.17801842523854808, 0.15298637162122103] ***
*** center 1: selecting labels [1] (freq >= 2) [from [139, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 97, 11]]
** centroid: 2, normalized-entropy: 0.4748384883008607, [(2, 97), (3, 11)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [61, 11, 0]]
** centroid: 3, normalized-entropy: 0.6167482598263911, [(1, 61), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [98, 25, 0]]
** centroid: 4, normalized-entropy: 0.7283846722688453, [(1, 98), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 40, 0]]
** centroid: 5, normalized-entropy: 0.9815886212101388, [(1, 29), (2, 40)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 90, 4]]
** centroid: 6, normalized-entropy: 0.2538784402981617, [(2, 90), (3, 4)]
*** center 7: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27202932485567777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27202932485567777, 0.17628532522001947] ***
*** finished computation of 7 references, err: [Inf, 0.27202932485567777, 0.17628532522001947] ***
*** center 1: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [150, 79, 0]]
** centroid: 2, normalized-entropy: 0.9295029903660562, [(1, 150), (2, 79)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [11, 65, 0]]
** centroid: 3, normalized-entropy: 0.5965109917085881, [(1, 11), (2, 65)]
*** center 4: selecting labels [1] (freq >= 2) [from [123, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 76, 1]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 17, 16]]
** centroid: 7, normalized-entropy: 0.9993375041688846, [(2, 17), (3, 16)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22280751320923017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22280751320923017, 0.18098415743917048] ***
*** finished computation of 7 references, err: [Inf, 0.22280751320923017, 0.18098415743917048] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [11, 52, 0]]
** centroid: 1, normalized-entropy: 0.6681273338436138, [(1, 11), (2, 52)]
*** center 2: selecting labels [1] (freq >= 2) [from [148, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [124, 6, 0]]
** centroid: 3, normalized-entropy: 0.269828447703074, [(1, 124), (2, 6)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 47, 1]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 48, 15]]
** centroid: 5, normalized-entropy: 0.7918583525674836, [(2, 48), (3, 15)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 65, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [124, 26, 0]]
** centroid: 7, normalized-entropy: 0.6652735227649414, [(1, 124), (2, 26)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22282152745995792] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22282152745995792, 0.16257059531616377] ***
*** starting iteration: 2; err: [Inf, 0.22282152745995792, 0.16257059531616377] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22282152745995792, 0.16257059531616377, 0.15517669902728484] ***
*** starting iteration: 3; err: [Inf, 0.22282152745995792, 0.16257059531616377, 0.15517669902728484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22282152745995792, 0.16257059531616377, 0.15517669902728484, 0.1506259954099574] ***
*** starting iteration: 4; err: [Inf, 0.22282152745995792, 0.16257059531616377, 0.15517669902728484, 0.1506259954099574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22282152745995792, 0.16257059531616377, 0.15517669902728484, 0.1506259954099574, 0.1483026586893202] ***
*** starting iteration: 5; err: [Inf, 0.22282152745995792, 0.16257059531616377, 0.15517669902728484, 0.1506259954099574, 0.1483026586893202] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22282152745995792, 0.16257059531616377, 0.15517669902728484, 0.1506259954099574, 0.1483026586893202, 0.1465939060933804] ***
*** starting iteration: 6; err: [Inf, 0.22282152745995792, 0.16257059531616377, 0.15517669902728484, 0.1506259954099574, 0.1483026586893202, 0.1465939060933804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22282152745995792, 0.16257059531616377, 0.15517669902728484, 0.1506259954099574, 0.1483026586893202, 0.1465939060933804, 0.14511035422461707] ***
*** starting iteration: 7; err: [Inf, 0.22282152745995792, 0.16257059531616377, 0.15517669902728484, 0.1506259954099574, 0.1483026586893202, 0.1465939060933804, 0.14511035422461707] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22282152745995792, 0.16257059531616377, 0.15517669902728484, 0.1506259954099574, 0.1483026586893202, 0.1465939060933804, 0.14511035422461707, 0.14439570313241254] ***
*** finished computation of 7 references, err: [Inf, 0.22282152745995792, 0.16257059531616377, 0.15517669902728484, 0.1506259954099574, 0.1483026586893202, 0.1465939060933804, 0.14511035422461707, 0.14439570313241254] ***
*** center 1: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [103, 8, 0]]
** centroid: 3, normalized-entropy: 0.3736090708557681, [(1, 103), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [58, 9, 0]]
** centroid: 4, normalized-entropy: 0.569190343735683, [(1, 58), (2, 9)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 126, 15]]
** centroid: 5, normalized-entropy: 0.48890859144051524, [(2, 126), (3, 15)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [63, 33, 0]]
** centroid: 6, normalized-entropy: 0.9283620723948678, [(1, 63), (2, 33)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 87, 0]]
** centroid: 7, normalized-entropy: 0.08970338978685011, [(1, 1), (2, 87)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22860455905147334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22860455905147334, 0.17282475648249598] ***
*** starting iteration: 2; err: [Inf, 0.22860455905147334, 0.17282475648249598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22860455905147334, 0.17282475648249598, 0.1622275593655667] ***
*** starting iteration: 3; err: [Inf, 0.22860455905147334, 0.17282475648249598, 0.1622275593655667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22860455905147334, 0.17282475648249598, 0.1622275593655667, 0.15621581755025588] ***
*** starting iteration: 4; err: [Inf, 0.22860455905147334, 0.17282475648249598, 0.1622275593655667, 0.15621581755025588] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22860455905147334, 0.17282475648249598, 0.1622275593655667, 0.15621581755025588, 0.15282034859999546] ***
*** starting iteration: 5; err: [Inf, 0.22860455905147334, 0.17282475648249598, 0.1622275593655667, 0.15621581755025588, 0.15282034859999546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22860455905147334, 0.17282475648249598, 0.1622275593655667, 0.15621581755025588, 0.15282034859999546, 0.15134443025309954] ***
*** starting iteration: 6; err: [Inf, 0.22860455905147334, 0.17282475648249598, 0.1622275593655667, 0.15621581755025588, 0.15282034859999546, 0.15134443025309954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22860455905147334, 0.17282475648249598, 0.1622275593655667, 0.15621581755025588, 0.15282034859999546, 0.15134443025309954, 0.1503172479912002] ***
*** starting iteration: 7; err: [Inf, 0.22860455905147334, 0.17282475648249598, 0.1622275593655667, 0.15621581755025588, 0.15282034859999546, 0.15134443025309954, 0.1503172479912002] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22860455905147334, 0.17282475648249598, 0.1622275593655667, 0.15621581755025588, 0.15282034859999546, 0.15134443025309954, 0.1503172479912002, 0.1494375442998062] ***
*** finished computation of 7 references, err: [Inf, 0.22860455905147334, 0.17282475648249598, 0.1622275593655667, 0.15621581755025588, 0.15282034859999546, 0.15134443025309954, 0.1503172479912002, 0.1494375442998062] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [39, 50, 0]]
** centroid: 1, normalized-entropy: 0.9889525767600615, [(1, 39), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 46, 0]]
** centroid: 2, normalized-entropy: 0.9823817086382354, [(1, 63), (2, 46)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [62, 41, 0]]
** centroid: 3, normalized-entropy: 0.969803406471299, [(1, 62), (2, 41)]
*** center 4: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 100, 17]]
** centroid: 7, normalized-entropy: 0.5979502983976931, [(2, 100), (3, 17)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2733370729608983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2733370729608983, 0.17506785399519253] ***
*** starting iteration: 2; err: [Inf, 0.2733370729608983, 0.17506785399519253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2733370729608983, 0.17506785399519253, 0.1616099978862763] ***
*** starting iteration: 3; err: [Inf, 0.2733370729608983, 0.17506785399519253, 0.1616099978862763] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2733370729608983, 0.17506785399519253, 0.1616099978862763, 0.15626955781316293] ***
*** starting iteration: 4; err: [Inf, 0.2733370729608983, 0.17506785399519253, 0.1616099978862763, 0.15626955781316293] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2733370729608983, 0.17506785399519253, 0.1616099978862763, 0.15626955781316293, 0.15355665368520874] ***
*** starting iteration: 5; err: [Inf, 0.2733370729608983, 0.17506785399519253, 0.1616099978862763, 0.15626955781316293, 0.15355665368520874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2733370729608983, 0.17506785399519253, 0.1616099978862763, 0.15626955781316293, 0.15355665368520874, 0.15138108612804757] ***
*** starting iteration: 6; err: [Inf, 0.2733370729608983, 0.17506785399519253, 0.1616099978862763, 0.15626955781316293, 0.15355665368520874, 0.15138108612804757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2733370729608983, 0.17506785399519253, 0.1616099978862763, 0.15626955781316293, 0.15355665368520874, 0.15138108612804757, 0.15034268507412796] ***
*** starting iteration: 7; err: [Inf, 0.2733370729608983, 0.17506785399519253, 0.1616099978862763, 0.15626955781316293, 0.15355665368520874, 0.15138108612804757, 0.15034268507412796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2733370729608983, 0.17506785399519253, 0.1616099978862763, 0.15626955781316293, 0.15355665368520874, 0.15138108612804757, 0.15034268507412796, 0.14940938062971454] ***
*** finished computation of 7 references, err: [Inf, 0.2733370729608983, 0.17506785399519253, 0.1616099978862763, 0.15626955781316293, 0.15355665368520874, 0.15138108612804757, 0.15034268507412796, 0.14940938062971454] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [6, 51, 0]]
** centroid: 1, normalized-entropy: 0.48546076074591343, [(1, 6), (2, 51)]
*** center 2: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [38, 70, 0]]
** centroid: 5, normalized-entropy: 0.9357110512652843, [(1, 38), (2, 70)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 87, 16]]
** centroid: 6, normalized-entropy: 0.6230433996216712, [(2, 87), (3, 16)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [63, 36, 0]]
** centroid: 7, normalized-entropy: 0.9456603046006401, [(1, 63), (2, 36)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23718829427858343] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23718829427858343, 0.19306930858918328] ***
*** starting iteration: 2; err: [Inf, 0.23718829427858343, 0.19306930858918328] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23718829427858343, 0.19306930858918328, 0.1909817935531677] ***
*** starting iteration: 3; err: [Inf, 0.23718829427858343, 0.19306930858918328, 0.1909817935531677] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23718829427858343, 0.19306930858918328, 0.1909817935531677, 0.1904937177708001] ***
*** finished computation of 7 references, err: [Inf, 0.23718829427858343, 0.19306930858918328, 0.1909817935531677, 0.1904937177708001] ***
*** center 1: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 61, 17]]
** centroid: 2, normalized-entropy: 0.7564041945982506, [(2, 61), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [91, 1, 0]]
** centroid: 3, normalized-entropy: 0.08650421412134586, [(1, 91), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [30, 73, 0]]
** centroid: 4, normalized-entropy: 0.8703460546929581, [(1, 30), (2, 73)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [71, 23, 0]]
** centroid: 5, normalized-entropy: 0.8027381019527042, [(1, 71), (2, 23)]
*** center 6: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 79, 0]]
** centroid: 7, normalized-entropy: 0.16702680404522793, [(1, 2), (2, 79)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2272591670260191] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2272591670260191, 0.19200481887700138] ***
*** starting iteration: 2; err: [Inf, 0.2272591670260191, 0.19200481887700138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2272591670260191, 0.19200481887700138, 0.19040762556568794] ***
*** starting iteration: 3; err: [Inf, 0.2272591670260191, 0.19200481887700138, 0.19040762556568794] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2272591670260191, 0.19200481887700138, 0.19040762556568794, 0.18984770752640365] ***
*** finished computation of 7 references, err: [Inf, 0.2272591670260191, 0.19200481887700138, 0.19040762556568794, 0.18984770752640365] ***
*** center 1: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 85, 16]]
** centroid: 2, normalized-entropy: 0.6305062394675903, [(2, 85), (3, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [63, 39, 0]]
** centroid: 4, normalized-entropy: 0.9596868937742168, [(1, 63), (2, 39)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [39, 68, 0]]
** centroid: 5, normalized-entropy: 0.9463439981707659, [(1, 39), (2, 68)]
*** center 6: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [16, 52, 0]]
** centroid: 7, normalized-entropy: 0.787126586201269, [(1, 16), (2, 52)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18921800393627974] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18921800393627974, 0.15714198862504516] ***
*** finished computation of 7 references, err: [Inf, 0.18921800393627974, 0.15714198862504516] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 36, 4]]
** centroid: 1, normalized-entropy: 0.46899559358928133, [(2, 36), (3, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [77, 11, 0]]
** centroid: 2, normalized-entropy: 0.5435644431995963, [(1, 77), (2, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [124, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 59, 11]]
** centroid: 4, normalized-entropy: 0.6274303352684106, [(2, 59), (3, 11)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [17, 92, 0]]
** centroid: 5, normalized-entropy: 0.6245644324971011, [(1, 17), (2, 92)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [37, 65, 0]]
** centroid: 6, normalized-entropy: 0.9449382598624693, [(1, 37), (2, 65)]
*** center 7: selecting labels [1] (freq >= 2) [from [133, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20323925848625812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20323925848625812, 0.16634375080843267] ***
*** finished computation of 7 references, err: [Inf, 0.20323925848625812, 0.16634375080843267] ***
*** center 1: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 57, 3]]
** centroid: 2, normalized-entropy: 0.2863969571159561, [(2, 57), (3, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [178, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [68, 61, 0]]
** centroid: 4, normalized-entropy: 0.9978749236685321, [(1, 68), (2, 61)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [82, 33, 0]]
** centroid: 5, normalized-entropy: 0.8647572655747071, [(1, 82), (2, 33)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 34, 14]]
** centroid: 6, normalized-entropy: 0.8708644692353648, [(2, 34), (3, 14)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 52, 0]]
** centroid: 7, normalized-entropy: 0.30540057087920036, [(1, 3), (2, 52)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19482796453498025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19482796453498025, 0.16242595841393231] ***
*** finished computation of 7 references, err: [Inf, 0.19482796453498025, 0.16242595841393231] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 102, 14]]
** centroid: 1, normalized-entropy: 0.5313400141801669, [(2, 102), (3, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [117, 12, 0]]
** centroid: 3, normalized-entropy: 0.446481346896803, [(1, 117), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [103, 32, 0]]
** centroid: 4, normalized-entropy: 0.7900781577925237, [(1, 103), (2, 32)]
*** center 5: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [92, 11, 0]]
** centroid: 6, normalized-entropy: 0.4901757916273403, [(1, 92), (2, 11)]
*** center 7: selecting labels [1, 2, 3] (freq >= 2) [from [3, 87, 2]]
** centroid: 7, normalized-entropy: 0.22546637059567987, [(1, 3), (2, 87), (3, 2)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2504514954094817] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2504514954094817, 0.1872940612142324] ***
*** starting iteration: 2; err: [Inf, 0.2504514954094817, 0.1872940612142324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2504514954094817, 0.1872940612142324, 0.185028422525986] ***
*** starting iteration: 3; err: [Inf, 0.2504514954094817, 0.1872940612142324, 0.185028422525986] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2504514954094817, 0.1872940612142324, 0.185028422525986, 0.1847150875451239] ***
*** finished computation of 7 references, err: [Inf, 0.2504514954094817, 0.1872940612142324, 0.185028422525986, 0.1847150875451239] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [1, 117, 0]]
** centroid: 1, normalized-entropy: 0.0705017596054147, [(1, 1), (2, 117)]
*** center 2: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [69, 42, 0]]
** centroid: 3, normalized-entropy: 0.9568886656798214, [(1, 69), (2, 42)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [64, 22, 0]]
** centroid: 4, normalized-entropy: 0.8203636429576731, [(1, 64), (2, 22)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 82, 15]]
** centroid: 5, normalized-entropy: 0.6213290966942344, [(2, 82), (3, 15)]
*** center 6: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9470008931086776, 0.9410008811206416, 0.932036827246408, 0.9219938501375626, 0.9160387932843023, 0.9150138162114211, 0.9050068032103961, 0.891996787206368, 0.8879957802113491, 0.8789957622292951, 0.8581036125946305, 0.832940725156294, 0.7850335365305425]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9470008931086776
finished with 14
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.3193772070490204] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3193772070490204, 0.2555473581705992] ***
*** starting iteration: 2; err: [Inf, 0.3193772070490204, 0.2555473581705992] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3193772070490204, 0.2555473581705992, 0.24203556561884512] ***
*** starting iteration: 3; err: [Inf, 0.3193772070490204, 0.2555473581705992, 0.24203556561884512] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3193772070490204, 0.2555473581705992, 0.24203556561884512, 0.2386058629658241] ***
*** starting iteration: 4; err: [Inf, 0.3193772070490204, 0.2555473581705992, 0.24203556561884512, 0.2386058629658241] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3193772070490204, 0.2555473581705992, 0.24203556561884512, 0.2386058629658241, 0.2374695949508129] ***
*** starting iteration: 5; err: [Inf, 0.3193772070490204, 0.2555473581705992, 0.24203556561884512, 0.2386058629658241, 0.2374695949508129] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3193772070490204, 0.2555473581705992, 0.24203556561884512, 0.2386058629658241, 0.2374695949508129, 0.2367473370787148] ***
*** finished computation of 3 references, err: [Inf, 0.3193772070490204, 0.2555473581705992, 0.24203556561884512, 0.2386058629658241, 0.2374695949508129, 0.2367473370787148] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [111, 133, 5]]
** centroid: 1, normalized-entropy: 0.7041533716687822, [(1, 111), (2, 133), (3, 5)]
*** center 2: selecting labels [1] (freq >= 2) [from [206, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [71, 130, 10]]
** centroid: 3, normalized-entropy: 0.7367608539715027, [(1, 71), (2, 130), (3, 10)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31640257401813543] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31640257401813543, 0.2585682453045892] ***
*** starting iteration: 2; err: [Inf, 0.31640257401813543, 0.2585682453045892] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31640257401813543, 0.2585682453045892, 0.23938964397787513] ***
*** starting iteration: 3; err: [Inf, 0.31640257401813543, 0.2585682453045892, 0.23938964397787513] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31640257401813543, 0.2585682453045892, 0.23938964397787513, 0.2339678609791188] ***
*** starting iteration: 4; err: [Inf, 0.31640257401813543, 0.2585682453045892, 0.23938964397787513, 0.2339678609791188] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31640257401813543, 0.2585682453045892, 0.23938964397787513, 0.2339678609791188, 0.2322683587469261] ***
*** starting iteration: 5; err: [Inf, 0.31640257401813543, 0.2585682453045892, 0.23938964397787513, 0.2339678609791188, 0.2322683587469261] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31640257401813543, 0.2585682453045892, 0.23938964397787513, 0.2339678609791188, 0.2322683587469261, 0.2312554438770197] ***
*** starting iteration: 6; err: [Inf, 0.31640257401813543, 0.2585682453045892, 0.23938964397787513, 0.2339678609791188, 0.2322683587469261, 0.2312554438770197] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31640257401813543, 0.2585682453045892, 0.23938964397787513, 0.2339678609791188, 0.2322683587469261, 0.2312554438770197, 0.23090689621758934] ***
*** finished computation of 3 references, err: [Inf, 0.31640257401813543, 0.2585682453045892, 0.23938964397787513, 0.2339678609791188, 0.2322683587469261, 0.2312554438770197, 0.23090689621758934] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [78, 148, 17]]
** centroid: 1, normalized-entropy: 0.776282724178309, [(1, 78), (2, 148), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [101, 89, 0]]
** centroid: 2, normalized-entropy: 0.9971206866786285, [(1, 101), (2, 89)]
*** center 3: selecting labels [1] (freq >= 2) [from [234, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29859419129342063] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29859419129342063, 0.23936243070431915] ***
*** starting iteration: 2; err: [Inf, 0.29859419129342063, 0.23936243070431915] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29859419129342063, 0.23936243070431915, 0.23830278489090825] ***
*** starting iteration: 3; err: [Inf, 0.29859419129342063, 0.23936243070431915, 0.23830278489090825] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29859419129342063, 0.23936243070431915, 0.23830278489090825, 0.23803738811831066] ***
*** finished computation of 3 references, err: [Inf, 0.29859419129342063, 0.23936243070431915, 0.23830278489090825, 0.23803738811831066] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [117, 66, 0]]
** centroid: 1, normalized-entropy: 0.9432261548473416, [(1, 117), (2, 66)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [80, 178, 16]]
** centroid: 2, normalized-entropy: 0.7332278574213729, [(1, 80), (2, 178), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [210, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9470008931086776, 0.9410008811206416, 0.932036827246408, 0.9219938501375626, 0.9160387932843023, 0.9150138162114211, 0.9050068032103961, 0.891996787206368, 0.8879957802113491, 0.8789957622292951, 0.8581036125946305, 0.832940725156294, 0.7921154687621753, 0.7850335365305425]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9470008931086776
finished with 16
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.18052072458838983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18052072458838983, 0.15379248094932363] ***
*** starting iteration: 2; err: [Inf, 0.18052072458838983, 0.15379248094932363] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18052072458838983, 0.15379248094932363, 0.15047507572991847] ***
*** starting iteration: 3; err: [Inf, 0.18052072458838983, 0.15379248094932363, 0.15047507572991847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18052072458838983, 0.15379248094932363, 0.15047507572991847, 0.14766686275851698] ***
*** starting iteration: 4; err: [Inf, 0.18052072458838983, 0.15379248094932363, 0.15047507572991847, 0.14766686275851698] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18052072458838983, 0.15379248094932363, 0.15047507572991847, 0.14766686275851698, 0.14592684984316226] ***
*** starting iteration: 5; err: [Inf, 0.18052072458838983, 0.15379248094932363, 0.15047507572991847, 0.14766686275851698, 0.14592684984316226] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18052072458838983, 0.15379248094932363, 0.15047507572991847, 0.14766686275851698, 0.14592684984316226, 0.1446672191608462] ***
*** starting iteration: 6; err: [Inf, 0.18052072458838983, 0.15379248094932363, 0.15047507572991847, 0.14766686275851698, 0.14592684984316226, 0.1446672191608462] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18052072458838983, 0.15379248094932363, 0.15047507572991847, 0.14766686275851698, 0.14592684984316226, 0.1446672191608462, 0.1435962615055018] ***
*** starting iteration: 7; err: [Inf, 0.18052072458838983, 0.15379248094932363, 0.15047507572991847, 0.14766686275851698, 0.14592684984316226, 0.1446672191608462, 0.1435962615055018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18052072458838983, 0.15379248094932363, 0.15047507572991847, 0.14766686275851698, 0.14592684984316226, 0.1446672191608462, 0.1435962615055018, 0.14303000932894983] ***
*** finished computation of 7 references, err: [Inf, 0.18052072458838983, 0.15379248094932363, 0.15047507572991847, 0.14766686275851698, 0.14592684984316226, 0.1446672191608462, 0.1435962615055018, 0.14303000932894983] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [2, 98, 0]]
** centroid: 1, normalized-entropy: 0.14144054254182067, [(1, 2), (2, 98)]
*** center 2: selecting labels [1] (freq >= 2) [from [118, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [65, 8, 0]]
** centroid: 3, normalized-entropy: 0.4986751363204345, [(1, 65), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [15, 74, 0]]
** centroid: 4, normalized-entropy: 0.6543524423071835, [(1, 15), (2, 74)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [74, 11, 0]]
** centroid: 5, normalized-entropy: 0.5558227377664954, [(1, 74), (2, 11)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 72, 15]]
** centroid: 6, normalized-entropy: 0.6631968402398286, [(2, 72), (3, 15)]
*** center 7: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1714857129718357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1714857129718357, 0.14913442531374396] ***
*** starting iteration: 2; err: [Inf, 0.1714857129718357, 0.14913442531374396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1714857129718357, 0.14913442531374396, 0.14795790089648972] ***
*** starting iteration: 3; err: [Inf, 0.1714857129718357, 0.14913442531374396, 0.14795790089648972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1714857129718357, 0.14913442531374396, 0.14795790089648972, 0.1476635130700366] ***
*** finished computation of 7 references, err: [Inf, 0.1714857129718357, 0.14913442531374396, 0.14795790089648972, 0.1476635130700366] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [60, 23, 0]]
** centroid: 1, normalized-entropy: 0.8514808683852091, [(1, 60), (2, 23)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 97, 9]]
** centroid: 2, normalized-entropy: 0.41923299508081985, [(2, 97), (3, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [96, 13, 0]]
** centroid: 3, normalized-entropy: 0.527247477024035, [(1, 96), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [98, 2, 0]]
** centroid: 4, normalized-entropy: 0.14144054254182067, [(1, 98), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 12, 0]]
** centroid: 5, normalized-entropy: 0.5916727785823274, [(1, 72), (2, 12)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 90, 8]]
** centroid: 6, normalized-entropy: 0.4079059801389762, [(2, 90), (3, 8)]
*** center 7: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21551069327961023] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21551069327961023, 0.16426544468235532] ***
*** starting iteration: 2; err: [Inf, 0.21551069327961023, 0.16426544468235532] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21551069327961023, 0.16426544468235532, 0.15561803726052148] ***
*** starting iteration: 3; err: [Inf, 0.21551069327961023, 0.16426544468235532, 0.15561803726052148] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21551069327961023, 0.16426544468235532, 0.15561803726052148, 0.1510873710125059] ***
*** starting iteration: 4; err: [Inf, 0.21551069327961023, 0.16426544468235532, 0.15561803726052148, 0.1510873710125059] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21551069327961023, 0.16426544468235532, 0.15561803726052148, 0.1510873710125059, 0.14876803898739852] ***
*** starting iteration: 5; err: [Inf, 0.21551069327961023, 0.16426544468235532, 0.15561803726052148, 0.1510873710125059, 0.14876803898739852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21551069327961023, 0.16426544468235532, 0.15561803726052148, 0.1510873710125059, 0.14876803898739852, 0.14780417756726225] ***
*** finished computation of 7 references, err: [Inf, 0.21551069327961023, 0.16426544468235532, 0.15561803726052148, 0.1510873710125059, 0.14876803898739852, 0.14780417756726225] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [74, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [92, 6, 0]]
** centroid: 3, normalized-entropy: 0.3322866302216152, [(1, 92), (2, 6)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 129, 16]]
** centroid: 4, normalized-entropy: 0.5009551869142463, [(2, 129), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [88, 7, 0]]
** centroid: 5, normalized-entropy: 0.3795243778626806, [(1, 88), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 67, 0]]
** centroid: 6, normalized-entropy: 0.3638469981769295, [(1, 5), (2, 67)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [67, 34, 0]]
** centroid: 7, normalized-entropy: 0.9215608652945444, [(1, 67), (2, 34)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.292263585335768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.292263585335768, 0.2171836225889265] ***
*** starting iteration: 2; err: [Inf, 0.292263585335768, 0.2171836225889265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.292263585335768, 0.2171836225889265, 0.20237387860453948] ***
*** starting iteration: 3; err: [Inf, 0.292263585335768, 0.2171836225889265, 0.20237387860453948] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.292263585335768, 0.2171836225889265, 0.20237387860453948, 0.19740001701920465] ***
*** starting iteration: 4; err: [Inf, 0.292263585335768, 0.2171836225889265, 0.20237387860453948, 0.19740001701920465] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.292263585335768, 0.2171836225889265, 0.20237387860453948, 0.19740001701920465, 0.19616551875547916] ***
*** starting iteration: 5; err: [Inf, 0.292263585335768, 0.2171836225889265, 0.20237387860453948, 0.19740001701920465, 0.19616551875547916] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.292263585335768, 0.2171836225889265, 0.20237387860453948, 0.19740001701920465, 0.19616551875547916, 0.19535222412618408] ***
*** finished computation of 7 references, err: [Inf, 0.292263585335768, 0.2171836225889265, 0.20237387860453948, 0.19740001701920465, 0.19616551875547916, 0.19535222412618408] ***
*** center 1: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [40, 28, 0]]
** centroid: 3, normalized-entropy: 0.9774178175281716, [(1, 40), (2, 28)]
*** center 4: selecting labels [2] (freq >= 2) [from [1, 115, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 83, 15]]
** centroid: 5, normalized-entropy: 0.6174482957894681, [(2, 83), (3, 15)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [100, 37, 0]]
** centroid: 6, normalized-entropy: 0.8415693566412304, [(1, 100), (2, 37)]
*** center 7: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2516821655601883] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2516821655601883, 0.2129365419061377] ***
*** starting iteration: 2; err: [Inf, 0.2516821655601883, 0.2129365419061377] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2516821655601883, 0.2129365419061377, 0.2050275931531365] ***
*** starting iteration: 3; err: [Inf, 0.2516821655601883, 0.2129365419061377, 0.2050275931531365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2516821655601883, 0.2129365419061377, 0.2050275931531365, 0.19944198970924476] ***
*** starting iteration: 4; err: [Inf, 0.2516821655601883, 0.2129365419061377, 0.2050275931531365, 0.19944198970924476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2516821655601883, 0.2129365419061377, 0.2050275931531365, 0.19944198970924476, 0.19570578106384406] ***
*** starting iteration: 5; err: [Inf, 0.2516821655601883, 0.2129365419061377, 0.2050275931531365, 0.19944198970924476, 0.19570578106384406] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2516821655601883, 0.2129365419061377, 0.2050275931531365, 0.19944198970924476, 0.19570578106384406, 0.19415840970050693] ***
*** starting iteration: 6; err: [Inf, 0.2516821655601883, 0.2129365419061377, 0.2050275931531365, 0.19944198970924476, 0.19570578106384406, 0.19415840970050693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2516821655601883, 0.2129365419061377, 0.2050275931531365, 0.19944198970924476, 0.19570578106384406, 0.19415840970050693, 0.19329261111871882] ***
*** finished computation of 7 references, err: [Inf, 0.2516821655601883, 0.2129365419061377, 0.2050275931531365, 0.19944198970924476, 0.19570578106384406, 0.19415840970050693, 0.19329261111871882] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [58, 31, 0]]
** centroid: 1, normalized-entropy: 0.9325538428833382, [(1, 58), (2, 31)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 107, 17]]
** centroid: 2, normalized-entropy: 0.5765847309822099, [(2, 107), (3, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [54, 54, 0]]
** centroid: 4, normalized-entropy: 1.0, [(1, 54), (2, 54)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 40, 0]]
** centroid: 5, normalized-entropy: 0.9798687566511527, [(1, 56), (2, 40)]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [74, 5, 0]]
** centroid: 7, normalized-entropy: 0.340373285759646, [(1, 74), (2, 5)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2728349987523577] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2728349987523577, 0.21789741469756596] ***
*** starting iteration: 2; err: [Inf, 0.2728349987523577, 0.21789741469756596] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2728349987523577, 0.21789741469756596, 0.199143646046173] ***
*** starting iteration: 3; err: [Inf, 0.2728349987523577, 0.21789741469756596, 0.199143646046173] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2728349987523577, 0.21789741469756596, 0.199143646046173, 0.196014569631067] ***
*** starting iteration: 4; err: [Inf, 0.2728349987523577, 0.21789741469756596, 0.199143646046173, 0.196014569631067] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2728349987523577, 0.21789741469756596, 0.199143646046173, 0.196014569631067, 0.19412079978262312] ***
*** starting iteration: 5; err: [Inf, 0.2728349987523577, 0.21789741469756596, 0.199143646046173, 0.196014569631067, 0.19412079978262312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2728349987523577, 0.21789741469756596, 0.199143646046173, 0.196014569631067, 0.19412079978262312, 0.19154868888175827] ***
*** starting iteration: 6; err: [Inf, 0.2728349987523577, 0.21789741469756596, 0.199143646046173, 0.196014569631067, 0.19412079978262312, 0.19154868888175827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2728349987523577, 0.21789741469756596, 0.199143646046173, 0.196014569631067, 0.19412079978262312, 0.19154868888175827, 0.19003278103718504] ***
*** starting iteration: 7; err: [Inf, 0.2728349987523577, 0.21789741469756596, 0.199143646046173, 0.196014569631067, 0.19412079978262312, 0.19154868888175827, 0.19003278103718504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2728349987523577, 0.21789741469756596, 0.199143646046173, 0.196014569631067, 0.19412079978262312, 0.19154868888175827, 0.19003278103718504, 0.18884737509780325] ***
*** starting iteration: 8; err: [Inf, 0.2728349987523577, 0.21789741469756596, 0.199143646046173, 0.196014569631067, 0.19412079978262312, 0.19154868888175827, 0.19003278103718504, 0.18884737509780325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2728349987523577, 0.21789741469756596, 0.199143646046173, 0.196014569631067, 0.19412079978262312, 0.19154868888175827, 0.19003278103718504, 0.18884737509780325, 0.1877450866214903] ***
*** starting iteration: 9; err: [Inf, 0.2728349987523577, 0.21789741469756596, 0.199143646046173, 0.196014569631067, 0.19412079978262312, 0.19154868888175827, 0.19003278103718504, 0.18884737509780325, 0.1877450866214903] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2728349987523577, 0.21789741469756596, 0.199143646046173, 0.196014569631067, 0.19412079978262312, 0.19154868888175827, 0.19003278103718504, 0.18884737509780325, 0.1877450866214903, 0.187291620225566] ***
*** finished computation of 7 references, err: [Inf, 0.2728349987523577, 0.21789741469756596, 0.199143646046173, 0.196014569631067, 0.19412079978262312, 0.19154868888175827, 0.19003278103718504, 0.18884737509780325, 0.1877450866214903, 0.187291620225566] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [90, 6, 0]]
** centroid: 2, normalized-entropy: 0.3372900666170139, [(1, 90), (2, 6)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 39, 0]]
** centroid: 3, normalized-entropy: 0.9811522341999134, [(1, 54), (2, 39)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 89, 16]]
** centroid: 4, normalized-entropy: 0.6157667047517474, [(2, 89), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [71, 16, 0]]
** centroid: 5, normalized-entropy: 0.6885521684368613, [(1, 71), (2, 16)]
*** center 6: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [13, 94, 0]]
** centroid: 7, normalized-entropy: 0.5336439173027161, [(1, 13), (2, 94)]
finished with 12 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9470008931086776, 0.9410008811206416, 0.9399938861016706, 0.932036827246408, 0.9219938501375626, 0.9160387932843023, 0.9150138162114211, 0.9059598520676365, 0.9050068032103961, 0.891996787206368, 0.8879957802113491, 0.8789957622292951, 0.8581036125946305, 0.832940725156294, 0.7921154687621753, 0.7850335365305425]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9470008931086776
finished with 17
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.27564761611456806] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27564761611456806, 0.21262179609030127] ***
*** starting iteration: 2; err: [Inf, 0.27564761611456806, 0.21262179609030127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27564761611456806, 0.21262179609030127, 0.19902675781698265] ***
*** starting iteration: 3; err: [Inf, 0.27564761611456806, 0.21262179609030127, 0.19902675781698265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27564761611456806, 0.21262179609030127, 0.19902675781698265, 0.19251704762071684] ***
*** starting iteration: 4; err: [Inf, 0.27564761611456806, 0.21262179609030127, 0.19902675781698265, 0.19251704762071684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27564761611456806, 0.21262179609030127, 0.19902675781698265, 0.19251704762071684, 0.18872390739065972] ***
*** starting iteration: 5; err: [Inf, 0.27564761611456806, 0.21262179609030127, 0.19902675781698265, 0.19251704762071684, 0.18872390739065972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27564761611456806, 0.21262179609030127, 0.19902675781698265, 0.19251704762071684, 0.18872390739065972, 0.18678373193323566] ***
*** starting iteration: 6; err: [Inf, 0.27564761611456806, 0.21262179609030127, 0.19902675781698265, 0.19251704762071684, 0.18872390739065972, 0.18678373193323566] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27564761611456806, 0.21262179609030127, 0.19902675781698265, 0.19251704762071684, 0.18872390739065972, 0.18678373193323566, 0.1851203382699037] ***
*** starting iteration: 7; err: [Inf, 0.27564761611456806, 0.21262179609030127, 0.19902675781698265, 0.19251704762071684, 0.18872390739065972, 0.18678373193323566, 0.1851203382699037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27564761611456806, 0.21262179609030127, 0.19902675781698265, 0.19251704762071684, 0.18872390739065972, 0.18678373193323566, 0.1851203382699037, 0.18399054639170076] ***
*** starting iteration: 8; err: [Inf, 0.27564761611456806, 0.21262179609030127, 0.19902675781698265, 0.19251704762071684, 0.18872390739065972, 0.18678373193323566, 0.1851203382699037, 0.18399054639170076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27564761611456806, 0.21262179609030127, 0.19902675781698265, 0.19251704762071684, 0.18872390739065972, 0.18678373193323566, 0.1851203382699037, 0.18399054639170076, 0.18356717872788553] ***
*** finished computation of 7 references, err: [Inf, 0.27564761611456806, 0.21262179609030127, 0.19902675781698265, 0.19251704762071684, 0.18872390739065972, 0.18678373193323566, 0.1851203382699037, 0.18399054639170076, 0.18356717872788553] ***
*** center 1: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [104, 7, 0]]
** centroid: 3, normalized-entropy: 0.33948600021427877, [(1, 104), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [60, 31, 0]]
** centroid: 4, normalized-entropy: 0.9254482516437047, [(1, 60), (2, 31)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [61, 11, 0]]
** centroid: 5, normalized-entropy: 0.6167482598263911, [(1, 61), (2, 11)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 103, 15]]
** centroid: 6, normalized-entropy: 0.5494827677177795, [(2, 103), (3, 15)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 111, 0]]
** centroid: 7, normalized-entropy: 0.07360348308562395, [(1, 1), (2, 111)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.33805342762266055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33805342762266055, 0.26161577421445764] ***
*** starting iteration: 2; err: [Inf, 0.33805342762266055, 0.26161577421445764] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33805342762266055, 0.26161577421445764, 0.2304183088439884] ***
*** starting iteration: 3; err: [Inf, 0.33805342762266055, 0.26161577421445764, 0.2304183088439884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33805342762266055, 0.26161577421445764, 0.2304183088439884, 0.19713255411050265] ***
*** starting iteration: 4; err: [Inf, 0.33805342762266055, 0.26161577421445764, 0.2304183088439884, 0.19713255411050265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33805342762266055, 0.26161577421445764, 0.2304183088439884, 0.19713255411050265, 0.19092118521144186] ***
*** starting iteration: 5; err: [Inf, 0.33805342762266055, 0.26161577421445764, 0.2304183088439884, 0.19713255411050265, 0.19092118521144186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33805342762266055, 0.26161577421445764, 0.2304183088439884, 0.19713255411050265, 0.19092118521144186, 0.1888176123039152] ***
*** starting iteration: 6; err: [Inf, 0.33805342762266055, 0.26161577421445764, 0.2304183088439884, 0.19713255411050265, 0.19092118521144186, 0.1888176123039152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33805342762266055, 0.26161577421445764, 0.2304183088439884, 0.19713255411050265, 0.19092118521144186, 0.1888176123039152, 0.18758727933211752] ***
*** starting iteration: 7; err: [Inf, 0.33805342762266055, 0.26161577421445764, 0.2304183088439884, 0.19713255411050265, 0.19092118521144186, 0.1888176123039152, 0.18758727933211752] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33805342762266055, 0.26161577421445764, 0.2304183088439884, 0.19713255411050265, 0.19092118521144186, 0.1888176123039152, 0.18758727933211752, 0.18713158650764974] ***
*** finished computation of 7 references, err: [Inf, 0.33805342762266055, 0.26161577421445764, 0.2304183088439884, 0.19713255411050265, 0.19092118521144186, 0.1888176123039152, 0.18758727933211752, 0.18713158650764974] ***
*** center 1: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 92, 17]]
** centroid: 2, normalized-entropy: 0.6245644324971011, [(2, 92), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [99, 19, 0]]
** centroid: 3, normalized-entropy: 0.6367368786558286, [(1, 99), (2, 19)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 32, 0]]
** centroid: 4, normalized-entropy: 0.9456603046006401, [(1, 56), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [4, 84, 0]]
** centroid: 5, normalized-entropy: 0.2667649878030262, [(1, 4), (2, 84)]
*** center 6: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [58, 10, 0]]
** centroid: 7, normalized-entropy: 0.6024308020404452, [(1, 58), (2, 10)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23471239150391482] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23471239150391482, 0.20267692936453102] ***
*** starting iteration: 2; err: [Inf, 0.23471239150391482, 0.20267692936453102] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23471239150391482, 0.20267692936453102, 0.1944759247483856] ***
*** starting iteration: 3; err: [Inf, 0.23471239150391482, 0.20267692936453102, 0.1944759247483856] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23471239150391482, 0.20267692936453102, 0.1944759247483856, 0.1905962721803512] ***
*** starting iteration: 4; err: [Inf, 0.23471239150391482, 0.20267692936453102, 0.1944759247483856, 0.1905962721803512] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23471239150391482, 0.20267692936453102, 0.1944759247483856, 0.1905962721803512, 0.1890342897984075] ***
*** starting iteration: 5; err: [Inf, 0.23471239150391482, 0.20267692936453102, 0.1944759247483856, 0.1905962721803512, 0.1890342897984075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23471239150391482, 0.20267692936453102, 0.1944759247483856, 0.1905962721803512, 0.1890342897984075, 0.18827174441690656] ***
*** finished computation of 7 references, err: [Inf, 0.23471239150391482, 0.20267692936453102, 0.1944759247483856, 0.1905962721803512, 0.1890342897984075, 0.18827174441690656] ***
*** center 1: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [133, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [15, 50, 0]]
** centroid: 4, normalized-entropy: 0.7793498372920851, [(1, 15), (2, 50)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [49, 62, 0]]
** centroid: 5, normalized-entropy: 0.9900829509840566, [(1, 49), (2, 62)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [8, 54, 0]]
** centroid: 6, normalized-entropy: 0.5547781633412736, [(1, 8), (2, 54)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 78, 16]]
** centroid: 7, normalized-entropy: 0.6581912658132184, [(2, 78), (3, 16)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 17)
[0.9470008931086776, 0.9410008811206416, 0.9399938861016706, 0.932036827246408, 0.9219938501375626, 0.9180228132323941, 0.9160387932843023, 0.9150138162114211, 0.9059598520676365, 0.9050068032103961, 0.891996787206368, 0.8879957802113491, 0.8789957622292951, 0.8581036125946305, 0.832940725156294, 0.7921154687621753, 0.7850335365305425]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9470008931086776
finished with 18
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.26512967310594143] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26512967310594143, 0.2033846613813986] ***
*** finished computation of 7 references, err: [Inf, 0.26512967310594143, 0.2033846613813986] ***
*** center 1: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [105, 11, 0]]
** centroid: 3, normalized-entropy: 0.4523816230590106, [(1, 105), (2, 11)]
*** center 4: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 76, 0]]
** centroid: 5, normalized-entropy: 0.9521204244105628, [(1, 45), (2, 76)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 104, 15]]
** centroid: 6, normalized-entropy: 0.5465060858222177, [(2, 104), (3, 15)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [16, 72, 0]]
** centroid: 7, normalized-entropy: 0.6840384356390419, [(1, 16), (2, 72)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2672599278602643] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2672599278602643, 0.2151874724581469] ***
*** finished computation of 7 references, err: [Inf, 0.2672599278602643, 0.2151874724581469] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [143, 28, 0]]
** centroid: 1, normalized-entropy: 0.6431885442606194, [(1, 143), (2, 28)]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [75, 37, 0]]
** centroid: 3, normalized-entropy: 0.9152908478124059, [(1, 75), (2, 37)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 35, 0]]
** centroid: 4, normalized-entropy: 0.9494520153879484, [(1, 60), (2, 35)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 102, 3]]
** centroid: 5, normalized-entropy: 0.18717625687320805, [(2, 102), (3, 3)]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 35, 14]]
** centroid: 7, normalized-entropy: 0.8631205685666311, [(2, 35), (3, 14)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25692493301108366] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25692493301108366, 0.21281017985535616] ***
*** finished computation of 7 references, err: [Inf, 0.25692493301108366, 0.21281017985535616] ***
*** center 1: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 39, 0]]
** centroid: 3, normalized-entropy: 0.9871377743721862, [(1, 51), (2, 39)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [64, 5, 0]]
** centroid: 4, normalized-entropy: 0.3750514064240124, [(1, 64), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [87, 34, 0]]
** centroid: 5, normalized-entropy: 0.8567986030485539, [(1, 87), (2, 34)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 166, 16]]
** centroid: 6, normalized-entropy: 0.4294619720471057, [(2, 166), (3, 16)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 18)
[0.9470008931086776, 0.9410008811206416, 0.9399938861016706, 0.932036827246408, 0.9310088531645418, 0.9219938501375626, 0.9180228132323941, 0.9160387932843023, 0.9150138162114211, 0.9059598520676365, 0.9050068032103961, 0.891996787206368, 0.8879957802113491, 0.8789957622292951, 0.8581036125946305, 0.832940725156294, 0.7921154687621753, 0.7850335365305425]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9470008931086776
finished with 18
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9470008931086776, 0.9410008811206416, 0.9399938861016706, 0.932036827246408, 0.9310088531645418, 0.9219938501375626, 0.9180228132323941, 0.9160387932843023, 0.9150138162114211, 0.9059598520676365, 0.9050068032103961, 0.891996787206368, 0.8879957802113491, 0.8789957622292951, 0.8581036125946305, 0.832940725156294, 0.7921154687621753, 0.7850335365305425]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9470008931086776
finished with 18
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9470008931086776, 0.9410008811206416, 0.9399938861016706, 0.932036827246408, 0.9310088531645418, 0.9219938501375626, 0.9180228132323941, 0.9160387932843023, 0.9150138162114211, 0.9059598520676365, 0.9050068032103961, 0.891996787206368, 0.8879957802113491, 0.8789957622292951, 0.8581036125946305, 0.832940725156294, 0.7921154687621753, 0.7850335365305425]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9470008931086776
finished with 19
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.3361963683923891] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3361963683923891, 0.2700565958650106] ***
*** starting iteration: 2; err: [Inf, 0.3361963683923891, 0.2700565958650106] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3361963683923891, 0.2700565958650106, 0.25431056343321057] ***
*** starting iteration: 3; err: [Inf, 0.3361963683923891, 0.2700565958650106, 0.25431056343321057] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3361963683923891, 0.2700565958650106, 0.25431056343321057, 0.23034988897475037] ***
*** finished computation of 3 references, err: [Inf, 0.3361963683923891, 0.2700565958650106, 0.25431056343321057, 0.23034988897475037] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [214, 21, 0]]
** centroid: 1, normalized-entropy: 0.43433566584925765, [(1, 214), (2, 21)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [3, 224, 15]]
** centroid: 2, normalized-entropy: 0.2715583043185772, [(1, 3), (2, 224), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [171, 18, 0]]
** centroid: 3, normalized-entropy: 0.45371633918694493, [(1, 171), (2, 18)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27651123411470335] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27651123411470335, 0.23626428174212397] ***
*** starting iteration: 2; err: [Inf, 0.27651123411470335, 0.23626428174212397] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27651123411470335, 0.23626428174212397, 0.23043434733086485] ***
*** starting iteration: 3; err: [Inf, 0.27651123411470335, 0.23626428174212397, 0.23043434733086485] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27651123411470335, 0.23626428174212397, 0.23043434733086485, 0.2295606357619345] ***
*** finished computation of 3 references, err: [Inf, 0.27651123411470335, 0.23626428174212397, 0.23043434733086485, 0.2295606357619345] ***
*** center 1: selecting labels [1] (freq >= 2) [from [269, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [22, 183, 17]]
** centroid: 2, normalized-entropy: 0.5325754443907649, [(1, 22), (2, 183), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [122, 54, 0]]
** centroid: 3, normalized-entropy: 0.8894663896628687, [(1, 122), (2, 54)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24189279110323095] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.24189279110323095, 0.23384875581617923] ***
*** starting iteration: 2; err: [Inf, 0.24189279110323095, 0.23384875581617923] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.24189279110323095, 0.23384875581617923, 0.23312455628100767] ***
*** finished computation of 3 references, err: [Inf, 0.24189279110323095, 0.23384875581617923, 0.23312455628100767] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [229, 7, 0]]
** centroid: 1, normalized-entropy: 0.19268901576606412, [(1, 229), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [178, 44, 0]]
** centroid: 2, normalized-entropy: 0.7183098216110975, [(1, 178), (2, 44)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 193, 16]]
** centroid: 3, normalized-entropy: 0.3899227292448086, [(2, 193), (3, 16)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 19)
[0.9470008931086776, 0.9410008811206416, 0.9399938861016706, 0.932036827246408, 0.9310088531645418, 0.9219938501375626, 0.9180228132323941, 0.9160387932843023, 0.9150138162114211, 0.9059598520676365, 0.9050068032103961, 0.891996787206368, 0.8879957802113491, 0.8809887732043421, 0.8789957622292951, 0.8581036125946305, 0.832940725156294, 0.7921154687621753, 0.7850335365305425]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9470008931086776
finished with 19
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.2020730869015679] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2020730869015679, 0.16177576027822216] ***
*** finished computation of 7 references, err: [Inf, 0.2020730869015679, 0.16177576027822216] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 211, 24]]
** centroid: 1, normalized-entropy: 0.4757040579074516, [(2, 211), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [56, 77, 0]]
** centroid: 2, normalized-entropy: 0.9819407868640977, [(1, 56), (2, 77)]
*** center 3: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [146, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [182, 23, 0]]
** centroid: 5, normalized-entropy: 0.506501809234841, [(1, 182), (2, 23)]
*** center 6: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [45, 61, 0]]
** centroid: 7, normalized-entropy: 0.9835018986559216, [(1, 45), (2, 61)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20728782225307077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20728782225307077, 0.17133280821703376] ***
*** finished computation of 7 references, err: [Inf, 0.20728782225307077, 0.17133280821703376] ***
*** center 1: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [75, 1, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 113, 7]]
** centroid: 4, normalized-entropy: 0.32079303554752336, [(2, 113), (3, 7)]
*** center 5: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [77, 53, 0]]
** centroid: 6, normalized-entropy: 0.9752728305257087, [(1, 77), (2, 53)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [55, 15, 0]]
** centroid: 7, normalized-entropy: 0.7495952572594798, [(1, 55), (2, 15)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20640631546266378] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20640631546266378, 0.15583627373725176] ***
*** finished computation of 7 references, err: [Inf, 0.20640631546266378, 0.15583627373725176] ***
*** center 1: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 69, 8]]
** centroid: 2, normalized-entropy: 0.481225663841737, [(2, 69), (3, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [69, 3, 0]]
** centroid: 4, normalized-entropy: 0.24988229283318547, [(1, 69), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [42, 12, 0]]
** centroid: 5, normalized-entropy: 0.7642045065086204, [(1, 42), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [60, 59, 0]]
** centroid: 6, normalized-entropy: 0.999949060376349, [(1, 60), (2, 59)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 45, 0]]
** centroid: 7, normalized-entropy: 0.5699613760403499, [(1, 7), (2, 45)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21316455917991697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21316455917991697, 0.15770831364858895] ***
*** finished computation of 7 references, err: [Inf, 0.21316455917991697, 0.15770831364858895] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [36, 8, 0]]
** centroid: 1, normalized-entropy: 0.6840384356390419, [(1, 36), (2, 8)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 97, 14]]
** centroid: 2, normalized-entropy: 0.5467175366117469, [(2, 97), (3, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 44, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [93, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [88, 4, 0]]
** centroid: 6, normalized-entropy: 0.2580186686648155, [(1, 88), (2, 4)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [55, 30, 0]]
** centroid: 7, normalized-entropy: 0.9366673818775627, [(1, 55), (2, 30)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1702128614364192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1702128614364192, 0.15678262757137418] ***
*** finished computation of 7 references, err: [Inf, 0.1702128614364192, 0.15678262757137418] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 47, 15]]
** centroid: 1, normalized-entropy: 0.7982441335646697, [(2, 47), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [49, 3, 0]]
** centroid: 2, normalized-entropy: 0.3182152976832332, [(1, 49), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [93, 6, 0]]
** centroid: 3, normalized-entropy: 0.32984607020714635, [(1, 93), (2, 6)]
*** center 4: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [1, 76, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 26, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [60, 31, 0]]
** centroid: 7, normalized-entropy: 0.9254482516437047, [(1, 60), (2, 31)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2495316904075444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2495316904075444, 0.1695842804601416] ***
*** finished computation of 7 references, err: [Inf, 0.2495316904075444, 0.1695842804601416] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [86, 6, 0]]
** centroid: 1, normalized-entropy: 0.3478169135710632, [(1, 86), (2, 6)]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [79, 2, 0]]
** centroid: 3, normalized-entropy: 0.16702680404522793, [(1, 79), (2, 2)]
*** center 4: selecting labels [1, 2, 3] (freq >= 2) [from [19, 45, 2]]
** centroid: 4, normalized-entropy: 0.6604304972893716, [(1, 19), (2, 45), (3, 2)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 54, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 74, 9]]
** centroid: 6, normalized-entropy: 0.4951734787020683, [(2, 74), (3, 9)]
*** center 7: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20493138169497252] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20493138169497252, 0.17885234994161875] ***
*** finished computation of 7 references, err: [Inf, 0.20493138169497252, 0.17885234994161875] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [81, 19, 0]]
** centroid: 1, normalized-entropy: 0.7014714598838974, [(1, 81), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [28, 65, 0]]
** centroid: 2, normalized-entropy: 0.8826013308449944, [(1, 28), (2, 65)]
*** center 3: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [1, 39, 6]]
** centroid: 4, normalized-entropy: 0.5665095065529052, [(2, 39), (3, 6)]
*** center 5: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 6: selecting labels [1, 2, 3] (freq >= 2) [from [30, 65, 2]]
** centroid: 6, normalized-entropy: 0.6473919465346212, [(1, 30), (2, 65), (3, 2)]
*** center 7: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17592852469906212] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17592852469906212, 0.15946516916528344] ***
*** finished computation of 7 references, err: [Inf, 0.17592852469906212, 0.15946516916528344] ***
*** center 1: selecting labels [1] (freq >= 2) [from [30, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [2, 62, 0]]
** centroid: 2, normalized-entropy: 0.2006223243127146, [(1, 2), (2, 62)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [40, 20, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 40), (2, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 68, 14]]
** centroid: 5, normalized-entropy: 0.6593758812786991, [(2, 68), (3, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [114, 23, 0]]
** centroid: 7, normalized-entropy: 0.6528394800109512, [(1, 114), (2, 23)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2033653150126338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2033653150126338, 0.1575732979439199] ***
*** finished computation of 7 references, err: [Inf, 0.2033653150126338, 0.1575732979439199] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 69, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 54, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [83, 14, 0]]
** centroid: 3, normalized-entropy: 0.5954670513561874, [(1, 83), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [44, 10, 0]]
** centroid: 4, normalized-entropy: 0.6912898694057888, [(1, 44), (2, 10)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 19, 12]]
** centroid: 5, normalized-entropy: 0.9629004147713269, [(2, 19), (3, 12)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [65, 24, 0]]
** centroid: 6, normalized-entropy: 0.8409805336163159, [(1, 65), (2, 24)]
*** center 7: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19694505218835548] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19694505218835548, 0.16415410282602533] ***
*** finished computation of 7 references, err: [Inf, 0.19694505218835548, 0.16415410282602533] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [31, 45, 0]]
** centroid: 1, normalized-entropy: 0.9753817903274211, [(1, 31), (2, 45)]
*** center 2: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 52, 10]]
** centroid: 3, normalized-entropy: 0.6373874992221911, [(2, 52), (3, 10)]
*** center 4: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [3, 88, 0]]
** centroid: 5, normalized-entropy: 0.20905980566852464, [(1, 3), (2, 88)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [107, 2, 0]]
** centroid: 6, normalized-entropy: 0.13206535647488304, [(1, 107), (2, 2)]
*** center 7: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24994668980501591] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24994668980501591, 0.18954662973619998] ***
*** finished computation of 7 references, err: [Inf, 0.24994668980501591, 0.18954662973619998] ***
*** center 1: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [48, 77, 8]]
** centroid: 2, normalized-entropy: 0.776716273577249, [(1, 48), (2, 77), (3, 8)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [21, 73, 6]]
** centroid: 3, normalized-entropy: 0.6610881030237341, [(1, 21), (2, 73), (3, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [45, 20, 0]]
** centroid: 4, normalized-entropy: 0.8904916402194913, [(1, 45), (2, 20)]
*** center 5: selecting labels [1] (freq >= 2) [from [41, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [63, 6, 0]]
** centroid: 7, normalized-entropy: 0.42622865699814483, [(1, 63), (2, 6)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1781969777299091] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1781969777299091, 0.15826793311117218] ***
*** finished computation of 7 references, err: [Inf, 0.1781969777299091, 0.15826793311117218] ***
*** center 1: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 84, 9]]
** centroid: 2, normalized-entropy: 0.45868581620054033, [(2, 84), (3, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [99, 3, 0]]
** centroid: 3, normalized-entropy: 0.1914332548141934, [(1, 99), (2, 3)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 48, 4]]
** centroid: 4, normalized-entropy: 0.3912435636292556, [(2, 48), (3, 4)]
*** center 5: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [44, 6, 0]]
** centroid: 6, normalized-entropy: 0.5293608652873645, [(1, 44), (2, 6)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [19, 44, 0]]
** centroid: 7, normalized-entropy: 0.8832225588099292, [(1, 19), (2, 44)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2722482820581645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2722482820581645, 0.17172433618130162] ***
*** finished computation of 7 references, err: [Inf, 0.2722482820581645, 0.17172433618130162] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 53, 9]]
** centroid: 1, normalized-entropy: 0.5975977764379984, [(2, 53), (3, 9)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 37, 2]]
** centroid: 2, normalized-entropy: 0.29181825659888555, [(2, 37), (3, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [44, 38, 0]]
** centroid: 4, normalized-entropy: 0.9961344835095798, [(1, 44), (2, 38)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 67, 0]]
** centroid: 5, normalized-entropy: 0.9996216598529407, [(1, 64), (2, 67)]
*** center 6: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1912533133532852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1912533133532852, 0.16098800044041128] ***
*** finished computation of 7 references, err: [Inf, 0.1912533133532852, 0.16098800044041128] ***
*** center 1: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 3, 0]]
** centroid: 2, normalized-entropy: 0.3274449191544762, [(1, 47), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [20, 34, 0]]
** centroid: 3, normalized-entropy: 0.9509560484549724, [(1, 20), (2, 34)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 117, 10]]
** centroid: 4, normalized-entropy: 0.39772442582624484, [(2, 117), (3, 10)]
*** center 5: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [63, 16, 0]]
** centroid: 6, normalized-entropy: 0.7269625813353975, [(1, 63), (2, 16)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [43, 28, 0]]
** centroid: 7, normalized-entropy: 0.9675594819018211, [(1, 43), (2, 28)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19566856896691023] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19566856896691023, 0.15978720025345683] ***
*** finished computation of 7 references, err: [Inf, 0.19566856896691023, 0.15978720025345683] ***
*** center 1: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [56, 16, 0]]
** centroid: 2, normalized-entropy: 0.7642045065086204, [(1, 56), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 71, 13]]
** centroid: 3, normalized-entropy: 0.6216297820565386, [(2, 71), (3, 13)]
*** center 4: selecting labels [2] (freq >= 2) [from [1, 36, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [84, 7, 0]]
** centroid: 5, normalized-entropy: 0.3912435636292556, [(1, 84), (2, 7)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 63, 1]]
*** center 7: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21205014094524086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21205014094524086, 0.15676131738349797] ***
*** finished computation of 7 references, err: [Inf, 0.21205014094524086, 0.15676131738349797] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 31, 5]]
** centroid: 1, normalized-entropy: 0.581321498763703, [(2, 31), (3, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [10, 64, 0]]
** centroid: 2, normalized-entropy: 0.5713549744279549, [(1, 10), (2, 64)]
*** center 3: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [37, 37, 0]]
** centroid: 4, normalized-entropy: 1.0, [(1, 37), (2, 37)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 60, 6]]
** centroid: 5, normalized-entropy: 0.43949698692151346, [(2, 60), (3, 6)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [61, 11, 0]]
** centroid: 6, normalized-entropy: 0.6167482598263911, [(1, 61), (2, 11)]
*** center 7: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18737034362368285] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18737034362368285, 0.15077939915470778] ***
*** finished computation of 7 references, err: [Inf, 0.18737034362368285, 0.15077939915470778] ***
*** center 1: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 3, 0]]
** centroid: 2, normalized-entropy: 0.29367630985136944, [(1, 55), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [1, 42, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [60, 36, 0]]
** centroid: 5, normalized-entropy: 0.954434002924965, [(1, 60), (2, 36)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 22, 0]]
** centroid: 6, normalized-entropy: 0.9383153522334071, [(1, 40), (2, 22)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 78, 11]]
** centroid: 7, normalized-entropy: 0.5396084773004918, [(2, 78), (3, 11)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2280823259819299] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2280823259819299, 0.17028676690533756] ***
*** finished computation of 7 references, err: [Inf, 0.2280823259819299, 0.17028676690533756] ***
*** center 1: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 3, 0]]
** centroid: 2, normalized-entropy: 0.2729708579140699, [(1, 61), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [37, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [61, 45, 0]]
** centroid: 4, normalized-entropy: 0.9835018986559216, [(1, 61), (2, 45)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 115, 12]]
** centroid: 5, normalized-entropy: 0.45127597915596884, [(2, 115), (3, 12)]
*** center 6: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [48, 16, 0]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(1, 48), (2, 16)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2651796366237104] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2651796366237104, 0.17936064839269966] ***
*** finished computation of 7 references, err: [Inf, 0.2651796366237104, 0.17936064839269966] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [28, 24, 0]]
** centroid: 1, normalized-entropy: 0.9957274520849256, [(1, 28), (2, 24)]
*** center 2: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [13, 42, 0]]
** centroid: 4, normalized-entropy: 0.7889406572966208, [(1, 13), (2, 42)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 58, 10]]
** centroid: 5, normalized-entropy: 0.6024308020404452, [(2, 58), (3, 10)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [47, 31, 0]]
** centroid: 6, normalized-entropy: 0.9694309156463241, [(1, 47), (2, 31)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [14, 34, 0]]
** centroid: 7, normalized-entropy: 0.8708644692353648, [(1, 14), (2, 34)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22662109281891027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22662109281891027, 0.17664254102576524] ***
*** finished computation of 7 references, err: [Inf, 0.22662109281891027, 0.17664254102576524] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [75, 27, 0]]
** centroid: 1, normalized-entropy: 0.8337649072106652, [(1, 75), (2, 27)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 25, 14]]
** centroid: 2, normalized-entropy: 0.9418285354475157, [(2, 25), (3, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [137, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 59, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 27, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [76, 7, 0]]
** centroid: 6, normalized-entropy: 0.4172806906708316, [(1, 76), (2, 7)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [12, 41, 0]]
** centroid: 7, normalized-entropy: 0.7717094696953635, [(1, 12), (2, 41)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18620965713262558] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18620965713262558, 0.15386516865808517] ***
*** finished computation of 7 references, err: [Inf, 0.18620965713262558, 0.15386516865808517] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [8, 20, 0]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(1, 8), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 9, 0]]
** centroid: 2, normalized-entropy: 0.511639783631173, [(1, 70), (2, 9)]
*** center 3: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 75, 0]]
** centroid: 5, normalized-entropy: 0.6278191534832795, [(1, 14), (2, 75)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 76, 10]]
** centroid: 6, normalized-entropy: 0.5185697317883058, [(2, 76), (3, 10)]
*** center 7: selecting labels [1] (freq >= 2) [from [67, 1, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23425294701009988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23425294701009988, 0.17740967782586814] ***
*** finished computation of 7 references, err: [Inf, 0.23425294701009988, 0.17740967782586814] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [25, 82, 7]]
** centroid: 1, normalized-entropy: 0.6745541629360593, [(1, 25), (2, 82), (3, 7)]
*** center 2: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 2) [from [52, 70, 5]]
** centroid: 5, normalized-entropy: 0.7475804093463563, [(1, 52), (2, 70), (3, 5)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [49, 28, 0]]
** centroid: 6, normalized-entropy: 0.9456603046006401, [(1, 49), (2, 28)]
*** center 7: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22118851474113763] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22118851474113763, 0.15555824676901103] ***
*** finished computation of 7 references, err: [Inf, 0.22118851474113763, 0.15555824676901103] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [7, 51, 0]]
** centroid: 1, normalized-entropy: 0.5313400141801669, [(1, 7), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 4, 0]]
** centroid: 2, normalized-entropy: 0.36657801255334593, [(1, 53), (2, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [36, 46, 0]]
** centroid: 4, normalized-entropy: 0.9892452969285004, [(1, 36), (2, 46)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 78, 9]]
** centroid: 5, normalized-entropy: 0.47983202361612853, [(2, 78), (3, 9)]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21682870050892233] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21682870050892233, 0.15577518592914566] ***
*** finished computation of 7 references, err: [Inf, 0.21682870050892233, 0.15577518592914566] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [31, 6, 0]]
** centroid: 1, normalized-entropy: 0.6394571324851642, [(1, 31), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [4, 86, 1]]
** centroid: 2, normalized-entropy: 0.2623112196143368, [(1, 4), (2, 86)]
*** center 3: selecting labels [1] (freq >= 2) [from [124, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 57, 14]]
** centroid: 4, normalized-entropy: 0.7162583911075451, [(2, 57), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [51, 13, 0]]
** centroid: 5, normalized-entropy: 0.7281342378690551, [(1, 51), (2, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [34, 23, 0]]
** centroid: 7, normalized-entropy: 0.9729661265889024, [(1, 34), (2, 23)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20144055005535483] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20144055005535483, 0.17046751446649433] ***
*** finished computation of 7 references, err: [Inf, 0.20144055005535483, 0.17046751446649433] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 40, 2]]
** centroid: 1, normalized-entropy: 0.2761954276479391, [(2, 40), (3, 2)]
*** center 2: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [24, 43, 0]]
** centroid: 3, normalized-entropy: 0.9411864371816836, [(1, 24), (2, 43)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [71, 42, 0]]
** centroid: 4, normalized-entropy: 0.9519543850564236, [(1, 71), (2, 42)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 71, 1]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 3, 12]]
** centroid: 6, normalized-entropy: 0.7219280948873623, [(2, 3), (3, 12)]
*** center 7: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1984768823236227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1984768823236227, 0.16037806270318106] ***
*** finished computation of 7 references, err: [Inf, 0.1984768823236227, 0.16037806270318106] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [51, 22, 0]]
** centroid: 1, normalized-entropy: 0.8829589691462253, [(1, 51), (2, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [27, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [51, 2, 0]]
** centroid: 4, normalized-entropy: 0.23181305002459035, [(1, 51), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 7, 0]]
** centroid: 5, normalized-entropy: 0.5842388116428561, [(1, 43), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [24, 31, 0]]
** centroid: 6, normalized-entropy: 0.9882836109919163, [(1, 24), (2, 31)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 129, 10]]
** centroid: 7, normalized-entropy: 0.37313102309420226, [(2, 129), (3, 10)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23710639388300478] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23710639388300478, 0.15833931888453662] ***
*** finished computation of 7 references, err: [Inf, 0.23710639388300478, 0.15833931888453662] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [23, 39, 0]]
** centroid: 1, normalized-entropy: 0.9514122535330207, [(1, 23), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [89, 8, 0]]
** centroid: 2, normalized-entropy: 0.4108378385169277, [(1, 89), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 22, 7]]
** centroid: 4, normalized-entropy: 0.7973265101474423, [(2, 22), (3, 7)]
*** center 5: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 81, 0]]
** centroid: 6, normalized-entropy: 0.2222848306856879, [(1, 3), (2, 81)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 39, 2]]
** centroid: 7, normalized-entropy: 0.2811937964320427, [(2, 39), (3, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2162934775361791] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2162934775361791, 0.1604567955620587] ***
*** finished computation of 7 references, err: [Inf, 0.2162934775361791, 0.1604567955620587] ***
*** center 1: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 13, 0]]
** centroid: 2, normalized-entropy: 0.6812908868842175, [(1, 59), (2, 13)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 41, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 7, 14]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(2, 7), (3, 14)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 99, 0]]
** centroid: 6, normalized-entropy: 0.1403272709905931, [(1, 2), (2, 99)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [67, 27, 0]]
** centroid: 7, normalized-entropy: 0.8651214227512075, [(1, 67), (2, 27)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23480957411509007] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23480957411509007, 0.17366714738681913] ***
*** finished computation of 7 references, err: [Inf, 0.23480957411509007, 0.17366714738681913] ***
*** center 1: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [37, 9, 0]]
** centroid: 2, normalized-entropy: 0.7131467486384921, [(1, 37), (2, 9)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [2, 104, 16]]
** centroid: 3, normalized-entropy: 0.4277094752506463, [(1, 2), (2, 104), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [22, 63, 1]]
** centroid: 6, normalized-entropy: 0.8249658680139929, [(1, 22), (2, 63)]
*** center 7: selecting labels [1] (freq >= 2) [from [25, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18844756035320462] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18844756035320462, 0.1577931406805292] ***
*** finished computation of 7 references, err: [Inf, 0.18844756035320462, 0.1577931406805292] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [121, 7, 0]]
** centroid: 1, normalized-entropy: 0.3059848737138347, [(1, 121), (2, 7)]
*** center 2: selecting labels [1] (freq >= 2) [from [75, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 27, 14]]
** centroid: 5, normalized-entropy: 0.9262122127346664, [(2, 27), (3, 14)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 80, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 67, 0]]
** centroid: 7, normalized-entropy: 0.18927843126120178, [(1, 2), (2, 67)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1986292984522879] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1986292984522879, 0.16190091424435377] ***
*** finished computation of 7 references, err: [Inf, 0.1986292984522879, 0.16190091424435377] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [82, 25, 0]]
** centroid: 1, normalized-entropy: 0.7843112002044088, [(1, 82), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [15, 71, 0]]
** centroid: 2, normalized-entropy: 0.6677135405281421, [(1, 15), (2, 71)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 22, 11]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 22), (3, 11)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 66, 1]]
*** center 5: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [69, 2, 0]]
** centroid: 7, normalized-entropy: 0.18512476010054582, [(1, 69), (2, 2)]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 372,3 => 24,1 => 604), Dict(2 => 359,3 => 36,1 => 605))
[ Info: ===== scores for single classifier: {"micro_f1":0.937,"precision":0.937,"recall":0.937,"macro_recall":0.6415970287836583,"macro_f1":0.6305051675434608,"accuracy":0.937,"class_f1":{"2":0.9133425034387896,"3":0.0,"1":0.9781729991915925},"class_precision":{"2":0.9021739130434783,"3":0.0,"1":0.9572784810126582},"class_recall":{"2":0.924791086350975,"3":0.0,"1":1.0}}
[ Info: ===== scores for 1: {"micro_f1":0.98,"precision":0.98,"recall":0.98,"macro_recall":0.9844502252200403,"macro_f1":0.9808755071743395,"accuracy":0.98,"class_f1":{"2":0.9719887955182073,"3":0.9863013698630138,"1":0.9843363561417973},"class_precision":{"2":0.9774647887323944,"3":0.972972972972973,"1":0.9819078947368421},"class_recall":{"2":0.9665738161559888,"3":1.0,"1":0.9867768595041322}}
[ Info: ===== scores for 5: {"micro_f1":0.98,"precision":0.98,"recall":0.98,"macro_recall":0.9685437987539786,"macro_f1":0.9719870469353517,"accuracy":0.98,"class_f1":{"2":0.9722991689750693,"3":0.9577464788732395,"1":0.9859154929577465},"class_precision":{"2":0.9669421487603306,"3":0.9714285714285714,"1":0.9883720930232558},"class_recall":{"2":0.9777158774373259,"3":0.9444444444444444,"1":0.9834710743801653}}
[ Info: ===== scores for 7: {"micro_f1":0.972,"precision":0.972,"recall":0.972,"macro_recall":0.9633810034164555,"macro_f1":0.9579295494861912,"accuracy":0.972,"class_f1":{"2":0.9614325068870524,"3":0.9315068493150684,"1":0.980849292256453},"class_precision":{"2":0.9509536784741145,"3":0.918918918918919,"1":0.988255033557047},"class_recall":{"2":0.9721448467966574,"3":0.9444444444444444,"1":0.9735537190082645}}
[ Info: ===== scores for 9: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9641053908716608,"macro_f1":0.9516205792075675,"accuracy":0.974,"class_f1":{"2":0.9639889196675901,"3":0.9066666666666667,"1":0.9842061512884456},"class_precision":{"2":0.9586776859504132,"3":0.8717948717948718,"1":0.9899665551839465},"class_recall":{"2":0.9693593314763231,"3":0.9444444444444444,"1":0.9785123966942149}}
[ Info: ===== scores for 11: {"micro_f1":0.977,"precision":0.977,"recall":0.977,"macro_recall":0.9665133652725449,"macro_f1":0.961581596106559,"accuracy":0.977,"class_f1":{"2":0.9681881051175657,"3":0.9315068493150684,"1":0.9850498338870431},"class_precision":{"2":0.9615384615384616,"3":0.918918918918919,"1":0.989983305509182},"class_recall":{"2":0.9749303621169917,"3":0.9444444444444444,"1":0.9801652892561984}}
(score = 0.986, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.986, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.98, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.98, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.975, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.975, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.98, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.98, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.975, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.975, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.972, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.986,"k":1,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.986,"precision":0.986,"recall":0.986,"macro_recall":0.988888633102358,"macro_f1":0.9853254322391716,"accuracy":0.986,"class_f1":{"2":0.9803921568627452,"3":0.9863013698630138,"1":0.989282769991756},"class_precision":{"2":0.9859154929577465,"3":0.972972972972973,"1":0.9868421052631579},"class_recall":{"2":0.9749303621169917,"3":1.0,"1":0.9917355371900827}}
Test Summary: | Pass  Total
AKNC          |    8      8
[268, 3, 2, 2, 4, 2, 3, 3, 1, 1, 3, 14, 2, 1, 3, 1, 18, 1, 2, 1, 28, 3, 1, 13, 3, 9, 10, 2, 7, 1, 8, 8, 5, 9, 5, 23, 10, 1, 9, 37, 3, 57, 49, 8, 17, 20, 30, 10, 6, 4, 14, 25, 3, 2, 1, 26, 4, 44, 19, 4, 3, 5, 2, 16, 91, 10, 15, 19, 56, 12, 18, 1, 30, 40, 6, 3, 1, 13, 59, 29, 65, 26, 9, 7, 27, 2, 24, 19, 4, 2, 45, 25, 30, 2, 4, 15, 21, 20, 31, 6, 1, 19, 16, 86, 60, 10, 16, 5, 25, 95, 2, 25, 2, 13, 8, 34, 19, 3, 16, 6, 1, 17, 33, 7, 4, 19, 44, 8, 23, 1, 1, 130, 11, 3, 78, 16, 9, 26, 58, 4, 28, 1, 123, 41, 20, 59, 127, 11, 10, 11, 5, 126, 142, 7, 16, 232, 43, 24, 8, 17, 55, 50, 3, 45, 42, 21, 73, 11, 65, 291, 4, 816, 42, 24, 11, 41, 113, 14, 3, 5, 23, 14, 4, 58, 25, 6, 7, 52, 10, 17, 14, 56, 24, 10, 25, 66, 19, 14, 44, 16, 9, 11, 3, 6, 23, 29, 5, 19, 3, 21, 25, 72, 23, 48, 32, 3, 29, 3, 260, 44, 48, 9, 3, 345, 26, 56, 54, 24, 41, 5, 10, 2, 12, 14, 6, 14, 37, 519, 25, 76, 1, 35, 17, 1, 32, 64, 48, 5, 10, 2, 17, 13, 72, 3, 56, 21, 10, 69, 3, 67, 3, 5, 62, 34, 48, 205, 25, 19, 10, 14, 39, 19, 168, 184, 3, 13, 38, 42, 94, 11, 33, 38, 49, 7, 20, 31, 30, 22, 13, 4, 4, 40, 3, 15, 22, 9, 67, 53, 7, 33]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.677, speedup = 0.2453958275308691, eval_ratio = 0.07356499999999999)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4141555059523811,"recall":0.40885416666666674,"f1":null,"seconds":9.618513286113739e-5,"exhaustive_search_seconds":0.00023049302399158478,"evaluations":470.765625,"distances_sum":1654.5164191068864}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5694444444444444,"recall":0.5694444444444444,"f1":null,"seconds":0.00017749890685081482,"exhaustive_search_seconds":0.00023049302399158478,"evaluations":601.2890625,"distances_sum":1598.1565728747946}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6770833333333329,"recall":0.6770833333333329,"f1":null,"seconds":0.0002299342304468155,"exhaustive_search_seconds":0.00023049302399158478,"evaluations":720.0546875,"distances_sum":1545.063452569297}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7586805555555554,"recall":0.7586805555555554,"f1":0.7586805555555554,"seconds":0.00029626861214637756,"exhaustive_search_seconds":0.00023049302399158478,"evaluations":879.3828125,"distances_sum":1514.785236579441}
KCenters.DeloneInvIndex> reached performance {"precision":0.8281249999999994,"recall":0.8281249999999994,"f1":0.8281249999999994,"seconds":0.0004594549536705017,"exhaustive_search_seconds":0.00023049302399158478,"evaluations":993.390625,"distances_sum":1493.960472047609}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7750000000000002, speedup = 0.770395969521589, eval_ratio = 0.093182)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
