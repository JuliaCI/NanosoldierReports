Julia Version 1.6.0-DEV.221
Commit 6b2ffd3913 (2020-06-13 11:42 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed PooledArrays ──────────────── v0.5.3
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Reexport ──────────────────── v0.2.0
  Installed Compat ────────────────────── v3.12.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Tables ────────────────────── v1.0.4
  Installed CategoricalArrays ─────────── v0.7.7
  Installed JSON ──────────────────────── v0.21.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed OrderedCollections ────────── v1.2.0
  Installed DataStructures ────────────── v0.17.17
  Installed MappedArrays ──────────────── v0.2.2
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Parsers ───────────────────── v1.0.5
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLDataUtils ───────────────── v0.5.1
  Installed MLDataPattern ─────────────── v0.5.3
  Installed TableTraits ───────────────── v1.0.0
  Installed DataFrames ────────────────── v0.20.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed InvertedIndices ───────────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed Missings ──────────────────── v0.4.3
  Installed DataAPI ───────────────────── v1.3.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.12.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.5
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_9npYVz/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_9npYVz/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.12.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.5
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9316620069742203
[ Info: 0.8326150393486023
[ Info: 0.5559340282777945
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.32487781467537086
mean(cdnet.distances) = 0.3555918403963248
mean(crand.distances) = 0.34996368303895
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.803071928071929,"seconds":5.513429641723633e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.5390625,"distances_sum":1996.4740181261009}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7060546875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.7060546875,"f1":0.8178977272727281,"seconds":5.213543772697449e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.6875,"distances_sum":2078.3423545221062}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7060546875,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.7060546875,"f1":0.8178977272727281,"seconds":5.213543772697449e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.6875,"distances_sum":2078.3423545221062}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9433836996337002,"seconds":6.152316927909851e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.953125,"distances_sum":2859.162663810408}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9433836996337002,"seconds":6.152316927909851e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.953125,"distances_sum":2859.162663810408}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9750572344322347,"seconds":6.064772605895996e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.9765625,"distances_sum":3144.20757433912}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9584680944055948,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8984375,"distances_sum":3026.4970334145705}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9750572344322347,"seconds":6.064772605895996e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.9765625,"distances_sum":3144.20757433912}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9750572344322347,"seconds":6.064772605895996e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.9765625,"distances_sum":3144.20757433912}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.541015625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.541015625,"f1":0.6877709096459101,"seconds":4.131346940994263e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.203125,"distances_sum":1428.7786834513543}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6640625,"f1":0.7881654803529811,"seconds":4.4889748096466064e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.765625,"distances_sum":1780.577642760737}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6640625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6640625,"f1":0.7881654803529811,"seconds":4.4889748096466064e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.765625,"distances_sum":1780.577642760737}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8555038711288718,"seconds":4.999339580535889e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.2421875,"distances_sum":2150.26258328488}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9323832417582423,"seconds":5.386769771575928e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.7265625,"distances_sum":2611.0721868928263}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9237897519147528,"seconds":5.576759576797485e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.7265625,"distances_sum":2515.5746412052326}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.810546875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.810546875,"f1":0.8882242757242762,"seconds":5.373731255531311e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.4609375,"distances_sum":2321.389227478393}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.740234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.740234375,"f1":0.8405375874125882,"seconds":5.086883902549744e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.1953125,"distances_sum":2060.3094110938796}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8828125,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8828125,"f1":0.9323832417582423,"seconds":5.386769771575928e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.7265625,"distances_sum":2611.0721868928263}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9657967032967036,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8125,"distances_sum":2888.7676205581415}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9578010531135539,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.828125,"distances_sum":2814.8537289420633}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9326839826839834,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.7109375,"distances_sum":2630.6369109594307}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.956707875457876,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.859375,"distances_sum":2796.3876637025824}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9653674450549454,"seconds":5.992129445075989e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.859375,"distances_sum":2861.2116213353333}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.948277243589744,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.765625,"distances_sum":2728.6165496614467}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9657967032967036,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8125,"distances_sum":2888.7676205581415}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9657967032967036,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8125,"distances_sum":2888.7676205581415}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8551256035631044,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.6171875,"distances_sum":2011.3615251828091}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8494791666666676,"seconds":5.170702934265137e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.53125,"distances_sum":1994.830446361305}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7568359375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7568359375,"f1":0.8551256035631044,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.6171875,"distances_sum":2011.3615251828091}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8609208499833507,"seconds":5.377456545829773e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.6171875,"distances_sum":2035.5609850922565}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9057265651015658,"seconds":5.820766091346741e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8046875,"distances_sum":2286.333920092867}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9175683691308701,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8203125,"distances_sum":2393.170433842585}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9518486721611729,"seconds":6.059184670448303e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8203125,"distances_sum":2671.8733235376003}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9518486721611729,"seconds":6.059184670448303e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8203125,"distances_sum":2671.8733235376003}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9672077922077927,"seconds":5.884096026420593e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8984375,"distances_sum":2780.1849249833876}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9705185439560442,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.921875,"distances_sum":2794.2589217699256}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9552541208791214,"seconds":5.850568413734436e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.890625,"distances_sum":2697.619778377159}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9670215201465207,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.90625,"distances_sum":2776.2449263860126}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9759672619047621,"seconds":6.224960088729858e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9765625,"distances_sum":2823.0071020905134}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9532280219780225,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9140625,"distances_sum":2674.8123487775556}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":10,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9728625541125544,"seconds":6.200745701789856e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9609375,"distances_sum":2827.2867139240343}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9567536630036636,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8984375,"distances_sum":2711.6991012239373}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9596955128205134,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8671875,"distances_sum":2736.4956259310784}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9759672619047621,"seconds":6.224960088729858e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9765625,"distances_sum":2823.0071020905134}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9759672619047621,"seconds":6.224960088729858e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9765625,"distances_sum":2823.0071020905134}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1875,"f1":null,"seconds":3.4850090742111206e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.1640625,"distances_sum":488.25250160277574}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.786039828227329,"seconds":4.9211084842681885e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.7109375,"distances_sum":1657.4208929299748}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4462890625, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.4462890625,"f1":0.5953296703296707,"seconds":4.131346940994263e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.6484375,"distances_sum":1124.2273671150338}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6650390625,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6650390625,"f1":0.786039828227329,"seconds":4.9211084842681885e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.7109375,"distances_sum":1657.4208929299748}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9480342574092578,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.78125,"distances_sum":2670.5498318135806}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.701171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.701171875,"f1":0.8150136322011329,"seconds":4.950910806655884e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.96875,"distances_sum":1802.2707734411565}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8494796869796879,"seconds":5.144625902175903e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.2890625,"distances_sum":1994.8807026175548}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8932296869796879,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.4609375,"distances_sum":2262.247963123589}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9091796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9480342574092578,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.78125,"distances_sum":2670.5498318135806}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9518830128205134,"seconds":5.921348929405212e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.796875,"distances_sum":2702.8171447806526}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9630437271062275,"seconds":5.9157609939575195e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.84375,"distances_sum":2769.6775909978496}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9557921245421249,"seconds":5.898997187614441e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.828125,"distances_sum":2734.995690416591}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9605311355311359,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.8359375,"distances_sum":2761.0228328615503}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9488209706959712,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7890625,"distances_sum":2678.2065274877154}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9630437271062275,"seconds":5.9157609939575195e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.84375,"distances_sum":2769.6775909978496}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9630437271062275,"seconds":5.9157609939575195e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.84375,"distances_sum":2769.6775909978496}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.703125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.703125,"f1":0.8147654428904438,"seconds":5.286186933517456e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.6328125,"distances_sum":1850.0691893145347}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.703125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.703125,"f1":0.8147654428904438,"seconds":5.286186933517456e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.6328125,"distances_sum":1850.0691893145347}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9365275349650355,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.5390625,"distances_sum":2687.4896003837525}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.933548222610723,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.5078125,"distances_sum":2668.4538064162957}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8504094863469871,"seconds":5.088746547698975e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.9375,"distances_sum":2032.0333961909178}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.890625,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.890625,"f1":0.9365275349650355,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.5390625,"distances_sum":2687.4896003837525}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9501576548451552,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.703125,"distances_sum":2740.457660152037}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9416437728937734,"seconds":5.6978315114974976e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.640625,"distances_sum":2663.9688973133216}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9580586080586085,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.765625,"distances_sum":2801.94934008929}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9580586080586085,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.765625,"distances_sum":2801.94934008929}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.92578125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9580586080586085,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.765625,"distances_sum":2801.94934008929}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.564453125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.564453125,"f1":null,"seconds":4.28222119808197e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.0625,"distances_sum":1099.7267702809033}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1826171875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1826171875,"f1":null,"seconds":3.0156224966049194e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":5.46875,"distances_sum":422.4563579345315}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6689453125, conf: {"ssize":1,"bsize":4}, perf: {"precision":0.9852864583333333,"recall":0.6689453125,"f1":0.7874830898268405,"seconds":4.511326551437378e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.5703125,"distances_sum":1479.099634330523}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6689453125,"state":{"ssize":1,"bsize":4},"perf":{"precision":0.9852864583333333,"recall":0.6689453125,"f1":0.7874830898268405,"seconds":4.511326551437378e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.5703125,"distances_sum":1479.099634330523}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":0.984858630952381,"recall":0.8505859375,"f1":0.9088715971528477,"seconds":5.280598998069763e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.796875,"distances_sum":2091.7759477941277}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":1,"bsize":6}, perf: {"precision":0.9886253720238096,"recall":0.826171875,"f1":0.8956222813644699,"seconds":5.0477683544158936e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.109375,"distances_sum":1977.4251353506531}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":2,"bsize":7}, perf: {"precision":0.9842354910714286,"recall":0.8701171875,"f1":0.9210343692765574,"seconds":5.2694231271743774e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8671875,"distances_sum":2193.899034250285}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":3,"bsize":6}, perf: {"precision":0.9858165922619047,"recall":0.833984375,"f1":0.8967975383991015,"seconds":5.37186861038208e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.1328125,"distances_sum":2039.0548238196636}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":4,"bsize":6}, perf: {"precision":0.9854352678571427,"recall":0.8349609375,"f1":0.899626545329671,"seconds":5.198642611503601e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.203125,"distances_sum":2029.7649723717561}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9890438988095237,"recall":0.7626953125,"f1":0.8552627060439568,"seconds":4.932284355163574e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.9921875,"distances_sum":1755.8240577482281}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8701171875,"state":{"ssize":2,"bsize":7},"perf":{"precision":0.9842354910714286,"recall":0.8701171875,"f1":0.9210343692765574,"seconds":5.2694231271743774e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8671875,"distances_sum":2193.899034250285}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":8}, perf: {"precision":0.9904668898809524,"recall":0.8896484375,"f1":0.934351390796704,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.875,"distances_sum":2285.7776403373714}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":5,"bsize":9}, perf: {"precision":0.9906063988095238,"recall":0.9326171875,"f1":0.957647951007326,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8984375,"distances_sum":2491.0210813800736}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":4,"bsize":11}, perf: {"precision":0.9880022321428572,"recall":0.9453125,"f1":0.9639179830586082,"seconds":6.170943379402161e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.9375,"distances_sum":2543.324834074217}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":3,"bsize":10}, perf: {"precision":0.9927455357142858,"recall":0.95703125,"f1":0.9729195283882784,"seconds":5.973502993583679e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.96875,"distances_sum":2565.7321865130634}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":1,"bsize":11}, perf: {"precision":0.9880022321428571,"recall":0.9599609375,"f1":0.9725088713369964,"seconds":5.898997187614441e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.9609375,"distances_sum":2619.0605034285663}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":3,"bsize":8}, perf: {"precision":0.9881417410714286,"recall":0.9111328125,"f1":0.9445834764194142,"seconds":5.539506673812866e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8515625,"distances_sum":2396.451486825206}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":1,"bsize":11},"perf":{"precision":0.9880022321428571,"recall":0.9599609375,"f1":0.9725088713369964,"seconds":5.898997187614441e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.9609375,"distances_sum":2619.0605034285663}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":1,"bsize":11},"perf":{"precision":0.9880022321428571,"recall":0.9599609375,"f1":0.9725088713369964,"seconds":5.898997187614441e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.9609375,"distances_sum":2619.0605034285663}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5634765625, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5634765625,"f1":0.7016346500721505,"seconds":4.0549784898757935e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":6.6953125,"distances_sum":1040.5163565613434}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.56640625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.56640625,"f1":0.7024449508824515,"seconds":4.133209586143494e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":6.953125,"distances_sum":1077.0353034711013}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1982421875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1982421875,"f1":null,"seconds":3.4794211387634277e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":5.75,"distances_sum":420.3878805824345}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.56640625,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.56640625,"f1":0.7024449508824515,"seconds":4.133209586143494e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":6.953125,"distances_sum":1077.0353034711013}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8709191849816857,"seconds":5.031004548072815e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":7.890625,"distances_sum":1689.0049297841192}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9124916749916759,"seconds":5.0943344831466675e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.171875,"distances_sum":1979.325554298832}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8696147602397611,"seconds":4.92483377456665e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":7.8828125,"distances_sum":1695.7033113853797}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6875, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.6875,"f1":0.7998902139527148,"seconds":4.36045229434967e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":7.46875,"distances_sum":1430.9878760921906}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6904296875, conf: {"ssize":9,"bsize":4}, perf: {"precision":1.0,"recall":0.6904296875,"f1":0.8014131701631708,"seconds":4.589557647705078e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":7.484375,"distances_sum":1409.9598946995502}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8505859375,"state":{"ssize":7,"bsize":6},"perf":{"precision":1.0,"recall":0.8505859375,"f1":0.9124916749916759,"seconds":5.0943344831466675e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.171875,"distances_sum":1979.325554298832}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.933284944222445,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.515625,"distances_sum":2124.661186889142}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9607371794871798,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.84375,"distances_sum":2351.444102236478}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":10,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9152217574092578,"seconds":5.071982741355896e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.21875,"distances_sum":1976.7882240445103}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9169762529137536,"seconds":5.071982741355896e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.21875,"distances_sum":1961.0459234454645}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9165324259074266,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.4609375,"distances_sum":2006.8347450760718}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9607371794871798,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.84375,"distances_sum":2351.444102236478}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9306640625,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9607371794871798,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.84375,"distances_sum":2351.444102236478}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7021484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7021484375,"f1":0.8116107850482859,"seconds":4.647299647331238e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":7.3984375,"distances_sum":1594.6358518451293}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7021484375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.7021484375,"f1":0.8150141525141532,"seconds":4.610046744346619e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":7.4296875,"distances_sum":1556.85140605055}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2421875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2421875,"f1":null,"seconds":3.298744559288025e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":5.7109375,"distances_sum":588.9900284650047}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7021484375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.7021484375,"f1":0.8116107850482859,"seconds":4.647299647331238e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":7.3984375,"distances_sum":1594.6358518451293}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9374287171162179,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.6015625,"distances_sum":2306.687195759268}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9215544871794878,"seconds":5.476176738739014e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.4296875,"distances_sum":2131.0357287181555}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.79296875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.79296875,"f1":0.8785261613386621,"seconds":5.183741450309753e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.140625,"distances_sum":1929.2220470897055}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8590846653346661,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.0,"distances_sum":1796.23723069225}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8667487026862035,"seconds":5.073845386505127e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.1015625,"distances_sum":1860.5924051983968}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8608610139860144,"seconds":4.937872290611267e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.015625,"distances_sum":1844.6372551377258}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8896484375,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8896484375,"f1":0.9374287171162179,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.6015625,"distances_sum":2306.687195759268}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9650869963369967,"seconds":5.636364221572876e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.875,"distances_sum":2550.474977037833}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9595295329670335,"seconds":5.694106221199036e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.84375,"distances_sum":2500.371927357569}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9637706043956048,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.8671875,"distances_sum":2496.023944137402}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9650698260073264,"seconds":5.576759576797485e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.875,"distances_sum":2531.442254755854}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9590086996336998,"seconds":5.610287189483643e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.8828125,"distances_sum":2476.4644233130457}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9650698260073264,"seconds":5.576759576797485e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.875,"distances_sum":2531.442254755854}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9650698260073264,"seconds":5.576759576797485e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.875,"distances_sum":2531.442254755854}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7916448135198142,"seconds":4.377216100692749e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":7.375,"distances_sum":1372.8257530905248}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.23046875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.23046875,"f1":null,"seconds":3.2279640436172485e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":5.71875,"distances_sum":478.63891036688256}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6728515625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6728515625,"f1":0.7916448135198142,"seconds":4.377216100692749e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":7.375,"distances_sum":1372.8257530905248}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9324779387279397,"seconds":5.617737770080566e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.515625,"distances_sum":2218.124942042932}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8837890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9324779387279397,"seconds":5.617737770080566e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.515625,"distances_sum":2218.124942042932}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9499313186813194,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.7265625,"distances_sum":2321.781511534845}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9530734890109894,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.7109375,"distances_sum":2396.499012906009}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9530734890109894,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.7109375,"distances_sum":2396.499012906009}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9530734890109894,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.7109375,"distances_sum":2396.499012906009}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7197265625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.7197265625,"f1":0.8259594572094578,"seconds":4.891306161880493e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.765625,"distances_sum":1629.4753029398025}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3671875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3671875,"f1":null,"seconds":3.876164555549622e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":6.1171875,"distances_sum":767.6918274312973}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6904296875, conf: {"ssize":5,"bsize":4}, perf: {"precision":null,"recall":0.6904296875,"f1":null,"seconds":4.9229711294174194e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.578125,"distances_sum":1533.5374002645256}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7197265625,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.7197265625,"f1":0.8259594572094578,"seconds":4.891306161880493e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.765625,"distances_sum":1629.4753029398025}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9210851648351652,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.46875,"distances_sum":2196.5810262078885}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.720703125, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.720703125,"f1":0.8268230033855043,"seconds":4.61190938949585e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.6328125,"distances_sum":1626.787558573894}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8056640625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.8056640625,"f1":0.8860119047619055,"seconds":4.8782676458358765e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.984375,"distances_sum":1954.2913519892968}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.861328125,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.861328125,"f1":0.9210851648351652,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.46875,"distances_sum":2196.5810262078885}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9649782509157512,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.796875,"distances_sum":2559.4094872132164}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9517971611721616,"seconds":5.46872615814209e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.7421875,"distances_sum":2448.006104662483}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9649782509157512,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.796875,"distances_sum":2559.4094872132164}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9649782509157512,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.796875,"distances_sum":2559.4094872132164}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.396484375, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.396484375,"f1":null,"seconds":3.4943222999572754e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":6.0078125,"distances_sum":413.85848415395566}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.23046875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.23046875,"f1":null,"seconds":3.4030526876449585e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":5.5078125,"distances_sum":264.9542537629325}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5322265625, conf: {"ssize":3,"bsize":3}, perf: {"precision":0.9778645833333335,"recall":0.5322265625,"f1":0.6736416361416366,"seconds":3.829598426818848e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":6.9296875,"distances_sum":611.2028100156359}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5322265625,"state":{"ssize":3,"bsize":3},"perf":{"precision":0.9778645833333335,"recall":0.5322265625,"f1":0.6736416361416366,"seconds":3.829598426818848e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":6.9296875,"distances_sum":611.2028100156359}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6474609375, conf: {"ssize":4,"bsize":4}, perf: {"precision":0.9923177083333333,"recall":0.6474609375,"f1":0.7755413856976365,"seconds":4.308298230171204e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":7.4296875,"distances_sum":744.9370713098888}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7216796875, conf: {"ssize":1,"bsize":5}, perf: {"precision":null,"recall":0.7216796875,"f1":null,"seconds":5.211681127548218e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":7.8828125,"distances_sum":860.2826455012411}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":3,"bsize":7}, perf: {"precision":0.9793991815476191,"recall":0.86328125,"f1":0.9138571714743592,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.7109375,"distances_sum":1090.2163396707156}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66015625, conf: {"ssize":2,"bsize":4}, perf: {"precision":0.9869791666666665,"recall":0.66015625,"f1":0.7821709540459546,"seconds":4.416331648826599e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":7.6171875,"distances_sum":771.787999703887}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":6,"bsize":4}, perf: {"precision":0.9754464285714285,"recall":0.6533203125,"f1":0.773612845487846,"seconds":4.425644874572754e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":7.65625,"distances_sum":764.7738311543301}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.626953125, conf: {"ssize":5,"bsize":4}, perf: {"precision":0.9883370535714284,"recall":0.626953125,"f1":0.7538224796037303,"seconds":4.492700099945068e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":7.421875,"distances_sum":714.7303737845466}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.86328125,"state":{"ssize":3,"bsize":7},"perf":{"precision":0.9793991815476191,"recall":0.86328125,"f1":0.9138571714743592,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.7109375,"distances_sum":1090.2163396707156}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":1,"bsize":7}, perf: {"precision":0.9814825148809523,"recall":0.875,"f1":0.9212747538919417,"seconds":5.384907126426697e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.78125,"distances_sum":1096.1594097617804}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.875,"state":{"ssize":1,"bsize":7},"perf":{"precision":0.9814825148809523,"recall":0.875,"f1":0.9212747538919417,"seconds":5.384907126426697e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.78125,"distances_sum":1096.1594097617804}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.875,"state":{"ssize":1,"bsize":7},"perf":{"precision":0.9814825148809523,"recall":0.875,"f1":0.9212747538919417,"seconds":5.384907126426697e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.78125,"distances_sum":1096.1594097617804}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.525390625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.525390625,"f1":null,"seconds":3.6954879760742188e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":6.4140625,"distances_sum":607.164239805392}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8567083957708966,"seconds":4.8764050006866455e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.96875,"distances_sum":924.9077546754875}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76171875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.76171875,"f1":0.8567083957708966,"seconds":4.8764050006866455e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.96875,"distances_sum":924.9077546754875}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9366185897435904,"seconds":5.377456545829773e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.5625,"distances_sum":1174.860646605467}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9426797161172167,"seconds":5.29363751411438e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.65625,"distances_sum":1169.601763673971}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8994140625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.8994140625,"f1":0.9426797161172167,"seconds":5.29363751411438e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.65625,"distances_sum":1169.601763673971}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9590602106227112,"seconds":5.921348929405212e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.8203125,"distances_sum":1220.2170422641277}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9747596153846159,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.859375,"distances_sum":1275.2277966036}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9747596153846159,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.859375,"distances_sum":1275.2277966036}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9747596153846159,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.859375,"distances_sum":1275.2277966036}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6611328125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6611328125,"f1":0.7828324453324461,"seconds":5.034729838371277e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.4375,"distances_sum":838.6559136675055}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8515635406260414,"seconds":4.893168807029724e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.8359375,"distances_sum":987.3938061131191}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8595477439227447,"seconds":5.086883902549744e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.984375,"distances_sum":1000.347608115273}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.767578125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.767578125,"f1":0.8595477439227447,"seconds":5.086883902549744e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.984375,"distances_sum":1000.347608115273}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8056640625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8056640625,"f1":0.8859577922077929,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.1875,"distances_sum":1072.9873489522786}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9253262362637369,"seconds":5.3513795137405396e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.390625,"distances_sum":1207.329176682991}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9293248418248425,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.4453125,"distances_sum":1220.3462121037762}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8798828125,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9293248418248425,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.4453125,"distances_sum":1220.3462121037762}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9749084249084254,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9140625,"distances_sum":1367.9427702729422}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9633241758241765,"seconds":5.25452196598053e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.84375,"distances_sum":1327.187843364629}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9535256410256415,"seconds":5.19677996635437e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.6953125,"distances_sum":1301.2318601510394}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9749084249084254,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9140625,"distances_sum":1367.9427702729422}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9749084249084254,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9140625,"distances_sum":1367.9427702729422}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.375,"f1":null,"seconds":3.3974647521972656e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":5.4375,"distances_sum":469.6147282140685}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6416015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6416015625,"f1":0.7657046078921086,"seconds":4.533678293228149e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.4765625,"distances_sum":834.0355629903727}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5673828125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5673828125,"f1":null,"seconds":4.000961780548096e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.890625,"distances_sum":744.2335849718022}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6416015625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6416015625,"f1":0.7657046078921086,"seconds":4.533678293228149e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.4765625,"distances_sum":834.0355629903727}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9515682234432242,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.765625,"distances_sum":1333.6815119501516}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.849468240093241,"seconds":4.7869980335235596e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.015625,"distances_sum":1003.4699633525214}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.7904236388611396,"seconds":4.973262548446655e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.640625,"distances_sum":873.939867080109}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8545855186480195,"seconds":4.770234227180481e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.8359375,"distances_sum":990.487479599373}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9515682234432242,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.765625,"distances_sum":1333.6815119501516}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9687900641025644,"seconds":5.649402737617493e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8671875,"distances_sum":1389.4769937563246}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9568108974358981,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8203125,"distances_sum":1329.7467761043724}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9687900641025644,"seconds":5.649402737617493e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8671875,"distances_sum":1389.4769937563246}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9687900641025644,"seconds":5.649402737617493e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8671875,"distances_sum":1389.4769937563246}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5107421875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5107421875,"f1":null,"seconds":4.122033715248108e-6,"exhaustive_search_seconds":1.1157244443893433e-6,"evaluations":6.75,"distances_sum":745.2099733115139}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2001953125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2001953125,"f1":null,"seconds":3.028661012649536e-6,"exhaustive_search_seconds":1.1157244443893433e-6,"evaluations":4.9296875,"distances_sum":321.314227808095}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5107421875,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5107421875,"f1":null,"seconds":4.122033715248108e-6,"exhaustive_search_seconds":1.1157244443893433e-6,"evaluations":6.75,"distances_sum":745.2099733115139}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9367216117216122,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.1157244443893433e-6,"evaluations":8.75,"distances_sum":1413.5011442276427}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8607064810189818,"seconds":5.239620804786682e-6,"exhaustive_search_seconds":1.1157244443893433e-6,"evaluations":8.4921875,"distances_sum":1142.1286434875115}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9114645770895777,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.1157244443893433e-6,"evaluations":8.5546875,"distances_sum":1341.594656764293}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8579051157176167,"seconds":5.230307579040527e-6,"exhaustive_search_seconds":1.1157244443893433e-6,"evaluations":8.5625,"distances_sum":1123.345128659928}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7958984375, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7958984375,"f1":0.8757825507825515,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.1157244443893433e-6,"evaluations":8.484375,"distances_sum":1205.8549270652281}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.890625,"f1":0.9367216117216122,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.1157244443893433e-6,"evaluations":8.75,"distances_sum":1413.5011442276427}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9608115842490847,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.1157244443893433e-6,"evaluations":8.890625,"distances_sum":1490.5122712425502}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9381842116217122,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.1157244443893433e-6,"evaluations":8.703125,"distances_sum":1428.670029891557}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9518346237096242,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":1.1157244443893433e-6,"evaluations":8.859375,"distances_sum":1453.3024658348975}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9608115842490847,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.1157244443893433e-6,"evaluations":8.890625,"distances_sum":1490.5122712425502}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9306640625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9608115842490847,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.1157244443893433e-6,"evaluations":8.890625,"distances_sum":1490.5122712425502}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5185546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5185546875,"f1":0.667245948495949,"seconds":3.891065716743469e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":6.3359375,"distances_sum":662.6703562114743}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5185546875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5185546875,"f1":0.667245948495949,"seconds":3.891065716743469e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":6.3359375,"distances_sum":662.6703562114743}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8943566849816857,"seconds":5.0943344831466675e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.2265625,"distances_sum":1155.257913951342}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9234151265401271,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.5546875,"distances_sum":1244.7020303198196}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8681640625,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8681640625,"f1":0.9234151265401271,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.5546875,"distances_sum":1244.7020303198196}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9682291666666669,"seconds":6.210058927536011e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8671875,"distances_sum":1416.044017081473}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9520661630036633,"seconds":7.275491952896118e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.71875,"distances_sum":1370.6926065456041}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9682291666666669,"seconds":6.210058927536011e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8671875,"distances_sum":1416.044017081473}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9682291666666669,"seconds":6.210058927536011e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8671875,"distances_sum":1416.044017081473}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.357421875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.357421875,"f1":null,"seconds":4.1425228118896484e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":5.71875,"distances_sum":435.11457510253933}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.51953125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.51953125,"f1":0.66565725940726,"seconds":4.880130290985107e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":6.71875,"distances_sum":631.0808769780667}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.51953125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.51953125,"f1":0.66565725940726,"seconds":4.880130290985107e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":6.71875,"distances_sum":631.0808769780667}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9319628288378295,"seconds":6.81169331073761e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.609375,"distances_sum":1209.8621517585696}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8828125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8828125,"f1":0.9319628288378295,"seconds":6.81169331073761e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.609375,"distances_sum":1209.8621517585696}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9710222069597073,"seconds":6.884336471557617e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.8984375,"distances_sum":1326.8250364703854}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9710222069597073,"seconds":6.884336471557617e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.8984375,"distances_sum":1326.8250364703854}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9710222069597073,"seconds":6.884336471557617e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.8984375,"distances_sum":1326.8250364703854}}, n: 9
mean(cfft.distances) = 0.32487781375593805
mean(cdnet.distances) = 0.4174168980609384
mean(crand.distances) = 0.41296994113758584
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8799999999999999
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8711111111111111
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.9244444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8733333333333334
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9444444444444443
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8844444444444445
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9488888888888889
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8977777777777778
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8911111111111111
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8911111111111111
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8266666666666667
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8888888888888888
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9266666666666666
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.931111111111111
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9266666666666667
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9266666666666667
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8666666666666667
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8755555555555555
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8755555555555555
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8755555555555556
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8799999999999999
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9066666666666666
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9133333333333334
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8422222222222223
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.88
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9066666666666666
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 7, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 10, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 3, 2, 3, 3, 2, 3, 2, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 7, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 10, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 3, 2, 3, 3, 2, 3, 2, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 7, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 10, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 3, 2, 3, 3, 2, 3, 2, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 7, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 10, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 3, 2, 3, 3, 2, 3, 2, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 7, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 10, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 3, 2, 3, 3, 2, 3, 2, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 7, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 10, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 3, 2, 3, 3, 2, 3, 2, 1]
acc = 0.9333333333333333
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 7, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 10, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 3, 2, 3, 3, 2, 3, 2, 1]
acc = 0.9533333333333334
*** finished computation of 12 references, err: [Inf, 0.5147623486320178] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 26]]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 24, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 8, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 6]]
** centroid: 10, normalized-entropy: 0.9182958340544894, [(2, 3), (3, 6)]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 12, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
finished with 15 centroids; started with 12
acc = 0.98
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.2525992849282361] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2525992849282361, 0.20739112316502128] ***
*** starting iteration: 2; err: [Inf, 0.2525992849282361, 0.20739112316502128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2525992849282361, 0.20739112316502128, 0.2026017893653911] ***
*** starting iteration: 3; err: [Inf, 0.2525992849282361, 0.20739112316502128, 0.2026017893653911] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2525992849282361, 0.20739112316502128, 0.2026017893653911, 0.2006617611939753] ***
*** finished computation of 7 references, err: [Inf, 0.2525992849282361, 0.20739112316502128, 0.2026017893653911, 0.2006617611939753] ***
*** center 1: selecting labels [1] (freq >= 2) [from [87, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 81, 30]]
** centroid: 2, normalized-entropy: 0.8418521897563208, [(2, 81), (3, 30)]
*** center 3: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 70, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [92, 48, 0]]
** centroid: 5, normalized-entropy: 0.927526588431676, [(1, 92), (2, 48)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [49, 48, 0]]
** centroid: 6, normalized-entropy: 0.9999233329473267, [(1, 49), (2, 48)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [70, 3, 0]]
** centroid: 7, normalized-entropy: 0.24729443986205674, [(1, 70), (2, 3)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30933116398600935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30933116398600935, 0.2425028239327973] ***
*** starting iteration: 2; err: [Inf, 0.30933116398600935, 0.2425028239327973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30933116398600935, 0.2425028239327973, 0.21937374424362469] ***
*** starting iteration: 3; err: [Inf, 0.30933116398600935, 0.2425028239327973, 0.21937374424362469] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30933116398600935, 0.2425028239327973, 0.21937374424362469, 0.20522968585545692] ***
*** finished computation of 7 references, err: [Inf, 0.30933116398600935, 0.2425028239327973, 0.21937374424362469, 0.20522968585545692] ***
*** center 1: selecting labels [1] (freq >= 2) [from [119, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [146, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [1, 42, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [49, 46, 0]]
** centroid: 4, normalized-entropy: 0.999280531064971, [(1, 49), (2, 46)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 71, 24]]
** centroid: 5, normalized-entropy: 0.8154224977821039, [(2, 71), (3, 24)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [52, 3, 0]]
** centroid: 6, normalized-entropy: 0.30540057087920036, [(1, 52), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [26, 88, 0]]
** centroid: 7, normalized-entropy: 0.7746319868686841, [(1, 26), (2, 88)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22834153732213694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22834153732213694, 0.19678425418444792] ***
*** starting iteration: 2; err: [Inf, 0.22834153732213694, 0.19678425418444792] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22834153732213694, 0.19678425418444792, 0.19350501906679668] ***
*** starting iteration: 3; err: [Inf, 0.22834153732213694, 0.19678425418444792, 0.19350501906679668] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22834153732213694, 0.19678425418444792, 0.19350501906679668, 0.1907227712514429] ***
*** finished computation of 7 references, err: [Inf, 0.22834153732213694, 0.19678425418444792, 0.19350501906679668, 0.1907227712514429] ***
*** center 1: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [6, 78, 0]]
** centroid: 2, normalized-entropy: 0.3712323266408756, [(1, 6), (2, 78)]
*** center 3: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [123, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [8, 68, 0]]
** centroid: 5, normalized-entropy: 0.48546076074591343, [(1, 8), (2, 68)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 66, 22]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(2, 66), (3, 22)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [49, 51, 0]]
** centroid: 7, normalized-entropy: 0.9997114417528099, [(1, 49), (2, 51)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26225567830295804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26225567830295804, 0.21112281426524482] ***
*** finished computation of 7 references, err: [Inf, 0.26225567830295804, 0.21112281426524482] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [82, 14, 0]]
** centroid: 1, normalized-entropy: 0.5993142373098089, [(1, 82), (2, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [146, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 42, 30]]
** centroid: 4, normalized-entropy: 0.9798687566511527, [(2, 42), (3, 30)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [68, 40, 0]]
** centroid: 5, normalized-entropy: 0.9509560484549724, [(1, 68), (2, 40)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 113, 0]]
** centroid: 6, normalized-entropy: 0.3512580905562789, [(1, 8), (2, 113)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [17, 42, 0]]
** centroid: 7, normalized-entropy: 0.8663006754980497, [(1, 17), (2, 42)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2772337048017103] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2772337048017103, 0.21207679014072112] ***
*** finished computation of 7 references, err: [Inf, 0.2772337048017103, 0.21207679014072112] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [77, 40, 0]]
** centroid: 1, normalized-entropy: 0.9266067073697131, [(1, 77), (2, 40)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 50, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [124, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [86, 8, 0]]
** centroid: 5, normalized-entropy: 0.4199210973757179, [(1, 86), (2, 8)]
*** center 6: selecting labels [1, 2, 3] (freq >= 2) [from [4, 86, 24]]
** centroid: 6, normalized-entropy: 0.5991153570313206, [(1, 4), (2, 86), (3, 24)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2806004134468969] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2806004134468969, 0.21873775616810395] ***
*** finished computation of 7 references, err: [Inf, 0.2806004134468969, 0.21873775616810395] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [81, 22, 0]]
** centroid: 1, normalized-entropy: 0.7482932859824888, [(1, 81), (2, 22)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 155, 22]]
** centroid: 2, normalized-entropy: 0.541578553317306, [(2, 155), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [55, 16, 0]]
** centroid: 3, normalized-entropy: 0.7698205808588191, [(1, 55), (2, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [41, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [87, 70, 0]]
** centroid: 7, normalized-entropy: 0.9915258742101811, [(1, 87), (2, 70)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24414759451263324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24414759451263324, 0.21032760583155147] ***
*** starting iteration: 2; err: [Inf, 0.24414759451263324, 0.21032760583155147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24414759451263324, 0.21032760583155147, 0.20246465081997864] ***
*** starting iteration: 3; err: [Inf, 0.24414759451263324, 0.21032760583155147, 0.20246465081997864] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24414759451263324, 0.21032760583155147, 0.20246465081997864, 0.20009769835193325] ***
*** finished computation of 7 references, err: [Inf, 0.24414759451263324, 0.21032760583155147, 0.20246465081997864, 0.20009769835193325] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 59, 30]]
** centroid: 1, normalized-entropy: 0.9219957030944405, [(2, 59), (3, 30)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [84, 34, 0]]
** centroid: 2, normalized-entropy: 0.8663006754980497, [(1, 84), (2, 34)]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [121, 5, 0]]
** centroid: 4, normalized-entropy: 0.24083474743116462, [(1, 121), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [15, 55, 0]]
** centroid: 5, normalized-entropy: 0.7495952572594798, [(1, 15), (2, 55)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 98, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2605246412114001] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2605246412114001, 0.20114153512017705] ***
*** starting iteration: 2; err: [Inf, 0.2605246412114001, 0.20114153512017705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2605246412114001, 0.20114153512017705, 0.19641326876940846] ***
*** starting iteration: 3; err: [Inf, 0.2605246412114001, 0.20114153512017705, 0.19641326876940846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2605246412114001, 0.20114153512017705, 0.19641326876940846, 0.1941349514916461] ***
*** finished computation of 7 references, err: [Inf, 0.2605246412114001, 0.20114153512017705, 0.19641326876940846, 0.1941349514916461] ***
*** center 1: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [23, 72, 0]]
** centroid: 2, normalized-entropy: 0.7985237652450764, [(1, 23), (2, 72)]
*** center 3: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [61, 58, 0]]
** centroid: 4, normalized-entropy: 0.9995415002093281, [(1, 61), (2, 58)]
*** center 5: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [67, 30, 0]]
** centroid: 6, normalized-entropy: 0.892338681064176, [(1, 67), (2, 30)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 90, 24]]
** centroid: 7, normalized-entropy: 0.7424875695421234, [(2, 90), (3, 24)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28472653447442325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28472653447442325, 0.22903051034364474] ***
*** starting iteration: 2; err: [Inf, 0.28472653447442325, 0.22903051034364474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28472653447442325, 0.22903051034364474, 0.21210456570970646] ***
*** starting iteration: 3; err: [Inf, 0.28472653447442325, 0.22903051034364474, 0.21210456570970646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28472653447442325, 0.22903051034364474, 0.21210456570970646, 0.20246577701312135] ***
*** finished computation of 7 references, err: [Inf, 0.28472653447442325, 0.22903051034364474, 0.21210456570970646, 0.20246577701312135] ***
*** center 1: selecting labels [1] (freq >= 2) [from [79, 1, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [123, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [62, 40, 0]]
** centroid: 3, normalized-entropy: 0.9661773513883509, [(1, 62), (2, 40)]
*** center 4: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [50, 49, 0]]
** centroid: 5, normalized-entropy: 0.999926399368686, [(1, 50), (2, 49)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 98, 22]]
** centroid: 6, normalized-entropy: 0.6873150928309273, [(2, 98), (3, 22)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20018767639491958] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20018767639491958, 0.15111368872515712] ***
*** finished computation of 7 references, err: [Inf, 0.20018767639491958, 0.15111368872515712] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [112, 12, 0]]
** centroid: 1, normalized-entropy: 0.45868581620054033, [(1, 112), (2, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [88, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 36, 24]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 36), (3, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 4, 0]]
** centroid: 5, normalized-entropy: 0.32275695889739825, [(1, 64), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [18, 99, 0]]
** centroid: 6, normalized-entropy: 0.6193821946787638, [(1, 18), (2, 99)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 98, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2042588438123822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2042588438123822, 0.1549129886198384] ***
*** finished computation of 7 references, err: [Inf, 0.2042588438123822, 0.1549129886198384] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 97, 19]]
** centroid: 1, normalized-entropy: 0.6433071292001625, [(2, 97), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [65, 6, 0]]
** centroid: 3, normalized-entropy: 0.4178642624458583, [(1, 65), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [96, 24, 0]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(1, 96), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 37, 0]]
** centroid: 5, normalized-entropy: 0.9391151961320356, [(1, 67), (2, 37)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 99, 3]]
** centroid: 6, normalized-entropy: 0.1914332548141934, [(2, 99), (3, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21920287211400433] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21920287211400433, 0.19467087802351327] ***
*** starting iteration: 2; err: [Inf, 0.21920287211400433, 0.19467087802351327] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21920287211400433, 0.19467087802351327, 0.19238052237639064] ***
*** starting iteration: 3; err: [Inf, 0.21920287211400433, 0.19467087802351327, 0.19238052237639064] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21920287211400433, 0.19467087802351327, 0.19238052237639064, 0.19137041315481113] ***
*** finished computation of 7 references, err: [Inf, 0.21920287211400433, 0.19467087802351327, 0.19238052237639064, 0.19137041315481113] ***
*** center 1: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [21, 82, 0]]
** centroid: 2, normalized-entropy: 0.7296274178915987, [(1, 21), (2, 82)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 84, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 46, 30]]
** centroid: 4, normalized-entropy: 0.9677884628267678, [(2, 46), (3, 30)]
*** center 5: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [76, 22, 0]]
** centroid: 6, normalized-entropy: 0.7682814090975241, [(1, 76), (2, 22)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [92, 17, 0]]
** centroid: 7, normalized-entropy: 0.6245644324971011, [(1, 92), (2, 17)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23555310995135081] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23555310995135081, 0.20361832274065383] ***
*** starting iteration: 2; err: [Inf, 0.23555310995135081, 0.20361832274065383] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23555310995135081, 0.20361832274065383, 0.20045945098179616] ***
*** starting iteration: 3; err: [Inf, 0.23555310995135081, 0.20361832274065383, 0.20045945098179616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23555310995135081, 0.20361832274065383, 0.20045945098179616, 0.1996008592184404] ***
*** finished computation of 7 references, err: [Inf, 0.23555310995135081, 0.20361832274065383, 0.20045945098179616, 0.1996008592184404] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [37, 39, 0]]
** centroid: 1, normalized-entropy: 0.9995003941817588, [(1, 37), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [65, 46, 0]]
** centroid: 2, normalized-entropy: 0.9787603904449517, [(1, 65), (2, 46)]
*** center 3: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 105, 24]]
** centroid: 4, normalized-entropy: 0.6931274153282881, [(2, 105), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [76, 14, 0]]
** centroid: 5, normalized-entropy: 0.6235702082127973, [(1, 76), (2, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [62, 46, 0]]
** centroid: 7, normalized-entropy: 0.9841095278800533, [(1, 62), (2, 46)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24497437410456627] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24497437410456627, 0.19271109655263485] ***
*** starting iteration: 2; err: [Inf, 0.24497437410456627, 0.19271109655263485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24497437410456627, 0.19271109655263485, 0.18909817987304556] ***
*** starting iteration: 3; err: [Inf, 0.24497437410456627, 0.19271109655263485, 0.18909817987304556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24497437410456627, 0.19271109655263485, 0.18909817987304556, 0.18862527140033622] ***
*** finished computation of 7 references, err: [Inf, 0.24497437410456627, 0.19271109655263485, 0.18909817987304556, 0.18862527140033622] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [32, 76, 0]]
** centroid: 1, normalized-entropy: 0.876716288999464, [(1, 32), (2, 76)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 70, 22]]
** centroid: 2, normalized-entropy: 0.7935912300117066, [(2, 70), (3, 22)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 84, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [91, 1, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [68, 32, 0]]
** centroid: 7, normalized-entropy: 0.9043814577244941, [(1, 68), (2, 32)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2297522893417403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2297522893417403, 0.1713247549232073] ***
*** starting iteration: 2; err: [Inf, 0.2297522893417403, 0.1713247549232073] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2297522893417403, 0.1713247549232073, 0.1600401497728474] ***
*** starting iteration: 3; err: [Inf, 0.2297522893417403, 0.1713247549232073, 0.1600401497728474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2297522893417403, 0.1713247549232073, 0.1600401497728474, 0.1549453840356085] ***
*** finished computation of 7 references, err: [Inf, 0.2297522893417403, 0.1713247549232073, 0.1600401497728474, 0.1549453840356085] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [63, 11, 0]]
** centroid: 1, normalized-entropy: 0.6064481901491525, [(1, 63), (2, 11)]
*** center 2: selecting labels [1] (freq >= 1) [from [118, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [105, 27, 0]]
** centroid: 3, normalized-entropy: 0.7309263775906009, [(1, 105), (2, 27)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [36, 54, 0]]
** centroid: 4, normalized-entropy: 0.9709505944546688, [(1, 36), (2, 54)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 84, 30]]
** centroid: 5, normalized-entropy: 0.8314743880097292, [(2, 84), (3, 30)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 75, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.196118862781467] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.196118862781467, 0.16315906288257956] ***
*** starting iteration: 2; err: [Inf, 0.196118862781467, 0.16315906288257956] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.196118862781467, 0.16315906288257956, 0.15480524616670618] ***
*** starting iteration: 3; err: [Inf, 0.196118862781467, 0.16315906288257956, 0.15480524616670618] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.196118862781467, 0.16315906288257956, 0.15480524616670618, 0.15154400984498337] ***
*** finished computation of 7 references, err: [Inf, 0.196118862781467, 0.16315906288257956, 0.15480524616670618, 0.15154400984498337] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 106, 24]]
** centroid: 1, normalized-entropy: 0.6900703653284017, [(2, 106), (3, 24)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 51, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [69, 43, 0]]
** centroid: 4, normalized-entropy: 0.960769458040784, [(1, 69), (2, 43)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [96, 7, 0]]
** centroid: 5, normalized-entropy: 0.35826863860424546, [(1, 96), (2, 7)]
*** center 6: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [43, 43, 0]]
** centroid: 7, normalized-entropy: 1.0, [(1, 43), (2, 43)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18841956905612925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18841956905612925, 0.1591188329016452] ***
*** starting iteration: 2; err: [Inf, 0.18841956905612925, 0.1591188329016452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18841956905612925, 0.1591188329016452, 0.15514928034075287] ***
*** starting iteration: 3; err: [Inf, 0.18841956905612925, 0.1591188329016452, 0.15514928034075287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18841956905612925, 0.1591188329016452, 0.15514928034075287, 0.1532452759700178] ***
*** finished computation of 7 references, err: [Inf, 0.18841956905612925, 0.1591188329016452, 0.15514928034075287, 0.1532452759700178] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 98, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [51, 34, 0]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(1, 51), (2, 34)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 44, 22]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(2, 44), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [54, 31, 0]]
** centroid: 5, normalized-entropy: 0.9465202215633438, [(1, 54), (2, 31)]
*** center 6: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [87, 56, 0]]
** centroid: 7, normalized-entropy: 0.9658296600366748, [(1, 87), (2, 56)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27080370642401436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27080370642401436, 0.20605003479141015] ***
*** finished computation of 7 references, err: [Inf, 0.27080370642401436, 0.20605003479141015] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [4, 83, 0]]
** centroid: 1, normalized-entropy: 0.2690553027246505, [(1, 4), (2, 83)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [110, 5, 0]]
** centroid: 2, normalized-entropy: 0.2580186686648155, [(1, 110), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 20, 17]]
** centroid: 3, normalized-entropy: 0.9952525494396791, [(2, 20), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [125, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [75, 50, 0]]
** centroid: 5, normalized-entropy: 0.9709505944546688, [(1, 75), (2, 50)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 65, 13]]
** centroid: 6, normalized-entropy: 0.6500224216483541, [(2, 65), (3, 13)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [71, 28, 0]]
** centroid: 7, normalized-entropy: 0.8592759806609698, [(1, 71), (2, 28)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2487991650308157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2487991650308157, 0.2017939595807193] ***
*** finished computation of 7 references, err: [Inf, 0.2487991650308157, 0.2017939595807193] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [19, 59, 0]]
** centroid: 1, normalized-entropy: 0.8009591077369054, [(1, 19), (2, 59)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [92, 11, 0]]
** centroid: 2, normalized-entropy: 0.4901757916273403, [(1, 92), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 53, 24]]
** centroid: 3, normalized-entropy: 0.8951127210954559, [(2, 53), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [79, 48, 0]]
** centroid: 4, normalized-entropy: 0.9565832762162081, [(1, 79), (2, 48)]
*** center 5: selecting labels [1] (freq >= 2) [from [141, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [62, 8, 0]]
** centroid: 6, normalized-entropy: 0.5127091420308771, [(1, 62), (2, 8)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 71, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.32944717488113395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32944717488113395, 0.20744029074667142] ***
*** finished computation of 7 references, err: [Inf, 0.32944717488113395, 0.20744029074667142] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [146, 17, 0]]
** centroid: 1, normalized-entropy: 0.4824627928952599, [(1, 146), (2, 17)]
*** center 2: selecting labels [2] (freq >= 2) [from [1, 63, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 123, 22]]
** centroid: 3, normalized-entropy: 0.6141381950718515, [(2, 123), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [73, 11, 0]]
** centroid: 5, normalized-entropy: 0.5600443203590992, [(1, 73), (2, 11)]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 49, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3085502432855042] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3085502432855042, 0.24458116580740558] ***
*** starting iteration: 2; err: [Inf, 0.3085502432855042, 0.24458116580740558] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3085502432855042, 0.24458116580740558, 0.2363588823908912] ***
*** starting iteration: 3; err: [Inf, 0.3085502432855042, 0.24458116580740558, 0.2363588823908912] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3085502432855042, 0.24458116580740558, 0.2363588823908912, 0.2347454960086011] ***
*** starting iteration: 4; err: [Inf, 0.3085502432855042, 0.24458116580740558, 0.2363588823908912, 0.2347454960086011] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3085502432855042, 0.24458116580740558, 0.2363588823908912, 0.2347454960086011, 0.23481803127863743] ***
*** finished computation of 3 references, err: [Inf, 0.3085502432855042, 0.24458116580740558, 0.2363588823908912, 0.2347454960086011, 0.23481803127863743] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [255, 27, 0]]
** centroid: 1, normalized-entropy: 0.45535954758523894, [(1, 255), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [130, 50, 0]]
** centroid: 2, normalized-entropy: 0.8524051786494784, [(1, 130), (2, 50)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 174, 30]]
** centroid: 3, normalized-entropy: 0.6024308020404452, [(2, 174), (3, 30)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4053410878209495] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4053410878209495, 0.23908423117345906] ***
*** starting iteration: 2; err: [Inf, 0.4053410878209495, 0.23908423117345906] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4053410878209495, 0.23908423117345906, 0.23833646084917806] ***
*** finished computation of 3 references, err: [Inf, 0.4053410878209495, 0.23908423117345906, 0.23833646084917806] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [62, 172, 24]]
** centroid: 1, normalized-entropy: 0.759022733066453, [(1, 62), (2, 172), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [230, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [101, 78, 0]]
** centroid: 3, normalized-entropy: 0.9880574933023201, [(1, 101), (2, 78)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3503144620114873] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3503144620114873, 0.23412868323508298] ***
*** starting iteration: 2; err: [Inf, 0.3503144620114873, 0.23412868323508298] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3503144620114873, 0.23412868323508298, 0.2332923785619985] ***
*** finished computation of 3 references, err: [Inf, 0.3503144620114873, 0.23412868323508298, 0.2332923785619985] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [257, 22, 0]]
** centroid: 1, normalized-entropy: 0.3981248790232835, [(1, 257), (2, 22)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 182, 22]]
** centroid: 2, normalized-entropy: 0.493375733509813, [(2, 182), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [125, 59, 0]]
** centroid: 3, normalized-entropy: 0.905089263148809, [(1, 125), (2, 59)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2793972500160829] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2793972500160829, 0.2217858146558664] ***
*** starting iteration: 2; err: [Inf, 0.2793972500160829, 0.2217858146558664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2793972500160829, 0.2217858146558664, 0.20196764979807957] ***
*** starting iteration: 3; err: [Inf, 0.2793972500160829, 0.2217858146558664, 0.20196764979807957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2793972500160829, 0.2217858146558664, 0.20196764979807957, 0.195824516374987] ***
*** starting iteration: 4; err: [Inf, 0.2793972500160829, 0.2217858146558664, 0.20196764979807957, 0.195824516374987] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2793972500160829, 0.2217858146558664, 0.20196764979807957, 0.195824516374987, 0.19330666138575198] ***
*** starting iteration: 5; err: [Inf, 0.2793972500160829, 0.2217858146558664, 0.20196764979807957, 0.195824516374987, 0.19330666138575198] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2793972500160829, 0.2217858146558664, 0.20196764979807957, 0.195824516374987, 0.19330666138575198, 0.19239461751844925] ***
*** finished computation of 7 references, err: [Inf, 0.2793972500160829, 0.2217858146558664, 0.20196764979807957, 0.195824516374987, 0.19330666138575198, 0.19239461751844925] ***
*** center 1: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 58, 30]]
** centroid: 3, normalized-entropy: 0.9256859869821296, [(2, 58), (3, 30)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 73, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [96, 34, 0]]
** centroid: 5, normalized-entropy: 0.829059069399666, [(1, 96), (2, 34)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [27, 65, 0]]
** centroid: 6, normalized-entropy: 0.8731720603476306, [(1, 27), (2, 65)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [71, 21, 0]]
** centroid: 7, normalized-entropy: 0.7749672673267259, [(1, 71), (2, 21)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.37870489078053066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37870489078053066, 0.26629321247610127] ***
*** starting iteration: 2; err: [Inf, 0.37870489078053066, 0.26629321247610127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37870489078053066, 0.26629321247610127, 0.23084919364924641] ***
*** starting iteration: 3; err: [Inf, 0.37870489078053066, 0.26629321247610127, 0.23084919364924641] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37870489078053066, 0.26629321247610127, 0.23084919364924641, 0.21189046368795983] ***
*** starting iteration: 4; err: [Inf, 0.37870489078053066, 0.26629321247610127, 0.23084919364924641, 0.21189046368795983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37870489078053066, 0.26629321247610127, 0.23084919364924641, 0.21189046368795983, 0.2037101007105763] ***
*** starting iteration: 5; err: [Inf, 0.37870489078053066, 0.26629321247610127, 0.23084919364924641, 0.21189046368795983, 0.2037101007105763] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37870489078053066, 0.26629321247610127, 0.23084919364924641, 0.21189046368795983, 0.2037101007105763, 0.2002572856768072] ***
*** starting iteration: 6; err: [Inf, 0.37870489078053066, 0.26629321247610127, 0.23084919364924641, 0.21189046368795983, 0.2037101007105763, 0.2002572856768072] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37870489078053066, 0.26629321247610127, 0.23084919364924641, 0.21189046368795983, 0.2037101007105763, 0.2002572856768072, 0.19736320327833362] ***
*** starting iteration: 7; err: [Inf, 0.37870489078053066, 0.26629321247610127, 0.23084919364924641, 0.21189046368795983, 0.2037101007105763, 0.2002572856768072, 0.19736320327833362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37870489078053066, 0.26629321247610127, 0.23084919364924641, 0.21189046368795983, 0.2037101007105763, 0.2002572856768072, 0.19736320327833362, 0.1952227530630956] ***
*** starting iteration: 8; err: [Inf, 0.37870489078053066, 0.26629321247610127, 0.23084919364924641, 0.21189046368795983, 0.2037101007105763, 0.2002572856768072, 0.19736320327833362, 0.1952227530630956] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37870489078053066, 0.26629321247610127, 0.23084919364924641, 0.21189046368795983, 0.2037101007105763, 0.2002572856768072, 0.19736320327833362, 0.1952227530630956, 0.19341401423912669] ***
*** starting iteration: 9; err: [Inf, 0.37870489078053066, 0.26629321247610127, 0.23084919364924641, 0.21189046368795983, 0.2037101007105763, 0.2002572856768072, 0.19736320327833362, 0.1952227530630956, 0.19341401423912669] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37870489078053066, 0.26629321247610127, 0.23084919364924641, 0.21189046368795983, 0.2037101007105763, 0.2002572856768072, 0.19736320327833362, 0.1952227530630956, 0.19341401423912669, 0.192105775662716] ***
*** starting iteration: 10; err: [Inf, 0.37870489078053066, 0.26629321247610127, 0.23084919364924641, 0.21189046368795983, 0.2037101007105763, 0.2002572856768072, 0.19736320327833362, 0.1952227530630956, 0.19341401423912669, 0.192105775662716] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37870489078053066, 0.26629321247610127, 0.23084919364924641, 0.21189046368795983, 0.2037101007105763, 0.2002572856768072, 0.19736320327833362, 0.1952227530630956, 0.19341401423912669, 0.192105775662716, 0.19164101593126578] ***
*** finished computation of 7 references, err: [Inf, 0.37870489078053066, 0.26629321247610127, 0.23084919364924641, 0.21189046368795983, 0.2037101007105763, 0.2002572856768072, 0.19736320327833362, 0.1952227530630956, 0.19341401423912669, 0.192105775662716, 0.19164101593126578] ***
*** center 1: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [117, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [15, 85, 0]]
** centroid: 3, normalized-entropy: 0.6098403047164005, [(1, 15), (2, 85)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [98, 6, 0]]
** centroid: 4, normalized-entropy: 0.3182152976832332, [(1, 98), (2, 6)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 99, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [72, 17, 0]]
** centroid: 6, normalized-entropy: 0.7035821005719904, [(1, 72), (2, 17)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 43, 24]]
** centroid: 7, normalized-entropy: 0.9411864371816836, [(2, 43), (3, 24)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24646527526936476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24646527526936476, 0.2080585186843058] ***
*** starting iteration: 2; err: [Inf, 0.24646527526936476, 0.2080585186843058] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24646527526936476, 0.2080585186843058, 0.19787499772571865] ***
*** starting iteration: 3; err: [Inf, 0.24646527526936476, 0.2080585186843058, 0.19787499772571865] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24646527526936476, 0.2080585186843058, 0.19787499772571865, 0.19323098493636637] ***
*** starting iteration: 4; err: [Inf, 0.24646527526936476, 0.2080585186843058, 0.19787499772571865, 0.19323098493636637] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24646527526936476, 0.2080585186843058, 0.19787499772571865, 0.19323098493636637, 0.19132932177235162] ***
*** starting iteration: 5; err: [Inf, 0.24646527526936476, 0.2080585186843058, 0.19787499772571865, 0.19323098493636637, 0.19132932177235162] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24646527526936476, 0.2080585186843058, 0.19787499772571865, 0.19323098493636637, 0.19132932177235162, 0.19046844718517034] ***
*** finished computation of 7 references, err: [Inf, 0.24646527526936476, 0.2080585186843058, 0.19787499772571865, 0.19323098493636637, 0.19132932177235162, 0.19046844718517034] ***
*** center 1: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [9, 82, 0]]
** centroid: 2, normalized-entropy: 0.4655024490815131, [(1, 9), (2, 82)]
*** center 3: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 114, 22]]
** centroid: 4, normalized-entropy: 0.6385146263620961, [(2, 114), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [54, 35, 0]]
** centroid: 5, normalized-entropy: 0.9668701645630143, [(1, 54), (2, 35)]
*** center 6: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [84, 32, 0]]
** centroid: 7, normalized-entropy: 0.8497511372532974, [(1, 84), (2, 32)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19507479381117573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19507479381117573, 0.15048026299249526] ***
*** finished computation of 7 references, err: [Inf, 0.19507479381117573, 0.15048026299249526] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [15, 128, 0]]
** centroid: 1, normalized-entropy: 0.48432337220406935, [(1, 15), (2, 128)]
*** center 2: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 38, 0]]
** centroid: 3, normalized-entropy: 0.968461008760162, [(1, 58), (2, 38)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [65, 17, 0]]
** centroid: 4, normalized-entropy: 0.7363230272021651, [(1, 65), (2, 17)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 60, 30]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(2, 60), (3, 30)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [93, 8, 0]]
** centroid: 6, normalized-entropy: 0.39938208242459744, [(1, 93), (2, 8)]
*** center 7: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
finished with 12 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 11)
[0.9510228791665917, 0.9439799080517642, 0.9310088531645418, 0.918013822205439, 0.9139828451205697, 0.9050187912463361, 0.903001804199409, 0.8840337343331356, 0.8839947732163301, 0.8759927592262922, 0.7930085774397151]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 1) => 0.9510228791665917
finished with 12
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.23709120415500715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23709120415500715, 0.1979415274732788] ***
*** starting iteration: 2; err: [Inf, 0.23709120415500715, 0.1979415274732788] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23709120415500715, 0.1979415274732788, 0.19446554047254114] ***
*** starting iteration: 3; err: [Inf, 0.23709120415500715, 0.1979415274732788, 0.19446554047254114] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23709120415500715, 0.1979415274732788, 0.19446554047254114, 0.19220636990592554] ***
*** finished computation of 7 references, err: [Inf, 0.23709120415500715, 0.1979415274732788, 0.19446554047254114, 0.19220636990592554] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 67, 30]]
** centroid: 1, normalized-entropy: 0.892338681064176, [(2, 67), (3, 30)]
*** center 2: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [32, 63, 0]]
** centroid: 3, normalized-entropy: 0.9217647116941611, [(1, 32), (2, 63)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [93, 6, 0]]
** centroid: 4, normalized-entropy: 0.32984607020714635, [(1, 93), (2, 6)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 108, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [97, 7, 0]]
** centroid: 6, normalized-entropy: 0.3557951975011439, [(1, 97), (2, 7)]
*** center 7: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2553028581074734] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2553028581074734, 0.20842169930060944] ***
*** starting iteration: 2; err: [Inf, 0.2553028581074734, 0.20842169930060944] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2553028581074734, 0.20842169930060944, 0.20141073884623967] ***
*** starting iteration: 3; err: [Inf, 0.2553028581074734, 0.20842169930060944, 0.20141073884623967] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2553028581074734, 0.20842169930060944, 0.20141073884623967, 0.1974062837906059] ***
*** finished computation of 7 references, err: [Inf, 0.2553028581074734, 0.20842169930060944, 0.20141073884623967, 0.1974062837906059] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [79, 15, 0]]
** centroid: 1, normalized-entropy: 0.6332905746550958, [(1, 79), (2, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [128, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [57, 39, 0]]
** centroid: 3, normalized-entropy: 0.9744894033980525, [(1, 57), (2, 39)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [1, 68, 0]]
** centroid: 4, normalized-entropy: 0.10928571467638523, [(1, 1), (2, 68)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [126, 9, 0]]
** centroid: 5, normalized-entropy: 0.3533593350214213, [(1, 126), (2, 9)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 36, 24]]
** centroid: 6, normalized-entropy: 0.9709505944546688, [(2, 36), (3, 24)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 83, 0]]
** centroid: 7, normalized-entropy: 0.16082302082246946, [(1, 2), (2, 83)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23277757928680176] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23277757928680176, 0.20177259031966652] ***
*** starting iteration: 2; err: [Inf, 0.23277757928680176, 0.20177259031966652] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23277757928680176, 0.20177259031966652, 0.1968608750170027] ***
*** starting iteration: 3; err: [Inf, 0.23277757928680176, 0.20177259031966652, 0.1968608750170027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23277757928680176, 0.20177259031966652, 0.1968608750170027, 0.19421953888054283] ***
*** finished computation of 7 references, err: [Inf, 0.23277757928680176, 0.20177259031966652, 0.1968608750170027, 0.19421953888054283] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [50, 31, 0]]
** centroid: 1, normalized-entropy: 0.9599377175669783, [(1, 50), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [10, 67, 0]]
** centroid: 2, normalized-entropy: 0.557081908103416, [(1, 10), (2, 67)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [112, 48, 0]]
** centroid: 3, normalized-entropy: 0.8812908992306927, [(1, 112), (2, 48)]
*** center 4: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 117, 22]]
** centroid: 5, normalized-entropy: 0.6301628871027961, [(2, 117), (3, 22)]
*** center 6: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 12)
[0.9510228791665917, 0.9439799080517642, 0.9399818980657303, 0.9310088531645418, 0.918013822205439, 0.9139828451205697, 0.9050187912463361, 0.903001804199409, 0.8840337343331356, 0.8839947732163301, 0.8759927592262922, 0.7930085774397151]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 1) => 0.9510228791665917
finished with 12
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9510228791665917, 0.9439799080517642, 0.9399818980657303, 0.9310088531645418, 0.918013822205439, 0.9139828451205697, 0.9050187912463361, 0.903001804199409, 0.8840337343331356, 0.8839947732163301, 0.8759927592262922, 0.7930085774397151]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 1) => 0.9510228791665917
finished with 13
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.40874469489301063] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.40874469489301063, 0.22760808881925973] ***
*** starting iteration: 2; err: [Inf, 0.40874469489301063, 0.22760808881925973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.40874469489301063, 0.22760808881925973, 0.20131626447198447] ***
*** starting iteration: 3; err: [Inf, 0.40874469489301063, 0.22760808881925973, 0.20131626447198447] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.40874469489301063, 0.22760808881925973, 0.20131626447198447, 0.19601939240674693] ***
*** starting iteration: 4; err: [Inf, 0.40874469489301063, 0.22760808881925973, 0.20131626447198447, 0.19601939240674693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.40874469489301063, 0.22760808881925973, 0.20131626447198447, 0.19601939240674693, 0.19395439810044057] ***
*** starting iteration: 5; err: [Inf, 0.40874469489301063, 0.22760808881925973, 0.20131626447198447, 0.19601939240674693, 0.19395439810044057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.40874469489301063, 0.22760808881925973, 0.20131626447198447, 0.19601939240674693, 0.19395439810044057, 0.19223802575531104] ***
*** starting iteration: 6; err: [Inf, 0.40874469489301063, 0.22760808881925973, 0.20131626447198447, 0.19601939240674693, 0.19395439810044057, 0.19223802575531104] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.40874469489301063, 0.22760808881925973, 0.20131626447198447, 0.19601939240674693, 0.19395439810044057, 0.19223802575531104, 0.19103230768290289] ***
*** starting iteration: 7; err: [Inf, 0.40874469489301063, 0.22760808881925973, 0.20131626447198447, 0.19601939240674693, 0.19395439810044057, 0.19223802575531104, 0.19103230768290289] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.40874469489301063, 0.22760808881925973, 0.20131626447198447, 0.19601939240674693, 0.19395439810044057, 0.19223802575531104, 0.19103230768290289, 0.1903566921338881] ***
*** finished computation of 7 references, err: [Inf, 0.40874469489301063, 0.22760808881925973, 0.20131626447198447, 0.19601939240674693, 0.19395439810044057, 0.19223802575531104, 0.19103230768290289, 0.1903566921338881] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [9, 91, 0]]
** centroid: 1, normalized-entropy: 0.4364698170641031, [(1, 9), (2, 91)]
*** center 2: selecting labels [1] (freq >= 2) [from [112, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 50, 30]]
** centroid: 4, normalized-entropy: 0.954434002924965, [(2, 50), (3, 30)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 22, 0]]
** centroid: 5, normalized-entropy: 0.8067955503968327, [(1, 67), (2, 22)]
*** center 6: selecting labels [1] (freq >= 2) [from [90, 1, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 87, 0]]
** centroid: 7, normalized-entropy: 0.2108423003185322, [(1, 3), (2, 87)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23669936622435722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23669936622435722, 0.19966044535824115] ***
*** starting iteration: 2; err: [Inf, 0.23669936622435722, 0.19966044535824115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23669936622435722, 0.19966044535824115, 0.19691824524438586] ***
*** starting iteration: 3; err: [Inf, 0.23669936622435722, 0.19966044535824115, 0.19691824524438586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23669936622435722, 0.19966044535824115, 0.19691824524438586, 0.19611495135511192] ***
*** finished computation of 7 references, err: [Inf, 0.23669936622435722, 0.19966044535824115, 0.19691824524438586, 0.19611495135511192] ***
*** center 1: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [87, 10, 0]]
** centroid: 2, normalized-entropy: 0.478723511385963, [(1, 87), (2, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 95, 0]]
** centroid: 5, normalized-entropy: 0.7846984744986523, [(1, 29), (2, 95)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 83, 24]]
** centroid: 6, normalized-entropy: 0.7679401376244881, [(2, 83), (3, 24)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [59, 62, 0]]
** centroid: 7, normalized-entropy: 0.9995565335032316, [(1, 59), (2, 62)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28637131447715314] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28637131447715314, 0.19539878278833883] ***
*** starting iteration: 2; err: [Inf, 0.28637131447715314, 0.19539878278833883] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28637131447715314, 0.19539878278833883, 0.19255402032006672] ***
*** starting iteration: 3; err: [Inf, 0.28637131447715314, 0.19539878278833883, 0.19255402032006672] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28637131447715314, 0.19539878278833883, 0.19255402032006672, 0.19105588973707882] ***
*** starting iteration: 4; err: [Inf, 0.28637131447715314, 0.19539878278833883, 0.19255402032006672, 0.19105588973707882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28637131447715314, 0.19539878278833883, 0.19255402032006672, 0.19105588973707882, 0.18985161580832333] ***
*** starting iteration: 5; err: [Inf, 0.28637131447715314, 0.19539878278833883, 0.19255402032006672, 0.19105588973707882, 0.18985161580832333] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28637131447715314, 0.19539878278833883, 0.19255402032006672, 0.19105588973707882, 0.18985161580832333, 0.18921647634709077] ***
*** finished computation of 7 references, err: [Inf, 0.28637131447715314, 0.19539878278833883, 0.19255402032006672, 0.19105588973707882, 0.18985161580832333, 0.18921647634709077] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 101, 0]]
** centroid: 1, normalized-entropy: 0.27425064105029284, [(1, 5), (2, 101)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [71, 53, 0]]
** centroid: 2, normalized-entropy: 0.9847460718652463, [(1, 71), (2, 53)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 101, 22]]
** centroid: 3, normalized-entropy: 0.6775807218599569, [(2, 101), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [83, 2, 0]]
** centroid: 5, normalized-entropy: 0.16082302082246946, [(1, 83), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [69, 2, 0]]
** centroid: 6, normalized-entropy: 0.18512476010054582, [(1, 69), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [83, 4, 0]]
** centroid: 7, normalized-entropy: 0.2690553027246505, [(1, 83), (2, 4)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.9510228791665917, 0.9439799080517642, 0.9399818980657303, 0.9310088531645418, 0.918013822205439, 0.9139828451205697, 0.9089928251604898, 0.9050187912463361, 0.903001804199409, 0.8840337343331356, 0.8839947732163301, 0.8759927592262922, 0.7930085774397151]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 1) => 0.9510228791665917
finished with 13
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9510228791665917, 0.9439799080517642, 0.9399818980657303, 0.9310088531645418, 0.918013822205439, 0.9139828451205697, 0.9089928251604898, 0.9050187912463361, 0.903001804199409, 0.8840337343331356, 0.8839947732163301, 0.8759927592262922, 0.7930085774397151]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 1) => 0.9510228791665917
finished with 14
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.23357916703500758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23357916703500758, 0.19406205488332565] ***
*** finished computation of 7 references, err: [Inf, 0.23357916703500758, 0.19406205488332565] ***
*** center 1: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [84, 2, 0]]
** centroid: 2, normalized-entropy: 0.15935006268563429, [(1, 84), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 50, 24]]
** centroid: 3, normalized-entropy: 0.9090221560878149, [(2, 50), (3, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 61, 0]]
** centroid: 5, normalized-entropy: 0.9950600468156066, [(1, 72), (2, 61)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [14, 70, 0]]
** centroid: 6, normalized-entropy: 0.6500224216483541, [(1, 14), (2, 70)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23898784387940625] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23898784387940625, 0.19523710942709702] ***
*** finished computation of 7 references, err: [Inf, 0.23898784387940625, 0.19523710942709702] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 101, 7]]
** centroid: 1, normalized-entropy: 0.34626857427148255, [(2, 101), (3, 7)]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 22, 0]]
** centroid: 3, normalized-entropy: 0.8437582063121657, [(1, 59), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [92, 21, 0]]
** centroid: 4, normalized-entropy: 0.6926889992682925, [(1, 92), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [82, 42, 0]]
** centroid: 5, normalized-entropy: 0.9235785996175947, [(1, 82), (2, 42)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 65, 23]]
** centroid: 6, normalized-entropy: 0.828797154590015, [(2, 65), (3, 23)]
*** center 7: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23937954757058214] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23937954757058214, 0.19676618167370938] ***
*** finished computation of 7 references, err: [Inf, 0.23937954757058214, 0.19676618167370938] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [76, 52, 0]]
** centroid: 1, normalized-entropy: 0.9744894033980525, [(1, 76), (2, 52)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 12, 0]]
** centroid: 2, normalized-entropy: 0.6665783579949205, [(1, 57), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 95, 22]]
** centroid: 3, normalized-entropy: 0.6973409725623739, [(2, 95), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 89, 0]]
** centroid: 5, normalized-entropy: 0.7183098216110975, [(1, 22), (2, 89)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [55, 15, 0]]
** centroid: 6, normalized-entropy: 0.7495952572594798, [(1, 55), (2, 15)]
*** center 7: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
finished with 12 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9510228791665917, 0.9439799080517642, 0.9399818980657303, 0.9310088531645418, 0.918013822205439, 0.9139828451205697, 0.912010813208418, 0.9089928251604898, 0.9050187912463361, 0.903001804199409, 0.8840337343331356, 0.8839947732163301, 0.8759927592262922, 0.7930085774397151]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 1) => 0.9510228791665917
finished with 14
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9510228791665917, 0.9439799080517642, 0.9399818980657303, 0.9310088531645418, 0.918013822205439, 0.9139828451205697, 0.912010813208418, 0.9089928251604898, 0.9050187912463361, 0.903001804199409, 0.8840337343331356, 0.8839947732163301, 0.8759927592262922, 0.7930085774397151]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 1) => 0.9510228791665917
finished with 14
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9510228791665917, 0.9439799080517642, 0.9399818980657303, 0.9310088531645418, 0.918013822205439, 0.9139828451205697, 0.912010813208418, 0.9089928251604898, 0.9050187912463361, 0.903001804199409, 0.8840337343331356, 0.8839947732163301, 0.8759927592262922, 0.7930085774397151]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 1) => 0.9510228791665917
finished with 15
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.23663681968361386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23663681968361386, 0.17145426301201722] ***
*** finished computation of 7 references, err: [Inf, 0.23663681968361386, 0.17145426301201722] ***
*** center 1: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [1, 81, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [165, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 63, 30]]
** centroid: 4, normalized-entropy: 0.9071657675730821, [(2, 63), (3, 30)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [88, 70, 0]]
** centroid: 5, normalized-entropy: 0.9906174973781801, [(1, 88), (2, 70)]
*** center 6: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 37, 0]]
** centroid: 7, normalized-entropy: 0.5266170655714281, [(1, 5), (2, 37)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22459613527080555] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22459613527080555, 0.18562762149800915] ***
*** finished computation of 7 references, err: [Inf, 0.22459613527080555, 0.18562762149800915] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [34, 43, 0]]
** centroid: 1, normalized-entropy: 0.9901226308935799, [(1, 34), (2, 43)]
*** center 2: selecting labels [1] (freq >= 2) [from [181, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [99, 22, 0]]
** centroid: 3, normalized-entropy: 0.6840384356390419, [(1, 99), (2, 22)]
*** center 4: selecting labels [1, 2, 3] (freq >= 2) [from [2, 77, 5]]
** centroid: 4, normalized-entropy: 0.3064700673548049, [(1, 2), (2, 77), (3, 5)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 63, 19]]
** centroid: 5, normalized-entropy: 0.7809756883263416, [(2, 63), (3, 19)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [77, 12, 0]]
** centroid: 6, normalized-entropy: 0.5705411428522262, [(1, 77), (2, 12)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 33, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22236850446388906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22236850446388906, 0.16424883634265305] ***
*** finished computation of 7 references, err: [Inf, 0.22236850446388906, 0.16424883634265305] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [36, 27, 0]]
** centroid: 1, normalized-entropy: 0.9852281360342514, [(1, 36), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [74, 32, 0]]
** centroid: 2, normalized-entropy: 0.8835850861052531, [(1, 74), (2, 32)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 79, 10]]
** centroid: 3, normalized-entropy: 0.5069923067544342, [(2, 79), (3, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [71, 71, 0]]
** centroid: 4, normalized-entropy: 1.0, [(1, 71), (2, 71)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [116, 3, 0]]
** centroid: 5, normalized-entropy: 0.16977000753515514, [(1, 116), (2, 3)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 51, 12]]
** centroid: 6, normalized-entropy: 0.7024665512903904, [(2, 51), (3, 12)]
*** center 7: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.20262810404598713] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20262810404598713, 0.16118558639194816] ***
*** starting iteration: 2; err: [Inf, 0.20262810404598713, 0.16118558639194816] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20262810404598713, 0.16118558639194816, 0.15570796026475728] ***
*** starting iteration: 3; err: [Inf, 0.20262810404598713, 0.16118558639194816, 0.15570796026475728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20262810404598713, 0.16118558639194816, 0.15570796026475728, 0.15339236315584276] ***
*** finished computation of 7 references, err: [Inf, 0.20262810404598713, 0.16118558639194816, 0.15570796026475728, 0.15339236315584276] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 101, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [221, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [35, 105, 0]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(1, 35), (2, 105)]
*** center 4: selecting labels [1] (freq >= 1) [from [127, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 68, 38]]
** centroid: 5, normalized-entropy: 0.9414231081869789, [(2, 68), (3, 38)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [178, 15, 0]]
** centroid: 6, normalized-entropy: 0.3940948111222434, [(1, 178), (2, 15)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [19, 93, 0]]
** centroid: 7, normalized-entropy: 0.6568871346605055, [(1, 19), (2, 93)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2141774086020887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2141774086020887, 0.17748091798834503] ***
*** starting iteration: 2; err: [Inf, 0.2141774086020887, 0.17748091798834503] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2141774086020887, 0.17748091798834503, 0.16569118327461183] ***
*** starting iteration: 3; err: [Inf, 0.2141774086020887, 0.17748091798834503, 0.16569118327461183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2141774086020887, 0.17748091798834503, 0.16569118327461183, 0.16209204563591628] ***
*** finished computation of 7 references, err: [Inf, 0.2141774086020887, 0.17748091798834503, 0.16569118327461183, 0.16209204563591628] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [1, 69, 0]]
** centroid: 1, normalized-entropy: 0.10802319526362848, [(1, 1), (2, 69)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 88, 19]]
** centroid: 2, normalized-entropy: 0.6747323584057238, [(2, 88), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [85, 31, 0]]
** centroid: 3, normalized-entropy: 0.8374782779405223, [(1, 85), (2, 31)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [69, 2, 0]]
** centroid: 4, normalized-entropy: 0.18512476010054582, [(1, 69), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [29, 3, 0]]
** centroid: 5, normalized-entropy: 0.44886448872302936, [(1, 29), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [39, 4, 0]]
** centroid: 6, normalized-entropy: 0.446481346896803, [(1, 39), (2, 4)]
*** center 7: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20329900894686578] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20329900894686578, 0.16832428197190166] ***
*** starting iteration: 2; err: [Inf, 0.20329900894686578, 0.16832428197190166] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20329900894686578, 0.16832428197190166, 0.16441548047587276] ***
*** starting iteration: 3; err: [Inf, 0.20329900894686578, 0.16832428197190166, 0.16441548047587276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20329900894686578, 0.16832428197190166, 0.16441548047587276, 0.16157611767947674] ***
*** finished computation of 7 references, err: [Inf, 0.20329900894686578, 0.16832428197190166, 0.16441548047587276, 0.16157611767947674] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 28, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [20, 37, 0]]
** centroid: 3, normalized-entropy: 0.9348490242345946, [(1, 20), (2, 37)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [74, 1, 0]]
** centroid: 4, normalized-entropy: 0.10215803640865054, [(1, 74), (2, 1)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 28, 17]]
** centroid: 5, normalized-entropy: 0.9564574047992596, [(2, 28), (3, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [97, 2, 0]]
** centroid: 6, normalized-entropy: 0.14257333025989857, [(1, 97), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [10, 94, 0]]
** centroid: 7, normalized-entropy: 0.45668363153944286, [(1, 10), (2, 94)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28359596761129796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28359596761129796, 0.16934346830286084] ***
*** starting iteration: 2; err: [Inf, 0.28359596761129796, 0.16934346830286084] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28359596761129796, 0.16934346830286084, 0.15366706486977638] ***
*** starting iteration: 3; err: [Inf, 0.28359596761129796, 0.16934346830286084, 0.15366706486977638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28359596761129796, 0.16934346830286084, 0.15366706486977638, 0.14865606251731514] ***
*** finished computation of 7 references, err: [Inf, 0.28359596761129796, 0.16934346830286084, 0.15366706486977638, 0.14865606251731514] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [26, 57, 0]]
** centroid: 1, normalized-entropy: 0.8968928834064589, [(1, 26), (2, 57)]
*** center 2: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [53, 25, 0]]
** centroid: 4, normalized-entropy: 0.9049382594235603, [(1, 53), (2, 25)]
*** center 5: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [55, 36, 0]]
** centroid: 6, normalized-entropy: 0.9683211863989214, [(1, 55), (2, 36)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 77, 14]]
** centroid: 7, normalized-entropy: 0.6193821946787638, [(2, 77), (3, 14)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22149688760004937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22149688760004937, 0.17532369980122894] ***
*** starting iteration: 2; err: [Inf, 0.22149688760004937, 0.17532369980122894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22149688760004937, 0.17532369980122894, 0.1614460785118863] ***
*** starting iteration: 3; err: [Inf, 0.22149688760004937, 0.17532369980122894, 0.1614460785118863] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22149688760004937, 0.17532369980122894, 0.1614460785118863, 0.15601060346886517] ***
*** finished computation of 7 references, err: [Inf, 0.22149688760004937, 0.17532369980122894, 0.1614460785118863, 0.15601060346886517] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [85, 18, 0]]
** centroid: 1, normalized-entropy: 0.6684725699243225, [(1, 85), (2, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 81, 7]]
** centroid: 4, normalized-entropy: 0.40057554263664, [(2, 81), (3, 7)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 47, 16]]
** centroid: 5, normalized-entropy: 0.8175072881213616, [(2, 47), (3, 16)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [29, 13, 0]]
** centroid: 6, normalized-entropy: 0.8926230133850988, [(1, 29), (2, 13)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [47, 34, 0]]
** centroid: 7, normalized-entropy: 0.9813387358307915, [(1, 47), (2, 34)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2360158030539751] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2360158030539751, 0.1649096727836877] ***
*** starting iteration: 2; err: [Inf, 0.2360158030539751, 0.1649096727836877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2360158030539751, 0.1649096727836877, 0.15249403774458914] ***
*** starting iteration: 3; err: [Inf, 0.2360158030539751, 0.1649096727836877, 0.15249403774458914] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2360158030539751, 0.1649096727836877, 0.15249403774458914, 0.14944883104413748] ***
*** finished computation of 7 references, err: [Inf, 0.2360158030539751, 0.1649096727836877, 0.15249403774458914, 0.14944883104413748] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [18, 51, 0]]
** centroid: 1, normalized-entropy: 0.828055725379504, [(1, 18), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [55, 15, 0]]
** centroid: 2, normalized-entropy: 0.7495952572594798, [(1, 55), (2, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [58, 21, 0]]
** centroid: 3, normalized-entropy: 0.8354065254460503, [(1, 58), (2, 21)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 72, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 27, 21]]
** centroid: 5, normalized-entropy: 0.9886994082884974, [(2, 27), (3, 21)]
*** center 6: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2598454084089026] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2598454084089026, 0.16754574081674217] ***
*** starting iteration: 2; err: [Inf, 0.2598454084089026, 0.16754574081674217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2598454084089026, 0.16754574081674217, 0.1570988109447062] ***
*** starting iteration: 3; err: [Inf, 0.2598454084089026, 0.16754574081674217, 0.1570988109447062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2598454084089026, 0.16754574081674217, 0.1570988109447062, 0.15277003173343837] ***
*** finished computation of 7 references, err: [Inf, 0.2598454084089026, 0.16754574081674217, 0.1570988109447062, 0.15277003173343837] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [67, 28, 0]]
** centroid: 1, normalized-entropy: 0.8747617811911199, [(1, 67), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [46, 28, 0]]
** centroid: 2, normalized-entropy: 0.9568886656798214, [(1, 46), (2, 28)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 98, 22]]
** centroid: 3, normalized-entropy: 0.6873150928309273, [(2, 98), (3, 22)]
*** center 4: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [11, 41, 0]]
** centroid: 6, normalized-entropy: 0.7444131797881749, [(1, 11), (2, 41)]
*** center 7: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19372244029026478] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19372244029026478, 0.16421153273060918] ***
*** starting iteration: 2; err: [Inf, 0.19372244029026478, 0.16421153273060918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19372244029026478, 0.16421153273060918, 0.15178295596688987] ***
*** starting iteration: 3; err: [Inf, 0.19372244029026478, 0.16421153273060918, 0.15178295596688987] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19372244029026478, 0.16421153273060918, 0.15178295596688987, 0.14835153060220183] ***
*** finished computation of 7 references, err: [Inf, 0.19372244029026478, 0.16421153273060918, 0.15178295596688987, 0.14835153060220183] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [39, 35, 0]]
** centroid: 1, normalized-entropy: 0.9978913098356861, [(1, 39), (2, 35)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 14, 0]]
** centroid: 2, normalized-entropy: 0.7051819722888517, [(1, 59), (2, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [60, 20, 0]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(1, 60), (2, 20)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 60, 13]]
** centroid: 4, normalized-entropy: 0.6758635715876156, [(2, 60), (3, 13)]
*** center 5: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 55, 1]]
** centroid: 6, normalized-entropy: 0.12923377484588472, [(2, 55), (3, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18877100002160296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18877100002160296, 0.15951165511179716] ***
*** starting iteration: 2; err: [Inf, 0.18877100002160296, 0.15951165511179716] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18877100002160296, 0.15951165511179716, 0.15421182197798045] ***
*** starting iteration: 3; err: [Inf, 0.18877100002160296, 0.15951165511179716, 0.15421182197798045] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18877100002160296, 0.15951165511179716, 0.15421182197798045, 0.1508174668289721] ***
*** finished computation of 7 references, err: [Inf, 0.18877100002160296, 0.15951165511179716, 0.15421182197798045, 0.1508174668289721] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [62, 29, 0]]
** centroid: 1, normalized-entropy: 0.9029416720373132, [(1, 62), (2, 29)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 9, 0]]
** centroid: 2, normalized-entropy: 0.5638560041131417, [(1, 59), (2, 9)]
*** center 3: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 19, 20]]
** centroid: 4, normalized-entropy: 0.9995256892936492, [(2, 19), (3, 20)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 75, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 45, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [84, 16, 0]]
** centroid: 7, normalized-entropy: 0.634309554640566, [(1, 84), (2, 16)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20708418645150958] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20708418645150958, 0.16604607566818594] ***
*** starting iteration: 2; err: [Inf, 0.20708418645150958, 0.16604607566818594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20708418645150958, 0.16604607566818594, 0.15578353444114326] ***
*** starting iteration: 3; err: [Inf, 0.20708418645150958, 0.16604607566818594, 0.15578353444114326] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20708418645150958, 0.16604607566818594, 0.15578353444114326, 0.1525807984471321] ***
*** finished computation of 7 references, err: [Inf, 0.20708418645150958, 0.16604607566818594, 0.15578353444114326, 0.1525807984471321] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [24, 53, 0]]
** centroid: 1, normalized-entropy: 0.8951127210954559, [(1, 24), (2, 53)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [22, 63, 0]]
** centroid: 2, normalized-entropy: 0.8249658680139929, [(1, 22), (2, 63)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 65, 21]]
** centroid: 3, normalized-entropy: 0.8019325020834525, [(2, 65), (3, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [72, 6, 0]]
** centroid: 4, normalized-entropy: 0.3912435636292556, [(1, 72), (2, 6)]
*** center 5: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.32517475391365586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32517475391365586, 0.19007631838321687] ***
*** starting iteration: 2; err: [Inf, 0.32517475391365586, 0.19007631838321687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32517475391365586, 0.19007631838321687, 0.16436314465478064] ***
*** starting iteration: 3; err: [Inf, 0.32517475391365586, 0.19007631838321687, 0.16436314465478064] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32517475391365586, 0.19007631838321687, 0.16436314465478064, 0.1584868304282427] ***
*** finished computation of 7 references, err: [Inf, 0.32517475391365586, 0.19007631838321687, 0.16436314465478064, 0.1584868304282427] ***
*** center 1: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [54, 12, 0]]
** centroid: 2, normalized-entropy: 0.6840384356390419, [(1, 54), (2, 12)]
*** center 3: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 88, 22]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(2, 88), (3, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [39, 30, 0]]
** centroid: 6, normalized-entropy: 0.9876925088958032, [(1, 39), (2, 30)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [52, 57, 0]]
** centroid: 7, normalized-entropy: 0.9984816077977791, [(1, 52), (2, 57)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19062709014327264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19062709014327264, 0.15732352249324322] ***
*** starting iteration: 2; err: [Inf, 0.19062709014327264, 0.15732352249324322] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19062709014327264, 0.15732352249324322, 0.1537926858421415] ***
*** starting iteration: 3; err: [Inf, 0.19062709014327264, 0.15732352249324322, 0.1537926858421415] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19062709014327264, 0.15732352249324322, 0.1537926858421415, 0.15156315479800106] ***
*** finished computation of 7 references, err: [Inf, 0.19062709014327264, 0.15732352249324322, 0.1537926858421415, 0.15156315479800106] ***
*** center 1: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [66, 11, 0]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(1, 66), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [13, 58, 0]]
** centroid: 4, normalized-entropy: 0.6868088934028034, [(1, 13), (2, 58)]
*** center 5: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 51, 20]]
** centroid: 6, normalized-entropy: 0.8577435372751958, [(2, 51), (3, 20)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [6, 68, 0]]
** centroid: 7, normalized-entropy: 0.40597703847557104, [(1, 6), (2, 68)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22586650537513198] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22586650537513198, 0.16795060764811934] ***
*** starting iteration: 2; err: [Inf, 0.22586650537513198, 0.16795060764811934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22586650537513198, 0.16795060764811934, 0.156698460098356] ***
*** starting iteration: 3; err: [Inf, 0.22586650537513198, 0.16795060764811934, 0.156698460098356] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22586650537513198, 0.16795060764811934, 0.156698460098356, 0.15404717421717942] ***
*** finished computation of 7 references, err: [Inf, 0.22586650537513198, 0.16795060764811934, 0.156698460098356, 0.15404717421717942] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [70, 8, 0]]
** centroid: 1, normalized-entropy: 0.4770713062193298, [(1, 70), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [31, 45, 0]]
** centroid: 2, normalized-entropy: 0.9753817903274211, [(1, 31), (2, 45)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 87, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [75, 3, 0]]
** centroid: 4, normalized-entropy: 0.23519338181924157, [(1, 75), (2, 3)]
*** center 5: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [24, 35, 0]]
** centroid: 6, normalized-entropy: 0.9747785474909672, [(1, 24), (2, 35)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 19, 24]]
** centroid: 7, normalized-entropy: 0.9902246902198684, [(2, 19), (3, 24)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19190786403231322] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19190786403231322, 0.1588051355611533] ***
*** starting iteration: 2; err: [Inf, 0.19190786403231322, 0.1588051355611533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19190786403231322, 0.1588051355611533, 0.15609766526799648] ***
*** starting iteration: 3; err: [Inf, 0.19190786403231322, 0.1588051355611533, 0.15609766526799648] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19190786403231322, 0.1588051355611533, 0.15609766526799648, 0.15458185572363436] ***
*** finished computation of 7 references, err: [Inf, 0.19190786403231322, 0.1588051355611533, 0.15609766526799648, 0.15458185572363436] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 85, 11]]
** centroid: 1, normalized-entropy: 0.5135877363803757, [(2, 85), (3, 11)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [68, 8, 0]]
** centroid: 2, normalized-entropy: 0.48546076074591343, [(1, 68), (2, 8)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [1, 80, 0]]
** centroid: 3, normalized-entropy: 0.09597040299587173, [(1, 1), (2, 80)]
*** center 4: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [14, 25, 0]]
** centroid: 6, normalized-entropy: 0.9418285354475157, [(1, 14), (2, 25)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [66, 13, 0]]
** centroid: 7, normalized-entropy: 0.6451006442088483, [(1, 66), (2, 13)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20002755868807434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20002755868807434, 0.1693551123747602] ***
*** starting iteration: 2; err: [Inf, 0.20002755868807434, 0.1693551123747602] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20002755868807434, 0.1693551123747602, 0.16164382080733777] ***
*** starting iteration: 3; err: [Inf, 0.20002755868807434, 0.1693551123747602, 0.16164382080733777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20002755868807434, 0.1693551123747602, 0.16164382080733777, 0.15676553402282298] ***
*** finished computation of 7 references, err: [Inf, 0.20002755868807434, 0.1693551123747602, 0.16164382080733777, 0.15676553402282298] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [83, 37, 0]]
** centroid: 1, normalized-entropy: 0.8912402011913028, [(1, 83), (2, 37)]
*** center 2: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 53, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [20, 51, 0]]
** centroid: 4, normalized-entropy: 0.8577435372751958, [(1, 20), (2, 51)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 34, 17]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(2, 34), (3, 17)]
*** center 6: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [18, 29, 0]]
** centroid: 7, normalized-entropy: 0.9601186626422924, [(1, 18), (2, 29)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18320141225587577] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18320141225587577, 0.15705281200632454] ***
*** starting iteration: 2; err: [Inf, 0.18320141225587577, 0.15705281200632454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18320141225587577, 0.15705281200632454, 0.1553993220606353] ***
*** starting iteration: 3; err: [Inf, 0.18320141225587577, 0.15705281200632454, 0.1553993220606353] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18320141225587577, 0.15705281200632454, 0.1553993220606353, 0.15483234403829557] ***
*** finished computation of 7 references, err: [Inf, 0.18320141225587577, 0.15705281200632454, 0.1553993220606353, 0.15483234403829557] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [7, 47, 0]]
** centroid: 1, normalized-entropy: 0.5564215672884282, [(1, 7), (2, 47)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [88, 24, 0]]
** centroid: 2, normalized-entropy: 0.7495952572594798, [(1, 88), (2, 24)]
*** center 3: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 72, 17]]
** centroid: 4, normalized-entropy: 0.7035821005719904, [(2, 72), (3, 17)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 53, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [50, 1, 0]]
** centroid: 6, normalized-entropy: 0.13923299905509884, [(1, 50), (2, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17115776563622057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17115776563622057, 0.1520645773243159] ***
*** starting iteration: 2; err: [Inf, 0.17115776563622057, 0.1520645773243159] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17115776563622057, 0.1520645773243159, 0.14913696508295834] ***
*** starting iteration: 3; err: [Inf, 0.17115776563622057, 0.1520645773243159, 0.14913696508295834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17115776563622057, 0.1520645773243159, 0.14913696508295834, 0.14807214706065133] ***
*** finished computation of 7 references, err: [Inf, 0.17115776563622057, 0.1520645773243159, 0.14913696508295834, 0.14807214706065133] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [5, 63, 0]]
** centroid: 1, normalized-entropy: 0.378958787501346, [(1, 5), (2, 63)]
*** center 2: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [45, 1, 0]]
** centroid: 3, normalized-entropy: 0.1510969705171136, [(1, 45), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [76, 24, 0]]
** centroid: 4, normalized-entropy: 0.7950402793845225, [(1, 76), (2, 24)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 60, 16]]
** centroid: 5, normalized-entropy: 0.7424875695421234, [(2, 60), (3, 16)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [29, 37, 0]]
** centroid: 6, normalized-entropy: 0.9893755831922303, [(1, 29), (2, 37)]
*** center 7: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20234450443647803] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20234450443647803, 0.15119573493581265] ***
*** starting iteration: 2; err: [Inf, 0.20234450443647803, 0.15119573493581265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20234450443647803, 0.15119573493581265, 0.14620268875174225] ***
*** starting iteration: 3; err: [Inf, 0.20234450443647803, 0.15119573493581265, 0.14620268875174225] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20234450443647803, 0.15119573493581265, 0.14620268875174225, 0.14448928518872708] ***
*** finished computation of 7 references, err: [Inf, 0.20234450443647803, 0.15119573493581265, 0.14620268875174225, 0.14448928518872708] ***
*** center 1: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 88, 18]]
** centroid: 2, normalized-entropy: 0.6572729784684466, [(2, 88), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [65, 8, 0]]
** centroid: 3, normalized-entropy: 0.4986751363204345, [(1, 65), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [55, 32, 0]]
** centroid: 4, normalized-entropy: 0.9489804585630239, [(1, 55), (2, 32)]
*** center 5: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [17, 61, 0]]
** centroid: 6, normalized-entropy: 0.7564041945982506, [(1, 17), (2, 61)]
*** center 7: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17715534293092788] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17715534293092788, 0.15483145561022685] ***
*** starting iteration: 2; err: [Inf, 0.17715534293092788, 0.15483145561022685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17715534293092788, 0.15483145561022685, 0.15304109605401756] ***
*** starting iteration: 3; err: [Inf, 0.17715534293092788, 0.15483145561022685, 0.15304109605401756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17715534293092788, 0.15483145561022685, 0.15304109605401756, 0.15165505991317332] ***
*** finished computation of 7 references, err: [Inf, 0.17715534293092788, 0.15483145561022685, 0.15304109605401756, 0.15165505991317332] ***
*** center 1: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 19, 0]]
** centroid: 2, normalized-entropy: 0.8060914696192223, [(1, 58), (2, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [55, 15, 0]]
** centroid: 3, normalized-entropy: 0.7495952572594798, [(1, 55), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [67, 21, 0]]
** centroid: 4, normalized-entropy: 0.7927652363756529, [(1, 67), (2, 21)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 62, 18]]
** centroid: 5, normalized-entropy: 0.7691928290130138, [(2, 62), (3, 18)]
*** center 6: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 79, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17392568925768137] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17392568925768137, 0.14956686249747872] ***
*** starting iteration: 2; err: [Inf, 0.17392568925768137, 0.14956686249747872] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17392568925768137, 0.14956686249747872, 0.1477833290458657] ***
*** starting iteration: 3; err: [Inf, 0.17392568925768137, 0.14956686249747872, 0.1477833290458657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17392568925768137, 0.14956686249747872, 0.1477833290458657, 0.14696546477265657] ***
*** finished computation of 7 references, err: [Inf, 0.17392568925768137, 0.14956686249747872, 0.1477833290458657, 0.14696546477265657] ***
*** center 1: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [68, 7, 0]]
** centroid: 2, normalized-entropy: 0.44749925503686355, [(1, 68), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [64, 31, 0]]
** centroid: 3, normalized-entropy: 0.9111178649415465, [(1, 64), (2, 31)]
*** center 4: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 58, 18]]
** centroid: 5, normalized-entropy: 0.7897492536625221, [(2, 58), (3, 18)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [26, 55, 0]]
** centroid: 6, normalized-entropy: 0.9054522631867892, [(1, 26), (2, 55)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 49, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.249066106476821] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.249066106476821, 0.17845375388022514] ***
*** starting iteration: 2; err: [Inf, 0.249066106476821, 0.17845375388022514] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.249066106476821, 0.17845375388022514, 0.163492190329358] ***
*** starting iteration: 3; err: [Inf, 0.249066106476821, 0.17845375388022514, 0.163492190329358] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.249066106476821, 0.17845375388022514, 0.163492190329358, 0.15671832247637213] ***
*** finished computation of 7 references, err: [Inf, 0.249066106476821, 0.17845375388022514, 0.163492190329358, 0.15671832247637213] ***
*** center 1: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [14, 33, 0]]
** centroid: 2, normalized-entropy: 0.8786744932173094, [(1, 14), (2, 33)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [74, 2, 0]]
** centroid: 3, normalized-entropy: 0.17556502585750275, [(1, 74), (2, 2)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 34, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [80, 50, 0]]
** centroid: 5, normalized-entropy: 0.961236604722876, [(1, 80), (2, 50)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 71, 21]]
** centroid: 6, normalized-entropy: 0.7749672673267259, [(2, 71), (3, 21)]
*** center 7: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20968911283742636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20968911283742636, 0.17493076683115213] ***
*** starting iteration: 2; err: [Inf, 0.20968911283742636, 0.17493076683115213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20968911283742636, 0.17493076683115213, 0.16555494278017432] ***
*** starting iteration: 3; err: [Inf, 0.20968911283742636, 0.17493076683115213, 0.16555494278017432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20968911283742636, 0.17493076683115213, 0.16555494278017432, 0.15908019758574665] ***
*** finished computation of 7 references, err: [Inf, 0.20968911283742636, 0.17493076683115213, 0.16555494278017432, 0.15908019758574665] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [42, 24, 0]]
** centroid: 1, normalized-entropy: 0.9456603046006401, [(1, 42), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [67, 32, 0]]
** centroid: 2, normalized-entropy: 0.9078619154263698, [(1, 67), (2, 32)]
*** center 3: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 76, 12]]
** centroid: 4, normalized-entropy: 0.5746356978376794, [(2, 76), (3, 12)]
*** center 5: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 39, 4]]
** centroid: 6, normalized-entropy: 0.446481346896803, [(2, 39), (3, 4)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [9, 19, 0]]
** centroid: 7, normalized-entropy: 0.9059282160429994, [(1, 9), (2, 19)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19217978690192103] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19217978690192103, 0.16138846513978206] ***
*** starting iteration: 2; err: [Inf, 0.19217978690192103, 0.16138846513978206] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19217978690192103, 0.16138846513978206, 0.15535933641158045] ***
*** starting iteration: 3; err: [Inf, 0.19217978690192103, 0.16138846513978206, 0.15535933641158045] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19217978690192103, 0.16138846513978206, 0.15535933641158045, 0.1526507270205766] ***
*** finished computation of 7 references, err: [Inf, 0.19217978690192103, 0.16138846513978206, 0.15535933641158045, 0.1526507270205766] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [71, 30, 0]]
** centroid: 1, normalized-entropy: 0.8776296673746861, [(1, 71), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [57, 39, 0]]
** centroid: 2, normalized-entropy: 0.9744894033980525, [(1, 57), (2, 39)]
*** center 3: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [29, 37, 0]]
** centroid: 4, normalized-entropy: 0.9893755831922303, [(1, 29), (2, 37)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 72, 21]]
** centroid: 5, normalized-entropy: 0.7706290693639406, [(2, 72), (3, 21)]
*** center 6: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1887216069754213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1887216069754213, 0.1595969622116536] ***
*** starting iteration: 2; err: [Inf, 0.1887216069754213, 0.1595969622116536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1887216069754213, 0.1595969622116536, 0.155729172389023] ***
*** starting iteration: 3; err: [Inf, 0.1887216069754213, 0.1595969622116536, 0.155729172389023] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1887216069754213, 0.1595969622116536, 0.155729172389023, 0.15424154356122016] ***
*** finished computation of 7 references, err: [Inf, 0.1887216069754213, 0.1595969622116536, 0.155729172389023, 0.15424154356122016] ***
*** center 1: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 45, 21]]
** centroid: 2, normalized-entropy: 0.9023932827949788, [(2, 45), (3, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [45, 46, 0]]
** centroid: 4, normalized-entropy: 0.999912889501356, [(1, 45), (2, 46)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [55, 6, 0]]
** centroid: 5, normalized-entropy: 0.4637773498877517, [(1, 55), (2, 6)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [62, 16, 0]]
** centroid: 6, normalized-entropy: 0.7320666900931937, [(1, 62), (2, 16)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 79, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19271335812751203] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19271335812751203, 0.1654441192522645] ***
*** starting iteration: 2; err: [Inf, 0.19271335812751203, 0.1654441192522645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19271335812751203, 0.1654441192522645, 0.1597588321696967] ***
*** starting iteration: 3; err: [Inf, 0.19271335812751203, 0.1654441192522645, 0.1597588321696967] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19271335812751203, 0.1654441192522645, 0.1597588321696967, 0.1566353035205975] ***
*** finished computation of 7 references, err: [Inf, 0.19271335812751203, 0.1654441192522645, 0.1597588321696967, 0.1566353035205975] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [50, 12, 0]]
** centroid: 1, normalized-entropy: 0.708835673332196, [(1, 50), (2, 12)]
*** center 2: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [28, 55, 0]]
** centroid: 3, normalized-entropy: 0.9222596474738021, [(1, 28), (2, 55)]
*** center 4: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [50, 28, 0]]
** centroid: 6, normalized-entropy: 0.9418285354475157, [(1, 50), (2, 28)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 98, 22]]
** centroid: 7, normalized-entropy: 0.6873150928309273, [(2, 98), (3, 22)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21035874659195541] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21035874659195541, 0.16305165593419224] ***
*** starting iteration: 2; err: [Inf, 0.21035874659195541, 0.16305165593419224] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21035874659195541, 0.16305165593419224, 0.1535265319137834] ***
*** starting iteration: 3; err: [Inf, 0.21035874659195541, 0.16305165593419224, 0.1535265319137834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21035874659195541, 0.16305165593419224, 0.1535265319137834, 0.1486885261144489] ***
*** finished computation of 7 references, err: [Inf, 0.21035874659195541, 0.16305165593419224, 0.1535265319137834, 0.1486885261144489] ***
*** center 1: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 78, 19]]
** centroid: 2, normalized-entropy: 0.7136036068604937, [(2, 78), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [1, 71, 0]]
** centroid: 3, normalized-entropy: 0.1055910363751953, [(1, 1), (2, 71)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [77, 2, 0]]
** centroid: 4, normalized-entropy: 0.17033057560105982, [(1, 77), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [41, 29, 0]]
** centroid: 5, normalized-entropy: 0.9786961448300948, [(1, 41), (2, 29)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [60, 2, 0]]
** centroid: 6, normalized-entropy: 0.2055925081850832, [(1, 60), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [59, 6, 0]]
** centroid: 7, normalized-entropy: 0.4441260450795996, [(1, 59), (2, 6)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18983878349233418] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18983878349233418, 0.1500988962110132] ***
*** starting iteration: 2; err: [Inf, 0.18983878349233418, 0.1500988962110132] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18983878349233418, 0.1500988962110132, 0.1468241174519062] ***
*** starting iteration: 3; err: [Inf, 0.18983878349233418, 0.1500988962110132, 0.1468241174519062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18983878349233418, 0.1500988962110132, 0.1468241174519062, 0.14549681983049959] ***
*** finished computation of 7 references, err: [Inf, 0.18983878349233418, 0.1500988962110132, 0.1468241174519062, 0.14549681983049959] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [2, 70, 0]]
** centroid: 1, normalized-entropy: 0.18312206830137262, [(1, 2), (2, 70)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [86, 3, 0]]
** centroid: 2, normalized-entropy: 0.21265863988163503, [(1, 86), (2, 3)]
*** center 3: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [11, 61, 0]]
** centroid: 4, normalized-entropy: 0.6167482598263911, [(1, 11), (2, 61)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 69, 15]]
** centroid: 5, normalized-entropy: 0.6769418697808861, [(2, 69), (3, 15)]
*** center 6: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [62, 7, 0]]
** centroid: 7, normalized-entropy: 0.47357292491745173, [(1, 62), (2, 7)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2246033667549491] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2246033667549491, 0.16986423406749965] ***
*** starting iteration: 2; err: [Inf, 0.2246033667549491, 0.16986423406749965] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2246033667549491, 0.16986423406749965, 0.16024773442465812] ***
*** starting iteration: 3; err: [Inf, 0.2246033667549491, 0.16986423406749965, 0.16024773442465812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2246033667549491, 0.16986423406749965, 0.16024773442465812, 0.15703241365589202] ***
*** finished computation of 7 references, err: [Inf, 0.2246033667549491, 0.16986423406749965, 0.16024773442465812, 0.15703241365589202] ***
*** center 1: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [61, 27, 0]]
** centroid: 2, normalized-entropy: 0.8894663896628687, [(1, 61), (2, 27)]
*** center 3: selecting labels [1] (freq >= 1) [from [116, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [29, 35, 0]]
** centroid: 4, normalized-entropy: 0.9936507116910402, [(1, 29), (2, 35)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 46, 5]]
** centroid: 5, normalized-entropy: 0.462749058578174, [(2, 46), (3, 5)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [39, 10, 0]]
** centroid: 6, normalized-entropy: 0.7300166301457938, [(1, 39), (2, 10)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 76, 12]]
** centroid: 7, normalized-entropy: 0.5746356978376794, [(2, 76), (3, 12)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21773642300814391] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21773642300814391, 0.17127778662601487] ***
*** starting iteration: 2; err: [Inf, 0.21773642300814391, 0.17127778662601487] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21773642300814391, 0.17127778662601487, 0.15798098884988576] ***
*** starting iteration: 3; err: [Inf, 0.21773642300814391, 0.17127778662601487, 0.15798098884988576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21773642300814391, 0.17127778662601487, 0.15798098884988576, 0.15318244296498595] ***
*** finished computation of 7 references, err: [Inf, 0.21773642300814391, 0.17127778662601487, 0.15798098884988576, 0.15318244296498595] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 83, 17]]
** centroid: 1, normalized-entropy: 0.6577047787442196, [(2, 83), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [58, 33, 0]]
** centroid: 3, normalized-entropy: 0.9448506439764089, [(1, 58), (2, 33)]
*** center 4: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [35, 51, 0]]
** centroid: 6, normalized-entropy: 0.9748857077995388, [(1, 35), (2, 51)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [44, 17, 0]]
** centroid: 7, normalized-entropy: 0.8536576732793314, [(1, 44), (2, 17)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20750846087932587] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20750846087932587, 0.16352145277895033] ***
*** starting iteration: 2; err: [Inf, 0.20750846087932587, 0.16352145277895033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20750846087932587, 0.16352145277895033, 0.1565469634477049] ***
*** starting iteration: 3; err: [Inf, 0.20750846087932587, 0.16352145277895033, 0.1565469634477049] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20750846087932587, 0.16352145277895033, 0.1565469634477049, 0.15386567182466387] ***
*** finished computation of 7 references, err: [Inf, 0.20750846087932587, 0.16352145277895033, 0.1565469634477049, 0.15386567182466387] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [41, 15, 0]]
** centroid: 1, normalized-entropy: 0.8383729377099398, [(1, 41), (2, 15)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 29, 18]]
** centroid: 2, normalized-entropy: 0.9601186626422924, [(2, 29), (3, 18)]
*** center 3: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [89, 1, 0]]
** centroid: 4, normalized-entropy: 0.08807225904068142, [(1, 89), (2, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [62, 3, 0]]
** centroid: 5, normalized-entropy: 0.269828447703074, [(1, 62), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [12, 79, 0]]
** centroid: 6, normalized-entropy: 0.5625393752025972, [(1, 12), (2, 79)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 52, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19546425194619224] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19546425194619224, 0.16463314137607812] ***
*** starting iteration: 2; err: [Inf, 0.19546425194619224, 0.16463314137607812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19546425194619224, 0.16463314137607812, 0.15578491202369332] ***
*** starting iteration: 3; err: [Inf, 0.19546425194619224, 0.16463314137607812, 0.15578491202369332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19546425194619224, 0.16463314137607812, 0.15578491202369332, 0.1506615354316309] ***
*** finished computation of 7 references, err: [Inf, 0.19546425194619224, 0.16463314137607812, 0.15578491202369332, 0.1506615354316309] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 60, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [5, 75, 0]]
** centroid: 3, normalized-entropy: 0.3372900666170139, [(1, 5), (2, 75)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 11, 19]]
** centroid: 4, normalized-entropy: 0.9480782435939054, [(2, 11), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [58, 10, 0]]
** centroid: 5, normalized-entropy: 0.6024308020404452, [(1, 58), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [83, 31, 0]]
** centroid: 6, normalized-entropy: 0.8442202034297602, [(1, 83), (2, 31)]
*** center 7: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 382,3 => 38,1 => 580), Dict(2 => 399,3 => 37,1 => 564))
[ Info: ===== scores for single classifier: {"micro_f1":0.944,"precision":0.944,"recall":0.944,"macro_recall":0.9368692000270947,"macro_f1":0.9044632253055337,"accuracy":0.944,"class_f1":{"2":0.9249329758713137,"3":0.8235294117647058,"1":0.9649272882805817},"class_precision":{"2":0.9942363112391931,"3":0.7291666666666666,"1":0.9322314049586777},"class_recall":{"2":0.8646616541353384,"3":0.9459459459459459,"1":1.0}}
[ Info: ===== scores for 1: {"micro_f1":0.983,"precision":0.983,"recall":0.983,"macro_recall":0.930049150093943,"macro_f1":0.9551919060158434,"accuracy":0.983,"class_f1":{"2":0.9789343246592318,"3":0.8955223880597014,"1":0.9911190053285969},"class_precision":{"2":0.9681372549019608,"3":1.0,"1":0.9928825622775801},"class_recall":{"2":0.9899749373433584,"3":0.8108108108108109,"1":0.9893617021276596}}
[ Info: ===== scores for 5: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9697750462028177,"macro_f1":0.9643589060551075,"accuracy":0.979,"class_f1":{"2":0.9741060419235512,"3":0.9333333333333332,"1":0.9856373429084381},"class_precision":{"2":0.9587378640776699,"3":0.9210526315789473,"1":0.9981818181818182},"class_recall":{"2":0.9899749373433584,"3":0.9459459459459459,"1":0.973404255319149}}
[ Info: ===== scores for 7: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9801720613590715,"macro_f1":0.9426086086869557,"accuracy":0.971,"class_f1":{"2":0.9639751552795031,"3":0.880952380952381,"1":0.982898289828983},"class_precision":{"2":0.9556650246305419,"3":0.7872340425531915,"1":0.9981718464351006},"class_recall":{"2":0.9724310776942355,"3":1.0,"1":0.9680851063829787}}
[ Info: ===== scores for 9: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9811096891164081,"macro_f1":0.9408392376780056,"accuracy":0.973,"class_f1":{"2":0.9662921348314607,"3":0.8705882352941177,"1":0.9856373429084381},"class_precision":{"2":0.9626865671641791,"3":0.7708333333333334,"1":0.9981818181818182},"class_recall":{"2":0.9699248120300752,"3":1.0,"1":0.973404255319149}}
[ Info: ===== scores for 11: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.979438845340301,"macro_f1":0.9333055621135339,"accuracy":0.971,"class_f1":{"2":0.9637046307884856,"3":0.8505747126436781,"1":0.9856373429084381},"class_precision":{"2":0.9625,"3":0.74,"1":0.9981818181818182},"class_recall":{"2":0.9649122807017544,"3":1.0,"1":0.973404255319149}}
(score = 0.984, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.984, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.983, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.983, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.977, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.977, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.984,"k":1,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.984,"precision":0.984,"recall":0.984,"macro_recall":0.9306401666424063,"macro_f1":0.9558951561391774,"accuracy":0.984,"class_f1":{"2":0.9801488833746897,"3":0.8955223880597014,"1":0.9920141969831411},"class_precision":{"2":0.9705159705159705,"3":1.0,"1":0.9928952042628775},"class_recall":{"2":0.9899749373433584,"3":0.8108108108108109,"1":0.9911347517730497}}
Test Summary: | Pass  Total
AKNC          |    8      8
[70, 4, 1, 5, 2, 4, 7, 1, 6, 7, 1, 3, 2, 5, 1, 3, 1, 9, 3, 3, 2, 7, 14, 4, 33, 3, 13, 4, 19, 19, 6, 2, 3, 27, 69, 8, 7, 2, 5, 2, 12, 13, 2, 18, 31, 30, 16, 16, 2, 1, 1, 1, 31, 18, 17, 1, 12, 102, 35, 49, 9, 47, 9, 40, 5, 24, 5, 3, 12, 99, 3, 2, 5, 32, 2, 2, 84, 25, 11, 20, 15, 7, 19, 3, 14, 7, 6, 13, 24, 6, 24, 3, 2, 5, 9, 57, 42, 3, 1, 49, 52, 6, 6, 7, 99, 3, 4, 204, 1, 68, 9, 33, 20, 29, 27, 37, 30, 27, 8, 34, 10, 5, 65, 43, 25, 46, 17, 36, 6, 10, 9, 54, 6, 21, 26, 6, 24, 22, 5, 44, 127, 21, 51, 1, 9, 2, 8, 16, 7, 12, 8, 27, 3, 36, 46, 1, 2, 170, 27, 14, 12, 14, 26, 6, 9, 2, 6, 10, 45, 19, 5, 12, 238, 349, 12, 23, 6, 9, 4, 652, 88, 12, 23, 18, 2, 10, 17, 6, 6, 34, 5, 24, 30, 76, 3, 4, 18, 9, 2, 11, 1, 29, 7, 112, 26, 6, 13, 69, 8, 2, 59, 11, 13, 12, 15, 40, 21, 4, 114, 28, 72, 53, 10, 49, 62, 10, 26, 152, 5, 30, 10, 2, 57, 9, 8, 20, 22, 35, 78, 6, 12, 14, 846, 10, 15, 24, 7, 17, 132, 43, 13, 13, 48, 11, 53, 35, 14, 299, 10, 50, 11, 35, 72, 2, 165, 23, 2, 19, 1, 13, 11, 15, 66, 160, 32, 16, 43, 43, 14, 11, 11, 3, 305, 84, 28, 7, 26, 32, 4, 9, 117, 129, 35, 27, 20, 16, 5, 209, 24, 11]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.686, speedup = 0.249687792826606, eval_ratio = 0.086748)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.41909722222222245,"recall":0.41145833333333354,"f1":null,"seconds":0.00022358819842338562,"exhaustive_search_seconds":0.0004745461046695709,"evaluations":498.75,"distances_sum":1704.2593205367084}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5789930555555554,"recall":0.5789930555555554,"f1":null,"seconds":0.00042958930134773254,"exhaustive_search_seconds":0.0004745461046695709,"evaluations":695.9765625,"distances_sum":1610.3392495296519}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6848958333333331,"recall":0.6848958333333331,"f1":null,"seconds":0.0005683396011590958,"exhaustive_search_seconds":0.0004745461046695709,"evaluations":863.40625,"distances_sum":1557.099329865981}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7586805555555552,"recall":0.7586805555555552,"f1":null,"seconds":0.0006951745599508286,"exhaustive_search_seconds":0.0004745461046695709,"evaluations":999.4609375,"distances_sum":1533.0373169117713}
KCenters.DeloneInvIndex> reached performance {"precision":0.8081597222222217,"recall":0.8081597222222217,"f1":0.8081597222222217,"seconds":0.0009611323475837708,"exhaustive_search_seconds":0.0004745461046695709,"evaluations":1152.3125,"distances_sum":1518.1579110512448}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7969999999999997, speedup = 0.4059942801408474, eval_ratio = 0.108956)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
