Julia Version 1.6.0-DEV.220
Commit 1e76111203 (2020-06-12 16:23 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed VersionParsing ─────────────── v1.2.0
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed SymEngine ──────────────────── v0.7.1
  Installed Compat ─────────────────────── v3.12.0
  Installed Conda ──────────────────────── v1.4.1
  Installed SpecialFunctions ───────────── v0.10.3
  Installed Documenter ─────────────────── v0.24.11
  Installed Combinatorics ──────────────── v1.0.2
  Installed Parsers ────────────────────── v1.0.5
  Installed MacroTools ─────────────────── v0.5.5
  Installed BinaryProvider ─────────────── v0.5.10
  Installed PyCall ─────────────────────── v1.91.4
  Installed ElectromagneticFields ──────── v0.3.0
  Installed DocStringExtensions ────────── v0.8.1
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed RecipesBase ────────────────── v1.0.1
  Installed JSON ───────────────────────── v0.21.0
  Installed SymPy ──────────────────────── v1.0.26
Updating `~/.julia/environments/v1.6/Project.toml`
  [d6c1ba6f] + ElectromagneticFields v0.3.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [b99e7846] + BinaryProvider v0.5.10
  [861a8166] + Combinatorics v1.0.2
  [34da2185] + Compat v3.12.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [8f4d0f93] + Conda v1.4.1
  [ffbed154] + DocStringExtensions v0.8.1
  [e30172f5] + Documenter v0.24.11
  [d6c1ba6f] + ElectromagneticFields v0.3.0
  [682c06a0] + JSON v0.21.0
  [1914dd2f] + MacroTools v0.5.5
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [69de0a69] + Parsers v1.0.5
  [438e738f] + PyCall v1.91.4
  [3cdcf5f2] + RecipesBase v1.0.1
  [276daf66] + SpecialFunctions v0.10.3
  [123dc426] + SymEngine v0.7.1
  [24249f21] + SymPy v1.0.26
  [81def892] + VersionParsing v1.2.0
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building SymEngine → `~/.julia/packages/SymEngine/RK5Ks/deps/build.log`
   Building Conda ────→ `~/.julia/packages/Conda/3rPhK/deps/build.log`
   Building PyCall ───→ `~/.julia/packages/PyCall/zqDXB/deps/build.log`
    Testing ElectromagneticFields
Status `/tmp/jl_XWRnJ8/Project.toml`
  [861a8166] Combinatorics v1.0.2
  [e30172f5] Documenter v0.24.11
  [d6c1ba6f] ElectromagneticFields v0.3.0
  [1bc83da4] SafeTestsets v0.0.1
  [123dc426] SymEngine v0.7.1
  [24249f21] SymPy v1.0.26
  [37e2e46d] LinearAlgebra
  [8dfed614] Test
Status `/tmp/jl_XWRnJ8/Manifest.toml`
  [b99e7846] BinaryProvider v0.5.10
  [861a8166] Combinatorics v1.0.2
  [34da2185] Compat v3.12.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [8f4d0f93] Conda v1.4.1
  [ffbed154] DocStringExtensions v0.8.1
  [e30172f5] Documenter v0.24.11
  [d6c1ba6f] ElectromagneticFields v0.3.0
  [682c06a0] JSON v0.21.0
  [1914dd2f] MacroTools v0.5.5
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [69de0a69] Parsers v1.0.5
  [438e738f] PyCall v1.91.4
  [3cdcf5f2] RecipesBase v1.0.1
  [1bc83da4] SafeTestsets v0.0.1
  [276daf66] SpecialFunctions v0.10.3
  [123dc426] SymEngine v0.7.1
  [24249f21] SymPy v1.0.26
  [81def892] VersionParsing v1.2.0
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
WARNING: importing deprecated binding Compat.invokelatest into SymEngine.
WARNING: Compat.MathConstants is deprecated, use Base.MathConstants instead.
  likely near /home/pkgeval/.julia/packages/SymEngine/RK5Ks/src/SymEngine.jl:6
WARNING: Compat.MathConstants is deprecated, use Base.MathConstants instead.
  likely near /home/pkgeval/.julia/packages/SymEngine/RK5Ks/src/SymEngine.jl:6
WARNING: Compat.MathConstants is deprecated, use Base.MathConstants instead.
  likely near /home/pkgeval/.julia/packages/SymEngine/RK5Ks/src/SymEngine.jl:6
WARNING: Compat.MathConstants is deprecated, use Base.MathConstants instead.
  likely near /home/pkgeval/.julia/packages/SymEngine/RK5Ks/src/SymEngine.jl:6
WARNING: importing deprecated binding Compat.LinearAlgebra into SymEngine.
WARNING: importing deprecated binding Compat.Libdl into SymEngine.
WARNING: Compat.LinearAlgebra is deprecated, use LinearAlgebra instead.
  likely near /home/pkgeval/.julia/packages/SymEngine/RK5Ks/src/dense-matrix.jl:162
WARNING: Compat.LinearAlgebra is deprecated, use LinearAlgebra instead.
  likely near /home/pkgeval/.julia/packages/SymEngine/RK5Ks/src/dense-matrix.jl:166
WARNING: Compat.LinearAlgebra is deprecated, use LinearAlgebra instead.
  likely near /home/pkgeval/.julia/packages/SymEngine/RK5Ks/src/dense-matrix.jl:168
WARNING: Compat.LinearAlgebra is deprecated, use LinearAlgebra instead.
  likely near /home/pkgeval/.julia/packages/SymEngine/RK5Ks/src/dense-matrix.jl:168
ERROR: LoadError: LoadError: InitError: PyError (PyImport_ImportModule

The Python package sympy could not be found by pyimport. Usually this means
that you did not install sympy in the Python version being used by PyCall.

PyCall is currently configured to use the Python version at:

/usr/bin/python3

and you should use whatever mechanism you usually use (apt-get, pip, conda,
etcetera) to install the Python package containing the sympy module.

One alternative is to re-configure PyCall to use a different Python
version on your system: set ENV["PYTHON"] to the path/name of the python
executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.

Another alternative is to configure PyCall to use a Julia-specific Python
distribution via the Conda.jl package (which installs a private Anaconda
Python distribution), which has the advantage that packages can be installed
and kept up-to-date via Julia.  As explained in the PyCall documentation,
set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
To install the sympy module, you can use `pyimport_conda("sympy", PKG)`,
where PKG is the Anaconda package the contains the module sympy,
or alternatively you can use the Conda package directly (via
`using Conda` followed by `Conda.add` etcetera).

) <class 'ModuleNotFoundError'>
ModuleNotFoundError("No module named 'sympy'",)

Stacktrace:
 [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
 [2] pyimport_conda(::String, ::String, ::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:694
 [3] pyimport_conda at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:693 [inlined]
 [4] __init__() at /home/pkgeval/.julia/packages/SymPy/7D3De/src/SymPy.jl:115
 [5] _include_from_serialized(::String, ::Array{Any,1}) at ./loading.jl:697
 [6] _require_from_serialized(::String) at ./loading.jl:749
 [7] _require(::Base.PkgId) at ./loading.jl:1040
 [8] require(::Base.PkgId) at ./loading.jl:928
 [9] require(::Module, ::Symbol) at ./loading.jl:923
 [10] include at ./Base.jl:369 [inlined]
 [11] include(::String) at /home/pkgeval/.julia/packages/ElectromagneticFields/MmuPa/src/ElectromagneticFields.jl:1
 [12] top-level scope at /home/pkgeval/.julia/packages/ElectromagneticFields/MmuPa/src/ElectromagneticFields.jl:41
 [13] include at ./Base.jl:369 [inlined]
 [14] include_package_for_output(::String, ::Array{String,1}, ::Array{String,1}, ::Array{String,1}, ::Array{Pair{Base.PkgId,UInt64},1}, ::Tuple{UInt64,UInt64}, ::String) at ./loading.jl:1219
 [15] top-level scope at none:1
 [16] eval at ./boot.jl:331 [inlined]
 [17] eval(::Expr) at ./client.jl:446
 [18] top-level scope at none:1
during initialization of module SymPy
in expression starting at /home/pkgeval/.julia/packages/ElectromagneticFields/MmuPa/src/analytic/solovev.jl:3
in expression starting at /home/pkgeval/.julia/packages/ElectromagneticFields/MmuPa/src/ElectromagneticFields.jl:1
ERROR: LoadError: Failed to precompile ElectromagneticFields [d6c1ba6f-ee03-53af-b876-68cefeb88ec8] to /home/pkgeval/.julia/compiled/v1.6/ElectromagneticFields/yIIiH_nwXHZ.ji.
Stacktrace:
 [1] error(::String) at ./error.jl:33
 [2] compilecache(::Base.PkgId, ::String) at ./loading.jl:1335
 [3] _require(::Base.PkgId) at ./loading.jl:1030
 [4] require(::Base.PkgId) at ./loading.jl:928
 [5] require(::Module, ::Symbol) at ./loading.jl:923
 [6] include(::String) at ./client.jl:444
 [7] top-level scope at none:6
in expression starting at /home/pkgeval/.julia/packages/ElectromagneticFields/MmuPa/test/runtests.jl:2
ERROR: Package ElectromagneticFields errored during testing
Stacktrace:
 [1] pkgerror(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1561
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:327
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:314
 [5] #test#61 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
 [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
 [7] #test#60 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
 [8] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope at none:16
