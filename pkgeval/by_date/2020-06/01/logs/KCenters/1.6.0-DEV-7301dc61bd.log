Julia Version 1.6.0-DEV.137
Commit 7301dc61bd (2020-05-30 15:02 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed MappedArrays ──────────────── v0.2.2
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.4
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed MLDataPattern ─────────────── v0.5.3
  Installed StatsBase ─────────────────── v0.32.2
  Installed Missings ──────────────────── v0.4.3
  Installed PooledArrays ──────────────── v0.5.3
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.3.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed OrderedCollections ────────── v1.2.0
  Installed JSON ──────────────────────── v0.21.0
  Installed DataStructures ────────────── v0.17.17
  Installed MLDataUtils ───────────────── v0.5.1
  Installed TableTraits ───────────────── v1.0.0
  Installed Reexport ──────────────────── v0.2.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Compat ────────────────────── v3.10.0
  Installed DataFrames ────────────────── v0.20.2
  Installed Tables ────────────────────── v1.0.4
  Installed CategoricalArrays ─────────── v0.7.7
  Installed SimilaritySearch ──────────── v0.3.19
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.10.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.4
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_CVuOUv/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_CVuOUv/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.10.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.4
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9364293802777927
[ Info: 0.8326150393486023
[ Info: 0.5553847705821197
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3295412704100211
mean(cdnet.distances) = 0.36467789955437185
mean(crand.distances) = 0.3451049473385016
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4443359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.4443359375,"f1":0.5943417693417694,"seconds":4.2710453271865845e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":6.7890625,"distances_sum":1264.752361273706}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2099609375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2099609375,"f1":null,"seconds":4.423782229423523e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":6.8125,"distances_sum":605.0574521624304}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8571085164835174,"seconds":5.688518285751343e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.6875,"distances_sum":2376.5141915981676}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7607421875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7607421875,"f1":0.8571085164835174,"seconds":5.688518285751343e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.6875,"distances_sum":2376.5141915981676}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8953104187479195,"seconds":6.921589374542236e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.6640625,"distances_sum":2712.094083852505}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9100821053946062,"seconds":7.169321179389954e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.6796875,"distances_sum":2799.001208104807}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9210679945054951,"seconds":6.860122084617615e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.828125,"distances_sum":2854.126838687662}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.861328125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.861328125,"f1":0.9210679945054951,"seconds":6.860122084617615e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.828125,"distances_sum":2854.126838687662}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9259017024642033,"seconds":7.539987564086914e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.8515625,"distances_sum":2919.1440031724537}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9615956959706962,"seconds":6.904825568199158e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.9453125,"distances_sum":3269.3619672303803}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9311729936729942,"seconds":6.4354389905929565e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.9140625,"distances_sum":2952.1183112164767}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9615956959706962,"seconds":6.904825568199158e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.9453125,"distances_sum":3269.3619672303803}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9615956959706962,"seconds":6.904825568199158e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.9453125,"distances_sum":3269.3619672303803}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7236328125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.7236328125,"f1":0.8256491772116779,"seconds":5.6568533182144165e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.203125,"distances_sum":2169.3525036121673}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8689038392163401,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.609375,"distances_sum":2384.1903098269054}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7822265625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7822265625,"f1":0.8689038392163401,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.609375,"distances_sum":2384.1903098269054}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.926282051282052,"seconds":6.545335054397583e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.7578125,"distances_sum":2820.908301667953}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9227881493506498,"seconds":6.346032023429871e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.7421875,"distances_sum":2767.076874218414}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8730576714951722,"seconds":6.107613444328308e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.65625,"distances_sum":2427.836785382324}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.873046875,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.873046875,"f1":0.926282051282052,"seconds":6.545335054397583e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.7578125,"distances_sum":2820.908301667953}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9654819139194144,"seconds":6.671994924545288e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.9140625,"distances_sum":3141.3427579680606}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.961034798534799,"seconds":6.5695494413375854e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8515625,"distances_sum":3135.418464570871}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9640281593406598,"seconds":6.919726729393005e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.9453125,"distances_sum":3122.9153705775884}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9317854020979028,"seconds":6.416812539100647e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.796875,"distances_sum":2877.594238567893}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9594894688644694,"seconds":6.454065442085266e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8671875,"distances_sum":3112.95361671735}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9535428113553118,"seconds":6.427988409996033e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8828125,"distances_sum":3076.760751421229}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9343921703296709,"seconds":6.418675184249878e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.7421875,"distances_sum":2961.158322495084}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9654819139194144,"seconds":6.671994924545288e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.9140625,"distances_sum":3141.3427579680606}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9654819139194144,"seconds":6.671994924545288e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.9140625,"distances_sum":3141.3427579680606}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.396484375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.396484375,"f1":null,"seconds":4.198402166366577e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":5.7265625,"distances_sum":1096.554209973773}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.396484375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.396484375,"f1":null,"seconds":4.198402166366577e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":5.7265625,"distances_sum":1096.554209973773}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.658203125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.658203125,"f1":0.7823612151737158,"seconds":5.3085386753082275e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":6.9296875,"distances_sum":1883.1922645455938}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8461772602397611,"seconds":5.900859832763672e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.7578125,"distances_sum":2230.6487156286926}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.744140625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.744140625,"f1":0.8461772602397611,"seconds":5.900859832763672e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.7578125,"distances_sum":2230.6487156286926}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9180434149184157,"seconds":6.079673767089844e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.421875,"distances_sum":2756.865199342896}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8824493215118222,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.1328125,"distances_sum":2494.601893211187}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.9210138819513826,"seconds":6.329268217086792e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.375,"distances_sum":2812.0894686719853}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.86328125,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.86328125,"f1":0.9210138819513826,"seconds":6.329268217086792e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.375,"distances_sum":2812.0894686719853}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.86328125,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.86328125,"f1":0.9210138819513826,"seconds":6.329268217086792e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.375,"distances_sum":2812.0894686719853}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4013671875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4013671875,"f1":null,"seconds":4.37907874584198e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":6.3125,"distances_sum":1065.092336296906}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4013671875,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.4013671875,"f1":null,"seconds":4.37907874584198e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":6.3125,"distances_sum":1065.092336296906}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.427734375, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.427734375,"f1":null,"seconds":4.509463906288147e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":6.5078125,"distances_sum":1112.269859430807}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9049601440226447,"seconds":6.297603249549866e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.6328125,"distances_sum":2652.484664006805}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.701171875, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.701171875,"f1":0.8148362054612064,"seconds":5.472451448440552e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":7.859375,"distances_sum":2027.6257990450347}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.841796875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.841796875,"f1":0.9049601440226447,"seconds":6.297603249549866e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.6328125,"distances_sum":2652.484664006805}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9415464743589749,"seconds":6.547197699546814e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.7578125,"distances_sum":2961.2342213073744}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.954693223443224,"seconds":6.59748911857605e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.84375,"distances_sum":3057.266529559546}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.954693223443224,"seconds":6.59748911857605e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.84375,"distances_sum":3057.266529559546}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.919921875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.954693223443224,"seconds":6.59748911857605e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.84375,"distances_sum":3057.266529559546}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2490234375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2490234375,"f1":null,"seconds":3.842636942863464e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":6.6640625,"distances_sum":696.43221292248}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4111328125, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.4111328125,"f1":0.5607038794538793,"seconds":3.945082426071167e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":6.4375,"distances_sum":1049.2160148124565}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4111328125,"state":{"ssize":1,"bsize":2},"perf":{"precision":1.0,"recall":0.4111328125,"f1":0.5607038794538793,"seconds":3.945082426071167e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":6.4375,"distances_sum":1049.2160148124565}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6962890625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6962890625,"f1":0.8090777278277286,"seconds":4.928559064865112e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":7.640625,"distances_sum":2034.6725527540243}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6962890625,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6962890625,"f1":0.8090777278277286,"seconds":4.928559064865112e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":7.640625,"distances_sum":2034.6725527540243}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9359317765567771,"seconds":6.303191184997559e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.6640625,"distances_sum":2986.3322347834287}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8552239427239435,"seconds":5.8747828006744385e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.4609375,"distances_sum":2314.94321771852}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.890625,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.890625,"f1":0.9359317765567771,"seconds":6.303191184997559e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.6640625,"distances_sum":2986.3322347834287}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.890625,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.890625,"f1":0.9359317765567771,"seconds":6.303191184997559e-6,"exhaustive_search_seconds":1.600012183189392e-6,"evaluations":8.6640625,"distances_sum":2986.3322347834287}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.790228348040849,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":7.625,"distances_sum":1914.1836892576976}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.852507388444889,"seconds":5.925074219703674e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.1640625,"distances_sum":2327.2468195392357}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7587890625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7587890625,"f1":0.852507388444889,"seconds":5.925074219703674e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.1640625,"distances_sum":2327.2468195392357}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9517742673992678,"seconds":6.444752216339111e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.75,"distances_sum":3105.7170147994793}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9517742673992678,"seconds":6.444752216339111e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.75,"distances_sum":3105.7170147994793}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.969104853479854,"seconds":6.854534149169922e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.8515625,"distances_sum":3248.5760887849183}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9621852106227111,"seconds":6.720423698425293e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.8515625,"distances_sum":3177.217723680248}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.969104853479854,"seconds":6.854534149169922e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.8515625,"distances_sum":3248.5760887849183}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.969104853479854,"seconds":6.854534149169922e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.8515625,"distances_sum":3248.5760887849183}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.734375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.734375,"f1":0.8402248792873802,"seconds":6.1746686697006226e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.0390625,"distances_sum":1683.9905387804652}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8528450715950724,"seconds":6.018206477165222e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.0390625,"distances_sum":1762.3665644051637}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75390625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.75390625,"f1":0.8528450715950724,"seconds":6.018206477165222e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.0390625,"distances_sum":1762.3665644051637}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9362293956043962,"seconds":6.716698408126831e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.859375,"distances_sum":2338.296523742615}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.958505036630037,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.9609375,"distances_sum":2471.747432682698}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.958505036630037,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.9609375,"distances_sum":2471.747432682698}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9728994963369966,"seconds":6.6105276346206665e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.984375,"distances_sum":2591.856368619371}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.962505723443224,"seconds":6.323680281639099e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.9765625,"distances_sum":2499.839765316385}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9651614010989014,"seconds":6.420537829399109e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.96875,"distances_sum":2529.9991760125104}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9705185439560444,"seconds":6.230548024177551e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.9765625,"distances_sum":2550.9112486728386}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9728994963369966,"seconds":6.6105276346206665e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.984375,"distances_sum":2591.856368619371}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9728994963369966,"seconds":6.6105276346206665e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.984375,"distances_sum":2591.856368619371}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5947265625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5947265625,"f1":0.7310521076146083,"seconds":4.6174973249435425e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":6.875,"distances_sum":1330.063391940906}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.666015625,"f1":0.7898304820179828,"seconds":4.9658119678497314e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.34375,"distances_sum":1437.0386982447533}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.666015625,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.666015625,"f1":0.7898304820179828,"seconds":4.9658119678497314e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.34375,"distances_sum":1437.0386982447533}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8648783508158517,"seconds":5.453824996948242e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.9375,"distances_sum":1787.2859908704286}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9225191475191482,"seconds":6.146728992462158e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.7890625,"distances_sum":2233.6337573562228}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8671875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8671875,"f1":0.9225191475191482,"seconds":6.146728992462158e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.7890625,"distances_sum":2233.6337573562228}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9376201923076931,"seconds":6.170943379402161e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.8828125,"distances_sum":2299.2728969241944}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9655734890109893,"seconds":6.6999346017837524e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.90625,"distances_sum":2526.958214117517}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9287348068598076,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.8203125,"distances_sum":2231.2385845403246}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9655734890109893,"seconds":6.6999346017837524e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.90625,"distances_sum":2526.958214117517}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9655734890109893,"seconds":6.6999346017837524e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.90625,"distances_sum":2526.958214117517}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.580078125, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.580078125,"f1":0.7198025932400938,"seconds":4.073604941368103e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":7.078125,"distances_sum":1153.5092700801788}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5673828125, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5673828125,"f1":0.7067746489621496,"seconds":4.019588232040405e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":7.0078125,"distances_sum":1180.163646254346}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.580078125,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.580078125,"f1":0.7198025932400938,"seconds":4.073604941368103e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":7.078125,"distances_sum":1153.5092700801788}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8962943306693315,"seconds":5.282461643218994e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.6796875,"distances_sum":2033.81392755876}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.6826171875,"f1":0.8006633991009,"seconds":4.334375262260437e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":7.609375,"distances_sum":1465.7801101618838}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8972272519147527,"seconds":5.0943344831466675e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.6171875,"distances_sum":2038.5383724282192}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8751691017316026,"seconds":4.712492227554321e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.0390625,"distances_sum":1843.3103070731127}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.8042452339327346,"seconds":4.32133674621582e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":7.5546875,"distances_sum":1474.5187062910848}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8046875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8046875,"f1":0.8869021603396612,"seconds":5.0477683544158936e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.703125,"distances_sum":1914.766987301279}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5927734375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5927734375,"f1":0.729654373404374,"seconds":3.9245933294296265e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":7.078125,"distances_sum":1264.2311035701553}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8561880827505834,"seconds":4.783272743225098e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":7.796875,"distances_sum":1733.6709921967429}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.82421875,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.82421875,"f1":0.8962943306693315,"seconds":5.282461643218994e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.6796875,"distances_sum":2033.81392755876}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9632097069597074,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.9296875,"distances_sum":2485.7657361731494}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9617788461538468,"seconds":5.4370611906051636e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.9375,"distances_sum":2474.0375894680915}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9704269688644692,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.9609375,"distances_sum":2545.2628439358}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9458962912087917,"seconds":5.446374416351318e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.890625,"distances_sum":2346.8114101505657}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9424908424908429,"seconds":5.476176738739014e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.9296875,"distances_sum":2302.053319309764}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9530219780219785,"seconds":5.6996941566467285e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.9453125,"distances_sum":2409.9697587135975}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9704269688644692,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.9609375,"distances_sum":2545.2628439358}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9704269688644692,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.9609375,"distances_sum":2545.2628439358}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.40234375, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.40234375,"f1":null,"seconds":3.3974647521972656e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":6.1171875,"distances_sum":839.7429412164724}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.67578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.67578125,"f1":0.7924670815295823,"seconds":4.233792424201965e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":7.359375,"distances_sum":1436.7199638540483}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8784200174825184,"seconds":5.0086528062820435e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.0703125,"distances_sum":1822.5263750930242}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.791015625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.791015625,"f1":0.8784200174825184,"seconds":5.0086528062820435e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.0703125,"distances_sum":1822.5263750930242}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8972126831501841,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.75,"distances_sum":1950.4015390406166}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9456387362637368,"seconds":5.284324288368225e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.8984375,"distances_sum":2304.6610046903133}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9518117299367307,"seconds":5.383044481277466e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.859375,"distances_sum":2380.769041844703}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9518117299367307,"seconds":5.383044481277466e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.859375,"distances_sum":2380.769041844703}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9561272061272066,"seconds":5.453824996948242e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.828125,"distances_sum":2405.6872819300497}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9745192307692312,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.953125,"distances_sum":2533.8850649978795}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9770089285714288,"seconds":5.453824996948242e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.96875,"distances_sum":2544.7919876466076}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9677655677655681,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.90625,"distances_sum":2483.0402229295296}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.960182005494506,"seconds":5.302950739860535e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.921875,"distances_sum":2431.336990406243}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9770089285714288,"seconds":5.453824996948242e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.96875,"distances_sum":2544.7919876466076}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9770089285714288,"seconds":5.453824996948242e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.96875,"distances_sum":2544.7919876466076}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.591796875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.591796875,"f1":0.7267574439449443,"seconds":3.95067036151886e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":7.046875,"distances_sum":1283.3838657869085}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73828125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.73828125,"f1":0.8428710178710186,"seconds":4.855915904045105e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.078125,"distances_sum":1693.9854141164687}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.73828125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.73828125,"f1":0.8428710178710186,"seconds":4.855915904045105e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.078125,"distances_sum":1693.9854141164687}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9598099816849819,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.8828125,"distances_sum":2419.191021919216}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9374885531135536,"seconds":5.405396223068237e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.71875,"distances_sum":2225.7903626828243}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9598099816849819,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.8828125,"distances_sum":2419.191021919216}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9675423534798537,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.9296875,"distances_sum":2450.4628154236307}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9596414002664007,"seconds":5.584210157394409e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.8359375,"distances_sum":2429.4165305541433}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.973883928571429,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.90625,"distances_sum":2505.0061995214705}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9609260531135535,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.890625,"distances_sum":2396.330324177832}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.973883928571429,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.90625,"distances_sum":2505.0061995214705}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.973883928571429,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.90625,"distances_sum":2505.0061995214705}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8513913170163178,"seconds":6.760470569133759e-5,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.1015625,"distances_sum":1817.5196725969327}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.75390625,"f1":0.8513913170163178,"seconds":6.760470569133759e-5,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.1015625,"distances_sum":1817.5196725969327}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9332188644688653,"seconds":5.81890344619751e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.6328125,"distances_sum":2348.558984590079}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9393715659340663,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.703125,"distances_sum":2329.5136634745745}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9393715659340663,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.703125,"distances_sum":2329.5136634745745}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9670246420246423,"seconds":5.349516868591309e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8671875,"distances_sum":2552.3001741337794}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9674507783882786,"seconds":5.356967449188232e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8515625,"distances_sum":2548.206812872503}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9670246420246423,"seconds":5.349516868591309e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8671875,"distances_sum":2552.3001741337794}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9670246420246423,"seconds":5.349516868591309e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8671875,"distances_sum":2552.3001741337794}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2353515625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2353515625,"f1":null,"seconds":3.077089786529541e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":5.5234375,"distances_sum":568.4226443263428}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7021484375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.7021484375,"f1":0.8163357475857483,"seconds":4.479661583900452e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":7.4765625,"distances_sum":1640.4699963442017}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7021484375,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.7021484375,"f1":0.8163357475857483,"seconds":4.479661583900452e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":7.4765625,"distances_sum":1640.4699963442017}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7353515625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7353515625,"f1":0.8398356851481861,"seconds":4.7497451305389404e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.03125,"distances_sum":1699.687753556077}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8583062770562777,"seconds":4.639849066734314e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.1171875,"distances_sum":1870.2982069576265}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7685546875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7685546875,"f1":0.8583062770562777,"seconds":4.639849066734314e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.1171875,"distances_sum":1870.2982069576265}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9549736721611727,"seconds":5.466863512992859e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.7734375,"distances_sum":2467.578198364506}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.929212454212455,"seconds":5.33275306224823e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.734375,"distances_sum":2256.5373153390183}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9485920329670331,"seconds":5.299225449562073e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.8046875,"distances_sum":2397.443955371212}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":10,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.931782280219781,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.6796875,"distances_sum":2291.8921834674443}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9549736721611727,"seconds":5.466863512992859e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.7734375,"distances_sum":2467.578198364506}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.919921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9549736721611727,"seconds":5.466863512992859e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.7734375,"distances_sum":2467.578198364506}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6826171875,"f1":0.8009833916083925,"seconds":4.753470420837402e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":7.5234375,"distances_sum":1613.7922847625487}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8543654262404271,"seconds":4.9173831939697266e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.1875,"distances_sum":1830.3203862105888}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2421875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2421875,"f1":null,"seconds":3.3639371395111084e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":5.859375,"distances_sum":636.1951262635365}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7587890625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7587890625,"f1":0.8543654262404271,"seconds":4.9173831939697266e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.1875,"distances_sum":1830.3203862105888}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9625972985347987,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.7890625,"distances_sum":2537.7427533229693}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8684617465867472,"seconds":4.664063453674316e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.359375,"distances_sum":1874.2661365432264}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9625972985347987,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.7890625,"distances_sum":2537.7427533229693}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9718234890109895,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.90625,"distances_sum":2595.525060023781}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9718234890109895,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.90625,"distances_sum":2595.525060023781}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9718234890109895,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.90625,"distances_sum":2595.525060023781}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2197265625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2197265625,"f1":null,"seconds":2.864748239517212e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":6.0703125,"distances_sum":534.1828874630561}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3525390625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3525390625,"f1":null,"seconds":3.203749656677246e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":6.1875,"distances_sum":744.6356047955646}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3525390625,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.3525390625,"f1":null,"seconds":3.203749656677246e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":6.1875,"distances_sum":744.6356047955646}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5986328125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5986328125,"f1":0.7364328379953385,"seconds":4.179775714874268e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":7.6953125,"distances_sum":1330.3222156615486}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6962890625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6962890625,"f1":0.8109713203463211,"seconds":9.326264262199402e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":7.8125,"distances_sum":1631.8889414570856}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8629953379953388,"seconds":4.7478824853897095e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.3046875,"distances_sum":1850.6813802830907}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7705078125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7705078125,"f1":0.8629953379953388,"seconds":4.7478824853897095e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.3046875,"distances_sum":1850.6813802830907}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.956604853479854,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.7890625,"distances_sum":2510.9652438657126}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.9028674450549458,"seconds":5.081295967102051e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.6484375,"distances_sum":2066.27162841354}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9417868589743598,"seconds":5.422160029411316e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.765625,"distances_sum":2393.0443511169915}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9382128288378293,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.8046875,"distances_sum":2340.426769231698}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.9027160339660347,"seconds":5.2265822887420654e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.671875,"distances_sum":2120.89143694741}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.956604853479854,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.7890625,"distances_sum":2510.9652438657126}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9228515625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.956604853479854,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.7890625,"distances_sum":2510.9652438657126}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2666015625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2666015625,"f1":null,"seconds":2.995133399963379e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":6.046875,"distances_sum":700.3242758549878}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4140625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4140625,"f1":null,"seconds":3.2372772693634033e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":6.171875,"distances_sum":1003.5436732692009}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3916015625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3916015625,"f1":null,"seconds":3.634020686149597e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":6.0078125,"distances_sum":867.3195409410525}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.416015625, conf: {"ssize":5,"bsize":2}, perf: {"precision":1.0,"recall":0.416015625,"f1":0.5662178099678099,"seconds":3.50363552570343e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":6.171875,"distances_sum":967.2641341496594}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.416015625,"state":{"ssize":5,"bsize":2},"perf":{"precision":1.0,"recall":0.416015625,"f1":0.5662178099678099,"seconds":3.50363552570343e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":6.171875,"distances_sum":967.2641341496594}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8474400599400609,"seconds":4.814937710762024e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.0546875,"distances_sum":1827.4339864285312}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7001953125, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.7001953125,"f1":0.8138205544455553,"seconds":1.2814998626708984e-5,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":7.796875,"distances_sum":1749.662884184076}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8610618548118557,"seconds":4.818663001060486e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.078125,"distances_sum":1947.9390185035816}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.58984375, conf: {"ssize":9,"bsize":3}, perf: {"precision":1.0,"recall":0.58984375,"f1":0.7272753288378294,"seconds":4.079192876815796e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":7.171875,"distances_sum":1320.0945385549267}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8456309315684324,"seconds":4.628673195838928e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.0859375,"distances_sum":1886.830983597559}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.894737554112555,"seconds":5.284324288368225e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.5546875,"distances_sum":2144.5496058710282}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.59375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.59375,"f1":0.7306164321789328,"seconds":4.258006811141968e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":7.2421875,"distances_sum":1360.245286542704}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6015625, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.6015625,"f1":0.7349823787323795,"seconds":4.114583134651184e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":7.1953125,"distances_sum":1391.2035469616}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8212890625,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.8212890625,"f1":0.894737554112555,"seconds":5.284324288368225e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.5546875,"distances_sum":2144.5496058710282}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9061298076923086,"seconds":5.088746547698975e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.5546875,"distances_sum":2187.365040695504}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9675080128205129,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.890625,"distances_sum":2640.190262099556}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9479624542124546,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.7578125,"distances_sum":2533.93656284141}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9436500999001005,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.7890625,"distances_sum":2515.0968747859174}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9029564185814195,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.5625,"distances_sum":2177.9110642129203}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9675080128205129,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.890625,"distances_sum":2640.190262099556}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9675080128205129,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.890625,"distances_sum":2640.190262099556}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.34765625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.34765625,"f1":null,"seconds":3.073364496231079e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":5.46875,"distances_sum":862.4042274439784}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5947265625, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5947265625,"f1":0.7277821137196142,"seconds":4.155561327934265e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.2421875,"distances_sum":1395.7449674037402}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5947265625,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.5947265625,"f1":0.7277821137196142,"seconds":4.155561327934265e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.2421875,"distances_sum":1395.7449674037402}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9077495421245431,"seconds":5.0924718379974365e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.5,"distances_sum":2173.424172735451}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.934535256410257,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.6953125,"distances_sum":2396.9629336601483}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8644808316683325,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.1328125,"distances_sum":1905.4813417172327}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6904296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6904296875,"f1":0.8072391150516158,"seconds":4.328787326812744e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.6953125,"distances_sum":1678.4477290013845}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8931204212454221,"seconds":5.1818788051605225e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.40625,"distances_sum":2121.5537340220208}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8857421875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8857421875,"f1":0.934535256410257,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.6953125,"distances_sum":2396.9629336601483}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.966185897435898,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.875,"distances_sum":2609.2803227861177}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9498371420246426,"seconds":5.27501106262207e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7421875,"distances_sum":2533.6885331190592}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9395234973359979,"seconds":5.144625902175903e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.734375,"distances_sum":2457.410760597782}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.970890567765568,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9375,"distances_sum":2629.637972592637}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.970890567765568,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9375,"distances_sum":2629.637972592637}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.970890567765568,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9375,"distances_sum":2629.637972592637}}, n: 9
mean(cfft.distances) = 0.3295284857318995
mean(cdnet.distances) = 0.3917512381286085
mean(crand.distances) = 0.3390040858892871
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8533333333333334
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8466666666666667
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.888888888888889
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8733333333333334
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9177777777777778
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9466666666666667
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9133333333333332
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8466666666666667
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9466666666666667
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9355555555555556
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9266666666666667
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9333333333333332
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8911111111111111
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8688888888888888
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8733333333333334
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9199999999999999
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9288888888888889
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8955555555555555
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8866666666666667
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8244444444444444
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9066666666666666
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8822222222222221
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9155555555555556
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9022222222222224
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9044444444444445
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.96
*** finished computation of 12 references, err: [Inf, 0.532485170563062] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 3, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 9, 2]]
** centroid: 6, normalized-entropy: 0.6840384356390419, [(2, 9), (3, 2)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 6, 3]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 6), (3, 3)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 1, 7]]
** centroid: 9, normalized-entropy: 0.5435644431995963, [(2, 1), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 11: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 12, 3]]
** centroid: 12, normalized-entropy: 0.7219280948873623, [(2, 12), (3, 3)]
finished with 16 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.3719334248797214] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719334248797214, 0.2273728065709325] ***
*** starting iteration: 2; err: [Inf, 0.3719334248797214, 0.2273728065709325] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719334248797214, 0.2273728065709325, 0.2257840855457615] ***
*** starting iteration: 3; err: [Inf, 0.3719334248797214, 0.2273728065709325, 0.2257840855457615] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719334248797214, 0.2273728065709325, 0.2257840855457615, 0.22558118774928432] ***
*** finished computation of 3 references, err: [Inf, 0.3719334248797214, 0.2273728065709325, 0.2257840855457615, 0.22558118774928432] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [55, 161, 18]]
** centroid: 1, normalized-entropy: 0.7235585802817183, [(1, 55), (2, 161), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [219, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [137, 77, 0]]
** centroid: 3, normalized-entropy: 0.9425279256576911, [(1, 137), (2, 77)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39451074271115183] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39451074271115183, 0.2310390803059549] ***
*** starting iteration: 2; err: [Inf, 0.39451074271115183, 0.2310390803059549] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39451074271115183, 0.2310390803059549, 0.229470855060747] ***
*** starting iteration: 3; err: [Inf, 0.39451074271115183, 0.2310390803059549, 0.229470855060747] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39451074271115183, 0.2310390803059549, 0.229470855060747, 0.228899163967543] ***
*** finished computation of 3 references, err: [Inf, 0.39451074271115183, 0.2310390803059549, 0.229470855060747, 0.228899163967543] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [236, 15, 0]]
** centroid: 1, normalized-entropy: 0.32649527274151985, [(1, 236), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [170, 41, 0]]
** centroid: 2, normalized-entropy: 0.7104068127225847, [(1, 170), (2, 41)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 184, 21]]
** centroid: 3, normalized-entropy: 0.4766797785647419, [(2, 184), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.45758481597032835] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45758481597032835, 0.2931411187681887] ***
*** finished computation of 3 references, err: [Inf, 0.45758481597032835, 0.2931411187681887] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [81, 139, 17]]
** centroid: 1, normalized-entropy: 0.7908840825580536, [(1, 81), (2, 139), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [125, 99, 0]]
** centroid: 2, normalized-entropy: 0.9902596498672369, [(1, 125), (2, 99)]
*** center 3: selecting labels [1] (freq >= 1) [from [205, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.44408502495139723] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44408502495139723, 0.29352585696007893] ***
*** finished computation of 3 references, err: [Inf, 0.44408502495139723, 0.29352585696007893] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [241, 40, 0]]
** centroid: 1, normalized-entropy: 0.5903570895201603, [(1, 241), (2, 40)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [170, 36, 0]]
** centroid: 2, normalized-entropy: 0.6684725699243225, [(1, 170), (2, 36)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 162, 18]]
** centroid: 3, normalized-entropy: 0.46899559358928133, [(2, 162), (3, 18)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4195696364144335] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4195696364144335, 0.29649320500588666] ***
*** finished computation of 3 references, err: [Inf, 0.4195696364144335, 0.29649320500588666] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [273, 20, 0]]
** centroid: 1, normalized-entropy: 0.359394187634306, [(1, 273), (2, 20)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 173, 21]]
** centroid: 2, normalized-entropy: 0.33973160611910247, [(1, 1), (2, 173), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [132, 47, 0]]
** centroid: 3, normalized-entropy: 0.8305995773527213, [(1, 132), (2, 47)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21478195896361013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21478195896361013, 0.18552733554334208] ***
*** starting iteration: 2; err: [Inf, 0.21478195896361013, 0.18552733554334208] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21478195896361013, 0.18552733554334208, 0.17362578170773973] ***
*** starting iteration: 3; err: [Inf, 0.21478195896361013, 0.18552733554334208, 0.17362578170773973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21478195896361013, 0.18552733554334208, 0.17362578170773973, 0.16772883795845034] ***
*** finished computation of 7 references, err: [Inf, 0.21478195896361013, 0.18552733554334208, 0.17362578170773973, 0.16772883795845034] ***
*** center 1: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 157, 17]]
** centroid: 2, normalized-entropy: 0.4616657609220547, [(2, 157), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [86, 49, 0]]
** centroid: 3, normalized-entropy: 0.945115217302493, [(1, 86), (2, 49)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [110, 26, 0]]
** centroid: 4, normalized-entropy: 0.7039260680195971, [(1, 110), (2, 26)]
*** center 5: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [106, 6, 0]]
** centroid: 7, normalized-entropy: 0.3013786435930858, [(1, 106), (2, 6)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22071767500790207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22071767500790207, 0.17660163899442402] ***
*** starting iteration: 2; err: [Inf, 0.22071767500790207, 0.17660163899442402] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22071767500790207, 0.17660163899442402, 0.1592207962913771] ***
*** starting iteration: 3; err: [Inf, 0.22071767500790207, 0.17660163899442402, 0.1592207962913771] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22071767500790207, 0.17660163899442402, 0.1592207962913771, 0.15371105011700578] ***
*** finished computation of 7 references, err: [Inf, 0.22071767500790207, 0.17660163899442402, 0.1592207962913771, 0.15371105011700578] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 77, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [52, 12, 0]]
** centroid: 2, normalized-entropy: 0.6962122601251459, [(1, 52), (2, 12)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [106, 57, 0]]
** centroid: 3, normalized-entropy: 0.9337938045924925, [(1, 106), (2, 57)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 89, 18]]
** centroid: 4, normalized-entropy: 0.6536265622705767, [(2, 89), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [83, 3, 0]]
** centroid: 5, normalized-entropy: 0.21832103023746746, [(1, 83), (2, 3)]
*** center 6: selecting labels [1] (freq >= 1) [from [119, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19026169828153208] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19026169828153208, 0.15892765361946942] ***
*** starting iteration: 2; err: [Inf, 0.19026169828153208, 0.15892765361946942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19026169828153208, 0.15892765361946942, 0.15369627628659738] ***
*** starting iteration: 3; err: [Inf, 0.19026169828153208, 0.15892765361946942, 0.15369627628659738] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19026169828153208, 0.15892765361946942, 0.15369627628659738, 0.15049042188418635] ***
*** finished computation of 7 references, err: [Inf, 0.19026169828153208, 0.15892765361946942, 0.15369627628659738, 0.15049042188418635] ***
*** center 1: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [21, 67, 0]]
** centroid: 2, normalized-entropy: 0.7927652363756529, [(1, 21), (2, 67)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 111, 21]]
** centroid: 3, normalized-entropy: 0.6321302781219708, [(2, 111), (3, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [84, 3, 0]]
** centroid: 4, normalized-entropy: 0.21639693245126485, [(1, 84), (2, 3)]
*** center 5: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [68, 21, 0]]
** centroid: 6, normalized-entropy: 0.7882487221644084, [(1, 68), (2, 21)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [72, 38, 0]]
** centroid: 7, normalized-entropy: 0.9299429352091801, [(1, 72), (2, 38)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21632399603632885] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21632399603632885, 0.15616912607176303] ***
*** finished computation of 7 references, err: [Inf, 0.21632399603632885, 0.15616912607176303] ***
*** center 1: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 102, 17]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(2, 102), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [55, 26, 0]]
** centroid: 3, normalized-entropy: 0.9054522631867892, [(1, 55), (2, 26)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [74, 33, 0]]
** centroid: 4, normalized-entropy: 0.891330958407023, [(1, 74), (2, 33)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [49, 77, 0]]
** centroid: 5, normalized-entropy: 0.9640787648082293, [(1, 49), (2, 77)]
*** center 6: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19162987311760932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19162987311760932, 0.15414160876423177] ***
*** finished computation of 7 references, err: [Inf, 0.19162987311760932, 0.15414160876423177] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [139, 2, 0]]
** centroid: 1, normalized-entropy: 0.10740377006852724, [(1, 139), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 52, 18]]
** centroid: 2, normalized-entropy: 0.8224042259549892, [(2, 52), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [96, 2, 0]]
** centroid: 3, normalized-entropy: 0.14372616993938164, [(1, 96), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [69, 3, 0]]
** centroid: 4, normalized-entropy: 0.24988229283318547, [(1, 69), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [31, 82, 0]]
** centroid: 5, normalized-entropy: 0.8476183429401788, [(1, 31), (2, 82)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [8, 97, 0]]
** centroid: 6, normalized-entropy: 0.38861174916944274, [(1, 8), (2, 97)]
*** center 7: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19839685197327583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19839685197327583, 0.15528874424309924] ***
*** finished computation of 7 references, err: [Inf, 0.19839685197327583, 0.15528874424309924] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [114, 26, 0]]
** centroid: 1, normalized-entropy: 0.6924194863274741, [(1, 114), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [51, 9, 0]]
** centroid: 2, normalized-entropy: 0.6098403047164005, [(1, 51), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 75, 21]]
** centroid: 3, normalized-entropy: 0.7578784625383954, [(2, 75), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [56, 24, 0]]
** centroid: 5, normalized-entropy: 0.8812908992306927, [(1, 56), (2, 24)]
*** center 6: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [17, 106, 0]]
** centroid: 7, normalized-entropy: 0.5795353469249725, [(1, 17), (2, 106)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.32103010062016435] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32103010062016435, 0.24419197718425467] ***
*** starting iteration: 2; err: [Inf, 0.32103010062016435, 0.24419197718425467] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32103010062016435, 0.24419197718425467, 0.23803190109543726] ***
*** starting iteration: 3; err: [Inf, 0.32103010062016435, 0.24419197718425467, 0.23803190109543726] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32103010062016435, 0.24419197718425467, 0.23803190109543726, 0.23647408782820534] ***
*** starting iteration: 4; err: [Inf, 0.32103010062016435, 0.24419197718425467, 0.23803190109543726, 0.23647408782820534] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32103010062016435, 0.24419197718425467, 0.23803190109543726, 0.23647408782820534, 0.2361739010580846] ***
*** finished computation of 3 references, err: [Inf, 0.32103010062016435, 0.24419197718425467, 0.23803190109543726, 0.23647408782820534, 0.2361739010580846] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [158, 34, 0]]
** centroid: 1, normalized-entropy: 0.673654715229001, [(1, 158), (2, 34)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 192, 17]]
** centroid: 2, normalized-entropy: 0.40688224959419506, [(2, 192), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [253, 12, 0]]
** centroid: 3, normalized-entropy: 0.266011098860696, [(1, 253), (2, 12)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27742335474679897] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27742335474679897, 0.240660580233957] ***
*** starting iteration: 2; err: [Inf, 0.27742335474679897, 0.240660580233957] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27742335474679897, 0.240660580233957, 0.23591817040631696] ***
*** starting iteration: 3; err: [Inf, 0.27742335474679897, 0.240660580233957, 0.23591817040631696] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27742335474679897, 0.240660580233957, 0.23591817040631696, 0.23514097869379455] ***
*** finished computation of 3 references, err: [Inf, 0.27742335474679897, 0.240660580233957, 0.23591817040631696, 0.23514097869379455] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [148, 70, 0]]
** centroid: 1, normalized-entropy: 0.9055746490923751, [(1, 148), (2, 70)]
*** center 2: selecting labels [1] (freq >= 2) [from [251, 1, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [12, 167, 18]]
** centroid: 3, normalized-entropy: 0.4816440603762873, [(1, 12), (2, 167), (3, 18)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3265636468214029] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3265636468214029, 0.2595667458373936] ***
*** starting iteration: 2; err: [Inf, 0.3265636468214029, 0.2595667458373936] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3265636468214029, 0.2595667458373936, 0.23504922777481344] ***
*** starting iteration: 3; err: [Inf, 0.3265636468214029, 0.2595667458373936, 0.23504922777481344] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3265636468214029, 0.2595667458373936, 0.23504922777481344, 0.22838450963378534] ***
*** starting iteration: 4; err: [Inf, 0.3265636468214029, 0.2595667458373936, 0.23504922777481344, 0.22838450963378534] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3265636468214029, 0.2595667458373936, 0.23504922777481344, 0.22838450963378534, 0.22778902301841278] ***
*** finished computation of 3 references, err: [Inf, 0.3265636468214029, 0.2595667458373936, 0.23504922777481344, 0.22838450963378534, 0.22778902301841278] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [12, 184, 21]]
** centroid: 1, normalized-entropy: 0.4787593873106066, [(1, 12), (2, 184), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [150, 56, 0]]
** centroid: 2, normalized-entropy: 0.844099171796772, [(1, 150), (2, 56)]
*** center 3: selecting labels [1] (freq >= 2) [from [244, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2851065441801048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2851065441801048, 0.22748773090028157] ***
*** starting iteration: 2; err: [Inf, 0.2851065441801048, 0.22748773090028157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2851065441801048, 0.22748773090028157, 0.21439956844988484] ***
*** starting iteration: 3; err: [Inf, 0.2851065441801048, 0.22748773090028157, 0.21439956844988484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2851065441801048, 0.22748773090028157, 0.21439956844988484, 0.2092973530661684] ***
*** starting iteration: 4; err: [Inf, 0.2851065441801048, 0.22748773090028157, 0.21439956844988484, 0.2092973530661684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2851065441801048, 0.22748773090028157, 0.21439956844988484, 0.2092973530661684, 0.2057159637512119] ***
*** starting iteration: 5; err: [Inf, 0.2851065441801048, 0.22748773090028157, 0.21439956844988484, 0.2092973530661684, 0.2057159637512119] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2851065441801048, 0.22748773090028157, 0.21439956844988484, 0.2092973530661684, 0.2057159637512119, 0.19921085696287072] ***
*** starting iteration: 6; err: [Inf, 0.2851065441801048, 0.22748773090028157, 0.21439956844988484, 0.2092973530661684, 0.2057159637512119, 0.19921085696287072] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2851065441801048, 0.22748773090028157, 0.21439956844988484, 0.2092973530661684, 0.2057159637512119, 0.19921085696287072, 0.19348284589509862] ***
*** starting iteration: 7; err: [Inf, 0.2851065441801048, 0.22748773090028157, 0.21439956844988484, 0.2092973530661684, 0.2057159637512119, 0.19921085696287072, 0.19348284589509862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2851065441801048, 0.22748773090028157, 0.21439956844988484, 0.2092973530661684, 0.2057159637512119, 0.19921085696287072, 0.19348284589509862, 0.19047840782539086] ***
*** starting iteration: 8; err: [Inf, 0.2851065441801048, 0.22748773090028157, 0.21439956844988484, 0.2092973530661684, 0.2057159637512119, 0.19921085696287072, 0.19348284589509862, 0.19047840782539086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2851065441801048, 0.22748773090028157, 0.21439956844988484, 0.2092973530661684, 0.2057159637512119, 0.19921085696287072, 0.19348284589509862, 0.19047840782539086, 0.18940869679075997] ***
*** starting iteration: 9; err: [Inf, 0.2851065441801048, 0.22748773090028157, 0.21439956844988484, 0.2092973530661684, 0.2057159637512119, 0.19921085696287072, 0.19348284589509862, 0.19047840782539086, 0.18940869679075997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2851065441801048, 0.22748773090028157, 0.21439956844988484, 0.2092973530661684, 0.2057159637512119, 0.19921085696287072, 0.19348284589509862, 0.19047840782539086, 0.18940869679075997, 0.18887824369258843] ***
*** finished computation of 7 references, err: [Inf, 0.2851065441801048, 0.22748773090028157, 0.21439956844988484, 0.2092973530661684, 0.2057159637512119, 0.19921085696287072, 0.19348284589509862, 0.19047840782539086, 0.18940869679075997, 0.18887824369258843] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [64, 22, 0]]
** centroid: 1, normalized-entropy: 0.8203636429576731, [(1, 64), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [110, 19, 0]]
** centroid: 2, normalized-entropy: 0.6030087186547216, [(1, 110), (2, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [73, 30, 0]]
** centroid: 3, normalized-entropy: 0.8703460546929581, [(1, 73), (2, 30)]
*** center 4: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 85, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 82, 17]]
** centroid: 6, normalized-entropy: 0.6616179061408356, [(2, 82), (3, 17)]
*** center 7: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.33381864376299114] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33381864376299114, 0.22360208757850725] ***
*** starting iteration: 2; err: [Inf, 0.33381864376299114, 0.22360208757850725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33381864376299114, 0.22360208757850725, 0.20082860164807878] ***
*** starting iteration: 3; err: [Inf, 0.33381864376299114, 0.22360208757850725, 0.20082860164807878] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33381864376299114, 0.22360208757850725, 0.20082860164807878, 0.1935559598375754] ***
*** starting iteration: 4; err: [Inf, 0.33381864376299114, 0.22360208757850725, 0.20082860164807878, 0.1935559598375754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33381864376299114, 0.22360208757850725, 0.20082860164807878, 0.1935559598375754, 0.19028766640508057] ***
*** starting iteration: 5; err: [Inf, 0.33381864376299114, 0.22360208757850725, 0.20082860164807878, 0.1935559598375754, 0.19028766640508057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33381864376299114, 0.22360208757850725, 0.20082860164807878, 0.1935559598375754, 0.19028766640508057, 0.1890082558940934] ***
*** starting iteration: 6; err: [Inf, 0.33381864376299114, 0.22360208757850725, 0.20082860164807878, 0.1935559598375754, 0.19028766640508057, 0.1890082558940934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33381864376299114, 0.22360208757850725, 0.20082860164807878, 0.1935559598375754, 0.19028766640508057, 0.1890082558940934, 0.18888540327900843] ***
*** finished computation of 7 references, err: [Inf, 0.33381864376299114, 0.22360208757850725, 0.20082860164807878, 0.1935559598375754, 0.19028766640508057, 0.1890082558940934, 0.18888540327900843] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [105, 18, 0]]
** centroid: 1, normalized-entropy: 0.6006085754131871, [(1, 105), (2, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 94, 17]]
** centroid: 3, normalized-entropy: 0.6176751423955683, [(2, 94), (3, 17)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [29, 26, 0]]
** centroid: 4, normalized-entropy: 0.9978527766088781, [(1, 29), (2, 26)]
*** center 5: selecting labels [1] (freq >= 1) [from [125, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [61, 31, 0]]
** centroid: 6, normalized-entropy: 0.9218764863469129, [(1, 61), (2, 31)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 69, 1]]
** centroid: 7, normalized-entropy: 0.10802319526362848, [(2, 69), (3, 1)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22676502638185786] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22676502638185786, 0.19815908623733622] ***
*** starting iteration: 2; err: [Inf, 0.22676502638185786, 0.19815908623733622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22676502638185786, 0.19815908623733622, 0.19459288357861754] ***
*** starting iteration: 3; err: [Inf, 0.22676502638185786, 0.19815908623733622, 0.19459288357861754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22676502638185786, 0.19815908623733622, 0.19459288357861754, 0.19345045599365968] ***
*** starting iteration: 4; err: [Inf, 0.22676502638185786, 0.19815908623733622, 0.19459288357861754, 0.19345045599365968] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22676502638185786, 0.19815908623733622, 0.19459288357861754, 0.19345045599365968, 0.19219428169746314] ***
*** starting iteration: 5; err: [Inf, 0.22676502638185786, 0.19815908623733622, 0.19459288357861754, 0.19345045599365968, 0.19219428169746314] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22676502638185786, 0.19815908623733622, 0.19459288357861754, 0.19345045599365968, 0.19219428169746314, 0.190586325766259] ***
*** starting iteration: 6; err: [Inf, 0.22676502638185786, 0.19815908623733622, 0.19459288357861754, 0.19345045599365968, 0.19219428169746314, 0.190586325766259] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22676502638185786, 0.19815908623733622, 0.19459288357861754, 0.19345045599365968, 0.19219428169746314, 0.190586325766259, 0.189608426796722] ***
*** finished computation of 7 references, err: [Inf, 0.22676502638185786, 0.19815908623733622, 0.19459288357861754, 0.19345045599365968, 0.19219428169746314, 0.190586325766259, 0.189608426796722] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [79, 26, 0]]
** centroid: 1, normalized-entropy: 0.8074825483550796, [(1, 79), (2, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 72, 21]]
** centroid: 3, normalized-entropy: 0.7706290693639406, [(2, 72), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [29, 71, 0]]
** centroid: 5, normalized-entropy: 0.8687212463394044, [(1, 29), (2, 71)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [15, 71, 0]]
** centroid: 6, normalized-entropy: 0.6677135405281421, [(1, 15), (2, 71)]
*** center 7: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19085406712550032] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19085406712550032, 0.16528398461790905] ***
*** finished computation of 7 references, err: [Inf, 0.19085406712550032, 0.16528398461790905] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [30, 15, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 30), (2, 15)]
*** center 2: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [55, 98, 1]]
** centroid: 3, normalized-entropy: 0.9422483069596669, [(1, 55), (2, 98)]
*** center 4: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [101, 4, 0]]
** centroid: 5, normalized-entropy: 0.23348971044772968, [(1, 101), (2, 4)]
*** center 6: selecting labels [1, 2, 3] (freq >= 2) [from [3, 121, 16]]
** centroid: 6, normalized-entropy: 0.4153423328761593, [(1, 3), (2, 121), (3, 16)]
*** center 7: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19618185800311716] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19618185800311716, 0.15387095228351397] ***
*** finished computation of 7 references, err: [Inf, 0.19618185800311716, 0.15387095228351397] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 40, 17]]
** centroid: 1, normalized-entropy: 0.8791357668533337, [(2, 40), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [74, 11, 0]]
** centroid: 2, normalized-entropy: 0.5558227377664954, [(1, 74), (2, 11)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [132, 3, 0]]
** centroid: 3, normalized-entropy: 0.1537421803287618, [(1, 132), (2, 3)]
*** center 4: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [1, 71, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 101, 1]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [114, 12, 0]]
** centroid: 7, normalized-entropy: 0.45371633918694493, [(1, 114), (2, 12)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20221293843009214] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20221293843009214, 0.1634964975088589] ***
*** finished computation of 7 references, err: [Inf, 0.20221293843009214, 0.1634964975088589] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [92, 37, 0]]
** centroid: 1, normalized-entropy: 0.8645801663882439, [(1, 92), (2, 37)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 99, 20]]
** centroid: 2, normalized-entropy: 0.6532642567060226, [(2, 99), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [2, 66, 1]]
** centroid: 3, normalized-entropy: 0.1914332548141934, [(1, 2), (2, 66)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [127, 4, 0]]
** centroid: 4, normalized-entropy: 0.1970645647430604, [(1, 127), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 34, 0]]
** centroid: 5, normalized-entropy: 0.6098403047164005, [(1, 6), (2, 34)]
*** center 6: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.48305306339205745] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.48305306339205745, 0.2968954594334582] ***
*** finished computation of 3 references, err: [Inf, 0.48305306339205745, 0.2968954594334582] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [126, 145, 17]]
** centroid: 1, normalized-entropy: 0.7957326442522454, [(1, 126), (2, 145), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [91, 93, 0]]
** centroid: 2, normalized-entropy: 0.999914772953055, [(1, 91), (2, 93)]
*** center 3: selecting labels [1] (freq >= 2) [from [194, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3952755557828355] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3952755557828355, 0.31565427118311934] ***
*** finished computation of 3 references, err: [Inf, 0.3952755557828355, 0.31565427118311934] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [151, 178, 18]]
** centroid: 1, normalized-entropy: 0.7809754974441901, [(1, 151), (2, 178), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [100, 60, 0]]
** centroid: 2, normalized-entropy: 0.954434002924965, [(1, 100), (2, 60)]
*** center 3: selecting labels [1] (freq >= 2) [from [160, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3657682114971922] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3657682114971922, 0.3062636662229918] ***
*** finished computation of 3 references, err: [Inf, 0.3657682114971922, 0.3062636662229918] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [289, 54, 0]]
** centroid: 1, normalized-entropy: 0.628136348215018, [(1, 289), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [117, 38, 0]]
** centroid: 2, normalized-entropy: 0.8035184846154337, [(1, 117), (2, 38)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 148, 21]]
** centroid: 3, normalized-entropy: 0.5414843830784061, [(2, 148), (3, 21)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3548442768156752] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3548442768156752, 0.3020631759777083] ***
*** finished computation of 3 references, err: [Inf, 0.3548442768156752, 0.3020631759777083] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [65, 116, 17]]
** centroid: 1, normalized-entropy: 0.8098398882783459, [(1, 65), (2, 116), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [159, 122, 0]]
** centroid: 2, normalized-entropy: 0.9874571206732937, [(1, 159), (2, 122)]
*** center 3: selecting labels [1] (freq >= 2) [from [187, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4997885673358545] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4997885673358545, 0.34199755584801556] ***
*** finished computation of 3 references, err: [Inf, 0.4997885673358545, 0.34199755584801556] ***
*** center 1: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [152, 28, 0]]
** centroid: 2, normalized-entropy: 0.6235702082127973, [(1, 152), (2, 28)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [151, 210, 18]]
** centroid: 3, normalized-entropy: 0.763250465830793, [(1, 151), (2, 210), (3, 18)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3275942995842697] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3275942995842697, 0.29701585918134343] ***
*** finished computation of 3 references, err: [Inf, 0.3275942995842697, 0.29701585918134343] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [251, 17, 0]]
** centroid: 1, normalized-entropy: 0.3409238906708338, [(1, 251), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [155, 47, 0]]
** centroid: 2, normalized-entropy: 0.7826423795520137, [(1, 155), (2, 47)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 176, 21]]
** centroid: 3, normalized-entropy: 0.48957146027608056, [(2, 176), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4284090830387922] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4284090830387922, 0.34100036243887133] ***
*** starting iteration: 2; err: [Inf, 0.4284090830387922, 0.34100036243887133] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4284090830387922, 0.34100036243887133, 0.33349590601998047] ***
*** starting iteration: 3; err: [Inf, 0.4284090830387922, 0.34100036243887133, 0.33349590601998047] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4284090830387922, 0.34100036243887133, 0.33349590601998047, 0.32988133608131437] ***
*** finished computation of 3 references, err: [Inf, 0.4284090830387922, 0.34100036243887133, 0.33349590601998047, 0.32988133608131437] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [239, 32, 0]]
** centroid: 1, normalized-entropy: 0.5238200114372703, [(1, 239), (2, 32)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [43, 115, 17]]
** centroid: 2, normalized-entropy: 0.7712281101243815, [(1, 43), (2, 115), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [129, 91, 0]]
** centroid: 3, normalized-entropy: 0.9783704943988363, [(1, 129), (2, 91)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5219784732405348] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5219784732405348, 0.3174128357790176] ***
*** starting iteration: 2; err: [Inf, 0.5219784732405348, 0.3174128357790176] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5219784732405348, 0.3174128357790176, 0.29514173456611503] ***
*** starting iteration: 3; err: [Inf, 0.5219784732405348, 0.3174128357790176, 0.29514173456611503] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5219784732405348, 0.3174128357790176, 0.29514173456611503, 0.2898902558795605] ***
*** finished computation of 3 references, err: [Inf, 0.5219784732405348, 0.3174128357790176, 0.29514173456611503, 0.2898902558795605] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [182, 55, 0]]
** centroid: 1, normalized-entropy: 0.7815980642568288, [(1, 182), (2, 55)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [225, 2, 0]]
** centroid: 2, normalized-entropy: 0.07280061053394002, [(1, 225), (2, 2)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [4, 181, 18]]
** centroid: 3, normalized-entropy: 0.35907808434964167, [(1, 4), (2, 181), (3, 18)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3545493456776599] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3545493456776599, 0.3070429400198798] ***
*** starting iteration: 2; err: [Inf, 0.3545493456776599, 0.3070429400198798] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3545493456776599, 0.3070429400198798, 0.28903361760649543] ***
*** starting iteration: 3; err: [Inf, 0.3545493456776599, 0.3070429400198798, 0.28903361760649543] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3545493456776599, 0.3070429400198798, 0.28903361760649543, 0.289027077368233] ***
*** finished computation of 3 references, err: [Inf, 0.3545493456776599, 0.3070429400198798, 0.28903361760649543, 0.289027077368233] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [237, 13, 0]]
** centroid: 1, normalized-entropy: 0.2948328193632006, [(1, 237), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [169, 45, 0]]
** centroid: 2, normalized-entropy: 0.7420183225388829, [(1, 169), (2, 45)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 182, 21]]
** centroid: 3, normalized-entropy: 0.47983202361612853, [(2, 182), (3, 21)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.1957133257443116] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1957133257443116, 0.15557952235975825] ***
*** starting iteration: 2; err: [Inf, 0.1957133257443116, 0.15557952235975825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1957133257443116, 0.15557952235975825, 0.15166571804227214] ***
*** starting iteration: 3; err: [Inf, 0.1957133257443116, 0.15557952235975825, 0.15166571804227214] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1957133257443116, 0.15557952235975825, 0.15166571804227214, 0.15066365835777074] ***
*** starting iteration: 4; err: [Inf, 0.1957133257443116, 0.15557952235975825, 0.15166571804227214, 0.15066365835777074] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1957133257443116, 0.15557952235975825, 0.15166571804227214, 0.15066365835777074, 0.15004500302181276] ***
*** finished computation of 7 references, err: [Inf, 0.1957133257443116, 0.15557952235975825, 0.15166571804227214, 0.15066365835777074, 0.15004500302181276] ***
*** center 1: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 79, 17]]
** centroid: 2, normalized-entropy: 0.673654715229001, [(2, 79), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [79, 2, 0]]
** centroid: 3, normalized-entropy: 0.16702680404522793, [(1, 79), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [79, 25, 0]]
** centroid: 4, normalized-entropy: 0.7956792965030224, [(1, 79), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [33, 51, 0]]
** centroid: 5, normalized-entropy: 0.9666186325481027, [(1, 33), (2, 51)]
*** center 6: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 81, 0]]
** centroid: 7, normalized-entropy: 0.2222848306856879, [(1, 3), (2, 81)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19846588275391844] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19846588275391844, 0.15805634868232118] ***
*** starting iteration: 2; err: [Inf, 0.19846588275391844, 0.15805634868232118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19846588275391844, 0.15805634868232118, 0.15203723946559722] ***
*** starting iteration: 3; err: [Inf, 0.19846588275391844, 0.15805634868232118, 0.15203723946559722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19846588275391844, 0.15805634868232118, 0.15203723946559722, 0.15065683952059367] ***
*** starting iteration: 4; err: [Inf, 0.19846588275391844, 0.15805634868232118, 0.15203723946559722, 0.15065683952059367] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19846588275391844, 0.15805634868232118, 0.15203723946559722, 0.15065683952059367, 0.15020812887731924] ***
*** finished computation of 7 references, err: [Inf, 0.19846588275391844, 0.15805634868232118, 0.15203723946559722, 0.15065683952059367, 0.15020812887731924] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [4, 91, 0]]
** centroid: 1, normalized-entropy: 0.25186284771956524, [(1, 4), (2, 91)]
*** center 2: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [66, 32, 0]]
** centroid: 3, normalized-entropy: 0.9113423759758414, [(1, 66), (2, 32)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [55, 43, 0]]
** centroid: 4, normalized-entropy: 0.9891571023188154, [(1, 55), (2, 43)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 71, 18]]
** centroid: 5, normalized-entropy: 0.7263997735417457, [(2, 71), (3, 18)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [98, 1, 0]]
** centroid: 6, normalized-entropy: 0.08146202691505994, [(1, 98), (2, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19841427347208115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19841427347208115, 0.15496344163851894] ***
*** starting iteration: 2; err: [Inf, 0.19841427347208115, 0.15496344163851894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19841427347208115, 0.15496344163851894, 0.15142989275359858] ***
*** starting iteration: 3; err: [Inf, 0.19841427347208115, 0.15496344163851894, 0.15142989275359858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19841427347208115, 0.15496344163851894, 0.15142989275359858, 0.15066216201165403] ***
*** finished computation of 7 references, err: [Inf, 0.19841427347208115, 0.15496344163851894, 0.15142989275359858, 0.15066216201165403] ***
*** center 1: selecting labels [1] (freq >= 1) [from [134, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 73, 21]]
** centroid: 2, normalized-entropy: 0.7663350359691776, [(2, 73), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [52, 22, 0]]
** centroid: 3, normalized-entropy: 0.8779620013943914, [(1, 52), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [92, 1, 0]]
** centroid: 4, normalized-entropy: 0.0857426825355026, [(1, 92), (2, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [37, 68, 0]]
** centroid: 5, normalized-entropy: 0.9361764916347493, [(1, 37), (2, 68)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [5, 76, 0]]
** centroid: 6, normalized-entropy: 0.33426813256179383, [(1, 5), (2, 76)]
*** center 7: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.34234163775713555] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34234163775713555, 0.23328898897025366] ***
*** starting iteration: 2; err: [Inf, 0.34234163775713555, 0.23328898897025366] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34234163775713555, 0.23328898897025366, 0.22903497285816493] ***
*** starting iteration: 3; err: [Inf, 0.34234163775713555, 0.23328898897025366, 0.22903497285816493] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34234163775713555, 0.23328898897025366, 0.22903497285816493, 0.22833931875518626] ***
*** finished computation of 3 references, err: [Inf, 0.34234163775713555, 0.23328898897025366, 0.22903497285816493, 0.22833931875518626] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [63, 166, 17]]
** centroid: 1, normalized-entropy: 0.7272273800920237, [(1, 63), (2, 166), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [217, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [131, 72, 0]]
** centroid: 3, normalized-entropy: 0.9381782161740805, [(1, 131), (2, 72)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 13)
[0.9470188751625878, 0.931029832227437, 0.9310118501735268, 0.9169888451325576, 0.9100178022333711, 0.9090197982413551, 0.9039788291285298, 0.8940167712622803, 0.8899977822133511, 0.8840097582612553, 0.8800417183650717, 0.7950195704686722, 0.7879825933718149]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9470188751625878
finished with 15
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.3559524364742889] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3559524364742889, 0.24521645662226565] ***
*** starting iteration: 2; err: [Inf, 0.3559524364742889, 0.24521645662226565] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3559524364742889, 0.24521645662226565, 0.23171529228248083] ***
*** starting iteration: 3; err: [Inf, 0.3559524364742889, 0.24521645662226565, 0.23171529228248083] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3559524364742889, 0.24521645662226565, 0.23171529228248083, 0.22968182399695566] ***
*** finished computation of 3 references, err: [Inf, 0.3559524364742889, 0.24521645662226565, 0.23171529228248083, 0.22968182399695566] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [249, 8, 0]]
** centroid: 1, normalized-entropy: 0.20001956442752727, [(1, 249), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [162, 45, 0]]
** centroid: 2, normalized-entropy: 0.7553754125614286, [(1, 162), (2, 45)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 185, 17]]
** centroid: 3, normalized-entropy: 0.4166647575202427, [(2, 185), (3, 17)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31743918578077607] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31743918578077607, 0.23212075607524416] ***
*** starting iteration: 2; err: [Inf, 0.31743918578077607, 0.23212075607524416] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31743918578077607, 0.23212075607524416, 0.22703108737437888] ***
*** starting iteration: 3; err: [Inf, 0.31743918578077607, 0.23212075607524416, 0.22703108737437888] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31743918578077607, 0.23212075607524416, 0.22703108737437888, 0.22643977397776346] ***
*** finished computation of 3 references, err: [Inf, 0.31743918578077607, 0.23212075607524416, 0.22703108737437888, 0.22643977397776346] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [32, 169, 18]]
** centroid: 1, normalized-entropy: 0.6247964574773117, [(1, 32), (2, 169), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [233, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [146, 69, 0]]
** centroid: 3, normalized-entropy: 0.9053901839421292, [(1, 146), (2, 69)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2787047092575228] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2787047092575228, 0.24115073504387172] ***
*** starting iteration: 2; err: [Inf, 0.2787047092575228, 0.24115073504387172] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2787047092575228, 0.24115073504387172, 0.23444656838943576] ***
*** starting iteration: 3; err: [Inf, 0.2787047092575228, 0.24115073504387172, 0.23444656838943576] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2787047092575228, 0.24115073504387172, 0.23444656838943576, 0.23285222260178118] ***
*** finished computation of 3 references, err: [Inf, 0.2787047092575228, 0.24115073504387172, 0.23444656838943576, 0.23285222260178118] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [114, 95, 1]]
** centroid: 1, normalized-entropy: 0.9940302114769566, [(1, 114), (2, 95)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [101, 145, 20]]
** centroid: 2, normalized-entropy: 0.8128566595306632, [(1, 101), (2, 145), (3, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [191, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.45074358546698057] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45074358546698057, 0.33361063030892396] ***
*** starting iteration: 2; err: [Inf, 0.45074358546698057, 0.33361063030892396] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45074358546698057, 0.33361063030892396, 0.33122038426207706] ***
*** starting iteration: 3; err: [Inf, 0.45074358546698057, 0.33361063030892396, 0.33122038426207706] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45074358546698057, 0.33361063030892396, 0.33122038426207706, 0.3300815753466743] ***
*** finished computation of 3 references, err: [Inf, 0.45074358546698057, 0.33361063030892396, 0.33122038426207706, 0.3300815753466743] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [112, 160, 17]]
** centroid: 1, normalized-entropy: 0.7840435405400447, [(1, 112), (2, 160), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [145, 78, 0]]
** centroid: 2, normalized-entropy: 0.9338676527300768, [(1, 145), (2, 78)]
*** center 3: selecting labels [1] (freq >= 2) [from [154, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32156920845507236] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32156920845507236, 0.2921610523941696] ***
*** starting iteration: 2; err: [Inf, 0.32156920845507236, 0.2921610523941696] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32156920845507236, 0.2921610523941696, 0.2880375058120717] ***
*** starting iteration: 3; err: [Inf, 0.32156920845507236, 0.2921610523941696, 0.2880375058120717] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32156920845507236, 0.2921610523941696, 0.2880375058120717, 0.28564742781330776] ***
*** finished computation of 3 references, err: [Inf, 0.32156920845507236, 0.2921610523941696, 0.2880375058120717, 0.28564742781330776] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [62, 143, 18]]
** centroid: 1, normalized-entropy: 0.7682072095803401, [(1, 62), (2, 143), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [220, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [129, 95, 0]]
** centroid: 3, normalized-entropy: 0.983316534820819, [(1, 129), (2, 95)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3592822623007681] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3592822623007681, 0.3038141138892135] ***
*** starting iteration: 2; err: [Inf, 0.3592822623007681, 0.3038141138892135] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3592822623007681, 0.3038141138892135, 0.29249389624332023] ***
*** starting iteration: 3; err: [Inf, 0.3592822623007681, 0.3038141138892135, 0.29249389624332023] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3592822623007681, 0.3038141138892135, 0.29249389624332023, 0.28984230738049416] ***
*** finished computation of 3 references, err: [Inf, 0.3592822623007681, 0.3038141138892135, 0.29249389624332023, 0.28984230738049416] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [251, 18, 0]]
** centroid: 1, normalized-entropy: 0.35430220617147395, [(1, 251), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [155, 41, 0]]
** centroid: 2, normalized-entropy: 0.7399194614272068, [(1, 155), (2, 41)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 181, 21]]
** centroid: 3, normalized-entropy: 0.4814254855220218, [(2, 181), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9470188751625878, 0.931029832227437, 0.9310118501735268, 0.9240078401755049, 0.9169888451325576, 0.9100178022333711, 0.9090377802952653, 0.9090197982413551, 0.9039788291285298, 0.8940167712622803, 0.8899977822133511, 0.8840097582612553, 0.8800417183650717, 0.7950195704686722, 0.7879825933718149]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9470188751625878
finished with 16
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.24028660925496173] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24028660925496173, 0.19647523436438422] ***
*** finished computation of 7 references, err: [Inf, 0.24028660925496173, 0.19647523436438422] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [98, 36, 0]]
** centroid: 1, normalized-entropy: 0.8395304981054318, [(1, 98), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [49, 11, 0]]
** centroid: 2, normalized-entropy: 0.6873150928309273, [(1, 49), (2, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 92, 18]]
** centroid: 4, normalized-entropy: 0.6429383500409613, [(2, 92), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [22, 84, 0]]
** centroid: 5, normalized-entropy: 0.7367680100024784, [(1, 22), (2, 84)]
*** center 6: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [47, 15, 0]]
** centroid: 7, normalized-entropy: 0.7982441335646697, [(1, 47), (2, 15)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2499917824445446] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2499917824445446, 0.1993170918846528] ***
*** finished computation of 7 references, err: [Inf, 0.2499917824445446, 0.1993170918846528] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [16, 105, 0]]
** centroid: 1, normalized-entropy: 0.5635262178122566, [(1, 16), (2, 105)]
*** center 2: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 30, 0]]
** centroid: 3, normalized-entropy: 0.9145891955877994, [(1, 61), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 35, 0]]
** centroid: 4, normalized-entropy: 0.961236604722876, [(1, 56), (2, 35)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 70, 21]]
** centroid: 5, normalized-entropy: 0.7793498372920851, [(2, 70), (3, 21)]
*** center 6: selecting labels [1] (freq >= 1) [from [126, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23017906009809705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23017906009809705, 0.1950193302979967] ***
*** finished computation of 7 references, err: [Inf, 0.23017906009809705, 0.1950193302979967] ***
*** center 1: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 68, 17]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 68), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [81, 36, 0]]
** centroid: 3, normalized-entropy: 0.8904916402194913, [(1, 81), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [50, 17, 0]]
** centroid: 4, normalized-entropy: 0.8171387756817725, [(1, 50), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [7, 111, 0]]
** centroid: 5, normalized-entropy: 0.3247477475036634, [(1, 7), (2, 111)]
*** center 6: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [102, 6, 0]]
** centroid: 7, normalized-entropy: 0.3095434291503252, [(1, 102), (2, 6)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 16)
[0.9470188751625878, 0.931029832227437, 0.9310118501735268, 0.9240078401755049, 0.9169888451325576, 0.9100178022333711, 0.9090377802952653, 0.9090197982413551, 0.9039788291285298, 0.8940167712622803, 0.8899977822133511, 0.8840097582612553, 0.8800417183650717, 0.8750037462612313, 0.7950195704686722, 0.7879825933718149]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9470188751625878
finished with 17
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.28770929887644703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28770929887644703, 0.207713186352125] ***
*** starting iteration: 2; err: [Inf, 0.28770929887644703, 0.207713186352125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28770929887644703, 0.207713186352125, 0.19482195827069584] ***
*** starting iteration: 3; err: [Inf, 0.28770929887644703, 0.207713186352125, 0.19482195827069584] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28770929887644703, 0.207713186352125, 0.19482195827069584, 0.1908379782077943] ***
*** finished computation of 7 references, err: [Inf, 0.28770929887644703, 0.207713186352125, 0.19482195827069584, 0.1908379782077943] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [109, 9, 0]]
** centroid: 1, normalized-entropy: 0.388902232296877, [(1, 109), (2, 9)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 62, 17]]
** centroid: 2, normalized-entropy: 0.751286576718343, [(2, 62), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [77, 20, 0]]
** centroid: 3, normalized-entropy: 0.7341280428958428, [(1, 77), (2, 20)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 89, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [17, 58, 0]]
** centroid: 6, normalized-entropy: 0.7721551435804817, [(1, 17), (2, 58)]
*** center 7: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2865501292764783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2865501292764783, 0.2082554682980346] ***
*** starting iteration: 2; err: [Inf, 0.2865501292764783, 0.2082554682980346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2865501292764783, 0.2082554682980346, 0.19488206748729167] ***
*** starting iteration: 3; err: [Inf, 0.2865501292764783, 0.2082554682980346, 0.19488206748729167] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2865501292764783, 0.2082554682980346, 0.19488206748729167, 0.19067471254703547] ***
*** finished computation of 7 references, err: [Inf, 0.2865501292764783, 0.2082554682980346, 0.19488206748729167, 0.19067471254703547] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [87, 37, 0]]
** centroid: 1, normalized-entropy: 0.8793103533940488, [(1, 87), (2, 37)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 80, 4]]
** centroid: 2, normalized-entropy: 0.2761954276479391, [(2, 80), (3, 4)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [46, 44, 0]]
** centroid: 3, normalized-entropy: 0.9996437496778561, [(1, 46), (2, 44)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 61, 14]]
** centroid: 4, normalized-entropy: 0.6944460704939805, [(2, 61), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [90, 16, 0]]
** centroid: 5, normalized-entropy: 0.612196127490834, [(1, 90), (2, 16)]
*** center 6: selecting labels [1] (freq >= 1) [from [118, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26237362257248237] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26237362257248237, 0.20382760769675026] ***
*** starting iteration: 2; err: [Inf, 0.26237362257248237, 0.20382760769675026] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26237362257248237, 0.20382760769675026, 0.19406425257351645] ***
*** starting iteration: 3; err: [Inf, 0.26237362257248237, 0.20382760769675026, 0.19406425257351645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26237362257248237, 0.20382760769675026, 0.19406425257351645, 0.19136046868437592] ***
*** finished computation of 7 references, err: [Inf, 0.26237362257248237, 0.20382760769675026, 0.19406425257351645, 0.19136046868437592] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 66, 20]]
** centroid: 1, normalized-entropy: 0.7824441294066888, [(2, 66), (3, 20)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 104, 1]]
** centroid: 2, normalized-entropy: 0.07761951112637416, [(2, 104), (3, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [111, 6, 0]]
** centroid: 3, normalized-entropy: 0.29181825659888555, [(1, 111), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [82, 6, 0]]
** centroid: 4, normalized-entropy: 0.3591016256485496, [(1, 82), (2, 6)]
*** center 5: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [95, 41, 0]]
** centroid: 6, normalized-entropy: 0.8830811134504757, [(1, 95), (2, 41)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [39, 17, 0]]
** centroid: 7, normalized-entropy: 0.8856128713989709, [(1, 39), (2, 17)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 17)
[0.9470188751625878, 0.931029832227437, 0.9310178441914969, 0.9310118501735268, 0.9240078401755049, 0.9169888451325576, 0.9100178022333711, 0.9090377802952653, 0.9090197982413551, 0.9039788291285298, 0.8940167712622803, 0.8899977822133511, 0.8840097582612553, 0.8800417183650717, 0.8750037462612313, 0.7950195704686722, 0.7879825933718149]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9470188751625878
finished with 18
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.280121178809531] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.280121178809531, 0.19442202777856285] ***
*** starting iteration: 2; err: [Inf, 0.280121178809531, 0.19442202777856285] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.280121178809531, 0.19442202777856285, 0.17278106517211586] ***
*** starting iteration: 3; err: [Inf, 0.280121178809531, 0.19442202777856285, 0.17278106517211586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.280121178809531, 0.19442202777856285, 0.17278106517211586, 0.16386584890027484] ***
*** starting iteration: 4; err: [Inf, 0.280121178809531, 0.19442202777856285, 0.17278106517211586, 0.16386584890027484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.280121178809531, 0.19442202777856285, 0.17278106517211586, 0.16386584890027484, 0.15972218118599607] ***
*** starting iteration: 5; err: [Inf, 0.280121178809531, 0.19442202777856285, 0.17278106517211586, 0.16386584890027484, 0.15972218118599607] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.280121178809531, 0.19442202777856285, 0.17278106517211586, 0.16386584890027484, 0.15972218118599607, 0.15714352312651617] ***
*** starting iteration: 6; err: [Inf, 0.280121178809531, 0.19442202777856285, 0.17278106517211586, 0.16386584890027484, 0.15972218118599607, 0.15714352312651617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.280121178809531, 0.19442202777856285, 0.17278106517211586, 0.16386584890027484, 0.15972218118599607, 0.15714352312651617, 0.15510959963400936] ***
*** starting iteration: 7; err: [Inf, 0.280121178809531, 0.19442202777856285, 0.17278106517211586, 0.16386584890027484, 0.15972218118599607, 0.15714352312651617, 0.15510959963400936] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.280121178809531, 0.19442202777856285, 0.17278106517211586, 0.16386584890027484, 0.15972218118599607, 0.15714352312651617, 0.15510959963400936, 0.1533377007881946] ***
*** starting iteration: 8; err: [Inf, 0.280121178809531, 0.19442202777856285, 0.17278106517211586, 0.16386584890027484, 0.15972218118599607, 0.15714352312651617, 0.15510959963400936, 0.1533377007881946] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.280121178809531, 0.19442202777856285, 0.17278106517211586, 0.16386584890027484, 0.15972218118599607, 0.15714352312651617, 0.15510959963400936, 0.1533377007881946, 0.15255435944154477] ***
*** finished computation of 7 references, err: [Inf, 0.280121178809531, 0.19442202777856285, 0.17278106517211586, 0.16386584890027484, 0.15972218118599607, 0.15714352312651617, 0.15510959963400936, 0.1533377007881946, 0.15255435944154477] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [58, 49, 0]]
** centroid: 1, normalized-entropy: 0.9948905370642835, [(1, 58), (2, 49)]
*** center 2: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [72, 26, 0]]
** centroid: 3, normalized-entropy: 0.834648285181383, [(1, 72), (2, 26)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 135, 17]]
** centroid: 4, normalized-entropy: 0.5054474219757044, [(2, 135), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [83, 28, 0]]
** centroid: 5, normalized-entropy: 0.8148283832923793, [(1, 83), (2, 28)]
*** center 6: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.32639713560522854] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32639713560522854, 0.18878395083560043] ***
*** starting iteration: 2; err: [Inf, 0.32639713560522854, 0.18878395083560043] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32639713560522854, 0.18878395083560043, 0.16766262313244917] ***
*** starting iteration: 3; err: [Inf, 0.32639713560522854, 0.18878395083560043, 0.16766262313244917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32639713560522854, 0.18878395083560043, 0.16766262313244917, 0.16132546610281295] ***
*** starting iteration: 4; err: [Inf, 0.32639713560522854, 0.18878395083560043, 0.16766262313244917, 0.16132546610281295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32639713560522854, 0.18878395083560043, 0.16766262313244917, 0.16132546610281295, 0.15696696204313454] ***
*** starting iteration: 5; err: [Inf, 0.32639713560522854, 0.18878395083560043, 0.16766262313244917, 0.16132546610281295, 0.15696696204313454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32639713560522854, 0.18878395083560043, 0.16766262313244917, 0.16132546610281295, 0.15696696204313454, 0.15420277521986028] ***
*** starting iteration: 6; err: [Inf, 0.32639713560522854, 0.18878395083560043, 0.16766262313244917, 0.16132546610281295, 0.15696696204313454, 0.15420277521986028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32639713560522854, 0.18878395083560043, 0.16766262313244917, 0.16132546610281295, 0.15696696204313454, 0.15420277521986028, 0.15208848788925883] ***
*** starting iteration: 7; err: [Inf, 0.32639713560522854, 0.18878395083560043, 0.16766262313244917, 0.16132546610281295, 0.15696696204313454, 0.15420277521986028, 0.15208848788925883] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32639713560522854, 0.18878395083560043, 0.16766262313244917, 0.16132546610281295, 0.15696696204313454, 0.15420277521986028, 0.15208848788925883, 0.15033639615996444] ***
*** starting iteration: 8; err: [Inf, 0.32639713560522854, 0.18878395083560043, 0.16766262313244917, 0.16132546610281295, 0.15696696204313454, 0.15420277521986028, 0.15208848788925883, 0.15033639615996444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32639713560522854, 0.18878395083560043, 0.16766262313244917, 0.16132546610281295, 0.15696696204313454, 0.15420277521986028, 0.15208848788925883, 0.15033639615996444, 0.14940221869087228] ***
*** finished computation of 7 references, err: [Inf, 0.32639713560522854, 0.18878395083560043, 0.16766262313244917, 0.16132546610281295, 0.15696696204313454, 0.15420277521986028, 0.15208848788925883, 0.15033639615996444, 0.14940221869087228] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [90, 41, 0]]
** centroid: 1, normalized-entropy: 0.8965801705526247, [(1, 90), (2, 41)]
*** center 2: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 104, 18]]
** centroid: 4, normalized-entropy: 0.603652249754401, [(2, 104), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [14, 66, 0]]
** centroid: 5, normalized-entropy: 0.6690158350565576, [(1, 14), (2, 66)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [56, 27, 0]]
** centroid: 6, normalized-entropy: 0.9100534290139191, [(1, 56), (2, 27)]
*** center 7: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20483157750794376] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20483157750794376, 0.15503454699168454] ***
*** starting iteration: 2; err: [Inf, 0.20483157750794376, 0.15503454699168454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20483157750794376, 0.15503454699168454, 0.14988520048346476] ***
*** starting iteration: 3; err: [Inf, 0.20483157750794376, 0.15503454699168454, 0.14988520048346476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20483157750794376, 0.15503454699168454, 0.14988520048346476, 0.14766643456123332] ***
*** starting iteration: 4; err: [Inf, 0.20483157750794376, 0.15503454699168454, 0.14988520048346476, 0.14766643456123332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20483157750794376, 0.15503454699168454, 0.14988520048346476, 0.14766643456123332, 0.146658423591986] ***
*** starting iteration: 5; err: [Inf, 0.20483157750794376, 0.15503454699168454, 0.14988520048346476, 0.14766643456123332, 0.146658423591986] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20483157750794376, 0.15503454699168454, 0.14988520048346476, 0.14766643456123332, 0.146658423591986, 0.14634552780284674] ***
*** finished computation of 7 references, err: [Inf, 0.20483157750794376, 0.15503454699168454, 0.14988520048346476, 0.14766643456123332, 0.146658423591986, 0.14634552780284674] ***
*** center 1: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [86, 24, 0]]
** centroid: 2, normalized-entropy: 0.7568336324184036, [(1, 86), (2, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [62, 4, 0]]
** centroid: 3, normalized-entropy: 0.32984607020714635, [(1, 62), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 44, 0]]
** centroid: 4, normalized-entropy: 0.9709505944546688, [(1, 66), (2, 44)]
*** center 5: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 88, 21]]
** centroid: 6, normalized-entropy: 0.70700406497476, [(2, 88), (3, 21)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 80, 0]]
** centroid: 7, normalized-entropy: 0.16542703399626665, [(1, 2), (2, 80)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 18)
[0.9470188751625878, 0.931029832227437, 0.9310178441914969, 0.9310118501735268, 0.9259948571325817, 0.9240078401755049, 0.9169888451325576, 0.9100178022333711, 0.9090377802952653, 0.9090197982413551, 0.9039788291285298, 0.8940167712622803, 0.8899977822133511, 0.8840097582612553, 0.8800417183650717, 0.8750037462612313, 0.7950195704686722, 0.7879825933718149]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9470188751625878
finished with 18
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9470188751625878, 0.931029832227437, 0.9310178441914969, 0.9310118501735268, 0.9259948571325817, 0.9240078401755049, 0.9169888451325576, 0.9100178022333711, 0.9090377802952653, 0.9090197982413551, 0.9039788291285298, 0.8940167712622803, 0.8899977822133511, 0.8840097582612553, 0.8800417183650717, 0.8750037462612313, 0.7950195704686722, 0.7879825933718149]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9470188751625878
finished with 18
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9470188751625878, 0.931029832227437, 0.9310178441914969, 0.9310118501735268, 0.9259948571325817, 0.9240078401755049, 0.9169888451325576, 0.9100178022333711, 0.9090377802952653, 0.9090197982413551, 0.9039788291285298, 0.8940167712622803, 0.8899977822133511, 0.8840097582612553, 0.8800417183650717, 0.8750037462612313, 0.7950195704686722, 0.7879825933718149]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9470188751625878
finished with 18
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9470188751625878, 0.931029832227437, 0.9310178441914969, 0.9310118501735268, 0.9259948571325817, 0.9240078401755049, 0.9169888451325576, 0.9100178022333711, 0.9090377802952653, 0.9090197982413551, 0.9039788291285298, 0.8940167712622803, 0.8899977822133511, 0.8840097582612553, 0.8800417183650717, 0.8750037462612313, 0.7950195704686722, 0.7879825933718149]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9470188751625878
finished with 18
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.18598296863143332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18598296863143332, 0.15491224147146568] ***
*** starting iteration: 2; err: [Inf, 0.18598296863143332, 0.15491224147146568] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18598296863143332, 0.15491224147146568, 0.15006160491798073] ***
*** starting iteration: 3; err: [Inf, 0.18598296863143332, 0.15491224147146568, 0.15006160491798073] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18598296863143332, 0.15491224147146568, 0.15006160491798073, 0.14877472077705897] ***
*** starting iteration: 4; err: [Inf, 0.18598296863143332, 0.15491224147146568, 0.15006160491798073, 0.14877472077705897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18598296863143332, 0.15491224147146568, 0.15006160491798073, 0.14877472077705897, 0.14830883712717333] ***
*** finished computation of 7 references, err: [Inf, 0.18598296863143332, 0.15491224147146568, 0.15006160491798073, 0.14877472077705897, 0.14830883712717333] ***
*** center 1: selecting labels [1] (freq >= 1) [from [198, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 90, 28]]
** centroid: 2, normalized-entropy: 0.7905013842153699, [(2, 90), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [116, 18, 0]]
** centroid: 3, normalized-entropy: 0.569190343735683, [(1, 116), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [127, 8, 0]]
** centroid: 4, normalized-entropy: 0.32449741023553424, [(1, 127), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [21, 124, 0]]
** centroid: 5, normalized-entropy: 0.5967435150747519, [(1, 21), (2, 124)]
*** center 6: selecting labels [1] (freq >= 1) [from [147, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 118, 0]]
** centroid: 7, normalized-entropy: 0.2452663728259548, [(1, 5), (2, 118)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1927326761400327] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1927326761400327, 0.15194190581236033] ***
*** starting iteration: 2; err: [Inf, 0.1927326761400327, 0.15194190581236033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1927326761400327, 0.15194190581236033, 0.1482624534741044] ***
*** starting iteration: 3; err: [Inf, 0.1927326761400327, 0.15194190581236033, 0.1482624534741044] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1927326761400327, 0.15194190581236033, 0.1482624534741044, 0.14783917695749552] ***
*** finished computation of 7 references, err: [Inf, 0.1927326761400327, 0.15194190581236033, 0.1482624534741044, 0.14783917695749552] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 70, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [53, 16, 0]]
** centroid: 2, normalized-entropy: 0.7812812090702043, [(1, 53), (2, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 76, 14]]
** centroid: 4, normalized-entropy: 0.6235702082127973, [(2, 76), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [71, 13, 0]]
** centroid: 5, normalized-entropy: 0.6216297820565386, [(1, 71), (2, 13)]
*** center 6: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [32, 11, 0]]
** centroid: 7, normalized-entropy: 0.8203636429576731, [(1, 32), (2, 11)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18527768905181438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18527768905181438, 0.15171855181083083] ***
*** starting iteration: 2; err: [Inf, 0.18527768905181438, 0.15171855181083083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18527768905181438, 0.15171855181083083, 0.1494708769414574] ***
*** starting iteration: 3; err: [Inf, 0.18527768905181438, 0.15171855181083083, 0.1494708769414574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18527768905181438, 0.15171855181083083, 0.1494708769414574, 0.14868599198758603] ***
*** finished computation of 7 references, err: [Inf, 0.18527768905181438, 0.15171855181083083, 0.1494708769414574, 0.14868599198758603] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [58, 1, 0]]
** centroid: 1, normalized-entropy: 0.12394986771100755, [(1, 58), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [53, 8, 0]]
** centroid: 2, normalized-entropy: 0.5605769426145328, [(1, 53), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 47, 17]]
** centroid: 3, normalized-entropy: 0.8351164948421137, [(2, 47), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 64, 0]]
** centroid: 5, normalized-entropy: 0.8865408928220899, [(1, 28), (2, 64)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [5, 62, 0]]
** centroid: 6, normalized-entropy: 0.3829576722723533, [(1, 5), (2, 62)]
*** center 7: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20100409499369562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20100409499369562, 0.15942924370989203] ***
*** starting iteration: 2; err: [Inf, 0.20100409499369562, 0.15942924370989203] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20100409499369562, 0.15942924370989203, 0.15495765072107315] ***
*** starting iteration: 3; err: [Inf, 0.20100409499369562, 0.15942924370989203, 0.15495765072107315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20100409499369562, 0.15942924370989203, 0.15495765072107315, 0.15376681685447693] ***
*** starting iteration: 4; err: [Inf, 0.20100409499369562, 0.15942924370989203, 0.15495765072107315, 0.15376681685447693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20100409499369562, 0.15942924370989203, 0.15495765072107315, 0.15376681685447693, 0.15288951618224383] ***
*** finished computation of 7 references, err: [Inf, 0.20100409499369562, 0.15942924370989203, 0.15495765072107315, 0.15376681685447693, 0.15288951618224383] ***
*** center 1: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 59, 11]]
** centroid: 2, normalized-entropy: 0.6274303352684106, [(2, 59), (3, 11)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 7, 0]]
** centroid: 3, normalized-entropy: 0.5564215672884282, [(1, 47), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [86, 25, 0]]
** centroid: 4, normalized-entropy: 0.7695944821271463, [(1, 86), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 32, 0]]
** centroid: 5, normalized-entropy: 0.9967916319816367, [(1, 28), (2, 32)]
*** center 6: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 51, 1]]
** centroid: 7, normalized-entropy: 0.13709947889981755, [(2, 51), (3, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2014637369569391] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2014637369569391, 0.15552479279600084] ***
*** starting iteration: 2; err: [Inf, 0.2014637369569391, 0.15552479279600084] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2014637369569391, 0.15552479279600084, 0.1478136619227007] ***
*** starting iteration: 3; err: [Inf, 0.2014637369569391, 0.15552479279600084, 0.1478136619227007] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2014637369569391, 0.15552479279600084, 0.1478136619227007, 0.14590021431818603] ***
*** starting iteration: 4; err: [Inf, 0.2014637369569391, 0.15552479279600084, 0.1478136619227007, 0.14590021431818603] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2014637369569391, 0.15552479279600084, 0.1478136619227007, 0.14590021431818603, 0.14523509471211582] ***
*** finished computation of 7 references, err: [Inf, 0.2014637369569391, 0.15552479279600084, 0.1478136619227007, 0.14590021431818603, 0.14523509471211582] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [54, 17, 0]]
** centroid: 1, normalized-entropy: 0.7941021417852022, [(1, 54), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 7, 0]]
** centroid: 2, normalized-entropy: 0.54991090463341, [(1, 48), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 70, 13]]
** centroid: 3, normalized-entropy: 0.6261776539736496, [(2, 70), (3, 13)]
*** center 4: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [72, 20, 0]]
** centroid: 5, normalized-entropy: 0.7553754125614286, [(1, 72), (2, 20)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 66, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19815798466093837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19815798466093837, 0.15829538273997604] ***
*** starting iteration: 2; err: [Inf, 0.19815798466093837, 0.15829538273997604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19815798466093837, 0.15829538273997604, 0.1523268901426345] ***
*** starting iteration: 3; err: [Inf, 0.19815798466093837, 0.15829538273997604, 0.1523268901426345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19815798466093837, 0.15829538273997604, 0.1523268901426345, 0.15005061378981918] ***
*** starting iteration: 4; err: [Inf, 0.19815798466093837, 0.15829538273997604, 0.1523268901426345, 0.15005061378981918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19815798466093837, 0.15829538273997604, 0.1523268901426345, 0.15005061378981918, 0.14795160379633307] ***
*** starting iteration: 5; err: [Inf, 0.19815798466093837, 0.15829538273997604, 0.1523268901426345, 0.15005061378981918, 0.14795160379633307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19815798466093837, 0.15829538273997604, 0.1523268901426345, 0.15005061378981918, 0.14795160379633307, 0.14702500228816642] ***
*** finished computation of 7 references, err: [Inf, 0.19815798466093837, 0.15829538273997604, 0.1523268901426345, 0.15005061378981918, 0.14795160379633307, 0.14702500228816642] ***
*** center 1: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [47, 7, 0]]
** centroid: 2, normalized-entropy: 0.5564215672884282, [(1, 47), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 69, 11]]
** centroid: 3, normalized-entropy: 0.5776539033535634, [(2, 69), (3, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [51, 21, 0]]
** centroid: 4, normalized-entropy: 0.8708644692353648, [(1, 51), (2, 21)]
*** center 5: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 77, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18573765250295401] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18573765250295401, 0.1537403789013624] ***
*** starting iteration: 2; err: [Inf, 0.18573765250295401, 0.1537403789013624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18573765250295401, 0.1537403789013624, 0.14908483030460776] ***
*** starting iteration: 3; err: [Inf, 0.18573765250295401, 0.1537403789013624, 0.14908483030460776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18573765250295401, 0.1537403789013624, 0.14908483030460776, 0.14758631740370765] ***
*** starting iteration: 4; err: [Inf, 0.18573765250295401, 0.1537403789013624, 0.14908483030460776, 0.14758631740370765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18573765250295401, 0.1537403789013624, 0.14908483030460776, 0.14758631740370765, 0.14621381279826165] ***
*** starting iteration: 5; err: [Inf, 0.18573765250295401, 0.1537403789013624, 0.14908483030460776, 0.14758631740370765, 0.14621381279826165] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18573765250295401, 0.1537403789013624, 0.14908483030460776, 0.14758631740370765, 0.14621381279826165, 0.14512603254057466] ***
*** starting iteration: 6; err: [Inf, 0.18573765250295401, 0.1537403789013624, 0.14908483030460776, 0.14758631740370765, 0.14621381279826165, 0.14512603254057466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18573765250295401, 0.1537403789013624, 0.14908483030460776, 0.14758631740370765, 0.14621381279826165, 0.14512603254057466, 0.14423442366160452] ***
*** finished computation of 7 references, err: [Inf, 0.18573765250295401, 0.1537403789013624, 0.14908483030460776, 0.14758631740370765, 0.14621381279826165, 0.14512603254057466, 0.14423442366160452] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 68, 18]]
** centroid: 1, normalized-entropy: 0.7401470427139037, [(2, 68), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [55, 7, 0]]
** centroid: 3, normalized-entropy: 0.5086113313826895, [(1, 55), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [48, 11, 0]]
** centroid: 4, normalized-entropy: 0.693965967334286, [(1, 48), (2, 11)]
*** center 5: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 69, 1]]
** centroid: 6, normalized-entropy: 0.10802319526362848, [(2, 69), (3, 1)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [60, 18, 0]]
** centroid: 7, normalized-entropy: 0.7793498372920851, [(1, 60), (2, 18)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18728252967819572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18728252967819572, 0.14885966008901597] ***
*** starting iteration: 2; err: [Inf, 0.18728252967819572, 0.14885966008901597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18728252967819572, 0.14885966008901597, 0.14316232648491858] ***
*** starting iteration: 3; err: [Inf, 0.18728252967819572, 0.14885966008901597, 0.14316232648491858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18728252967819572, 0.14885966008901597, 0.14316232648491858, 0.14239510774146766] ***
*** finished computation of 7 references, err: [Inf, 0.18728252967819572, 0.14885966008901597, 0.14316232648491858, 0.14239510774146766] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 82, 1]]
** centroid: 1, normalized-entropy: 0.09408443883267342, [(2, 82), (3, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [61, 18, 0]]
** centroid: 2, normalized-entropy: 0.7742411580847273, [(1, 61), (2, 18)]
*** center 3: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [70, 13, 0]]
** centroid: 4, normalized-entropy: 0.6261776539736496, [(1, 70), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [37, 8, 0]]
** centroid: 5, normalized-entropy: 0.6751914401458716, [(1, 37), (2, 8)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 65, 8]]
** centroid: 6, normalized-entropy: 0.4986751363204345, [(2, 65), (3, 8)]
*** center 7: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19441234525223264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19441234525223264, 0.15587107938993722] ***
*** starting iteration: 2; err: [Inf, 0.19441234525223264, 0.15587107938993722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19441234525223264, 0.15587107938993722, 0.1493012340646237] ***
*** starting iteration: 3; err: [Inf, 0.19441234525223264, 0.15587107938993722, 0.1493012340646237] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19441234525223264, 0.15587107938993722, 0.1493012340646237, 0.14798487646318972] ***
*** starting iteration: 4; err: [Inf, 0.19441234525223264, 0.15587107938993722, 0.1493012340646237, 0.14798487646318972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19441234525223264, 0.15587107938993722, 0.1493012340646237, 0.14798487646318972, 0.1475147692114115] ***
*** finished computation of 7 references, err: [Inf, 0.19441234525223264, 0.15587107938993722, 0.1493012340646237, 0.14798487646318972, 0.1475147692114115] ***
*** center 1: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 59, 16]]
** centroid: 3, normalized-entropy: 0.7478061583312324, [(2, 59), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [47, 21, 0]]
** centroid: 5, normalized-entropy: 0.8918107543797084, [(1, 47), (2, 21)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [15, 45, 0]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(1, 15), (2, 45)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [10, 56, 0]]
** centroid: 7, normalized-entropy: 0.6136190195993708, [(1, 10), (2, 56)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19522481085150503] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19522481085150503, 0.15413781299069523] ***
*** starting iteration: 2; err: [Inf, 0.19522481085150503, 0.15413781299069523] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19522481085150503, 0.15413781299069523, 0.148762364376802] ***
*** starting iteration: 3; err: [Inf, 0.19522481085150503, 0.15413781299069523, 0.148762364376802] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19522481085150503, 0.15413781299069523, 0.148762364376802, 0.14765262385644018] ***
*** starting iteration: 4; err: [Inf, 0.19522481085150503, 0.15413781299069523, 0.148762364376802, 0.14765262385644018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19522481085150503, 0.15413781299069523, 0.148762364376802, 0.14765262385644018, 0.14725306595489382] ***
*** finished computation of 7 references, err: [Inf, 0.19522481085150503, 0.15413781299069523, 0.148762364376802, 0.14765262385644018, 0.14725306595489382] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [67, 1, 0]]
** centroid: 1, normalized-entropy: 0.11058084476988722, [(1, 67), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [66, 15, 0]]
** centroid: 2, normalized-entropy: 0.6912898694057888, [(1, 66), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 44, 18]]
** centroid: 3, normalized-entropy: 0.8691375806126381, [(2, 44), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [26, 50, 0]]
** centroid: 5, normalized-entropy: 0.9268190639645774, [(1, 26), (2, 50)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 67, 0]]
** centroid: 6, normalized-entropy: 0.11058084476988722, [(1, 1), (2, 67)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [42, 5, 0]]
** centroid: 7, normalized-entropy: 0.48890859144051524, [(1, 42), (2, 5)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21183233554009348] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21183233554009348, 0.14673018400371074] ***
*** starting iteration: 2; err: [Inf, 0.21183233554009348, 0.14673018400371074] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21183233554009348, 0.14673018400371074, 0.14227002087421714] ***
*** starting iteration: 3; err: [Inf, 0.21183233554009348, 0.14673018400371074, 0.14227002087421714] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21183233554009348, 0.14673018400371074, 0.14227002087421714, 0.1420318373516202] ***
*** finished computation of 7 references, err: [Inf, 0.21183233554009348, 0.14673018400371074, 0.14227002087421714, 0.1420318373516202] ***
*** center 1: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 60, 12]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(2, 60), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [39, 5, 0]]
** centroid: 3, normalized-entropy: 0.5107878229540133, [(1, 39), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [89, 14, 0]]
** centroid: 4, normalized-entropy: 0.5734593207286953, [(1, 89), (2, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [39, 34, 0]]
** centroid: 5, normalized-entropy: 0.9966132830150962, [(1, 39), (2, 34)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 60, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21160353934578596] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21160353934578596, 0.15324274454079567] ***
*** starting iteration: 2; err: [Inf, 0.21160353934578596, 0.15324274454079567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21160353934578596, 0.15324274454079567, 0.14838434151839464] ***
*** starting iteration: 3; err: [Inf, 0.21160353934578596, 0.15324274454079567, 0.14838434151839464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21160353934578596, 0.15324274454079567, 0.14838434151839464, 0.1477466070279479] ***
*** finished computation of 7 references, err: [Inf, 0.21160353934578596, 0.15324274454079567, 0.14838434151839464, 0.1477466070279479] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 59, 18]]
** centroid: 1, normalized-entropy: 0.7845191388986644, [(2, 59), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [51, 9, 0]]
** centroid: 3, normalized-entropy: 0.6098403047164005, [(1, 51), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [58, 28, 0]]
** centroid: 4, normalized-entropy: 0.9103480624345157, [(1, 58), (2, 28)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [36, 28, 0]]
** centroid: 5, normalized-entropy: 0.9886994082884974, [(1, 36), (2, 28)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 62, 0]]
** centroid: 6, normalized-entropy: 0.269828447703074, [(1, 3), (2, 62)]
*** center 7: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19524184004031123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19524184004031123, 0.15309366501308977] ***
*** starting iteration: 2; err: [Inf, 0.19524184004031123, 0.15309366501308977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19524184004031123, 0.15309366501308977, 0.1480150853805244] ***
*** starting iteration: 3; err: [Inf, 0.19524184004031123, 0.15309366501308977, 0.1480150853805244] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19524184004031123, 0.15309366501308977, 0.1480150853805244, 0.1469093812732026] ***
*** starting iteration: 4; err: [Inf, 0.19524184004031123, 0.15309366501308977, 0.1480150853805244, 0.1469093812732026] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19524184004031123, 0.15309366501308977, 0.1480150853805244, 0.1469093812732026, 0.14605964621203021] ***
*** finished computation of 7 references, err: [Inf, 0.19524184004031123, 0.15309366501308977, 0.1480150853805244, 0.1469093812732026, 0.14605964621203021] ***
*** center 1: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [71, 9, 0]]
** centroid: 2, normalized-entropy: 0.5074109636646968, [(1, 71), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 44, 15]]
** centroid: 3, normalized-entropy: 0.8179252501386403, [(2, 44), (3, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [30, 53, 0]]
** centroid: 5, normalized-entropy: 0.9438767571287909, [(1, 30), (2, 53)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 60, 0]]
** centroid: 6, normalized-entropy: 0.12068101401352371, [(1, 1), (2, 60)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [30, 8, 0]]
** centroid: 7, normalized-entropy: 0.7424875695421234, [(1, 30), (2, 8)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19182344550825656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19182344550825656, 0.15107288305088878] ***
*** starting iteration: 2; err: [Inf, 0.19182344550825656, 0.15107288305088878] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19182344550825656, 0.15107288305088878, 0.14597253100760282] ***
*** starting iteration: 3; err: [Inf, 0.19182344550825656, 0.15107288305088878, 0.14597253100760282] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19182344550825656, 0.15107288305088878, 0.14597253100760282, 0.14481705947220325] ***
*** starting iteration: 4; err: [Inf, 0.19182344550825656, 0.15107288305088878, 0.14597253100760282, 0.14481705947220325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19182344550825656, 0.15107288305088878, 0.14597253100760282, 0.14481705947220325, 0.1442897262275219] ***
*** finished computation of 7 references, err: [Inf, 0.19182344550825656, 0.15107288305088878, 0.14597253100760282, 0.14481705947220325, 0.1442897262275219] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [84, 5, 0]]
** centroid: 1, normalized-entropy: 0.3120895659343452, [(1, 84), (2, 5)]
*** center 2: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 45, 15]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 45), (3, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [79, 4, 0]]
** centroid: 5, normalized-entropy: 0.27866980356389914, [(1, 79), (2, 4)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 65, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 64, 0]]
** centroid: 7, normalized-entropy: 0.19590927087360496, [(1, 2), (2, 64)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19081774597335607] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19081774597335607, 0.15144354479387404] ***
*** starting iteration: 2; err: [Inf, 0.19081774597335607, 0.15144354479387404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19081774597335607, 0.15144354479387404, 0.14489830999076367] ***
*** starting iteration: 3; err: [Inf, 0.19081774597335607, 0.15144354479387404, 0.14489830999076367] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19081774597335607, 0.15144354479387404, 0.14489830999076367, 0.1439130898769945] ***
*** finished computation of 7 references, err: [Inf, 0.19081774597335607, 0.15144354479387404, 0.14489830999076367, 0.1439130898769945] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [2, 69, 0]]
** centroid: 1, normalized-entropy: 0.18512476010054582, [(1, 2), (2, 69)]
*** center 2: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [57, 23, 0]]
** centroid: 3, normalized-entropy: 0.8654698974285927, [(1, 57), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [36, 19, 0]]
** centroid: 4, normalized-entropy: 0.9299429352091801, [(1, 36), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [81, 3, 0]]
** centroid: 5, normalized-entropy: 0.2222848306856879, [(1, 81), (2, 3)]
*** center 6: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 52, 15]]
** centroid: 7, normalized-entropy: 0.7671903206448686, [(2, 52), (3, 15)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19614288000948726] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19614288000948726, 0.15243251610733569] ***
*** starting iteration: 2; err: [Inf, 0.19614288000948726, 0.15243251610733569] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19614288000948726, 0.15243251610733569, 0.14661520297080277] ***
*** starting iteration: 3; err: [Inf, 0.19614288000948726, 0.15243251610733569, 0.14661520297080277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19614288000948726, 0.15243251610733569, 0.14661520297080277, 0.1450924110561609] ***
*** starting iteration: 4; err: [Inf, 0.19614288000948726, 0.15243251610733569, 0.14661520297080277, 0.1450924110561609] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19614288000948726, 0.15243251610733569, 0.14661520297080277, 0.1450924110561609, 0.1445012465082109] ***
*** finished computation of 7 references, err: [Inf, 0.19614288000948726, 0.15243251610733569, 0.14661520297080277, 0.1450924110561609, 0.1445012465082109] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [75, 2, 0]]
** centroid: 1, normalized-entropy: 0.17378132267943294, [(1, 75), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [55, 9, 0]]
** centroid: 2, normalized-entropy: 0.5858732928619204, [(1, 55), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 56, 10]]
** centroid: 3, normalized-entropy: 0.6136190195993708, [(2, 56), (3, 10)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [38, 39, 0]]
** centroid: 4, normalized-entropy: 0.9998783322990061, [(1, 38), (2, 39)]
*** center 5: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 83, 0]]
** centroid: 6, normalized-entropy: 0.2690553027246505, [(1, 4), (2, 83)]
*** center 7: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20730815837532282] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20730815837532282, 0.1550308678392321] ***
*** starting iteration: 2; err: [Inf, 0.20730815837532282, 0.1550308678392321] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20730815837532282, 0.1550308678392321, 0.14901585567556322] ***
*** starting iteration: 3; err: [Inf, 0.20730815837532282, 0.1550308678392321, 0.14901585567556322] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20730815837532282, 0.1550308678392321, 0.14901585567556322, 0.1477789725586772] ***
*** starting iteration: 4; err: [Inf, 0.20730815837532282, 0.1550308678392321, 0.14901585567556322, 0.1477789725586772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20730815837532282, 0.1550308678392321, 0.14901585567556322, 0.1477789725586772, 0.14762256300356238] ***
*** finished computation of 7 references, err: [Inf, 0.20730815837532282, 0.1550308678392321, 0.14901585567556322, 0.1477789725586772, 0.14762256300356238] ***
*** center 1: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 50, 12]]
** centroid: 2, normalized-entropy: 0.708835673332196, [(2, 50), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [57, 5, 0]]
** centroid: 3, normalized-entropy: 0.4044483864864384, [(1, 57), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [54, 20, 0]]
** centroid: 4, normalized-entropy: 0.8418521897563208, [(1, 54), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [26, 37, 0]]
** centroid: 5, normalized-entropy: 0.9778956822310348, [(1, 26), (2, 37)]
*** center 6: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 60, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19255635536275803] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19255635536275803, 0.15726371202990413] ***
*** starting iteration: 2; err: [Inf, 0.19255635536275803, 0.15726371202990413] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19255635536275803, 0.15726371202990413, 0.1520809218659997] ***
*** starting iteration: 3; err: [Inf, 0.19255635536275803, 0.15726371202990413, 0.1520809218659997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19255635536275803, 0.15726371202990413, 0.1520809218659997, 0.15063054585270583] ***
*** starting iteration: 4; err: [Inf, 0.19255635536275803, 0.15726371202990413, 0.1520809218659997, 0.15063054585270583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19255635536275803, 0.15726371202990413, 0.1520809218659997, 0.15063054585270583, 0.14930939197167753] ***
*** starting iteration: 5; err: [Inf, 0.19255635536275803, 0.15726371202990413, 0.1520809218659997, 0.15063054585270583, 0.14930939197167753] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19255635536275803, 0.15726371202990413, 0.1520809218659997, 0.15063054585270583, 0.14930939197167753, 0.14812548924796284] ***
*** starting iteration: 6; err: [Inf, 0.19255635536275803, 0.15726371202990413, 0.1520809218659997, 0.15063054585270583, 0.14930939197167753, 0.14812548924796284] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19255635536275803, 0.15726371202990413, 0.1520809218659997, 0.15063054585270583, 0.14930939197167753, 0.14812548924796284, 0.14780279030650853] ***
*** finished computation of 7 references, err: [Inf, 0.19255635536275803, 0.15726371202990413, 0.1520809218659997, 0.15063054585270583, 0.14930939197167753, 0.14812548924796284, 0.14780279030650853] ***
*** center 1: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [78, 3, 0]]
** centroid: 2, normalized-entropy: 0.22853814395352806, [(1, 78), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 52, 15]]
** centroid: 3, normalized-entropy: 0.7671903206448686, [(2, 52), (3, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [61, 12, 0]]
** centroid: 5, normalized-entropy: 0.644694043811662, [(1, 61), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [38, 50, 0]]
** centroid: 6, normalized-entropy: 0.9865446300055647, [(1, 38), (2, 50)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 55, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19344910252653064] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19344910252653064, 0.1541479083299637] ***
*** starting iteration: 2; err: [Inf, 0.19344910252653064, 0.1541479083299637] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19344910252653064, 0.1541479083299637, 0.1477659280952066] ***
*** starting iteration: 3; err: [Inf, 0.19344910252653064, 0.1541479083299637, 0.1477659280952066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19344910252653064, 0.1541479083299637, 0.1477659280952066, 0.14647928390279413] ***
*** starting iteration: 4; err: [Inf, 0.19344910252653064, 0.1541479083299637, 0.1477659280952066, 0.14647928390279413] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19344910252653064, 0.1541479083299637, 0.1477659280952066, 0.14647928390279413, 0.1459070719666779] ***
*** finished computation of 7 references, err: [Inf, 0.19344910252653064, 0.1541479083299637, 0.1477659280952066, 0.14647928390279413, 0.1459070719666779] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [31, 32, 0]]
** centroid: 1, normalized-entropy: 0.9998182469603427, [(1, 31), (2, 32)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [61, 13, 0]]
** centroid: 2, normalized-entropy: 0.6705250693158382, [(1, 61), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 56, 15]]
** centroid: 3, normalized-entropy: 0.743898745288434, [(2, 56), (3, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [1, 64, 0]]
** centroid: 5, normalized-entropy: 0.11467550533614682, [(1, 1), (2, 64)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [48, 14, 0]]
** centroid: 6, normalized-entropy: 0.7706290693639406, [(1, 48), (2, 14)]
*** center 7: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1817445293664932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1817445293664932, 0.15459381842333825] ***
*** starting iteration: 2; err: [Inf, 0.1817445293664932, 0.15459381842333825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1817445293664932, 0.15459381842333825, 0.15187802366167308] ***
*** starting iteration: 3; err: [Inf, 0.1817445293664932, 0.15459381842333825, 0.15187802366167308] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1817445293664932, 0.15459381842333825, 0.15187802366167308, 0.15039226524485275] ***
*** starting iteration: 4; err: [Inf, 0.1817445293664932, 0.15459381842333825, 0.15187802366167308, 0.15039226524485275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1817445293664932, 0.15459381842333825, 0.15187802366167308, 0.15039226524485275, 0.14897855326533319] ***
*** starting iteration: 5; err: [Inf, 0.1817445293664932, 0.15459381842333825, 0.15187802366167308, 0.15039226524485275, 0.14897855326533319] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1817445293664932, 0.15459381842333825, 0.15187802366167308, 0.15039226524485275, 0.14897855326533319, 0.14846824214048684] ***
*** finished computation of 7 references, err: [Inf, 0.1817445293664932, 0.15459381842333825, 0.15187802366167308, 0.15039226524485275, 0.14897855326533319, 0.14846824214048684] ***
*** center 1: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 54, 17]]
** centroid: 2, normalized-entropy: 0.7941021417852022, [(2, 54), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [62, 2, 0]]
** centroid: 3, normalized-entropy: 0.2006223243127146, [(1, 62), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 24, 0]]
** centroid: 4, normalized-entropy: 0.8812908992306927, [(1, 56), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [19, 48, 0]]
** centroid: 5, normalized-entropy: 0.8602858652332406, [(1, 19), (2, 48)]
*** center 6: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [10, 46, 0]]
** centroid: 7, normalized-entropy: 0.6769418697808861, [(1, 10), (2, 46)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1928681525264401] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1928681525264401, 0.1535778829753399] ***
*** starting iteration: 2; err: [Inf, 0.1928681525264401, 0.1535778829753399] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1928681525264401, 0.1535778829753399, 0.14893973639979957] ***
*** starting iteration: 3; err: [Inf, 0.1928681525264401, 0.1535778829753399, 0.14893973639979957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1928681525264401, 0.1535778829753399, 0.14893973639979957, 0.14656160162761808] ***
*** starting iteration: 4; err: [Inf, 0.1928681525264401, 0.1535778829753399, 0.14893973639979957, 0.14656160162761808] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1928681525264401, 0.1535778829753399, 0.14893973639979957, 0.14656160162761808, 0.14557898152433335] ***
*** finished computation of 7 references, err: [Inf, 0.1928681525264401, 0.1535778829753399, 0.14893973639979957, 0.14656160162761808, 0.14557898152433335] ***
*** center 1: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 65, 11]]
** centroid: 2, normalized-entropy: 0.5965109917085881, [(2, 65), (3, 11)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [58, 3, 0]]
** centroid: 3, normalized-entropy: 0.28290479297989196, [(1, 58), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [65, 18, 0]]
** centroid: 4, normalized-entropy: 0.7544062039636575, [(1, 65), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [32, 27, 0]]
** centroid: 5, normalized-entropy: 0.9948131754904235, [(1, 32), (2, 27)]
*** center 6: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 70, 0]]
** centroid: 7, normalized-entropy: 0.18312206830137262, [(1, 2), (2, 70)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1831155143287033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1831155143287033, 0.1526348994579166] ***
*** starting iteration: 2; err: [Inf, 0.1831155143287033, 0.1526348994579166] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1831155143287033, 0.1526348994579166, 0.14875382682867347] ***
*** starting iteration: 3; err: [Inf, 0.1831155143287033, 0.1526348994579166, 0.14875382682867347] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1831155143287033, 0.1526348994579166, 0.14875382682867347, 0.1478203418906778] ***
*** finished computation of 7 references, err: [Inf, 0.1831155143287033, 0.1526348994579166, 0.14875382682867347, 0.1478203418906778] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 80, 12]]
** centroid: 1, normalized-entropy: 0.5586293734521991, [(2, 80), (3, 12)]
*** center 2: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [56, 23, 0]]
** centroid: 3, normalized-entropy: 0.8701883352082787, [(1, 56), (2, 23)]
*** center 4: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [68, 17, 0]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(1, 68), (2, 17)]
*** center 6: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 58, 0]]
** centroid: 7, normalized-entropy: 0.39993804743902767, [(1, 5), (2, 58)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20191005761176348] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20191005761176348, 0.15346021213009953] ***
*** starting iteration: 2; err: [Inf, 0.20191005761176348, 0.15346021213009953] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20191005761176348, 0.15346021213009953, 0.14880291840061546] ***
*** starting iteration: 3; err: [Inf, 0.20191005761176348, 0.15346021213009953, 0.14880291840061546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20191005761176348, 0.15346021213009953, 0.14880291840061546, 0.14791939613595606] ***
*** finished computation of 7 references, err: [Inf, 0.20191005761176348, 0.15346021213009953, 0.14880291840061546, 0.14791939613595606] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [54, 16, 0]]
** centroid: 1, normalized-entropy: 0.775512658133148, [(1, 54), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [38, 8, 0]]
** centroid: 2, normalized-entropy: 0.6665783579949205, [(1, 38), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 73, 11]]
** centroid: 3, normalized-entropy: 0.5600443203590992, [(2, 73), (3, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [70, 18, 0]]
** centroid: 4, normalized-entropy: 0.7309263775906009, [(1, 70), (2, 18)]
*** center 5: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 61, 0]]
** centroid: 6, normalized-entropy: 0.11911602665564841, [(1, 1), (2, 61)]
*** center 7: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18728280828800054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18728280828800054, 0.15245361251942813] ***
*** starting iteration: 2; err: [Inf, 0.18728280828800054, 0.15245361251942813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18728280828800054, 0.15245361251942813, 0.14736174218170345] ***
*** starting iteration: 3; err: [Inf, 0.18728280828800054, 0.15245361251942813, 0.14736174218170345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18728280828800054, 0.15245361251942813, 0.14736174218170345, 0.14648874901607634] ***
*** finished computation of 7 references, err: [Inf, 0.18728280828800054, 0.15245361251942813, 0.14736174218170345, 0.14648874901607634] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [1, 54, 0]]
** centroid: 1, normalized-entropy: 0.13110652958234514, [(1, 1), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [68, 18, 0]]
** centroid: 2, normalized-entropy: 0.7401470427139037, [(1, 68), (2, 18)]
*** center 3: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 65, 14]]
** centroid: 4, normalized-entropy: 0.6739468651941155, [(2, 65), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [66, 24, 0]]
** centroid: 5, normalized-entropy: 0.8366407419411671, [(1, 66), (2, 24)]
*** center 6: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [30, 7, 0]]
** centroid: 7, normalized-entropy: 0.699772221773307, [(1, 30), (2, 7)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19764148933440448] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19764148933440448, 0.15151817064732312] ***
*** starting iteration: 2; err: [Inf, 0.19764148933440448, 0.15151817064732312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19764148933440448, 0.15151817064732312, 0.14595642730034888] ***
*** starting iteration: 3; err: [Inf, 0.19764148933440448, 0.15151817064732312, 0.14595642730034888] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19764148933440448, 0.15151817064732312, 0.14595642730034888, 0.14505351032409816] ***
*** finished computation of 7 references, err: [Inf, 0.19764148933440448, 0.15151817064732312, 0.14595642730034888, 0.14505351032409816] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 70, 6]]
** centroid: 1, normalized-entropy: 0.39845927409523557, [(2, 70), (3, 6)]
*** center 2: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [39, 11, 0]]
** centroid: 3, normalized-entropy: 0.7601675029619658, [(1, 39), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [76, 12, 0]]
** centroid: 4, normalized-entropy: 0.5746356978376794, [(1, 76), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [49, 27, 0]]
** centroid: 5, normalized-entropy: 0.9386808697586004, [(1, 49), (2, 27)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 65, 7]]
** centroid: 6, normalized-entropy: 0.460127886147135, [(2, 65), (3, 7)]
*** center 7: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19047497854498216] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19047497854498216, 0.1553728229785338] ***
*** starting iteration: 2; err: [Inf, 0.19047497854498216, 0.1553728229785338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19047497854498216, 0.1553728229785338, 0.15034959764964878] ***
*** starting iteration: 3; err: [Inf, 0.19047497854498216, 0.1553728229785338, 0.15034959764964878] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19047497854498216, 0.1553728229785338, 0.15034959764964878, 0.14842070923931897] ***
*** starting iteration: 4; err: [Inf, 0.19047497854498216, 0.1553728229785338, 0.15034959764964878, 0.14842070923931897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19047497854498216, 0.1553728229785338, 0.15034959764964878, 0.14842070923931897, 0.14750574592500926] ***
*** finished computation of 7 references, err: [Inf, 0.19047497854498216, 0.1553728229785338, 0.15034959764964878, 0.14842070923931897, 0.14750574592500926] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 74, 16]]
** centroid: 1, normalized-entropy: 0.6751914401458716, [(2, 74), (3, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [64, 4, 0]]
** centroid: 3, normalized-entropy: 0.32275695889739825, [(1, 64), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [40, 25, 0]]
** centroid: 4, normalized-entropy: 0.961236604722876, [(1, 40), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [66, 8, 0]]
** centroid: 5, normalized-entropy: 0.4941829348497886, [(1, 66), (2, 8)]
*** center 6: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 58, 0]]
** centroid: 7, normalized-entropy: 0.12394986771100755, [(1, 1), (2, 58)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19351555854454636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19351555854454636, 0.15288584201596678] ***
*** starting iteration: 2; err: [Inf, 0.19351555854454636, 0.15288584201596678] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19351555854454636, 0.15288584201596678, 0.1492661225926131] ***
*** starting iteration: 3; err: [Inf, 0.19351555854454636, 0.15288584201596678, 0.1492661225926131] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19351555854454636, 0.15288584201596678, 0.1492661225926131, 0.14883899018820376] ***
*** finished computation of 7 references, err: [Inf, 0.19351555854454636, 0.15288584201596678, 0.1492661225926131, 0.14883899018820376] ***
*** center 1: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [56, 9, 0]]
** centroid: 2, normalized-entropy: 0.5801954953637372, [(1, 56), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 56, 15]]
** centroid: 3, normalized-entropy: 0.743898745288434, [(2, 56), (3, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [25, 60, 0]]
** centroid: 5, normalized-entropy: 0.8739810481273581, [(1, 25), (2, 60)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [11, 52, 0]]
** centroid: 6, normalized-entropy: 0.6681273338436138, [(1, 11), (2, 52)]
*** center 7: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1989598536025733] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1989598536025733, 0.14857027487456798] ***
*** starting iteration: 2; err: [Inf, 0.1989598536025733, 0.14857027487456798] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1989598536025733, 0.14857027487456798, 0.14310529062151908] ***
*** starting iteration: 3; err: [Inf, 0.1989598536025733, 0.14857027487456798, 0.14310529062151908] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1989598536025733, 0.14857027487456798, 0.14310529062151908, 0.14274622046016155] ***
*** finished computation of 7 references, err: [Inf, 0.1989598536025733, 0.14857027487456798, 0.14310529062151908, 0.14274622046016155] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [76, 4, 0]]
** centroid: 1, normalized-entropy: 0.2863969571159561, [(1, 76), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 40, 15]]
** centroid: 2, normalized-entropy: 0.8453509366224364, [(2, 40), (3, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [71, 1, 0]]
** centroid: 4, normalized-entropy: 0.1055910363751953, [(1, 71), (2, 1)]
*** center 5: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [7, 67, 0]]
** centroid: 6, normalized-entropy: 0.45162282218200417, [(1, 7), (2, 67)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 66, 0]]
** centroid: 7, normalized-entropy: 0.1914332548141934, [(1, 2), (2, 66)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19301127274334431] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19301127274334431, 0.1507638951810077] ***
*** starting iteration: 2; err: [Inf, 0.19301127274334431, 0.1507638951810077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19301127274334431, 0.1507638951810077, 0.14687958068400622] ***
*** starting iteration: 3; err: [Inf, 0.19301127274334431, 0.1507638951810077, 0.14687958068400622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19301127274334431, 0.1507638951810077, 0.14687958068400622, 0.14616911640204489] ***
*** finished computation of 7 references, err: [Inf, 0.19301127274334431, 0.1507638951810077, 0.14687958068400622, 0.14616911640204489] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [24, 61, 0]]
** centroid: 1, normalized-entropy: 0.8586370819183629, [(1, 24), (2, 61)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [44, 4, 0]]
** centroid: 2, normalized-entropy: 0.4138168503036336, [(1, 44), (2, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 44, 13]]
** centroid: 4, normalized-entropy: 0.7746319868686841, [(2, 44), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [72, 7, 0]]
** centroid: 5, normalized-entropy: 0.43180499427520785, [(1, 72), (2, 7)]
*** center 6: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 65, 0]]
** centroid: 7, normalized-entropy: 0.11327430349709665, [(1, 1), (2, 65)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2021164542939514] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2021164542939514, 0.1491729953843169] ***
*** starting iteration: 2; err: [Inf, 0.2021164542939514, 0.1491729953843169] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2021164542939514, 0.1491729953843169, 0.1448080571182072] ***
*** starting iteration: 3; err: [Inf, 0.2021164542939514, 0.1491729953843169, 0.1448080571182072] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2021164542939514, 0.1491729953843169, 0.1448080571182072, 0.14404310810565948] ***
*** finished computation of 7 references, err: [Inf, 0.2021164542939514, 0.1491729953843169, 0.1448080571182072, 0.14404310810565948] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [56, 31, 0]]
** centroid: 1, normalized-entropy: 0.9395876193289702, [(1, 56), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [38, 6, 0]]
** centroid: 2, normalized-entropy: 0.5746356978376794, [(1, 38), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 61, 16]]
** centroid: 3, normalized-entropy: 0.7372413771710565, [(2, 61), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [66, 12, 0]]
** centroid: 5, normalized-entropy: 0.6193821946787638, [(1, 66), (2, 12)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 67, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19260923909023403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19260923909023403, 0.1511875275252387] ***
*** starting iteration: 2; err: [Inf, 0.19260923909023403, 0.1511875275252387] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19260923909023403, 0.1511875275252387, 0.14716648663626983] ***
*** starting iteration: 3; err: [Inf, 0.19260923909023403, 0.1511875275252387, 0.14716648663626983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19260923909023403, 0.1511875275252387, 0.14716648663626983, 0.14665412153396756] ***
*** finished computation of 7 references, err: [Inf, 0.19260923909023403, 0.1511875275252387, 0.14716648663626983, 0.14665412153396756] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [13, 72, 0]]
** centroid: 1, normalized-entropy: 0.617151919200282, [(1, 13), (2, 72)]
*** center 2: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 6, 0]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(1, 48), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [79, 5, 0]]
** centroid: 4, normalized-entropy: 0.3255517134879513, [(1, 79), (2, 5)]
*** center 5: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 61, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 35, 16]]
** centroid: 7, normalized-entropy: 0.8974271930876951, [(2, 35), (3, 16)]
finished with 9 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 358,3 => 28,1 => 614), Dict(2 => 387,3 => 32,1 => 581))
[ Info: ===== scores for single classifier: {"micro_f1":0.929,"precision":0.929,"recall":0.929,"macro_recall":0.9483367208220108,"macro_f1":0.8866292555012377,"accuracy":0.929,"class_f1":{"2":0.9076723016905073,"3":0.8,"1":0.9522154648132058},"class_precision":{"2":0.9136125654450262,"3":0.6666666666666666,"1":0.9614035087719298},"class_recall":{"2":0.9018087855297158,"3":1.0,"1":0.9432013769363167}}
[ Info: ===== scores for 1: {"micro_f1":0.956,"precision":0.956,"recall":0.956,"macro_recall":0.9692917109560427,"macro_f1":0.9262620655290812,"accuracy":0.956,"class_f1":{"2":0.9435897435897436,"3":0.8648648648648648,"1":0.9703315881326353},"class_precision":{"2":0.9363867684478372,"3":0.7619047619047619,"1":0.984070796460177},"class_recall":{"2":0.9509043927648578,"3":1.0,"1":0.9569707401032702}}
[ Info: ===== scores for 5: {"micro_f1":0.9500000000000001,"precision":0.95,"recall":0.95,"macro_recall":0.9669997820740326,"macro_f1":0.911808058017561,"accuracy":0.95,"class_f1":{"2":0.9370277078085641,"3":0.8311688311688311,"1":0.9672276350752879},"class_precision":{"2":0.914004914004914,"3":0.7111111111111111,"1":0.9963503649635036},"class_recall":{"2":0.9612403100775194,"3":1.0,"1":0.9397590361445783}}
[ Info: ===== scores for 7: {"micro_f1":0.951,"precision":0.951,"recall":0.951,"macro_recall":0.9681487114941865,"macro_f1":0.9125722327605055,"accuracy":0.951,"class_f1":{"2":0.9385194479297365,"3":0.8311688311688311,"1":0.9680284191829486},"class_precision":{"2":0.9121951219512195,"3":0.7111111111111111,"1":1.0},"class_recall":{"2":0.9664082687338501,"3":1.0,"1":0.9380378657487092}}
[ Info: ===== scores for 9: {"micro_f1":0.951,"precision":0.951,"recall":0.951,"macro_recall":0.9678611085167543,"macro_f1":0.9092738999219722,"accuracy":0.951,"class_f1":{"2":0.9383647798742137,"3":0.8205128205128205,"1":0.9689440993788819},"class_precision":{"2":0.9142156862745098,"3":0.6956521739130435,"1":1.0},"class_recall":{"2":0.9638242894056848,"3":1.0,"1":0.9397590361445783}}
[ Info: ===== scores for 11: {"micro_f1":0.954,"precision":0.954,"recall":0.954,"macro_recall":0.9692946759351915,"macro_f1":0.9113388070582684,"accuracy":0.954,"class_f1":{"2":0.9417721518987341,"3":0.8205128205128205,"1":0.9717314487632508},"class_precision":{"2":0.9230769230769231,"3":0.6956521739130435,"1":0.9981851179673321},"class_recall":{"2":0.9612403100775194,"3":1.0,"1":0.9466437177280551}}
(score = 0.95, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.95, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.956, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.956, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.952, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.952, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.953, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.953, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.957, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.957, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.95, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.95, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.952, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.952, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.951, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.951, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.957,"k":5,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.957,"precision":0.957,"recall":0.957,"macro_recall":0.942062222681794,"macro_f1":0.9085627570403529,"accuracy":0.957,"class_f1":{"2":0.9456384323640962,"3":0.8055555555555555,"1":0.9744942832014073},"class_precision":{"2":0.9257425742574258,"3":0.725,"1":0.9964028776978417},"class_recall":{"2":0.9664082687338501,"3":0.90625,"1":0.9535283993115319}}
Test Summary: | Pass  Total
AKNC          |    8      8
[573, 6, 1, 2, 5, 3, 10, 2, 1, 5, 2, 5, 3, 6, 7, 7, 2, 5, 9, 5, 5, 4, 11, 3, 29, 5, 11, 2, 2, 21, 1, 1, 8, 5, 19, 8, 25, 7, 17, 15, 6, 8, 4, 3, 5, 6, 6, 23, 16, 25, 13, 44, 6, 21, 16, 4, 9, 14, 12, 18, 1, 13, 2, 1, 13, 6, 2, 11, 27, 43, 6, 50, 5, 124, 9, 13, 7, 19, 35, 33, 1, 4, 2, 18, 35, 3, 5, 53, 30, 16, 10, 16, 20, 13, 37, 87, 30, 32, 20, 232, 17, 1, 5, 1, 7, 38, 13, 7, 8, 5, 33, 19, 52, 6, 133, 11, 15, 7, 5, 13, 9, 17, 1, 9, 29, 4, 80, 40, 15, 15, 122, 45, 10, 19, 14, 46, 6, 20, 7, 11, 15, 30, 9, 42, 7, 19, 34, 4, 35, 4, 11, 12, 10, 21, 26, 504, 8, 33, 9, 42, 43, 159, 6, 58, 17, 9, 23, 41, 11, 37, 12, 21, 11, 72, 10, 19, 11, 2, 10, 4, 51, 48, 47, 151, 3, 15, 46, 27, 15, 23, 32, 54, 70, 1, 14, 25, 20, 48, 3, 96, 3, 7, 23, 7, 17, 27, 40, 47, 30, 8, 6, 21, 53, 39, 8, 26, 19, 91, 3, 33, 55, 10, 11, 6, 24, 66, 27, 46, 19, 15, 11, 58, 10, 128, 33, 14, 30, 13, 18, 26, 124, 833, 40, 14, 13, 11, 4, 43, 91, 30, 85, 18, 113, 13, 2, 18, 38, 4, 93, 14, 9, 68, 110, 10, 5, 30, 48, 11, 8, 4, 27, 184, 22, 207, 8, 10, 4, 132, 285, 293, 17, 14, 10, 37, 5, 13, 20, 26, 53, 12, 22, 11, 31, 3, 6, 18, 22, 82, 5, 33]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6340000000000002, speedup = 0.3421647863354986, eval_ratio = 0.07624700000000001)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.41404699900793684,"recall":0.40538194444444475,"f1":null,"seconds":0.0002372153103351593,"exhaustive_search_seconds":0.00044081173837184906,"evaluations":507.2109375,"distances_sum":1702.842964607258}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5607638888888886,"recall":0.5607638888888886,"f1":null,"seconds":0.0006285272538661957,"exhaustive_search_seconds":0.00044081173837184906,"evaluations":638.6171875,"distances_sum":1647.2534214345246}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6822916666666659,"recall":0.6822916666666659,"f1":null,"seconds":0.00046071968972682953,"exhaustive_search_seconds":0.00044081173837184906,"evaluations":791.203125,"distances_sum":1582.297862223139}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7534722222222214,"recall":0.7534722222222214,"f1":0.7534722222222214,"seconds":0.0005431212484836578,"exhaustive_search_seconds":0.00044081173837184906,"evaluations":905.3125,"distances_sum":1559.7818960824306}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7994791666666659,"recall":0.7994791666666659,"f1":0.7994791666666659,"seconds":0.000734696164727211,"exhaustive_search_seconds":0.00044081173837184906,"evaluations":1037.59375,"distances_sum":1544.4132681657532}
KCenters.DeloneInvIndex> reached performance {"precision":0.8376736111111103,"recall":0.8376736111111103,"f1":0.8376736111111103,"seconds":0.0008805915713310242,"exhaustive_search_seconds":0.00044081173837184906,"evaluations":1157.0,"distances_sum":1532.7390465831324}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8210000000000002, speedup = 0.3769589906451724, eval_ratio = 0.11574000000000001)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
